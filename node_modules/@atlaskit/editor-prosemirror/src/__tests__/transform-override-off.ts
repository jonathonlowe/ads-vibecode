import { MetadataStep } from '../transform-override';
import { Step } from '../transform';
import { defaultSchema } from '@atlaskit/adf-schema/schema-default';

describe('prosemirror-transform-override when off', () => {
  it('should still transform steps without Metadata as expected', () => {
    const json = { stepType: 'replace', to: 15, from: 10 };
    const parsedStep = Step.fromJSON(defaultSchema, json);
    const expectedStep = {
      stepType: 'replace',
      to: 15,
      from: 10,
    };
    expect(parsedStep.toJSON()).toEqual(expectedStep);
  });

  it('should not preserve metadata when converting toJSON', () => {
    const json = {
      stepType: 'replace',
      to: 15,
      from: 10,
      metadata: { source: 'synchrony-reconcile' },
    };
    const parsedStep = Step.fromJSON(defaultSchema, json) as MetadataStep;
    const unparsedStep = parsedStep.toJSON();
    expect(unparsedStep).toEqual({
      from: 10,
      to: 15,
      stepType: 'replace',
    });
  });

  it('should preserve class metadata when converting toJSON', () => {
    const json = {
      stepType: 'replace',
      to: 15,
      from: 10,
    };
    const parsedStep = Step.fromJSON(defaultSchema, json) as MetadataStep;
    parsedStep.metadata = { testField: 'Im a test' };
    const unparsedStep = parsedStep.toJSON();
    expect(unparsedStep).toEqual({
      from: 10,
      to: 15,
      stepType: 'replace',
    });
  });

  it('should preserve class metadata when converting toJSON and json metadata is present', () => {
    const json = {
      stepType: 'replace',
      to: 15,
      from: 10,
      metadata: { source: 'synchrony' },
    };
    const parsedStep = Step.fromJSON(defaultSchema, json) as MetadataStep;
    parsedStep.metadata = { testField: 'Im a test' };
    const unparsedStep = parsedStep.toJSON();
    expect(unparsedStep).toEqual({
      from: 10,
      to: 15,
      stepType: 'replace',
    });
  });

  it('should preserve data when converting toJSON and metadata is not present', () => {
    const json = {
      stepType: 'replace',
      to: 15,
      from: 10,
    };
    const parsedStep = Step.fromJSON(defaultSchema, json) as MetadataStep;
    const unparsedStep = parsedStep.toJSON();
    expect(unparsedStep).toEqual({
      from: 10,
      to: 15,
      stepType: 'replace',
    });
  });
});
