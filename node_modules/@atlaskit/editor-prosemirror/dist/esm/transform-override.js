import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { fg } from '@atlaskit/platform-feature-flags';
import { Step } from 'prosemirror-transform';
// Using this avoids infinite recursion, as referencing Step.fromJSON inside Step.fromJSON
// will refer to the reassigned version, not the original version
var originalFromJSON = Step.fromJSON;
Step.fromJSON = function (schema, jsonStep) {
  var stepImplementation = originalFromJSON(schema, jsonStep);

  // See https://switcheroo.atlassian.com/ui/gates/4e7e1e8c-9126-4dba-a2a3-1c2b86f81c36/key/platform_editor_metadata_steps
  if (!fg('platform_editor_metadata_step')) {
    return stepImplementation;
  }
  return new Proxy(stepImplementation, {
    get: function get(target, prop, receiver) {
      if (prop === 'toJSON') {
        var toJSONfunc = Reflect.get(target, prop, receiver);
        // @ts-expect-error Metadata may or may not exist at this stage, depending on step type,
        // but also additions outside of the type system that others may have done.
        var classMetadata = target.metadata;
        return new Proxy(toJSONfunc, {
          apply: function apply(target, thisArg, argArray) {
            var originalResult = Reflect.apply(target, thisArg, argArray);
            var metadata = _objectSpread(_objectSpread(_objectSpread({}, jsonStep.metadata), classMetadata), originalResult.metadata);
            return _objectSpread(_objectSpread({}, originalResult), Object.keys(metadata).length === 0 ? {} : {
              metadata: metadata
            });
          }
        });
      }
      return Reflect.get(target, prop, receiver);
    }
  });
};
export { Step };