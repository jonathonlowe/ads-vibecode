"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _messages = require("@atlaskit/editor-common/messages");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _edit = _interopRequireDefault(require("@atlaskit/icon/core/edit"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-down"));
var _chevronDown2 = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _menu = require("@atlaskit/menu");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _utils = require("../../pm-plugins/utils");
var _editDatasourceAction = require("../editDatasourceAction");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var dropdownExpandContainer = (0, _react2.css)({
  margin: "0px ".concat("var(--ds-space-negative-050, -4px)")
});
var EditToolbarButtonPresentation = function EditToolbarButtonPresentation(_ref) {
  var datasourceId = _ref.datasourceId,
    currentAppearance = _ref.currentAppearance,
    editorAnalyticsApi = _ref.editorAnalyticsApi,
    editVariant = _ref.editVariant,
    editorView = _ref.editorView,
    extensionKey = _ref.extensionKey,
    onLinkEditClick = _ref.onLinkEditClick,
    intl = _ref.intl;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var containerRef = (0, _react.useRef)();
  var toggleOpen = function toggleOpen() {
    return setIsOpen(function (open) {
      return !open;
    });
  };
  var onClose = function onClose() {
    return setIsOpen(false);
  };
  var onEditLink = (0, _react.useCallback)(function () {
    if (editorView) {
      onLinkEditClick(editorView.state, editorView.dispatch);
      (0, _utils.focusEditorView)(editorView);
    }
  }, [editorView, onLinkEditClick]);
  var onEditDatasource = (0, _react.useCallback)(function () {
    if (editorView && datasourceId) {
      (0, _editDatasourceAction.editDatasource)(datasourceId, editorAnalyticsApi, currentAppearance, extensionKey)(editorView.state, editorView.dispatch);
      (0, _utils.focusEditorView)(editorView);
    }
  }, [currentAppearance, datasourceId, editorAnalyticsApi, editorView, extensionKey]);
  var icon = (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? (0, _react2.jsx)(_edit.default, {
    label: ""
  }) : undefined;
  switch (editVariant) {
    case 'edit-link':
      {
        return (0, _react2.jsx)(_compiled.Flex, {
          gap: "space.050"
        }, (0, _react2.jsx)(_ui.FloatingToolbarButton, {
          testId: "edit-link",
          onClick: onEditLink,
          icon: icon
        }, (0, _experiments.editorExperiment)('platform_editor_controls', 'control') && (0, _react2.jsx)(_reactIntlNext.FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , _messages.linkToolbarMessages.editLink)), (0, _react2.jsx)(_ui.FloatingToolbarSeparator, null));
      }
    case 'edit-datasource':
      {
        return (0, _react2.jsx)(_compiled.Flex, {
          gap: "space.050"
        }, (0, _react2.jsx)(_ui.FloatingToolbarButton, {
          testId: "edit-datasource",
          tooltipContent: intl.formatMessage(_messages.linkToolbarMessages.editDatasourceStandaloneTooltip),
          onClick: onEditDatasource
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , _messages.linkToolbarMessages.editDatasourceStandalone)), (0, _react2.jsx)(_ui.FloatingToolbarSeparator, null));
      }
    case 'edit-dropdown':
      {
        var trigger = (0, _react2.jsx)(_compiled.Flex, {
          gap: "space.050"
        }, (0, _react2.jsx)(_ui.FloatingToolbarButton, {
          testId: "edit-dropdown-trigger",
          iconAfter: (0, _react2.jsx)("span", {
            css: dropdownExpandContainer
          }, (0, _platformFeatureFlags.fg)('platform-editor-plugin-card-icon-migration') ? (0, _react2.jsx)(_chevronDown2.default, {
            label: intl.formatMessage(_messages.cardMessages.editDropdownTriggerTitle)
          }) : (0, _react2.jsx)(_chevronDown.default, {
            label: intl.formatMessage(_messages.cardMessages.editDropdownTriggerTitle)
          })),
          onClick: toggleOpen,
          selected: isOpen,
          disabled: false,
          ariaHasPopup: true
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , _messages.cardMessages.editDropdownTriggerTitle)), (0, _react2.jsx)(_ui.FloatingToolbarSeparator, null));
        return (0, _react2.jsx)(_compiled.Flex, {
          ref: containerRef
        }, (0, _react2.jsx)(_uiMenu.DropdownContainer, {
          mountTo: containerRef.current,
          isOpen: isOpen,
          handleClickOutside: onClose,
          handleEscapeKeydown: onClose,
          trigger: trigger,
          scrollableElement: containerRef.current,
          arrowKeyNavigationProviderOptions: {
            type: _uiMenu.ArrowKeyNavigationType.MENU
          }
        }, (0, _react2.jsx)(_menu.ButtonItem, {
          key: "edit.link",
          onClick: onEditLink,
          testId: "edit-dropdown-edit-link-item"
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , _messages.cardMessages.editDropdownEditLinkTitle)), (0, _react2.jsx)(_menu.ButtonItem, {
          key: "edit.datasource",
          onClick: onEditDatasource,
          testId: "edit-dropdown-edit-datasource-item"
        }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , _messages.cardMessages.editDropdownEditDatasourceTitle))));
      }
    case 'none':
    default:
      return null;
  }
};
var _default = exports.default = EditToolbarButtonPresentation;