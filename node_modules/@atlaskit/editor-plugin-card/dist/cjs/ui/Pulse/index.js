"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiscoveryPulse = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useAnalyticsEvents2 = require("@atlaskit/analytics-next/useAnalyticsEvents");
var _linkingCommon = require("@atlaskit/linking-common");
var _localStorage = require("../local-storage");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DiscoveryPulse = exports.DiscoveryPulse = function DiscoveryPulse(_ref) {
  var children = _ref.children,
    localStorageKey = _ref.localStorageKey,
    localStorageKeyExpirationInMs = _ref.localStorageKeyExpirationInMs,
    _ref$discoveryMode = _ref.discoveryMode,
    discoveryMode = _ref$discoveryMode === void 0 ? 'iteration' : _ref$discoveryMode,
    shouldShowPulse = _ref.shouldShowPulse,
    testId = _ref.testId,
    isInline = _ref.isInline;
  var discovered = (0, _localStorage.isLocalStorageKeyDiscovered)(localStorageKey);
  var showPulse = shouldShowPulse !== null && shouldShowPulse !== void 0 ? shouldShowPulse : !discovered;
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  (0, _react.useEffect)(function () {
    if (showPulse) {
      createAnalyticsEvent({
        action: 'viewed',
        actionSubject: 'pulse',
        eventType: 'ui',
        attributes: {
          pulseIdentifier: localStorageKey
        }
      }).fire('media');
    }
  }, [createAnalyticsEvent, discovered, localStorageKey, showPulse]);
  var onDiscovery = (0, _react.useCallback)(function () {
    if (!discovered) {
      (0, _localStorage.markLocalStorageKeyDiscovered)(localStorageKey, localStorageKeyExpirationInMs);
    }
  }, [discovered, localStorageKey, localStorageKeyExpirationInMs]);
  return /*#__PURE__*/_react.default.createElement(_linkingCommon.Pulse, {
    onAnimationIteration: discoveryMode === 'iteration' ? onDiscovery : undefined,
    onAnimationStart: discoveryMode === 'start' ? onDiscovery : undefined,
    showPulse: showPulse,
    testId: testId,
    isInline: isInline
  }, children);
};