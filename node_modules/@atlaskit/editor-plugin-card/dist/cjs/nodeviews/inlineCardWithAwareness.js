"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineCardWithAwareness = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _hooks = require("@atlaskit/editor-common/hooks");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _actions = require("../pm-plugins/actions");
var _pluginKey = require("../pm-plugins/plugin-key");
var _AwarenessWrapper = require("../ui/AwarenessWrapper");
var _OpenButtonOverlay = _interopRequireDefault(require("../ui/OpenButtonOverlay"));
var _inlineCard = require("./inlineCard");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var InlineCardWithAwareness = exports.InlineCardWithAwareness = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _pluginInjectionApi$c;
  var node = _ref.node,
    cardContext = _ref.cardContext,
    actionOptions = _ref.actionOptions,
    useAlternativePreloader = _ref.useAlternativePreloader,
    view = _ref.view,
    getPos = _ref.getPos,
    pluginInjectionApi = _ref.pluginInjectionApi,
    onClick = _ref.onClick,
    isPulseEnabled = _ref.isPulseEnabled,
    isOverlayEnabled = _ref.isOverlayEnabled,
    isSelected = _ref.isSelected,
    isPageSSRed = _ref.isPageSSRed,
    appearance = _ref.appearance;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isHovered = _useState2[0],
    setIsHovered = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isInserted = _useState4[0],
    setIsInserted = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isResolvedViewRendered = _useState6[0],
    setIsResolvedViewRendered = _useState6[1];
  var editorAppearance = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c = pluginInjectionApi.card.sharedState.currentState()) === null || _pluginInjectionApi$c === void 0 ? void 0 : _pluginInjectionApi$c.editorAppearance;
  var onResolve = (0, _react.useCallback)(function (tr, title) {
    if ((0, _platformFeatureFlags.fg)('platform_editor_fix_card_plugin_state')) {
      var metadata = tr.getMeta(_pluginKey.pluginKey);
      if (metadata && metadata.type === 'REGISTER') {
        (0, _actions.registerRemoveOverlay)(function () {
          return setIsInserted(false);
        }, metadata.info)(tr);
      } else {
        (0, _actions.registerRemoveOverlay)(function () {
          return setIsInserted(false);
        })(tr);
      }
    } else {
      (0, _actions.registerRemoveOverlay)(function () {
        return setIsInserted(false);
      })(tr);
    }
    if (title) {
      setIsResolvedViewRendered(true);
    }
  }, []);
  var markMostRecentlyInsertedLink = (0, _react.useCallback)(function (isLinkMostRecentlyInserted) {
    if (isOverlayEnabled) {
      setIsInserted(isLinkMostRecentlyInserted);
    }
  }, [isOverlayEnabled]);
  var setOverlayHoveredStyles = (0, _react.useCallback)(function (isHovered) {
    if (isOverlayEnabled) {
      setIsHovered(isHovered);
    }
  }, [isOverlayEnabled]);
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['editorViewMode']),
    editorViewModeState = _useSharedPluginState.editorViewModeState;
  var innerCardWithOpenButtonOverlay = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_OpenButtonOverlay.default, {
      isVisible: isResolvedViewRendered,
      url: node.attrs.url,
      editorAppearance: editorAppearance
    }, /*#__PURE__*/_react.default.createElement(_inlineCard.InlineCard, {
      node: node,
      view: view,
      getPos: getPos,
      useAlternativePreloader: useAlternativePreloader,
      actionOptions: actionOptions,
      onResolve: onResolve,
      onClick: onClick,
      cardContext: cardContext,
      isHovered: isHovered,
      isPageSSRed: isPageSSRed
    }));
  }, [isResolvedViewRendered, node, editorAppearance, view, getPos, useAlternativePreloader, actionOptions, onResolve, onClick, cardContext, isHovered, isPageSSRed]);
  var innerCardOriginal = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_inlineCard.InlineCard, {
      node: node,
      view: view,
      getPos: getPos,
      useAlternativePreloader: useAlternativePreloader,
      actionOptions: actionOptions,
      onResolve: onResolve,
      onClick: onClick,
      cardContext: cardContext,
      isHovered: isHovered,
      isPageSSRed: isPageSSRed
    });
  }, [actionOptions, cardContext, getPos, isHovered, node, onClick, onResolve, useAlternativePreloader, view, isPageSSRed]);
  var shouldShowOpenButtonOverlay = (0, _react.useMemo)(function () {
    return ((editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode) === 'edit' || editorAppearance === 'comment' && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6')) && (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1');
  }, [editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode, editorAppearance]);
  var innerCard = shouldShowOpenButtonOverlay ? innerCardWithOpenButtonOverlay : innerCardOriginal;
  var getPosFunction = typeof getPos === 'function' ? getPos : undefined;
  var placeholderUniqId = (getPosFunction === null || getPosFunction === void 0 ? void 0 : getPosFunction()) || 0;
  return isOverlayEnabled || isPulseEnabled ? /*#__PURE__*/_react.default.createElement(_AwarenessWrapper.AwarenessWrapper, {
    isOverlayEnabled: isOverlayEnabled,
    isPulseEnabled: isPulseEnabled,
    cardContext: cardContext,
    getPos: getPos,
    isHovered: isHovered,
    isInserted: isInserted,
    url: node.attrs.url,
    isSelected: isSelected,
    isResolvedViewRendered: isResolvedViewRendered,
    markMostRecentlyInsertedLink: markMostRecentlyInsertedLink,
    pluginInjectionApi: pluginInjectionApi,
    setOverlayHoveredStyles: setOverlayHoveredStyles,
    appearance: appearance
  }, innerCard) : /*#__PURE__*/_react.default.createElement("span", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "card",
    "data-vc": "editor-plugin-inline-card",
    "data-ssr-placeholder": "editor-plugin-inline-card-".concat(placeholderUniqId),
    "data-ssr-placeholder-replace": "editor-plugin-inline-card-".concat(placeholderUniqId)
  }, innerCard);
});