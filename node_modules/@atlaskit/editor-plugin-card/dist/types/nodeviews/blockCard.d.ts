import React from 'react';
import ReactNodeView, { type getInlineNodeViewProducer } from '@atlaskit/editor-common/react-node-view';
import type { PMPluginFactoryParams } from '@atlaskit/editor-common/types';
import type { Node } from '@atlaskit/editor-prosemirror/model';
import type { Decoration, DecorationSource, EditorView } from '@atlaskit/editor-prosemirror/view';
import { Datasource } from '../nodeviews/datasource';
import type { SmartCardProps } from './genericCard';
export declare class BlockCardComponent extends React.PureComponent<SmartCardProps & {
    id?: string;
}> {
    private scrollContainer?;
    constructor(props: SmartCardProps & {
        id?: string;
    });
    onResolve: (data: {
        url?: string | undefined;
        title?: string | undefined;
    }) => void;
    gapCursorSpan: () => React.JSX.Element | undefined;
    onError: ({ err }: {
        err?: Error | undefined;
    }) => void;
    render(): React.JSX.Element;
}
export type BlockCardNodeViewProps = Pick<SmartCardProps, 'actionOptions' | 'pluginInjectionApi' | 'onClickCallback'>;
export declare class BlockCard extends ReactNodeView<BlockCardNodeViewProps> {
    private id;
    unsubscribe: (() => void) | undefined;
    createDomRef(): HTMLElement;
    private updateContentEditable;
    validUpdate(currentNode: Node, newNode: Node): boolean;
    update(node: Node, decorations: ReadonlyArray<Decoration>, _innerDecorations?: DecorationSource): boolean;
    render(): React.JSX.Element;
    destroy(): void;
    private removeCard;
}
export interface BlockCardNodeViewProperties {
    pmPluginFactoryParams: PMPluginFactoryParams;
    actionOptions: BlockCardNodeViewProps['actionOptions'];
    pluginInjectionApi: BlockCardNodeViewProps['pluginInjectionApi'];
    onClickCallback: BlockCardNodeViewProps['onClickCallback'];
    allowDatasource: boolean | undefined;
    inlineCardViewProducer: ReturnType<typeof getInlineNodeViewProducer>;
}
export declare const blockCardNodeView: ({ pmPluginFactoryParams, actionOptions, pluginInjectionApi, onClickCallback, allowDatasource, inlineCardViewProducer, }: BlockCardNodeViewProperties) => (node: Node, view: EditorView, getPos: () => number | undefined, decorations: readonly Decoration[]) => import("prosemirror-view").NodeView | Datasource | BlockCard;
