import { type EditorState, type ReadonlyTransaction } from '@atlaskit/editor-prosemirror/state';
import { type CardPluginState, type Request } from '../../types';
export declare const getPluginState: (editorState: EditorState) => CardPluginState | undefined;
export declare const getPluginStateWithUpdatedPos: (pluginState: CardPluginState, tr: ReadonlyTransaction) => {
    requests: {
        pos: number;
        url: string;
        appearance: import("@atlaskit/editor-common/provider-factory").CardAppearance;
        compareLinkText: boolean;
        source: import("@atlaskit/editor-common/card").CardReplacementInputMethod;
        previousAppearance?: "url" | import("@atlaskit/editor-common/provider-factory").CardAppearance | undefined;
        analyticsAction?: import("@atlaskit/editor-common/analytics").ACTION | undefined;
        shouldReplaceLink?: boolean | undefined;
        sourceEvent?: import("@atlaskit/analytics-next").UIAnalyticsEvent | null | undefined;
    }[];
    cards: {
        pos: number;
        title?: string | undefined;
        url?: string | undefined;
        id?: string | undefined;
    }[];
    provider: import("@atlaskit/editor-common/provider-factory").CardProvider | null;
    datasourceStash: {
        [x: string]: {
            views: import("@atlaskit/linking-common").DatasourceAdfTableView[];
        };
    };
    showLinkingToolbar: boolean;
    smartLinkEvents?: import("@atlaskit/smart-card").SmartLinkEvents | undefined;
    editorAppearance?: import("@atlaskit/editor-common/types").EditorAppearance | undefined;
    showDatasourceModal: boolean;
    datasourceModalType?: import("@atlaskit/editor-common/types").DatasourceModalType | undefined;
    datasourceTableRef?: HTMLElement | undefined;
    layout?: "center" | "wide" | "full-width" | undefined;
    inlineCardAwarenessCandidatePosition?: number | undefined;
    overlayCandidatePosition?: number | undefined;
    removeOverlay?: (() => void) | undefined;
    selectedInlineLinkPosition?: number | undefined;
    allowEmbeds?: boolean | undefined;
    allowBlockCards?: boolean | undefined;
};
export declare const getNewRequests: (oldState: CardPluginState | undefined, currentState: CardPluginState) => Request[];
