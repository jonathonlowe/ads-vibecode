import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { pluginKey } from '../plugin-key';

// ============================================================================ //
// ============================== PLUGIN STATE ================================ //
// ============================================================================ //
// Used for interactions with the Card Plugin's state.
// ============================================================================ //
export var getPluginState = function getPluginState(editorState) {
  return pluginKey.getState(editorState);
};
export var getPluginStateWithUpdatedPos = function getPluginStateWithUpdatedPos(pluginState, tr) {
  return _objectSpread(_objectSpread({}, pluginState), {}, {
    requests: pluginState.requests.map(function (request) {
      return _objectSpread(_objectSpread({}, request), {}, {
        pos: tr.mapping.map(request.pos)
      });
    }),
    cards: pluginState.cards.map(function (card) {
      return _objectSpread(_objectSpread({}, card), {}, {
        pos: tr.mapping.map(card.pos)
      });
    })
  });
};
export var getNewRequests = function getNewRequests(oldState, currentState) {
  if (oldState) {
    return currentState.requests.filter(function (req) {
      return !oldState.requests.find(function (oldReq) {
        return isSameRequest(oldReq, req);
      });
    });
  }
  return currentState.requests;
};
var isSameRequest = function isSameRequest(requestA, requestB) {
  return requestA.url === requestB.url && requestA.pos === requestB.pos;
};