import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { memo, useCallback, useMemo, useState } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { registerRemoveOverlay } from '../pm-plugins/actions';
import { pluginKey } from '../pm-plugins/plugin-key';
import { AwarenessWrapper } from '../ui/AwarenessWrapper';
import OpenButtonOverlay from '../ui/OpenButtonOverlay';
import { InlineCard } from './inlineCard';
export var InlineCardWithAwareness = /*#__PURE__*/memo(function (_ref) {
  var _pluginInjectionApi$c;
  var node = _ref.node,
    cardContext = _ref.cardContext,
    actionOptions = _ref.actionOptions,
    useAlternativePreloader = _ref.useAlternativePreloader,
    view = _ref.view,
    getPos = _ref.getPos,
    pluginInjectionApi = _ref.pluginInjectionApi,
    onClick = _ref.onClick,
    isPulseEnabled = _ref.isPulseEnabled,
    isOverlayEnabled = _ref.isOverlayEnabled,
    isSelected = _ref.isSelected,
    isPageSSRed = _ref.isPageSSRed,
    appearance = _ref.appearance;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovered = _useState2[0],
    setIsHovered = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isInserted = _useState4[0],
    setIsInserted = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isResolvedViewRendered = _useState6[0],
    setIsResolvedViewRendered = _useState6[1];
  var editorAppearance = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c = pluginInjectionApi.card.sharedState.currentState()) === null || _pluginInjectionApi$c === void 0 ? void 0 : _pluginInjectionApi$c.editorAppearance;
  var onResolve = useCallback(function (tr, title) {
    if (fg('platform_editor_fix_card_plugin_state')) {
      var metadata = tr.getMeta(pluginKey);
      if (metadata && metadata.type === 'REGISTER') {
        registerRemoveOverlay(function () {
          return setIsInserted(false);
        }, metadata.info)(tr);
      } else {
        registerRemoveOverlay(function () {
          return setIsInserted(false);
        })(tr);
      }
    } else {
      registerRemoveOverlay(function () {
        return setIsInserted(false);
      })(tr);
    }
    if (title) {
      setIsResolvedViewRendered(true);
    }
  }, []);
  var markMostRecentlyInsertedLink = useCallback(function (isLinkMostRecentlyInserted) {
    if (isOverlayEnabled) {
      setIsInserted(isLinkMostRecentlyInserted);
    }
  }, [isOverlayEnabled]);
  var setOverlayHoveredStyles = useCallback(function (isHovered) {
    if (isOverlayEnabled) {
      setIsHovered(isHovered);
    }
  }, [isOverlayEnabled]);
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['editorViewMode']),
    editorViewModeState = _useSharedPluginState.editorViewModeState;
  var innerCardWithOpenButtonOverlay = useMemo(function () {
    return /*#__PURE__*/React.createElement(OpenButtonOverlay, {
      isVisible: isResolvedViewRendered,
      url: node.attrs.url,
      editorAppearance: editorAppearance
    }, /*#__PURE__*/React.createElement(InlineCard, {
      node: node,
      view: view,
      getPos: getPos,
      useAlternativePreloader: useAlternativePreloader,
      actionOptions: actionOptions,
      onResolve: onResolve,
      onClick: onClick,
      cardContext: cardContext,
      isHovered: isHovered,
      isPageSSRed: isPageSSRed
    }));
  }, [isResolvedViewRendered, node, editorAppearance, view, getPos, useAlternativePreloader, actionOptions, onResolve, onClick, cardContext, isHovered, isPageSSRed]);
  var innerCardOriginal = useMemo(function () {
    return /*#__PURE__*/React.createElement(InlineCard, {
      node: node,
      view: view,
      getPos: getPos,
      useAlternativePreloader: useAlternativePreloader,
      actionOptions: actionOptions,
      onResolve: onResolve,
      onClick: onClick,
      cardContext: cardContext,
      isHovered: isHovered,
      isPageSSRed: isPageSSRed
    });
  }, [actionOptions, cardContext, getPos, isHovered, node, onClick, onResolve, useAlternativePreloader, view, isPageSSRed]);
  var shouldShowOpenButtonOverlay = useMemo(function () {
    return ((editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode) === 'edit' || editorAppearance === 'comment' && fg('platform_editor_controls_patch_6')) && editorExperiment('platform_editor_controls', 'variant1');
  }, [editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode, editorAppearance]);
  var innerCard = shouldShowOpenButtonOverlay ? innerCardWithOpenButtonOverlay : innerCardOriginal;
  var getPosFunction = typeof getPos === 'function' ? getPos : undefined;
  var placeholderUniqId = (getPosFunction === null || getPosFunction === void 0 ? void 0 : getPosFunction()) || 0;
  return isOverlayEnabled || isPulseEnabled ? /*#__PURE__*/React.createElement(AwarenessWrapper, {
    isOverlayEnabled: isOverlayEnabled,
    isPulseEnabled: isPulseEnabled,
    cardContext: cardContext,
    getPos: getPos,
    isHovered: isHovered,
    isInserted: isInserted,
    url: node.attrs.url,
    isSelected: isSelected,
    isResolvedViewRendered: isResolvedViewRendered,
    markMostRecentlyInsertedLink: markMostRecentlyInsertedLink,
    pluginInjectionApi: pluginInjectionApi,
    setOverlayHoveredStyles: setOverlayHoveredStyles,
    appearance: appearance
  }, innerCard) : /*#__PURE__*/React.createElement("span", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "card",
    "data-vc": "editor-plugin-inline-card",
    "data-ssr-placeholder": "editor-plugin-inline-card-".concat(placeholderUniqId),
    "data-ssr-placeholder-replace": "editor-plugin-inline-card-".concat(placeholderUniqId)
  }, innerCard);
});