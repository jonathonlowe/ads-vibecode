import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useEffect } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next/useAnalyticsEvents';
import { useSmartLinkContext } from '@atlaskit/link-provider';
import { getResolvedAttributesFromStore } from '../pm-plugins/utils';
import { EditorAnalyticsContext } from './EditorAnalyticsContext';
/**
 * Handles firing the toolbar viewed event
 */
var ToolbarViewedEventBase = function ToolbarViewedEventBase(_ref) {
  var url = _ref.url,
    display = _ref.display,
    cardContext = _ref.cardContext;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var store = cardContext === null || cardContext === void 0 ? void 0 : cardContext.store;
  useEffect(function () {
    createAnalyticsEvent({
      action: 'viewed',
      actionSubject: 'inlineDialog',
      actionSubjectId: 'editLinkToolbar',
      eventType: 'ui',
      attributes: _objectSpread(_objectSpread({}, getResolvedAttributesFromStore(url, display, store)), {}, {
        display: display
      })
    }).fire('media');
  }, [createAnalyticsEvent, display, url, store]);
  return null;
};

/**
 * Provides analytics context and card context
 */
export var ToolbarViewedEvent = function ToolbarViewedEvent(_ref2) {
  var url = _ref2.url,
    display = _ref2.display,
    editorView = _ref2.editorView;
  var cardContext = useSmartLinkContext();
  return /*#__PURE__*/React.createElement(EditorAnalyticsContext, {
    editorView: editorView
  }, url ? /*#__PURE__*/React.createElement(ToolbarViewedEventBase, {
    url: url,
    display: display,
    cardContext: cardContext
  }) : null);
};