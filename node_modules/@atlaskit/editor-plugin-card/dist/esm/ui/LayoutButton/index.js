import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { getNextBreakoutMode, getTitle } from '@atlaskit/editor-common/utils';
import GrowHorizontalIcon from '@atlaskit/icon/core/migration/grow-horizontal--editor-expand';
import ShrinkHorizontalIcon from '@atlaskit/icon/core/migration/shrink-horizontal--editor-collapse';
import CollapseIcon from '@atlaskit/icon/glyph/editor/collapse';
import ExpandIcon from '@atlaskit/icon/glyph/editor/expand';
import { DATASOURCE_DEFAULT_LAYOUT } from '@atlaskit/linking-common';
import { fg } from '@atlaskit/platform-feature-flags';
import { B300, N20A, N300 } from '@atlaskit/theme/colors';
import { setCardLayout } from '../../pm-plugins/actions';
import { isDatasourceNode } from '../../pm-plugins/utils';
import { getDatasource, isDatasourceTableLayout } from './utils';
var toolbarButtonWrapperStyles = css({
  background: "".concat("var(--ds-background-neutral, ".concat(N20A, ")")),
  color: "".concat("var(--ds-icon, ".concat(N300, ")")),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    background: "".concat("var(--ds-background-neutral-hovered, ".concat(B300, ")")),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    color: "var(--ds-icon, white)".concat(" !important")
  }
});
export var LayoutButton = function LayoutButton(_ref) {
  var onLayoutChange = _ref.onLayoutChange,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? DATASOURCE_DEFAULT_LAYOUT : _ref$layout,
    formatMessage = _ref.intl.formatMessage,
    mountPoint = _ref.mountPoint,
    boundariesElement = _ref.boundariesElement,
    scrollableElement = _ref.scrollableElement,
    targetElement = _ref.targetElement,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'datasource-table-layout-button' : _ref$testId;
  var handleClick = useCallback(function () {
    onLayoutChange && onLayoutChange(getNextBreakoutMode(layout));
  }, [layout, onLayoutChange]);
  var title = useMemo(function () {
    return formatMessage(getTitle(layout));
  }, [formatMessage, layout]);
  if (!targetElement) {
    return null;
  }
  var collapseIcon = fg('platform-editor-plugin-card-icon-migration') ? jsx(ShrinkHorizontalIcon, {
    label: title
  }) : jsx(CollapseIcon, {
    label: title
  });
  var expandIcon = fg('platform-editor-plugin-card-icon-migration') ? jsx(GrowHorizontalIcon, {
    label: title
  }) : jsx(ExpandIcon, {
    label: title
  });
  return jsx(Popup, {
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement,
    target: targetElement,
    alignY: "start",
    alignX: "end",
    forcePlacement: true,
    stick: true,
    ariaLabel: title
  }, jsx(ToolbarButton, {
    testId: testId,
    css: toolbarButtonWrapperStyles,
    title: title,
    onClick: handleClick,
    iconBefore: layout === 'full-width' ? collapseIcon : expandIcon
  }));
};
var LayoutButtonWrapper = function LayoutButtonWrapper(_ref2) {
  var _node$attrs;
  var editorView = _ref2.editorView,
    mountPoint = _ref2.mountPoint,
    scrollableElement = _ref2.scrollableElement,
    boundariesElement = _ref2.boundariesElement,
    intl = _ref2.intl,
    api = _ref2.api;
  var _useSharedPluginState = useSharedPluginState(api, ['card']),
    cardState = _useSharedPluginState.cardState;
  var _getDatasource = getDatasource(editorView),
    node = _getDatasource.node,
    pos = _getDatasource.pos;
  var isDatasource = isDatasourceNode(node);
  if (!isDatasource) {
    return null;
  }

  //  If layout doesn't exist in ADF it returns null, we want to change to undefined
  //  which results in default parameter value being used in LayoutButton.
  var _ref3 = cardState !== null && cardState !== void 0 ? cardState : {},
    datasourceTableRef = _ref3.datasourceTableRef,
    _ref3$layout = _ref3.layout,
    layout = _ref3$layout === void 0 ? (node === null || node === void 0 || (_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.layout) || undefined : _ref3$layout;
  var onLayoutChange = function onLayoutChange(layout) {
    var _getDatasource$node;
    if (pos === undefined) {
      return;
    }
    var state = editorView.state,
      dispatch = editorView.dispatch;
    // If the button does not re-render due to no card state change, node reference will be stale
    var datasourceNode = (_getDatasource$node = getDatasource(editorView).node) !== null && _getDatasource$node !== void 0 ? _getDatasource$node : node;
    var tr = state.tr.setNodeMarkup(pos, undefined, _objectSpread(_objectSpread({}, datasourceNode === null || datasourceNode === void 0 ? void 0 : datasourceNode.attrs), {}, {
      layout: layout
    }));
    tr.setMeta('scrollIntoView', false);
    dispatch(setCardLayout(layout)(tr));
  };
  return jsx(LayoutButton, {
    mountPoint: mountPoint,
    scrollableElement: scrollableElement,
    boundariesElement: boundariesElement
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    targetElement: datasourceTableRef,
    layout: isDatasourceTableLayout(layout) ? layout : undefined,
    onLayoutChange: onLayoutChange,
    intl: intl
  });
};
export default injectIntl(LayoutButtonWrapper);