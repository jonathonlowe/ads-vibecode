import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "isVisible", "url", "editorAppearance"];
/* eslint-disable @atlaskit/design-system/no-nested-styles */
/* eslint-disable @atlaskit/design-system/prefer-primitives */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useLayoutEffect, useRef, useState } from 'react';
import { css, jsx } from '@emotion/react'; // eslint-disable-line @atlaskit/ui-styling-standard/use-compiled

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import LinkExternalIcon from '@atlaskit/icon/core/link-external';
import { fg } from '@atlaskit/platform-feature-flags';
import { Anchor, Box, Text, xcss } from '@atlaskit/primitives';
var containerStyles = css({
  position: 'relative'
});
var iconWrapperStyles = xcss({
  display: 'inline-flex',
  justifyContent: 'center',
  alignItems: 'center',
  height: '17px',
  width: '17px'
});
var hiddenTextStyle = css({
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  position: 'absolute',
  visibility: 'hidden'
});
var linkStyles = xcss({
  position: 'absolute',
  left: 'space.025',
  top: '-1px',
  display: 'inline-flex',
  alignItems: 'center',
  verticalAlign: 'middle',
  paddingBlock: 'space.025',
  paddingInline: 'space.050',
  gap: 'space.025',
  overflow: 'hidden',
  zIndex: 'card',
  backgroundColor: 'color.background.accent.gray.subtlest',
  borderRadius: "var(--ds-border-radius, 3px)",
  color: 'color.text.subtle',
  textDecoration: 'none',
  ':hover': {
    backgroundColor: 'elevation.surface.hovered',
    color: 'color.text.subtle',
    textDecoration: 'none'
  }
});
var linkStylesFix = xcss({
  whiteSpace: 'nowrap'
});
var MIN_AVAILABLE_SPACE_WITH_LABEL_OVERLAY = 45;
var ICON_WIDTH = 16;
var DEFAULT_OPEN_TEXT_WIDTH = 28; // Default open text width in English

var OpenButtonOverlay = function OpenButtonOverlay(_ref) {
  var children = _ref.children,
    _ref$isVisible = _ref.isVisible,
    isVisible = _ref$isVisible === void 0 ? false : _ref$isVisible,
    url = _ref.url,
    editorAppearance = _ref.editorAppearance,
    props = _objectWithoutProperties(_ref, _excluded);
  // TODO: ED-26961 - add translation
  var label = 'Open';
  var containerRef = useRef(null);
  var openButtonRef = useRef(null);
  var hiddenTextRef = useRef(null);
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    showLabel = _useState2[0],
    setShowLabel = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHovered = _useState4[0],
    setHovered = _useState4[1];
  var openTextWidthRef = useRef(DEFAULT_OPEN_TEXT_WIDTH);
  var handleDoubleClick = function handleDoubleClick() {
    // Double click opens the link in a new tab
    window.open(url, '_blank');
  };
  useLayoutEffect(function () {
    var hiddenText = hiddenTextRef.current;
    if (!hiddenText) {
      return;
    }
    // Measure the width of the hidden text
    // Temporarily make the element visible to measure its width
    hiddenText.style.visibility = 'hidden';
    hiddenText.style.display = 'inline';
    openTextWidthRef.current = hiddenText.offsetWidth;

    // Reset the hiddenText's display property
    hiddenText.style.display = 'none';
    hiddenText.style.visibility = 'inherit';
  }, []);
  useLayoutEffect(function () {
    var _containerRef$current, _openButtonRef$curren;
    if (!isVisible || !isHovered) {
      return;
    }
    var cardWidth = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetWidth;
    var openButtonWidth = (_openButtonRef$curren = openButtonRef.current) === null || _openButtonRef$curren === void 0 ? void 0 : _openButtonRef$curren.offsetWidth;
    if (!cardWidth || !openButtonWidth) {
      return;
    }
    var canShowLabel = true;
    if (fg('platform_editor_controls_patch_2')) {
      canShowLabel = cardWidth - openTextWidthRef.current > MIN_AVAILABLE_SPACE_WITH_LABEL_OVERLAY + ICON_WIDTH;
    } else {
      canShowLabel = cardWidth - openButtonWidth > MIN_AVAILABLE_SPACE_WITH_LABEL_OVERLAY;
    }
    setShowLabel(canShowLabel);
  }, [isVisible, isHovered]);
  var handleOverlayChange = function handleOverlayChange(isHovered) {
    setHovered(isHovered);
  };
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("span", {
      ref: containerRef,
      css: containerStyles,
      onDoubleClick: handleDoubleClick,
      onMouseEnter: function onMouseEnter() {
        return handleOverlayChange(true);
      },
      onMouseLeave: function onMouseLeave() {
        return handleOverlayChange(false);
      }
    }, children, fg('platform_editor_controls_patch_2') && jsx("span", {
      css: hiddenTextStyle,
      "aria-hidden": "true"
    }, jsx(Text, {
      ref: hiddenTextRef,
      size: "small",
      maxLines: 1
    }, label)), isHovered && jsx(Anchor, {
      ref: openButtonRef,
      xcss: [linkStyles, fg('platform_editor_controls_patch_5') && linkStylesFix],
      href: url,
      target: "_blank",
      style: {
        paddingBlock: editorAppearance === 'comment' && fg('platform_editor_controls_patch_6') ? '1px' : "var(--ds-space-025, 2px)"
      }
    }, jsx(Box, {
      xcss: iconWrapperStyles,
      "data-inlinecard-button-overlay": "icon-wrapper-line-height"
    }, jsx(LinkExternalIcon, {
      label: ""
    })), showLabel && jsx(Text, {
      size: "small",
      color: "color.text.subtle",
      maxLines: 1
    }, label)))
  );
};
export default OpenButtonOverlay;