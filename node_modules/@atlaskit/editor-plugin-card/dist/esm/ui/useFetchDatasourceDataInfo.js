import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useState } from 'react';
import { DEFAULT_GET_DATASOURCE_DATA_PAGE_SIZE, useDatasourceClientExtension } from '@atlaskit/link-client-extension';
export var useFetchDatasourceDataInfo = function useFetchDatasourceDataInfo(_ref) {
  var datasourceId = _ref.datasourceId,
    parameters = _ref.parameters,
    visibleColumnKeys = _ref.visibleColumnKeys;
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    extensionKey = _useState2[0],
    setExtensionKey = _useState2[1];
  var _useDatasourceClientE = useDatasourceClientExtension(),
    getDatasourceData = _useDatasourceClientE.getDatasourceData;
  useEffect(function () {
    var fetchDatasource = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var datasourceDataRequest, _yield$getDatasourceD, meta;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              if (!(!datasourceId || !parameters || !visibleColumnKeys)) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return");
            case 3:
              datasourceDataRequest = {
                parameters: parameters,
                pageSize: DEFAULT_GET_DATASOURCE_DATA_PAGE_SIZE,
                pageCursor: undefined,
                fields: visibleColumnKeys,
                includeSchema: true
              };
              _context.next = 6;
              return getDatasourceData(datasourceId, datasourceDataRequest, false);
            case 6:
              _yield$getDatasourceD = _context.sent;
              meta = _yield$getDatasourceD.meta;
              setExtensionKey(meta.extensionKey);
              _context.next = 15;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](0);
              // eslint-disable-next-line no-console
              console.error(_context.t0);
              setExtensionKey(undefined);
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 11]]);
      }));
      return function fetchDatasource() {
        return _ref2.apply(this, arguments);
      };
    }();
    void fetchDatasource();
  }, [getDatasourceData, visibleColumnKeys, parameters, datasourceId]);
  return {
    extensionKey: extensionKey
  };
};