import React from 'react';
import type { EventHandler, KeyboardEvent, MouseEvent } from 'react';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import type { OnClickCallback } from '@atlaskit/editor-common/card';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { getPosHandler, ReactComponentProps } from '@atlaskit/editor-common/react-node-view';
import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import { type Transaction } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import { type CardContext } from '@atlaskit/link-provider';
import type { CardProps as BaseCardProps } from '@atlaskit/smart-card';
import type { cardPlugin } from '../index';
export type EditorContext<T> = React.Context<T> & {
    value: T;
};
export interface CardNodeViewProps extends ReactComponentProps {
    providerFactory?: ProviderFactory;
    eventDispatcher?: EventDispatcher;
}
export interface CardProps extends CardNodeViewProps {
    children?: React.ReactNode;
    node: PMNode;
    view: EditorView;
    getPos: getPosHandler;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
    eventDispatcher?: EventDispatcher;
    allowResizing?: boolean;
    fullWidthMode?: boolean;
    useAlternativePreloader?: boolean;
    actionOptions?: BaseCardProps['actionOptions'];
    pluginInjectionApi?: ExtractInjectionAPI<typeof cardPlugin>;
    onClickCallback?: OnClickCallback;
    showHoverPreview?: BaseCardProps['showHoverPreview'];
    hoverPreviewOptions?: BaseCardProps['hoverPreviewOptions'];
    __livePage?: boolean;
}
export interface SmartCardProps extends CardProps {
    pluginInjectionApi?: ExtractInjectionAPI<typeof cardPlugin>;
    cardContext?: EditorContext<CardContext | undefined>;
    onClick?: EventHandler<MouseEvent | KeyboardEvent> | undefined;
    onResolve?: (tr: Transaction, title?: string) => void;
    isHovered?: boolean;
    allowEmbeds?: boolean;
    allowBlockCards?: boolean;
    enableInlineUpgradeFeatures?: boolean;
    isPageSSRed?: boolean;
}
export declare function Card(SmartCardComponent: React.ComponentType<React.PropsWithChildren<SmartCardProps & {
    id?: string;
}>>, UnsupportedComponent: React.ComponentType<React.PropsWithChildren<unknown>>): React.ComponentType<React.PropsWithChildren<CardProps>>;
