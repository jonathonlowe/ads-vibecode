import React from 'react';
import type { RichMediaLayout } from '@atlaskit/adf-schema';
import ReactNodeView from '@atlaskit/editor-common/react-node-view';
import type { ExtractInjectionAPI, PMPluginFactoryParams } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { cardPlugin } from '../index';
import type { SmartCardProps } from './genericCard';
export type EmbedCardState = {
    hasPreview: boolean;
    liveHeight?: number;
    initialAspectRatio?: number;
};
export declare class EmbedCardComponent extends React.PureComponent<SmartCardProps & {
    id?: string;
}, EmbedCardState> {
    private scrollContainer?;
    private embedIframeRef;
    constructor(props: SmartCardProps & {
        id?: string;
    });
    state: EmbedCardState;
    private getPosSafely;
    onResolve: (data: {
        url?: string | undefined;
        title?: string | undefined;
        aspectRatio?: number | undefined;
    }) => void;
    updateSize: (pctWidth: number | null, layout: RichMediaLayout) => true | undefined;
    private getLineLength;
    /**
     * Even though render is capable of listening and reacting to iframely wrapper iframe sent `resize` events
     * it's good idea to store latest actual height in ADF, so that when renderer (well, editor as well) is loading
     * we will show embed window of appropriate size and avoid unnecessary content jumping.
     */
    saveOriginalDimensionsAttributes: (height: number, width: number | undefined) => void;
    onHeightUpdate: (height: number) => void;
    onError: ({ err }: {
        err?: Error | undefined;
    }) => void;
    render(): React.JSX.Element;
}
export type EmbedCardNodeViewProps = Pick<SmartCardProps, 'eventDispatcher' | 'allowResizing' | 'fullWidthMode' | 'dispatchAnalyticsEvent' | 'pluginInjectionApi' | 'actionOptions' | 'onClickCallback'>;
export declare class EmbedCard extends ReactNodeView<EmbedCardNodeViewProps> {
    private id;
    unsubscribe: (() => void) | undefined;
    viewShouldUpdate(nextNode: PMNode): boolean;
    createDomRef(): HTMLElement;
    private updateContentEditable;
    render(): React.JSX.Element;
    destroy(): void;
    private removeCard;
}
export interface EmbedCardNodeViewProperties {
    allowResizing: EmbedCardNodeViewProps['allowResizing'];
    fullWidthMode: EmbedCardNodeViewProps['fullWidthMode'];
    pmPluginFactoryParams: PMPluginFactoryParams;
    pluginInjectionApi: ExtractInjectionAPI<typeof cardPlugin> | undefined;
    actionOptions: EmbedCardNodeViewProps['actionOptions'];
    onClickCallback: EmbedCardNodeViewProps['onClickCallback'];
}
export declare const embedCardNodeView: ({ allowResizing, fullWidthMode, pmPluginFactoryParams, pluginInjectionApi, actionOptions, onClickCallback, }: EmbedCardNodeViewProperties) => (node: PMNode, view: EditorView, getPos: () => number | undefined) => EmbedCard;
