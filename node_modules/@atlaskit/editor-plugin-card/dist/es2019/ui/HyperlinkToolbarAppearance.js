import React, { useEffect, useRef, useState } from 'react';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { FloatingToolbarSeparator as Separator } from '@atlaskit/editor-common/ui';
import { Flex } from '@atlaskit/primitives/compiled';
import { DatasourceAppearanceButton } from './DatasourceAppearanceButton';
import { LinkToolbarAppearance } from './LinkToolbarAppearance';
export function HyperlinkToolbarAppearance(props) {
  var _props$cardOptions3;
  const [supportedUrlsMap, setSupportedUrlsMap] = useState(new Map());
  const cardProvider = useRef(undefined);
  const {
    url,
    intl,
    editorView,
    editorState,
    cardOptions,
    editorAnalyticsApi
  } = props;

  // Ignored via go/ees005
  // eslint-disable-next-line require-await
  const getProvider = async () => {
    var _props$cardOptions;
    if ((_props$cardOptions = props.cardOptions) !== null && _props$cardOptions !== void 0 && _props$cardOptions.provider) {
      var _props$cardOptions2;
      return (_props$cardOptions2 = props.cardOptions) === null || _props$cardOptions2 === void 0 ? void 0 : _props$cardOptions2.provider;
    }
    if (cardProvider.current) {
      return cardProvider.current;
    }
    return new Promise(resolve => {
      var _props$editorPluginAp, _props$editorPluginAp2, _props$editorPluginAp3, _props$editorPluginAp4;
      const cardProvider = (_props$editorPluginAp = props.editorPluginApi) === null || _props$editorPluginAp === void 0 ? void 0 : (_props$editorPluginAp2 = _props$editorPluginAp.card) === null || _props$editorPluginAp2 === void 0 ? void 0 : (_props$editorPluginAp3 = _props$editorPluginAp2.sharedState) === null || _props$editorPluginAp3 === void 0 ? void 0 : (_props$editorPluginAp4 = _props$editorPluginAp3.currentState()) === null || _props$editorPluginAp4 === void 0 ? void 0 : _props$editorPluginAp4.provider;
      if (cardProvider) {
        resolve(cardProvider);
      }
    });
  };
  const resolveUrl = async url => {
    if (supportedUrlsMap.has(url)) {
      return;
    }
    let isUrlSupported = false;
    try {
      var _await$provider$findP;
      const provider = await getProvider();
      isUrlSupported = (_await$provider$findP = await (provider === null || provider === void 0 ? void 0 : provider.findPattern(url))) !== null && _await$provider$findP !== void 0 ? _await$provider$findP : false;
    } catch (error) {
      isUrlSupported = false;
    }
    const newMap = new Map(supportedUrlsMap);
    newMap.set(url, isUrlSupported);
    setSupportedUrlsMap(newMap);
  };
  useEffect(() => {
    resolveUrl(url);
    // before migrating from a class to a functional component, we were only reacting to changes in the url
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [url, (_props$cardOptions3 = props.cardOptions) === null || _props$cardOptions3 === void 0 ? void 0 : _props$cardOptions3.provider, props.editorPluginApi]);
  if (!supportedUrlsMap.get(url)) {
    return null;
  }
  return /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(LinkToolbarAppearance, {
    key: "link-appearance",
    url: url,
    intl: intl,
    editorView: editorView,
    editorState: editorState,
    allowEmbeds: cardOptions === null || cardOptions === void 0 ? void 0 : cardOptions.allowEmbeds,
    allowBlockCards: cardOptions === null || cardOptions === void 0 ? void 0 : cardOptions.allowBlockCards,
    editorAnalyticsApi: editorAnalyticsApi
  }), (cardOptions === null || cardOptions === void 0 ? void 0 : cardOptions.allowDatasource) && /*#__PURE__*/React.createElement(DatasourceAppearanceButton, {
    intl: intl,
    url: url,
    editorState: editorState,
    editorView: editorView,
    editorAnalyticsApi: editorAnalyticsApi,
    inputMethod: INPUT_METHOD.FLOATING_TB
  }), /*#__PURE__*/React.createElement(Separator, null));
}