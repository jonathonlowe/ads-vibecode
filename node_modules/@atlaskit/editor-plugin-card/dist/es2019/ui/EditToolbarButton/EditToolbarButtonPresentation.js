/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { linkToolbarMessages, cardMessages as messages } from '@atlaskit/editor-common/messages';
import { FloatingToolbarButton as Button, FloatingToolbarSeparator as Separator } from '@atlaskit/editor-common/ui';
import { ArrowKeyNavigationType, DropdownContainer as UiDropdown } from '@atlaskit/editor-common/ui-menu';
import EditIcon from '@atlaskit/icon/core/edit';
import ExpandIcon from '@atlaskit/icon/glyph/chevron-down';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { ButtonItem } from '@atlaskit/menu';
import { fg } from '@atlaskit/platform-feature-flags';
import { Flex } from '@atlaskit/primitives/compiled';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { focusEditorView } from '../../pm-plugins/utils';
import { editDatasource } from '../editDatasourceAction';
const dropdownExpandContainer = css({
  margin: `0px ${"var(--ds-space-negative-050, -4px)"}`
});
const EditToolbarButtonPresentation = ({
  datasourceId,
  currentAppearance,
  editorAnalyticsApi,
  editVariant,
  editorView,
  extensionKey,
  onLinkEditClick,
  intl
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const containerRef = useRef();
  const toggleOpen = () => setIsOpen(open => !open);
  const onClose = () => setIsOpen(false);
  const onEditLink = useCallback(() => {
    if (editorView) {
      onLinkEditClick(editorView.state, editorView.dispatch);
      focusEditorView(editorView);
    }
  }, [editorView, onLinkEditClick]);
  const onEditDatasource = useCallback(() => {
    if (editorView && datasourceId) {
      editDatasource(datasourceId, editorAnalyticsApi, currentAppearance, extensionKey)(editorView.state, editorView.dispatch);
      focusEditorView(editorView);
    }
  }, [currentAppearance, datasourceId, editorAnalyticsApi, editorView, extensionKey]);
  const icon = editorExperiment('platform_editor_controls', 'variant1') ? jsx(EditIcon, {
    label: ""
  }) : undefined;
  switch (editVariant) {
    case 'edit-link':
      {
        return jsx(Flex, {
          gap: "space.050"
        }, jsx(Button, {
          testId: "edit-link",
          onClick: onEditLink,
          icon: icon
        }, editorExperiment('platform_editor_controls', 'control') && jsx(FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , linkToolbarMessages.editLink)), jsx(Separator, null));
      }
    case 'edit-datasource':
      {
        return jsx(Flex, {
          gap: "space.050"
        }, jsx(Button, {
          testId: "edit-datasource",
          tooltipContent: intl.formatMessage(linkToolbarMessages.editDatasourceStandaloneTooltip),
          onClick: onEditDatasource
        }, jsx(FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , linkToolbarMessages.editDatasourceStandalone)), jsx(Separator, null));
      }
    case 'edit-dropdown':
      {
        const trigger = jsx(Flex, {
          gap: "space.050"
        }, jsx(Button, {
          testId: "edit-dropdown-trigger",
          iconAfter: jsx("span", {
            css: dropdownExpandContainer
          }, fg('platform-editor-plugin-card-icon-migration') ? jsx(ChevronDownIcon, {
            label: intl.formatMessage(messages.editDropdownTriggerTitle)
          }) : jsx(ExpandIcon, {
            label: intl.formatMessage(messages.editDropdownTriggerTitle)
          })),
          onClick: toggleOpen,
          selected: isOpen,
          disabled: false,
          ariaHasPopup: true
        }, jsx(FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , messages.editDropdownTriggerTitle)), jsx(Separator, null));
        return jsx(Flex, {
          ref: containerRef
        }, jsx(UiDropdown, {
          mountTo: containerRef.current,
          isOpen: isOpen,
          handleClickOutside: onClose,
          handleEscapeKeydown: onClose,
          trigger: trigger,
          scrollableElement: containerRef.current,
          arrowKeyNavigationProviderOptions: {
            type: ArrowKeyNavigationType.MENU
          }
        }, jsx(ButtonItem, {
          key: "edit.link",
          onClick: onEditLink,
          testId: "edit-dropdown-edit-link-item"
        }, jsx(FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , messages.editDropdownEditLinkTitle)), jsx(ButtonItem, {
          key: "edit.datasource",
          onClick: onEditDatasource,
          testId: "edit-dropdown-edit-datasource-item"
        }, jsx(FormattedMessage
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        , messages.editDropdownEditDatasourceTitle))));
      }
    case 'none':
    default:
      return null;
  }
};
export default EditToolbarButtonPresentation;