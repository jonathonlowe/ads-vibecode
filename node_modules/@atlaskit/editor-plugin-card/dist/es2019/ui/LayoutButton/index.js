/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { getNextBreakoutMode, getTitle } from '@atlaskit/editor-common/utils';
import GrowHorizontalIcon from '@atlaskit/icon/core/migration/grow-horizontal--editor-expand';
import ShrinkHorizontalIcon from '@atlaskit/icon/core/migration/shrink-horizontal--editor-collapse';
import CollapseIcon from '@atlaskit/icon/glyph/editor/collapse';
import ExpandIcon from '@atlaskit/icon/glyph/editor/expand';
import { DATASOURCE_DEFAULT_LAYOUT } from '@atlaskit/linking-common';
import { fg } from '@atlaskit/platform-feature-flags';
import { B300, N20A, N300 } from '@atlaskit/theme/colors';
import { setCardLayout } from '../../pm-plugins/actions';
import { isDatasourceNode } from '../../pm-plugins/utils';
import { getDatasource, isDatasourceTableLayout } from './utils';
const toolbarButtonWrapperStyles = css({
  background: `${`var(--ds-background-neutral, ${N20A})`}`,
  color: `${`var(--ds-icon, ${N300})`}`,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':hover': {
    background: `${`var(--ds-background-neutral-hovered, ${B300})`}`,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
    color: `${"var(--ds-icon, white)"} !important`
  }
});
export const LayoutButton = ({
  onLayoutChange,
  layout = DATASOURCE_DEFAULT_LAYOUT,
  intl: {
    formatMessage
  },
  mountPoint,
  boundariesElement,
  scrollableElement,
  targetElement,
  testId = 'datasource-table-layout-button'
}) => {
  const handleClick = useCallback(() => {
    onLayoutChange && onLayoutChange(getNextBreakoutMode(layout));
  }, [layout, onLayoutChange]);
  const title = useMemo(() => {
    return formatMessage(getTitle(layout));
  }, [formatMessage, layout]);
  if (!targetElement) {
    return null;
  }
  const collapseIcon = fg('platform-editor-plugin-card-icon-migration') ? jsx(ShrinkHorizontalIcon, {
    label: title
  }) : jsx(CollapseIcon, {
    label: title
  });
  const expandIcon = fg('platform-editor-plugin-card-icon-migration') ? jsx(GrowHorizontalIcon, {
    label: title
  }) : jsx(ExpandIcon, {
    label: title
  });
  return jsx(Popup, {
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement,
    target: targetElement,
    alignY: "start",
    alignX: "end",
    forcePlacement: true,
    stick: true,
    ariaLabel: title
  }, jsx(ToolbarButton, {
    testId: testId,
    css: toolbarButtonWrapperStyles,
    title: title,
    onClick: handleClick,
    iconBefore: layout === 'full-width' ? collapseIcon : expandIcon
  }));
};
const LayoutButtonWrapper = ({
  editorView,
  mountPoint,
  scrollableElement,
  boundariesElement,
  intl,
  api
}) => {
  var _node$attrs;
  const {
    cardState
  } = useSharedPluginState(api, ['card']);
  const {
    node,
    pos
  } = getDatasource(editorView);
  const isDatasource = isDatasourceNode(node);
  if (!isDatasource) {
    return null;
  }

  //  If layout doesn't exist in ADF it returns null, we want to change to undefined
  //  which results in default parameter value being used in LayoutButton.
  const {
    datasourceTableRef,
    layout = (node === null || node === void 0 ? void 0 : (_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.layout) || undefined
  } = cardState !== null && cardState !== void 0 ? cardState : {};
  const onLayoutChange = layout => {
    var _getDatasource$node;
    if (pos === undefined) {
      return;
    }
    const {
      state,
      dispatch
    } = editorView;
    // If the button does not re-render due to no card state change, node reference will be stale
    const datasourceNode = (_getDatasource$node = getDatasource(editorView).node) !== null && _getDatasource$node !== void 0 ? _getDatasource$node : node;
    const tr = state.tr.setNodeMarkup(pos, undefined, {
      ...(datasourceNode === null || datasourceNode === void 0 ? void 0 : datasourceNode.attrs),
      layout
    });
    tr.setMeta('scrollIntoView', false);
    dispatch(setCardLayout(layout)(tr));
  };
  return jsx(LayoutButton, {
    mountPoint: mountPoint,
    scrollableElement: scrollableElement,
    boundariesElement: boundariesElement
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    targetElement: datasourceTableRef,
    layout: isDatasourceTableLayout(layout) ? layout : undefined,
    onLayoutChange: onLayoutChange,
    intl: intl
  });
};
export default injectIntl(LayoutButtonWrapper);