import React, { memo, useCallback, useMemo, useState } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { registerRemoveOverlay } from '../pm-plugins/actions';
import { pluginKey } from '../pm-plugins/plugin-key';
import { AwarenessWrapper } from '../ui/AwarenessWrapper';
import OpenButtonOverlay from '../ui/OpenButtonOverlay';
import { InlineCard } from './inlineCard';
export const InlineCardWithAwareness = /*#__PURE__*/memo(({
  node,
  cardContext,
  actionOptions,
  useAlternativePreloader,
  view,
  getPos,
  pluginInjectionApi,
  onClick,
  isPulseEnabled,
  isOverlayEnabled,
  isSelected,
  isPageSSRed,
  appearance
}) => {
  var _pluginInjectionApi$c;
  const [isHovered, setIsHovered] = useState(false);
  const [isInserted, setIsInserted] = useState(false);
  const [isResolvedViewRendered, setIsResolvedViewRendered] = useState(false);
  const editorAppearance = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$c = pluginInjectionApi.card.sharedState.currentState()) === null || _pluginInjectionApi$c === void 0 ? void 0 : _pluginInjectionApi$c.editorAppearance;
  const onResolve = useCallback((tr, title) => {
    if (fg('platform_editor_fix_card_plugin_state')) {
      const metadata = tr.getMeta(pluginKey);
      if (metadata && metadata.type === 'REGISTER') {
        registerRemoveOverlay(() => setIsInserted(false), metadata.info)(tr);
      } else {
        registerRemoveOverlay(() => setIsInserted(false))(tr);
      }
    } else {
      registerRemoveOverlay(() => setIsInserted(false))(tr);
    }
    if (title) {
      setIsResolvedViewRendered(true);
    }
  }, []);
  const markMostRecentlyInsertedLink = useCallback(isLinkMostRecentlyInserted => {
    if (isOverlayEnabled) {
      setIsInserted(isLinkMostRecentlyInserted);
    }
  }, [isOverlayEnabled]);
  const setOverlayHoveredStyles = useCallback(isHovered => {
    if (isOverlayEnabled) {
      setIsHovered(isHovered);
    }
  }, [isOverlayEnabled]);
  const {
    editorViewModeState
  } = useSharedPluginState(pluginInjectionApi, ['editorViewMode']);
  const innerCardWithOpenButtonOverlay = useMemo(() => /*#__PURE__*/React.createElement(OpenButtonOverlay, {
    isVisible: isResolvedViewRendered,
    url: node.attrs.url,
    editorAppearance: editorAppearance
  }, /*#__PURE__*/React.createElement(InlineCard, {
    node: node,
    view: view,
    getPos: getPos,
    useAlternativePreloader: useAlternativePreloader,
    actionOptions: actionOptions,
    onResolve: onResolve,
    onClick: onClick,
    cardContext: cardContext,
    isHovered: isHovered,
    isPageSSRed: isPageSSRed
  })), [isResolvedViewRendered, node, editorAppearance, view, getPos, useAlternativePreloader, actionOptions, onResolve, onClick, cardContext, isHovered, isPageSSRed]);
  const innerCardOriginal = useMemo(() => /*#__PURE__*/React.createElement(InlineCard, {
    node: node,
    view: view,
    getPos: getPos,
    useAlternativePreloader: useAlternativePreloader,
    actionOptions: actionOptions,
    onResolve: onResolve,
    onClick: onClick,
    cardContext: cardContext,
    isHovered: isHovered,
    isPageSSRed: isPageSSRed
  }), [actionOptions, cardContext, getPos, isHovered, node, onClick, onResolve, useAlternativePreloader, view, isPageSSRed]);
  const shouldShowOpenButtonOverlay = useMemo(() => {
    return ((editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode) === 'edit' || editorAppearance === 'comment' && fg('platform_editor_controls_patch_6')) && editorExperiment('platform_editor_controls', 'variant1');
  }, [editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode, editorAppearance]);
  const innerCard = shouldShowOpenButtonOverlay ? innerCardWithOpenButtonOverlay : innerCardOriginal;
  const getPosFunction = typeof getPos === 'function' ? getPos : undefined;
  const placeholderUniqId = (getPosFunction === null || getPosFunction === void 0 ? void 0 : getPosFunction()) || 0;
  return isOverlayEnabled || isPulseEnabled ? /*#__PURE__*/React.createElement(AwarenessWrapper, {
    isOverlayEnabled: isOverlayEnabled,
    isPulseEnabled: isPulseEnabled,
    cardContext: cardContext,
    getPos: getPos,
    isHovered: isHovered,
    isInserted: isInserted,
    url: node.attrs.url,
    isSelected: isSelected,
    isResolvedViewRendered: isResolvedViewRendered,
    markMostRecentlyInsertedLink: markMostRecentlyInsertedLink,
    pluginInjectionApi: pluginInjectionApi,
    setOverlayHoveredStyles: setOverlayHoveredStyles,
    appearance: appearance
  }, innerCard) : /*#__PURE__*/React.createElement("span", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "card",
    "data-vc": "editor-plugin-inline-card",
    "data-ssr-placeholder": `editor-plugin-inline-card-${placeholderUniqId}`,
    "data-ssr-placeholder-replace": `editor-plugin-inline-card-${placeholderUniqId}`
  }, innerCard);
});