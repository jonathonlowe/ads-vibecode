import React from 'react';
export type SortDirection = 'ascending' | 'descending';
export type SortKey<Key extends string | symbol | number> = Key | 'unset';
type TableContext<T, K extends keyof T = keyof T> = {
    isSelectable?: boolean;
    sortKey: SortKey<K>;
    sortDirection?: SortDirection;
    sortFn?: (a: T, b: T) => number;
    setSortState: (key: SortKey<K>) => void;
};
declare const TableContext: React.Context<TableContext<object, never>>;
/**
 * __Table state provider__
 *
 * The table context provides the data required for more complex functionality.
 *
 * - [Examples](https://atlassian.design/components/table/examples)
 */
export declare function TableProvider<T extends object>({ children, state, }: {
    children: React.ReactNode;
    state: TableContext<T>;
}): React.JSX.Element;
export declare const useTable: <TableItem extends object>() => TableContext<TableItem, keyof TableItem>;
export {};
