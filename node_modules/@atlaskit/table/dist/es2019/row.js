/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { memo, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useSelection } from './hooks/selection-provider';
import useExpand from './hooks/use-expand';
import useExpandContent from './hooks/use-expand-content';
import { useRowId } from './hooks/use-row-id';
import { useTable } from './hooks/use-table';
import { useTableBody } from './hooks/use-table-body';
import SelectableCell from './selectable-cell';
import { SelectableCell as SelectableCellPrimitive } from './ui/selectable-cell';
import { TR as TRPrimitive } from './ui/tr';
/**
 * __Row__
 *
 * A table row.
 *
 * - [Examples](https://atlassian.design/components/table/examples)
 */
const Row = /*#__PURE__*/memo(({
  children,
  testId
}) => {
  // To ensure valid nesting
  useTableBody();
  // to access table state
  const {
    isSelectable
  } = useTable();
  const [{
    allChecked,
    checked
  }] = useSelection();
  const {
    isExpanded
  } = useExpand();
  const {
    isExpandableContent
  } = useExpandContent();
  const rowId = useRowId();
  const isSelected = useMemo(() => {
    if (!isSelectable || rowId === undefined) {
      return undefined;
    }
    return allChecked || checked.includes(rowId);
  }, [allChecked, checked, isSelectable, rowId]);
  if (isExpanded === false && isExpandableContent) {
    return null;
  }
  let selectableCell = isSelectable && jsx(SelectableCell, null);
  if (isSelectable && isExpandableContent) {
    selectableCell = jsx(SelectableCellPrimitive, {
      as: "td"
    });
  }
  return jsx(TRPrimitive, {
    isSelected: isSelected,
    testId: testId,
    isSubitem: isExpandableContent
  }, selectableCell, children);
});
export default Row;