/* eslint-disable @repo/internal/react/no-clone-element */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Children, useEffect, useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useSelection } from './hooks/selection-provider';
import { RowProvider } from './hooks/use-row-id';
import { useTable } from './hooks/use-table';
import { TableBodyProvider } from './hooks/use-table-body';
import { TBody as TBodyPrimitive } from './ui';
/**
 * __Table body__
 */
function TBody({
  rows,
  children
}) {
  const {
    sortFn
  } = useTable();
  const [_state, {
    removeAll,
    setMax
  }] = useSelection();
  // TODO: this seems like something the user should control or opt into.
  useEffect(() => {
    removeAll === null || removeAll === void 0 ? void 0 : removeAll();
    // eslint-disable-next-line react-hooks/exhaustive-deps -- When the rows change, we [currently] want to call removeAll.
  }, [rows]);
  const childrenCount = Children.count(children);
  const rowsLength = rows === null || rows === void 0 ? void 0 : rows.length;

  // Set data length (via setMax) whenever data changes
  useEffect(() => {
    const numRows = rowsLength !== null && rowsLength !== void 0 ? rowsLength : childrenCount;
    setMax === null || setMax === void 0 ? void 0 : setMax(numRows);
  }, [rowsLength, childrenCount, setMax]);
  const sortedRows = useMemo(() => rows === null || rows === void 0 ? void 0 : rows.map((row, idx) => ({
    ...row,
    idx
  })).sort(sortFn), [rows, sortFn]);
  const renderedChildren = (() => {
    if (typeof children === 'function') {
      return sortedRows === null || sortedRows === void 0 ? void 0 : sortedRows.map(({
        idx,
        ...row
      }) => jsx(RowProvider, {
        key: idx,
        value: idx
      },
      // @ts-expect-error
      children(row)));
    }
    const childrenArray = Array.isArray(children) ? children : [children];
    return childrenArray.map((row, idx) => jsx(RowProvider, {
      key: idx,
      value: idx
    }, row));
  })();
  return jsx(TableBodyProvider, {
    value: true
  }, jsx(TBodyPrimitive, null, renderedChildren));
}
export default TBody;