import React, { forwardRef } from 'react';
import { Box, xcss } from '@atlaskit/primitives';

/**
 * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort
 */

const baseResetStyles = xcss({
  display: 'table-cell',
  verticalAlign: 'middle',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':first-of-type': {
    paddingInlineStart: 'space.100'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ':last-of-type': {
    paddingInlineEnd: 'space.100'
  }
});
const alignMapStyles = {
  text: xcss({
    textAlign: 'left'
  }),
  icon: xcss({
    textAlign: 'center'
  }),
  number: xcss({
    textAlign: 'right'
  })
};

/**
 * __BaseCell__
 *
 * @internal
 *
 * Basic cell element.
 */
export const BaseCell = /*#__PURE__*/forwardRef(({
  testId,
  as,
  children,
  align = 'text',
  paddingBlock = 'space.100',
  paddingInline = 'space.100',
  backgroundColor,
  scope,
  width,
  xcss,
  sortDirection,
  colSpan,
  rowSpan
}, ref) => {
  // We're type coercing this as Compiled styles in an array isn't supported by the types
  // But the runtime accepts it none-the-wiser. We can remove this entire block and replace
  // it with cx(defaultStyles, focusRingStyles, xcssStyles) when we've moved away from Emotion.
  const styles = Array.isArray(xcss) ? xcss : [xcss];
  return /*#__PURE__*/React.createElement(Box, {
    xcss: [baseResetStyles, alignMapStyles[align], ...styles],
    ref: ref,
    scope: scope,
    backgroundColor: backgroundColor,
    paddingBlock: paddingBlock,
    paddingInline: paddingInline,
    as: as,
    testId: testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: width ? {
      width
    } : undefined,
    "aria-sort": sortDirection,
    colSpan: colSpan,
    rowSpan: rowSpan
  }, children);
});