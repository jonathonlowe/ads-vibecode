import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useCallback, useState } from 'react';
export var useSorting = function useSorting(sortKey) {
  var _useState = useState(sortKey),
    _useState2 = _slicedToArray(_useState, 2),
    localSortKey = _useState2[0],
    setLocalSortKey = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    localSortDirection = _useState4[0],
    setLocalSortDirection = _useState4[1];
  var toggleSortDirection = useCallback(function () {
    setLocalSortDirection(function (oldLocalSortDirection) {
      switch (oldLocalSortDirection) {
        case undefined:
          return 'ascending';
        case 'ascending':
          return 'descending';
        case 'descending':
          return 'ascending';
      }
    });
  }, []);
  var setSortState = useCallback(function (key) {
    setLocalSortKey(function (localSortKey) {
      if (key !== localSortKey) {
        // sorting by different column
        setLocalSortDirection('ascending');
        return key;
      } else {
        toggleSortDirection();
      }
      return localSortKey;
    });
  }, [toggleSortDirection]);
  var sortFn = useCallback(function (rowA, rowB) {
    if (localSortKey === 'unset') {
      return 0;
    }
    var ascendingComparator = rowA[localSortKey] < rowB[localSortKey] ? -1 : 1;
    return localSortDirection === 'ascending' ? ascendingComparator : -ascendingComparator;
  }, [localSortDirection, localSortKey]);
  return {
    sortKey: localSortKey,
    sortDirection: localSortDirection,
    setSortState: setSortState,
    sortFn: sortFn
  };
};