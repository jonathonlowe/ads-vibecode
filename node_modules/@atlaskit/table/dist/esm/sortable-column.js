import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["name", "testId", "onClick", "children"];
/* eslint-disable no-unused-vars */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Button from '@atlaskit/button';
import Tooltip from '@atlaskit/tooltip';
import { useTable } from './hooks/use-table';
import { SortIcon as SortIconPrimitive } from './ui/sort-icon';
import { TH as THPrimitive } from './ui/th';
/**
 * TODO these need to be i18n supported
 */
var sortingMessages = {
  unsorted: {
    string: 'Sort from A to Z',
    number: 'Sort from 0 to 9'
  },
  ascending: {
    string: 'Sort from A to Z',
    number: 'Sort from 0 to 9'
  },
  descending: {
    string: 'Sort from Z to A',
    number: 'Sort from 9 to 0'
  }
};
var overrideStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  margin: '0 -2px !important',
  gap: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  paddingInline: "2px !important"
});

/**
 * __SortableColumn__
 *
 * SortableColumn is used in place of the default Column when sorting is desired.
 */
var SortableColumn = function SortableColumn(_ref) {
  var name = _ref.name,
    testId = _ref.testId,
    onClick = _ref.onClick,
    children = _ref.children,
    other = _objectWithoutProperties(_ref, _excluded);
  var _useTable = useTable(),
    sortKey = _useTable.sortKey,
    sortDirection = _useTable.sortDirection,
    setSortState = _useTable.setSortState;
  var getSortMessage = function getSortMessage() {
    if (sortKey === name) {
      // TODO: Change message depending on data type (string/number)
      return sortingMessages[sortDirection || 'unsorted'].string;
    }
    return sortingMessages.unsorted.string;
  };
  var updateSortState = useCallback(
  // @ts-expect-error: TODO: Our `name` typing is off; refer to `SortKey`
  function () {
    return setSortState(name);
  }, [setSortState, name]);
  return jsx(THPrimitive, _extends({
    testId: testId,
    sortDirection: sortKey === name ? sortDirection : 'none'
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, other), jsx(Tooltip, {
    content: getSortMessage(),
    position: "top"
  }, function (tooltipProps) {
    return jsx(Button, _extends({
      testId: "".concat(testId, "--button"),
      spacing: "compact",
      appearance: "subtle",
      iconAfter: jsx(SortIconPrimitive, {
        name: name
      })
    }, tooltipProps, {
      onClick: updateSortState
      // TODO: (from codemod) Buttons with "css" or "style" prop can't be migrated for now. Please wait for the support of xcss prop.
      ,
      css: overrideStyles
      // TODO: i18n support for this attr
      ,
      "aria-roledescription": "Column sort button"
    }), children);
  }));
};
export default SortableColumn;