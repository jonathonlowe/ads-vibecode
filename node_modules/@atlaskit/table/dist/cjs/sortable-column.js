"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _useTable2 = require("./hooks/use-table");
var _sortIcon = require("./ui/sort-icon");
var _th = require("./ui/th");
var _excluded = ["name", "testId", "onClick", "children"];
/* eslint-disable no-unused-vars */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
/**
 * TODO these need to be i18n supported
 */
var sortingMessages = {
  unsorted: {
    string: 'Sort from A to Z',
    number: 'Sort from 0 to 9'
  },
  ascending: {
    string: 'Sort from A to Z',
    number: 'Sort from 0 to 9'
  },
  descending: {
    string: 'Sort from Z to A',
    number: 'Sort from 9 to 0'
  }
};
var overrideStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  margin: '0 -2px !important',
  gap: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
  paddingInline: "2px !important"
});

/**
 * __SortableColumn__
 *
 * SortableColumn is used in place of the default Column when sorting is desired.
 */
var SortableColumn = function SortableColumn(_ref) {
  var name = _ref.name,
    testId = _ref.testId,
    onClick = _ref.onClick,
    children = _ref.children,
    other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useTable = (0, _useTable2.useTable)(),
    sortKey = _useTable.sortKey,
    sortDirection = _useTable.sortDirection,
    setSortState = _useTable.setSortState;
  var getSortMessage = function getSortMessage() {
    if (sortKey === name) {
      // TODO: Change message depending on data type (string/number)
      return sortingMessages[sortDirection || 'unsorted'].string;
    }
    return sortingMessages.unsorted.string;
  };
  var updateSortState = (0, _react.useCallback)(
  // @ts-expect-error: TODO: Our `name` typing is off; refer to `SortKey`
  function () {
    return setSortState(name);
  }, [setSortState, name]);
  return (0, _react2.jsx)(_th.TH, (0, _extends2.default)({
    testId: testId,
    sortDirection: sortKey === name ? sortDirection : 'none'
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, other), (0, _react2.jsx)(_tooltip.default, {
    content: getSortMessage(),
    position: "top"
  }, function (tooltipProps) {
    return (0, _react2.jsx)(_button.default, (0, _extends2.default)({
      testId: "".concat(testId, "--button"),
      spacing: "compact",
      appearance: "subtle",
      iconAfter: (0, _react2.jsx)(_sortIcon.SortIcon, {
        name: name
      })
    }, tooltipProps, {
      onClick: updateSortState
      // TODO: (from codemod) Buttons with "css" or "style" prop can't be migrated for now. Please wait for the support of xcss prop.
      ,
      css: overrideStyles
      // TODO: i18n support for this attr
      ,
      "aria-roledescription": "Column sort button"
    }), children);
  }));
};
var _default = exports.default = SortableColumn;