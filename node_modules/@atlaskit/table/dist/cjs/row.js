"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _selectionProvider = require("./hooks/selection-provider");
var _useExpand2 = _interopRequireDefault(require("./hooks/use-expand"));
var _useExpandContent2 = _interopRequireDefault(require("./hooks/use-expand-content"));
var _useRowId = require("./hooks/use-row-id");
var _useTable2 = require("./hooks/use-table");
var _useTableBody = require("./hooks/use-table-body");
var _selectableCell = _interopRequireDefault(require("./selectable-cell"));
var _selectableCell2 = require("./ui/selectable-cell");
var _tr = require("./ui/tr");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/**
 * __Row__
 *
 * A table row.
 *
 * - [Examples](https://atlassian.design/components/table/examples)
 */
var Row = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var children = _ref.children,
    testId = _ref.testId;
  // To ensure valid nesting
  (0, _useTableBody.useTableBody)();
  // to access table state
  var _useTable = (0, _useTable2.useTable)(),
    isSelectable = _useTable.isSelectable;
  var _useSelection = (0, _selectionProvider.useSelection)(),
    _useSelection2 = (0, _slicedToArray2.default)(_useSelection, 1),
    _useSelection2$ = _useSelection2[0],
    allChecked = _useSelection2$.allChecked,
    checked = _useSelection2$.checked;
  var _useExpand = (0, _useExpand2.default)(),
    isExpanded = _useExpand.isExpanded;
  var _useExpandContent = (0, _useExpandContent2.default)(),
    isExpandableContent = _useExpandContent.isExpandableContent;
  var rowId = (0, _useRowId.useRowId)();
  var isSelected = (0, _react.useMemo)(function () {
    if (!isSelectable || rowId === undefined) {
      return undefined;
    }
    return allChecked || checked.includes(rowId);
  }, [allChecked, checked, isSelectable, rowId]);
  if (isExpanded === false && isExpandableContent) {
    return null;
  }
  var selectableCell = isSelectable && (0, _react2.jsx)(_selectableCell.default, null);
  if (isSelectable && isExpandableContent) {
    selectableCell = (0, _react2.jsx)(_selectableCell2.SelectableCell, {
      as: "td"
    });
  }
  return (0, _react2.jsx)(_tr.TR, {
    isSelected: isSelected,
    testId: testId,
    isSubitem: isExpandableContent
  }, selectableCell, children);
});
var _default = exports.default = Row;