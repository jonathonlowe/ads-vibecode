"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableProvider = TableProvider;
exports.useTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function generateContext() {
  return /*#__PURE__*/(0, _react.createContext)({
    isSelectable: false,
    sortKey: 'unset',
    setSortState: _noop.default,
    sortFn: function sortFn() {
      return 0;
    }
  });
}
var TableContext = generateContext();

/**
 * __Table state provider__
 *
 * The table context provides the data required for more complex functionality.
 *
 * - [Examples](https://atlassian.design/components/table/examples)
 */
function TableProvider(_ref) {
  var children = _ref.children,
    state = _ref.state;
  return (
    /*#__PURE__*/
    // @ts-expect-error
    _react.default.createElement(TableContext.Provider, {
      value: state
    }, children)
  );
}
var useTable = exports.useTable = function useTable() {
  return (
    // @ts-expect-error
    (0, _react.useContext)(TableContext)
  );
};