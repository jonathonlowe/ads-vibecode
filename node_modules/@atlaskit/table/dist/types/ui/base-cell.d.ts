import React, { type ReactNode } from 'react';
import { type BoxProps } from '@atlaskit/primitives';
export type BaseCellProps = {
    /**
     * A percentage of pixel width of the table to apply to a column.
     */
    width?: string;
    /**
     * Horizontal alignment of content.
     */
    align?: 'icon' | 'text' | 'number';
    /**
     * Whether the cell should render as a `td` or `th` element.
     */
    as?: 'td' | 'th';
    /**
     * Same behavior as the HTML attribute.
     *
     * @see 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope'
     */
    scope?: 'col' | 'row';
    /**
     * A `testId` prop is a unique string that appears as a data attribute `data-testid`
     * in the rendered code, serving as a hook for automated tests.
     */
    testId?: string;
    /**
     * Content of the cell.
     */
    children?: ReactNode;
    /**
     * Number of columns to span.
     */
    colSpan?: number;
    /**
     * Number of rows to span.
     */
    rowSpan?: number;
} & Pick<BoxProps<any>, 'paddingBlock' | 'paddingInline' | 'backgroundColor' | 'xcss'>;
/**
 * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort
 */
export type SortDirection = 'ascending' | 'descending' | 'none' | 'other';
/**
 * __BaseCell__
 *
 * @internal
 *
 * Basic cell element.
 */
export declare const BaseCell: React.ForwardRefExoticComponent<{
    /**
     * A percentage of pixel width of the table to apply to a column.
     */
    width?: string | undefined;
    /**
     * Horizontal alignment of content.
     */
    align?: "number" | "text" | "icon" | undefined;
    /**
     * Whether the cell should render as a `td` or `th` element.
     */
    as?: "td" | "th" | undefined;
    /**
     * Same behavior as the HTML attribute.
     *
     * @see 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope'
     */
    scope?: "col" | "row" | undefined;
    /**
     * A `testId` prop is a unique string that appears as a data attribute `data-testid`
     * in the rendered code, serving as a hook for automated tests.
     */
    testId?: string | undefined;
    /**
     * Content of the cell.
     */
    children?: ReactNode;
    /**
     * Number of columns to span.
     */
    colSpan?: number | undefined;
    /**
     * Number of rows to span.
     */
    rowSpan?: number | undefined;
} & Pick<BoxProps<any>, "backgroundColor" | "paddingBlock" | "paddingInline" | "xcss"> & {
    sortDirection?: SortDirection | undefined;
} & React.RefAttributes<HTMLTableCellElement>>;
