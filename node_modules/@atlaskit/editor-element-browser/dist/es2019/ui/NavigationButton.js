import _extends from "@babel/runtime/helpers/extends";
import React, { memo, useMemo } from 'react';
import { IconButton } from '@atlaskit/button/new';
import Heading from '@atlaskit/heading';
import ArrowLeftIcon from '@atlaskit/icon/core/arrow-left';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import ChevronRightIcon from '@atlaskit/icon/utility/chevron-right';
import ChevronUpIcon from '@atlaskit/icon/utility/chevron-up';
import Lozenge from '@atlaskit/lozenge';
import { Box, Inline, Pressable, xcss } from '@atlaskit/primitives';
import Tooltip from '@atlaskit/tooltip';
const buttonStyles = xcss({
  display: 'inline-flex',
  flexShrink: 0,
  boxSizing: 'border-box',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  textAlign: 'center',
  verticalAlign: 'middle',
  height: 'auto',
  minHeight: 'space.400',
  width: '100%',
  paddingBlock: 'space.075',
  paddingInline: 'space.100',
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  font: 'font.body',
  fontWeight: 'font.weight.medium',
  transition: 'opacity 0.3s, background 0.1s ease-out',
  backgroundColor: 'color.background.neutral.subtle',
  color: 'color.text.subtle',
  ':hover': {
    backgroundColor: 'color.background.neutral.subtle.hovered',
    color: 'color.text.subtle'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.subtle.pressed',
    color: 'color.text.subtle'
  }
});
const selectedButtonStyles = xcss({
  backgroundColor: 'color.background.selected',
  color: 'color.text.selected',
  ':visited': {
    color: 'color.text.selected'
  },
  ':hover': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.hovered'
  },
  ':active': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.pressed'
  }
});
const disabledButtonStyles = xcss({
  cursor: 'not-allowed',
  backgroundColor: 'color.background.disabled',
  color: 'color.text.disabled',
  ':hover': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  ':active': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  '::after': {
    content: 'none'
  }
});
const headingContainerStyles = xcss({
  textAlign: 'left',
  color: 'color.text.accent.orange'
});
const ButtonBase = /*#__PURE__*/memo(({
  id,
  mode,
  label,
  isSelected,
  isDisabled,
  isExpanded,
  attributes,
  onClick
}) => {
  const iconComponent = useMemo(() => {
    let Icon;
    let iconLabel;
    switch (mode) {
      case 'expandable':
        Icon = isExpanded ? ChevronUpIcon : ChevronDownIcon;
        iconLabel = isExpanded ? `Collapse ${label} inserts` : `Expand ${label} inserts`;
        break;
      default:
        Icon = ChevronRightIcon;
        iconLabel = `View all ${label} inserts`;
    }
    return /*#__PURE__*/React.createElement(Icon, {
      label: iconLabel
    });
  }, [isExpanded, label, mode]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: label,
    position: "top",
    ignoreTooltipPointerEvents: true
  }, tooltipProps => /*#__PURE__*/React.createElement(Pressable
  // eslint-disable-next-line react/jsx-props-no-spreading
  , _extends({}, tooltipProps, {
    type: "button",
    isDisabled: isDisabled,
    onClick: () => onClick === null || onClick === void 0 ? void 0 : onClick(id),
    xcss: [buttonStyles, isSelected && selectedButtonStyles, isDisabled && disabledButtonStyles]
  }), /*#__PURE__*/React.createElement(Inline, {
    as: "span",
    spread: "space-between",
    alignBlock: "center",
    space: 'space.100',
    grow: "fill",
    shouldWrap: false
  }, /*#__PURE__*/React.createElement(Inline, {
    alignBlock: "center",
    space: "space.100",
    shouldWrap: false
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: headingContainerStyles
  }, /*#__PURE__*/React.createElement(Heading, {
    size: 'xsmall',
    as: "span"
  }, label)), (attributes === null || attributes === void 0 ? void 0 : attributes.new) && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Lozenge, {
    appearance: "new"
  }, "New"))), /*#__PURE__*/React.createElement(Box, null, iconComponent))));
});
export const LinkNavButton = /*#__PURE__*/memo(props =>
/*#__PURE__*/
// eslint-disable-next-line react/jsx-props-no-spreading
React.createElement(ButtonBase, _extends({
  mode: "navigation"
}, props)));
export const ExpandableNavButton = /*#__PURE__*/memo(props =>
/*#__PURE__*/
// eslint-disable-next-line react/jsx-props-no-spreading
React.createElement(ButtonBase, _extends({
  mode: "expandable"
}, props)));
export const BackNavButton = /*#__PURE__*/memo(({
  label,
  onClick
}) => {
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: label,
    position: "top",
    ignoreTooltipPointerEvents: true
  }, tooltipProps => /*#__PURE__*/React.createElement(IconButton
  // eslint-disable-next-line react/jsx-props-no-spreading
  , _extends({}, tooltipProps, {
    label: label,
    icon: ArrowLeftIcon,
    appearance: "subtle",
    spacing: "compact",
    onClick: onClick
  })));
});