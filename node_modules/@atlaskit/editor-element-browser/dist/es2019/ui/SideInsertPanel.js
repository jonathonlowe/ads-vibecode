import React, { useCallback } from 'react';
import { SelectItemMode } from '@atlaskit/editor-common/type-ahead';
import { Stack } from '@atlaskit/primitives/compiled';
import { CategoriesStructure, useItems, PredefinedCategories } from '../utils/use-items';
import { ExpandablePanel } from './ExpandablePanel';
import { IconButtonGroup } from './IconButtonGroup';
import { ListButtonGroup, ListButtonGroupWithHeading } from './ListButtonGroup';
import { SearchPanel } from './SearchPanel';
import { SubPanelWithBackButton } from './SubPanel';
const DefaultView = ({
  suggested,
  itemsRegistry,
  categoryRegistry,
  onItemSelected,
  onCategorySelected
}) => {
  return /*#__PURE__*/React.createElement(Stack, null, suggested && /*#__PURE__*/React.createElement(IconButtonGroup, {
    id: suggested.id,
    items: suggested.items,
    label: suggested.label,
    onItemSelected: onItemSelected
  }), CategoriesStructure.map((category, i) => {
    const {
      defautltItems
    } = category;
    const items = defautltItems.length > 0 ? defautltItems.map(itemIdOrTitle => itemsRegistry[itemIdOrTitle]).filter(item => item) : categoryRegistry[category.id] ? categoryRegistry[category.id].slice(0, 5) : [];
    const shoudldShowSeparator = i === 0 && !suggested ? false : true;
    return items.length > 0 && /*#__PURE__*/React.createElement(ExpandablePanel, {
      key: category.id,
      id: category.id,
      label: category.title,
      items: items,
      hasSeparator: shoudldShowSeparator,
      onItemSelected: onItemSelected,
      onViewAllSelected: onCategorySelected
    });
  }));
};
const CategoryView = ({
  categoryRegistry,
  selectedCategory,
  onItemSelected,
  onBackButtonClicked
}) => {
  const categoryData = PredefinedCategories.get(selectedCategory);
  const categoryLevelItems = categoryRegistry[selectedCategory] || [];
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SubPanelWithBackButton, {
    label: categoryData.title,
    buttonLabel: "Back to all items",
    onClick: onBackButtonClicked
  }, categoryLevelItems.length > 0 && /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: categoryData.id,
    items: categoryLevelItems,
    onItemSelected: onItemSelected
  }), categoryData && categoryData.subcategories.map(({
    id,
    title
  }) => {
    return categoryRegistry[id] && /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
      id: id,
      label: title,
      items: categoryRegistry[id],
      onItemSelected: onItemSelected
    });
  })));
};
const SearchView = ({
  items,
  onItemSelected
}) => {
  return /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: 'search',
    items: items,
    onItemSelected: onItemSelected
  });
};
export const SideInsertPanel = ({
  items,
  onItemInsert
}) => {
  const onItemSelect = useCallback(index => {
    onItemInsert(SelectItemMode.SELECTED, index);
  }, [onItemInsert]);
  const {
    categoryRegistry,
    itemsRegistry,
    selectedCategory,
    searchItems,
    setSearchText,
    setSelectedCategory
  } = useItems(items);
  const view = searchItems ? /*#__PURE__*/React.createElement(SearchView, {
    items: searchItems,
    onItemSelected: onItemSelect
  }) : selectedCategory ? /*#__PURE__*/React.createElement(CategoryView, {
    categoryRegistry: categoryRegistry,
    selectedCategory: selectedCategory,
    onItemSelected: onItemSelect,
    onBackButtonClicked: () => setSelectedCategory(undefined)
  }) : /*#__PURE__*/React.createElement(DefaultView, {
    suggested: undefined,
    itemsRegistry: itemsRegistry,
    categoryRegistry: categoryRegistry,
    onItemSelected: onItemSelect,
    onCategorySelected: categoryId => {
      setSelectedCategory(categoryId);
    }
  });
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SearchPanel, {
    onChange: event => {
      setSearchText(event.target.value);
    }
  }), view);
};