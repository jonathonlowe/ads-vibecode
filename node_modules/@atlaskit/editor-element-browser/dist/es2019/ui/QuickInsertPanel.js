import React, { memo, useCallback } from 'react';
import { SelectItemMode } from '@atlaskit/editor-common/type-ahead';
import Section from '@atlaskit/menu/section';
import { Box, Stack, Text, xcss } from '@atlaskit/primitives';
import { CategoriesStructure, PredefinedCategories, useItems } from '../utils/use-items';
import { ListButtonGroup, ListButtonGroupWithHeading } from './ListButtonGroup';
import { ViewAllButtonItem } from './ListButtonItem';
import { LinkNavButton } from './NavigationButton';
import { SubPanelWithBackButton } from './SubPanel';
const navButtonContainerStyles = xcss({
  paddingTop: 'space.0',
  paddingBottom: 'space.0',
  paddingLeft: 'space.200',
  paddingRight: 'space.200'
});
const DefaultView = ({
  suggested,
  itemsRegistry,
  categoryRegistry,
  onItemSelected,
  onCategorySelected,
  setSelectedItem
}) => {
  return /*#__PURE__*/React.createElement(Stack, null, suggested && /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
    id: suggested.id,
    items: suggested.items.slice(0, 6),
    label: suggested.label,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: 0
  }), CategoriesStructure.map(category => {
    const {
      defautltItems
    } = category;
    const items = defautltItems.length > 0 ? defautltItems.map(itemIdOrTitle => itemsRegistry[itemIdOrTitle]).filter(item => item) : categoryRegistry[category.id] ? categoryRegistry[category.id].slice(0, 5) : [];
    return items.length > 0 && /*#__PURE__*/React.createElement(Section, {
      key: category.id,
      hasSeparator: true
    }, /*#__PURE__*/React.createElement(Box, {
      xcss: navButtonContainerStyles
    }, /*#__PURE__*/React.createElement(LinkNavButton, {
      id: category.id,
      label: category.title,
      onClick: onCategorySelected
    })));
  }));
};
const CategoryView = ({
  categoryRegistry,
  selectedCategory,
  onItemSelected,
  onBackButtonClicked
}) => {
  const categoryData = PredefinedCategories.get(selectedCategory);
  const categoryLevelItems = categoryRegistry[selectedCategory] || [];
  let startingIndex = categoryLevelItems.length;
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SubPanelWithBackButton, {
    label: categoryData.title,
    buttonLabel: "Back to all items",
    onClick: onBackButtonClicked
  }, categoryLevelItems.length > 0 && /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: categoryData.id,
    items: categoryLevelItems,
    onItemSelected: onItemSelected,
    startingIndex: 0
  }), categoryData && categoryData.subcategories.map(({
    id,
    title
  }) => {
    if (categoryRegistry[id]) {
      const list = /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
        id: id,
        label: title,
        items: categoryRegistry[id],
        onItemSelected: onItemSelected,
        startingIndex: startingIndex
      });
      startingIndex += categoryRegistry[id].length;
      return list;
    }
  })));
};
const SearchView = ({
  items,
  onItemSelected,
  setSelectedItem
}) => {
  return /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: 'search',
    items: items,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: 0
  });
};
const EmptySearchView = () => {
  return /*#__PURE__*/React.createElement(Box, {
    padding: "space.300"
  }, /*#__PURE__*/React.createElement(Stack, {
    space: "space.0"
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center",
    as: "p"
  }, "We couldn't find any results."), /*#__PURE__*/React.createElement(Text, {
    align: "center",
    as: "p"
  }, "Select ", /*#__PURE__*/React.createElement(Text, {
    weight: "medium"
  }, "View all"), " to browser inserts.")));
};
export const QuickInsertPanel = /*#__PURE__*/memo(({
  items,
  onItemInsert,
  onViewAllItemsClick,
  query,
  setSelectedItem
}) => {
  const onItemSelect = useCallback(index => {
    onItemInsert(SelectItemMode.SELECTED, index);
  }, [onItemInsert]);
  const {
    suggested,
    categoryRegistry,
    itemsRegistry,
    selectedCategory,
    searchItems,
    setSelectedCategory
  } = useItems(items, query);
  const showViewAllItems = Boolean(onViewAllItemsClick);
  const view = searchItems ? searchItems.length > 0 ? /*#__PURE__*/React.createElement(SearchView, {
    items: searchItems,
    onItemSelected: onItemSelect,
    setSelectedItem: setSelectedItem
  }) : /*#__PURE__*/React.createElement(EmptySearchView, null) : selectedCategory ? /*#__PURE__*/React.createElement(CategoryView, {
    categoryRegistry: categoryRegistry,
    selectedCategory: selectedCategory,
    onItemSelected: onItemSelect,
    onBackButtonClicked: () => setSelectedCategory(undefined)
  }) : /*#__PURE__*/React.createElement(DefaultView, {
    suggested: suggested,
    itemsRegistry: itemsRegistry,
    categoryRegistry: categoryRegistry,
    onItemSelected: onItemSelect,
    onCategorySelected: categoryId => {
      setSelectedCategory(categoryId);
    },
    setSelectedItem: setSelectedItem
  });
  if (showViewAllItems) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, view, showViewAllItems && /*#__PURE__*/React.createElement(ViewAllButtonItem, {
      isViewAllInserts: true,
      label: 'View all inserts' // TODO: ED-26961 - add i18n
      ,
      onClick: onViewAllItemsClick ? onViewAllItemsClick : () => {}
    }));
  } else {
    return view;
  }
});