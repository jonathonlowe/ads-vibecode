"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkNavButton = exports.ExpandableNavButton = exports.BackNavButton = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _new = require("@atlaskit/button/new");
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _arrowLeft = _interopRequireDefault(require("@atlaskit/icon/core/arrow-left"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-down"));
var _chevronRight = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-right"));
var _chevronUp = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-up"));
var _lozenge = _interopRequireDefault(require("@atlaskit/lozenge"));
var _primitives = require("@atlaskit/primitives");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var buttonStyles = (0, _primitives.xcss)({
  display: 'inline-flex',
  flexShrink: 0,
  boxSizing: 'border-box',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  textAlign: 'center',
  verticalAlign: 'middle',
  height: 'auto',
  minHeight: 'space.400',
  width: '100%',
  paddingBlock: 'space.075',
  paddingInline: 'space.100',
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  font: 'font.body',
  fontWeight: 'font.weight.medium',
  transition: 'opacity 0.3s, background 0.1s ease-out',
  backgroundColor: 'color.background.neutral.subtle',
  color: 'color.text.subtle',
  ':hover': {
    backgroundColor: 'color.background.neutral.subtle.hovered',
    color: 'color.text.subtle'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.subtle.pressed',
    color: 'color.text.subtle'
  }
});
var selectedButtonStyles = (0, _primitives.xcss)({
  backgroundColor: 'color.background.selected',
  color: 'color.text.selected',
  ':visited': {
    color: 'color.text.selected'
  },
  ':hover': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.hovered'
  },
  ':active': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.pressed'
  }
});
var disabledButtonStyles = (0, _primitives.xcss)({
  cursor: 'not-allowed',
  backgroundColor: 'color.background.disabled',
  color: 'color.text.disabled',
  ':hover': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  ':active': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  '::after': {
    content: 'none'
  }
});
var headingContainerStyles = (0, _primitives.xcss)({
  textAlign: 'left',
  color: 'color.text.accent.orange'
});
var ButtonBase = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var id = _ref.id,
    mode = _ref.mode,
    label = _ref.label,
    isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    isExpanded = _ref.isExpanded,
    attributes = _ref.attributes,
    _onClick = _ref.onClick;
  var iconComponent = (0, _react.useMemo)(function () {
    var Icon;
    var iconLabel;
    switch (mode) {
      case 'expandable':
        Icon = isExpanded ? _chevronUp.default : _chevronDown.default;
        iconLabel = isExpanded ? "Collapse ".concat(label, " inserts") : "Expand ".concat(label, " inserts");
        break;
      default:
        Icon = _chevronRight.default;
        iconLabel = "View all ".concat(label, " inserts");
    }
    return /*#__PURE__*/_react.default.createElement(Icon, {
      label: iconLabel
    });
  }, [isExpanded, label, mode]);
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: label,
    position: "top",
    ignoreTooltipPointerEvents: true
  }, function (tooltipProps) {
    return /*#__PURE__*/_react.default.createElement(_primitives.Pressable
    // eslint-disable-next-line react/jsx-props-no-spreading
    , (0, _extends2.default)({}, tooltipProps, {
      type: "button",
      isDisabled: isDisabled,
      onClick: function onClick() {
        return _onClick === null || _onClick === void 0 ? void 0 : _onClick(id);
      },
      xcss: [buttonStyles, isSelected && selectedButtonStyles, isDisabled && disabledButtonStyles]
    }), /*#__PURE__*/_react.default.createElement(_primitives.Inline, {
      as: "span",
      spread: "space-between",
      alignBlock: "center",
      space: 'space.100',
      grow: "fill",
      shouldWrap: false
    }, /*#__PURE__*/_react.default.createElement(_primitives.Inline, {
      alignBlock: "center",
      space: "space.100",
      shouldWrap: false
    }, /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      xcss: headingContainerStyles
    }, /*#__PURE__*/_react.default.createElement(_heading.default, {
      size: 'xsmall',
      as: "span"
    }, label)), (attributes === null || attributes === void 0 ? void 0 : attributes.new) && /*#__PURE__*/_react.default.createElement(_primitives.Box, null, /*#__PURE__*/_react.default.createElement(_lozenge.default, {
      appearance: "new"
    }, "New"))), /*#__PURE__*/_react.default.createElement(_primitives.Box, null, iconComponent)));
  });
});
var LinkNavButton = exports.LinkNavButton = /*#__PURE__*/(0, _react.memo)(function (props) {
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-props-no-spreading
    _react.default.createElement(ButtonBase, (0, _extends2.default)({
      mode: "navigation"
    }, props))
  );
});
var ExpandableNavButton = exports.ExpandableNavButton = /*#__PURE__*/(0, _react.memo)(function (props) {
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-props-no-spreading
    _react.default.createElement(ButtonBase, (0, _extends2.default)({
      mode: "expandable"
    }, props))
  );
});
var BackNavButton = exports.BackNavButton = /*#__PURE__*/(0, _react.memo)(function (_ref2) {
  var label = _ref2.label,
    onClick = _ref2.onClick;
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: label,
    position: "top",
    ignoreTooltipPointerEvents: true
  }, function (tooltipProps) {
    return /*#__PURE__*/_react.default.createElement(_new.IconButton
    // eslint-disable-next-line react/jsx-props-no-spreading
    , (0, _extends2.default)({}, tooltipProps, {
      label: label,
      icon: _arrowLeft.default,
      appearance: "subtle",
      spacing: "compact",
      onClick: onClick
    }));
  });
});