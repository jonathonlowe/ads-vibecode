"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButtonItem = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _primitives = require("@atlaskit/primitives");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _IconRenderer = require("./IconRenderer");
var _excluded = ["icon", "isSelected", "isDisabled", "onClick"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var WIDTH = '60px';
var largeButtonStyles = (0, _primitives.xcss)({
  display: 'inline-flex',
  flexShrink: 0,
  boxSizing: 'border-box',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  textAlign: 'center',
  verticalAlign: 'middle',
  height: "".concat(WIDTH),
  // The width and height of the button are the same for it to appear as square
  width: "".concat(WIDTH),
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  font: 'font.body',
  fontWeight: 'font.weight.medium',
  transition: 'opacity 0.3s, background 0.1s ease-out',
  backgroundColor: 'color.background.neutral.subtle',
  color: 'color.text.subtle',
  '::after': {
    position: 'absolute',
    inset: 'space.0',
    content: '""',
    borderRadius: 'inherit',
    borderStyle: 'solid',
    borderWidth: 'border.width',
    borderColor: 'color.border',
    pointerEvents: 'none'
  },
  ':hover': {
    backgroundColor: 'color.background.neutral.subtle.hovered',
    color: 'color.text.subtle'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.subtle.pressed',
    color: 'color.text.subtle'
  }
});
var selectedButtonStyles = (0, _primitives.xcss)({
  backgroundColor: 'color.background.selected',
  color: 'color.text.selected',
  '::after': {
    content: '""',
    borderColor: 'color.border.selected'
  },
  ':visited': {
    color: 'color.text.selected'
  },
  ':hover': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.hovered'
  },
  ':active': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.pressed'
  }
});
var disabledButtonStyles = (0, _primitives.xcss)({
  cursor: 'not-allowed',
  backgroundColor: 'color.background.disabled',
  color: 'color.text.disabled',
  ':hover': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  ':active': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  '::after': {
    content: 'none'
  }
});
var iconStyles = (0, _primitives.xcss)({
  display: 'flex',
  flexGrow: 0,
  flexShrink: 0,
  alignSelf: 'center',
  userSelect: 'none'
});
var textStyles = (0, _primitives.xcss)({
  width: "".concat(WIDTH)
});
var LargeIconButtonWithRef = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
    isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    onClick = _ref.onClick,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(_primitives.Pressable
  // eslint-disable-next-line react/jsx-props-no-spreading
  , (0, _extends2.default)({}, rest, {
    ref: ref,
    type: "button",
    isDisabled: isDisabled,
    onClick: onClick,
    xcss: [largeButtonStyles, isSelected && selectedButtonStyles, isDisabled && disabledButtonStyles]
  }), /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    as: "span",
    xcss: iconStyles
  }, icon));
}));
var IconButtonItem = exports.IconButtonItem = /*#__PURE__*/(0, _react.memo)(function (_ref2) {
  var index = _ref2.index,
    title = _ref2.title,
    keyshortcut = _ref2.keyshortcut,
    isSelected = _ref2.isSelected,
    isDisabled = _ref2.isDisabled,
    renderIcon = _ref2.renderIcon,
    onItemSelected = _ref2.onItemSelected;
  var iconComponent = (0, _react.useMemo)(function () {
    if (!renderIcon) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_IconRenderer.IconRenderer, null, renderIcon());
  }, [renderIcon]);
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: /*#__PURE__*/_react.default.createElement(_keymaps.ToolTipContent, {
      description: title,
      keymap: keyshortcut
    }),
    position: "top",
    ignoreTooltipPointerEvents: true
  }, function (tooltipProps) {
    return /*#__PURE__*/_react.default.createElement(_primitives.Stack, {
      alignInline: "center",
      space: "space.050"
    }, /*#__PURE__*/_react.default.createElement(LargeIconButtonWithRef
    // eslint-disable-next-line react/jsx-props-no-spreading
    , (0, _extends2.default)({}, tooltipProps, {
      icon: iconComponent,
      isSelected: isSelected,
      isDisabled: isDisabled,
      onClick: function onClick() {
        return onItemSelected === null || onItemSelected === void 0 ? void 0 : onItemSelected(index);
      }
    })), /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      xcss: textStyles
    }, /*#__PURE__*/_react.default.createElement(_primitives.Text, {
      align: "center",
      maxLines: 1,
      color: isDisabled ? 'color.text.disabled' : isSelected ? 'color.text.selected' : 'color.text.subtle',
      size: "small"
    }, title)));
  });
});