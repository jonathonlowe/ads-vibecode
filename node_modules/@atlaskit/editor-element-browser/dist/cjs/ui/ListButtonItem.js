"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewAllButtonItem = exports.ListButtonItem = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _chevronRight = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-right"));
var _lozenge = _interopRequireDefault(require("@atlaskit/lozenge"));
var _menu = require("@atlaskit/menu");
var _primitives = require("@atlaskit/primitives");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _IconRenderer = require("./IconRenderer");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var shortcutStyles = (0, _primitives.xcss)({
  color: 'color.text.subtle',
  font: 'font.body.small',
  backgroundColor: 'color.background.accent.gray.subtlest',
  borderRadius: 'border.radius',
  borderStyle: 'none'
});
var selectedColorStyles = (0, _primitives.xcss)({
  color: 'color.text.selected'
});
var disabledShortcutStyles = (0, _primitives.xcss)({
  color: 'color.text.disabled',
  backgroundColor: 'color.background.disabled'
});
var viewAllStyles = (0, _primitives.xcss)({
  background: "var(--ds-surface-overlay, #FFFFFF)",
  position: 'sticky',
  bottom: '-4px',
  width: '100%',
  height: '40px',
  borderTop: "1px solid ".concat("var(--ds-border, #091E4224)")
});
var ListButtonItemBase = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var index = _ref.index,
    title = _ref.title,
    description = _ref.description,
    keyshortcut = _ref.keyshortcut,
    isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    _ref$showDescription = _ref.showDescription,
    showDescription = _ref$showDescription === void 0 ? false : _ref$showDescription,
    renderContent = _ref.renderContent,
    renderIcon = _ref.renderIcon,
    renderElementAfter = _ref.renderElementAfter,
    onItemSelected = _ref.onItemSelected;
  var beforeElement = (0, _react.useMemo)(function () {
    if (!renderIcon) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_IconRenderer.IconRenderer, null, renderIcon());
  }, [renderIcon]);
  var afterElement = (0, _react.useMemo)(function () {
    return renderElementAfter === null || renderElementAfter === void 0 ? void 0 : renderElementAfter();
  }, [renderElementAfter]);
  var content = (0, _react.useMemo)(function () {
    return renderContent === null || renderContent === void 0 ? void 0 : renderContent();
  }, [renderContent]);
  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: /*#__PURE__*/_react.default.createElement(_keymaps.ToolTipContent, {
      description: title,
      keymap: keyshortcut
    }),
    position: "top",
    ignoreTooltipPointerEvents: true
  }, function (tooltipProps) {
    return /*#__PURE__*/_react.default.createElement(_menu.ButtonItem
    // eslint-disable-next-line react/jsx-props-no-spreading
    , (0, _extends2.default)({}, tooltipProps, {
      iconBefore: beforeElement,
      iconAfter: afterElement,
      description: showDescription ? description : undefined,
      shouldDescriptionWrap: true,
      isSelected: isSelected,
      isDisabled: isDisabled,
      onClick: function onClick() {
        return onItemSelected === null || onItemSelected === void 0 ? void 0 : onItemSelected(index);
      }
    }), content);
  });
});
var ListButtonItem = exports.ListButtonItem = /*#__PURE__*/(0, _react.memo)(function (props) {
  var keyshortcut = props.keyshortcut,
    isSelected = props.isSelected,
    isDisabled = props.isDisabled,
    attributes = props.attributes,
    title = props.title,
    setSelectedItem = props.setSelectedItem,
    index = props.index;
  var shortcutComponent = (0, _react.useCallback)(function () {
    var shortcut = keyshortcut && (0, _keymaps.formatShortcut)(keyshortcut);
    if (!shortcut) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      paddingInline: "space.025",
      paddingBlock: "space.025",
      xcss: [shortcutStyles, isSelected && selectedColorStyles, isDisabled && disabledShortcutStyles]
    }, shortcut);
  }, [isDisabled, isSelected, keyshortcut]);
  var contentComponent = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(_primitives.Inline, {
      space: "space.100",
      alignBlock: 'center'
    }, /*#__PURE__*/_react.default.createElement(_primitives.Text, null, title), (attributes === null || attributes === void 0 ? void 0 : attributes.new) && /*#__PURE__*/_react.default.createElement(_lozenge.default, {
      appearance: "new"
    }, "New"));
  }, [attributes === null || attributes === void 0 ? void 0 : attributes.new, title]);
  (0, _react.useEffect)(function () {
    if (isSelected) {
      setSelectedItem === null || setSelectedItem === void 0 || setSelectedItem({
        index: index
      });
    }
  }, [isSelected, setSelectedItem, index]);
  return /*#__PURE__*/_react.default.createElement(ListButtonItemBase
  // eslint-disable-next-line react/jsx-props-no-spreading
  , (0, _extends2.default)({}, props, {
    renderContent: contentComponent,
    renderElementAfter: shortcutComponent
  }));
});
var ViewAllButtonItem = exports.ViewAllButtonItem = /*#__PURE__*/(0, _react.memo)(function (_ref2) {
  var label = _ref2.label,
    onClick = _ref2.onClick,
    _ref2$isViewAllInsert = _ref2.isViewAllInserts,
    isViewAllInserts = _ref2$isViewAllInsert === void 0 ? false : _ref2$isViewAllInsert;
  var contentComponent = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(_primitives.Inline, {
      space: "space.100",
      alignBlock: 'center'
    }, /*#__PURE__*/_react.default.createElement(_primitives.Text, {
      color: 'color.text.selected'
    }, label), /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      xcss: [selectedColorStyles]
    }, /*#__PURE__*/_react.default.createElement(_chevronRight.default, {
      label: label
    })));
  }, [label]);
  return isViewAllInserts ? /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    xcss: viewAllStyles
  }, /*#__PURE__*/_react.default.createElement(ListButtonItemBase, {
    index: -1,
    title: label,
    onItemSelected: onClick,
    renderContent: contentComponent,
    isViewAll: true
  })) : /*#__PURE__*/_react.default.createElement(ListButtonItemBase, {
    index: -1,
    title: label,
    onItemSelected: onClick,
    renderContent: contentComponent
  });
});