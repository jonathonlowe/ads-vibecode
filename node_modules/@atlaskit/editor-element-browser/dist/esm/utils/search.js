import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import Fuse from 'fuse.js';
// Copied from platform/packages/editor/editor-common/src/quick-insert/utils.ts

var options = {
  threshold: 0.3,
  includeScore: true,
  keys: [{
    name: 'title',
    weight: 0.57
  }, {
    name: 'priority',
    weight: 0.3
  }, {
    name: 'keywords',
    weight: 0.08
  }, {
    name: 'description',
    weight: 0.04
  }, {
    name: 'keyshortcut',
    weight: 0.01
  }]
};

// If an item has an id, it is a native editor element
// for the demo we could also use item.shouldDisplayAtTop (can potentially be
// replaced by item.isEditorExtention or something similar).
// For now, let's test search usring id as it is closer to production implementation.
var prioritySortingFn = function prioritySortingFn(items) {
  return function (a, b) {
    if (items[a.idx].id && items[b.idx].id) {
      return a.score - b.score;
    } else if (items[a.idx].id) {
      return -1;
    } else {
      return 1;
    }
  };
};

/**
 * This function is used to find and sort InsertPanelItem based on a given query string.
 *
 * @export
 * @param {string} query - The query string to be used in the search.
 * @param {InsertPanelItem[]} items - An array of InsertPanelItem to be searched.
 * @returns {InsertPanelItem[]} - Returns a sorted array of InsertPanelItem based on the priority. If the query string is empty,
 * it will return the array sorted by priority. If a query string is provided, it will return an array of QuickInsertItems that
 * match the query string, sorted by relevance to the query.
 */
export function find(query, items) {
  if (query === '') {
    // Copy and sort list by priority
    return items.slice(0).sort(function (a, b) {
      return (a.priority || Number.POSITIVE_INFINITY) - (b.priority || Number.POSITIVE_INFINITY);
    });
  }
  var fuseOptions = _objectSpread(_objectSpread({}, options), {}, {
    sortFn: prioritySortingFn(items)
  });
  var fuse = new Fuse(items, fuseOptions);
  return fuse.search(query).map(function (result) {
    return result.item;
  });
}