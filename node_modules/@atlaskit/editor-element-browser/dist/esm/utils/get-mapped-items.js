import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import DividerElementIcon from '@atlaskit/icon-lab/core/divider-element';
import ExpandElementIcon from '@atlaskit/icon-lab/core/expand-element';
// Status
import LozengeIcon from '@atlaskit/icon-lab/core/lozenge';
// Codeblock
import AngleBracketsIcon from '@atlaskit/icon/core/angle-brackets';
import CalendarIcon from '@atlaskit/icon/core/calendar';
// Decision
import DecisionIcon from '@atlaskit/icon/core/decision';
// Emoji
import EmojiIcon from '@atlaskit/icon/core/emoji';
// Table
import GridIcon from '@atlaskit/icon/core/grid';
// Media, Media-insert
import ImageIcon from '@atlaskit/icon/core/image';
// Temporaty Panel icon
import InformationCircleIcon from '@atlaskit/icon/core/information-circle';
// Layout 2-cols
// import LayoutTwoColumnsIcon from '@atlaskit/icon/core/layout-two-columns';
// Layout 3-cols
import LayoutThreeColumnsIcon from '@atlaskit/icon/core/layout-three-columns';
// Link
import LinkIcon from '@atlaskit/icon/core/link';
// Mention
import MentionIcon from '@atlaskit/icon/core/mention';
// Placehoder icon for native elements:
// Date, Divider (rule), Expand, Layout (1, 4, 5 cols), Panel (all), Status
// import MinusIcon from '@atlaskit/icon/core/minus';
// Blockquote
import QuotationMarkIcon from '@atlaskit/icon/core/quotation-mark';
// Action
import TaskIcon from '@atlaskit/icon/core/task';
// Loom
import VideoIcon from '@atlaskit/icon/core/video';
var getItemData = function getItemData(item, tempKey) {
  var itemId = item.id;
  var itemTitle = item.title;
  if (itemId && itemId !== 'datasource') {
    switch (itemId) {
      case 'action':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(TaskIcon, {
              label: ""
            });
          },
          categories: ['text structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'media-insert':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(ImageIcon, {
              label: ""
            });
          },
          categories: ['media'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'mention':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(MentionIcon, {
              label: ""
            });
          },
          categories: ['collaborate'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'emoji':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(EmojiIcon, {
              label: ""
            });
          },
          categories: ['media'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'expand':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(ExpandElementIcon, {
              label: ""
            });
          },
          categories: ['page structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'table':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(GridIcon, {
              label: ""
            });
          },
          categories: ['page structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'codeblock':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(AngleBracketsIcon, {
              label: ""
            });
          },
          categories: ['text structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'status':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(LozengeIcon, {
              label: ""
            });
          },
          categories: ['text structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'infopanel':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(InformationCircleIcon, {
              label: ""
            });
          },
          categories: ['page structure'],
          shouldDisplayAtTop: true,
          title: 'Panel',
          tempKey: tempKey
        });
      case 'date':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(CalendarIcon, {
              label: ""
            });
          },
          categories: ['date'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'loom':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(VideoIcon, {
              label: ""
            });
          },
          categories: ['media'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'decision':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(DecisionIcon, {
              label: ""
            });
          },
          categories: ['text structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'threecolumnslayout':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(LayoutThreeColumnsIcon, {
              label: ""
            });
          },
          categories: ['page structure'],
          shouldDisplayAtTop: true,
          title: 'Layout',
          tempKey: tempKey
        });
      case 'hyperlink':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(LinkIcon, {
              label: ""
            });
          },
          categories: ['media'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'rule':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(DividerElementIcon, {
              label: ""
            });
          },
          categories: ['page structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'blockquote':
        return _objectSpread(_objectSpread({}, item), {}, {
          icon: function icon() {
            return /*#__PURE__*/React.createElement(QuotationMarkIcon, {
              label: ""
            });
          },
          categories: ['text structure'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
    }
  } else if (itemTitle) {
    switch (itemTitle) {
      case 'Assets':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['data'],
          tempKey: tempKey
        });
      case 'Jira Issues':
      case 'Jira Road Map':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['jira'],
          tempKey: tempKey
        });
      case 'Labels List':
      case 'Related Labels':
      case 'Labels Gadget':
      case 'Popular Labels':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['labels'],
          tempKey: tempKey
        });
      case 'Version Report':
      case 'Time to First Response':
      case 'Decision report':
      case 'Two Dimensional Filter Statistics':
      case 'Task report':
      case 'Issue Statistics':
      case 'Page Properties Report':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['reports'],
          tempKey: tempKey
        });
      case 'Opsgenie Incident Timeline EU':
      case 'Opsgenie Incident Timeline':
      case 'Jira timeline':
      case 'JSM Incident Timeline EU':
      case 'JSM Incident Timeline':
      case 'Resolution Time':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['timelines'],
          tempKey: tempKey
        });
      case 'Create database':
      case 'Filter by label':
      case 'Chart':
      case 'Create Jira issue':
      case 'Content Report Table':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['data'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'Heat Map':
      case 'Pie Chart':
      case 'Time Since Chart':
      case 'Recently Created Chart':
      case 'Created vs. Resolved Chart':
      case 'Average Age Chart':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['charts'],
          tempKey: tempKey
        });
      case 'Agile Wallboard Gadget':
      case 'Sprint Burndown Gadget':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['gadgets'],
          tempKey: tempKey
        });
      case 'Anchor link':
      case 'Child pages':
      case 'Page Index':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['navigation'],
          tempKey: tempKey
        });
      case 'Table of contents':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['page structure'],
          tempKey: tempKey
        });
      case 'Insert Confluence list':
      case 'Live Search':
      case 'Page Tree Search':
      case 'Page Tree':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['search'],
          tempKey: tempKey
        });
      case 'Excerpt':
      case 'Recently Updated Dashboard':
      case 'Create from Template':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['connect pages'],
          tempKey: tempKey
        });
      case 'Powerpoint':
      case 'Excel':
      case 'Iframe':
      case 'Profile Picture':
      case 'Blog Posts':
      case 'Gallery':
      case 'Word':
      case 'PDF':
      case 'Widget Connector':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['media'],
          tempKey: tempKey
        });
      case 'Create whiteboard':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['media'],
          shouldDisplayAtTop: true,
          tempKey: tempKey
        });
      case 'Contributors':
      case 'Contributors Summary':
      case 'User List':
      case 'Voted Issues':
      case 'User Profile':
      case 'Spaces List':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['collaborate'],
          tempKey: tempKey
        });
      case 'Gliffy Diagram':
        return _objectSpread(_objectSpread({}, item), {}, {
          categories: ['apps'],
          tempKey: tempKey
        });
      default:
        return _objectSpread(_objectSpread({}, item), {}, {
          tempKey: tempKey
        });
    }
  }
  return _objectSpread(_objectSpread({}, item), {}, {
    categories: ['apps'],
    // category: 'apps',
    // subCategory: undefined,
    tempKey: tempKey
  });
};
export var getMappedItems = function getMappedItems(items) {
  return items.map(function (item, index) {
    return getItemData(item, index);
  });
};