import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useMemo, useState } from 'react';
import { makeKeyMapWithCommon } from '@atlaskit/editor-common/keymaps';
import { getMappedItems } from './get-mapped-items';
import { find } from './search';
var transformBrowserElementItem = function transformBrowserElementItem(item) {
  return {
    index: item.tempKey,
    title: item.title,
    description: item.description,
    showDescription: Boolean(item === null || item === void 0 ? void 0 : item.id) && item.id !== 'datasource' ? false : true,
    keyshortcut: item.keyshortcut ? makeKeyMapWithCommon('', item.keyshortcut) : undefined,
    renderIcon: item.icon
  };
};

// TODO: ED-26961 - Title will need to be i18n

export var CategoriesStructure = [{
  id: 'media',
  title: 'Media',
  subcategories: [],
  // defaultItems and array or native elements' ids or titles of an extensions
  // TODO: ED-26961 - how should we identify extensions in prod?
  // Note: only 'media' or 'media-insert' will be available, so we'll display only 5 default items
  defautltItems: ['media', 'media-insert', 'emoji', 'hyperlink', 'loom', 'Create whiteboard']
}, {
  id: 'structure',
  title: 'Structure',
  subcategories: [{
    id: 'text structure',
    title: 'Text structure'
  }, {
    id: 'page structure',
    title: 'Page structure'
  }, {
    id: 'connect pages',
    title: 'Connect pages'
  }, {
    id: 'navigation',
    title: 'Navigation'
  }, {
    id: 'search',
    title: 'Search'
  }],
  defautltItems: ['date', 'decision', 'status', 'table', 'Table of contents']
}, {
  id: 'data',
  title: 'Data',
  subcategories: [{
    id: 'charts',
    title: 'Charts'
  }, {
    id: 'gadgets',
    title: 'Gadgets'
  }, {
    id: 'jira',
    title: 'Jira'
  }, {
    id: 'labels',
    title: 'Labels'
  }, {
    id: 'reports',
    title: 'Reports'
  }, {
    id: 'timelines',
    title: 'Timelines'
  }],
  defautltItems: ['Create database', 'Filter by label', 'Chart', 'Create Jira issue', 'Content Report Table']
}, {
  id: 'collaborate',
  title: 'Collaborate',
  subcategories: [],
  defautltItems: ['mention', 'Contributors', 'Contributors Summary', 'User Profile', 'Spaces List']
}, {
  id: 'ai',
  title: 'Atlassian Intelligence',
  subcategories: [],
  defautltItems: []
}, {
  id: 'apps',
  title: 'Apps',
  subcategories: [],
  defautltItems: []
}];
export var PredefinedCategories = new Map();
CategoriesStructure.forEach(function (categoryData) {
  PredefinedCategories.set(categoryData.id, categoryData);
  categoryData.subcategories.forEach(function (subcategoryData) {
    PredefinedCategories.set(subcategoryData.id, subcategoryData);
  });
});
var parseCategories = function parseCategories(itemCategories) {
  if (!itemCategories) {
    return ['apps'];
  }
  var filteredCategories = itemCategories.filter(function (category) {
    return PredefinedCategories.has(category.toLocaleLowerCase());
  });
  return filteredCategories.length > 0 ? filteredCategories : ['apps'];
};
var suggestedIds = ['table', 'action', 'codeblock', 'infopanel', 'threecolumnslayout', 'emoji', 'rule', 'expand'];

// slices items from the QuickInsertPanelItem[] into suggested, categories and search result items
export var useItems = function useItems(quickInsertPanelItems, query) {
  var _useState = useState(query),
    _useState2 = _slicedToArray(_useState, 2),
    searchText = _useState2[0],
    setSearchText = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedCategory = _useState4[0],
    setSelectedCategory = _useState4[1];
  var insertPanelItems = useMemo(function () {
    return getMappedItems(quickInsertPanelItems);
  }, [quickInsertPanelItems]);
  var categoryRegistry = {};
  var itemsRegistry = {};
  var suggestedItems = [];
  insertPanelItems.forEach(function (item) {
    var categories = parseCategories(item.categories);
    var preparedItem = transformBrowserElementItem(item);
    categories.forEach(function (category) {
      category = category.toLocaleLowerCase();
      if (categoryRegistry[category]) {
        categoryRegistry[category].push(preparedItem);
      } else {
        categoryRegistry[category] = [preparedItem];
      }
    });
    var itemKey = item.id || item.title;
    itemsRegistry[itemKey] = preparedItem;
    for (var i = 0; i < suggestedIds.length; i++) {
      var realSuggestedItems = suggestedItems.filter(function (item) {
        return item;
      });
      if (realSuggestedItems.length < suggestedIds.length && itemKey === suggestedIds[i]) {
        suggestedItems[i] = preparedItem;
      }
    }
  });

  // Ignored via go/ees007
  // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
  var suggested = {
    id: 'suggested',
    label: 'Suggestions',
    items: suggestedItems
  }; // TODO define the id and label as constants

  // when query gets updated from the prop drilling it won't cause a re-render of the hook
  // as it will be treated only as default state, so for now combinbing searchText and query here
  // we need to find a better more performant solution for the search (after the demo)
  var combinedSearchText = useMemo(function () {
    return searchText || query;
  }, [query, searchText]);
  var searchItems = useMemo(function () {
    if (!combinedSearchText) {
      return undefined;
    }
    var filteredItems = find(combinedSearchText, insertPanelItems);
    return filteredItems.map(function (item) {
      return transformBrowserElementItem(item);
    });
  }, [insertPanelItems, combinedSearchText]);
  return {
    suggested: suggested,
    categoryRegistry: categoryRegistry,
    itemsRegistry: itemsRegistry,
    selectedCategory: selectedCategory,
    searchItems: searchItems,
    setSearchText: setSearchText,
    setSelectedCategory: setSelectedCategory
  };
};