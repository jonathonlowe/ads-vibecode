import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { memo, useState } from 'react';
import { Section } from '@atlaskit/menu';
import { Box, Stack, xcss } from '@atlaskit/primitives';
import { ListButtonItem, ViewAllButtonItem } from './ListButtonItem';
import { ExpandableNavButton } from './NavigationButton';
var headingContainerStyles = xcss({
  paddingTop: 'space.100',
  paddingBottom: 'space.075',
  paddingLeft: 'space.300',
  paddingRight: 'space.300'
});
var itemsContainerStyles = xcss({
  paddingTop: 'space.0',
  paddingBottom: 'space.150',
  paddingLeft: 'space.200',
  paddingRight: 'space.200'
});
export var ExpandablePanel = /*#__PURE__*/memo(function (_ref) {
  var id = _ref.id,
    label = _ref.label,
    items = _ref.items,
    hasSeparator = _ref.hasSeparator,
    attributes = _ref.attributes,
    _onItemSelected = _ref.onItemSelected,
    onViewAllSelected = _ref.onViewAllSelected;
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isExpanded = _useState2[0],
    setIsExpanded = _useState2[1];

  // Dirty fix for AI label
  var shortAIlabel = label === 'Atlassian Intelligence';
  return /*#__PURE__*/React.createElement(Section, {
    hasSeparator: hasSeparator
  }, label && /*#__PURE__*/React.createElement(Box, {
    xcss: [headingContainerStyles]
  }, /*#__PURE__*/React.createElement(ExpandableNavButton, {
    id: id,
    label: label,
    isExpanded: isExpanded,
    attributes: attributes,
    onClick: function onClick() {
      return setIsExpanded(!isExpanded);
    }
  })), isExpanded && /*#__PURE__*/React.createElement(Stack, {
    space: "space.025",
    xcss: [itemsContainerStyles]
  }, items.map(function (item) {
    return /*#__PURE__*/React.createElement(ListButtonItem, {
      key: item.index,
      index: item.index,
      title: item.title,
      description: item.description,
      showDescription: item.showDescription,
      attributes: item.attributes,
      keyshortcut: item.keyshortcut,
      renderIcon: item.renderIcon,
      onItemSelected: function onItemSelected(index) {
        return _onItemSelected === null || _onItemSelected === void 0 ? void 0 : _onItemSelected(index, id);
      }
    });
  }), /*#__PURE__*/React.createElement(ViewAllButtonItem, {
    label: "View all ".concat(shortAIlabel ? 'AI' : label.toLocaleLowerCase(), " options"),
    onClick: function onClick() {
      return onViewAllSelected === null || onViewAllSelected === void 0 ? void 0 : onViewAllSelected(id);
    }
  })));
});