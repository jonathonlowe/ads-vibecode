import React, { memo, useCallback } from 'react';
import { SelectItemMode } from '@atlaskit/editor-common/type-ahead';
import Section from '@atlaskit/menu/section';
import { Box, Stack, Text, xcss } from '@atlaskit/primitives';
import { CategoriesStructure, PredefinedCategories, useItems } from '../utils/use-items';
import { ListButtonGroup, ListButtonGroupWithHeading } from './ListButtonGroup';
import { ViewAllButtonItem } from './ListButtonItem';
import { LinkNavButton } from './NavigationButton';
import { SubPanelWithBackButton } from './SubPanel';
var navButtonContainerStyles = xcss({
  paddingTop: 'space.0',
  paddingBottom: 'space.0',
  paddingLeft: 'space.200',
  paddingRight: 'space.200'
});
var DefaultView = function DefaultView(_ref) {
  var suggested = _ref.suggested,
    itemsRegistry = _ref.itemsRegistry,
    categoryRegistry = _ref.categoryRegistry,
    onItemSelected = _ref.onItemSelected,
    onCategorySelected = _ref.onCategorySelected,
    setSelectedItem = _ref.setSelectedItem;
  return /*#__PURE__*/React.createElement(Stack, null, suggested && /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
    id: suggested.id,
    items: suggested.items.slice(0, 6),
    label: suggested.label,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: 0
  }), CategoriesStructure.map(function (category) {
    var defautltItems = category.defautltItems;
    var items = defautltItems.length > 0 ? defautltItems.map(function (itemIdOrTitle) {
      return itemsRegistry[itemIdOrTitle];
    }).filter(function (item) {
      return item;
    }) : categoryRegistry[category.id] ? categoryRegistry[category.id].slice(0, 5) : [];
    return items.length > 0 && /*#__PURE__*/React.createElement(Section, {
      key: category.id,
      hasSeparator: true
    }, /*#__PURE__*/React.createElement(Box, {
      xcss: navButtonContainerStyles
    }, /*#__PURE__*/React.createElement(LinkNavButton, {
      id: category.id,
      label: category.title,
      onClick: onCategorySelected
    })));
  }));
};
var CategoryView = function CategoryView(_ref2) {
  var categoryRegistry = _ref2.categoryRegistry,
    selectedCategory = _ref2.selectedCategory,
    onItemSelected = _ref2.onItemSelected,
    onBackButtonClicked = _ref2.onBackButtonClicked;
  var categoryData = PredefinedCategories.get(selectedCategory);
  var categoryLevelItems = categoryRegistry[selectedCategory] || [];
  var startingIndex = categoryLevelItems.length;
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SubPanelWithBackButton, {
    label: categoryData.title,
    buttonLabel: "Back to all items",
    onClick: onBackButtonClicked
  }, categoryLevelItems.length > 0 && /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: categoryData.id,
    items: categoryLevelItems,
    onItemSelected: onItemSelected,
    startingIndex: 0
  }), categoryData && categoryData.subcategories.map(function (_ref3) {
    var id = _ref3.id,
      title = _ref3.title;
    if (categoryRegistry[id]) {
      var list = /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
        id: id,
        label: title,
        items: categoryRegistry[id],
        onItemSelected: onItemSelected,
        startingIndex: startingIndex
      });
      startingIndex += categoryRegistry[id].length;
      return list;
    }
  })));
};
var SearchView = function SearchView(_ref4) {
  var items = _ref4.items,
    onItemSelected = _ref4.onItemSelected,
    setSelectedItem = _ref4.setSelectedItem;
  return /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: 'search',
    items: items,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: 0
  });
};
var EmptySearchView = function EmptySearchView() {
  return /*#__PURE__*/React.createElement(Box, {
    padding: "space.300"
  }, /*#__PURE__*/React.createElement(Stack, {
    space: "space.0"
  }, /*#__PURE__*/React.createElement(Text, {
    align: "center",
    as: "p"
  }, "We couldn't find any results."), /*#__PURE__*/React.createElement(Text, {
    align: "center",
    as: "p"
  }, "Select ", /*#__PURE__*/React.createElement(Text, {
    weight: "medium"
  }, "View all"), " to browser inserts.")));
};
export var QuickInsertPanel = /*#__PURE__*/memo(function (_ref5) {
  var items = _ref5.items,
    onItemInsert = _ref5.onItemInsert,
    onViewAllItemsClick = _ref5.onViewAllItemsClick,
    query = _ref5.query,
    setSelectedItem = _ref5.setSelectedItem;
  var onItemSelect = useCallback(function (index) {
    onItemInsert(SelectItemMode.SELECTED, index);
  }, [onItemInsert]);
  var _useItems = useItems(items, query),
    suggested = _useItems.suggested,
    categoryRegistry = _useItems.categoryRegistry,
    itemsRegistry = _useItems.itemsRegistry,
    selectedCategory = _useItems.selectedCategory,
    searchItems = _useItems.searchItems,
    setSelectedCategory = _useItems.setSelectedCategory;
  var showViewAllItems = Boolean(onViewAllItemsClick);
  var view = searchItems ? searchItems.length > 0 ? /*#__PURE__*/React.createElement(SearchView, {
    items: searchItems,
    onItemSelected: onItemSelect,
    setSelectedItem: setSelectedItem
  }) : /*#__PURE__*/React.createElement(EmptySearchView, null) : selectedCategory ? /*#__PURE__*/React.createElement(CategoryView, {
    categoryRegistry: categoryRegistry,
    selectedCategory: selectedCategory,
    onItemSelected: onItemSelect,
    onBackButtonClicked: function onBackButtonClicked() {
      return setSelectedCategory(undefined);
    }
  }) : /*#__PURE__*/React.createElement(DefaultView, {
    suggested: suggested,
    itemsRegistry: itemsRegistry,
    categoryRegistry: categoryRegistry,
    onItemSelected: onItemSelect,
    onCategorySelected: function onCategorySelected(categoryId) {
      setSelectedCategory(categoryId);
    },
    setSelectedItem: setSelectedItem
  });
  if (showViewAllItems) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, view, showViewAllItems && /*#__PURE__*/React.createElement(ViewAllButtonItem, {
      isViewAllInserts: true,
      label: 'View all inserts' // TODO: ED-26961 - add i18n
      ,
      onClick: onViewAllItemsClick ? onViewAllItemsClick : function () {}
    }));
  } else {
    return view;
  }
});