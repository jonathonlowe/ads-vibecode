import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["icon", "isSelected", "isDisabled", "onClick"];
import React, { forwardRef, memo, useMemo } from 'react';
import { ToolTipContent } from '@atlaskit/editor-common/keymaps';
import { Box, Pressable, Stack, Text, xcss } from '@atlaskit/primitives';
import Tooltip from '@atlaskit/tooltip';
import { IconRenderer } from './IconRenderer';
var WIDTH = '60px';
var largeButtonStyles = xcss({
  display: 'inline-flex',
  flexShrink: 0,
  boxSizing: 'border-box',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  textAlign: 'center',
  verticalAlign: 'middle',
  height: "".concat(WIDTH),
  // The width and height of the button are the same for it to appear as square
  width: "".concat(WIDTH),
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  font: 'font.body',
  fontWeight: 'font.weight.medium',
  transition: 'opacity 0.3s, background 0.1s ease-out',
  backgroundColor: 'color.background.neutral.subtle',
  color: 'color.text.subtle',
  '::after': {
    position: 'absolute',
    inset: 'space.0',
    content: '""',
    borderRadius: 'inherit',
    borderStyle: 'solid',
    borderWidth: 'border.width',
    borderColor: 'color.border',
    pointerEvents: 'none'
  },
  ':hover': {
    backgroundColor: 'color.background.neutral.subtle.hovered',
    color: 'color.text.subtle'
  },
  ':active': {
    backgroundColor: 'color.background.neutral.subtle.pressed',
    color: 'color.text.subtle'
  }
});
var selectedButtonStyles = xcss({
  backgroundColor: 'color.background.selected',
  color: 'color.text.selected',
  '::after': {
    content: '""',
    borderColor: 'color.border.selected'
  },
  ':visited': {
    color: 'color.text.selected'
  },
  ':hover': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.hovered'
  },
  ':active': {
    color: 'color.text.selected',
    backgroundColor: 'color.background.selected.pressed'
  }
});
var disabledButtonStyles = xcss({
  cursor: 'not-allowed',
  backgroundColor: 'color.background.disabled',
  color: 'color.text.disabled',
  ':hover': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  ':active': {
    backgroundColor: 'color.background.disabled',
    color: 'color.text.disabled'
  },
  '::after': {
    content: 'none'
  }
});
var iconStyles = xcss({
  display: 'flex',
  flexGrow: 0,
  flexShrink: 0,
  alignSelf: 'center',
  userSelect: 'none'
});
var textStyles = xcss({
  width: "".concat(WIDTH)
});
var LargeIconButtonWithRef = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {
  var icon = _ref.icon,
    isSelected = _ref.isSelected,
    isDisabled = _ref.isDisabled,
    onClick = _ref.onClick,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Pressable
  // eslint-disable-next-line react/jsx-props-no-spreading
  , _extends({}, rest, {
    ref: ref,
    type: "button",
    isDisabled: isDisabled,
    onClick: onClick,
    xcss: [largeButtonStyles, isSelected && selectedButtonStyles, isDisabled && disabledButtonStyles]
  }), /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: iconStyles
  }, icon));
}));
export var IconButtonItem = /*#__PURE__*/memo(function (_ref2) {
  var index = _ref2.index,
    title = _ref2.title,
    keyshortcut = _ref2.keyshortcut,
    isSelected = _ref2.isSelected,
    isDisabled = _ref2.isDisabled,
    renderIcon = _ref2.renderIcon,
    onItemSelected = _ref2.onItemSelected;
  var iconComponent = useMemo(function () {
    if (!renderIcon) {
      return null;
    }
    return /*#__PURE__*/React.createElement(IconRenderer, null, renderIcon());
  }, [renderIcon]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    content: /*#__PURE__*/React.createElement(ToolTipContent, {
      description: title,
      keymap: keyshortcut
    }),
    position: "top",
    ignoreTooltipPointerEvents: true
  }, function (tooltipProps) {
    return /*#__PURE__*/React.createElement(Stack, {
      alignInline: "center",
      space: "space.050"
    }, /*#__PURE__*/React.createElement(LargeIconButtonWithRef
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, tooltipProps, {
      icon: iconComponent,
      isSelected: isSelected,
      isDisabled: isDisabled,
      onClick: function onClick() {
        return onItemSelected === null || onItemSelected === void 0 ? void 0 : onItemSelected(index);
      }
    })), /*#__PURE__*/React.createElement(Box, {
      xcss: textStyles
    }, /*#__PURE__*/React.createElement(Text, {
      align: "center",
      maxLines: 1,
      color: isDisabled ? 'color.text.disabled' : isSelected ? 'color.text.selected' : 'color.text.subtle',
      size: "small"
    }, title)));
  });
});