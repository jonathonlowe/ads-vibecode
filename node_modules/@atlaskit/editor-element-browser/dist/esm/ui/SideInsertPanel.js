import React, { useCallback } from 'react';
import { SelectItemMode } from '@atlaskit/editor-common/type-ahead';
import { Stack } from '@atlaskit/primitives/compiled';
import { CategoriesStructure, useItems, PredefinedCategories } from '../utils/use-items';
import { ExpandablePanel } from './ExpandablePanel';
import { IconButtonGroup } from './IconButtonGroup';
import { ListButtonGroup, ListButtonGroupWithHeading } from './ListButtonGroup';
import { SearchPanel } from './SearchPanel';
import { SubPanelWithBackButton } from './SubPanel';
var DefaultView = function DefaultView(_ref) {
  var suggested = _ref.suggested,
    itemsRegistry = _ref.itemsRegistry,
    categoryRegistry = _ref.categoryRegistry,
    onItemSelected = _ref.onItemSelected,
    onCategorySelected = _ref.onCategorySelected;
  return /*#__PURE__*/React.createElement(Stack, null, suggested && /*#__PURE__*/React.createElement(IconButtonGroup, {
    id: suggested.id,
    items: suggested.items,
    label: suggested.label,
    onItemSelected: onItemSelected
  }), CategoriesStructure.map(function (category, i) {
    var defautltItems = category.defautltItems;
    var items = defautltItems.length > 0 ? defautltItems.map(function (itemIdOrTitle) {
      return itemsRegistry[itemIdOrTitle];
    }).filter(function (item) {
      return item;
    }) : categoryRegistry[category.id] ? categoryRegistry[category.id].slice(0, 5) : [];
    var shoudldShowSeparator = i === 0 && !suggested ? false : true;
    return items.length > 0 && /*#__PURE__*/React.createElement(ExpandablePanel, {
      key: category.id,
      id: category.id,
      label: category.title,
      items: items,
      hasSeparator: shoudldShowSeparator,
      onItemSelected: onItemSelected,
      onViewAllSelected: onCategorySelected
    });
  }));
};
var CategoryView = function CategoryView(_ref2) {
  var categoryRegistry = _ref2.categoryRegistry,
    selectedCategory = _ref2.selectedCategory,
    onItemSelected = _ref2.onItemSelected,
    onBackButtonClicked = _ref2.onBackButtonClicked;
  var categoryData = PredefinedCategories.get(selectedCategory);
  var categoryLevelItems = categoryRegistry[selectedCategory] || [];
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SubPanelWithBackButton, {
    label: categoryData.title,
    buttonLabel: "Back to all items",
    onClick: onBackButtonClicked
  }, categoryLevelItems.length > 0 && /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: categoryData.id,
    items: categoryLevelItems,
    onItemSelected: onItemSelected
  }), categoryData && categoryData.subcategories.map(function (_ref3) {
    var id = _ref3.id,
      title = _ref3.title;
    return categoryRegistry[id] && /*#__PURE__*/React.createElement(ListButtonGroupWithHeading, {
      id: id,
      label: title,
      items: categoryRegistry[id],
      onItemSelected: onItemSelected
    });
  })));
};
var SearchView = function SearchView(_ref4) {
  var items = _ref4.items,
    onItemSelected = _ref4.onItemSelected;
  return /*#__PURE__*/React.createElement(ListButtonGroup, {
    id: 'search',
    items: items,
    onItemSelected: onItemSelected
  });
};
export var SideInsertPanel = function SideInsertPanel(_ref5) {
  var items = _ref5.items,
    onItemInsert = _ref5.onItemInsert;
  var onItemSelect = useCallback(function (index) {
    onItemInsert(SelectItemMode.SELECTED, index);
  }, [onItemInsert]);
  var _useItems = useItems(items),
    categoryRegistry = _useItems.categoryRegistry,
    itemsRegistry = _useItems.itemsRegistry,
    selectedCategory = _useItems.selectedCategory,
    searchItems = _useItems.searchItems,
    setSearchText = _useItems.setSearchText,
    setSelectedCategory = _useItems.setSelectedCategory;
  var view = searchItems ? /*#__PURE__*/React.createElement(SearchView, {
    items: searchItems,
    onItemSelected: onItemSelect
  }) : selectedCategory ? /*#__PURE__*/React.createElement(CategoryView, {
    categoryRegistry: categoryRegistry,
    selectedCategory: selectedCategory,
    onItemSelected: onItemSelect,
    onBackButtonClicked: function onBackButtonClicked() {
      return setSelectedCategory(undefined);
    }
  }) : /*#__PURE__*/React.createElement(DefaultView, {
    suggested: undefined,
    itemsRegistry: itemsRegistry,
    categoryRegistry: categoryRegistry,
    onItemSelected: onItemSelect,
    onCategorySelected: function onCategorySelected(categoryId) {
      setSelectedCategory(categoryId);
    }
  });
  return /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(SearchPanel, {
    onChange: function onChange(event) {
      setSearchText(event.target.value);
    }
  }), view);
};