import React, { memo } from 'react';
import Heading from '@atlaskit/heading';
import { Section } from '@atlaskit/menu';
import { Box, xcss } from '@atlaskit/primitives';
import { ListButtonItem } from './ListButtonItem';
var headingContainerStyles = xcss({
  paddingTop: 'space.075',
  paddingBottom: 'space.150',
  paddingLeft: 'space.300',
  paddingRight: 'space.300'
});
var itemsContainerStyles = xcss({
  paddingTop: 'space.0',
  paddingBottom: 'space.0',
  paddingLeft: 'space.200',
  paddingRight: 'space.200'
});
var ListButtonGroupBase = /*#__PURE__*/memo(function (_ref) {
  var id = _ref.id,
    label = _ref.label,
    items = _ref.items,
    hasSeparator = _ref.hasSeparator,
    _onItemSelected = _ref.onItemSelected,
    setSelectedItem = _ref.setSelectedItem,
    startingIndex = _ref.startingIndex;
  return /*#__PURE__*/React.createElement(Section, {
    hasSeparator: hasSeparator
  }, label && /*#__PURE__*/React.createElement(Box, {
    xcss: [headingContainerStyles]
  }, /*#__PURE__*/React.createElement(Heading, {
    size: 'xsmall',
    as: "span"
  }, label)), /*#__PURE__*/React.createElement(Box, {
    xcss: [itemsContainerStyles]
  }, items.map(function (item, index) {
    return /*#__PURE__*/React.createElement(ListButtonItem, {
      key: item.index,
      index: item.index,
      isSelected: startingIndex === undefined ? undefined : startingIndex + index === 0,
      title: item.title,
      description: item.description,
      showDescription: item.showDescription,
      attributes: item.attributes,
      keyshortcut: item.keyshortcut,
      renderIcon: item.renderIcon,
      onItemSelected: function onItemSelected(index) {
        return _onItemSelected === null || _onItemSelected === void 0 ? void 0 : _onItemSelected(index, id);
      },
      setSelectedItem: setSelectedItem
    });
  })));
});
export var ListButtonGroupWithHeading = /*#__PURE__*/memo(function (_ref2) {
  var id = _ref2.id,
    label = _ref2.label,
    items = _ref2.items,
    hasSeparator = _ref2.hasSeparator,
    onItemSelected = _ref2.onItemSelected,
    setSelectedItem = _ref2.setSelectedItem,
    startingIndex = _ref2.startingIndex;
  return /*#__PURE__*/React.createElement(ListButtonGroupBase, {
    id: id,
    label: label,
    items: items,
    hasSeparator: hasSeparator,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: startingIndex
  });
});
export var ListButtonGroup = /*#__PURE__*/memo(function (_ref3) {
  var id = _ref3.id,
    items = _ref3.items,
    hasSeparator = _ref3.hasSeparator,
    onItemSelected = _ref3.onItemSelected,
    setSelectedItem = _ref3.setSelectedItem,
    startingIndex = _ref3.startingIndex;
  return /*#__PURE__*/React.createElement(ListButtonGroupBase, {
    id: id,
    items: items,
    hasSeparator: hasSeparator,
    onItemSelected: onItemSelected,
    setSelectedItem: setSelectedItem,
    startingIndex: startingIndex
  });
});