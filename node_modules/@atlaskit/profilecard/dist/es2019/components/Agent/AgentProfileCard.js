import React, { useCallback, useEffect, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { Box, Stack, xcss } from '@atlaskit/primitives';
import { AgentAvatar, AgentBanner, AgentProfileCreator, AgentProfileInfo, AgentStarCount } from '@atlaskit/rovo-agent-components';
import { fireEvent, profileCardRendered } from '../../util/analytics';
import { LoadingState } from '../common/LoadingState';
import { ErrorMessage } from '../Error';
import { AgentActions } from './Actions';
import { AgentProfileCardWrapper } from './AgentProfileCardWrapper';
import { ConversationStarters } from './ConversationStarters';
import { useAgentUrlActions } from './hooks/useAgentActions';
import { messages } from './messages';
const styles = xcss({
  paddingBlockStart: 'space.400',
  paddingInline: 'space.200'
});
const avatarStyles = xcss({
  position: 'absolute',
  top: 'space.300',
  left: 'space.200'
});
const cardContainerStyles = xcss({
  borderRadius: 'border.radius.200',
  boxShadow: 'elevation.shadow.overlay',
  position: 'relative'
});
const AgentProfileCard = ({
  agent,
  isLoading,
  isCreatedByViewingUser,
  cloudId,
  onChatClick,
  product = 'rovo',
  hasError,
  errorType,
  onConversationStartersClick,
  resourceClient,
  addFlag
}) => {
  var _agent$user_defined_c, _agent$external_confi, _agent$external_confi2, _agent$creatorInfo, _agent$creatorInfo2, _agent$creatorInfo3, _agent$creatorInfo4;
  const {
    onEditAgent,
    onCopyAgent,
    onDuplicateAgent,
    onOpenChat: onOpenChatFullScreen,
    onConversationStarter,
    onViewFullProfile
  } = useAgentUrlActions({
    cloudId: cloudId || ''
  });
  const [isStarred, setIsStarred] = useState(false);
  const [starCount, setStarCount] = useState();
  const {
    formatMessage
  } = useIntl();
  const userDefinedConversationStarters = agent === null || agent === void 0 ? void 0 : (_agent$user_defined_c = agent.user_defined_conversation_starters) === null || _agent$user_defined_c === void 0 ? void 0 : _agent$user_defined_c.map(starter => {
    return {
      message: starter,
      type: 'user-defined'
    };
  });
  useEffect(() => {
    setIsStarred(!!(agent !== null && agent !== void 0 && agent.favourite));
    setStarCount(agent === null || agent === void 0 ? void 0 : agent.favourite_count);
  }, [agent === null || agent === void 0 ? void 0 : agent.favourite, agent === null || agent === void 0 ? void 0 : agent.favourite_count]);
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const fireAnalytics = useCallback(payload => {
    if (createAnalyticsEvent) {
      fireEvent(createAnalyticsEvent, payload);
    }
  }, [createAnalyticsEvent]);
  const handleSetFavourite = useCallback(async () => {
    if (agent !== null && agent !== void 0 && agent.id) {
      try {
        await resourceClient.setFavouriteAgent(agent.id, !isStarred, fireAnalytics);
        if (isStarred) {
          setStarCount(starCount ? starCount - 1 : 0);
        } else {
          setStarCount((starCount || 0) + 1);
        }
        setIsStarred(!isStarred);
      } catch (error) {}
    }
  }, [agent === null || agent === void 0 ? void 0 : agent.id, fireAnalytics, isStarred, resourceClient, starCount]);
  const handleOnDelete = useCallback(async () => {
    if (agent) {
      try {
        await resourceClient.deleteAgent(agent.id, fireAnalytics);
        addFlag === null || addFlag === void 0 ? void 0 : addFlag({
          title: formatMessage(messages.agentDeletedSuccessFlagTitle),
          description: formatMessage(messages.agentDeletedSuccessFlagDescription, {
            agentName: agent.name
          }),
          type: 'success',
          id: 'ptc-directory.agent-profile.delete-agent-success'
        });
      } catch (error) {
        addFlag === null || addFlag === void 0 ? void 0 : addFlag({
          title: formatMessage(messages.agentDeletedErrorFlagTitle),
          description: formatMessage(messages.agentDeletedErrorFlagDescription),
          type: 'error',
          id: 'ptc-directory.agent-profile.delete-agent-error'
        });
      }
    }
  }, [addFlag, agent, fireAnalytics, formatMessage, resourceClient]);
  useEffect(() => {
    if (!isLoading && agent) {
      fireAnalytics(profileCardRendered('agent', 'content'));
    }
  }, [agent, fireAnalytics, isLoading]);
  if (isLoading) {
    return /*#__PURE__*/React.createElement(AgentProfileCardWrapper, null, /*#__PURE__*/React.createElement(LoadingState, {
      profileType: "agent",
      fireAnalytics: fireAnalytics
    }));
  }
  if (hasError || !agent) {
    return /*#__PURE__*/React.createElement(AgentProfileCardWrapper, null, /*#__PURE__*/React.createElement(ErrorMessage, {
      errorType: errorType,
      fireAnalytics: fireAnalytics
    }));
  }
  return /*#__PURE__*/React.createElement(AgentProfileCardWrapper, null, /*#__PURE__*/React.createElement(Box, {
    xcss: cardContainerStyles
  }, /*#__PURE__*/React.createElement(AgentBanner, {
    agentId: agent.id,
    agentNamedId: (_agent$external_confi = agent.external_config_reference) !== null && _agent$external_confi !== void 0 ? _agent$external_confi : agent.named_id,
    height: 96,
    agentIdentityAccountId: agent.identity_account_id
  }), /*#__PURE__*/React.createElement(Box, {
    xcss: avatarStyles
  }, /*#__PURE__*/React.createElement(AgentAvatar, {
    agentId: agent.id,
    agentNamedId: (_agent$external_confi2 = agent.external_config_reference) !== null && _agent$external_confi2 !== void 0 ? _agent$external_confi2 : agent.named_id,
    agentIdentityAccountId: agent.identity_account_id,
    size: "xlarge",
    isForgeAgent: agent.creator_type === 'FORGE' || agent.creator_type === 'THIRD_PARTY',
    forgeAgentIconUrl: agent.icon
  })), /*#__PURE__*/React.createElement(Stack, {
    space: "space.100",
    xcss: styles
  }, /*#__PURE__*/React.createElement(AgentProfileInfo, {
    agentName: agent.name,
    isStarred: isStarred,
    onStarToggle: handleSetFavourite,
    isHidden: agent.visibility === 'PRIVATE',
    creatorRender: ((_agent$creatorInfo = agent.creatorInfo) === null || _agent$creatorInfo === void 0 ? void 0 : _agent$creatorInfo.type) && /*#__PURE__*/React.createElement(AgentProfileCreator, {
      creator: {
        type: (_agent$creatorInfo2 = agent.creatorInfo) === null || _agent$creatorInfo2 === void 0 ? void 0 : _agent$creatorInfo2.type,
        name: ((_agent$creatorInfo3 = agent.creatorInfo) === null || _agent$creatorInfo3 === void 0 ? void 0 : _agent$creatorInfo3.name) || '',
        profileLink: ((_agent$creatorInfo4 = agent.creatorInfo) === null || _agent$creatorInfo4 === void 0 ? void 0 : _agent$creatorInfo4.profileLink) || ''
      },
      isLoading: false,
      onCreatorLinkClick: () => {}
    }),
    starCountRender: /*#__PURE__*/React.createElement(AgentStarCount, {
      starCount: starCount,
      isLoading: false
    }),
    agentDescription: agent.description
  }), /*#__PURE__*/React.createElement(ConversationStarters, {
    isAgentDefault: agent.is_default,
    userDefinedConversationStarters: userDefinedConversationStarters,
    onConversationStarterClick: conversationStarter => {
      onConversationStartersClick ? onConversationStartersClick(conversationStarter) : onConversationStarter({
        agentId: agent.id,
        prompt: conversationStarter.message
      });
    }
  })), /*#__PURE__*/React.createElement(AgentActions, {
    agent: agent,
    isAgentCreatedByCurrentUser: isCreatedByViewingUser,
    onEditAgent: () => onEditAgent(agent.id),
    onCopyAgent: () => onCopyAgent(agent.id),
    onDuplicateAgent: () => onDuplicateAgent(agent.id),
    onDeleteAgent: handleOnDelete,
    onChatClick: () => onChatClick ? onChatClick() : onOpenChatFullScreen(agent.id, agent.name),
    resourceClient: resourceClient,
    onViewFullProfileClick: () => onViewFullProfile(agent.id)
  })));
};
export default AgentProfileCard;