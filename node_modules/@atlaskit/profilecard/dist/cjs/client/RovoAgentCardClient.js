"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _analytics = require("../util/analytics");
var _performance = require("../util/performance");
var _CachingClient2 = _interopRequireDefault(require("./CachingClient"));
var _errorUtils = require("./errorUtils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var createHeaders = function createHeaders(product, cloudId, isBodyJson) {
  var headers = new Headers({
    'X-Product': product,
    'X-Experience-Id': 'profile-card',
    'X-Cloudid': cloudId || ''
  });
  if (isBodyJson) {
    headers.set('Content-Type', 'application/json');
  }
  return headers;
};
var RovoAgentCardClient = exports.default = /*#__PURE__*/function (_CachingClient) {
  function RovoAgentCardClient(options) {
    var _this;
    (0, _classCallCheck2.default)(this, RovoAgentCardClient);
    _this = _callSuper(this, RovoAgentCardClient, [options]);
    _this.options = options;
    return _this;
  }
  (0, _inherits2.default)(RovoAgentCardClient, _CachingClient);
  return (0, _createClass2.default)(RovoAgentCardClient, [{
    key: "makeRequest",
    value: function makeRequest(id, cloudId) {
      var product = this.options.productIdentifier || 'rovo';
      var headers = createHeaders(product, this.options.cloudId);
      if (id.type === 'identity') {
        return fetch(new Request("/gateway/api/assist/agents/v1/accountid/".concat(id.value), {
          method: 'GET',
          credentials: 'include',
          mode: 'cors',
          headers: headers
        })).then(function (response) {
          return response.json();
        });
      }
      return fetch(new Request("/gateway/api/assist/agents/v1/".concat(id.value), {
        method: 'GET',
        credentials: 'include',
        mode: 'cors',
        headers: headers
      })).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: "getProfile",
    value: function getProfile(id, analytics) {
      var _this2 = this;
      if (!id.value) {
        return Promise.reject(new Error('Id is missing'));
      }
      if (!this.options.cloudId) {
        return Promise.reject(new Error('cloudId is missing'));
      }
      var cache = this.getCachedProfile(id.value);
      if (cache) {
        return Promise.resolve(cache);
      }
      return new Promise(function (resolve, reject) {
        var startTime = (0, _performance.getPageTime)();
        if (analytics) {
          analytics((0, _analytics.agentRequestAnalytics)('triggered'));
        }
        _this2.makeRequest(id, _this2.options.cloudId || '').then(function (data) {
          if (_this2.cache) {
            _this2.setCachedProfile(id.value, data);
          }
          if (analytics) {
            analytics((0, _analytics.agentRequestAnalytics)('succeeded', 'request', {
              duration: (0, _performance.getPageTime)() - startTime,
              gateway: true
            }));
          }
          resolve(data);
        }).catch(function (error) {
          if (analytics) {
            analytics((0, _analytics.agentRequestAnalytics)('failed', 'request', _objectSpread(_objectSpread({
              duration: (0, _performance.getPageTime)() - startTime
            }, (0, _errorUtils.getErrorAttributes)(error)), {}, {
              gateway: true
            })));
          }
          reject(error);
        });
      });
    }
  }, {
    key: "deleteAgent",
    value: function deleteAgent(agentId, analytics) {
      var _this3 = this;
      if (!this.options.cloudId) {
        return Promise.reject(new Error('cloudId is missing'));
      }
      return new Promise(function (resolve, reject) {
        var startTime = (0, _performance.getPageTime)();
        var product = _this3.options.productIdentifier || 'rovo';
        if (analytics) {
          analytics((0, _analytics.agentRequestAnalytics)('triggered'));
        }
        var headers = createHeaders(product, _this3.options.cloudId);
        fetch(new Request("/gateway/api/assist/agents/v1/".concat(agentId), {
          method: 'DELETE',
          credentials: 'include',
          mode: 'cors',
          headers: headers
        })).then(function () {
          if (analytics) {
            analytics((0, _analytics.agentRequestAnalytics)('succeeded', 'deleteAgent', {
              duration: (0, _performance.getPageTime)() - startTime,
              gateway: true
            }));
          }
          resolve();
        }).catch(function (error) {
          if (analytics) {
            analytics((0, _analytics.agentRequestAnalytics)('failed', 'deleteAgent', _objectSpread(_objectSpread({
              duration: (0, _performance.getPageTime)() - startTime
            }, (0, _errorUtils.getErrorAttributes)(error)), {}, {
              gateway: true
            })));
          }
          reject(error);
        });
      });
    }
  }, {
    key: "setFavouriteAgent",
    value: function setFavouriteAgent(agentId, isFavourite, analytics) {
      var _this4 = this;
      if (!this.options.cloudId) {
        return Promise.reject(new Error('cloudId is missing'));
      }
      return new Promise( /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, reject) {
          var startTime, product, actionSubjectId, requestMethod, headers;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                startTime = (0, _performance.getPageTime)();
                product = _this4.options.productIdentifier || 'rovo';
                actionSubjectId = isFavourite ? 'favourite' : 'unfavourite';
                requestMethod = isFavourite ? 'POST' : 'DELETE';
                if (analytics) {
                  analytics((0, _analytics.agentRequestAnalytics)('triggered', 'actionSubjectId'));
                }
                headers = createHeaders(product, _this4.options.cloudId);
                _context.next = 8;
                return fetch(new Request("/gateway/api/assist/agents/v1/".concat(agentId, "/favourite"), {
                  method: requestMethod,
                  credentials: 'include',
                  mode: 'cors',
                  headers: headers
                })).then(function () {
                  if (analytics) {
                    analytics((0, _analytics.agentRequestAnalytics)('succeeded', actionSubjectId, {
                      duration: (0, _performance.getPageTime)() - startTime,
                      gateway: true
                    }));
                  }
                  resolve();
                }).catch(function (error) {
                  if (analytics) {
                    analytics((0, _analytics.agentRequestAnalytics)('failed', actionSubjectId, _objectSpread(_objectSpread({
                      duration: (0, _performance.getPageTime)() - startTime
                    }, (0, _errorUtils.getErrorAttributes)(error)), {}, {
                      gateway: true
                    })));
                  }
                  reject(error);
                });
              case 8:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "getPermissions",
    value: function getPermissions(id, fireAnalytics) {
      var _this5 = this;
      if (!this.options.cloudId) {
        return Promise.reject(new Error('cloudId is missing'));
      }
      return new Promise(function (resolve, reject) {
        var startTime = (0, _performance.getPageTime)();
        var product = _this5.options.productIdentifier || 'rovo';
        if (fireAnalytics) {
          fireAnalytics((0, _analytics.agentRequestAnalytics)('triggered'));
        }
        var headers = createHeaders(product, _this5.options.cloudId, true);
        fetch(new Request("/gateway/api/assist/api/rovo/v2/permissions/agents/".concat(id), {
          method: 'POST',
          credentials: 'include',
          mode: 'cors',
          headers: headers,
          body: JSON.stringify({
            permission_ids: ['AGENT_CREATE', 'AGENT_UPDATE', 'AGENT_DELETE', 'AGENT_DEACTIVATE', 'AGENT_READ']
          })
        })).then(function (response) {
          return response.json();
        }).then(function (data) {
          if (fireAnalytics) {
            fireAnalytics((0, _analytics.agentRequestAnalytics)('succeeded', 'getAgentPermissions', {
              duration: (0, _performance.getPageTime)() - startTime,
              gateway: true
            }));
          }
          resolve(data);
        }).catch(function (error) {
          if (fireAnalytics) {
            fireAnalytics((0, _analytics.agentRequestAnalytics)('failed', 'getAgentPermissions', _objectSpread(_objectSpread({
              duration: (0, _performance.getPageTime)() - startTime
            }, (0, _errorUtils.getErrorAttributes)(error)), {}, {
              gateway: true
            })));
          }
          reject(error);
        });
      });
    }
  }]);
}(_CachingClient2.default);