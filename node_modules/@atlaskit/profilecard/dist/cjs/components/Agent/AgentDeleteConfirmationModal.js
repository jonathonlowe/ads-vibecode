"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgentDeleteConfirmationModal = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _modalDialog = _interopRequireWildcard(require("@atlaskit/modal-dialog"));
var _primitives = require("@atlaskit/primitives");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var AgentDeleteConfirmationModal = exports.AgentDeleteConfirmationModal = function AgentDeleteConfirmationModal(_ref) {
  var onClose = _ref.onClose,
    agentName = _ref.agentName,
    isOpen = _ref.isOpen,
    onSubmit = _ref.onSubmit,
    agentId = _ref.agentId;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var handleDeleteAgent = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!agentId) {
            _context.next = 4;
            break;
          }
          _context.next = 3;
          return onSubmit();
        case 3:
          onClose();
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })), [agentId, onClose, onSubmit]);
  return /*#__PURE__*/_react.default.createElement(_modalDialog.ModalTransition, null, isOpen && /*#__PURE__*/_react.default.createElement(_modalDialog.default, {
    width: "small"
  }, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalHeader, null, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalTitle, null, formatMessage(messages.title, {
    agentName: agentName
  }))), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalBody, null, /*#__PURE__*/_react.default.createElement(_primitives.Text, {
    as: "p"
  }, formatMessage(messages.body)), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalFooter, null, /*#__PURE__*/_react.default.createElement(_new.default, {
    appearance: "subtle",
    onClick: onClose
  }, formatMessage(messages.cancelText)), /*#__PURE__*/_react.default.createElement(_new.default, {
    appearance: "danger",
    onClick: function onClick(_e, event) {
      handleDeleteAgent();
    }
  }, formatMessage(messages.confirmText))))));
};
var messages = (0, _reactIntlNext.defineMessages)({
  cancelText: {
    id: 'profilecard.agent-profile.agent-delete-confirm.cancel-text',
    defaultMessage: 'Cancel'
  },
  confirmText: {
    id: 'profilecard.agent-profile.agent-delete-confirm.confirm-text',
    defaultMessage: 'Delete'
  },
  title: {
    id: 'profilecard.agent-profile.delete-agent-confirm-title',
    defaultMessage: 'Delete "{agentName}"?',
    description: 'Title text for the delete agent confirmation modal'
  },
  body: {
    id: 'profilecard.agent-profile.delete-agent-confirm-body',
    defaultMessage: "Are you sure you want to delete this agent? This action cannot be undone.",
    description: 'Body text for the delete agent confirmation modal'
  },
  error: {
    id: 'profilecard.agent-profile.delete-agent-error',
    defaultMessage: 'Could not delete agent',
    description: 'Error message displayed when an agent cannot be deleted'
  },
  errorAgentNotFound: {
    id: 'profilecard.agent-profile.delete-agent-error.agent-not-found',
    defaultMessage: 'That agent could not be found.',
    description: 'Error message displayed when an agent cannot be found'
  },
  errorAgentInUse: {
    id: 'profilecard.agent-profile.delete-agent-error.agent-in-use',
    defaultMessage: 'Agent is currently in use. Try again later.',
    description: 'Error message displayed when an agent is in use'
  },
  errorIncorrectOwner: {
    id: 'profilecard.agent-profile.delete-agent-error.incorrect-owner',
    defaultMessage: 'You cannot delete agents you have not created yourself. Please contact the agent owner.',
    description: 'Error message displayed when the agent owner is incorrect'
  },
  agentDeletedSuccess: {
    id: 'profilecard.agent-profile.delete-agent-success',
    defaultMessage: 'Agent has been deleted!',
    description: 'Success message displayed when an agent is deleted'
  }
});