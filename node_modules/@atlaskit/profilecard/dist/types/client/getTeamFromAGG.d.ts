import type { Team } from '../types';
interface AGGTeam extends Omit<Team, 'members'> {
    members?: {
        nodes: AGGMember[];
    };
}
interface AGGMember {
    member: {
        accountId: string;
        name: string;
        picture: string;
    };
}
interface AGGResult {
    team: AGGTeam;
}
export declare const extractIdFromAri: (ari: string) => string;
/**
 * @deprecated Use idToAriSafe instead
 */
export declare const idToAri: (teamId: string) => string;
export declare const idToAriSafe: (teamIdOrTeamAri: string) => string;
export declare const convertTeam: (result: AGGResult) => Team;
export declare const GATEWAY_QUERY_V2 = "query TeamCard($teamId: ID!, $siteId: String!) {\n  Team: team {\n    team: teamV2(id: $teamId, siteId: $siteId) @optIn(to: \"Team-v2\") {\n      \n      id\n      displayName\n      description\n      smallHeaderImageUrl\n      largeHeaderImageUrl\n      smallAvatarImageUrl\n      largeAvatarImageUrl\n\t  isVerified\n      members {\n        nodes {\n          member {\n            accountId\n            name\n            picture\n          }\n        }\n      }\n\n    }\n  }\n}";
type TeamQueryVariables = {
    teamId: string;
    siteId?: string;
};
export declare const buildGatewayQuery: ({ teamId, siteId }: TeamQueryVariables) => {
    query: string;
    variables: {
        teamId: string;
        siteId: string;
    };
};
export declare const addHeaders: (headers: Headers) => Headers;
export declare function getTeamFromAGG(url: string, teamId: string, siteId?: string): Promise<Team>;
export {};
