export declare class HttpError extends Error {
    code: number;
    traceId?: string | null;
    constructor(code: number, reason: string, traceId?: string | null);
}
type KnownErrorExtensions = {
    errorNumber?: number;
};
type ErrorExtensions = KnownErrorExtensions & Record<string, any>;
type ErrorCategory = 'NotFound' | 'NotPermitted' | 'MalformedInput' | 'Internal' | 'Gone';
export declare class DirectoryGraphQLError extends Error {
    category: ErrorCategory;
    type: string;
    path: string;
    errorNumber?: number;
    extensions: Record<string, any>;
    constructor(message: string, category: ErrorCategory, type: string, extensions?: ErrorExtensions, path?: (string | number)[]);
}
export declare class DirectoryGraphQLErrors extends Error {
    errors: DirectoryGraphQLError[];
    traceId?: string | null;
    constructor(errors: unknown, traceId: string | null);
}
type KnownAggErrorExtensions = {
    statusCode?: number;
    errorType?: string;
    classification?: string;
};
type AggErrorExtensions = KnownAggErrorExtensions & Record<string, any>;
export declare class AGGError extends Error {
    path: string;
    extensions: Record<string, any>;
    statusCode?: number;
    errorType?: string;
    classification?: string;
    constructor(message: string, extensions: AggErrorExtensions, path?: (string | number)[]);
}
export declare class AGGErrors extends Error {
    errors: AGGError[];
    traceId?: string | null;
    constructor(errors: unknown, traceId: string | null);
}
export {};
