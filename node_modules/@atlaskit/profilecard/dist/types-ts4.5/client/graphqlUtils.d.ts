interface Query {
    query: string;
    variables: Record<string, any>;
}
export interface GraphQLError {
    code?: number;
    reason?: string;
    source?: string;
    message?: string;
    traceId?: string;
    category: string;
    type: string;
    path: string[];
    extensions: {
        errorNumber: number;
    } & Record<string, any>;
}
type HeaderProcessor = (headers: Headers) => Headers;
/**
 * @param {string} serviceUrl - GraphQL service endpoint
 * @param {Query} query - GraphQL query
 * @param {HeaderProcessor} processHeaders - a function to add extra headers to the request
 */
export declare function directoryGraphqlQuery<D>(serviceUrl: string, query: Query, processHeaders?: HeaderProcessor): Promise<D>;
/**
 * @param {string} serviceUrl - GraphQL service endpoint
 * @param {Query} query - GraphQL query
 * @param {HeaderProcessor} processHeaders - a function to add extra headers to the request
 */
export declare function AGGQuery<D>(serviceUrl: string, query: Query, processHeaders?: HeaderProcessor): Promise<D>;
export {};
