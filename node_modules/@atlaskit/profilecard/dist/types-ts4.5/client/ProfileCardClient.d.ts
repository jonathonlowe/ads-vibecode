import { type AnalyticsEventPayload } from '@atlaskit/analytics-next';
import { type AgentIdType, type ClientOverrides, type ProfileClient, type ProfileClientOptions, type TeamCentralReportingLinesData } from '../types';
import RovoAgentCardClient from './RovoAgentCardClient';
import TeamCentralCardClient from './TeamCentralCardClient';
import TeamProfileCardClient from './TeamProfileCardClient';
import UserProfileCardClient from './UserProfileCardClient';
export type TeamCentralScopes = {
    withOrgContext: true;
    withSiteContext: boolean;
};
declare class ProfileCardClient implements ProfileClient {
    userClient: UserProfileCardClient;
    teamClient: TeamProfileCardClient;
    tcClient?: TeamCentralCardClient;
    rovoAgentClient: RovoAgentCardClient;
    constructor(config: ProfileClientOptions, clients?: ClientOverrides);
    flushCache(): void;
    getProfile(cloudId: string, userId: string, analytics?: (event: AnalyticsEventPayload) => void): Promise<any>;
    getTeamProfile(teamId: string, orgId?: string, analytics?: (event: AnalyticsEventPayload) => void): Promise<import("../types").Team>;
    getReportingLines(userId: string): Promise<TeamCentralReportingLinesData>;
    getTeamCentralBaseUrl(teamCentralScopes?: TeamCentralScopes): Promise<string | undefined>;
    shouldShowGiveKudos(): Promise<boolean>;
    getRovoAgentProfile(id: AgentIdType, analytics?: (event: AnalyticsEventPayload) => void): Promise<import("../types").RovoAgent>;
    getRovoAgentPermissions(id: string, fireAnalytics?: ((event: AnalyticsEventPayload) => void) | undefined): Promise<import("../types").AgentPermissions>;
    deleteAgent(id: string, analytics?: (event: AnalyticsEventPayload) => void): Promise<void>;
    setFavouriteAgent(id: string, isFavourite: boolean, analytics?: (event: AnalyticsEventPayload) => void): Promise<void>;
}
export default ProfileCardClient;
