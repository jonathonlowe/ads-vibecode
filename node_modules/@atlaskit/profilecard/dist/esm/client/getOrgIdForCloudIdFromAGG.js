import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { AGGQuery } from './graphqlUtils';
var ORG_ID_FROM_CLOUD_ID_QUERY = "query OrgIdFromCloudId($cloudId: ID!) {\n\ttenantContexts(cloudIds: [$cloudId]) {\n\t\torgId\n\t}\n}";
var addHeaders = function addHeaders(headers) {
  headers.append('atl-client-name', "@atlaskit/profilecard");
  headers.append('atl-client-version', "23.8.0");
  return headers;
};
export function getOrgIdForCloudIdFromAGG(_x, _x2) {
  return _getOrgIdForCloudIdFromAGG.apply(this, arguments);
}
function _getOrgIdForCloudIdFromAGG() {
  _getOrgIdForCloudIdFromAGG = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, cloudId) {
    var query, _yield$AGGQuery, tenantContexts;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          query = {
            query: ORG_ID_FROM_CLOUD_ID_QUERY,
            variables: {
              cloudId: cloudId
            }
          };
          _context.prev = 1;
          _context.next = 4;
          return AGGQuery(url, query, addHeaders);
        case 4:
          _yield$AGGQuery = _context.sent;
          tenantContexts = _yield$AGGQuery.tenantContexts;
          if (!(!tenantContexts || tenantContexts.length === 0 || tenantContexts[0] === null)) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", null);
        case 8:
          return _context.abrupt("return", tenantContexts[0].orgId);
        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](1);
          return _context.abrupt("return", null);
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 11]]);
  }));
  return _getOrgIdForCloudIdFromAGG.apply(this, arguments);
}