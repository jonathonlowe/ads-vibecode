import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { fg } from '@atlaskit/platform-feature-flags';
import { AGGQuery } from './graphqlUtils';
var ARI_PREFIX = 'ari:cloud:identity::team/';
export var extractIdFromAri = function extractIdFromAri(ari) {
  var slashPos = ari.indexOf('/');
  var id = ari.slice(slashPos + 1);
  return id;
};

/**
 * @deprecated Use idToAriSafe instead
 */
export var idToAri = function idToAri(teamId) {
  return "ari:cloud:identity::team/".concat(teamId);
};
export var idToAriSafe = function idToAriSafe(teamIdOrTeamAri) {
  return teamIdOrTeamAri.startsWith(ARI_PREFIX) ? teamIdOrTeamAri : idToAri(teamIdOrTeamAri);
};
export var convertTeam = function convertTeam(result) {
  var _team$members;
  var team = result.team;
  return _objectSpread(_objectSpread({}, team), {}, {
    id: extractIdFromAri(team.id),
    members: (_team$members = team.members) === null || _team$members === void 0 ? void 0 : _team$members.nodes.map(function (_ref) {
      var member = _ref.member;
      return {
        id: member.accountId,
        fullName: member.name,
        avatarUrl: member.picture
      };
    })
  });
};

// indented so it's
var TEAM_FRAGMENT = "\n      id\n      displayName\n      description\n      smallHeaderImageUrl\n      largeHeaderImageUrl\n      smallAvatarImageUrl\n      largeAvatarImageUrl\n\t  isVerified\n      members {\n        nodes {\n          member {\n            accountId\n            name\n            picture\n          }\n        }\n      }\n";

// We alias the team node to always be team
export var GATEWAY_QUERY_V2 = "query TeamCard($teamId: ID!, $siteId: String!) {\n  Team: team {\n    team: teamV2(id: $teamId, siteId: $siteId) @optIn(to: \"Team-v2\") {\n      ".concat(TEAM_FRAGMENT, "\n    }\n  }\n}");
export var buildGatewayQuery = function buildGatewayQuery(_ref2) {
  var teamId = _ref2.teamId,
    siteId = _ref2.siteId;
  return {
    query: GATEWAY_QUERY_V2,
    variables: {
      teamId: fg('team_id_to_ari_safe') ? idToAriSafe(teamId) : idToAri(teamId),
      siteId: siteId || 'None'
    }
  };
};
export var addHeaders = function addHeaders(headers) {
  headers.append('X-ExperimentalApi', 'teams-beta');
  headers.append('X-ExperimentalApi', 'team-members-beta');
  headers.append('atl-client-name', "@atlaskit/profilecard");
  headers.append('atl-client-version', "23.8.0");
  return headers;
};
export function getTeamFromAGG(_x, _x2, _x3) {
  return _getTeamFromAGG.apply(this, arguments);
}
function _getTeamFromAGG() {
  _getTeamFromAGG = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, teamId, siteId) {
    var query, _yield$AGGQuery, Team;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          query = buildGatewayQuery({
            teamId: teamId,
            siteId: siteId
          });
          _context.next = 3;
          return AGGQuery(url, query, addHeaders);
        case 3:
          _yield$AGGQuery = _context.sent;
          Team = _yield$AGGQuery.Team;
          return _context.abrupt("return", convertTeam(Team));
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getTeamFromAGG.apply(this, arguments);
}