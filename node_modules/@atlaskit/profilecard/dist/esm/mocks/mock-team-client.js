import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { handleAGGErrors } from '../client/errorUtils';
import TeamProfileCardClient from '../client/TeamProfileCardClient';
export default function getMockTeamClient(data) {
  return /*#__PURE__*/function (_TeamProfileCardClien) {
    function MockTeamClient() {
      _classCallCheck(this, MockTeamClient);
      return _callSuper(this, MockTeamClient, arguments);
    }
    _inherits(MockTeamClient, _TeamProfileCardClien);
    return _createClass(MockTeamClient, [{
      key: "makeRequest",
      value: function makeRequest(teamId) {
        var _data$error, _data$error2, _data$error3, _data$error4, _data$error5;
        var errorResponse = {
          reason: (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.reason,
          code: (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.code,
          source: (_data$error3 = data.error) === null || _data$error3 === void 0 ? void 0 : _data$error3.source,
          message: (_data$error4 = data.error) === null || _data$error4 === void 0 ? void 0 : _data$error4.message,
          traceId: (_data$error5 = data.error) === null || _data$error5 === void 0 ? void 0 : _data$error5.traceId
        };
        if (!data.timeout) {
          if (data.error && Math.random() < data.errorRate) {
            try {
              handleAGGErrors(data.error, data.traceId);
            } catch (e) {
              return Promise.reject(e);
            }
          }
          return Promise.resolve(data.team);
        }
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            if (data.error && Math.random() < data.errorRate) {
              reject(errorResponse);
            }
            return resolve(data.team);
          }, data.timeout);
        });
      }
    }]);
  }(TeamProfileCardClient);
}