import { createAndFireEvent } from '@atlaskit/analytics-next';
import { v4 as uuid } from 'uuid';
const packageName = "@atlaskit/smart-user-picker";
const packageVersion = "8.0.1";
export const startSession = () => ({
  id: uuid(),
  start: Date.now(),
  inputChangeTime: Date.now(),
  upCount: 0,
  downCount: 0,
  lastKey: undefined
});
export const createAndFireEventInElementsChannel = createAndFireEvent('fabric-elements');
const createEvent = (eventType, action, actionSubject, attributes = {}) => ({
  eventType,
  action,
  actionSubject,
  attributes: {
    packageName,
    packageVersion,
    ...attributes
  }
});
const createDefaultSmartPickerAttributes = (props, state) => {
  const {
    fieldId,
    objectId,
    containerId,
    childObjectId,
    prefetch,
    maxOptions,
    includeTeams,
    productKey,
    principalId,
    siteId,
    orgId,
    filterOptions
  } = props;
  const {
    sessionId,
    query
  } = state;
  const maxNumberOfResults = maxOptions || 100;
  return {
    context: fieldId,
    childObjectId,
    containerId,
    hasFilterOptions: Boolean(filterOptions),
    includeTeams,
    maxNumberOfResults,
    objectId,
    prefetch,
    principalId,
    productKey,
    queryLength: (query || '').length,
    siteId,
    orgId,
    sessionId
  };
};
const createSmartUserPickerEvent = (action, actionSubect, attributes = {}) => ({
  source: 'smart-user-picker',
  ...createEvent('operational', action, actionSubect, attributes)
});
export const preparedUsersLoadedEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('loaded', 'preparedUsers', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});
export const mountedWithPrefetchEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('mounted', 'prefetch', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});
export const filterUsersEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('filtered', 'users', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});
export const requestUsersEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('requested', 'users', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});
export const successfulRequestUsersEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('successful', 'usersRequest', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});
export const failedRequestUsersEvent = (props, state, attributes = {}) => createSmartUserPickerEvent('failed', 'usersRequest', {
  ...createDefaultSmartPickerAttributes(props, state),
  ...attributes
});