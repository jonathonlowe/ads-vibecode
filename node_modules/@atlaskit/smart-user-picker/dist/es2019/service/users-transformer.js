import { ExternalUserType, GroupType, TeamType, UserType } from '@atlaskit/user-picker';
import { messages } from '../i18n';
import { EntityType } from '../types';
const getLozenzeProperties = (entity, intl) => {
  var _entity$attributes, _entity$attributes2;
  if ((_entity$attributes = entity.attributes) !== null && _entity$attributes !== void 0 && _entity$attributes.workspaceMember) {
    return intl.formatMessage(messages.memberLozengeText);
  }
  if ((_entity$attributes2 = entity.attributes) !== null && _entity$attributes2 !== void 0 && _entity$attributes2.isConfluenceExternalCollaborator) {
    const lozengeTooltipMessage = entity.entityType === EntityType.GROUP ? messages.guestGroupLozengeTooltip : messages.guestUserLozengeTooltip;
    return {
      text: intl.formatMessage(messages.guestLozengeText),
      tooltip: intl.formatMessage(lozengeTooltipMessage),
      appearance: 'default'
    };
  }
  return undefined;
};
const transformUser = (item, intl) => {
  const type = item.entityType;
  if (type === EntityType.USER) {
    const user = item;
    const lozenge = getLozenzeProperties(user, intl);
    return {
      id: user.id,
      type: user.nonLicensedUser ? ExternalUserType : UserType,
      avatarUrl: user.avatarUrl,
      name: user.name,
      email: user.email,
      title: user.title,
      lozenge: lozenge,
      tooltip: user.name,
      isExternal: Boolean(user.nonLicensedUser),
      sources: user.nonLicensedUser ? ['other-atlassian'] : undefined
    };
  }
  if (type === EntityType.TEAM) {
    const team = item;
    return {
      id: team.id,
      type: TeamType,
      description: team.description || '',
      name: team.displayName || '',
      memberCount: team.memberCount,
      members: team.members,
      includesYou: team.includesYou,
      avatarUrl: team.largeAvatarImageUrl || team.smallAvatarImageUrl,
      tooltip: team.displayName,
      verified: team.verified
    };
  }
  if (type === EntityType.GROUP) {
    const group = item;
    const lozenge = getLozenzeProperties(group, intl);
    return {
      id: group.id,
      type: GroupType,
      name: group.name || '',
      lozenge: lozenge
    };
  }
  return;
};
export const transformUsers = (serverResponse, intl) => (serverResponse.recommendedUsers || []).map(item => transformUser(item, intl)).filter(user => !!user).map(user => user);