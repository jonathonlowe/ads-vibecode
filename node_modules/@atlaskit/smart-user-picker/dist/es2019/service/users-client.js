import { UNKNOWN_USER } from './constants';
import { graphqlQuery } from './graphqlUtils';
import { config } from '../config';
/**
 * @param  {string} accountIds ids to hydrate
 * @return GraphQL Query
 */
const buildUsersQuery = accountIds => ({
  query: `query usersQuery($accountIds: [ID!]!) {
    users(accountIds: $accountIds) {
      name
      accountId
      picture
    }
  }`,
  variables: {
    accountIds
  }
});
const makeRequest = async (url, accountIds) => {
  const query = buildUsersQuery(accountIds);
  return await graphqlQuery(url, query);
};
const modifyResponse = users => users.map(({
  accountId,
  name,
  picture
}) => ({
  avatarUrl: picture,
  id: accountId,
  name,
  type: 'user'
}));
const getHydratedUsers = (baseUrl, userIds) => {
  const url = config.getGraphQLUrl(baseUrl);
  return new Promise(resolve => {
    makeRequest(url, userIds).then(data => {
      resolve(modifyResponse(data.users));
    }).catch(() => {
      // on network error, return original list with label 'Unknown'
      resolve(userIds.map(id => ({
        ...UNKNOWN_USER,
        id
      })));
    });
  });
};
export default getHydratedUsers;