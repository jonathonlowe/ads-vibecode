import React from 'react';
import { type WrappedComponentProps } from 'react-intl-next';
import { type UFOExperience } from '@atlaskit/ufo';
import { type OptionData } from '@atlaskit/user-picker';
import { type Props, type State, type FilterOptions } from '../types';
export declare class SmartUserPickerWithoutAnalytics extends React.Component<Props & WrappedComponentProps, State> {
    state: State;
    optionsShownUfoExperienceInstance: UFOExperience;
    static defaultProps: {
        baseUrl: string;
        includeUsers: boolean;
        includeGroups: boolean;
        includeTeams: boolean;
        includeNonLicensedUsers: boolean;
        prefetch: boolean;
        principalId: string;
        debounceTime: number;
    };
    constructor(props: Props & WrappedComponentProps);
    componentDidMount(): Promise<void>;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    abortOptionsShownUfoExperience: () => void;
    startOptionsShownUfoExperience: () => void;
    private fireEvent;
    filterOptions: (users: OptionData[], query: string, propFilterOptions?: FilterOptions) => OptionData[];
    memoizedFilterOptions: import("memoize-one").MemoizedFn<(users: OptionData[], query: string, propFilterOptions?: FilterOptions) => OptionData[]>;
    getUsers: import("lodash").DebouncedFunc<() => Promise<void>>;
    onInputChange: (newQuery?: string, sessionId?: string) => void;
    filterUsers: () => OptionData[];
    onFocus: (sessionId?: string) => void;
    onBlur: (sessionId?: string) => void;
    render(): React.JSX.Element;
}
export declare const SmartUserPicker: any;
