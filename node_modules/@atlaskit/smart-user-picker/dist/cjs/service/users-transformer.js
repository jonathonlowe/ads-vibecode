"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformUsers = void 0;
var _userPicker = require("@atlaskit/user-picker");
var _i18n = require("../i18n");
var _types = require("../types");
var getLozenzeProperties = function getLozenzeProperties(entity, intl) {
  var _entity$attributes, _entity$attributes2;
  if ((_entity$attributes = entity.attributes) !== null && _entity$attributes !== void 0 && _entity$attributes.workspaceMember) {
    return intl.formatMessage(_i18n.messages.memberLozengeText);
  }
  if ((_entity$attributes2 = entity.attributes) !== null && _entity$attributes2 !== void 0 && _entity$attributes2.isConfluenceExternalCollaborator) {
    var lozengeTooltipMessage = entity.entityType === _types.EntityType.GROUP ? _i18n.messages.guestGroupLozengeTooltip : _i18n.messages.guestUserLozengeTooltip;
    return {
      text: intl.formatMessage(_i18n.messages.guestLozengeText),
      tooltip: intl.formatMessage(lozengeTooltipMessage),
      appearance: 'default'
    };
  }
  return undefined;
};
var transformUser = function transformUser(item, intl) {
  var type = item.entityType;
  if (type === _types.EntityType.USER) {
    var user = item;
    var lozenge = getLozenzeProperties(user, intl);
    return {
      id: user.id,
      type: user.nonLicensedUser ? _userPicker.ExternalUserType : _userPicker.UserType,
      avatarUrl: user.avatarUrl,
      name: user.name,
      email: user.email,
      title: user.title,
      lozenge: lozenge,
      tooltip: user.name,
      isExternal: Boolean(user.nonLicensedUser),
      sources: user.nonLicensedUser ? ['other-atlassian'] : undefined
    };
  }
  if (type === _types.EntityType.TEAM) {
    var team = item;
    return {
      id: team.id,
      type: _userPicker.TeamType,
      description: team.description || '',
      name: team.displayName || '',
      memberCount: team.memberCount,
      members: team.members,
      includesYou: team.includesYou,
      avatarUrl: team.largeAvatarImageUrl || team.smallAvatarImageUrl,
      tooltip: team.displayName,
      verified: team.verified
    };
  }
  if (type === _types.EntityType.GROUP) {
    var group = item;
    var _lozenge = getLozenzeProperties(group, intl);
    return {
      id: group.id,
      type: _userPicker.GroupType,
      name: group.name || '',
      lozenge: _lozenge
    };
  }
  return;
};
var transformUsers = exports.transformUsers = function transformUsers(serverResponse, intl) {
  return (serverResponse.recommendedUsers || []).map(function (item) {
    return transformUser(item, intl);
  }).filter(function (user) {
    return !!user;
  }).map(function (user) {
    return user;
  });
};