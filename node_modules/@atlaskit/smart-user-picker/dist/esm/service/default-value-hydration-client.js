import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { UserType } from '@atlaskit/user-picker';
import { config } from '../config';
import getHydratedUsersFromPrs from './users-client';
import hydrateTeamFromLegion from './teams-client';
import { UNKNOWN } from './constants';
var getHydratedUsersFromProducts = function getHydratedUsersFromProducts(request) {
  var url = "".concat(config.getUsersServiceUrl(request.productKey, request.baseUrl));
  var params = new URLSearchParams();
  request.accountIds.map(function (id) {
    return params.append('accountId', id);
  });
  params.append('maxResults', '2000');
  return fetch("".concat(url, "?").concat(params), {
    method: 'GET',
    credentials: 'include',
    headers: {
      'content-type': 'application/json'
    }
  }).then(function (response) {
    if (response.status === 200) {
      return response.json();
    }
    return Promise.reject({
      message: "error calling users service, statusCode=".concat(response.status, ", statusText=").concat(response.statusText)
    });
  }).then(request.productKey === 'jira' ? transformJiraUsers : transformConfluenceUsers);
};
var transformJiraUsers = function transformJiraUsers(userResponse) {
  return userResponse.values.map(transformJiraUser).filter(function (user) {
    return !!user;
  }).map(function (user) {
    return user;
  });
};
var transformJiraUser = function transformJiraUser(item) {
  if (!item) {
    return null;
  }
  return {
    id: item.accountId,
    type: UserType,
    avatarUrl: item.avatarUrls ? item.avatarUrls['16x16'] : '',
    name: item.displayName,
    email: item.emailAddress
  };
};
var transformConfluenceUsers = function transformConfluenceUsers(userResponse) {
  return userResponse.results.map(transformConfluenceUser).filter(function (user) {
    return !!user;
  }).map(function (user) {
    return user;
  });
};
var transformConfluenceUser = function transformConfluenceUser(item) {
  if (!item) {
    return null;
  }
  return {
    id: item.accountId,
    type: UserType,
    avatarUrl: item.profilePicture ? item.profilePicture.path : '',
    name: item.publicName,
    email: item.email
  };
};
var sortResults = function sortResults(options, sortIds) {
  var resultsMap = new Map(options.map(function (option) {
    return [option && option.id, option];
  }));
  return sortIds.map(function (option) {
    var user = resultsMap.get(option.id);
    if (user) {
      return user;
    }
    return {
      id: option.id,
      type: option.type,
      name: UNKNOWN
    };
  });
};
var isOptionData = function isOptionData(option) {
  return option.name !== undefined;
};
var hydrateTeamIds = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(baseUrl, values, siteId) {
    var legionPromises;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(values.length === 0)) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", []);
        case 2:
          legionPromises = values.map(function (value) {
            return hydrateTeamFromLegion({
              baseUrl: baseUrl,
              id: value.id,
              siteId: siteId
            });
          });
          _context.next = 5;
          return Promise.all(legionPromises);
        case 5:
          return _context.abrupt("return", _context.sent);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function hydrateTeamIds(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var hydrateAccountIds = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(baseUrl, productKey, values) {
    var accountIds;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (!(values.length === 0)) {
            _context2.next = 2;
            break;
          }
          return _context2.abrupt("return", []);
        case 2:
          accountIds = values.map(function (val) {
            return val.id;
          }); //if we are not jira or confluence then use PRS platform hydration
          if (!(productKey === 'jira' || productKey === 'confluence')) {
            _context2.next = 9;
            break;
          }
          _context2.next = 6;
          return getHydratedUsersFromProducts({
            baseUrl: baseUrl,
            productKey: productKey,
            accountIds: accountIds
          });
        case 6:
          _context2.t0 = _context2.sent;
          _context2.next = 12;
          break;
        case 9:
          _context2.next = 11;
          return getHydratedUsersFromPrs(baseUrl, accountIds);
        case 11:
          _context2.t0 = _context2.sent;
        case 12:
          return _context2.abrupt("return", _context2.t0);
        case 13:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function hydrateAccountIds(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
function hydrateDefaultValues(_x7, _x8, _x9, _x10) {
  return _hydrateDefaultValues.apply(this, arguments);
}
function _hydrateDefaultValues() {
  _hydrateDefaultValues = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(baseUrl, value, productKey, siteId) {
    var values, _yield$Promise$all, _yield$Promise$all2, hydratedUsers, hydratedTeams, hydratedOptions;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(!value || Array.isArray(value) && value.length === 0)) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", []);
        case 2:
          values = Array.isArray(value) ? value : [value]; // return if all hydrated
          if (values.some(function (val) {
            return !isOptionData(val);
          })) {
            _context3.next = 5;
            break;
          }
          return _context3.abrupt("return", value);
        case 5:
          _context3.next = 7;
          return Promise.all([hydrateAccountIds(baseUrl, productKey, values.filter(function (val) {
            return !isOptionData(val) && val.type === 'user';
          })), hydrateTeamIds(baseUrl, values.filter(function (val) {
            return !isOptionData(val) && val.type === 'team';
          }), siteId)]);
        case 7:
          _yield$Promise$all = _context3.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
          hydratedUsers = _yield$Promise$all2[0];
          hydratedTeams = _yield$Promise$all2[1];
          hydratedOptions = values.filter(function (val) {
            return isOptionData(val);
          }).map(function (val) {
            return val;
          }).concat(hydratedUsers).concat(hydratedTeams);
          return _context3.abrupt("return", sortResults(hydratedOptions, values));
        case 13:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _hydrateDefaultValues.apply(this, arguments);
}
export default hydrateDefaultValues;