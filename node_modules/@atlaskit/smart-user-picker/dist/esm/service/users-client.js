import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { UNKNOWN_USER } from './constants';
import { graphqlQuery } from './graphqlUtils';
import { config } from '../config';
/**
 * @param  {string} accountIds ids to hydrate
 * @return GraphQL Query
 */
var buildUsersQuery = function buildUsersQuery(accountIds) {
  return {
    query: "query usersQuery($accountIds: [ID!]!) {\n    users(accountIds: $accountIds) {\n      name\n      accountId\n      picture\n    }\n  }",
    variables: {
      accountIds: accountIds
    }
  };
};
var makeRequest = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, accountIds) {
    var query;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          query = buildUsersQuery(accountIds);
          _context.next = 3;
          return graphqlQuery(url, query);
        case 3:
          return _context.abrupt("return", _context.sent);
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function makeRequest(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var modifyResponse = function modifyResponse(users) {
  return users.map(function (_ref2) {
    var accountId = _ref2.accountId,
      name = _ref2.name,
      picture = _ref2.picture;
    return {
      avatarUrl: picture,
      id: accountId,
      name: name,
      type: 'user'
    };
  });
};
var getHydratedUsers = function getHydratedUsers(baseUrl, userIds) {
  var url = config.getGraphQLUrl(baseUrl);
  return new Promise(function (resolve) {
    makeRequest(url, userIds).then(function (data) {
      resolve(modifyResponse(data.users));
    }).catch(function () {
      // on network error, return original list with label 'Unknown'
      resolve(userIds.map(function (id) {
        return _objectSpread(_objectSpread({}, UNKNOWN_USER), {}, {
          id: id
        });
      }));
    });
  });
};
export default getHydratedUsers;