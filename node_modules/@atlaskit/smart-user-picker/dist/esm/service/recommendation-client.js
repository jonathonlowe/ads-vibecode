import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { transformUsers } from './users-transformer';
import { config } from '../config';
var getUserRecommendations = function getUserRecommendations(request, intl) {
  var _request$context;
  var url = config.getRecommendationServiceUrl(request.baseUrl || '');
  return fetch(url, {
    method: 'POST',
    credentials: 'include',
    headers: {
      'content-type': 'application/json'
    },
    body: JSON.stringify({
      context: request.context,
      includeUsers: request.includeUsers,
      includeGroups: request.includeGroups,
      includeTeams: request.includeTeams,
      includeNonLicensedUsers: request.includeNonLicensedUsers,
      maxNumberOfResults: request.maxNumberOfResults,
      performSearchQueryOnly: false,
      searchQuery: _objectSpread(_objectSpread({
        cpusQueryHighlights: {
          query: '',
          field: ''
        }
      }, ((_request$context = request.context) === null || _request$context === void 0 || (_request$context = _request$context.productAttributes) === null || _request$context === void 0 ? void 0 : _request$context.isEntitledConfluenceExternalCollaborator) && {
        productAccessPermissionIds: ['write', 'external-collaborator-write']
      }), {}, {
        customQuery: '',
        customerDirectoryId: '',
        filter: request.searchQueryFilter || '',
        minimumAccessLevel: 'APPLICATION',
        queryString: request.query,
        restrictTo: {
          userIds: [],
          groupIds: []
        },
        searchUserbase: false
      })
    })
  }).then(function (response) {
    if (response.status === 200) {
      return response.json();
    }
    return Promise.reject({
      message: "error calling smart service, statusCode=".concat(response.status, ", statusText=").concat(response.statusText),
      statusCode: response.status
    });
  }).then(function (response) {
    return transformUsers(response, intl);
  });
};
export default getUserRecommendations;