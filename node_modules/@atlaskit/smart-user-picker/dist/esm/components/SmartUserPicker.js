import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import debounce from 'lodash/debounce';
import { v4 as uuidV4 } from 'uuid';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import memoizeOne from 'memoize-one';
import { injectIntl } from 'react-intl-next';
import { UFOExperienceState } from '@atlaskit/ufo';
import UserPicker, { isExternalUser, isTeam, isUser } from '@atlaskit/user-picker';
import { requestUsersEvent, filterUsersEvent, preparedUsersLoadedEvent, successfulRequestUsersEvent, failedRequestUsersEvent, mountedWithPrefetchEvent, createAndFireEventInElementsChannel } from '../analytics';
import MessagesIntlProvider from './MessagesIntlProvider';
import { getUserRecommendations, hydrateDefaultValues } from '../service';
import { smartUserPickerOptionsShownUfoExperience } from '../ufoExperiences';
var DEFAULT_DEBOUNCE_TIME_MS = 150;
var ufoEndStateConfig = function ufoEndStateConfig(fieldId) {
  return {
    metadata: {
      contextType: fieldId
    }
  };
};
var hasContextChanged = function hasContextChanged(oldContext, newContext) {
  return oldContext.siteId !== newContext.siteId || oldContext.orgId !== newContext.orgId || oldContext.productKey !== newContext.productKey || oldContext.principalId !== newContext.principalId || oldContext.containerId !== newContext.containerId || oldContext.objectId !== newContext.objectId || oldContext.childObjectId !== newContext.childObjectId;
};
var stringContains = function stringContains(str, substr) {
  if (str === null || str === undefined) {
    return false;
  }
  if (substr === null || substr === '' || substr === undefined) {
    return true;
  }
  return str.toLowerCase().includes(substr.toLowerCase());
};
var getUsersForAnalytics = function getUsersForAnalytics(users) {
  return (users || []).map(function (_ref) {
    var id = _ref.id,
      type = _ref.type;
    return {
      id: id,
      type: type
    };
  });
};
var checkIf500Event = function checkIf500Event(statusCode) {
  return 500 <= statusCode && statusCode < 600;
};
export var SmartUserPickerWithoutAnalytics = /*#__PURE__*/function (_React$Component) {
  function SmartUserPickerWithoutAnalytics(props) {
    var _this$props$debounceT;
    var _this;
    _classCallCheck(this, SmartUserPickerWithoutAnalytics);
    _this = _callSuper(this, SmartUserPickerWithoutAnalytics, [props]);
    _defineProperty(_this, "state", {
      users: [],
      loading: false,
      closed: true,
      query: '',
      defaultValue: [],
      bootstrapOptions: []
    });
    _defineProperty(_this, "abortOptionsShownUfoExperience", function () {
      if (_this.optionsShownUfoExperienceInstance.state.id === UFOExperienceState.STARTED.id) {
        // There may be an existing UFO timing running from previous key entry or focus,
        // so abort it and restart it just in case.
        _this.optionsShownUfoExperienceInstance.abort();
      }
    });
    _defineProperty(_this, "startOptionsShownUfoExperience", function () {
      _this.abortOptionsShownUfoExperience();
      _this.optionsShownUfoExperienceInstance.start();
    });
    _defineProperty(_this, "fireEvent", function (eventCreator) {
      var createAnalyticsEvent = _this.props.createAnalyticsEvent;
      if (createAnalyticsEvent) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        createAndFireEventInElementsChannel(eventCreator.apply(void 0, [_this.props, _this.state].concat(args)))(createAnalyticsEvent);
      }
    });
    _defineProperty(_this, "filterOptions", function (users, query, propFilterOptions) {
      return propFilterOptions ? propFilterOptions(users, query) : users;
    });
    _defineProperty(_this, "memoizedFilterOptions", memoizeOne(_this.filterOptions));
    _defineProperty(_this, "getUsers", debounce( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _this$state, query, sessionId, closed, _this$props, baseUrl, childObjectId, containerId, fieldId, includeGroups, includeTeams, includeUsers, includeNonLicensedUsers, intl, maxOptions, objectId, onEmpty, onError, overrideByline, orgId, principalId, productAttributes, productKey, searchQueryFilter, siteId, maxNumberOfResults, startTime, recommendationsRequest, _yield$onEmpty, recommendedUsers, _iterator, _step, option, elapsedTimeMilli, displayedUsers, is5xxEvent, onErrorProducedError, defaultUsers, _elapsedTimeMilli;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _this$state = _this.state, query = _this$state.query, sessionId = _this$state.sessionId, closed = _this$state.closed;
            _this$props = _this.props, baseUrl = _this$props.baseUrl, childObjectId = _this$props.childObjectId, containerId = _this$props.containerId, fieldId = _this$props.fieldId, includeGroups = _this$props.includeGroups, includeTeams = _this$props.includeTeams, includeUsers = _this$props.includeUsers, includeNonLicensedUsers = _this$props.includeNonLicensedUsers, intl = _this$props.intl, maxOptions = _this$props.maxOptions, objectId = _this$props.objectId, onEmpty = _this$props.onEmpty, onError = _this$props.onError, overrideByline = _this$props.overrideByline, orgId = _this$props.orgId, principalId = _this$props.principalId, productAttributes = _this$props.productAttributes, productKey = _this$props.productKey, searchQueryFilter = _this$props.searchQueryFilter, siteId = _this$props.siteId;
            maxNumberOfResults = maxOptions || 100;
            startTime = window.performance.now();
            recommendationsRequest = {
              baseUrl: baseUrl,
              context: {
                containerId: containerId,
                contextType: fieldId,
                objectId: objectId,
                principalId: principalId,
                productKey: productKey,
                siteId: siteId,
                organizationId: orgId,
                childObjectId: childObjectId,
                sessionId: sessionId,
                productAttributes: productAttributes
              },
              includeUsers: includeUsers,
              includeGroups: includeGroups,
              includeTeams: includeTeams,
              includeNonLicensedUsers: includeNonLicensedUsers,
              maxNumberOfResults: maxNumberOfResults,
              query: query,
              searchQueryFilter: searchQueryFilter
            };
            _context.prev = 5;
            _this.fireEvent(requestUsersEvent);
            _context.next = 9;
            return getUserRecommendations(recommendationsRequest, intl);
          case 9:
            recommendedUsers = _context.sent;
            if (overrideByline) {
              _iterator = _createForOfIteratorHelper(recommendedUsers);
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  option = _step.value;
                  if (isUser(option) || isExternalUser(option) || isTeam(option)) {
                    option.byline = overrideByline(option);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
            elapsedTimeMilli = window.performance.now() - startTime;
            if (!(recommendedUsers.length === 0 && onEmpty)) {
              _context.next = 27;
              break;
            }
            _context.next = 15;
            return onEmpty(query);
          case 15:
            _context.t2 = _yield$onEmpty = _context.sent;
            _context.t1 = _context.t2 !== null;
            if (!_context.t1) {
              _context.next = 19;
              break;
            }
            _context.t1 = _yield$onEmpty !== void 0;
          case 19:
            if (!_context.t1) {
              _context.next = 23;
              break;
            }
            _context.t3 = _yield$onEmpty;
            _context.next = 24;
            break;
          case 23:
            _context.t3 = [];
          case 24:
            _context.t0 = _context.t3;
            _context.next = 28;
            break;
          case 27:
            _context.t0 = recommendedUsers;
          case 28:
            displayedUsers = _context.t0;
            _this.setState(function (state) {
              var applicable = state.query === query;
              var users = applicable ? displayedUsers : state.users;
              var loading = !applicable;
              _this.fireEvent(successfulRequestUsersEvent, {
                users: getUsersForAnalytics(recommendedUsers),
                elapsedTimeMilli: elapsedTimeMilli,
                displayedUsers: getUsersForAnalytics(displayedUsers),
                productAttributes: productAttributes,
                applicable: applicable
              });
              return {
                users: users,
                loading: loading
              };
            });
            _context.next = 61;
            break;
          case 32:
            _context.prev = 32;
            _context.t4 = _context["catch"](5);
            is5xxEvent = checkIf500Event(_context.t4.statusCode);
            if (!closed && !onError && is5xxEvent) {
              // If the user lookup fails while the menu is open, and the consumer is not providing a
              // fallback data source via the onError prop, then send UFO failure
              _this.optionsShownUfoExperienceInstance.failure(ufoEndStateConfig(_this.props.fieldId));
            }
            _this.setState({
              users: []
            });
            onErrorProducedError = false;
            defaultUsers = [];
            _context.prev = 39;
            if (!onError) {
              _context.next = 49;
              break;
            }
            _context.next = 43;
            return onError(_context.t4, recommendationsRequest);
          case 43:
            _context.t6 = _context.sent;
            if (_context.t6) {
              _context.next = 46;
              break;
            }
            _context.t6 = [];
          case 46:
            _context.t5 = _context.t6;
            _context.next = 50;
            break;
          case 49:
            _context.t5 = [];
          case 50:
            defaultUsers = _context.t5;
            _context.next = 56;
            break;
          case 53:
            _context.prev = 53;
            _context.t7 = _context["catch"](39);
            onErrorProducedError = true;
          case 56:
            if (onErrorProducedError && is5xxEvent) {
              // Log error from fallback data source `onError` to UFO
              _this.optionsShownUfoExperienceInstance.failure(ufoEndStateConfig(_this.props.fieldId));
            }
            if (!is5xxEvent && (!onError && !closed || onErrorProducedError)) {
              _this.abortOptionsShownUfoExperience();
            }
            _this.setState({
              users: defaultUsers,
              loading: false
            });
            _elapsedTimeMilli = window.performance.now() - startTime;
            _this.fireEvent(failedRequestUsersEvent, {
              elapsedTimeMilli: _elapsedTimeMilli,
              productAttributes: productAttributes
            });
          case 61:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[5, 32], [39, 53]]);
    })), (_this$props$debounceT = _this.props.debounceTime) !== null && _this$props$debounceT !== void 0 ? _this$props$debounceT : 0));
    _defineProperty(_this, "onInputChange", function (newQuery, sessionId) {
      var query = newQuery || '';
      var closed = _this.state.closed;
      if (query === _this.state.query) {
        return;
      }
      if (!closed) {
        // If the input has been typed into and the dropdown has not been closed
        // (i.e. input blurred) then start the UFO timer.
        // If there's a previous UFO timer running for the same "options shown" experience,
        // it will be aborted first.
        _this.startOptionsShownUfoExperience();
        _this.setState({
          loading: true,
          query: query,
          sessionId: sessionId
        });
        if (_this.props.onInputChange) {
          _this.props.onInputChange(query, sessionId);
        }
      }
    });
    _defineProperty(_this, "filterUsers", function () {
      var _this$state2 = _this.state,
        loading = _this$state2.loading,
        users = _this$state2.users,
        query = _this$state2.query;
      var filteredUsers = _this.memoizedFilterOptions(users, query, _this.props.filterOptions);
      //If bootstrapOptions have been passed in and it is bootstrap
      if (_this.props.bootstrapOptions && _this.props.bootstrapOptions.length !== 0 && query === '') {
        var bootstrapFilteredUsers = _this.memoizedFilterOptions(_this.props.bootstrapOptions, query, _this.props.filterOptions);
        _this.fireEvent(filterUsersEvent, {
          filtered: getUsersForAnalytics(bootstrapFilteredUsers),
          all: getUsersForAnalytics(_this.props.bootstrapOptions)
        });
        return bootstrapFilteredUsers;
      }
      // while when not loading just return already filtered result from server.
      if (!loading) {
        return filteredUsers;
      }
      var queryFilteredUsers = filteredUsers.filter(function (user) {
        return stringContains(user.name, query);
      });
      _this.fireEvent(filterUsersEvent, {
        filtered: getUsersForAnalytics(queryFilteredUsers),
        all: getUsersForAnalytics(users)
      });

      // when loading filter previous result.
      return filteredUsers;
    });
    _defineProperty(_this, "onFocus", function (sessionId) {
      var state = {
        query: '',
        closed: false
      };
      _this.startOptionsShownUfoExperience();
      if (_this.state.users.length === 0) {
        state.sessionId = sessionId;
        state.loading = true;
      } else {
        _this.fireEvent(preparedUsersLoadedEvent, {
          users: getUsersForAnalytics(_this.state.users),
          preparedSessionId: _this.state.sessionId,
          sessionId: sessionId
        });
      }
      _this.setState(function (currentState) {
        return _objectSpread(_objectSpread({}, currentState), state);
      });
      if (_this.props.onFocus) {
        _this.props.onFocus(sessionId);
      }
    });
    _defineProperty(_this, "onBlur", function (sessionId) {
      _this.getUsers.cancel();
      _this.abortOptionsShownUfoExperience();

      // clear old users if query is populated so that on refocus,
      // the old list is not shown
      var users = _this.state.query.length === 0 ? _this.state.users : [];
      _this.setState({
        loading: false,
        closed: true,
        users: users
      });
      if (_this.props.onBlur) {
        _this.props.onBlur(sessionId);
      }
    });
    _this.optionsShownUfoExperienceInstance = smartUserPickerOptionsShownUfoExperience.getInstance(props.inputId || props.fieldId);
    return _this;
  }
  _inherits(SmartUserPickerWithoutAnalytics, _React$Component);
  return _createClass(SmartUserPickerWithoutAnalytics, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var value, defaultValue, prefetch, sessionId;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return hydrateDefaultValues(this.props.baseUrl, this.props.defaultValue, this.props.productKey, this.props.siteId);
            case 3:
              value = _context2.sent;
              this.setState({
                defaultValue: value
              });
              _context2.next = 13;
              break;
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              _context2.next = 11;
              return this.props.onValueError ? this.props.onValueError(_context2.t0, this.props.defaultValue) || Promise.resolve([]) : Promise.resolve([]);
            case 11:
              defaultValue = _context2.sent;
              this.setState({
                defaultValue: defaultValue
              });
            case 13:
              prefetch = this.props.prefetch;
              if (prefetch) {
                sessionId = uuidV4();
                this.fireEvent(mountedWithPrefetchEvent, {
                  sessionId: sessionId
                });
                this.setState({
                  sessionId: sessionId
                });
              }
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[0, 7]]);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (hasContextChanged(prevProps, this.props) || this.props.fieldId !== prevProps.fieldId) {
        this.setState({
          users: []
        });
      }
      if ((this.state.sessionId !== prevState.sessionId || this.state.query !== prevState.query) && (this.state.query !== '' || !this.props.bootstrapOptions)) {
        this.getUsers();
      } else if (!this.state.closed && !this.state.loading) {
        // If the component has rendered (including its dropdown list) and it
        // is not loading anything further, send the success UFO event
        if (![UFOExperienceState.FAILED.id, UFOExperienceState.SUCCEEDED.id, UFOExperienceState.ABORTED.id].includes(this.optionsShownUfoExperienceInstance.state.id)) {
          this.optionsShownUfoExperienceInstance.success(ufoEndStateConfig(this.props.fieldId));
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(MessagesIntlProvider, null, /*#__PURE__*/React.createElement(UserPicker, _extends({}, this.props, {
        onInputChange: this.onInputChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        defaultValue: this.state.defaultValue,
        isLoading: this.props.isLoading || this.state.loading && !this.state.closed && (!this.props.bootstrapOptions || this.state.query !== ''),
        options: this.filterUsers()
      })));
    }
  }]);
}(React.Component);

// TODO: Smart User picker team will have to add a type annotation here
_defineProperty(SmartUserPickerWithoutAnalytics, "defaultProps", {
  baseUrl: '',
  includeUsers: true,
  includeGroups: false,
  includeTeams: false,
  includeNonLicensedUsers: false,
  prefetch: false,
  principalId: 'Context',
  debounceTime: DEFAULT_DEBOUNCE_TIME_MS
});
export var SmartUserPicker = withAnalyticsEvents()(injectIntl(SmartUserPickerWithoutAnalytics));