import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { ExperiencePerformanceTypes, ExperienceTypes, ConcurrentExperience, UFOExperienceState } from '@atlaskit/ufo';
import { useEffect, useState } from 'react';
var COMPONENT_NAME = 'smart-user-picker';
export var smartUserPickerRenderedUfoExperience = new ConcurrentExperience('smart-user-picker-rendered', {
  platform: {
    component: COMPONENT_NAME
  },
  type: ExperienceTypes.Load,
  performanceType: ExperiencePerformanceTypes.PageSegmentLoad
});
export var smartUserPickerOptionsShownUfoExperience = new ConcurrentExperience('smart-user-picker-options-shown', {
  platform: {
    component: COMPONENT_NAME
  },
  type: ExperienceTypes.Operation,
  performanceType: ExperiencePerformanceTypes.InlineResult
});
export var useUFOConcurrentExperience = function useUFOConcurrentExperience(experience, id) {
  var experienceForId = experience.getInstance(id);

  // Equivalent to componentWillMount - replace with @atlaskit/ufo's
  // useUFOComponentExperience when it supports ConcurrentExperience.
  useState(function () {
    experienceForId.start();
  });

  // Replace with @atlaskit/ufo's <ExperienceSuccess> when it supports ConcurrentExperience
  useEffect(function () {
    if (experienceForId.state !== UFOExperienceState['FAILED']) {
      experienceForId.success();
    }
    return function () {
      if ([UFOExperienceState['STARTED'], UFOExperienceState['IN_PROGRESS']].includes(experienceForId.state)) {
        experienceForId.abort();
      }
    };

    // We only want this useEffect to run once after component mount, so no deps are needed.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
};
export var UfoErrorBoundary = /*#__PURE__*/function (_React$Component) {
  function UfoErrorBoundary() {
    _classCallCheck(this, UfoErrorBoundary);
    return _callSuper(this, UfoErrorBoundary, arguments);
  }
  _inherits(UfoErrorBoundary, _React$Component);
  return _createClass(UfoErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch() {
      smartUserPickerRenderedUfoExperience.getInstance(this.props.id).failure();
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
}(React.Component);