"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var baseStylesOld = (0, _primitives.xcss)({
  display: 'inline-flex',
  borderRadius: 'border.radius',
  blockSize: 'min-content',
  position: 'static',
  overflow: 'hidden'
});
var styles = {
  container: (0, _react2.css)({
    display: 'inline-flex',
    boxSizing: 'border-box',
    position: 'static',
    blockSize: 'min-content',
    borderRadius: '3px',
    overflow: 'hidden',
    paddingInline: "var(--ds-space-050, 4px)"
  }),
  containerSubtle: (0, _react2.css)({
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
    outlineOffset: -1
  }),
  background: {
    bold: {
      default: (0, _react2.css)({
        backgroundColor: '#DDDEE1'
      }),
      inprogress: (0, _react2.css)({
        backgroundColor: '#8FB8F6'
      }),
      moved: (0, _react2.css)({
        backgroundColor: '#F9C84E'
      }),
      new: (0, _react2.css)({
        backgroundColor: '#D8A0F7'
      }),
      removed: (0, _react2.css)({
        backgroundColor: '#FD9891'
      }),
      success: (0, _react2.css)({
        backgroundColor: '#B3DF72'
      })
    },
    subtle: {
      default: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      inprogress: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      moved: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      new: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      removed: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      success: (0, _react2.css)({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      })
    }
  },
  border: {
    subtle: {
      default: (0, _react2.css)({
        border: "1px solid #B7B9BE"
      }),
      inprogress: (0, _react2.css)({
        border: "1px solid #669DF1"
      }),
      moved: (0, _react2.css)({
        border: "1px solid #FCA700"
      }),
      new: (0, _react2.css)({
        border: "1px solid #C97CF4"
      }),
      removed: (0, _react2.css)({
        border: "1px solid #F87168"
      }),
      success: (0, _react2.css)({
        border: "1px solid #94C748"
      })
    }
  },
  outline: {
    subtle: {
      default: (0, _react2.css)({
        outline: "1px solid #B7B9BE"
      }),
      inprogress: (0, _react2.css)({
        outline: "1px solid #669DF1"
      }),
      moved: (0, _react2.css)({
        outline: "1px solid #FCA700"
      }),
      new: (0, _react2.css)({
        outline: "1px solid #C97CF4"
      }),
      removed: (0, _react2.css)({
        outline: "1px solid #F87168"
      }),
      success: (0, _react2.css)({
        outline: "1px solid #94C748"
      })
    }
  },
  text: {
    subtle: (0, _react2.css)({
      color: "var(--ds-text, #172B4D)"
    }),
    bold: (0, _react2.css)({
      color: '#292A2E'
    })
  }
};
var textStyles = (0, _react2.css)({
  fontFamily: "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  fontSize: '11px',
  fontStyle: 'normal',
  fontWeight: "var(--ds-font-weight-bold, 700)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  textTransform: 'uppercase',
  whiteSpace: 'nowrap'
});
var customLetterspacingStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  letterSpacing: 0.165
});
/**
 * __Lozenge__
 *
 * A lozenge is a visual indicator used to highlight an item's status for quick recognition.
 *
 * - [Examples](https://atlassian.design/components/lozenge/examples)
 * - [Code](https://atlassian.design/components/lozenge/code)
 * - [Usage](https://atlassian.design/components/lozenge/usage)
 */
var Lozenge = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var children = _ref.children,
    testId = _ref.testId,
    _ref$isBold = _ref.isBold,
    isBold = _ref$isBold === void 0 ? false : _ref$isBold,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? 200 : _ref$maxWidth,
    style = _ref.style;
  var appearanceStyle = isBold ? 'bold' : 'subtle';
  var appearanceType = appearance in styles.background[appearanceStyle] ? appearance : 'default';
  var maxWidthValue = typeof maxWidth === 'string' ? maxWidth : "".concat(maxWidth, "px");
  var maxWidthIsPc = typeof maxWidth === 'string' && /%$/.test(maxWidth);
  if ((0, _platformFeatureFlags.fg)('platform-component-visual-refresh')) {
    return (0, _react2.jsx)("span", {
      style: {
        backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
        maxWidth: maxWidthIsPc ? maxWidth : '100%'
      },
      css: [styles.container, styles.background[appearanceStyle][appearanceType], appearanceStyle === 'subtle' && !(0, _platformFeatureFlags.fg)('visual-refresh_drop_5') && styles.border.subtle[appearanceType], appearanceStyle === 'subtle' && (0, _platformFeatureFlags.fg)('visual-refresh_drop_5') && styles.outline.subtle[appearanceType], appearanceStyle === 'subtle' && (0, _platformFeatureFlags.fg)('visual-refresh_drop_5') && styles.containerSubtle],
      "data-testid": testId
    }, (0, _react2.jsx)("span", {
      css: [textStyles, (0, _platformFeatureFlags.fg)('platform-lozenge-custom-letterspacing') && customLetterspacingStyles, styles.text[appearanceStyle]],
      style: {
        color: style === null || style === void 0 ? void 0 : style.color,
        // to negate paddingInline specified on Box above
        maxWidth: maxWidthIsPc ? '100%' : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
      },
      "data-testid": testId && "".concat(testId, "--text")
    }, children));
  }
  var appearanceTypeOld = appearance in backgroundColorsOld[appearanceStyle] ? appearance : 'default';
  return (0, _react2.jsx)(_primitives.Box, {
    as: "span",
    backgroundColor: backgroundColorsOld[appearanceStyle][appearanceTypeOld],
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      maxWidth: maxWidthIsPc ? maxWidth : '100%'
    },
    paddingInline: "space.050",
    xcss: baseStylesOld,
    testId: testId
  }, (0, _react2.jsx)("span", {
    css: [textStyles, (0, _platformFeatureFlags.fg)('platform-lozenge-custom-letterspacing') && customLetterspacingStyles, textColorsOld[appearanceStyle][appearanceType]],
    style: {
      color: style === null || style === void 0 ? void 0 : style.color,
      // to negate paddingInline specified on Box above
      maxWidth: maxWidthIsPc ? '100%' : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
    },
    "data-testid": testId && "".concat(testId, "--text")
  }, children));
});
Lozenge.displayName = 'Lozenge';
var _default = exports.default = Lozenge;
var backgroundColorsOld = {
  bold: {
    default: 'color.background.neutral.bold',
    inprogress: 'color.background.information.bold',
    moved: 'color.background.warning.bold',
    new: 'color.background.discovery.bold',
    removed: 'color.background.danger.bold',
    success: 'color.background.success.bold'
  },
  subtle: {
    default: 'color.background.neutral',
    inprogress: 'color.background.information',
    moved: 'color.background.warning',
    new: 'color.background.discovery',
    removed: 'color.background.danger',
    success: 'color.background.success'
  }
};
var textColorsOld = {
  bold: {
    default: (0, _react2.css)({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    inprogress: (0, _react2.css)({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    moved: (0, _react2.css)({
      color: "var(--ds-text-warning-inverse, #172B4D)"
    }),
    new: (0, _react2.css)({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    removed: (0, _react2.css)({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    success: (0, _react2.css)({
      color: "var(--ds-text-inverse, #FFFFFF)"
    })
  },
  subtle: {
    default: (0, _react2.css)({
      color: "var(--ds-text-subtle, #42526E)"
    }),
    inprogress: (0, _react2.css)({
      color: "var(--ds-text-information, #0052CC)"
    }),
    moved: (0, _react2.css)({
      color: "var(--ds-text-warning, #974F0C)"
    }),
    new: (0, _react2.css)({
      color: "var(--ds-text-discovery, #403294)"
    }),
    removed: (0, _react2.css)({
      color: "var(--ds-text-danger, #DE350B)"
    }),
    success: (0, _react2.css)({
      color: "var(--ds-text-success, #006644)"
    })
  }
};