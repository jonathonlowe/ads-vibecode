import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getMediaTypeFromMimeType } from '@atlaskit/media-common';
import { getOrientation } from '@atlaskit/media-ui';
import { LocalPreviewError, RemotePreviewError } from '../errors';
import { takeSnapshot } from './videoSnapshot';

/**
 * This method tells the support for the media
 * types covered in getCardPreviewFromFilePreview
 */
export var isSupportedLocalPreview = function isSupportedLocalPreview(mediaType) {
  return mediaType === 'image' || mediaType === 'video';
};
var getImageLocalPreview = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
    var orientation, dataURI;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getOrientation(value);
        case 3:
          orientation = _context.sent;
          dataURI = URL.createObjectURL(value);
          return _context.abrupt("return", {
            dataURI: dataURI,
            orientation: orientation,
            source: 'local'
          });
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](0);
          throw new LocalPreviewError('local-preview-image', _context.t0 instanceof Error ? _context.t0 : undefined);
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 8]]);
  }));
  return function getImageLocalPreview(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getVideoLocalPreview = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {
    var dataURI;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return takeSnapshot(value);
        case 3:
          dataURI = _context2.sent;
          return _context2.abrupt("return", {
            dataURI: dataURI,
            orientation: 1,
            source: 'local'
          });
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          throw new LocalPreviewError('local-preview-video', _context2.t0 instanceof Error ? _context2.t0 : undefined);
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function getVideoLocalPreview(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
export var getLocalPreview = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filePreview) {
    var value, resolvedFilePreview, _value, type, mediaType;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return filePreview;
        case 3:
          resolvedFilePreview = _context3.sent;
          value = resolvedFilePreview.value;
          _context3.next = 10;
          break;
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          throw new LocalPreviewError('local-preview-rejected', _context3.t0 instanceof Error ? _context3.t0 : undefined);
        case 10:
          if (!(typeof value === 'string')) {
            _context3.next = 14;
            break;
          }
          return _context3.abrupt("return", {
            dataURI: value,
            orientation: 1,
            source: 'local'
          });
        case 14:
          if (!(value instanceof Blob)) {
            _context3.next = 23;
            break;
          }
          _value = value, type = _value.type;
          mediaType = getMediaTypeFromMimeType(type);
          _context3.t1 = mediaType;
          _context3.next = _context3.t1 === 'image' ? 20 : _context3.t1 === 'video' ? 21 : 22;
          break;
        case 20:
          return _context3.abrupt("return", getImageLocalPreview(value));
        case 21:
          return _context3.abrupt("return", getVideoLocalPreview(value));
        case 22:
          throw new LocalPreviewError('local-preview-unsupported');
        case 23:
          throw new LocalPreviewError('local-preview-unsupported');
        case 24:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function getLocalPreview(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
export var getRemotePreview = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(mediaClient, id, params, traceContext) {
    var blob;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return mediaClient.getImage(id, params, undefined, undefined, traceContext);
        case 3:
          blob = _context4.sent;
          return _context4.abrupt("return", {
            dataURI: URL.createObjectURL(blob),
            orientation: 1,
            source: 'remote'
          });
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          throw new RemotePreviewError('remote-preview-fetch', _context4.t0 instanceof Error ? _context4.t0 : undefined);
        case 10:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function getRemotePreview(_x4, _x5, _x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();