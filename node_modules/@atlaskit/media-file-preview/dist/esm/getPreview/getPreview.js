import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { addFileAttrsToUrl } from '@atlaskit/media-client';
import { SsrPreviewError } from '../errors';
import { mediaFilePreviewCache } from './cache';
import { getLocalPreview, getRemotePreview } from './helpers';
var extendAndCachePreview = function extendAndCachePreview(id, mode, preview, mediaBlobUrlAttrs) {
  var source;
  switch (preview.source) {
    case 'local':
      source = 'cache-local';
      break;
    case 'remote':
      source = 'cache-remote';
      break;
    default:
      source = preview.source;
  }
  // We want to embed some meta context into dataURI for Copy/Paste to work.
  var dataURI = mediaBlobUrlAttrs ? addFileAttrsToUrl(preview.dataURI, mediaBlobUrlAttrs) : preview.dataURI;
  // We store new cardPreview into cache
  mediaFilePreviewCache.set(id, mode, _objectSpread(_objectSpread({}, preview), {}, {
    source: source,
    dataURI: dataURI
  }));
  return _objectSpread(_objectSpread({}, preview), {}, {
    dataURI: dataURI
  });
};
export var getSSRPreview = function getSSRPreview(ssr, mediaClient, id, params, mediaBlobUrlAttrs) {
  var dataURI;
  try {
    var rawDataURI = mediaClient.getImageUrlSync(id, params);
    // We want to embed some meta context into dataURI for Copy/Paste to work.
    dataURI = mediaBlobUrlAttrs ? addFileAttrsToUrl(rawDataURI, mediaBlobUrlAttrs) : rawDataURI;
    var source = ssr === 'client' ? 'ssr-client' : 'ssr-server';
    return {
      dataURI: dataURI,
      source: source,
      orientation: 1
    };
  } catch (e) {
    var reason = ssr === 'server' ? 'ssr-server-uri' : 'ssr-client-uri';
    throw new SsrPreviewError(reason, e instanceof Error ? e : undefined);
  }
};
export var isLocalPreview = function isLocalPreview(preview) {
  var localSources = ['local', 'cache-local'];
  return localSources.includes(preview.source);
};
export var isRemotePreview = function isRemotePreview(preview) {
  var remoteSources = ['remote', 'cache-remote'];
  return remoteSources.includes(preview.source);
};
export var isSSRClientPreview = function isSSRClientPreview(preview) {
  return preview.source === 'ssr-client';
};
export var isSSRDataPreview = function isSSRDataPreview(preview) {
  return preview.source === 'ssr-data';
};
export var isSSRPreview = function isSSRPreview(preview) {
  var ssrClientSources = ['ssr-client', 'ssr-server', 'ssr-data'];
  return ssrClientSources.includes(preview.source);
};
export var getAndCacheRemotePreview = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mediaClient, id, dimensions, params, mediaBlobUrlAttrs, traceContext) {
    var remotePreview;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return getRemotePreview(mediaClient, id, params, traceContext);
        case 2:
          remotePreview = _context.sent;
          return _context.abrupt("return", extendAndCachePreview(id, params.mode, _objectSpread(_objectSpread({}, remotePreview), {}, {
            dimensions: dimensions
          }), mediaBlobUrlAttrs));
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAndCacheRemotePreview(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
export var getAndCacheLocalPreview = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, filePreview, dimensions, mode, mediaBlobUrlAttrs) {
    var localPreview;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return getLocalPreview(filePreview);
        case 2:
          localPreview = _context2.sent;
          return _context2.abrupt("return", extendAndCachePreview(id, mode, _objectSpread(_objectSpread({}, localPreview), {}, {
            dimensions: dimensions
          }), mediaBlobUrlAttrs));
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getAndCacheLocalPreview(_x7, _x8, _x9, _x10, _x11) {
    return _ref2.apply(this, arguments);
  };
}();