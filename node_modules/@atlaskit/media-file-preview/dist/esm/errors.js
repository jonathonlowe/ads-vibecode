import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Primary reason is logged through Data Portal.
 * Make sure all the values are whitelisted in Measure -> Event Regitry -> "mediaCardRender failed" event
 */

export var MediaFilePreviewError = /*#__PURE__*/function (_Error) {
  function MediaFilePreviewError(primaryReason, secondaryError) {
    var _this;
    _classCallCheck(this, MediaFilePreviewError);
    _this = _callSuper(this, MediaFilePreviewError, [primaryReason]);
    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    _this.primaryReason = primaryReason;
    _this.secondaryError = secondaryError;
    Object.setPrototypeOf(_this, (this instanceof MediaFilePreviewError ? this.constructor : void 0).prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(_this, this instanceof MediaFilePreviewError ? this.constructor : void 0);
    }
    return _this;
  }
  _inherits(MediaFilePreviewError, _Error);
  return _createClass(MediaFilePreviewError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export var LocalPreviewError = /*#__PURE__*/function (_MediaFilePreviewErro) {
  function LocalPreviewError(primaryReason, secondaryError) {
    var _this2;
    _classCallCheck(this, LocalPreviewError);
    _this2 = _callSuper(this, LocalPreviewError, [primaryReason, secondaryError]);
    _this2.primaryReason = primaryReason;
    _this2.secondaryError = secondaryError;
    return _this2;
  }
  _inherits(LocalPreviewError, _MediaFilePreviewErro);
  return _createClass(LocalPreviewError);
}(MediaFilePreviewError);
export var RemotePreviewError = /*#__PURE__*/function (_MediaFilePreviewErro2) {
  function RemotePreviewError(primaryReason, secondaryError) {
    var _this3;
    _classCallCheck(this, RemotePreviewError);
    _this3 = _callSuper(this, RemotePreviewError, [primaryReason, secondaryError]);
    _this3.primaryReason = primaryReason;
    _this3.secondaryError = secondaryError;
    return _this3;
  }
  _inherits(RemotePreviewError, _MediaFilePreviewErro2);
  return _createClass(RemotePreviewError);
}(MediaFilePreviewError);
export var SsrPreviewError = /*#__PURE__*/function (_MediaFilePreviewErro3) {
  function SsrPreviewError(primaryReason, secondaryError) {
    var _this4;
    _classCallCheck(this, SsrPreviewError);
    _this4 = _callSuper(this, SsrPreviewError, [primaryReason, secondaryError]);
    _this4.primaryReason = primaryReason;
    _this4.secondaryError = secondaryError;
    return _this4;
  }
  _inherits(SsrPreviewError, _MediaFilePreviewErro3);
  return _createClass(SsrPreviewError);
}(MediaFilePreviewError);
var getImageLoadPrimaryReason = function getImageLoadPrimaryReason(source) {
  switch (source) {
    case 'cache-remote':
      return 'cache-remote-uri';
    case 'cache-local':
      return 'cache-local-uri';
    case 'external':
      return 'external-uri';
    case 'local':
      return 'local-uri';
    case 'remote':
      return 'remote-uri';
    case 'ssr-client':
      return 'ssr-client-uri';
    case 'ssr-server':
    case 'ssr-data':
      return 'ssr-server-uri';
    // This fail reason will come from a bug, most likely.
    default:
      return "unknown-uri";
  }
};
export var ImageLoadError = /*#__PURE__*/function (_MediaFilePreviewErro4) {
  function ImageLoadError(source) {
    _classCallCheck(this, ImageLoadError);
    return _callSuper(this, ImageLoadError, [getImageLoadPrimaryReason(source)]);
  }
  _inherits(ImageLoadError, _MediaFilePreviewErro4);
  return _createClass(ImageLoadError);
}(MediaFilePreviewError);
export function isMediaFilePreviewError(err) {
  return err instanceof MediaFilePreviewError;
}
export var isLocalPreviewError = function isLocalPreviewError(err) {
  return err instanceof LocalPreviewError;
};
export var isRemotePreviewError = function isRemotePreviewError(err) {
  return err instanceof RemotePreviewError;
};
export var isUnsupportedLocalPreviewError = function isUnsupportedLocalPreviewError(err) {
  return isMediaFilePreviewError(err) && err.primaryReason === 'local-preview-unsupported';
};

// In a try/catch statement, the error caught is the type of unknown.
// We can use this helper to ensure that the error handled is the type of MediaFilePreviewError if unsure
// If updatePrimaryReason is true, if it's a MediaFilePreviewError already, it will update it's primary reason
export var ensureMediaFilePreviewError = function ensureMediaFilePreviewError(primaryReason, error, updatePrimaryReason) {
  if (isMediaFilePreviewError(error)) {
    if (updatePrimaryReason && error.primaryReason !== primaryReason) {
      return new MediaFilePreviewError(primaryReason, error.secondaryError);
    }
    return error;
  }
  return new MediaFilePreviewError(primaryReason, error);
};