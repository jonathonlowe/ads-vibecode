import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { isCommonMediaClientError } from '@atlaskit/media-client';
import { ImageLoadError } from './errors';
export var getErrorTraceContext = function getErrorTraceContext(error) {
  var secondaryError = error.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    var _secondaryError$metad;
    return (_secondaryError$metad = secondaryError.metadata) === null || _secondaryError$metad === void 0 ? void 0 : _secondaryError$metad.traceContext;
  }
};
export var getRenderErrorFailReason = function getRenderErrorFailReason(error) {
  return error.primaryReason || 'nativeError';
};
export var getRenderErrorErrorReason = function getRenderErrorErrorReason(error) {
  var secondaryError = error.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.reason;
  }
  return 'nativeError';
};
export var getRenderErrorErrorDetail = function getRenderErrorErrorDetail(error) {
  var secondaryError = error.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.message;
  }
  return error.message;
};
export var extractErrorInfo = function extractErrorInfo(error, metadataTraceContext) {
  return {
    failReason: getRenderErrorFailReason(error),
    error: getRenderErrorErrorReason(error),
    errorDetail: getRenderErrorErrorDetail(error),
    metadataTraceContext: metadataTraceContext !== null && metadataTraceContext !== void 0 ? metadataTraceContext : getErrorTraceContext(error)
  };
};
export var createFailedSSRObject = function createFailedSSRObject(preview, metadataTraceContext) {
  return _objectSpread({
    status: 'fail'
  }, extractErrorInfo(new ImageLoadError(preview.source), metadataTraceContext));
};