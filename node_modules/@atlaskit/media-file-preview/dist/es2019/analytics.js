import { isCommonMediaClientError } from '@atlaskit/media-client';
import { ImageLoadError } from './errors';
export const getErrorTraceContext = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    var _secondaryError$metad;
    return (_secondaryError$metad = secondaryError.metadata) === null || _secondaryError$metad === void 0 ? void 0 : _secondaryError$metad.traceContext;
  }
};
export const getRenderErrorFailReason = error => {
  return error.primaryReason || 'nativeError';
};
export const getRenderErrorErrorReason = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.reason;
  }
  return 'nativeError';
};
export const getRenderErrorErrorDetail = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.message;
  }
  return error.message;
};
export const extractErrorInfo = (error, metadataTraceContext) => {
  return {
    failReason: getRenderErrorFailReason(error),
    error: getRenderErrorErrorReason(error),
    errorDetail: getRenderErrorErrorDetail(error),
    metadataTraceContext: metadataTraceContext !== null && metadataTraceContext !== void 0 ? metadataTraceContext : getErrorTraceContext(error)
  };
};
export const createFailedSSRObject = (preview, metadataTraceContext) => ({
  status: 'fail',
  ...extractErrorInfo(new ImageLoadError(preview.source), metadataTraceContext)
});