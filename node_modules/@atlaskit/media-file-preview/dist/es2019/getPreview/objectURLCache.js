import { EventEmitter2 } from 'eventemitter2';
import { LRUMap } from 'lru_map';
export const PREVIEW_CACHE_LRU_SIZE = 50;
class ExtendedLRUCache extends LRUMap {
  constructor(limit) {
    super(limit);
    this.eventEmitter = new EventEmitter2();
  }
  shift() {
    const entry = super.shift();
    this.eventEmitter.emit('shift', entry);
    return entry;
  }
  on(event, callback) {
    this.eventEmitter.on(event, callback);
  }
}
export class ObjectURLCache {
  constructor(size) {
    this.cache = new ExtendedLRUCache(size);
    this.cache.on('shift', entry => {
      if (entry && entry[1].dataURI) {
        URL.revokeObjectURL(entry[1].dataURI);
      }
    });
  }
  has(key) {
    return !!this.cache.find(key);
  }
  get(key) {
    return this.cache.get(key);
  }
  set(key, value) {
    this.cache.set(key, value);
  }
  remove(key) {
    const removed = this.cache.delete(key);
    removed && URL.revokeObjectURL(removed.dataURI);
  }
  clear() {
    this.cache.clear();
  }
}
export const createObjectURLCache = () => new ObjectURLCache(PREVIEW_CACHE_LRU_SIZE);