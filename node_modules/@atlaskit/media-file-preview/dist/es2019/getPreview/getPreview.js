import { addFileAttrsToUrl } from '@atlaskit/media-client';
import { SsrPreviewError } from '../errors';
import { mediaFilePreviewCache } from './cache';
import { getLocalPreview, getRemotePreview } from './helpers';
const extendAndCachePreview = (id, mode, preview, mediaBlobUrlAttrs) => {
  let source;
  switch (preview.source) {
    case 'local':
      source = 'cache-local';
      break;
    case 'remote':
      source = 'cache-remote';
      break;
    default:
      source = preview.source;
  }
  // We want to embed some meta context into dataURI for Copy/Paste to work.
  const dataURI = mediaBlobUrlAttrs ? addFileAttrsToUrl(preview.dataURI, mediaBlobUrlAttrs) : preview.dataURI;
  // We store new cardPreview into cache
  mediaFilePreviewCache.set(id, mode, {
    ...preview,
    source,
    dataURI
  });
  return {
    ...preview,
    dataURI
  };
};
export const getSSRPreview = (ssr, mediaClient, id, params, mediaBlobUrlAttrs) => {
  let dataURI;
  try {
    const rawDataURI = mediaClient.getImageUrlSync(id, params);
    // We want to embed some meta context into dataURI for Copy/Paste to work.
    dataURI = mediaBlobUrlAttrs ? addFileAttrsToUrl(rawDataURI, mediaBlobUrlAttrs) : rawDataURI;
    const source = ssr === 'client' ? 'ssr-client' : 'ssr-server';
    return {
      dataURI,
      source,
      orientation: 1
    };
  } catch (e) {
    const reason = ssr === 'server' ? 'ssr-server-uri' : 'ssr-client-uri';
    throw new SsrPreviewError(reason, e instanceof Error ? e : undefined);
  }
};
export const isLocalPreview = preview => {
  const localSources = ['local', 'cache-local'];
  return localSources.includes(preview.source);
};
export const isRemotePreview = preview => {
  const remoteSources = ['remote', 'cache-remote'];
  return remoteSources.includes(preview.source);
};
export const isSSRClientPreview = preview => preview.source === 'ssr-client';
export const isSSRDataPreview = preview => preview.source === 'ssr-data';
export const isSSRPreview = preview => {
  const ssrClientSources = ['ssr-client', 'ssr-server', 'ssr-data'];
  return ssrClientSources.includes(preview.source);
};
export const getAndCacheRemotePreview = async (mediaClient, id, dimensions, params, mediaBlobUrlAttrs, traceContext) => {
  const remotePreview = await getRemotePreview(mediaClient, id, params, traceContext);
  return extendAndCachePreview(id, params.mode, {
    ...remotePreview,
    dimensions
  }, mediaBlobUrlAttrs);
};
export const getAndCacheLocalPreview = async (id, filePreview, dimensions, mode, mediaBlobUrlAttrs) => {
  const localPreview = await getLocalPreview(filePreview);
  return extendAndCachePreview(id, mode, {
    ...localPreview,
    dimensions
  }, mediaBlobUrlAttrs);
};