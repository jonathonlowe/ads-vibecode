import { type MediaClientErrorReason } from '@atlaskit/media-client';
import { type MediaTraceContext, type SuccessAttributes } from '@atlaskit/media-common';
import { type MediaFilePreviewError, type MediaFilePreviewErrorPrimaryReason } from './errors';
import { type MediaFilePreview } from './types';
export type FailedErrorFailReason = MediaFilePreviewErrorPrimaryReason | 'nativeError';
export type MediaFilePreviewErrorInfo = {
    failReason: FailedErrorFailReason;
    error: MediaClientErrorReason | 'nativeError';
    errorDetail: string;
    metadataTraceContext?: MediaTraceContext;
};
export type SSRStatusFail = MediaFilePreviewErrorInfo & {
    status: 'fail';
};
type SSRStatusSuccess = SuccessAttributes;
type SSRStatusUnknown = {
    status: 'unknown';
};
type SSRStatusAttributes = SSRStatusSuccess | SSRStatusFail | SSRStatusUnknown;
export type SSRStatus = {
    server: SSRStatusAttributes;
    client: SSRStatusAttributes;
};
export declare const getErrorTraceContext: (error: MediaFilePreviewError) => MediaTraceContext | undefined;
export declare const getRenderErrorFailReason: (error: MediaFilePreviewError) => FailedErrorFailReason;
export declare const getRenderErrorErrorReason: (error: MediaFilePreviewError) => MediaClientErrorReason | 'nativeError';
export declare const getRenderErrorErrorDetail: (error: MediaFilePreviewError) => string;
export declare const extractErrorInfo: (error: MediaFilePreviewError, metadataTraceContext?: MediaTraceContext) => MediaFilePreviewErrorInfo;
export declare const createFailedSSRObject: (preview: MediaFilePreview, metadataTraceContext?: MediaTraceContext) => SSRStatusFail;
export {};
