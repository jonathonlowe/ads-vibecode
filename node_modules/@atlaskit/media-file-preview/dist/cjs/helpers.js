"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBigger = exports.createRequestDimensions = void 0;
exports.useCurrentValueRef = useCurrentValueRef;
var _react = require("react");
/**
 * Checks if at least one of next dimensions is bigger than current
 * If a single dimension is undefined, returns false
 */
var isBigger = exports.isBigger = function isBigger(current, next) {
  var _ref = current || {},
    currentWidth = _ref.width,
    currentHeight = _ref.height;
  var _ref2 = next || {},
    nextWidth = _ref2.width,
    nextHeight = _ref2.height;
  if (!!currentWidth && !!currentHeight && !!nextWidth && !!nextHeight) {
    var nextIsWider = currentWidth < nextWidth;
    var nextIsHigher = currentHeight < nextHeight;
    return nextIsHigher || nextIsWider;
  } else {
    return false;
  }
};

/** Verifies if the current screen is retina display */
function isRetina() {
  var mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)';
  return window.devicePixelRatio > 1 || window.matchMedia && window.matchMedia(mediaQuery).matches;
}
var createRequestDimensions = exports.createRequestDimensions = function createRequestDimensions(dimensions) {
  if (!dimensions) {
    return;
  }
  var retinaFactor = isRetina() ? 2 : 1;
  var width = dimensions.width,
    height = dimensions.height;
  var result = {};
  if (width) {
    result.width = width * retinaFactor;
  }
  if (height) {
    result.height = height * retinaFactor;
  }
  return result;
};

/** Stores the provided value in a ref object to avoid "component rerenders" when the value is used as a hook dependency */
function useCurrentValueRef(value) {
  var ref = (0, _react.useRef)(value);
  ref.current = value;
  return ref;
}