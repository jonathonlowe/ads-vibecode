/// <reference types="react" />
import { type FileIdentifier, type MediaBlobUrlAttrs, type MediaStoreGetFileImageParams } from '@atlaskit/media-client';
import { type MediaTraceContext, type SSR } from '@atlaskit/media-common';
import { type SSRStatus } from './analytics';
import { MediaFilePreviewError } from './errors';
import { type MediaFilePreview, type MediaFilePreviewDimensions, type MediaFilePreviewStatus } from './types';
export interface UseFilePreviewParams {
    /** Instance of file identifier. */
    readonly identifier: FileIdentifier;
    /** Resize the media to 'crop' | 'fit' | 'full-fit' */
    readonly resizeMode?: MediaStoreGetFileImageParams['mode'];
    /** Dimensions to be requested to the server. Will be scaled x2 in Retina Displays */
    readonly dimensions?: MediaFilePreviewDimensions;
    /** Server-Side-Rendering modes are "server" and "client" */
    readonly ssr?: SSR;
    /** Attributes to attach to the created Blob Url */
    readonly mediaBlobUrlAttrs?: MediaBlobUrlAttrs;
    /** Trace context to be passed to the backend requests */
    readonly traceContext?: MediaTraceContext;
    /** Do not fetch a remote preview. Helpful for lazy loading */
    readonly skipRemote?: boolean;
    /** Define whether an animated image is acceptable to return */
    readonly allowAnimated?: boolean;
    /** Define the upscale strategy for this image. */
    readonly upscale?: boolean;
    /** Make the client receive the response with the given max-age cache control header. Minimum: 0, maximum: 9223372036854776000.
     */
    readonly maxAge?: number;
    /** Defines the source component */
    readonly source?: string;
}
export declare const useFilePreview: ({ resizeMode, identifier, ssr, dimensions, traceContext, skipRemote, mediaBlobUrlAttrs, allowAnimated, upscale, maxAge, source, }: UseFilePreviewParams) => {
    preview: MediaFilePreview | undefined;
    status: MediaFilePreviewStatus;
    error: MediaFilePreviewError | undefined;
    nonCriticalError: MediaFilePreviewError | undefined;
    ssrReliability: SSRStatus;
    onImageError: (failedPreview?: MediaFilePreview) => void;
    onImageLoad: (newPreview?: MediaFilePreview) => void;
    getSsrScriptProps: (() => import("react").ScriptHTMLAttributes<HTMLScriptElement>) | undefined;
    copyNodeRef: (instance: HTMLImageElement | HTMLDivElement | null) => void;
};
