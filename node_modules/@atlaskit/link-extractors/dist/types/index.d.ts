export interface ExtractorFunction<T> {
    (json: any): T;
}
export interface ExtractOptions<T> {
    defaultExtractorFunction: ExtractorFunction<T>;
    extractorPrioritiesByType: {
        [type: string]: number;
    };
    extractorFunctionsByType: {
        [type: string]: ExtractorFunction<T>;
    };
    json: any;
}
export declare function genericExtractPropsFromJSONLD<T>(options: ExtractOptions<T>): T;
export { extractPlatformIsSupported, extractContext, extractProvider, extractProviderIcon, extractDateCreated, extractDateUpdated, extractDateViewed, extractMembers, extractPersonAssignedTo, extractPersonOwnedBy, extractPersonCreatedBy, extractPersonUpdatedBy, extractPersonFromJsonLd, extractImage, extractPreview, extractLink, extractTitle, extractSummary, extractType, extractUrlFromIconJsonLd, extractUrlFromLinkJsonLd, extractAri, isConfluenceGenerator, } from './common';
export { extractEntity, extractEntityProvider, isEntityPresent } from './entity';
export { extractSmartLinkEmbed, extractSmartLinkTitle, extractSmartLinkUrl, extractSmartLinkIcon, extractSmartLinkProvider, } from './smart-link';
export type { LinkPerson, LinkProvider, LinkTypeCreated, LinkPersonUpdatedBy, LinkTypeUpdatedBy, LinkPreview, } from './common';
export type { CardPlatform } from './types';
