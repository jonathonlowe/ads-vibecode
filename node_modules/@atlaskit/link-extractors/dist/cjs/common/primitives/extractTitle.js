"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTitle = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _context = require("../context");
var _extractType = require("./extractType");
/**
 * @deprecated Use extractSmartLinkTitle instead
 */
var extractTitle = exports.extractTitle = function extractTitle(jsonLd, removeTextHighlightingFromTitle) {
  var _jsonLd$name;
  var name = (_jsonLd$name = jsonLd.name) === null || _jsonLd$name === void 0 ? void 0 : _jsonLd$name.replace(/[\r\n]+/g, '');
  var id = jsonLd['@id'] || '';

  // Check if this is a reference to something _inside_ a Repository.
  // We format these titles to represent more metadata.
  var context = (0, _context.extractContext)(jsonLd);
  var type = (0, _extractType.extractType)(jsonLd);
  var hasContextType = context && context.type;
  var hasContextRepo = hasContextType && context.type.includes('atlassian:SourceCodeRepository');
  if (hasContextRepo && type) {
    var contextName = context.name && "".concat(context.name, ": ") || '';
    // COMMIT: `repo-name: abf137c title of commit message`
    if (type.includes('atlassian:SourceCodeCommit')) {
      var _id$split = id.split(':'),
        _id$split2 = (0, _slicedToArray2.default)(_id$split, 2),
        hashContent = _id$split2[1];
      var hash = hashContent && "".concat(hashContent.substring(0, 8), " ");
      return contextName + (hash || '') + name;
    }
    // PR: `repo-name: #42 title of pull request`
    if (type.includes('atlassian:SourceCodePullRequest')) {
      var pullRequest = jsonLd;
      var internalId = pullRequest['atlassian:internalId'];
      var internalIdRef = internalId && "#".concat(internalId, " ");
      return contextName + (internalIdRef || '') + name;
    }
    // BRANCH: `repo-name/branch-name`
    if (type.includes('atlassian:SourceCodeReference')) {
      return contextName + name;
    }

    // FILE: `repo-name: filepath`
    if (type.includes('schema:DigitalDocument')) {
      return contextName + name;
    }
  }
  if (removeTextHighlightingFromTitle) {
    var textFragmentRegex = new RegExp(' \\| :~:text=.*', 'g');
    var truncated = name === null || name === void 0 ? void 0 : name.replace(textFragmentRegex, '');
    return truncated;
  }
  return name;
};