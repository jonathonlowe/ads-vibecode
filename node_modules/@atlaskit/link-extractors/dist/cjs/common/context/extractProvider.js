"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConfluenceGenerator = exports.extractProviderIcon = exports.extractProvider = void 0;
var _react = _interopRequireDefault(require("react"));
var _confluenceIcon = require("@atlaskit/logo/confluence-icon");
var _jiraIcon = require("@atlaskit/logo/jira-icon");
var _constants = require("../constants");
var _url = require("../url");
/**
 * @deprecated Use extractSmartLinkProvider instead
 */
var extractProvider = exports.extractProvider = function extractProvider(jsonLd) {
  var generator = jsonLd.generator;
  if (generator) {
    if (typeof generator === 'string') {
      throw Error('Link.generator requires a name and icon.');
    } else if (generator['@type'] === 'Link') {
      if (generator.name) {
        return {
          text: generator.name
        };
      }
    } else {
      if (generator.name) {
        var id = generator['@id'];
        return {
          text: generator.name,
          icon: extractProviderIcon(generator.icon, id),
          id: id,
          image: extractProviderImage(generator.image)
        };
      }
    }
  }
};
var extractProviderIcon = exports.extractProviderIcon = function extractProviderIcon(icon, id) {
  if (id) {
    if (id === _constants.CONFLUENCE_GENERATOR_ID) {
      return /*#__PURE__*/_react.default.createElement(_confluenceIcon.ConfluenceIcon, {
        appearance: "brand",
        size: "xsmall"
      });
    } else if (id === _constants.JIRA_GENERATOR_ID) {
      return /*#__PURE__*/_react.default.createElement(_jiraIcon.JiraIcon, {
        appearance: "brand",
        size: "xsmall"
      });
    }
  }
  if (icon) {
    return (0, _url.extractUrlFromIconJsonLd)(icon);
  }
};
var extractProviderImage = function extractProviderImage(image) {
  if (image) {
    if (typeof image === 'string') {
      return image;
    } else if (image['@type'] === 'Link') {
      return (0, _url.extractUrlFromLinkJsonLd)(image);
    } else if (image['@type'] === 'Image') {
      if (image.url) {
        return (0, _url.extractUrlFromLinkJsonLd)(image.url);
      }
    }
  }
};
var isConfluenceGenerator = exports.isConfluenceGenerator = function isConfluenceGenerator(id) {
  return id === _constants.CONFLUENCE_GENERATOR_ID;
};