"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractEntityTitle = exports.extractEntityProvider = exports.extractEntityEmbedUrl = exports.extractEntity = void 0;
exports.instanceOfDesignEntity = instanceOfDesignEntity;
exports.isEntityPresent = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireDefault(require("react"));
var _confluenceIcon = require("@atlaskit/logo/confluence-icon");
var _jiraIcon = require("@atlaskit/logo/jira-icon");
var _constants = require("../common/constants");
var isEntityPresent = exports.isEntityPresent = function isEntityPresent(response) {
  return Boolean(response === null || response === void 0 ? void 0 : response.nounData);
};
var extractEntity = exports.extractEntity = function extractEntity(response) {
  return response === null || response === void 0 ? void 0 : response.nounData;
};
var extractEntityTitle = exports.extractEntityTitle = function extractEntityTitle(response) {
  var _extractEntity;
  return (_extractEntity = extractEntity(response)) === null || _extractEntity === void 0 ? void 0 : _extractEntity.displayName;
};
var extractEntityEmbedUrl = exports.extractEntityEmbedUrl = function extractEntityEmbedUrl(response) {
  var entity = extractEntity(response);
  if (entity && instanceOfDesignEntity(entity)) {
    return entity['atlassian:design'].liveEmbedUrl;
  }
};
function instanceOfDesignEntity(object) {
  return (0, _typeof2.default)(object) === 'object' && object !== null && 'atlassian:design' in object;
}
var extractEntityProvider = exports.extractEntityProvider = function extractEntityProvider(response) {
  var _response$meta;
  if (!(response !== null && response !== void 0 && (_response$meta = response.meta) !== null && _response$meta !== void 0 && _response$meta.generator)) {
    return undefined;
  }
  var _ref = response.meta.generator,
    icon = _ref.icon,
    id = _ref.id,
    image = _ref.image,
    name = _ref.name;
  if (!name || !icon) {
    throw Error('Link.generator requires a name and icon.');
  }
  var providerIcon;
  switch (id) {
    case _constants.CONFLUENCE_GENERATOR_ID:
      providerIcon = /*#__PURE__*/_react.default.createElement(_confluenceIcon.ConfluenceIcon, {
        appearance: "brand",
        size: "xsmall"
      });
      break;
    case _constants.JIRA_GENERATOR_ID:
      providerIcon = /*#__PURE__*/_react.default.createElement(_jiraIcon.JiraIcon, {
        appearance: "brand",
        size: "xsmall"
      });
      break;
    default:
      providerIcon = icon.url;
  }
  return {
    text: name,
    icon: providerIcon,
    id: id,
    image: image ? image : icon.url
  };
};