import { extractLink, extractProvider, extractTitle } from '../common';
import { extractPreview } from '../common/preview/extractPreview';
import { extractEntity, extractEntityEmbedUrl, extractEntityProvider, extractEntityTitle, instanceOfDesignEntity, isEntityPresent } from '../entity';
export const extractSmartLinkEmbed = (response, iframeUrlType) => {
  if (isEntityPresent(response)) {
    const embedUrl = extractEntityEmbedUrl(response);
    return embedUrl ? {
      src: embedUrl
    } : undefined;
  }
  return extractPreview(response === null || response === void 0 ? void 0 : response.data, 'web', iframeUrlType);
};
export const extractSmartLinkTitle = (response, removeTextHighlightingFromTitle) => {
  if (isEntityPresent(response)) {
    return extractEntityTitle(response);
  }
  return extractTitle(response === null || response === void 0 ? void 0 : response.data, removeTextHighlightingFromTitle);
};
export const extractSmartLinkUrl = response => {
  if (isEntityPresent(response)) {
    var _extractEntity;
    return (_extractEntity = extractEntity(response)) === null || _extractEntity === void 0 ? void 0 : _extractEntity.url;
  }
  return extractLink(response === null || response === void 0 ? void 0 : response.data);
};

/**
 * This funtions assumes that the response contains nounData.
 */
export const extractSmartLinkIcon = response => {
  const entity = extractEntity(response);
  let url;
  if (instanceOfDesignEntity(entity)) {
    url = entity === null || entity === void 0 ? void 0 : entity['atlassian:design'].iconUrl;
  }
  const label = extractEntityTitle(response);
  return {
    url,
    label
  };
};
export const extractSmartLinkProvider = response => {
  if (isEntityPresent(response)) {
    return extractEntityProvider(response);
  }
  return extractProvider(response === null || response === void 0 ? void 0 : response.data);
};