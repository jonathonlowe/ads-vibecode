import React from 'react';
import { PureComponent } from 'react';
import type { CreateUIAnalyticsEvent } from '@atlaskit/analytics-next';
import type { EmojiProvider } from '../../api/EmojiResource';
import { type EmojiDescription, type OnEmojiEvent } from '../../types';
export interface OnLifecycle {
    (): void;
}
export interface EmojiTypeAheadBaseProps {
    /**
     * Callback to be executed when user selects an emoji.
     */
    onSelection?: OnEmojiEvent;
    /**
     * Search query.
     */
    query?: string;
    /**
     * Number of results to be displayed in the search results list
     */
    listLimit?: number;
    /**
     * Callback to be executed when typeahead component is being shown
     */
    onOpen?: OnLifecycle;
    /**
     * Callback to be executed when typeahead component disappears
     */
    onClose?: OnLifecycle;
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
}
export interface Props extends EmojiTypeAheadBaseProps {
    /**
     * EmojiResource instance that handles fetching of emoji data.
     */
    emojiProvider: EmojiProvider;
}
export interface State {
    visible: boolean;
    emojis: EmojiDescription[];
    loading: boolean;
}
export default class EmojiTypeAheadComponent extends PureComponent<Props, State> {
    static defaultProps: {
        onSelection: () => void;
        onOpen: () => void;
        onClose: () => void;
        listLimit: number;
    };
    private emojiListRef;
    private openTime;
    private renderStartTime;
    private selectedTone;
    private pressed;
    private sessionId;
    private selected;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentDidUpdate(prevProps: Props): void;
    selectNext: () => void;
    selectPrevious: () => void;
    chooseCurrentSelection: () => void;
    count: () => number;
    getTone: (tone?: number) => string | undefined;
    private fireAnalyticsEvent;
    private onSearch;
    private onSearchResult;
    private fireSelectionEvent;
    private onProviderChange;
    private onEmojiListRef;
    render(): React.JSX.Element;
}
