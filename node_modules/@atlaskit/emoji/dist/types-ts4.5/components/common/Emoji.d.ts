/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { type EmojiDescription, type OnEmojiEvent } from '../../types';
export interface Props extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'onMouseMove' | 'onFocus'> {
    /**
     * The emoji to render
     */
    emoji: EmojiDescription;
    /**
     * Show the emoji as selected
     */
    selected?: boolean;
    /**
     * Automatically show the emoji as selected based on mouse hover.
     * CSS, fast, does not require a re-render, but selected state not
     * externally controlled via props.
     */
    selectOnHover?: boolean;
    /**
     * Called when an emoji is selected
     */
    onSelected?: OnEmojiEvent;
    /**
     * Called when the mouse moves over the emoji.
     */
    onMouseMove?: OnEmojiEvent;
    /**
     * Called when the mouse moves over the emoji.
     */
    onFocus?: OnEmojiEvent;
    /**
     * Called when an emoji is deleted
     */
    onDelete?: OnEmojiEvent;
    /**
     * Callback for if an emoji image fails to load.
     */
    onLoadError?: OnEmojiEvent<HTMLImageElement>;
    /**
     * Callback for if an emoji image succesfully loads.
     */
    onLoadSuccess?: (emoji: EmojiDescription) => void;
    /**
     * Additional css classes, if required.
     */
    className?: string;
    /**
     * Show a tooltip on mouse hover.
     */
    showTooltip?: boolean;
    /**
     * Show a delete button on mouse hover
     * Used only for custom emoji
     */
    showDelete?: boolean;
    /**
     * Fits emoji to height in pixels, keeping aspect ratio
     */
    fitToHeight?: number;
    /**
     * Indicates whether emoji is an interactive element (tab index and role) or just a view
     */
    shouldBeInteractive?: boolean;
    /**
     * Disables lazy load on images
     */
    disableLazyLoad?: boolean;
    /**
     * Auto Width takes the constraint of height and enables native scaling based on the emojis image.
     * This is primarily used when rendering emojis for SSR as the component does not know the width and height
     * at the time of the render. It overrides the emoji representations width with 'auto' on the images width attribute
     *
     * Used only for image based emojis
     */
    autoWidth?: boolean;
    /**
     * This should only be set when the emoji is being used in the Editor.
     * Currently when set -- this prevents any aria labels being added.
     * This is acceptable in Editor -- as it uses another technique to announce the emoji nodes.
     */
    editorEmoji?: true;
}
export declare const SpriteEmoji: (props: Props) => JSX.Element;
export declare const ImageEmoji: (props: Props) => JSX.Element;
interface EmojiNodeWrapperProps extends Props {
    type: 'sprite' | 'image';
}
export declare const EmojiNodeWrapper: React.ForwardRefExoticComponent<EmojiNodeWrapperProps & {
    children?: React.ReactNode;
} & React.RefAttributes<HTMLSpanElement>>;
export declare const Emoji: (props: Props) => JSX.Element;
export default Emoji;
