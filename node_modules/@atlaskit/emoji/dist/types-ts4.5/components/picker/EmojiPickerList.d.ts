import React, { PureComponent } from 'react';
import type { EmojiDescription, EmojiDescriptionWithVariations, Message, OnCategory, OnEmojiEvent, OnToneSelected, OnToneSelectorCancelled, PickerSize, ToneSelection, User } from '../../types';
import { type CategoryId } from './categories';
import type { OnUploadEmoji } from '../common/EmojiUploadPicker';
import type { OnDeleteEmoji } from '../common/EmojiDeletePreview';
/**
 * Test id for wrapper Emoji Picker List div
 */
export declare const RENDER_EMOJI_PICKER_LIST_TESTID = "render-emoji-picker-list";
export interface OnSearch {
    (query: string): void;
}
export interface Props {
    emojis: EmojiDescription[];
    currentUser?: User;
    onEmojiSelected?: OnEmojiEvent;
    onEmojiActive?: OnEmojiEvent;
    onEmojiDelete?: OnEmojiEvent;
    onCategoryActivated?: OnCategory;
    selectedTone?: ToneSelection;
    onSearch?: OnSearch;
    loading?: boolean;
    query?: string;
    initialUploadName?: string;
    onToneSelected?: OnToneSelected;
    onToneSelectorCancelled?: OnToneSelectorCancelled;
    toneEmoji?: EmojiDescriptionWithVariations;
    uploading: boolean;
    emojiToDelete?: EmojiDescription;
    uploadErrorMessage?: Message;
    uploadEnabled: boolean;
    onUploadEmoji: OnUploadEmoji;
    onUploadCancelled: () => void;
    onDeleteEmoji: OnDeleteEmoji;
    onCloseDelete: () => void;
    onFileChooserClicked?: () => void;
    onOpenUpload: () => void;
    size?: PickerSize;
    activeCategoryId?: CategoryId | null;
}
export interface State {
}
export type PickerListRef = {
    reveal: (category: CategoryId) => void;
    scrollToBottom: () => void;
    scrollToTop: () => void;
    scrollToRow: (index?: number) => void;
    scrollToRecentlyUploaded: (uploadedEmoji: EmojiDescription) => void;
};
export declare class EmojiPickerVirtualListInternalOld extends PureComponent<Props, State> {
    static defaultProps: {
        onEmojiSelected: () => void;
        onEmojiActive: () => void;
        onEmojiDelete: () => void;
        onCategoryActivated: () => void;
        onSearch: () => void;
        size: string;
    };
    private allEmojiGroups;
    private virtualItems;
    private categoryTracker;
    private lastYourUploadsRow;
    private listRef;
    constructor(props: Props);
    UNSAFE_componentWillUpdate(nextProps: Props, nextState: State): void;
    private onEmojiActive;
    private onSearch;
    private findEmojiRowAndColumnById;
    /**
     * Scrolls to a category in the list view
     */
    reveal(category: CategoryId): void;
    scrollToBottom(): void;
    scrollToTop(): void;
    scrollToRow(index?: number): void;
    scrollToRecentlyUploaded(uploadedEmoji: EmojiDescription): void;
    private buildVirtualItemFromGroup;
    private buildVirtualItems;
    private addToCategoryMap;
    private groupByCategory;
    private buildEmojiGroupedByCategory;
    private findCategoryToActivate;
    /**
     * onRowsRendered callback function
     *
     * Check the category of top of rendered row and inform category selector to change active category
     * Rove index of emoji picker list
     */
    private onRowsRendered;
    private rowSize;
    private renderRow;
    /**
     * After deleting emoji, we'll update the focus index to the first emoji of last row of your uploads, so when user navigate back focus will still work
     * if last emoji in your uploads is deleted, the updated focus index will be outdated, as there will be no your uploads section
     * however, it'll trigger onChange from VirtualList, which will update focus index automatically for us
     */
    private handleOnCloseDelete;
    render(): React.JSX.Element;
}
export declare const EmojiPickerVirtualListInternalNew: React.ForwardRefExoticComponent<Props & React.RefAttributes<PickerListRef>>;
