import React, { useMemo, useEffect } from 'react';
import { EmojiContext } from './EmojiContext';
import debug from '../util/logger';
export const EmojiContextProvider = ({
  children,
  emojiContextValue
}) => {
  const memoizedEmojiContextValue = useMemo(() => emojiContextValue, [emojiContextValue]);
  useEffect(() => {
    // trigger emoji fetching
    async function fetchEmojiProvider() {
      try {
        await (memoizedEmojiContextValue === null || memoizedEmojiContextValue === void 0 ? void 0 : memoizedEmojiContextValue.emoji.emojiProvider.fetchEmojiProvider());
      } catch (error) {
        debug('fetchEmojiProvider error catched from outside', error);
      }
    }
    if (memoizedEmojiContextValue !== null && memoizedEmojiContextValue !== void 0 && memoizedEmojiContextValue.emoji.emojiProvider.onlyFetchOnDemand) {
      const isFetchingOnDemand = memoizedEmojiContextValue === null || memoizedEmojiContextValue === void 0 ? void 0 : memoizedEmojiContextValue.emoji.emojiProvider.onlyFetchOnDemand();
      if (!isFetchingOnDemand) {
        fetchEmojiProvider();
      }
    } else {
      fetchEmojiProvider();
    }
  }, [memoizedEmojiContextValue]);
  return /*#__PURE__*/React.createElement(EmojiContext.Provider, {
    value: memoizedEmojiContextValue
  }, children);
};