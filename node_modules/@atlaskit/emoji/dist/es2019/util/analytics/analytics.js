import { createAndFireEvent } from '@atlaskit/analytics-next';
import { SearchSourceTypes } from '../../types';
export const createAndFireEventInElementsChannel = createAndFireEvent('fabric-elements');
const createEvent = (eventType, action, actionSubject, actionSubjectId, attributes = {}) => ({
  eventType,
  action,
  actionSubject,
  actionSubjectId,
  attributes: {
    packageName: "@atlaskit/emoji",
    packageVersion: "69.1.0",
    ...attributes
  }
});
export const recordSucceededEmoji = emoji => source => {
  return createEvent('operational', 'succeeded', 'recordEmojiSelection', undefined, {
    source,
    emojiId: emoji === null || emoji === void 0 ? void 0 : emoji.id,
    emojiType: emoji === null || emoji === void 0 ? void 0 : emoji.type,
    emojiCategory: emoji === null || emoji === void 0 ? void 0 : emoji.category
  });
};
export const recordSucceeded = source => {
  return createEvent('operational', 'succeeded', 'recordEmojiSelection', undefined, {
    source
  });
};
export const recordFailedEmoji = emoji => source => {
  return createEvent('operational', 'failed', 'recordEmojiSelection', undefined, {
    source,
    emojiId: emoji === null || emoji === void 0 ? void 0 : emoji.id,
    emojiType: emoji === null || emoji === void 0 ? void 0 : emoji.type,
    emojiCategory: emoji === null || emoji === void 0 ? void 0 : emoji.category
  });
};
export const recordFailed = source => {
  return createEvent('operational', 'failed', 'recordEmojiSelection', undefined, {
    source
  });
};
const emojiPickerEvent = (action, attributes = {}, actionSubjectId) => createEvent('ui', action, 'emojiPicker', actionSubjectId, attributes);
export const openedPickerEvent = () => emojiPickerEvent('opened');
export const closedPickerEvent = attributes => emojiPickerEvent('closed', attributes);
const skinTones = [{
  id: '-1f3fb',
  skinToneModifier: 'light'
}, {
  id: '-1f3fc',
  skinToneModifier: 'mediumLight'
}, {
  id: '-1f3fd',
  skinToneModifier: 'medium'
}, {
  id: '-1f3fe',
  skinToneModifier: 'mediumDark'
}, {
  id: '-1f3ff',
  skinToneModifier: 'dark'
}];
const getSkinTone = emojiId => {
  if (!emojiId) {
    return {};
  }
  for (const {
    id,
    skinToneModifier
  } of skinTones) {
    if (emojiId.indexOf(id) !== -1) {
      return {
        skinToneModifier,
        baseEmojiId: emojiId.replace(id, '')
      };
    }
  }
  return {};
};
export const pickerClickedEvent = attributes => emojiPickerEvent('clicked', {
  ...getSkinTone(attributes.emojiId),
  ...attributes
}, 'emoji');
export const categoryClickedEvent = attributes => emojiPickerEvent('clicked', attributes, 'category');
export const pickerSearchedEvent = attributes => emojiPickerEvent('searched', attributes, 'query');
const skintoneSelectorEvent = (action, attributes = {}) => createEvent('ui', action, 'emojiSkintoneSelector', undefined, attributes);
export const toneSelectedEvent = attributes => skintoneSelectorEvent('clicked', attributes);
export const toneSelectorOpenedEvent = attributes => skintoneSelectorEvent('opened', attributes);
export const toneSelectorClosedEvent = () => skintoneSelectorEvent('cancelled');
const emojiUploaderEvent = (action, actionSubjectId, attributes) => createEvent('ui', action, 'emojiUploader', actionSubjectId, attributes);
export const uploadBeginButton = () => emojiUploaderEvent('clicked', 'addButton');
export const uploadConfirmButton = attributes => emojiUploaderEvent('clicked', 'confirmButton', attributes);
export const uploadCancelButton = () => emojiUploaderEvent('clicked', 'cancelButton');
export const uploadSucceededEvent = attributes => createEvent('operational', 'finished', 'emojiUploader', undefined, attributes);
export const uploadFailedEvent = attributes => createEvent('operational', 'failed', 'emojiUploader', undefined, attributes);
export const deleteBeginEvent = attributes => createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiTrigger', attributes);
export const deleteConfirmEvent = attributes => createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiConfirm', attributes);
export const deleteCancelEvent = attributes => createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiCancel', attributes);
export const selectedFileEvent = () => createEvent('ui', 'clicked', 'emojiUploader', 'selectFile');
const extractCommonAttributes = (query, emojiList) => {
  return {
    queryLength: query ? query.length : 0,
    spaceInQuery: query ? query.indexOf(' ') !== -1 : false,
    emojiIds: emojiList ? emojiList.map(emoji => emoji.id).filter(Boolean).slice(0, 20) : []
  };
};
export const typeaheadCancelledEvent = (duration, query, emojiList) => createEvent('ui', 'cancelled', 'emojiTypeahead', undefined, {
  duration,
  ...extractCommonAttributes(query, emojiList)
});
const getPosition = (emojiList, selectedEmoji) => {
  if (emojiList) {
    const index = emojiList.findIndex(emoji => emoji.id === selectedEmoji.id);
    return index === -1 ? undefined : index;
  }
  return;
};
export const typeaheadSelectedEvent = (pressed, duration, emoji, emojiList, query, exactMatch) => createEvent('ui', pressed ? 'pressed' : 'clicked', 'emojiTypeahead', undefined, {
  duration,
  position: getPosition(emojiList, emoji),
  ...extractCommonAttributes(query, emojiList),
  ...getSkinTone(emoji.id),
  emojiType: emoji.type,
  exactMatch: exactMatch || false
});
export const typeaheadRenderedEvent = (duration, query, emojiList) => createEvent('operational', 'rendered', 'emojiTypeahead', undefined, {
  duration,
  ...extractCommonAttributes(query, emojiList)
});

// it's used in editor typeahead to fire success record analytics
export const recordSelectionSucceededSli = (emoji, options) => () => {
  if (options && options.createAnalyticsEvent) {
    createAndFireEvent('editor')(recordSucceededEmoji(emoji)(SearchSourceTypes.TYPEAHEAD))(options.createAnalyticsEvent);
  }
};

// it's used in editor typeahead to fire failure record analytics
export const recordSelectionFailedSli = (emoji, options) => err => {
  if (options && options.createAnalyticsEvent) {
    createAndFireEvent('editor')(recordFailedEmoji(emoji)(SearchSourceTypes.TYPEAHEAD))(options.createAnalyticsEvent);
  }
  return Promise.reject(err);
};

/**
 * Used for store failure metadata for analytics
 * @param error The error could be a service error with {code, reason} or an Error
 * @returns any
 */
export const extractErrorInfo = error => {
  if (error instanceof Error) {
    return {
      name: error.name,
      message: error.message
    };
  }
  return error;
};