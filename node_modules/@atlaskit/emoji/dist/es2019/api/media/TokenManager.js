import { utils as serviceUtils } from '@atlaskit/util-service-support';

// expire 30 seconds early to factor in latency, slow services, etc
export const EXPIRES_AT_LATENCY_IN_SECONDS = 30;
export default class TokenManager {
  constructor(siteServiceConfig) {
    this.siteServiceConfig = siteServiceConfig;
    this.tokens = new Map();
  }
  isValidToken(mediaApiToken) {
    const nowInSeconds = Date.now() / 1000;
    const expiresAt = mediaApiToken.expiresAt - EXPIRES_AT_LATENCY_IN_SECONDS;
    if (nowInSeconds < expiresAt) {
      return true;
    }
    return false;
  }
  fetchNewToken(type) {
    return serviceUtils.requestService(this.siteServiceConfig, {
      path: `token/${type}`
    });
  }
  addToken(type, mediaApiToken) {
    this.tokens.set(type, {
      mediaApiToken
    });
  }
  getToken(type, forceRefresh) {
    let tokenDetail = this.tokens.get(type);
    if (!tokenDetail) {
      tokenDetail = {};
      this.tokens.set(type, tokenDetail);
    }
    const {
      mediaApiToken,
      activeTokenRefresh
    } = tokenDetail;
    if (mediaApiToken) {
      if (this.isValidToken(mediaApiToken) && !forceRefresh) {
        // still valid
        return Promise.resolve(mediaApiToken);
      }
    }
    if (activeTokenRefresh) {
      // refresh token promise already active, return that
      return activeTokenRefresh;
    }

    // request a new token and track the promise for future requests until completed
    tokenDetail.activeTokenRefresh = this.fetchNewToken(type).then(token => {
      tokenDetail.mediaApiToken = token;
      tokenDetail.activeTokenRefresh = undefined;
      return token;
    });
    return tokenDetail.activeTokenRefresh;
  }
}