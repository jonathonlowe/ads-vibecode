/* EmojiUploadComponent.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./EmojiUploadComponent.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useState, memo, useEffect } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { supportsUploadFeature } from '../../api/EmojiResource';
import EmojiUploadPickerWithIntl from '../common/EmojiUploadPicker';
import { uploadEmoji } from '../common/UploadEmoji';
import { createAndFireEventInElementsChannel, selectedFileEvent, uploadCancelButton, uploadConfirmButton } from '../../util/analytics';
import { ufoExperiences } from '../../util/analytics/ufoExperiences';
import { messages } from '../i18n';
const emojiPickerWidth = 350;
const emojiUploadWidget = null;
const emojiUploadFooter = null;
const EmojiUploadComponent = props => {
  const {
    emojiProvider,
    createAnalyticsEvent,
    onUploaderRef
  } = props;
  const [uploadErrorMessage, setUploadErrorMessage] = useState();
  useEffect(() => {
    if (supportsUploadFeature(emojiProvider)) {
      emojiProvider.prepareForUpload();
    }
  }, [emojiProvider]);
  useEffect(() => () => {
    ufoExperiences['emoji-uploaded'].abort({
      metadata: {
        source: 'EmojiUploadComponent',
        reason: 'unmount'
      }
    });
  }, []);
  const onUploadEmoji = async (upload, retry, onSuccessHandler) => {
    ufoExperiences['emoji-uploaded'].start();
    ufoExperiences['emoji-uploaded'].addMetadata({
      retry
    });
    if (supportsUploadFeature(emojiProvider)) {
      fireAnalytics(uploadConfirmButton({
        retry
      }));
      try {
        await emojiProvider.prepareForUpload();
        const errorSetter = message => {
          setUploadErrorMessage(message);
        };
        // internally handled error from upload callback
        uploadEmoji(upload, emojiProvider, errorSetter, onUploaded(onSuccessHandler), fireAnalytics, retry);
      } catch (error) {
        // error from upload token generation
        const message = error instanceof Error ? error.message : 'Issue with generating upload token';
        ufoExperiences['emoji-uploaded'].failure({
          metadata: {
            source: 'EmojiUploadComponent',
            error: message
          }
        });
        setUploadErrorMessage(messages.emojiUploadFailed);
      }
    }
  };
  const onUploaded = onSuccessHandler => () => {
    setUploadErrorMessage(undefined);
    if (onSuccessHandler) {
      onSuccessHandler();
    }
  };
  const onFileChooserClicked = () => {
    fireAnalytics(selectedFileEvent());
  };
  const onUploadCancelled = () => {
    fireAnalytics(uploadCancelButton());
    onUploaded();
  };
  const fireAnalytics = analyticsEvent => {
    if (createAnalyticsEvent) {
      createAndFireEventInElementsChannel(analyticsEvent)(createAnalyticsEvent);
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    ref: onUploaderRef,
    className: ax(["_1e0c1txw _2lx21bp4 _1bah1h6o _4cvr1fhb _bfhk1bhr _4t3i68cl _1bsb1edt _1ul91edt _19pkmgjw _18u0xmi2 _otyrxmi2 _2hwxxmi2"])
  }, /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug"])
  }, /*#__PURE__*/React.createElement(EmojiUploadPickerWithIntl, {
    onFileChooserClicked: onFileChooserClicked,
    onUploadCancelled: onUploadCancelled,
    onUploadEmoji: onUploadEmoji,
    errorMessage: uploadErrorMessage ? /*#__PURE__*/React.createElement(FormattedMessage, uploadErrorMessage) : null
  })));
};
export default /*#__PURE__*/memo(EmojiUploadComponent);