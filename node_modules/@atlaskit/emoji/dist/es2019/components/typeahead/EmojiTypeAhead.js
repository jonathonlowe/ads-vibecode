import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import debug from '../../util/logger';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import Popup from '../common/Popup';
const emojiTypeAheadModuleLoader = () => import( /* webpackChunkName:"@atlaskit-internal_emojiTypeAheadComponent" */'./EmojiTypeAheadComponent');
const emojiTypeAheadComponentLoader = () => emojiTypeAheadModuleLoader().then(module => module.default);
export default class EmojiTypeahead extends LoadingEmojiComponent {
  constructor(props) {
    super(props, {});
    // state initialised with static component to prevent
    // rerender when the module has already been loaded
    _defineProperty(this, "state", {
      asyncLoadedComponent: EmojiTypeahead.AsyncLoadedComponent
    });
    _defineProperty(this, "selectNext", () => {
      if (this.refs.typeAhead) {
        this.refs.typeAhead.selectNext();
      }
    });
    _defineProperty(this, "selectPrevious", () => {
      if (this.refs.typeAhead) {
        this.refs.typeAhead.selectPrevious();
      }
    });
    _defineProperty(this, "chooseCurrentSelection", () => {
      if (this.refs.typeAhead) {
        this.refs.typeAhead.chooseCurrentSelection();
      }
    });
    _defineProperty(this, "count", () => {
      if (this.refs.typeAhead) {
        return this.refs.typeAhead.count();
      }
      return 0;
    });
  }
  asyncLoadComponent() {
    emojiTypeAheadComponentLoader().then(component => {
      EmojiTypeahead.AsyncLoadedComponent = component;
      this.setAsyncState(component);
    });
  }
  renderLoaded(loadedEmojiProvider, TypeAheadComponent) {
    const {
      emojiProvider,
      target,
      position,
      zIndex,
      offsetX,
      offsetY,
      ...otherProps
    } = this.props;
    const typeAhead = /*#__PURE__*/React.createElement(TypeAheadComponent, _extends({}, otherProps, {
      emojiProvider: loadedEmojiProvider,
      ref: "typeAhead"
    }));
    if (position) {
      debug('target, position', target, position);
      if (target) {
        return /*#__PURE__*/React.createElement(Popup, {
          target: target,
          relativePosition: position,
          zIndex: zIndex,
          offsetX: offsetX,
          offsetY: offsetY,
          children: typeAhead
        });
      }
      // don't show if we have a position, but no target yet
      return null;
    }
    return typeAhead;
  }
}