import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { Component } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
/**
 * A base class for components that don't want to start rendering
 * until the EmojiProvider is resolved.
 * Notes: super.componentDidMount and super.componentWillUnmount will need to be
 * called explicitly if they are overridden on the child class.
 */
export default class LoadingEmojiComponent extends Component {
  constructor(props, _state) {
    super(props);
    _defineProperty(this, "isUnmounted", false);
    _defineProperty(this, "loaded", state => !!state.asyncLoadedComponent && !!state.loadedEmojiProvider);
    this.state = _state;

    // initializing here instead of componentDidMount to avoid needless
    // rerendering if emojiProvider resolves immediately.
    this.loadEmojiProvider(this.props.emojiProvider);
  }
  componentDidMount() {
    // check for the module has not yet been loaded
    // state.asyncLoadedComponent should be initialised
    // with static field to prevent unnecessary rerender
    if (!this.state.asyncLoadedComponent) {
      this.asyncLoadComponent();
    }
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    if (!fg('platform_editor_react18_elements_emoji') || !fg('platform_editor_react18_elements_emoji_jira_bb')) {
      this.loadEmojiProvider(nextProps.emojiProvider);
    }
  }
  componentDidUpdate(prevProps) {
    if (fg('platform_editor_react18_elements_emoji') || fg('platform_editor_react18_elements_emoji_jira_bb')) {
      if (this.props !== prevProps) {
        this.loadEmojiProvider(this.props.emojiProvider);
      }
    }
  }
  componentWillUnmount() {
    this.isUnmounted = true;
  }
  loadEmojiProvider(futureEmojiProvider) {
    futureEmojiProvider.then(loadedEmojiProvider => {
      if (!this.isUnmounted) {
        this.setState({
          loadedEmojiProvider
        });
      }
    }).catch(() => {
      if (!this.isUnmounted) {
        this.setState({
          loadedEmojiProvider: undefined
        });
      }
    });
  }
  setAsyncState(asyncLoadedComponent) {
    if (!this.isUnmounted) {
      this.setState({
        asyncLoadedComponent
      });
    }
  }
  renderLoading() {
    return null;
  }
  render() {
    if (this.loaded(this.state)) {
      const {
        loadedEmojiProvider,
        asyncLoadedComponent
      } = this.state;
      return this.renderLoaded(loadedEmojiProvider, asyncLoadedComponent);
    }
    return this.renderLoading();
  }
}