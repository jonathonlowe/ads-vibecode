/* RetryableButton.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./RetryableButton.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { FormattedMessage } from 'react-intl-next';
import AkButton from '@atlaskit/button/new';
import Spinner from '@atlaskit/spinner';
import { Box } from '@atlaskit/primitives/compiled';
import { messages } from '../i18n';
const buttonSpinner = null;
export const retryUploadButtonTestId = 'retry-upload-button';
export const uploadEmojiButtonTestId = 'upload-emoji-button';
const LoadingSpinner = () => {
  return /*#__PURE__*/React.createElement("span", {
    className: ax(["_2hwx19bv _18u019bv"])
  }, /*#__PURE__*/React.createElement(Spinner, null));
};
const RetryButton = props => {
  const {
    onSubmit,
    ariaLabelledBy,
    ariaDescribedBy
  } = props;
  return /*#__PURE__*/React.createElement(FormattedMessage, messages.retryLabel, retryLabel => /*#__PURE__*/React.createElement(Box, {
    paddingInlineEnd: "space.050"
  }, /*#__PURE__*/React.createElement(AkButton, {
    appearance: "warning",
    onClick: onSubmit,
    testId: retryUploadButtonTestId,
    "aria-describedby": ariaDescribedBy,
    "aria-labelledby": ariaLabelledBy,
    autoFocus: true
  }, retryLabel)));
};
const UploadButton = props => {
  const {
    appearance,
    onSubmit,
    label,
    ariaLabelledBy,
    ariaDescribedBy
  } = props;
  return /*#__PURE__*/React.createElement(Box, {
    paddingInlineEnd: "space.050"
  }, /*#__PURE__*/React.createElement(AkButton, {
    appearance: appearance,
    onClick: onSubmit,
    testId: uploadEmojiButtonTestId,
    "aria-describedby": ariaDescribedBy,
    "aria-labelledby": ariaLabelledBy,
    autoFocus: true
  }, label));
};
const RetryableButton = props => {
  const {
    loading,
    error
  } = props;
  if (loading) {
    return /*#__PURE__*/React.createElement(LoadingSpinner, null);
  }
  if (error) {
    return /*#__PURE__*/React.createElement(RetryButton, props);
  }
  return /*#__PURE__*/React.createElement(UploadButton, props);
};
export default RetryableButton;