/* EmojiDeletePreview.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./EmojiDeletePreview.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Component } from 'react';
import { N300 } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import AkButton from '@atlaskit/button/new';
import Heading from '@atlaskit/heading';
import FocusLock from 'react-focus-lock';
import { messages } from '../i18n';
import CachingEmoji from './CachingEmoji';
import EmojiErrorMessage, { emojiErrorScreenreaderTestId } from './EmojiErrorMessage';
import RetryableButton from './RetryableButton';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { fg } from '@atlaskit/platform-feature-flags';
const deleteFooter = null;
const deletePreview = null;
const deleteText = null;
const previewButtonGroup = null;
export const emojiDeletePreviewTestId = 'emoji-delete-preview';
const deleteEmojiLabelId = 'fabric.emoji.delete.label.id';
class EmojiDeletePreview extends Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "onSubmit", () => {
      const {
        emoji,
        onDeleteEmoji,
        onCloseDelete
      } = this.props;
      if (!this.state.loading) {
        this.setState({
          loading: true
        });
        onDeleteEmoji(emoji).then(success => {
          if (success) {
            onCloseDelete();
            return;
          }
          this.setState({
            loading: false,
            error: true
          });
        });
      }
    });
    _defineProperty(this, "onCancel", () => {
      this.props.onCloseDelete();
    });
    this.state = {
      loading: false,
      error: false
    };
  }
  UNSAFE_componentWillUpdate(nextProps) {
    if (!fg('platform_editor_react18_elements_emoji') || !fg('platform_editor_react18_elements_emoji_jira_bb')) {
      if (nextProps.emoji.id !== this.props.emoji.id) {
        this.setState({
          error: false
        });
      }
    }
  }
  componentDidUpdate(prevProps) {
    if (fg('platform_editor_react18_elements_emoji') || fg('platform_editor_react18_elements_emoji_jira_bb')) {
      if (prevProps.emoji.id !== this.props.emoji.id) {
        this.setState({
          error: false
        });
      }
    }
  }
  render() {
    const {
      emoji,
      intl
    } = this.props;
    const {
      loading,
      error
    } = this.state;
    const {
      formatMessage
    } = intl;
    return /*#__PURE__*/React.createElement(FocusLock, {
      noFocusGuards: true
    }, /*#__PURE__*/React.createElement("div", {
      "data-testid": emojiDeletePreviewTestId,
      className: ax(["_ca0q19bv _u5f319bv _n3td19bv _19bv19bv _4t3i53f4 _1e0c1txw _2lx21bp4 _1bahesu3"])
    }, /*#__PURE__*/React.createElement("div", {
      className: ax(["_11c8dcr7 _4t3ivbgk _pnmb1n3s _jwwg7vkz"])
    }, /*#__PURE__*/React.createElement(Heading, {
      size: "xxsmall"
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.deleteEmojiTitle)), /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.deleteEmojiDescription, {
      values: {
        emojiShortName: emoji.shortName
      }
    }))), /*#__PURE__*/React.createElement("div", {
      className: ax(["_11c82smr _1e0c1txw _4t3i1ylp _4cvr1h6o _1bah1yb4 _19l3zwfg _rtyst9kd _m73io7ol _1txf1igg _1qz31b66"])
    }, /*#__PURE__*/React.createElement(CachingEmoji, {
      emoji: emoji
    }), /*#__PURE__*/React.createElement("div", {
      className: ax(["_1e0c1txw"])
    }, error ? !loading ? /*#__PURE__*/React.createElement(EmojiErrorMessage, {
      message: formatMessage(messages.deleteEmojiFailed),
      errorStyle: "delete",
      tooltip: true
    }) : null : null, /*#__PURE__*/React.createElement(VisuallyHidden, {
      id: deleteEmojiLabelId
    }, formatMessage(messages.deleteEmojiLabel)), /*#__PURE__*/React.createElement(RetryableButton, {
      label: formatMessage(messages.deleteEmojiLabel),
      onSubmit: this.onSubmit,
      appearance: "danger",
      loading: loading,
      error: error,
      ariaLabelledBy: `${emojiErrorScreenreaderTestId} ${deleteEmojiLabelId}`
    }), /*#__PURE__*/React.createElement(AkButton, {
      appearance: "subtle",
      onClick: this.onCancel
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.cancelLabel))))));
  }
}
export default injectIntl(EmojiDeletePreview);