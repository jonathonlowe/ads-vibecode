/* Scrollable.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./Scrollable.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
// FIXME - FAB-1732 looking at making a shared component for this

import { PureComponent } from 'react';
const emojiScrollable = null;
export default class Scrollable extends PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "scrollableDiv", null);
    // API
    _defineProperty(this, "reveal", (child, forceToTop) => {
      if (child && this.scrollableDiv) {
        // Not using Element.scrollIntoView as it scrolls even to top/bottom of view even if
        // already visible
        const scrollableRect = this.scrollableDiv.getBoundingClientRect();
        const elementRect = child.getBoundingClientRect();
        if (forceToTop || elementRect.top < scrollableRect.top) {
          this.scrollableDiv.scrollTop += elementRect.top - scrollableRect.top;
        } else if (elementRect.bottom > scrollableRect.bottom) {
          this.scrollableDiv.scrollTop += elementRect.bottom - scrollableRect.bottom;
        }
      }
    });
    _defineProperty(this, "scrollToBottom", () => {
      if (this.scrollableDiv) {
        this.scrollableDiv.scrollTop = this.scrollableDiv.scrollHeight;
      }
    });
    _defineProperty(this, "handleScroll", event => {
      const sampleOffset = 10;
      let firstElement;
      if (this.scrollableDiv) {
        const scrollableRect = this.scrollableDiv.getBoundingClientRect();
        firstElement = document.elementFromPoint(scrollableRect.left + sampleOffset, scrollableRect.top + sampleOffset);
      }
      if (this.props.onScroll && firstElement) {
        this.props.onScroll(firstElement, event);
      }
    });
    _defineProperty(this, "handleRef", ref => {
      this.scrollableDiv = ref;
    });
  }
  render() {
    const {
      children,
      className,
      maxHeight,
      onMouseLeave
    } = this.props;
    const style = maxHeight ? {
      maxHeight
    } : {};
    return /*#__PURE__*/React.createElement("div", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: ax(["_19it1l1c _2rkosqtm _19pkidpf _2hwxidpf _otyridpf _18u0idpf _ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _1e0c1ule _1reo15vq _18m91wug", `emoji-scrollable ${className}`]),
      onMouseLeave: onMouseLeave,
      onScroll: this.handleScroll,
      ref: this.handleRef
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: style
    }, children);
  }
}