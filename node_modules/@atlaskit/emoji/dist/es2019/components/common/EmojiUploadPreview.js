/* EmojiUploadPreview.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./EmojiUploadPreview.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { PureComponent } from 'react';
import { N20, N300 } from '@atlaskit/theme/colors';
import AkButton from '@atlaskit/button/standard-button';
import Heading from '@atlaskit/heading';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import { customCategory } from '../../util/constants';
import { messages } from '../i18n';
import Emoji from './Emoji';
import EmojiErrorMessage from './EmojiErrorMessage';
import { UploadStatus } from './internal-types';
import RetryableButton from './RetryableButton';
const bigEmojiPreview = null;
const uploadAddRow = null;
const uploadPreview = null;
const uploadPreviewFooter = null;
const uploadPreviewText = null;
export const uploadPreviewTestId = 'upload-preview';
export const cancelUploadButtonTestId = 'cancel-upload-button';
const addEmojiPreviewDescriptionId = 'fabric.emoji.preview.description.id';
class EmojiUploadPreview extends PureComponent {
  render() {
    const {
      name,
      previewImage,
      uploadStatus,
      errorMessage,
      onAddEmoji,
      onUploadCancelled,
      intl
    } = this.props;
    const {
      formatMessage
    } = intl;
    let emojiComponent;
    if (previewImage) {
      const emoji = {
        shortName: `:${name}:`,
        type: customCategory,
        category: customCategory,
        representation: {
          imagePath: previewImage,
          width: 24,
          height: 24
        },
        searchable: true
      };
      emojiComponent = /*#__PURE__*/React.createElement(Emoji, {
        emoji: emoji
      });
    }
    const uploading = uploadStatus === UploadStatus.Uploading;
    const retryableButtonLabel = errorMessage ? formatMessage(messages.retryLabel) : formatMessage(messages.addEmojiLabel);
    return /*#__PURE__*/React.createElement("div", {
      className: ax(["_ca0q19bv _u5f319bv _n3td19bv _19bv19bv _1e0c1txw _2lx21bp4 _4t3i53f4"])
    }, /*#__PURE__*/React.createElement("div", {
      "data-testid": uploadPreviewTestId,
      className: ax(["_2rkosqtm _ca0q19bv _u5f319bv _n3td19bv _19bv19bv _1e0c1txw _1bah1yb4 _4cvr1h6o _bfhk1s4m"])
    }, /*#__PURE__*/React.createElement("div", {
      className: ax(["_1fztdcr7 _jl6w1n3s _avw21b66 _19l3gktf _rtys12am"])
    }, /*#__PURE__*/React.createElement(Heading, {
      size: "xsmall"
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.emojiPreviewTitle)), /*#__PURE__*/React.createElement("div", {
      id: addEmojiPreviewDescriptionId
    }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.emojiPreview, {
      values: {
        emoji: emojiComponent
      }
    })))), /*#__PURE__*/React.createElement("div", {
      className: ax(["_19bv1b66 _19l31ylp _rtys53f4"])
    }, emojiComponent)), /*#__PURE__*/React.createElement("div", {
      className: ax(["_1e0c1txw _1bahesu3 _4cvr1h6o _ca0q19bv"])
    }, !uploading && errorMessage ? /*#__PURE__*/React.createElement(EmojiErrorMessage, {
      errorStyle: "preview",
      message: errorMessage,
      tooltip: true
    }) : null, /*#__PURE__*/React.createElement(RetryableButton, {
      label: retryableButtonLabel,
      onSubmit: onAddEmoji,
      appearance: "primary",
      loading: uploading,
      error: !!errorMessage,
      ariaDescribedBy: addEmojiPreviewDescriptionId
    }), /*#__PURE__*/React.createElement(AkButton, {
      onClick: onUploadCancelled,
      appearance: "subtle",
      isDisabled: uploading,
      testId: cancelUploadButtonTestId
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.cancelLabel))));
  }
}
export default injectIntl(EmojiUploadPreview);