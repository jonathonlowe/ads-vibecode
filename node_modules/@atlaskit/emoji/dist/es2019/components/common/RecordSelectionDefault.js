import { recordFailedEmoji, recordSucceededEmoji, ufoExperiences } from '../../util/analytics';
import { extractErrorInfo } from '../../util/analytics/analytics';

/**
 * A function that will wrap any configured Emoji 'onSelection' function to ensure recordSelection is always
 * called.
 *
 * @param provider the EmojiProvider which will be called on each emoji selection
 * @param onSelect the onSelect function that is explicitly configured on the Emoji component.
 * @param fireAnalytics a function used to fire analytics events.
 */
export const createRecordSelectionDefault = (provider, onSelect, fireAnalytics) => {
  return (emojiId, emoji, event) => {
    try {
      if (provider.recordSelection && emoji) {
        ufoExperiences['emoji-selection-recorded'].start();
        provider.recordSelection(emoji).then(() => {
          fireAnalytics && fireAnalytics(recordSucceededEmoji(emoji));
          ufoExperiences['emoji-selection-recorded'].success();
        }).catch(error => {
          fireAnalytics && fireAnalytics(recordFailedEmoji(emoji));
          ufoExperiences['emoji-selection-recorded'].failure({
            metadata: {
              error: extractErrorInfo(error),
              reason: 'recordSelection error',
              source: 'RecordSelectionDefault',
              emojiId: emoji.id
            }
          });
        });
      }
    } finally {
      if (onSelect) {
        onSelect(emojiId, emoji, event);
      }
    }
  };
};