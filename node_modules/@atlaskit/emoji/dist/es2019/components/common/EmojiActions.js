/* EmojiActions.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./EmojiActions.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment, useState, useRef, memo, useLayoutEffect, useCallback } from 'react';
import { N30A } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import EmojiDeletePreview from './EmojiDeletePreview';
import EmojiUploadPicker from './EmojiUploadPicker';
import TonePreviewButton from './TonePreviewButton';
import ToneSelector from './ToneSelector';
import { EmojiPickerListSearch } from '../picker/EmojiPickerListSearch';
import { messages } from '../i18n';
import AkButton from '@atlaskit/button/standard-button';
import AddIcon from '@atlaskit/icon/core/migration/add';
import { setSkinToneAriaLabelText } from './setSkinToneAriaLabelText';
import { emojiPickerAddEmoji } from './styles';
import { DEFAULT_TONE } from '../../util/constants';
import { Box } from '@atlaskit/primitives/compiled';
const styles = {
  icon: "_18u0r5cr _2hwx1i6y"
};
const addCustomEmoji = null;
const addCustomEmojiButton = null;
const emojiActionsWrapper = null;
const emojiToneSelectorContainer = null;
const previewFooter = null;
export const emojiActionsTestId = 'emoji-actions';
export const uploadEmojiTestId = 'upload-emoji';

// Generic Type for the wrapped functional component

const AddOwnEmoji = props => {
  const {
    onOpenUpload,
    uploadEnabled
  } = props;
  return /*#__PURE__*/React.createElement(Fragment, null, uploadEnabled && /*#__PURE__*/React.createElement("div", {
    "data-testid": uploadEmojiTestId,
    className: ax(["_1wpz1h6o _18u019bv _otyr19bv"])
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.addCustomEmojiLabel, label => /*#__PURE__*/React.createElement(AkButton, {
    onClick: onOpenUpload,
    iconBefore: /*#__PURE__*/React.createElement(Box, {
      xcss: styles.icon
    }, /*#__PURE__*/React.createElement(AddIcon, {
      LEGACY_margin: `0 ${"var(--ds-space-025, 2px)"} 0 ${"var(--ds-space-050, 4px)"}`,
      color: "currentColor",
      label: "",
      LEGACY_size: "small"
    })),
    appearance: "subtle"
    // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
    ,

    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax(["_p12f3sup", emojiPickerAddEmoji]),
    tabIndex: 0,
    id: "add-custom-emoji"
  }, label))));
};
const TonesWrapper = props => {
  const {
    toneEmoji,
    selectedTone = DEFAULT_TONE,
    intl,
    onToneOpen,
    showToneSelector
  } = props;
  const {
    formatMessage
  } = intl;
  const tonePreviewButtonRef = useRef(null);
  const [focusTonePreviewButton, setFocusTonePreviewButton] = useState(false);
  useLayoutEffect(() => {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 ? void 0 : _tonePreviewButtonRef.focus();
    }
    return () => {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  const onToneCloseHandler = useCallback(() => {
    const {
      onToneClose
    } = props;
    onToneClose();
    setFocusTonePreviewButton(true);
  }, [props]);
  const onToneSelectedHandler = useCallback(toneValue => {
    const {
      onToneSelected
    } = props;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  }, [props]);
  if (!toneEmoji) {
    return null;
  }
  let previewToneEmoji = toneEmoji;
  if (selectedTone !== DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlkb7n _1o9zkb7n _i0dlf1ug _ca0q1skh _u5f319bv _n3td1crf _19bvidpf _1e0c1txw _1bahesu3"])
  }, /*#__PURE__*/React.createElement(ToneSelector, {
    emoji: toneEmoji,
    onToneSelected: onToneSelectedHandler,
    onToneClose: onToneCloseHandler,
    selectedTone: selectedTone,
    isVisible: showToneSelector
  }), /*#__PURE__*/React.createElement(TonePreviewButton, {
    ref: tonePreviewButtonRef,
    ariaExpanded: showToneSelector,
    emoji: previewToneEmoji,
    selectOnHover: true,
    onSelected: onToneOpen,
    ariaLabelText: formatMessage(messages.emojiSelectSkinToneButtonAriaLabelText, {
      selectedTone: `${setSkinToneAriaLabelText(previewToneEmoji.name)}`
    }),
    isVisible: !showToneSelector
  }));
};
export const EmojiActions = props => {
  const {
    onToneSelected,
    onToneSelectorCancelled,
    initialUploadName,
    onUploadCancelled,
    onCloseDelete,
    onDeleteEmoji,
    onUploadEmoji,
    uploadErrorMessage,
    uploading,
    onFileChooserClicked,
    emojiToDelete,
    onChange,
    query,
    resultsCount = 0
  } = props;
  const [showToneSelector, setShowToneSelector] = useState(false);
  const onToneOpenHandler = useCallback(() => setShowToneSelector(true), []);
  const onToneCloseHandler = useCallback(() => setShowToneSelector(false), []);
  const onToneSelectedHandler = useCallback(toneValue => {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  }, [onToneSelected]);
  const onMouseLeaveHandler = useCallback(() => {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  }, [showToneSelector, onToneSelectorCancelled]);
  if (uploading) {
    return /*#__PURE__*/React.createElement("div", {
      className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl1kuc _16qs1ueq"])
    }, /*#__PURE__*/React.createElement(EmojiUploadPicker, {
      onUploadCancelled: onUploadCancelled,
      onUploadEmoji: onUploadEmoji,
      onFileChooserClicked: onFileChooserClicked,
      errorMessage: uploadErrorMessage,
      initialUploadName: initialUploadName
    }));
  }
  if (emojiToDelete) {
    return /*#__PURE__*/React.createElement("div", {
      className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl1kuc _16qs1ueq"])
    }, /*#__PURE__*/React.createElement(EmojiDeletePreview, {
      emoji: emojiToDelete,
      onDeleteEmoji: onDeleteEmoji,
      onCloseDelete: onCloseDelete
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": emojiActionsTestId,
    onMouseLeave: onMouseLeaveHandler,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl1kuc _16qs1ueq"])
  }, /*#__PURE__*/React.createElement("div", {
    className: ax(["_1e0c1txw _1bahesu3 _4cvr1h6o"])
  }, /*#__PURE__*/React.createElement(EmojiPickerListSearch, {
    onChange: onChange,
    query: query,
    resultsCount: resultsCount,
    isVisible: !showToneSelector
  }), /*#__PURE__*/React.createElement(TonesWrapper, _extends({}, props, {
    onToneOpen: onToneOpenHandler,
    onToneClose: onToneCloseHandler,
    onToneSelected: onToneSelectedHandler,
    showToneSelector: showToneSelector
  }))), /*#__PURE__*/React.createElement(AddOwnEmoji, props));
};
export default injectIntl( /*#__PURE__*/memo(EmojiActions));