/* CategorySelector.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./CategorySelector.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useEffect, useRef, useState } from 'react';
import { cx } from '@atlaskit/css';
import { N30 } from '@atlaskit/theme/colors';
import { useIntl } from 'react-intl-next';
import { Pressable } from '@atlaskit/primitives/compiled';
import Tooltip from '@atlaskit/tooltip';
import { CATEGORYSELECTOR_KEYBOARD_KEYS_SUPPORTED, defaultCategories, KeyboardKeys } from '../../util/constants';
import { messages } from '../i18n';
import { CategoryDescriptionMap } from './categories';
import { usePrevious } from '../../hooks/usePrevious';
import { RENDER_EMOJI_PICKER_LIST_TESTID } from './EmojiPickerList';
const styles = {
  commonCategory: "_2rkoglpi _v564h5h4 _189eidpf _bfhksm61 _ca0qze3t _n3tdze3t _19bvze3t _u5f3ze3t",
  defaultCategory: "_syaz131l _30l3aqb7",
  activeCategory: "_syazaqb7 _30l3aqb7",
  disabledCategory: "_syaz131l"
};
const categorySelector = null;
const categorySelectorTablist = null;
export const sortCategories = (c1, c2) => CategoryDescriptionMap[c1].order - CategoryDescriptionMap[c2].order;
const addNewCategories = (oldCategories, newCategories) => {
  if (!newCategories) {
    return oldCategories;
  }
  return oldCategories.concat(newCategories.filter(category => !!CategoryDescriptionMap[category])).sort(sortCategories);
};
export const categorySelectorComponentTestId = 'category-selector-component';
export const categorySelectorCategoryTestId = categoryId => `category-selector-${categoryId}`;
const CategorySelector = props => {
  const {
    disableCategories,
    dynamicCategories,
    activeCategoryId,
    onCategorySelected
  } = props;
  const [categories, setCategories] = useState(addNewCategories(defaultCategories, dynamicCategories));
  const [currentFocus, setCurrentFocus] = useState(0);
  const categoryRef = useRef(null);
  const prevDynamicCategories = usePrevious(dynamicCategories);
  const {
    formatMessage
  } = useIntl();
  const updateCategories = useCallback(() => {
    const newCategories = addNewCategories(defaultCategories, dynamicCategories);
    setCategories(newCategories);
  }, [dynamicCategories]);
  useEffect(() => {
    if (prevDynamicCategories !== dynamicCategories) {
      updateCategories();
    }
  }, [prevDynamicCategories, dynamicCategories, updateCategories]);
  const focusCategory = useCallback(index => {
    var _categoryRef$current;
    const categoryToFocus = (_categoryRef$current = categoryRef.current) === null || _categoryRef$current === void 0 ? void 0 : _categoryRef$current.querySelector(`[data-focus-index="${index}"]`);
    categoryToFocus && categoryToFocus.focus();
    setCurrentFocus(index);
  }, [categoryRef, setCurrentFocus]);
  const handleKeyDown = e => {
    if (!CATEGORYSELECTOR_KEYBOARD_KEYS_SUPPORTED.includes(e.key)) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    const lastCategoryIndex = categories.length - 1;
    switch (e.key) {
      // navigate to the right category
      case KeyboardKeys.ArrowRight:
        focusCategory(currentFocus === lastCategoryIndex ? 0 : currentFocus + 1);
        break;
      // navigate to the left category
      case KeyboardKeys.ArrowLeft:
        focusCategory(currentFocus === 0 ? lastCategoryIndex : currentFocus - 1);
        break;
      // navigate to the first category
      case KeyboardKeys.Home:
        focusCategory(0);
        break;
      // navigate to the last category
      case KeyboardKeys.End:
        focusCategory(lastCategoryIndex);
        break;
    }
  };
  const handleClick = (categoryId, index) => event => {
    if (disableCategories) {
      event.preventDefault();
      return;
    }
    if (onCategorySelected) {
      onCategorySelected(categoryId);
    }
    setCurrentFocus(index);
  };
  let categoriesSection;
  if (categories) {
    categoriesSection = /*#__PURE__*/React.createElement("div", {
      role: "tablist",
      "aria-label": formatMessage(messages.categoriesSelectorLabel),
      "data-testid": categorySelectorComponentTestId,
      ref: categoryRef,
      className: ax(["_ca0q12x7 _n3td12x7 _19bvu2gc _u5f3u2gc _1e0c1txw _2lx2vrvc _1bah1b1v _4cvr1h6o"])
    }, categories.map((categoryId, index) => {
      const category = CategoryDescriptionMap[categoryId];
      const Icon = category.icon;
      const categoryName = formatMessage(messages[category.name]);
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: categoryName,
        position: "bottom",
        key: category.id
      }, /*#__PURE__*/React.createElement(Pressable, {
        id: `category-selector-${category.id}`,
        "data-focus-index": index,
        "aria-label": categoryName,
        "aria-controls": currentFocus === index ? RENDER_EMOJI_PICKER_LIST_TESTID : undefined,
        "aria-selected": categoryId === activeCategoryId,
        xcss: cx(styles.commonCategory, styles.defaultCategory, categoryId === activeCategoryId && styles.activeCategory, disableCategories && styles.disabledCategory),
        isDisabled: disableCategories,
        onClick: handleClick(categoryId, index),
        testId: categorySelectorCategoryTestId(categoryId),
        tabIndex: currentFocus === index ? 0 : -1,
        onKeyDown: handleKeyDown,
        role: "tab"
      }, /*#__PURE__*/React.createElement(Icon, {
        label: categoryName
      })));
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _bfhk1nmp _dpd31txw"])
  }, categoriesSection);
};
export default CategorySelector;