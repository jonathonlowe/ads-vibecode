/* EmojiPickerEmojiRow.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./EmojiPickerEmojiRow.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { memo } from 'react';
import { useIntl } from 'react-intl-next';
import CachingEmoji from '../common/CachingEmoji';
import { useEmojiPickerListContext } from '../../hooks/useEmojiPickerListContext';
import { messages } from '../i18n';
const emojiItem = null;
const emojiPickerRow = null;
const EmojiPickerEmojiRow = ({
  emojis,
  onSelected,
  onMouseMove,
  onFocus,
  title,
  showDelete,
  onDelete,
  virtualItemContext
}) => {
  const {
    currentEmojisFocus,
    setEmojisFocus
  } = useEmojiPickerListContext();
  const rowIndex = (virtualItemContext === null || virtualItemContext === void 0 ? void 0 : virtualItemContext.index) || 0;
  const {
    formatMessage
  } = useIntl();
  const handleFocus = index => (emojiId, emoji, event) => {
    setEmojisFocus({
      rowIndex,
      columnIndex: index
    });
    onFocus && onFocus(emojiId, emoji, event);
  };
  return /*#__PURE__*/React.createElement("div", {
    role: "presentation",
    className: ax(["_18u0u2gc"])
  }, emojis.map((emoji, index) => {
    const {
      shortName,
      id
    } = emoji;
    const key = id ? `${id}-${title}` : `${shortName}-${title}`;
    const focus = currentEmojisFocus.rowIndex === rowIndex && currentEmojisFocus.columnIndex === index;
    return /*#__PURE__*/React.createElement("span", {
      key: key,
      role: "gridcell",
      "aria-colindex": index + 1 // aria-colindex is 1 based
      ,
      className: ax(["_1e0c1o8l _y3gn1h6o _1bsb1ylp _1wcg14y2 _1678tlke _7b50u2gc _1rf4u2gc _b4kiu2gc _bm9mu2gc _1lvc1tcg _1cf71tcg _8vlfze3t _1909ze3t _1tcfze3t _n7xcze3t _4ubfu2gc _18x3u2gc _fw9su2gc _29jju2gc _qpkw1tcg _elsp1tcg _vtzrze3t _w2q0ze3t _o5kcze3t _1mc3ze3t _115ch2mm _yrst1ssb _85ft1ssb _5mfndbra _1k8z1tcg _17dz1tcg _zdyf1ule _1mn81tcg _u5ah1tcg"])
    }, /*#__PURE__*/React.createElement(CachingEmoji, {
      emoji: emoji,
      selectOnHover: true,
      onSelected: onSelected,
      onMouseMove: onMouseMove,
      onFocus: handleFocus(index),
      showDelete: showDelete,
      onDelete: onDelete,
      placeholderSize: 24,
      "data-focus-index": `${rowIndex}-${index}`,
      tabIndex: focus ? 0 : -1,
      "aria-roledescription": formatMessage(messages.emojiButtonRoleDescription),
      shouldBeInteractive: true
    }));
  }));
};
export default /*#__PURE__*/memo(EmojiPickerEmojiRow);