/* EmojiPicker.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./EmojiPicker.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { N40 } from '@atlaskit/theme/colors';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ufoExperiences } from '../../util/analytics';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import { LoadingItem } from './EmojiPickerVirtualItems';
import { UfoErrorBoundary } from '../common/UfoErrorBoundary';
import { defaultEmojiPickerSize } from '../../util/constants';
import { EmojiCommonProvider } from '../../context/EmojiCommonProvider';
const emojiPicker = null;
const emojiPickerModuleLoader = () => import( /* webpackChunkName:"@atlaskit-internal_emojiPickerComponent" */'./EmojiPickerComponent');
const emojiPickerLoader = () => emojiPickerModuleLoader().then(module => module.default);
export const preloadEmojiPicker = () => {
  emojiPickerLoader().then(component => {
    EmojiPickerInternal.AsyncLoadedComponent = component;
  });
};
export class EmojiPickerInternal extends LoadingEmojiComponent {
  constructor(props) {
    super(props, {});
    _defineProperty(this, "state", {
      asyncLoadedComponent: EmojiPickerInternal.AsyncLoadedComponent
    });
    ufoExperiences['emoji-picker-opened'].start();
  }
  asyncLoadComponent() {
    emojiPickerLoader().then(component => {
      EmojiPickerInternal.AsyncLoadedComponent = component;
      this.setAsyncState(component);
    });
  }
  renderLoading() {
    const item = new LoadingItem();
    const handlePickerRef = ref => {
      if (this.props.onPickerRef) {
        this.props.onPickerRef(ref);
      }
    };
    ufoExperiences['emoji-picker-opened'].markFMP();
    return /*#__PURE__*/React.createElement("div", {
      ref: handlePickerRef,
      className: ax(["_19itcyqh _2rkosqtm _1e0c1txw _2lx21bp4 _1bah1yb4 _bfhk1bhr _16qsp2xt _4t3iixjv _1bsb1edt _1ul91edt _1tke5x59 _c71l1y6z"])
    }, item.renderItem());
  }
  renderLoaded(loadedEmojiProvider, EmojiPickerComponent) {
    const {
      emojiProvider,
      ...otherProps
    } = this.props;
    return /*#__PURE__*/React.createElement(UfoErrorBoundary, {
      experiences: [ufoExperiences['emoji-picker-opened']]
    }, /*#__PURE__*/React.createElement(EmojiCommonProvider, {
      emojiProvider: loadedEmojiProvider
    }, /*#__PURE__*/React.createElement(EmojiPickerComponent, otherProps)));
  }
}
// state initialised with static component to prevent
// rerender when the module has already been loaded
_defineProperty(EmojiPickerInternal, "defaultProps", {
  size: defaultEmojiPickerSize
});
const EmojiPicker = withAnalyticsEvents()(EmojiPickerInternal);
export default EmojiPicker;