/**
 * Minimum information to defined an emoji is the shortName.
 * In order to uniquely define an emoji, the id should be included, and is
 * used in preference to shortName if provided, and has a matching emoji.
 * If not emoji can be found by id (e.g. a custom emoji has been removed),
 * fallback behaviour will be to attempt to find a matching emoji by shortName.
 */

/**
 * Sprite representation exposed from the EmojiResource.
 */

/**
 * Representation returned from a sprite service.
 */

/**
 * Describes an emoji which is a variant of some base emoji. This is used when you want to promote the
 * skinVariations in an EmojiDescriptionWithVariations to represent them along side their base representations.
 */

/**
 * An access token for emoji stored in the MediaApi
 * (indicated by urls beginning with the url of the token.)
 */

/**
 * The expected response from an Emoji service.
 */

export let SearchSort = /*#__PURE__*/function (SearchSort) {
  // no sort - just the default ordering of emoji
  SearchSort[SearchSort["None"] = 0] = "None";
  // a sort taking into account a number of factors including, usage, closeness of match to the query, etc
  SearchSort[SearchSort["Default"] = 1] = "Default";
  // sort such that the most frequently used emoji come first, and then standard, service defined ordering is preserved.
  SearchSort[SearchSort["UsageFrequency"] = 2] = "UsageFrequency";
  return SearchSort;
}({});
export let SearchSourceTypes = /*#__PURE__*/function (SearchSourceTypes) {
  SearchSourceTypes["PICKER"] = "picker";
  SearchSourceTypes["TYPEAHEAD"] = "typeahead";
  return SearchSourceTypes;
}({});
export let ProviderTypes = /*#__PURE__*/function (ProviderTypes) {
  ProviderTypes["SITE"] = "SITE";
  ProviderTypes["STANDARD"] = "STANDARD";
  ProviderTypes["ATLASSIAN"] = "ATLASSIAN";
  ProviderTypes["UNKNOWN"] = "UNKNOWN";
  ProviderTypes["SINGLE"] = "SINGLE";
  return ProviderTypes;
}({});
export let UfoExperienceName = /*#__PURE__*/function (UfoExperienceName) {
  UfoExperienceName["EMOJI_RENDERED"] = "emoji-rendered";
  UfoExperienceName["EMOJI_RESOURCE_FETCHED"] = "emoji-resource-fetched";
  UfoExperienceName["EMOJI_PICKER_OPENED"] = "emoji-picker-opened";
  UfoExperienceName["EMOJI_SELECTION_RECORDED"] = "emoji-selection-recorded";
  UfoExperienceName["EMOJI_UPLOADED"] = "emoji-uploaded";
  UfoExperienceName["EMOJI_SEARCHED"] = "emoji-searched";
  return UfoExperienceName;
}({});
export let UfoComponentName = /*#__PURE__*/function (UfoComponentName) {
  UfoComponentName["EMOJI"] = "emoji";
  UfoComponentName["EMOJI_PICKER"] = "emoji-picker";
  UfoComponentName["EMOJI_PROVIDER"] = "emoji-provider";
  return UfoComponentName;
}({});
export let UfoEmojiTimingsKeys = /*#__PURE__*/function (UfoEmojiTimingsKeys) {
  UfoEmojiTimingsKeys["FMP"] = "fmp";
  UfoEmojiTimingsKeys["MOUNTED"] = "emoji-mount";
  UfoEmojiTimingsKeys["METADATA"] = "emoji-metadata";
  UfoEmojiTimingsKeys["MEDIADATA"] = "emoji-media";
  UfoEmojiTimingsKeys["ONLOAD"] = "emoji-onload";
  return UfoEmojiTimingsKeys;
}({});
export let UfoEmojiTimings = /*#__PURE__*/function (UfoEmojiTimings) {
  UfoEmojiTimings["FMP_END"] = "fmp";
  UfoEmojiTimings["MOUNTED_END"] = "emoji-mount_end";
  UfoEmojiTimings["METADATA_START"] = "emoji-metadata_start";
  UfoEmojiTimings["METADATA_END"] = "emoji-metadata_end";
  UfoEmojiTimings["MEDIA_START"] = "emoji-media_start";
  UfoEmojiTimings["MEDIA_END"] = "emoji-media_end";
  UfoEmojiTimings["ONLOAD_START"] = "emoji-onload_start";
  UfoEmojiTimings["ONLOAD_END"] = "emoji-onload_end";
  return UfoEmojiTimings;
}({});