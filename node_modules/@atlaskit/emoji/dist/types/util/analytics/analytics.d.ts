import { type AnalyticsEventPayload, type CreateUIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type EmojiDescription, type OptionalEmojiDescription, SearchSourceTypes } from '../../types';
export declare const createAndFireEventInElementsChannel: (payload: AnalyticsEventPayload) => (createAnalyticsEvent: CreateUIAnalyticsEvent) => import("@atlaskit/analytics-next").UIAnalyticsEvent;
export type EmojiInsertionAnalytic = (source: SearchSourceTypes.PICKER | SearchSourceTypes.TYPEAHEAD) => AnalyticsEventPayload;
export declare const recordSucceededEmoji: (emoji: OptionalEmojiDescription) => (source: SearchSourceTypes) => AnalyticsEventPayload;
export declare const recordSucceeded: EmojiInsertionAnalytic;
export declare const recordFailedEmoji: (emoji: OptionalEmojiDescription) => (source: SearchSourceTypes) => AnalyticsEventPayload;
export declare const recordFailed: EmojiInsertionAnalytic;
interface Duration {
    duration: number;
}
export declare const openedPickerEvent: () => AnalyticsEventPayload;
export declare const closedPickerEvent: (attributes: Duration) => AnalyticsEventPayload;
interface EmojiAttributes {
    emojiId: string;
    baseEmojiId?: string;
    skinToneModifier?: string;
    category: string;
    type: string;
}
export declare const pickerClickedEvent: (attributes: {
    queryLength: number;
} & EmojiAttributes & Duration) => AnalyticsEventPayload;
export declare const categoryClickedEvent: (attributes: {
    category: string;
}) => AnalyticsEventPayload;
export declare const pickerSearchedEvent: (attributes: {
    queryLength: number;
    numMatches: number;
}) => AnalyticsEventPayload;
export declare const toneSelectedEvent: (attributes: {
    skinToneModifier: string;
}) => AnalyticsEventPayload;
export declare const toneSelectorOpenedEvent: (attributes: {
    skinToneModifier?: string;
}) => AnalyticsEventPayload;
export declare const toneSelectorClosedEvent: () => AnalyticsEventPayload;
export declare const uploadBeginButton: () => AnalyticsEventPayload;
export declare const uploadConfirmButton: (attributes: {
    retry: boolean;
}) => AnalyticsEventPayload;
export declare const uploadCancelButton: () => AnalyticsEventPayload;
export declare const uploadSucceededEvent: (attributes: Duration) => AnalyticsEventPayload;
export declare const uploadFailedEvent: (attributes: {
    reason: string;
} & Duration) => AnalyticsEventPayload;
interface Attributes {
    emojiId?: string;
}
export declare const deleteBeginEvent: (attributes: Attributes) => AnalyticsEventPayload;
export declare const deleteConfirmEvent: (attributes: Attributes) => AnalyticsEventPayload;
export declare const deleteCancelEvent: (attributes: Attributes) => AnalyticsEventPayload;
export declare const selectedFileEvent: () => AnalyticsEventPayload;
export declare const typeaheadCancelledEvent: (duration: number, query?: string, emojiList?: EmojiDescription[]) => AnalyticsEventPayload;
export declare const typeaheadSelectedEvent: (pressed: boolean, duration: number, emoji: EmojiDescription, emojiList?: EmojiDescription[], query?: string, exactMatch?: boolean) => AnalyticsEventPayload;
export declare const typeaheadRenderedEvent: (duration: number, query?: string, emojiList?: EmojiDescription[]) => AnalyticsEventPayload;
export declare const recordSelectionSucceededSli: (emoji: OptionalEmojiDescription, options?: {
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
}) => () => void;
export declare const recordSelectionFailedSli: (emoji: OptionalEmojiDescription, options?: {
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
}) => (err: Error) => Promise<never>;
/**
 * Used for store failure metadata for analytics
 * @param error The error could be a service error with {code, reason} or an Error
 * @returns any
 */
export declare const extractErrorInfo: (error: any) => any;
export {};
