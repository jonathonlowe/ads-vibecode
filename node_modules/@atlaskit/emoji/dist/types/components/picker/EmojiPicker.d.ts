/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { ComponentClass } from 'react';
import { type WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import type { EmojiProvider } from '../../api/EmojiResource';
import type { OnEmojiEvent, PickerSize } from '../../types';
import LoadingEmojiComponent, { type Props as LoadingProps, type State as LoadingState } from '../common/LoadingEmojiComponent';
import type { PickerRefHandler, Props as ComponentProps } from './EmojiPickerComponent';
export declare const preloadEmojiPicker: () => void;
export interface Props extends LoadingProps {
    /**
     * Callback to be executed on emoji selection.
     */
    onSelection?: OnEmojiEvent;
    /**
     * Callback to handle picker reference.
     */
    onPickerRef?: PickerRefHandler;
    /**
     * Flag to disable tone selector.
     */
    hideToneSelector?: boolean;
    /**
     * Size of Emoji Picker. default value is 'medium'.
     */
    size?: PickerSize;
}
export declare class EmojiPickerInternal extends LoadingEmojiComponent<Props & WithAnalyticsEventsProps, LoadingState> {
    static AsyncLoadedComponent?: React.ComponentType<React.PropsWithChildren<ComponentProps>>;
    static defaultProps: {
        size: string;
    };
    state: {
        asyncLoadedComponent: React.ComponentType<React.PropsWithChildren<ComponentProps>> | undefined;
    };
    constructor(props: Props);
    asyncLoadComponent(): void;
    renderLoading(): JSX.Element | null;
    renderLoaded(loadedEmojiProvider: EmojiProvider, EmojiPickerComponent: ComponentClass<ComponentProps>): JSX.Element;
}
declare const EmojiPicker: React.ForwardRefExoticComponent<Omit<Props & WithAnalyticsEventsProps, keyof WithAnalyticsEventsProps> & React.RefAttributes<any>>;
export default EmojiPicker;
