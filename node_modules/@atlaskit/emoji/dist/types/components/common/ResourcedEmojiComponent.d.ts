import React from 'react';
import type { EmojiProvider } from '../../api/EmojiResource';
import type { EmojiLoadSuccessCallback, EmojiLoadFailCallback } from '../../api/EmojiUtils';
import { type EmojiId } from '../../types';
export interface BaseResourcedEmojiProps {
    /**
     * Emoji to display
     */
    emojiId: EmojiId;
    /**
     * Allows to show the tooltip.
     * Defaults to `false`.
     */
    showTooltip?: boolean;
    /**
     * Scales the emoji proportionally to provided hight.
     * Defaults to `undefined`.
     */
    fitToHeight?: number;
    /**
     * Optimistic will call the fetch interface first and not wait for the entire emoji collection
     * to be available before rendering. This is useful for views or pages that show a select set of
     * emojis.
     * Defaults to `false`.
     */
    optimistic?: boolean;
    /**
     * Custom Fallback allows a custom element or string to be rendered if an emoji fails to be fetched or found.
     * By default it takes the fallback or shortName inside emojiId, but if this prop is set it override the internal
     * fallbacks
     * customFallback<Element | string> else emojiId.fallback else emojiId.shortName.
     * Defaults to `undefined`.
     */
    customFallback?: JSX.Element | string;
    /**
     * Will attempt to render a highly condensed version of the emoji with an image url before showing the meta version.
     * All that is required for optimistic images to render is an emojiId, imageUrl and sizing props.
     * Defaults to `undefined`.
     */
    optimisticImageURL?: string;
    /**
     * This should only be set when the emoji is being used in the Editor.
     * Currently when set -- this prevents any aria labels being added.
     * This is acceptable in Editor -- as it uses another technique to announce the emoji nodes.
     */
    editorEmoji?: true;
}
export interface Props extends BaseResourcedEmojiProps {
    /**
     * EmojiResource instance that handles fetching of emoji data.
     */
    emojiProvider: Promise<EmojiProvider>;
    /**
     * A callback triggered on emoji load success
     */
    onEmojiLoadSuccess?: EmojiLoadSuccessCallback;
    /**
     * A callback triggered on emoji load failure
     */
    onEmojiLoadFail?: EmojiLoadFailCallback;
}
export declare const ResourcedEmojiComponent: (props: Props) => React.JSX.Element;
export default ResourcedEmojiComponent;
