/// <reference types="react" />
import { type WrappedComponentProps } from 'react-intl-next';
import type { EmojiDescription, EmojiDescriptionWithVariations, Message, OnToneSelected, OnToneSelectorCancelled, ToneSelection } from '../../types';
import { type OnDeleteEmoji } from './EmojiDeletePreview';
import { type OnUploadEmoji } from './EmojiUploadPicker';
export interface Props {
    selectedTone?: ToneSelection;
    onToneSelected?: OnToneSelected;
    onToneSelectorCancelled?: OnToneSelectorCancelled;
    toneEmoji?: EmojiDescriptionWithVariations;
    uploading: boolean;
    uploadEnabled: boolean;
    emojiToDelete?: EmojiDescription;
    initialUploadName?: string;
    uploadErrorMessage?: Message;
    onUploadCancelled: () => void;
    onUploadEmoji: OnUploadEmoji;
    onCloseDelete: () => void;
    onDeleteEmoji: OnDeleteEmoji;
    onFileChooserClicked?: () => void;
    onOpenUpload: () => void;
    query?: string;
    onChange: (value: string) => void;
    resultsCount?: number;
}
export declare const emojiActionsTestId = "emoji-actions";
export declare const uploadEmojiTestId = "upload-emoji";
type PropsWithWrappedComponentPropsType = Props & WrappedComponentProps;
type EmojiActionsProps = PropsWithWrappedComponentPropsType;
export declare const EmojiActions: (props: EmojiActionsProps) => JSX.Element;
declare const _default: import("react").FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: import("react").ComponentType<Props & WrappedComponentProps>;
};
export default _default;
