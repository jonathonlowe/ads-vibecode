import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useMemo, useEffect } from 'react';
import { EmojiContext } from './EmojiContext';
import debug from '../util/logger';
export var EmojiContextProvider = function EmojiContextProvider(_ref) {
  var children = _ref.children,
    emojiContextValue = _ref.emojiContextValue;
  var memoizedEmojiContextValue = useMemo(function () {
    return emojiContextValue;
  }, [emojiContextValue]);
  useEffect(function () {
    // trigger emoji fetching
    function fetchEmojiProvider() {
      return _fetchEmojiProvider.apply(this, arguments);
    }
    function _fetchEmojiProvider() {
      _fetchEmojiProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return memoizedEmojiContextValue === null || memoizedEmojiContextValue === void 0 ? void 0 : memoizedEmojiContextValue.emoji.emojiProvider.fetchEmojiProvider();
            case 3:
              _context.next = 8;
              break;
            case 5:
              _context.prev = 5;
              _context.t0 = _context["catch"](0);
              debug('fetchEmojiProvider error catched from outside', _context.t0);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 5]]);
      }));
      return _fetchEmojiProvider.apply(this, arguments);
    }
    if (memoizedEmojiContextValue !== null && memoizedEmojiContextValue !== void 0 && memoizedEmojiContextValue.emoji.emojiProvider.onlyFetchOnDemand) {
      var isFetchingOnDemand = memoizedEmojiContextValue === null || memoizedEmojiContextValue === void 0 ? void 0 : memoizedEmojiContextValue.emoji.emojiProvider.onlyFetchOnDemand();
      if (!isFetchingOnDemand) {
        fetchEmojiProvider();
      }
    } else {
      fetchEmojiProvider();
    }
  }, [memoizedEmojiContextValue]);
  return /*#__PURE__*/React.createElement(EmojiContext.Provider, {
    value: memoizedEmojiContextValue
  }, children);
};