import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useContext, useEffect, useState } from 'react';
import { EmojiContext } from '../context/EmojiContext';
var supportsUploadFeature = function supportsUploadFeature(emojiProvider) {
  var emojiUploadProvider = emojiProvider;
  return !!emojiUploadProvider.isUploadSupported && !!emojiUploadProvider.uploadCustomEmoji && !!emojiUploadProvider.prepareForUpload;
};
export var useEmoji = function useEmoji() {
  var context = useContext(EmojiContext);

  // Hooks API
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isUploadSupported = _useState2[0],
    setIsUploadSupported = _useState2[1];
  if (!context) {
    throw new Error('useEmoji must be used within EmojiContext');
  }
  var emojiProvider = context.emoji.emojiProvider;
  useEffect(function () {
    if (supportsUploadFeature(emojiProvider)) {
      var checkIfUploadIsSupported = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var supported;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return emojiProvider.isUploadSupported();
              case 3:
                supported = _context.sent;
                setIsUploadSupported(supported);
                _context.next = 10;
                break;
              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                return _context.abrupt("return", false);
              case 10:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[0, 7]]);
        }));
        return function checkIfUploadIsSupported() {
          return _ref.apply(this, arguments);
        };
      }();
      checkIfUploadIsSupported();
    }
  }, [emojiProvider]);
  return {
    emojiProvider: emojiProvider,
    isUploadSupported: isUploadSupported
  };
};