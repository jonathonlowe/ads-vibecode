import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { createAndFireEvent } from '@atlaskit/analytics-next';
import { SearchSourceTypes } from '../../types';
export var createAndFireEventInElementsChannel = createAndFireEvent('fabric-elements');
var createEvent = function createEvent(eventType, action, actionSubject, actionSubjectId) {
  var attributes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  return {
    eventType: eventType,
    action: action,
    actionSubject: actionSubject,
    actionSubjectId: actionSubjectId,
    attributes: _objectSpread({
      packageName: "@atlaskit/emoji",
      packageVersion: "69.1.0"
    }, attributes)
  };
};
export var recordSucceededEmoji = function recordSucceededEmoji(emoji) {
  return function (source) {
    return createEvent('operational', 'succeeded', 'recordEmojiSelection', undefined, {
      source: source,
      emojiId: emoji === null || emoji === void 0 ? void 0 : emoji.id,
      emojiType: emoji === null || emoji === void 0 ? void 0 : emoji.type,
      emojiCategory: emoji === null || emoji === void 0 ? void 0 : emoji.category
    });
  };
};
export var recordSucceeded = function recordSucceeded(source) {
  return createEvent('operational', 'succeeded', 'recordEmojiSelection', undefined, {
    source: source
  });
};
export var recordFailedEmoji = function recordFailedEmoji(emoji) {
  return function (source) {
    return createEvent('operational', 'failed', 'recordEmojiSelection', undefined, {
      source: source,
      emojiId: emoji === null || emoji === void 0 ? void 0 : emoji.id,
      emojiType: emoji === null || emoji === void 0 ? void 0 : emoji.type,
      emojiCategory: emoji === null || emoji === void 0 ? void 0 : emoji.category
    });
  };
};
export var recordFailed = function recordFailed(source) {
  return createEvent('operational', 'failed', 'recordEmojiSelection', undefined, {
    source: source
  });
};
var emojiPickerEvent = function emojiPickerEvent(action) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var actionSubjectId = arguments.length > 2 ? arguments[2] : undefined;
  return createEvent('ui', action, 'emojiPicker', actionSubjectId, attributes);
};
export var openedPickerEvent = function openedPickerEvent() {
  return emojiPickerEvent('opened');
};
export var closedPickerEvent = function closedPickerEvent(attributes) {
  return emojiPickerEvent('closed', attributes);
};
var skinTones = [{
  id: '-1f3fb',
  skinToneModifier: 'light'
}, {
  id: '-1f3fc',
  skinToneModifier: 'mediumLight'
}, {
  id: '-1f3fd',
  skinToneModifier: 'medium'
}, {
  id: '-1f3fe',
  skinToneModifier: 'mediumDark'
}, {
  id: '-1f3ff',
  skinToneModifier: 'dark'
}];
var getSkinTone = function getSkinTone(emojiId) {
  if (!emojiId) {
    return {};
  }
  for (var _i = 0, _skinTones = skinTones; _i < _skinTones.length; _i++) {
    var _skinTones$_i = _skinTones[_i],
      id = _skinTones$_i.id,
      skinToneModifier = _skinTones$_i.skinToneModifier;
    if (emojiId.indexOf(id) !== -1) {
      return {
        skinToneModifier: skinToneModifier,
        baseEmojiId: emojiId.replace(id, '')
      };
    }
  }
  return {};
};
export var pickerClickedEvent = function pickerClickedEvent(attributes) {
  return emojiPickerEvent('clicked', _objectSpread(_objectSpread({}, getSkinTone(attributes.emojiId)), attributes), 'emoji');
};
export var categoryClickedEvent = function categoryClickedEvent(attributes) {
  return emojiPickerEvent('clicked', attributes, 'category');
};
export var pickerSearchedEvent = function pickerSearchedEvent(attributes) {
  return emojiPickerEvent('searched', attributes, 'query');
};
var skintoneSelectorEvent = function skintoneSelectorEvent(action) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return createEvent('ui', action, 'emojiSkintoneSelector', undefined, attributes);
};
export var toneSelectedEvent = function toneSelectedEvent(attributes) {
  return skintoneSelectorEvent('clicked', attributes);
};
export var toneSelectorOpenedEvent = function toneSelectorOpenedEvent(attributes) {
  return skintoneSelectorEvent('opened', attributes);
};
export var toneSelectorClosedEvent = function toneSelectorClosedEvent() {
  return skintoneSelectorEvent('cancelled');
};
var emojiUploaderEvent = function emojiUploaderEvent(action, actionSubjectId, attributes) {
  return createEvent('ui', action, 'emojiUploader', actionSubjectId, attributes);
};
export var uploadBeginButton = function uploadBeginButton() {
  return emojiUploaderEvent('clicked', 'addButton');
};
export var uploadConfirmButton = function uploadConfirmButton(attributes) {
  return emojiUploaderEvent('clicked', 'confirmButton', attributes);
};
export var uploadCancelButton = function uploadCancelButton() {
  return emojiUploaderEvent('clicked', 'cancelButton');
};
export var uploadSucceededEvent = function uploadSucceededEvent(attributes) {
  return createEvent('operational', 'finished', 'emojiUploader', undefined, attributes);
};
export var uploadFailedEvent = function uploadFailedEvent(attributes) {
  return createEvent('operational', 'failed', 'emojiUploader', undefined, attributes);
};
export var deleteBeginEvent = function deleteBeginEvent(attributes) {
  return createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiTrigger', attributes);
};
export var deleteConfirmEvent = function deleteConfirmEvent(attributes) {
  return createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiConfirm', attributes);
};
export var deleteCancelEvent = function deleteCancelEvent(attributes) {
  return createEvent('ui', 'clicked', 'emojiPicker', 'deleteEmojiCancel', attributes);
};
export var selectedFileEvent = function selectedFileEvent() {
  return createEvent('ui', 'clicked', 'emojiUploader', 'selectFile');
};
var extractCommonAttributes = function extractCommonAttributes(query, emojiList) {
  return {
    queryLength: query ? query.length : 0,
    spaceInQuery: query ? query.indexOf(' ') !== -1 : false,
    emojiIds: emojiList ? emojiList.map(function (emoji) {
      return emoji.id;
    }).filter(Boolean).slice(0, 20) : []
  };
};
export var typeaheadCancelledEvent = function typeaheadCancelledEvent(duration, query, emojiList) {
  return createEvent('ui', 'cancelled', 'emojiTypeahead', undefined, _objectSpread({
    duration: duration
  }, extractCommonAttributes(query, emojiList)));
};
var getPosition = function getPosition(emojiList, selectedEmoji) {
  if (emojiList) {
    var index = emojiList.findIndex(function (emoji) {
      return emoji.id === selectedEmoji.id;
    });
    return index === -1 ? undefined : index;
  }
  return;
};
export var typeaheadSelectedEvent = function typeaheadSelectedEvent(pressed, duration, emoji, emojiList, query, exactMatch) {
  return createEvent('ui', pressed ? 'pressed' : 'clicked', 'emojiTypeahead', undefined, _objectSpread(_objectSpread(_objectSpread({
    duration: duration,
    position: getPosition(emojiList, emoji)
  }, extractCommonAttributes(query, emojiList)), getSkinTone(emoji.id)), {}, {
    emojiType: emoji.type,
    exactMatch: exactMatch || false
  }));
};
export var typeaheadRenderedEvent = function typeaheadRenderedEvent(duration, query, emojiList) {
  return createEvent('operational', 'rendered', 'emojiTypeahead', undefined, _objectSpread({
    duration: duration
  }, extractCommonAttributes(query, emojiList)));
};

// it's used in editor typeahead to fire success record analytics
export var recordSelectionSucceededSli = function recordSelectionSucceededSli(emoji, options) {
  return function () {
    if (options && options.createAnalyticsEvent) {
      createAndFireEvent('editor')(recordSucceededEmoji(emoji)(SearchSourceTypes.TYPEAHEAD))(options.createAnalyticsEvent);
    }
  };
};

// it's used in editor typeahead to fire failure record analytics
export var recordSelectionFailedSli = function recordSelectionFailedSli(emoji, options) {
  return function (err) {
    if (options && options.createAnalyticsEvent) {
      createAndFireEvent('editor')(recordFailedEmoji(emoji)(SearchSourceTypes.TYPEAHEAD))(options.createAnalyticsEvent);
    }
    return Promise.reject(err);
  };
};

/**
 * Used for store failure metadata for analytics
 * @param error The error could be a service error with {code, reason} or an Error
 * @returns any
 */
export var extractErrorInfo = function extractErrorInfo(error) {
  if (error instanceof Error) {
    return {
      name: error.name,
      message: error.message
    };
  }
  return error;
};