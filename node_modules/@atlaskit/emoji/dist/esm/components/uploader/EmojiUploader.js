import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["emojiProvider"];
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
var emojiUploadModuleLoader = function emojiUploadModuleLoader() {
  return import( /* webpackChunkName:"@atlaskit-internal_emojiUploadComponent" */'./EmojiUploadComponent');
};
var emojiUploadLoader = function emojiUploadLoader() {
  return emojiUploadModuleLoader().then(function (module) {
    return module.default;
  });
};
export var EmojiUploaderInternal = /*#__PURE__*/function (_LoadingEmojiComponen) {
  function EmojiUploaderInternal(props) {
    var _this;
    _classCallCheck(this, EmojiUploaderInternal);
    _this = _callSuper(this, EmojiUploaderInternal, [props, {}]);
    // state initialised with static component to prevent
    // rerender when the module has already been loaded
    _defineProperty(_this, "state", {
      asyncLoadedComponent: EmojiUploaderInternal.AsyncLoadedComponent
    });
    return _this;
  }
  _inherits(EmojiUploaderInternal, _LoadingEmojiComponen);
  return _createClass(EmojiUploaderInternal, [{
    key: "asyncLoadComponent",
    value: function asyncLoadComponent() {
      var _this2 = this;
      emojiUploadLoader().then(function (component) {
        EmojiUploaderInternal.AsyncLoadedComponent = component;
        _this2.setAsyncState(component);
      });
    }
  }, {
    key: "renderLoaded",
    value: function renderLoaded(loadedEmojiProvider, EmojiUploadComponent) {
      var _this$props = this.props,
        emojiProvider = _this$props.emojiProvider,
        otherProps = _objectWithoutProperties(_this$props, _excluded);
      return /*#__PURE__*/React.createElement(EmojiUploadComponent, _extends({
        emojiProvider: loadedEmojiProvider
      }, otherProps));
    }
  }]);
}(LoadingEmojiComponent);
var EmojiUploader = withAnalyticsEvents()(EmojiUploaderInternal);
export default EmojiUploader;