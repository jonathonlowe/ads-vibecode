/* EmojiUploadComponent.tsx generated by @compiled/babel-plugin v0.36.1 */
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./EmojiUploadComponent.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useState, memo, useEffect } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { supportsUploadFeature } from '../../api/EmojiResource';
import EmojiUploadPickerWithIntl from '../common/EmojiUploadPicker';
import { uploadEmoji } from '../common/UploadEmoji';
import { createAndFireEventInElementsChannel, selectedFileEvent, uploadCancelButton, uploadConfirmButton } from '../../util/analytics';
import { ufoExperiences } from '../../util/analytics/ufoExperiences';
import { messages } from '../i18n';
var emojiPickerWidth = 350;
var emojiUploadWidget = null;
var emojiUploadFooter = null;
var EmojiUploadComponent = function EmojiUploadComponent(props) {
  var emojiProvider = props.emojiProvider,
    createAnalyticsEvent = props.createAnalyticsEvent,
    onUploaderRef = props.onUploaderRef;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    uploadErrorMessage = _useState2[0],
    setUploadErrorMessage = _useState2[1];
  useEffect(function () {
    if (supportsUploadFeature(emojiProvider)) {
      emojiProvider.prepareForUpload();
    }
  }, [emojiProvider]);
  useEffect(function () {
    return function () {
      ufoExperiences['emoji-uploaded'].abort({
        metadata: {
          source: 'EmojiUploadComponent',
          reason: 'unmount'
        }
      });
    };
  }, []);
  var onUploadEmoji = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(upload, retry, onSuccessHandler) {
      var errorSetter, message;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            ufoExperiences['emoji-uploaded'].start();
            ufoExperiences['emoji-uploaded'].addMetadata({
              retry: retry
            });
            if (!supportsUploadFeature(emojiProvider)) {
              _context.next = 16;
              break;
            }
            fireAnalytics(uploadConfirmButton({
              retry: retry
            }));
            _context.prev = 4;
            _context.next = 7;
            return emojiProvider.prepareForUpload();
          case 7:
            errorSetter = function errorSetter(message) {
              setUploadErrorMessage(message);
            }; // internally handled error from upload callback
            uploadEmoji(upload, emojiProvider, errorSetter, onUploaded(onSuccessHandler), fireAnalytics, retry);
            _context.next = 16;
            break;
          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](4);
            // error from upload token generation
            message = _context.t0 instanceof Error ? _context.t0.message : 'Issue with generating upload token';
            ufoExperiences['emoji-uploaded'].failure({
              metadata: {
                source: 'EmojiUploadComponent',
                error: message
              }
            });
            setUploadErrorMessage(messages.emojiUploadFailed);
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[4, 11]]);
    }));
    return function onUploadEmoji(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
  var onUploaded = function onUploaded(onSuccessHandler) {
    return function () {
      setUploadErrorMessage(undefined);
      if (onSuccessHandler) {
        onSuccessHandler();
      }
    };
  };
  var onFileChooserClicked = function onFileChooserClicked() {
    fireAnalytics(selectedFileEvent());
  };
  var onUploadCancelled = function onUploadCancelled() {
    fireAnalytics(uploadCancelButton());
    onUploaded();
  };
  var fireAnalytics = function fireAnalytics(analyticsEvent) {
    if (createAnalyticsEvent) {
      createAndFireEventInElementsChannel(analyticsEvent)(createAnalyticsEvent);
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    ref: onUploaderRef,
    className: ax(["_1e0c1txw _2lx21bp4 _1bah1h6o _4cvr1fhb _bfhk1bhr _4t3i68cl _1bsb10mj _1ul910mj _19pkmgjw _18u0xmi2 _otyrxmi2 _2hwxxmi2"]),
    style: {
      "--_gsvyy7": ix("".concat(emojiPickerWidth, "px"))
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug"])
  }, /*#__PURE__*/React.createElement(EmojiUploadPickerWithIntl, {
    onFileChooserClicked: onFileChooserClicked,
    onUploadCancelled: onUploadCancelled,
    onUploadEmoji: onUploadEmoji,
    errorMessage: uploadErrorMessage ? /*#__PURE__*/React.createElement(FormattedMessage, uploadErrorMessage) : null
  })));
};
export default /*#__PURE__*/memo(EmojiUploadComponent);