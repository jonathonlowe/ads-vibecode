import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { PureComponent } from 'react';
import { emojiTypeAheadMaxHeight } from '../../util/shared-styles';
import { toEmojiId } from '../../util/type-helpers';
import debug from '../../util/logger';
import { actualMouseMove, mouseLocation } from '../../util/mouse';
import Scrollable from '../common/Scrollable';
import EmojiItem from './EmojiTypeAheadItem';
import { fg } from '@atlaskit/platform-feature-flags';
import { EmojiTypeAheadListContainer } from './EmojiTypeAheadListContainer';
import { EmojiTypeAheadSpinner } from './EmojiTypeAheadSpinner';
function wrapIndex(emojis, index) {
  var len = emojis.length;
  var newIndex = index;
  while (newIndex < 0 && len > 0) {
    newIndex += len;
  }
  return newIndex % len;
}
function getKey(emoji) {
  return emoji.id || "".concat(emoji.shortName, "-").concat(emoji.type);
}
function getKeyByIndex(emojis, index) {
  var emoji = emojis && emojis[index];
  if (emoji) {
    return getKey(emoji);
  }
  return undefined;
}
var EmojiTypeAheadList = /*#__PURE__*/function (_PureComponent) {
  function EmojiTypeAheadList(props) {
    var _this;
    _classCallCheck(this, EmojiTypeAheadList);
    _this = _callSuper(this, EmojiTypeAheadList, [props]);
    // API
    _defineProperty(_this, "selectNext", function () {
      var newIndex = wrapIndex(_this.props.emojis, _this.state.selectedIndex + 1);
      _this.selectIndex(newIndex);
    });
    _defineProperty(_this, "selectPrevious", function () {
      var newIndex = wrapIndex(_this.props.emojis, _this.state.selectedIndex - 1);
      _this.selectIndex(newIndex);
    });
    _defineProperty(_this, "chooseCurrentSelection", function () {
      var _this$props = _this.props,
        emojis = _this$props.emojis,
        onEmojiSelected = _this$props.onEmojiSelected;
      var selectedIndex = _this.state.selectedIndex;
      var selectedEmoji = emojis[selectedIndex];
      debug('ak-typeahead-list.chooseCurrentSelection', selectedEmoji);
      if (onEmojiSelected) {
        onEmojiSelected(toEmojiId(selectedEmoji), selectedEmoji);
      }
    });
    _defineProperty(_this, "selectIndexOnHover", function (emojiId, _emoji, event) {
      // TODO: fix this
      if (!event) {
        return;
      }
      var mousePosition = mouseLocation(event);
      if (actualMouseMove(_this.lastMousePosition, mousePosition)) {
        _this.selectByEmojiId(emojiId);
      }
      _this.lastMousePosition = mousePosition;
    });
    _defineProperty(_this, "itemSelected", function (emojiId) {
      _this.selectByEmojiId(emojiId, function () {
        _this.chooseCurrentSelection();
      });
    });
    _defineProperty(_this, "handleScrollableRef", function (ref) {
      _this.scrollable = ref;
    });
    _this.state = {
      selectedKey: getKeyByIndex(props.emojis, 0),
      selectedIndex: 0
    };
    return _this;
  }
  _inherits(EmojiTypeAheadList, _PureComponent);
  return _createClass(EmojiTypeAheadList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!fg('platform_editor_react18_elements_emoji') || !fg('platform_editor_react18_elements_emoji_jira_bb')) {
        // adjust selection
        var emojis = nextProps.emojis;
        var selectedKey = this.state.selectedKey;
        if (!selectedKey) {
          // go with default of selecting first item
          return;
        }
        for (var i = 0; i < emojis.length; i++) {
          if (selectedKey === emojis[i].id) {
            this.setState({
              selectedIndex: i
            });
            return;
          }
        }
        // existing selection not in results, pick first
        this.selectIndexNewEmoji(0, emojis);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var emojis = this.props.emojis;
      var _this$state = this.state,
        selectedIndex = _this$state.selectedIndex,
        selectedKey = _this$state.selectedKey;
      if (emojis && emojis[selectedIndex]) {
        var selectedEmoji = emojis[selectedIndex];
        this.revealItem(selectedEmoji.id || selectedEmoji.shortName);
      }
      if (fg('platform_editor_react18_elements_emoji') || fg('platform_editor_react18_elements_emoji_jira_bb')) {
        if (prevProps !== this.props) {
          // adjust selection
          if (!selectedKey) {
            // go with default of selecting first item
            return;
          }
          for (var i = 0; i < emojis.length; i++) {
            if (selectedKey === emojis[i].id) {
              this.setState({
                selectedIndex: i
              });
              return;
            }
          }
          // existing selection not in results, pick first
          this.selectIndexNewEmoji(0, emojis);
        }
      }
    }
  }, {
    key: "revealItem",
    value:
    // Internal
    function revealItem(key) {
      var item = this.items[key];
      if (item && this.scrollable) {
        this.scrollable.reveal(item);
      }
    }
  }, {
    key: "selectIndexNewEmoji",
    value: function selectIndexNewEmoji(index, emojis) {
      this.setState({
        selectedIndex: index,
        selectedKey: getKeyByIndex(emojis, index)
      });
    }
  }, {
    key: "selectIndex",
    value: function selectIndex(index, callback) {
      var emojis = this.props.emojis;
      this.setState({
        selectedIndex: index,
        selectedKey: getKeyByIndex(emojis, index)
      }, callback);
    }
  }, {
    key: "selectByEmojiId",
    value: function selectByEmojiId(emojiId, callback) {
      var emojis = this.props.emojis;
      for (var i = 0; i < emojis.length; i++) {
        var emoji = emojis[i];
        if (emoji.id === emojiId.id) {
          this.selectIndex(i, callback);
          return;
        }
      }
      for (var _i = 0; _i < emojis.length; _i++) {
        var _emoji2 = emojis[_i];
        if (_emoji2.shortName === emojiId.shortName) {
          this.selectIndex(_i, callback);
          return;
        }
      }
    }
  }, {
    key: "renderItems",
    value: function renderItems(emojis) {
      var _this2 = this;
      if (emojis && emojis.length) {
        this.items = {};
        return /*#__PURE__*/React.createElement("div", null, emojis.map(function (emoji, idx) {
          var key = getKey(emoji);
          var item = /*#__PURE__*/React.createElement(EmojiItem, {
            emoji: emoji,
            key: key,
            selected: _this2.isSelectedEmoji(emoji, idx),
            onMouseMove: _this2.selectIndexOnHover,
            onSelection: _this2.itemSelected,
            ref: function ref(_ref) {
              if (_ref) {
                _this2.items[key] = _ref;
              } else {
                delete _this2.items[key];
              }
            }
          });
          return item;
        }));
      }
      return null;
    }
  }, {
    key: "isSelectedEmoji",
    value: function isSelectedEmoji(emoji, index) {
      var selectedKey = this.state.selectedKey;
      return selectedKey ? selectedKey === emoji.id : index === 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        emojis = _this$props2.emojis,
        loading = _this$props2.loading;
      var hasEmoji = emojis && emojis.length > 0;
      var listBody = loading ? /*#__PURE__*/React.createElement(EmojiTypeAheadSpinner, null) : this.renderItems(emojis);
      return /*#__PURE__*/React.createElement(EmojiTypeAheadListContainer, {
        hasEmoji: hasEmoji,
        loading: loading
      }, /*#__PURE__*/React.createElement(Scrollable, {
        ref: this.handleScrollableRef,
        maxHeight: "".concat(emojiTypeAheadMaxHeight, "px")
      }, listBody));
    }
  }]);
}(PureComponent);
_defineProperty(EmojiTypeAheadList, "defaultProps", {
  onEmojiSelected: function onEmojiSelected() {}
});
export { EmojiTypeAheadList as default };