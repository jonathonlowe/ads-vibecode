import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["emojiProvider", "target", "position", "zIndex", "offsetX", "offsetY"];
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import debug from '../../util/logger';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import Popup from '../common/Popup';
var emojiTypeAheadModuleLoader = function emojiTypeAheadModuleLoader() {
  return import( /* webpackChunkName:"@atlaskit-internal_emojiTypeAheadComponent" */'./EmojiTypeAheadComponent');
};
var emojiTypeAheadComponentLoader = function emojiTypeAheadComponentLoader() {
  return emojiTypeAheadModuleLoader().then(function (module) {
    return module.default;
  });
};
var EmojiTypeahead = /*#__PURE__*/function (_LoadingEmojiComponen) {
  function EmojiTypeahead(props) {
    var _this;
    _classCallCheck(this, EmojiTypeahead);
    _this = _callSuper(this, EmojiTypeahead, [props, {}]);
    // state initialised with static component to prevent
    // rerender when the module has already been loaded
    _defineProperty(_this, "state", {
      asyncLoadedComponent: EmojiTypeahead.AsyncLoadedComponent
    });
    _defineProperty(_this, "selectNext", function () {
      if (_this.refs.typeAhead) {
        _this.refs.typeAhead.selectNext();
      }
    });
    _defineProperty(_this, "selectPrevious", function () {
      if (_this.refs.typeAhead) {
        _this.refs.typeAhead.selectPrevious();
      }
    });
    _defineProperty(_this, "chooseCurrentSelection", function () {
      if (_this.refs.typeAhead) {
        _this.refs.typeAhead.chooseCurrentSelection();
      }
    });
    _defineProperty(_this, "count", function () {
      if (_this.refs.typeAhead) {
        return _this.refs.typeAhead.count();
      }
      return 0;
    });
    return _this;
  }
  _inherits(EmojiTypeahead, _LoadingEmojiComponen);
  return _createClass(EmojiTypeahead, [{
    key: "asyncLoadComponent",
    value: function asyncLoadComponent() {
      var _this2 = this;
      emojiTypeAheadComponentLoader().then(function (component) {
        EmojiTypeahead.AsyncLoadedComponent = component;
        _this2.setAsyncState(component);
      });
    }
  }, {
    key: "renderLoaded",
    value: function renderLoaded(loadedEmojiProvider, TypeAheadComponent) {
      var _this$props = this.props,
        emojiProvider = _this$props.emojiProvider,
        target = _this$props.target,
        position = _this$props.position,
        zIndex = _this$props.zIndex,
        offsetX = _this$props.offsetX,
        offsetY = _this$props.offsetY,
        otherProps = _objectWithoutProperties(_this$props, _excluded);
      var typeAhead = /*#__PURE__*/React.createElement(TypeAheadComponent, _extends({}, otherProps, {
        emojiProvider: loadedEmojiProvider,
        ref: "typeAhead"
      }));
      if (position) {
        debug('target, position', target, position);
        if (target) {
          return /*#__PURE__*/React.createElement(Popup, {
            target: target,
            relativePosition: position,
            zIndex: zIndex,
            offsetX: offsetX,
            offsetY: offsetY,
            children: typeAhead
          });
        }
        // don't show if we have a position, but no target yet
        return null;
      }
      return typeAhead;
    }
  }]);
}(LoadingEmojiComponent);
export { EmojiTypeahead as default };