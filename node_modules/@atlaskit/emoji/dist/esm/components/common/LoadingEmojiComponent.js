import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { Component } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
/**
 * A base class for components that don't want to start rendering
 * until the EmojiProvider is resolved.
 * Notes: super.componentDidMount and super.componentWillUnmount will need to be
 * called explicitly if they are overridden on the child class.
 */
var LoadingEmojiComponent = /*#__PURE__*/function (_Component) {
  function LoadingEmojiComponent(props, _state) {
    var _this;
    _classCallCheck(this, LoadingEmojiComponent);
    _this = _callSuper(this, LoadingEmojiComponent, [props]);
    _defineProperty(_this, "isUnmounted", false);
    _defineProperty(_this, "loaded", function (state) {
      return !!state.asyncLoadedComponent && !!state.loadedEmojiProvider;
    });
    _this.state = _state;

    // initializing here instead of componentDidMount to avoid needless
    // rerendering if emojiProvider resolves immediately.
    _this.loadEmojiProvider(_this.props.emojiProvider);
    return _this;
  }
  _inherits(LoadingEmojiComponent, _Component);
  return _createClass(LoadingEmojiComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // check for the module has not yet been loaded
      // state.asyncLoadedComponent should be initialised
      // with static field to prevent unnecessary rerender
      if (!this.state.asyncLoadedComponent) {
        this.asyncLoadComponent();
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!fg('platform_editor_react18_elements_emoji') || !fg('platform_editor_react18_elements_emoji_jira_bb')) {
        this.loadEmojiProvider(nextProps.emojiProvider);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (fg('platform_editor_react18_elements_emoji') || fg('platform_editor_react18_elements_emoji_jira_bb')) {
        if (this.props !== prevProps) {
          this.loadEmojiProvider(this.props.emojiProvider);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.isUnmounted = true;
    }
  }, {
    key: "loadEmojiProvider",
    value: function loadEmojiProvider(futureEmojiProvider) {
      var _this2 = this;
      futureEmojiProvider.then(function (loadedEmojiProvider) {
        if (!_this2.isUnmounted) {
          _this2.setState({
            loadedEmojiProvider: loadedEmojiProvider
          });
        }
      }).catch(function () {
        if (!_this2.isUnmounted) {
          _this2.setState({
            loadedEmojiProvider: undefined
          });
        }
      });
    }
  }, {
    key: "setAsyncState",
    value: function setAsyncState(asyncLoadedComponent) {
      if (!this.isUnmounted) {
        this.setState({
          asyncLoadedComponent: asyncLoadedComponent
        });
      }
    }
  }, {
    key: "renderLoading",
    value: function renderLoading() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      if (this.loaded(this.state)) {
        var _this$state = this.state,
          _loadedEmojiProvider = _this$state.loadedEmojiProvider,
          _asyncLoadedComponent = _this$state.asyncLoadedComponent;
        return this.renderLoaded(_loadedEmojiProvider, _asyncLoadedComponent);
      }
      return this.renderLoading();
    }
  }]);
}(Component);
export { LoadingEmojiComponent as default };