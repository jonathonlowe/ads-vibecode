/* EmojiDeletePreview.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./EmojiDeletePreview.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { Component } from 'react';
import { N300 } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import AkButton from '@atlaskit/button/new';
import Heading from '@atlaskit/heading';
import FocusLock from 'react-focus-lock';
import { messages } from '../i18n';
import CachingEmoji from './CachingEmoji';
import EmojiErrorMessage, { emojiErrorScreenreaderTestId } from './EmojiErrorMessage';
import RetryableButton from './RetryableButton';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { fg } from '@atlaskit/platform-feature-flags';
var deleteFooter = null;
var deletePreview = null;
var deleteText = null;
var previewButtonGroup = null;
export var emojiDeletePreviewTestId = 'emoji-delete-preview';
var deleteEmojiLabelId = 'fabric.emoji.delete.label.id';
var EmojiDeletePreview = /*#__PURE__*/function (_Component) {
  function EmojiDeletePreview(props) {
    var _this;
    _classCallCheck(this, EmojiDeletePreview);
    _this = _callSuper(this, EmojiDeletePreview, [props]);
    _defineProperty(_this, "onSubmit", function () {
      var _this$props = _this.props,
        emoji = _this$props.emoji,
        onDeleteEmoji = _this$props.onDeleteEmoji,
        onCloseDelete = _this$props.onCloseDelete;
      if (!_this.state.loading) {
        _this.setState({
          loading: true
        });
        onDeleteEmoji(emoji).then(function (success) {
          if (success) {
            onCloseDelete();
            return;
          }
          _this.setState({
            loading: false,
            error: true
          });
        });
      }
    });
    _defineProperty(_this, "onCancel", function () {
      _this.props.onCloseDelete();
    });
    _this.state = {
      loading: false,
      error: false
    };
    return _this;
  }
  _inherits(EmojiDeletePreview, _Component);
  return _createClass(EmojiDeletePreview, [{
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate(nextProps) {
      if (!fg('platform_editor_react18_elements_emoji') || !fg('platform_editor_react18_elements_emoji_jira_bb')) {
        if (nextProps.emoji.id !== this.props.emoji.id) {
          this.setState({
            error: false
          });
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (fg('platform_editor_react18_elements_emoji') || fg('platform_editor_react18_elements_emoji_jira_bb')) {
        if (prevProps.emoji.id !== this.props.emoji.id) {
          this.setState({
            error: false
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        emoji = _this$props2.emoji,
        intl = _this$props2.intl;
      var _this$state = this.state,
        loading = _this$state.loading,
        error = _this$state.error;
      var formatMessage = intl.formatMessage;
      return /*#__PURE__*/React.createElement(FocusLock, {
        noFocusGuards: true
      }, /*#__PURE__*/React.createElement("div", {
        "data-testid": emojiDeletePreviewTestId,
        className: ax(["_ca0q19bv _u5f319bv _n3td19bv _19bv19bv _4t3i53f4 _1e0c1txw _2lx21bp4 _1bahesu3"])
      }, /*#__PURE__*/React.createElement("div", {
        className: ax(["_11c8dcr7 _4t3ivbgk _pnmb1vvm _jwwg7vkz"]),
        style: {
          "--_bbz764": ix("var(--ds-text-subtle, ".concat(N300, ")"))
        }
      }, /*#__PURE__*/React.createElement(Heading, {
        size: "xxsmall"
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.deleteEmojiTitle)), /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.deleteEmojiDescription, {
        values: {
          emojiShortName: emoji.shortName
        }
      }))), /*#__PURE__*/React.createElement("div", {
        className: ax(["_11c82smr _1e0c1txw _4t3i1ylp _4cvr1h6o _1bah1yb4 _19l3zwfg _rtyst9kd _m73io7ol _1txf1igg _1qz31b66"])
      }, /*#__PURE__*/React.createElement(CachingEmoji, {
        emoji: emoji
      }), /*#__PURE__*/React.createElement("div", {
        className: ax(["_1e0c1txw"])
      }, error ? !loading ? /*#__PURE__*/React.createElement(EmojiErrorMessage, {
        message: formatMessage(messages.deleteEmojiFailed),
        errorStyle: "delete",
        tooltip: true
      }) : null : null, /*#__PURE__*/React.createElement(VisuallyHidden, {
        id: deleteEmojiLabelId
      }, formatMessage(messages.deleteEmojiLabel)), /*#__PURE__*/React.createElement(RetryableButton, {
        label: formatMessage(messages.deleteEmojiLabel),
        onSubmit: this.onSubmit,
        appearance: "danger",
        loading: loading,
        error: error,
        ariaLabelledBy: "".concat(emojiErrorScreenreaderTestId, " ").concat(deleteEmojiLabelId)
      }), /*#__PURE__*/React.createElement(AkButton, {
        appearance: "subtle",
        onClick: this.onCancel
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.cancelLabel))))));
    }
  }]);
}(Component);
export default injectIntl(EmojiDeletePreview);