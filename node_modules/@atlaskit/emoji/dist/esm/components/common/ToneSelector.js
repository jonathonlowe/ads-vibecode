/* ToneSelector.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import "./ToneSelector.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { memo, useEffect, useMemo, useRef } from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel, toneSelectedEvent, toneSelectorOpenedEvent } from '../../util/analytics';
import { setSkinToneAriaLabelText } from './setSkinToneAriaLabelText';
import EmojiRadioButton from './EmojiRadioButton';
import { useIntl } from 'react-intl-next';
import { messages } from '../i18n';
var hidden = null;
export var toneSelectorTestId = 'tone-selector';
var extractAllTones = function extractAllTones(emoji) {
  if (emoji.skinVariations) {
    return [emoji].concat(_toConsumableArray(emoji.skinVariations));
  }
  return [emoji];
};
export var ToneSelectorInternal = function ToneSelectorInternal(props) {
  var createAnalyticsEvent = props.createAnalyticsEvent,
    emoji = props.emoji,
    onToneSelected = props.onToneSelected,
    onToneClose = props.onToneClose,
    selectedTone = props.selectedTone,
    isVisible = props.isVisible;
  var isMounted = useRef(false);
  var selectedToneRadioRef = useRef(null);
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var emojiToneCollection = useMemo(function () {
    var selectedToneIndex = -1;
    var toneColletion = extractAllTones(emoji).map(function (tone, index) {
      var isSelected = index === selectedTone;
      if (isSelected) {
        selectedToneIndex = index;
      }
      return _objectSpread(_objectSpread({}, tone), {}, {
        isSelected: isSelected,
        label: setSkinToneAriaLabelText(tone.name),
        toneIndex: index
      });
    });

    // push description of selected tone to the end of the array
    // so that it gets rendered last/rightmost
    toneColletion.push(toneColletion.splice(selectedToneIndex, 1)[0]);
    return toneColletion;
  }, [emoji, selectedTone]);
  useEffect(function () {
    if (isVisible) {
      var _selectedToneRadioRef;
      (_selectedToneRadioRef = selectedToneRadioRef.current) === null || _selectedToneRadioRef === void 0 || _selectedToneRadioRef.focus();
    }
  }, [isVisible, selectedToneRadioRef]);
  var fireAnalyticsEvent = function fireAnalyticsEvent(event) {
    if (createAnalyticsEvent) {
      createAndFireEventInElementsChannel(event)(createAnalyticsEvent);
    }
  };
  var onToneSelectedHandler = function onToneSelectedHandler(toneValue) {
    return function () {
      if (selectedTone === toneValue && onToneClose) {
        onToneClose();
        return;
      }
      onToneSelected(toneValue);
      var toneList = ['default', 'light', 'mediumLight', 'medium', 'mediumDark', 'dark'];
      fireAnalyticsEvent(toneSelectedEvent({
        skinToneModifier: toneList[toneValue]
      }));
    };
  };
  if (!isMounted.current) {
    fireAnalyticsEvent(toneSelectorOpenedEvent({}));
  }
  isMounted.current = true;
  return /*#__PURE__*/React.createElement("div", {
    role: "radiogroup",
    "data-testid": toneSelectorTestId,
    id: "emoji-picker-tone-selector",
    "aria-label": formatMessage(messages.emojiSelectSkinToneListAriaLabelText),
    className: ax([!isVisible && "_tzy4idpf _3um015vq _1e0cglyw"])
  }, emojiToneCollection.map(function (tone) {
    return /*#__PURE__*/React.createElement(EmojiRadioButton, {
      ref: tone.isSelected ? selectedToneRadioRef : null,
      defaultChecked: tone.isSelected,
      ariaLabelText: tone.label,
      key: "".concat(tone.id),
      emoji: tone,
      onSelected: onToneSelectedHandler(tone.toneIndex),
      selectOnHover: true
    });
  }));
};
var ToneSelector = withAnalyticsEvents()(ToneSelectorInternal);
export default /*#__PURE__*/memo(ToneSelector);