import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { defaultEmojiHeight } from '../../util/constants';
import { isImageRepresentation, isMediaRepresentation, isPromise } from '../../util/type-helpers';
import { UfoEmojiTimings } from '../../types';
import Emoji from './Emoji';
import EmojiPlaceholder from './EmojiPlaceholder';
import { sampledUfoRenderedEmoji } from '../../util/analytics';
import { EmojiCommonProvider } from '../../context/EmojiCommonProvider';
import { hasUfoMarked } from '../../util/analytics/ufoExperiences';
var ResourcedEmojiComponentRenderStatesEnum = /*#__PURE__*/function (ResourcedEmojiComponentRenderStatesEnum) {
  ResourcedEmojiComponentRenderStatesEnum["INITIAL"] = "INITIAL";
  ResourcedEmojiComponentRenderStatesEnum["FALLBACK"] = "FALLBACK";
  ResourcedEmojiComponentRenderStatesEnum["EMOJI"] = "EMOJI";
  return ResourcedEmojiComponentRenderStatesEnum;
}(ResourcedEmojiComponentRenderStatesEnum || {});
export var ResourcedEmojiComponent = function ResourcedEmojiComponent(props) {
  var emojiProvider = props.emojiProvider,
    emojiId = props.emojiId,
    _props$showTooltip = props.showTooltip,
    showTooltip = _props$showTooltip === void 0 ? false : _props$showTooltip,
    _props$customFallback = props.customFallback,
    customFallback = _props$customFallback === void 0 ? undefined : _props$customFallback,
    _props$fitToHeight = props.fitToHeight,
    fitToHeight = _props$fitToHeight === void 0 ? defaultEmojiHeight : _props$fitToHeight,
    _props$optimistic = props.optimistic,
    optimistic = _props$optimistic === void 0 ? false : _props$optimistic,
    _props$optimisticImag = props.optimisticImageURL,
    optimisticImageURL = _props$optimisticImag === void 0 ? undefined : _props$optimisticImag,
    editorEmoji = props.editorEmoji,
    onEmojiLoadSuccess = props.onEmojiLoadSuccess,
    onEmojiLoadFail = props.onEmojiLoadFail;
  var shortName = emojiId.shortName,
    id = emojiId.id,
    fallback = emojiId.fallback;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    emoji = _useState2[0],
    setEmoji = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    loaded = _useState4[0],
    setLoaded = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    imageLoadError = _useState6[0],
    setImageLoadError = _useState6[1];
  var _useState7 = useState(),
    _useState8 = _slicedToArray(_useState7, 2),
    resolvedEmojiProvider = _useState8[0],
    setResolvedEmojiProvider = _useState8[1];
  var fetchOrGetEmoji = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_emojiProvider, emojiId) {
      var optimisticFetch,
        reason,
        foundEmoji,
        _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            optimisticFetch = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
            if (!_emojiProvider.fetchByEmojiId) {
              setEmoji(undefined);
              reason = 'missing fetchByEmojiId interface';
              onEmojiLoadFail && onEmojiLoadFail(emojiId.id, reason);
              sampledUfoRenderedEmoji(emojiId).failure({
                metadata: {
                  reason: reason,
                  source: 'ResourcedEmojiComponent'
                }
              });
            }
            foundEmoji = _emojiProvider.fetchByEmojiId(emojiId, optimisticFetch);
            sampledUfoRenderedEmoji(emojiId).mark(UfoEmojiTimings.METADATA_START);
            if (isPromise(foundEmoji)) {
              setLoaded(false);
              foundEmoji.then(function (emoji) {
                setEmoji(emoji);
                if (!emoji) {
                  var _reason = 'failed to find';
                  onEmojiLoadFail && onEmojiLoadFail(emojiId.id, _reason);
                  // emoji is undefined
                  sampledUfoRenderedEmoji(emojiId).failure({
                    metadata: {
                      reason: _reason,
                      source: 'ResourcedEmojiComponent',
                      data: {
                        emoji: {
                          id: emojiId.id,
                          shortName: emojiId.shortName
                        }
                      }
                    }
                  });
                }
              }).catch(function () {
                setEmoji(undefined);
                var reason = 'failed to load';
                onEmojiLoadFail && onEmojiLoadFail(emojiId.id, reason);
                sampledUfoRenderedEmoji(emojiId).failure({
                  metadata: {
                    reason: reason,
                    source: 'ResourcedEmojiComponent',
                    data: {
                      emoji: {
                        id: emojiId.id,
                        shortName: emojiId.shortName
                      }
                    }
                  }
                });
              }).finally(function () {
                setLoaded(true);
                sampledUfoRenderedEmoji(emojiId).mark(UfoEmojiTimings.METADATA_END);
              });
            } else {
              setEmoji(foundEmoji);
              setLoaded(true);
              sampledUfoRenderedEmoji(emojiId).mark(UfoEmojiTimings.METADATA_END);
            }
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), [onEmojiLoadFail]);
  useEffect(function () {
    if (!emojiId) {
      return;
    }
    if (!hasUfoMarked(sampledUfoRenderedEmoji(emojiId), UfoEmojiTimings.FMP_END)) {
      sampledUfoRenderedEmoji(emojiId).markFMP();
    }
  }, [emojiId]);
  useMemo(function () {
    if (!resolvedEmojiProvider || !emojiId) {
      return;
    }
    fetchOrGetEmoji(resolvedEmojiProvider, emojiId, optimistic);
  }, [resolvedEmojiProvider, emojiId, optimistic, fetchOrGetEmoji]);

  /**
   * Setting resolved emoji provider for optimistic rendering
   */
  useEffect(function () {
    Promise.resolve(emojiProvider).then(function (emojiProvider) {
      setResolvedEmojiProvider(emojiProvider);
    });
  }, [emojiProvider]);
  var emojiRenderState = useMemo(function () {
    if (!emoji && !loaded && !optimisticImageURL) {
      return ResourcedEmojiComponentRenderStatesEnum.INITIAL;
    } else if (!emoji && loaded || imageLoadError) {
      return ResourcedEmojiComponentRenderStatesEnum.FALLBACK;
    }
    return ResourcedEmojiComponentRenderStatesEnum.EMOJI;
  }, [emoji, loaded, optimisticImageURL, imageLoadError]);
  var optimisticEmojiDescription = useMemo(function () {
    if (optimisticImageURL) {
      if (emoji && (isImageRepresentation(emoji.representation) || isMediaRepresentation(emoji === null || emoji === void 0 ? void 0 : emoji.representation))) {
        var _emoji$representation = emoji.representation,
          width = _emoji$representation.width,
          height = _emoji$representation.height;
        return _objectSpread(_objectSpread({}, emoji), {}, {
          representation: {
            width: width,
            height: height,
            imagePath: optimisticImageURL
          }
        });
      } else {
        return {
          id: id,
          shortName: shortName,
          fallback: fallback,
          type: '',
          category: '',
          representation: {
            height: fitToHeight || defaultEmojiHeight,
            width: fitToHeight || defaultEmojiHeight,
            imagePath: optimisticImageURL
          },
          searchable: true
        };
      }
    }
    return emoji;
  }, [emoji, optimisticImageURL, fallback, fitToHeight, id, shortName]);
  var handleOnLoadError = useCallback(function (emojiId) {
    setImageLoadError(true);
    var reason = 'load error';
    onEmojiLoadFail && onEmojiLoadFail(emojiId.id, reason);
    sampledUfoRenderedEmoji(emojiId).failure({
      metadata: {
        reason: reason,
        source: 'ResourcedEmojiComponent',
        emojiId: emojiId.id
      }
    });
  }, [onEmojiLoadFail]);
  var handleOnLoadSuccess = useCallback(function (emojiId) {
    onEmojiLoadSuccess && onEmojiLoadSuccess(emojiId.id);
  }, [onEmojiLoadSuccess]);
  return /*#__PURE__*/React.createElement(EmojiCommonProvider, {
    emojiProvider: resolvedEmojiProvider
  }, /*#__PURE__*/React.createElement("span", {
    "data-emoji-id": id,
    "data-emoji-short-name": shortName,
    "data-emoji-text": fallback || shortName
  }, emojiRenderState === ResourcedEmojiComponentRenderStatesEnum.INITIAL && /*#__PURE__*/React.createElement(EmojiPlaceholder, {
    shortName: shortName,
    showTooltip: showTooltip,
    size: fitToHeight || defaultEmojiHeight,
    loading: true
  }), emojiRenderState === ResourcedEmojiComponentRenderStatesEnum.FALLBACK && /*#__PURE__*/React.createElement(React.Fragment, null, customFallback || fallback || shortName), emojiRenderState === ResourcedEmojiComponentRenderStatesEnum.EMOJI && optimisticEmojiDescription && /*#__PURE__*/React.createElement(Emoji, {
    emoji: optimisticEmojiDescription,
    onLoadError: handleOnLoadError,
    onLoadSuccess: handleOnLoadSuccess,
    showTooltip: showTooltip,
    fitToHeight: fitToHeight,
    autoWidth: !!emoji ? false : true,
    editorEmoji: editorEmoji
  })));
};
export default ResourcedEmojiComponent;