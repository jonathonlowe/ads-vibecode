/* EmojiUploadPreview.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import "./EmojiUploadPreview.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { PureComponent } from 'react';
import { N20, N300 } from '@atlaskit/theme/colors';
import AkButton from '@atlaskit/button/standard-button';
import Heading from '@atlaskit/heading';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import { customCategory } from '../../util/constants';
import { messages } from '../i18n';
import Emoji from './Emoji';
import EmojiErrorMessage from './EmojiErrorMessage';
import { UploadStatus } from './internal-types';
import RetryableButton from './RetryableButton';
var bigEmojiPreview = null;
var uploadAddRow = null;
var uploadPreview = null;
var uploadPreviewFooter = null;
var uploadPreviewText = null;
export var uploadPreviewTestId = 'upload-preview';
export var cancelUploadButtonTestId = 'cancel-upload-button';
var addEmojiPreviewDescriptionId = 'fabric.emoji.preview.description.id';
var EmojiUploadPreview = /*#__PURE__*/function (_PureComponent) {
  function EmojiUploadPreview() {
    _classCallCheck(this, EmojiUploadPreview);
    return _callSuper(this, EmojiUploadPreview, arguments);
  }
  _inherits(EmojiUploadPreview, _PureComponent);
  return _createClass(EmojiUploadPreview, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        name = _this$props.name,
        previewImage = _this$props.previewImage,
        uploadStatus = _this$props.uploadStatus,
        errorMessage = _this$props.errorMessage,
        onAddEmoji = _this$props.onAddEmoji,
        onUploadCancelled = _this$props.onUploadCancelled,
        intl = _this$props.intl;
      var formatMessage = intl.formatMessage;
      var emojiComponent;
      if (previewImage) {
        var emoji = {
          shortName: ":".concat(name, ":"),
          type: customCategory,
          category: customCategory,
          representation: {
            imagePath: previewImage,
            width: 24,
            height: 24
          },
          searchable: true
        };
        emojiComponent = /*#__PURE__*/React.createElement(Emoji, {
          emoji: emoji
        });
      }
      var uploading = uploadStatus === UploadStatus.Uploading;
      var retryableButtonLabel = errorMessage ? formatMessage(messages.retryLabel) : formatMessage(messages.addEmojiLabel);
      return /*#__PURE__*/React.createElement("div", {
        className: ax(["_ca0q19bv _u5f319bv _n3td19bv _19bv19bv _1e0c1txw _2lx21bp4 _4t3i53f4"])
      }, /*#__PURE__*/React.createElement("div", {
        "data-testid": uploadPreviewTestId,
        className: ax(["_2rkosqtm _ca0q19bv _u5f319bv _n3td19bv _19bv19bv _1e0c1txw _1bah1yb4 _4cvr1h6o _bfhklslw"]),
        style: {
          "--_1jkcdu5": ix("var(--ds-background-neutral, ".concat(N20, ")"))
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: ax(["_1fztdcr7 _jl6w1vvm _avw21b66 _19l3gktf _rtys12am"]),
        style: {
          "--_bbz764": ix("var(--ds-text-subtle, ".concat(N300, ")"))
        }
      }, /*#__PURE__*/React.createElement(Heading, {
        size: "xsmall"
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.emojiPreviewTitle)), /*#__PURE__*/React.createElement("div", {
        id: addEmojiPreviewDescriptionId
      }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.emojiPreview, {
        values: {
          emoji: emojiComponent
        }
      })))), /*#__PURE__*/React.createElement("div", {
        className: ax(["_19bv1b66 _19l31ylp _rtys53f4"])
      }, emojiComponent)), /*#__PURE__*/React.createElement("div", {
        className: ax(["_1e0c1txw _1bahesu3 _4cvr1h6o _ca0q19bv"])
      }, !uploading && errorMessage ? /*#__PURE__*/React.createElement(EmojiErrorMessage, {
        errorStyle: "preview",
        message: errorMessage,
        tooltip: true
      }) : null, /*#__PURE__*/React.createElement(RetryableButton, {
        label: retryableButtonLabel,
        onSubmit: onAddEmoji,
        appearance: "primary",
        loading: uploading,
        error: !!errorMessage,
        ariaDescribedBy: addEmojiPreviewDescriptionId
      }), /*#__PURE__*/React.createElement(AkButton, {
        onClick: onUploadCancelled,
        appearance: "subtle",
        isDisabled: uploading,
        testId: cancelUploadButtonTestId
      }, /*#__PURE__*/React.createElement(FormattedMessage, messages.cancelLabel))));
    }
  }]);
}(PureComponent);
export default injectIntl(EmojiUploadPreview);