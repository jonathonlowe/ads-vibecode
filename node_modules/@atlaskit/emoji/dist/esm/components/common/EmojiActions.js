/* EmojiActions.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./EmojiActions.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment, useState, useRef, memo, useLayoutEffect, useCallback } from 'react';
import { N30A } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import EmojiDeletePreview from './EmojiDeletePreview';
import EmojiUploadPicker from './EmojiUploadPicker';
import TonePreviewButton from './TonePreviewButton';
import ToneSelector from './ToneSelector';
import { EmojiPickerListSearch } from '../picker/EmojiPickerListSearch';
import { messages } from '../i18n';
import AkButton from '@atlaskit/button/standard-button';
import AddIcon from '@atlaskit/icon/core/migration/add';
import { setSkinToneAriaLabelText } from './setSkinToneAriaLabelText';
import { emojiPickerAddEmoji } from './styles';
import { DEFAULT_TONE } from '../../util/constants';
import { Box } from '@atlaskit/primitives/compiled';
var styles = {
  icon: "_18u0r5cr _2hwx1i6y"
};
var addCustomEmoji = null;
var addCustomEmojiButton = null;
var emojiActionsWrapper = null;
var emojiToneSelectorContainer = null;
var previewFooter = null;
export var emojiActionsTestId = 'emoji-actions';
export var uploadEmojiTestId = 'upload-emoji';

// Generic Type for the wrapped functional component

var AddOwnEmoji = function AddOwnEmoji(props) {
  var onOpenUpload = props.onOpenUpload,
    uploadEnabled = props.uploadEnabled;
  return /*#__PURE__*/React.createElement(Fragment, null, uploadEnabled && /*#__PURE__*/React.createElement("div", {
    "data-testid": uploadEmojiTestId,
    className: ax(["_1wpz1h6o _18u019bv _otyr19bv"])
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.addCustomEmojiLabel, function (label) {
    return /*#__PURE__*/React.createElement(AkButton, {
      onClick: onOpenUpload,
      iconBefore: /*#__PURE__*/React.createElement(Box, {
        xcss: styles.icon
      }, /*#__PURE__*/React.createElement(AddIcon, {
        LEGACY_margin: "0 ".concat("var(--ds-space-025, 2px)", " 0 ", "var(--ds-space-050, 4px)"),
        color: "currentColor",
        label: "",
        LEGACY_size: "small"
      })),
      appearance: "subtle"
      // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
      ,

      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: ax(["_p12f3sup", emojiPickerAddEmoji]),
      tabIndex: 0,
      id: "add-custom-emoji"
    }, label);
  })));
};
var TonesWrapper = function TonesWrapper(props) {
  var toneEmoji = props.toneEmoji,
    _props$selectedTone = props.selectedTone,
    selectedTone = _props$selectedTone === void 0 ? DEFAULT_TONE : _props$selectedTone,
    intl = props.intl,
    onToneOpen = props.onToneOpen,
    showToneSelector = props.showToneSelector;
  var formatMessage = intl.formatMessage;
  var tonePreviewButtonRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    focusTonePreviewButton = _useState2[0],
    setFocusTonePreviewButton = _useState2[1];
  useLayoutEffect(function () {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 || _tonePreviewButtonRef.focus();
    }
    return function () {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  var onToneCloseHandler = useCallback(function () {
    var onToneClose = props.onToneClose;
    onToneClose();
    setFocusTonePreviewButton(true);
  }, [props]);
  var onToneSelectedHandler = useCallback(function (toneValue) {
    var onToneSelected = props.onToneSelected;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  }, [props]);
  if (!toneEmoji) {
    return null;
  }
  var previewToneEmoji = toneEmoji;
  if (selectedTone !== DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlkb7n _1o9zkb7n _i0dlf1ug _ca0q1skh _u5f319bv _n3td1crf _19bvidpf _1e0c1txw _1bahesu3"])
  }, /*#__PURE__*/React.createElement(ToneSelector, {
    emoji: toneEmoji,
    onToneSelected: onToneSelectedHandler,
    onToneClose: onToneCloseHandler,
    selectedTone: selectedTone,
    isVisible: showToneSelector
  }), /*#__PURE__*/React.createElement(TonePreviewButton, {
    ref: tonePreviewButtonRef,
    ariaExpanded: showToneSelector,
    emoji: previewToneEmoji,
    selectOnHover: true,
    onSelected: onToneOpen,
    ariaLabelText: formatMessage(messages.emojiSelectSkinToneButtonAriaLabelText, {
      selectedTone: "".concat(setSkinToneAriaLabelText(previewToneEmoji.name))
    }),
    isVisible: !showToneSelector
  }));
};
export var EmojiActions = function EmojiActions(props) {
  var onToneSelected = props.onToneSelected,
    onToneSelectorCancelled = props.onToneSelectorCancelled,
    initialUploadName = props.initialUploadName,
    onUploadCancelled = props.onUploadCancelled,
    onCloseDelete = props.onCloseDelete,
    onDeleteEmoji = props.onDeleteEmoji,
    onUploadEmoji = props.onUploadEmoji,
    uploadErrorMessage = props.uploadErrorMessage,
    uploading = props.uploading,
    onFileChooserClicked = props.onFileChooserClicked,
    emojiToDelete = props.emojiToDelete,
    onChange = props.onChange,
    query = props.query,
    _props$resultsCount = props.resultsCount,
    resultsCount = _props$resultsCount === void 0 ? 0 : _props$resultsCount;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showToneSelector = _useState4[0],
    setShowToneSelector = _useState4[1];
  var onToneOpenHandler = useCallback(function () {
    return setShowToneSelector(true);
  }, []);
  var onToneCloseHandler = useCallback(function () {
    return setShowToneSelector(false);
  }, []);
  var onToneSelectedHandler = useCallback(function (toneValue) {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  }, [onToneSelected]);
  var onMouseLeaveHandler = useCallback(function () {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  }, [showToneSelector, onToneSelectorCancelled]);
  if (uploading) {
    return /*#__PURE__*/React.createElement("div", {
      className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
      style: {
        "--_m6cf7x": ix("2px solid ".concat("var(--ds-border, ".concat(N30A, ")"))),
        "--_p4h2oc": ix("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
      }
    }, /*#__PURE__*/React.createElement(EmojiUploadPicker, {
      onUploadCancelled: onUploadCancelled,
      onUploadEmoji: onUploadEmoji,
      onFileChooserClicked: onFileChooserClicked,
      errorMessage: uploadErrorMessage,
      initialUploadName: initialUploadName
    }));
  }
  if (emojiToDelete) {
    return /*#__PURE__*/React.createElement("div", {
      className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
      style: {
        "--_m6cf7x": ix("2px solid ".concat("var(--ds-border, ".concat(N30A, ")"))),
        "--_p4h2oc": ix("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
      }
    }, /*#__PURE__*/React.createElement(EmojiDeletePreview, {
      emoji: emojiToDelete,
      onDeleteEmoji: onDeleteEmoji,
      onCloseDelete: onCloseDelete
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": emojiActionsTestId,
    onMouseLeave: onMouseLeaveHandler,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
    style: {
      "--_m6cf7x": ix("2px solid ".concat("var(--ds-border, ".concat(N30A, ")"))),
      "--_p4h2oc": ix("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: ax(["_1e0c1txw _1bahesu3 _4cvr1h6o"])
  }, /*#__PURE__*/React.createElement(EmojiPickerListSearch, {
    onChange: onChange,
    query: query,
    resultsCount: resultsCount,
    isVisible: !showToneSelector
  }), /*#__PURE__*/React.createElement(TonesWrapper, _extends({}, props, {
    onToneOpen: onToneOpenHandler,
    onToneClose: onToneCloseHandler,
    onToneSelected: onToneSelectedHandler,
    showToneSelector: showToneSelector
  }))), /*#__PURE__*/React.createElement(AddOwnEmoji, props));
};
export default injectIntl( /*#__PURE__*/memo(EmojiActions));