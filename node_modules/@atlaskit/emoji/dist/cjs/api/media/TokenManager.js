"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EXPIRES_AT_LATENCY_IN_SECONDS = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utilServiceSupport = require("@atlaskit/util-service-support");
// expire 30 seconds early to factor in latency, slow services, etc
var EXPIRES_AT_LATENCY_IN_SECONDS = exports.EXPIRES_AT_LATENCY_IN_SECONDS = 30;
var TokenManager = exports.default = /*#__PURE__*/function () {
  function TokenManager(siteServiceConfig) {
    (0, _classCallCheck2.default)(this, TokenManager);
    this.siteServiceConfig = siteServiceConfig;
    this.tokens = new Map();
  }
  return (0, _createClass2.default)(TokenManager, [{
    key: "isValidToken",
    value: function isValidToken(mediaApiToken) {
      var nowInSeconds = Date.now() / 1000;
      var expiresAt = mediaApiToken.expiresAt - EXPIRES_AT_LATENCY_IN_SECONDS;
      if (nowInSeconds < expiresAt) {
        return true;
      }
      return false;
    }
  }, {
    key: "fetchNewToken",
    value: function fetchNewToken(type) {
      return _utilServiceSupport.utils.requestService(this.siteServiceConfig, {
        path: "token/".concat(type)
      });
    }
  }, {
    key: "addToken",
    value: function addToken(type, mediaApiToken) {
      this.tokens.set(type, {
        mediaApiToken: mediaApiToken
      });
    }
  }, {
    key: "getToken",
    value: function getToken(type, forceRefresh) {
      var tokenDetail = this.tokens.get(type);
      if (!tokenDetail) {
        tokenDetail = {};
        this.tokens.set(type, tokenDetail);
      }
      var _tokenDetail = tokenDetail,
        mediaApiToken = _tokenDetail.mediaApiToken,
        activeTokenRefresh = _tokenDetail.activeTokenRefresh;
      if (mediaApiToken) {
        if (this.isValidToken(mediaApiToken) && !forceRefresh) {
          // still valid
          return Promise.resolve(mediaApiToken);
        }
      }
      if (activeTokenRefresh) {
        // refresh token promise already active, return that
        return activeTokenRefresh;
      }

      // request a new token and track the promise for future requests until completed
      tokenDetail.activeTokenRefresh = this.fetchNewToken(type).then(function (token) {
        tokenDetail.mediaApiToken = token;
        tokenDetail.activeTokenRefresh = undefined;
        return token;
      });
      return tokenDetail.activeTokenRefresh;
    }
  }]);
}();