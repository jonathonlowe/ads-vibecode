/* EmojiPickerTabPanel.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./EmojiPickerTabPanel.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _visuallyHidden = _interopRequireDefault(require("@atlaskit/visually-hidden"));
var _reactIntlNext = require("react-intl-next");
var _i18n = require("../i18n");
var _EmojiPickerList = require("./EmojiPickerList");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var emojiPickerList = null;

/**
 * TODO: have to use class component here as unit test is relying on ref.root. Will refactor this whole file + EmojiPickerList to functional component in future
 * ticket: COLLAB-2317
 */
var EmojiPickerTabPanelInternal = /*#__PURE__*/function (_PureComponent) {
  function EmojiPickerTabPanelInternal() {
    (0, _classCallCheck2.default)(this, EmojiPickerTabPanelInternal);
    return _callSuper(this, EmojiPickerTabPanelInternal, arguments);
  }
  (0, _inherits2.default)(EmojiPickerTabPanelInternal, _PureComponent);
  return (0, _createClass2.default)(EmojiPickerTabPanelInternal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        formatMessage = _this$props.intl.formatMessage,
        children = _this$props.children,
        showSearchResults = _this$props.showSearchResults;
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: "root",
        "data-testid": _EmojiPickerList.RENDER_EMOJI_PICKER_LIST_TESTID,
        id: _EmojiPickerList.RENDER_EMOJI_PICKER_LIST_TESTID,
        role: "tabpanel",
        "aria-label": formatMessage(_i18n.messages.emojiPickerListPanel),
        className: (0, _runtime.ax)(["_16jlkb7n _1o9zkb7n _i0dl1wug _1e0c1txw _2lx21bp4 _4t3iidpf"])
      }, /*#__PURE__*/_react.default.createElement(_visuallyHidden.default, {
        id: "emoji-picker-table-description"
      }, formatMessage(_i18n.messages.emojiPickerGrid, {
        showSearchResults: showSearchResults
      })), children);
    }
  }]);
}(_react.PureComponent);
var _default = exports.default = (0, _reactIntlNext.injectIntl)(EmojiPickerTabPanelInternal);