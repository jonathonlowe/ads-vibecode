/* TonePreviewButton.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tonePreviewTestId = exports.default = exports.TonePreviewButton = void 0;
require("./TonePreviewButton.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _colors = require("@atlaskit/theme/colors");
var _Emoji = _interopRequireDefault(require("./Emoji"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var tonePreviewTestId = exports.tonePreviewTestId = 'tone-preview';
var emojiButton = null;
var hidden = null;
var TonePreviewButton = exports.TonePreviewButton = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var emoji = props.emoji,
    selectOnHover = props.selectOnHover,
    ariaLabelText = props.ariaLabelText,
    ariaExpanded = props.ariaExpanded,
    onSelected = props.onSelected,
    _props$isVisible = props.isVisible,
    isVisible = _props$isVisible === void 0 ? true : _props$isVisible;
  return /*#__PURE__*/React.createElement("button", {
    ref: ref,
    onClick: onSelected,
    "aria-label": ariaLabelText,
    "aria-expanded": ariaExpanded,
    "aria-controls": "emoji-picker-tone-selector"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,

    "data-testid": tonePreviewTestId,
    type: "button",
    className: (0, _runtime.ax)(["_19itidpf _2rkosqtm _ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _bfhk1j28 _80omtlke _kqswh2mm _1e0c1o8l _lev4idpf _1cx6idpf _tyukidpf _2ewlidpf _11bcidpf _dqozglyw _1at812x7 _1cjo12x7 _1yg612x7 _hjaq12x7 _hlt21tcg _1s3c1tcg _1i911tcg _1ye71tcg _nt751r31 _49pcglyw _1hvw1o36 _7ehi1r2v _491113zc", !isVisible && "_tzy4idpf _3um015vq _1e0cglyw"]),
    style: {
      overflow: 'hidden',
      "--_1rebzxw": (0, _runtime.ix)("0 0 0 2px ".concat("var(--ds-border-focused, ".concat(_colors.B100, ")")))
    }
  }, /*#__PURE__*/React.createElement(_Emoji.default, {
    emoji: emoji,
    selectOnHover: selectOnHover,
    shouldBeInteractive: false,
    "aria-hidden": true
  }));
});
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(TonePreviewButton);