/* EmojiActions.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadEmojiTestId = exports.emojiActionsTestId = exports.default = exports.EmojiActions = void 0;
require("./EmojiActions.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _colors = require("@atlaskit/theme/colors");
var _reactIntlNext = require("react-intl-next");
var _EmojiDeletePreview = _interopRequireDefault(require("./EmojiDeletePreview"));
var _EmojiUploadPicker = _interopRequireDefault(require("./EmojiUploadPicker"));
var _TonePreviewButton = _interopRequireDefault(require("./TonePreviewButton"));
var _ToneSelector = _interopRequireDefault(require("./ToneSelector"));
var _EmojiPickerListSearch = require("../picker/EmojiPickerListSearch");
var _i18n = require("../i18n");
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _add = _interopRequireDefault(require("@atlaskit/icon/core/migration/add"));
var _setSkinToneAriaLabelText = require("./setSkinToneAriaLabelText");
var _styles = require("./styles");
var _constants = require("../../util/constants");
var _compiled = require("@atlaskit/primitives/compiled");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  icon: "_18u0r5cr _2hwx1i6y"
};
var addCustomEmoji = null;
var addCustomEmojiButton = null;
var emojiActionsWrapper = null;
var emojiToneSelectorContainer = null;
var previewFooter = null;
var emojiActionsTestId = exports.emojiActionsTestId = 'emoji-actions';
var uploadEmojiTestId = exports.uploadEmojiTestId = 'upload-emoji';

// Generic Type for the wrapped functional component

var AddOwnEmoji = function AddOwnEmoji(props) {
  var onOpenUpload = props.onOpenUpload,
    uploadEnabled = props.uploadEnabled;
  return /*#__PURE__*/React.createElement(_react.Fragment, null, uploadEnabled && /*#__PURE__*/React.createElement("div", {
    "data-testid": uploadEmojiTestId,
    className: (0, _runtime.ax)(["_1wpz1h6o _18u019bv _otyr19bv"])
  }, /*#__PURE__*/React.createElement(_reactIntlNext.FormattedMessage, _i18n.messages.addCustomEmojiLabel, function (label) {
    return /*#__PURE__*/React.createElement(_standardButton.default, {
      onClick: onOpenUpload,
      iconBefore: /*#__PURE__*/React.createElement(_compiled.Box, {
        xcss: styles.icon
      }, /*#__PURE__*/React.createElement(_add.default, {
        LEGACY_margin: "0 ".concat("var(--ds-space-025, 2px)", " 0 ", "var(--ds-space-050, 4px)"),
        color: "currentColor",
        label: "",
        LEGACY_size: "small"
      })),
      appearance: "subtle"
      // TODO: (from codemod) Buttons with "component", "css" or "style" prop can't be automatically migrated with codemods. Please migrate it manually.
      ,

      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: (0, _runtime.ax)(["_p12f3sup", _styles.emojiPickerAddEmoji]),
      tabIndex: 0,
      id: "add-custom-emoji"
    }, label);
  })));
};
var TonesWrapper = function TonesWrapper(props) {
  var toneEmoji = props.toneEmoji,
    _props$selectedTone = props.selectedTone,
    selectedTone = _props$selectedTone === void 0 ? _constants.DEFAULT_TONE : _props$selectedTone,
    intl = props.intl,
    onToneOpen = props.onToneOpen,
    showToneSelector = props.showToneSelector;
  var formatMessage = intl.formatMessage;
  var tonePreviewButtonRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    focusTonePreviewButton = _useState2[0],
    setFocusTonePreviewButton = _useState2[1];
  (0, _react.useLayoutEffect)(function () {
    if (focusTonePreviewButton && !showToneSelector) {
      var _tonePreviewButtonRef;
      (_tonePreviewButtonRef = tonePreviewButtonRef.current) === null || _tonePreviewButtonRef === void 0 || _tonePreviewButtonRef.focus();
    }
    return function () {
      setFocusTonePreviewButton(false);
    };
  }, [focusTonePreviewButton, showToneSelector]);
  var onToneCloseHandler = (0, _react.useCallback)(function () {
    var onToneClose = props.onToneClose;
    onToneClose();
    setFocusTonePreviewButton(true);
  }, [props]);
  var onToneSelectedHandler = (0, _react.useCallback)(function (toneValue) {
    var onToneSelected = props.onToneSelected;
    onToneSelected(toneValue);
    setFocusTonePreviewButton(true);
  }, [props]);
  if (!toneEmoji) {
    return null;
  }
  var previewToneEmoji = toneEmoji;
  if (selectedTone !== _constants.DEFAULT_TONE && previewToneEmoji.skinVariations) {
    previewToneEmoji = previewToneEmoji.skinVariations[selectedTone - 1];
  }
  return /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)(["_16jlkb7n _1o9zkb7n _i0dlf1ug _ca0q1skh _u5f319bv _n3td1crf _19bvidpf _1e0c1txw _1bahesu3"])
  }, /*#__PURE__*/React.createElement(_ToneSelector.default, {
    emoji: toneEmoji,
    onToneSelected: onToneSelectedHandler,
    onToneClose: onToneCloseHandler,
    selectedTone: selectedTone,
    isVisible: showToneSelector
  }), /*#__PURE__*/React.createElement(_TonePreviewButton.default, {
    ref: tonePreviewButtonRef,
    ariaExpanded: showToneSelector,
    emoji: previewToneEmoji,
    selectOnHover: true,
    onSelected: onToneOpen,
    ariaLabelText: formatMessage(_i18n.messages.emojiSelectSkinToneButtonAriaLabelText, {
      selectedTone: "".concat((0, _setSkinToneAriaLabelText.setSkinToneAriaLabelText)(previewToneEmoji.name))
    }),
    isVisible: !showToneSelector
  }));
};
var EmojiActions = exports.EmojiActions = function EmojiActions(props) {
  var onToneSelected = props.onToneSelected,
    onToneSelectorCancelled = props.onToneSelectorCancelled,
    initialUploadName = props.initialUploadName,
    onUploadCancelled = props.onUploadCancelled,
    onCloseDelete = props.onCloseDelete,
    onDeleteEmoji = props.onDeleteEmoji,
    onUploadEmoji = props.onUploadEmoji,
    uploadErrorMessage = props.uploadErrorMessage,
    uploading = props.uploading,
    onFileChooserClicked = props.onFileChooserClicked,
    emojiToDelete = props.emojiToDelete,
    onChange = props.onChange,
    query = props.query,
    _props$resultsCount = props.resultsCount,
    resultsCount = _props$resultsCount === void 0 ? 0 : _props$resultsCount;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showToneSelector = _useState4[0],
    setShowToneSelector = _useState4[1];
  var onToneOpenHandler = (0, _react.useCallback)(function () {
    return setShowToneSelector(true);
  }, []);
  var onToneCloseHandler = (0, _react.useCallback)(function () {
    return setShowToneSelector(false);
  }, []);
  var onToneSelectedHandler = (0, _react.useCallback)(function (toneValue) {
    setShowToneSelector(false);
    if (onToneSelected) {
      onToneSelected(toneValue);
    }
  }, [onToneSelected]);
  var onMouseLeaveHandler = (0, _react.useCallback)(function () {
    if (showToneSelector && onToneSelectorCancelled) {
      onToneSelectorCancelled();
    }
    setShowToneSelector(false);
  }, [showToneSelector, onToneSelectorCancelled]);
  if (uploading) {
    return /*#__PURE__*/React.createElement("div", {
      className: (0, _runtime.ax)(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
      style: {
        "--_m6cf7x": (0, _runtime.ix)("2px solid ".concat("var(--ds-border, ".concat(_colors.N30A, ")"))),
        "--_p4h2oc": (0, _runtime.ix)("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
      }
    }, /*#__PURE__*/React.createElement(_EmojiUploadPicker.default, {
      onUploadCancelled: onUploadCancelled,
      onUploadEmoji: onUploadEmoji,
      onFileChooserClicked: onFileChooserClicked,
      errorMessage: uploadErrorMessage,
      initialUploadName: initialUploadName
    }));
  }
  if (emojiToDelete) {
    return /*#__PURE__*/React.createElement("div", {
      className: (0, _runtime.ax)(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
      style: {
        "--_m6cf7x": (0, _runtime.ix)("2px solid ".concat("var(--ds-border, ".concat(_colors.N30A, ")"))),
        "--_p4h2oc": (0, _runtime.ix)("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
      }
    }, /*#__PURE__*/React.createElement(_EmojiDeletePreview.default, {
      emoji: emojiToDelete,
      onDeleteEmoji: onDeleteEmoji,
      onCloseDelete: onCloseDelete
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": emojiActionsTestId,
    onMouseLeave: onMouseLeaveHandler,
    className: (0, _runtime.ax)(["_16jlidpf _1o9zidpf _i0dl1wug _n7zl18ew _16qs1qod"]),
    style: {
      "--_m6cf7x": (0, _runtime.ix)("2px solid ".concat("var(--ds-border, ".concat(_colors.N30A, ")"))),
      "--_p4h2oc": (0, _runtime.ix)("0px 1px 1px 0px ".concat("var(--ds-border, rgba(0, 0, 0, 0.1))"))
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)(["_1e0c1txw _1bahesu3 _4cvr1h6o"])
  }, /*#__PURE__*/React.createElement(_EmojiPickerListSearch.EmojiPickerListSearch, {
    onChange: onChange,
    query: query,
    resultsCount: resultsCount,
    isVisible: !showToneSelector
  }), /*#__PURE__*/React.createElement(TonesWrapper, (0, _extends2.default)({}, props, {
    onToneOpen: onToneOpenHandler,
    onToneClose: onToneCloseHandler,
    onToneSelected: onToneSelectedHandler,
    showToneSelector: showToneSelector
  }))), /*#__PURE__*/React.createElement(AddOwnEmoji, props));
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)( /*#__PURE__*/(0, _react.memo)(EmojiActions));