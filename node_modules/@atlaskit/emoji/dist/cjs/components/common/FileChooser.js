"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileUploadInputTestId = exports.default = exports.chooseFileButtonTestId = void 0;
var _react = _interopRequireWildcard(require("react"));
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var chooseFileButtonTestId = exports.chooseFileButtonTestId = 'choose-file-button';
var fileUploadInputTestId = exports.fileUploadInputTestId = 'file-upload';
var FileChooser = function FileChooser(props) {
  var accept = props.accept,
    ariaDescribedBy = props.ariaDescribedBy,
    isDisabled = props.isDisabled,
    label = props.label,
    onChange = props.onChange,
    onClick = props.onClick;
  var filePickerRef = (0, _react.useRef)(null);
  var fileButtonRef = (0, _react.useRef)(null);
  var handleOnChooseFile = function handleOnChooseFile() {
    var _fileButtonRef$curren;
    if (!filePickerRef.current) {
      return;
    }
    if (onClick) {
      onClick();
    }
    filePickerRef.current.click();
    (_fileButtonRef$curren = fileButtonRef.current) === null || _fileButtonRef$curren === void 0 || _fileButtonRef$curren.focus();
  };
  return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_new.default, {
    onClick: handleOnChooseFile,
    isDisabled: isDisabled,
    "aria-describedby": ariaDescribedBy,
    testId: chooseFileButtonTestId,
    ref: fileButtonRef
  }, label), /*#__PURE__*/_react.default.createElement("input", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: "emojiUploadFileInput",
    ref: filePickerRef,
    onChange: onChange,
    type: "file",
    accept: accept
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      display: 'none'
    },
    "data-testid": fileUploadInputTestId
  }));
};
var _default = exports.default = FileChooser;