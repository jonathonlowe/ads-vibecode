"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadEmoji = void 0;
var _EmojiResource = require("../../api/EmojiResource");
var _analytics = require("../../util/analytics");
var _i18n = require("../i18n");
var _ufoExperiences = require("../../util/analytics/ufoExperiences");
var _analytics2 = require("../../util/analytics/analytics");
var uploadEmoji = exports.uploadEmoji = function uploadEmoji(upload, emojiProvider, errorSetter, onSuccess, fireAnalytics, retry) {
  var startTime = Date.now();
  errorSetter(undefined);
  if ((0, _EmojiResource.supportsUploadFeature)(emojiProvider)) {
    _ufoExperiences.ufoExperiences['emoji-uploaded'].start();
    emojiProvider.uploadCustomEmoji(upload, retry).then(function (emojiDescription) {
      fireAnalytics((0, _analytics.uploadSucceededEvent)({
        duration: Date.now() - startTime
      }));
      onSuccess(emojiDescription);
      _ufoExperiences.ufoExperiences['emoji-uploaded'].success();
    }).catch(function (err) {
      var isTimeout = err instanceof Error && err.message === 'uploadCustomEmoji timed out';
      var errMsg = isTimeout ? _i18n.messages.emojiUploadTimeout : _i18n.messages.emojiUploadFailed;
      errorSetter(errMsg);

      // eslint-disable-next-line no-console
      console.error('Unable to upload emoji', err);
      fireAnalytics((0, _analytics.uploadFailedEvent)({
        duration: Date.now() - startTime,
        reason: errMsg.defaultMessage
      }));
      _ufoExperiences.ufoExperiences['emoji-uploaded'].failure({
        metadata: {
          source: 'UploadEmoji',
          error: (0, _analytics2.extractErrorInfo)(err)
        }
      });
    });
  }
};