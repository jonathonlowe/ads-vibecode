"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _sharedStyles = require("../../util/shared-styles");
var _typeHelpers = require("../../util/type-helpers");
var _logger = _interopRequireDefault(require("../../util/logger"));
var _mouse = require("../../util/mouse");
var _Scrollable = _interopRequireDefault(require("../common/Scrollable"));
var _EmojiTypeAheadItem = _interopRequireDefault(require("./EmojiTypeAheadItem"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _EmojiTypeAheadListContainer = require("./EmojiTypeAheadListContainer");
var _EmojiTypeAheadSpinner = require("./EmojiTypeAheadSpinner");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function wrapIndex(emojis, index) {
  var len = emojis.length;
  var newIndex = index;
  while (newIndex < 0 && len > 0) {
    newIndex += len;
  }
  return newIndex % len;
}
function getKey(emoji) {
  return emoji.id || "".concat(emoji.shortName, "-").concat(emoji.type);
}
function getKeyByIndex(emojis, index) {
  var emoji = emojis && emojis[index];
  if (emoji) {
    return getKey(emoji);
  }
  return undefined;
}
var EmojiTypeAheadList = exports.default = /*#__PURE__*/function (_PureComponent) {
  function EmojiTypeAheadList(props) {
    var _this;
    (0, _classCallCheck2.default)(this, EmojiTypeAheadList);
    _this = _callSuper(this, EmojiTypeAheadList, [props]);
    // API
    (0, _defineProperty2.default)(_this, "selectNext", function () {
      var newIndex = wrapIndex(_this.props.emojis, _this.state.selectedIndex + 1);
      _this.selectIndex(newIndex);
    });
    (0, _defineProperty2.default)(_this, "selectPrevious", function () {
      var newIndex = wrapIndex(_this.props.emojis, _this.state.selectedIndex - 1);
      _this.selectIndex(newIndex);
    });
    (0, _defineProperty2.default)(_this, "chooseCurrentSelection", function () {
      var _this$props = _this.props,
        emojis = _this$props.emojis,
        onEmojiSelected = _this$props.onEmojiSelected;
      var selectedIndex = _this.state.selectedIndex;
      var selectedEmoji = emojis[selectedIndex];
      (0, _logger.default)('ak-typeahead-list.chooseCurrentSelection', selectedEmoji);
      if (onEmojiSelected) {
        onEmojiSelected((0, _typeHelpers.toEmojiId)(selectedEmoji), selectedEmoji);
      }
    });
    (0, _defineProperty2.default)(_this, "selectIndexOnHover", function (emojiId, _emoji, event) {
      // TODO: fix this
      if (!event) {
        return;
      }
      var mousePosition = (0, _mouse.mouseLocation)(event);
      if ((0, _mouse.actualMouseMove)(_this.lastMousePosition, mousePosition)) {
        _this.selectByEmojiId(emojiId);
      }
      _this.lastMousePosition = mousePosition;
    });
    (0, _defineProperty2.default)(_this, "itemSelected", function (emojiId) {
      _this.selectByEmojiId(emojiId, function () {
        _this.chooseCurrentSelection();
      });
    });
    (0, _defineProperty2.default)(_this, "handleScrollableRef", function (ref) {
      _this.scrollable = ref;
    });
    _this.state = {
      selectedKey: getKeyByIndex(props.emojis, 0),
      selectedIndex: 0
    };
    return _this;
  }
  (0, _inherits2.default)(EmojiTypeAheadList, _PureComponent);
  return (0, _createClass2.default)(EmojiTypeAheadList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!(0, _platformFeatureFlags.fg)('platform_editor_react18_elements_emoji') || !(0, _platformFeatureFlags.fg)('platform_editor_react18_elements_emoji_jira_bb')) {
        // adjust selection
        var emojis = nextProps.emojis;
        var selectedKey = this.state.selectedKey;
        if (!selectedKey) {
          // go with default of selecting first item
          return;
        }
        for (var i = 0; i < emojis.length; i++) {
          if (selectedKey === emojis[i].id) {
            this.setState({
              selectedIndex: i
            });
            return;
          }
        }
        // existing selection not in results, pick first
        this.selectIndexNewEmoji(0, emojis);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var emojis = this.props.emojis;
      var _this$state = this.state,
        selectedIndex = _this$state.selectedIndex,
        selectedKey = _this$state.selectedKey;
      if (emojis && emojis[selectedIndex]) {
        var selectedEmoji = emojis[selectedIndex];
        this.revealItem(selectedEmoji.id || selectedEmoji.shortName);
      }
      if ((0, _platformFeatureFlags.fg)('platform_editor_react18_elements_emoji') || (0, _platformFeatureFlags.fg)('platform_editor_react18_elements_emoji_jira_bb')) {
        if (prevProps !== this.props) {
          // adjust selection
          if (!selectedKey) {
            // go with default of selecting first item
            return;
          }
          for (var i = 0; i < emojis.length; i++) {
            if (selectedKey === emojis[i].id) {
              this.setState({
                selectedIndex: i
              });
              return;
            }
          }
          // existing selection not in results, pick first
          this.selectIndexNewEmoji(0, emojis);
        }
      }
    }
  }, {
    key: "revealItem",
    value:
    // Internal
    function revealItem(key) {
      var item = this.items[key];
      if (item && this.scrollable) {
        this.scrollable.reveal(item);
      }
    }
  }, {
    key: "selectIndexNewEmoji",
    value: function selectIndexNewEmoji(index, emojis) {
      this.setState({
        selectedIndex: index,
        selectedKey: getKeyByIndex(emojis, index)
      });
    }
  }, {
    key: "selectIndex",
    value: function selectIndex(index, callback) {
      var emojis = this.props.emojis;
      this.setState({
        selectedIndex: index,
        selectedKey: getKeyByIndex(emojis, index)
      }, callback);
    }
  }, {
    key: "selectByEmojiId",
    value: function selectByEmojiId(emojiId, callback) {
      var emojis = this.props.emojis;
      for (var i = 0; i < emojis.length; i++) {
        var emoji = emojis[i];
        if (emoji.id === emojiId.id) {
          this.selectIndex(i, callback);
          return;
        }
      }
      for (var _i = 0; _i < emojis.length; _i++) {
        var _emoji2 = emojis[_i];
        if (_emoji2.shortName === emojiId.shortName) {
          this.selectIndex(_i, callback);
          return;
        }
      }
    }
  }, {
    key: "renderItems",
    value: function renderItems(emojis) {
      var _this2 = this;
      if (emojis && emojis.length) {
        this.items = {};
        return /*#__PURE__*/_react.default.createElement("div", null, emojis.map(function (emoji, idx) {
          var key = getKey(emoji);
          var item = /*#__PURE__*/_react.default.createElement(_EmojiTypeAheadItem.default, {
            emoji: emoji,
            key: key,
            selected: _this2.isSelectedEmoji(emoji, idx),
            onMouseMove: _this2.selectIndexOnHover,
            onSelection: _this2.itemSelected,
            ref: function ref(_ref) {
              if (_ref) {
                _this2.items[key] = _ref;
              } else {
                delete _this2.items[key];
              }
            }
          });
          return item;
        }));
      }
      return null;
    }
  }, {
    key: "isSelectedEmoji",
    value: function isSelectedEmoji(emoji, index) {
      var selectedKey = this.state.selectedKey;
      return selectedKey ? selectedKey === emoji.id : index === 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        emojis = _this$props2.emojis,
        loading = _this$props2.loading;
      var hasEmoji = emojis && emojis.length > 0;
      var listBody = loading ? /*#__PURE__*/_react.default.createElement(_EmojiTypeAheadSpinner.EmojiTypeAheadSpinner, null) : this.renderItems(emojis);
      return /*#__PURE__*/_react.default.createElement(_EmojiTypeAheadListContainer.EmojiTypeAheadListContainer, {
        hasEmoji: hasEmoji,
        loading: loading
      }, /*#__PURE__*/_react.default.createElement(_Scrollable.default, {
        ref: this.handleScrollableRef,
        maxHeight: "".concat(_sharedStyles.emojiTypeAheadMaxHeight, "px")
      }, listBody));
    }
  }]);
}(_react.PureComponent);
(0, _defineProperty2.default)(EmojiTypeAheadList, "defaultProps", {
  onEmojiSelected: function onEmojiSelected() {}
});