"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toOptionalEmojiId = exports.toEmojiId = exports.isSpriteServiceRepresentation = exports.isSpriteRepresentation = exports.isPromise = exports.isMessagesKey = exports.isMediaRepresentation = exports.isMediaEmoji = exports.isLoadedMediaEmoji = exports.isImageRepresentation = exports.isEmojiVariationDescription = exports.isEmojiIdEqual = exports.isEmojiDescriptionWithVariations = exports.isEmojiDescription = exports.hasDataURLImage = exports.getCategoryId = exports.convertMediaToImageRepresentation = exports.convertMediaToImageEmoji = exports.convertImageToMediaRepresentation = exports.containsEmojiId = exports.buildEmojiDescriptionWithAltRepresentation = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("../components/i18n");
var _constants = require("./constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isSpriteServiceRepresentation = exports.isSpriteServiceRepresentation = function isSpriteServiceRepresentation(rep) {
  return !!(rep && rep.spriteRef);
};
var isSpriteRepresentation = exports.isSpriteRepresentation = function isSpriteRepresentation(rep) {
  return !!(rep && rep.sprite);
};
var isImageRepresentation = exports.isImageRepresentation = function isImageRepresentation(rep) {
  return !!(rep && rep.imagePath);
};
var isMediaRepresentation = exports.isMediaRepresentation = function isMediaRepresentation(rep) {
  return !!(rep && rep.mediaPath);
};
var isPromise = exports.isPromise = function isPromise(p) {
  return !!(p && p.then);
};
var isEmojiDescription = exports.isEmojiDescription = function isEmojiDescription(possibleEmojiDescription) {
  return possibleEmojiDescription && possibleEmojiDescription.shortName && possibleEmojiDescription.type;
};
var isMediaEmoji = exports.isMediaEmoji = function isMediaEmoji(emoji) {
  return isMediaRepresentation(emoji.representation);
};
var hasDataURLImage = exports.hasDataURLImage = function hasDataURLImage(rep) {
  return isImageRepresentation(rep) && rep.imagePath.indexOf(_constants.dataURLPrefix) === 0;
};
var isLoadedMediaEmoji = exports.isLoadedMediaEmoji = function isLoadedMediaEmoji(emoji) {
  return emoji.category === _constants.customCategory && hasDataURLImage(emoji.representation);
};
var isEmojiDescriptionWithVariations = exports.isEmojiDescriptionWithVariations = function isEmojiDescriptionWithVariations(emoji) {
  return !!(emoji && emoji.skinVariations);
};
var isEmojiVariationDescription = exports.isEmojiVariationDescription = function isEmojiVariationDescription(object) {
  return 'baseId' in object;
};
var isMessagesKey = exports.isMessagesKey = function isMessagesKey(key) {
  return key in _i18n.messages;
};
var toEmojiId = exports.toEmojiId = function toEmojiId(emoji) {
  return {
    shortName: emoji.shortName,
    id: emoji.id,
    fallback: emoji.fallback
  };
};
var toOptionalEmojiId = exports.toOptionalEmojiId = function toOptionalEmojiId(emoji) {
  if (!emoji) {
    return undefined;
  }
  return toEmojiId(emoji);
};
var isEmojiIdEqual = exports.isEmojiIdEqual = function isEmojiIdEqual(l, r) {
  return l === r || l && r && l.id === r.id && l.shortName === r.shortName;
};
var containsEmojiId = exports.containsEmojiId = function containsEmojiId(emojis, emojiId) {
  if (!emojiId) {
    return false;
  }
  for (var i = 0; i < emojis.length; i++) {
    if (isEmojiIdEqual(emojis[i], emojiId)) {
      return true;
    }
  }
  return false;
};
var convertImageToMediaRepresentation = exports.convertImageToMediaRepresentation = function convertImageToMediaRepresentation(rep) {
  return {
    mediaPath: rep.imagePath,
    height: rep.height,
    width: rep.width
  };
};
var convertMediaToImageRepresentation = exports.convertMediaToImageRepresentation = function convertMediaToImageRepresentation(rep, newImagePath) {
  return {
    imagePath: newImagePath || rep.mediaPath,
    height: rep.height,
    width: rep.width
  };
};
var convertMediaToImageEmoji = exports.convertMediaToImageEmoji = function convertMediaToImageEmoji(emoji, newImagePath, useAlt) {
  var mediaRepresentation = emoji.representation;
  var mediaAltRepresentation = emoji.altRepresentation;
  var imgPath = !useAlt ? newImagePath : undefined;
  var altImgPath = useAlt ? newImagePath : undefined;
  if (!isMediaRepresentation(mediaRepresentation) && !isMediaRepresentation(mediaAltRepresentation)) {
    return emoji;
  }
  var representation = isMediaRepresentation(mediaRepresentation) ? convertMediaToImageRepresentation(mediaRepresentation, imgPath) : mediaRepresentation;
  var altRepresentation = isMediaRepresentation(mediaAltRepresentation) ? convertMediaToImageRepresentation(mediaAltRepresentation, altImgPath) : mediaAltRepresentation;
  var baseEmoji = _objectSpread(_objectSpread({}, emoji), {}, {
    representation: representation
  });
  return buildEmojiDescriptionWithAltRepresentation(baseEmoji, altRepresentation);
};

// Prevent altRepresentation: undefined from being returned in EmojiDescription
var buildEmojiDescriptionWithAltRepresentation = exports.buildEmojiDescriptionWithAltRepresentation = function buildEmojiDescriptionWithAltRepresentation(emoji, altRepresentation) {
  if (!altRepresentation) {
    return emoji;
  }
  return _objectSpread(_objectSpread({}, emoji), {}, {
    altRepresentation: altRepresentation
  });
};
var getCategoryId = exports.getCategoryId = function getCategoryId(emoji) {
  return emoji.category;
};