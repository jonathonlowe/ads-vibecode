"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSampledUFOComponentExperience = void 0;
var _react = require("react");
var _samplingUfo = require("./samplingUfo");
var useConstructor = function useConstructor(callback) {
  var hasBeenFired = (0, _react.useRef)(false);
  if (!hasBeenFired.current) {
    callback();
    hasBeenFired.current = true;
  }
  return null;
};

/**
 * A hook to start an experience and to auto abort the experience when the parent component is unmounted.
 * Use this instead of a direct call to `experience.start`. If you need to restart the experience
 * simply trigger an unmount and remount of the parent component.
 * @param experience the experience to start and abort
 */
var useSampledUFOComponentExperience = exports.useSampledUFOComponentExperience = function useSampledUFOComponentExperience(experience, samplingRate, metadata) {
  (0, _react.useEffect)(function () {
    return function () {
      (0, _samplingUfo.withSampling)(experience).abort();
    };
    // we want this cleanup to only happen on unmount so this is a legit use of empty array
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useConstructor(function () {
    (0, _samplingUfo.withSampling)(experience).start({
      samplingRate: samplingRate
    });
    var isMetadataEmpty = Object.keys(experience.metadata).length === 0;
    if (metadata && isMetadataEmpty) {
      experience.addMetadata(metadata);
    }
  });
  return null;
};