"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ufoExperiences = exports.sampledUfoRenderedEmoji = exports.sampledUfoEmojiResourceFetched = exports.hasUfoMarked = void 0;
var _types = require("../../types");
var _ufo = require("@atlaskit/ufo");
var _samplingUfo = require("./samplingUfo");
var createRenderExperience = function createRenderExperience(componentName) {
  return {
    platform: {
      component: componentName
    },
    type: _ufo.ExperienceTypes.Load,
    performanceType: _ufo.ExperiencePerformanceTypes.PageSegmentLoad
  };
};
var createInlineExperience = function createInlineExperience(componentName) {
  return {
    platform: {
      component: componentName
    },
    type: _ufo.ExperienceTypes.Experience,
    performanceType: _ufo.ExperiencePerformanceTypes.InlineResult
  };
};
var customEmojiTimings = [{
  key: _types.UfoEmojiTimingsKeys.FMP,
  endMark: _types.UfoEmojiTimings.FMP_END
}, {
  key: _types.UfoEmojiTimingsKeys.METADATA,
  component: 'resourced-emoji',
  startMark: _types.UfoEmojiTimings.METADATA_START,
  endMark: _types.UfoEmojiTimings.METADATA_END
}, {
  key: _types.UfoEmojiTimingsKeys.MEDIADATA,
  component: 'caching-emoji',
  startMark: _types.UfoEmojiTimings.MEDIA_START,
  endMark: _types.UfoEmojiTimings.MEDIA_END
}, {
  key: _types.UfoEmojiTimingsKeys.MOUNTED,
  component: 'emoji',
  endMark: _types.UfoEmojiTimings.MOUNTED_END
}, {
  key: _types.UfoEmojiTimingsKeys.ONLOAD,
  startMark: _types.UfoEmojiTimings.ONLOAD_START,
  endMark: _types.UfoEmojiTimings.ONLOAD_END
}];
var ufoExperiences = exports.ufoExperiences = {
  'emoji-rendered': new _ufo.ConcurrentExperience(_types.UfoExperienceName.EMOJI_RENDERED, {
    platform: {
      component: _types.UfoComponentName.EMOJI
    },
    type: _ufo.ExperienceTypes.Operation,
    performanceType: _ufo.ExperiencePerformanceTypes.Custom,
    timings: customEmojiTimings
  }),
  'emoji-resource-fetched': new _ufo.ConcurrentExperience(_types.UfoExperienceName.EMOJI_RESOURCE_FETCHED, createRenderExperience(_types.UfoComponentName.EMOJI_PROVIDER)),
  'emoji-picker-opened': new _ufo.UFOExperience(_types.UfoExperienceName.EMOJI_PICKER_OPENED, createRenderExperience(_types.UfoComponentName.EMOJI_PICKER)),
  'emoji-selection-recorded': new _ufo.UFOExperience(_types.UfoExperienceName.EMOJI_SELECTION_RECORDED, createInlineExperience(_types.UfoComponentName.EMOJI_PROVIDER)),
  'emoji-uploaded': new _ufo.UFOExperience(_types.UfoExperienceName.EMOJI_UPLOADED, createInlineExperience(_types.UfoComponentName.EMOJI_PICKER)),
  'emoji-searched': new _ufo.UFOExperience(_types.UfoExperienceName.EMOJI_SEARCHED, createInlineExperience(_types.UfoComponentName.EMOJI_PICKER))
};
var sampledUfoRenderedEmoji = exports.sampledUfoRenderedEmoji = function sampledUfoRenderedEmoji(emojiId) {
  return (0, _samplingUfo.withSampling)(ufoExperiences['emoji-rendered'].getInstance(emojiId.id || emojiId.shortName));
};
var hasUfoMarked = exports.hasUfoMarked = function hasUfoMarked(ufoExperience, name) {
  return ufoExperience.metrics.marks.some(function (mask) {
    return mask.name === name;
  });
};
var sampledUfoEmojiResourceFetched = exports.sampledUfoEmojiResourceFetched = function sampledUfoEmojiResourceFetched(providerType) {
  return (0, _samplingUfo.withSampling)(ufoExperiences['emoji-resource-fetched'].getInstance(providerType));
};