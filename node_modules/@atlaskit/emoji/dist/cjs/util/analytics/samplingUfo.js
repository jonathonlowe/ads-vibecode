"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSampling = exports.ufoExperiencesSampled = exports.isExperienceSampled = exports.clearSampled = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var ufoExperiencesSampled = exports.ufoExperiencesSampled = {};
var clearSampled = exports.clearSampled = function clearSampled() {
  var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(ufoExperiencesSampled)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;
      delete ufoExperiencesSampled[prop];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

/**
 * A random sampling function
 * sampling algorithm is from @atlassian/jira-coinflip at https://stash.atlassian.com/projects/JIRACLOUD/repos/jira-frontend/browse/src/packages/platform/app-framework/coinflip/src/index.tsx
 * E.g. isExperienceSampled(2) will pass 50% of the time
 * @param rate The chance that it will pass (1 in <rate> times)
 * @returns bool, if it passes or not
 */
// default sampling function to determine which one to be sampled
var isExperienceSampled = exports.isExperienceSampled = function isExperienceSampled(rate) {
  if (rate === 1) {
    return true;
  }
  if (rate === 0) {
    return false;
  }
  return Math.random() * rate <= 1;
};
var hasSampledFromStart = function hasSampledFromStart(experience) {
  if (!ufoExperiencesSampled[experience.id]) {
    return false;
  }
  if (experience.instanceId) {
    // if the instance of concurrent exp has been sampled from start, allow it.
    return ufoExperiencesSampled[experience.id].sampledInstance[experience.instanceId];
  }
  return ufoExperiencesSampled[experience.id].sampled;
};

/**
 * This function is a temp solution to reduce the event traffic, as UFO package does not support it.
 *
 * e.g. Emoji Picker contains thousands of emojis, which means will trigger a large number of renderred events without sampling
 * @param ufoExperience
 * @returns
 */
var withSampling = exports.withSampling = function withSampling(ufoExperience) {
  var init = function init() {
    if (!ufoExperiencesSampled[ufoExperience.id]) {
      ufoExperiencesSampled[ufoExperience.id] = {
        sampled: false,
        sampledInstance: {}
      };
    }
  };
  var start = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options) {
      var isSampled;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!hasSampledFromStart(ufoExperience)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            isSampled = options.samplingFunc || isExperienceSampled;
            if (isSampled(options.samplingRate)) {
              _context.next = 7;
              break;
            }
            if (ufoExperience.instanceId) {
              ufoExperiencesSampled[ufoExperience.id].sampledInstance[ufoExperience.instanceId] = false;
            }
            ufoExperiencesSampled[ufoExperience.id].sampled = false;
            return _context.abrupt("return");
          case 7:
            // update sampled records
            if (ufoExperience.instanceId) {
              ufoExperiencesSampled[ufoExperience.id].sampledInstance[ufoExperience.instanceId] = true;
              ufoExperiencesSampled[ufoExperience.id].sampled = true;
            }
            return _context.abrupt("return", ufoExperience.start(options.startTime));
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function start(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var success = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(config) {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (hasSampledFromStart(ufoExperience)) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", null);
          case 2:
            return _context2.abrupt("return", ufoExperience.success(config));
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function success(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var failure = /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(config) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (hasSampledFromStart(ufoExperience)) {
              _context3.next = 2;
              break;
            }
            return _context3.abrupt("return", null);
          case 2:
            return _context3.abrupt("return", ufoExperience.failure(config));
          case 3:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function failure(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var abort = /*#__PURE__*/function () {
    var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(config) {
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (hasSampledFromStart(ufoExperience)) {
              _context4.next = 2;
              break;
            }
            return _context4.abrupt("return", null);
          case 2:
            return _context4.abrupt("return", ufoExperience.abort(config));
          case 3:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function abort(_x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  var addMetadata = function addMetadata(data) {
    if (!hasSampledFromStart(ufoExperience)) {
      return;
    }
    return ufoExperience.addMetadata(data);
  };
  var mark = function mark(name, timestamp) {
    if (!hasSampledFromStart(ufoExperience)) {
      return;
    }
    return ufoExperience.mark(name, timestamp);
  };
  var markFMP = function markFMP(timestamp) {
    if (!hasSampledFromStart(ufoExperience)) {
      return;
    }
    return ufoExperience.markFMP(timestamp);
  };
  var markInlineResponse = function markInlineResponse(timestamp) {
    if (!hasSampledFromStart(ufoExperience)) {
      return;
    }
    return ufoExperience.markInlineResponse(timestamp);
  };
  init();
  return _objectSpread(_objectSpread({}, ufoExperience), {}, {
    start: start,
    addMetadata: addMetadata,
    success: success,
    failure: failure,
    abort: abort,
    mark: mark,
    markFMP: markFMP,
    markInlineResponse: markInlineResponse
  });
};