"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEmoji = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _EmojiContext = require("../context/EmojiContext");
var supportsUploadFeature = function supportsUploadFeature(emojiProvider) {
  var emojiUploadProvider = emojiProvider;
  return !!emojiUploadProvider.isUploadSupported && !!emojiUploadProvider.uploadCustomEmoji && !!emojiUploadProvider.prepareForUpload;
};
var useEmoji = exports.useEmoji = function useEmoji() {
  var context = (0, _react.useContext)(_EmojiContext.EmojiContext);

  // Hooks API
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isUploadSupported = _useState2[0],
    setIsUploadSupported = _useState2[1];
  if (!context) {
    throw new Error('useEmoji must be used within EmojiContext');
  }
  var emojiProvider = context.emoji.emojiProvider;
  (0, _react.useEffect)(function () {
    if (supportsUploadFeature(emojiProvider)) {
      var checkIfUploadIsSupported = /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          var supported;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return emojiProvider.isUploadSupported();
              case 3:
                supported = _context.sent;
                setIsUploadSupported(supported);
                _context.next = 10;
                break;
              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                return _context.abrupt("return", false);
              case 10:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[0, 7]]);
        }));
        return function checkIfUploadIsSupported() {
          return _ref.apply(this, arguments);
        };
      }();
      checkIfUploadIsSupported();
    }
  }, [emojiProvider]);
  return {
    emojiProvider: emojiProvider,
    isUploadSupported: isUploadSupported
  };
};