import { closeHistory } from '@atlaskit/editor-prosemirror/history';
import { NodeSelection, TextSelection } from '@atlaskit/editor-prosemirror/state';
import { isGapCursorSelection } from './editor-common';
import { createInputRulePlugin } from './plugin';
const hasUnsupportedMarks = (state, start, end, marksNameUnsupported) => {
  const isUnsupportedMark = node => (marksNameUnsupported || []).includes(node.type.name);
  const $from = state.doc.resolve(start);
  const $to = state.doc.resolve(end);
  const marksInSelection = start === end ? $from.marks() : $from.marksAcross($to);
  return (marksInSelection || []).some(isUnsupportedMark);
};
const isCursorInsideUnsupportedMarks = (state, marksNameUnsupported) => {
  var _$cursor$nodeBefore, _$cursor$nodeBefore$m;
  const {
    selection
  } = state;
  if (!(selection instanceof TextSelection)) {
    return false;
  }
  const {
    $cursor
  } = selection;
  const isUnsupportedMark = node => marksNameUnsupported.includes(node.type.name);
  return Boolean($cursor === null || $cursor === void 0 ? void 0 : (_$cursor$nodeBefore = $cursor.nodeBefore) === null || _$cursor$nodeBefore === void 0 ? void 0 : (_$cursor$nodeBefore$m = _$cursor$nodeBefore.marks) === null || _$cursor$nodeBefore$m === void 0 ? void 0 : _$cursor$nodeBefore$m.some(isUnsupportedMark));
};
export const createPlugin = (pluginName, rules, options = {}) => {
  const {
    isBlockNodeRule = false,
    allowInsertTextOnDocument = true
  } = options;
  const onInputEvent = ({
    state,
    from,
    to
  }) => {
    const unsupportedMarks = isBlockNodeRule ? ['code', 'link', 'typeAheadQuery'] : ['code'];
    const $from = state.selection.$from;
    const isInline = state.selection instanceof NodeSelection && state.selection.node.type.isInline;
    if ($from.parent.type.spec.code || !(state.selection instanceof TextSelection) && !isGapCursorSelection(state.selection) && !isInline || hasUnsupportedMarks(state, from, to, unsupportedMarks) || isBlockNodeRule && isCursorInsideUnsupportedMarks(state, unsupportedMarks)) {
      return false;
    }
    return true;
  };
  return createInputRulePlugin(pluginName, rules, {
    allowInsertTextOnDocument,
    onInputEvent,
    onBeforeRegexMatch: tr => {
      closeHistory(tr);
    }
  });
};