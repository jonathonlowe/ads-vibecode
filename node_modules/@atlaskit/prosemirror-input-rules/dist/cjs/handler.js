"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInputEventHandler = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("./constants");
var _editorCommon = require("./editor-common");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var createInputEventHandler = exports.createInputEventHandler = function createInputEventHandler(_ref) {
  var rules = _ref.rules,
    pluginKey = _ref.pluginKey,
    allowInsertTextOnDocument = _ref.allowInsertTextOnDocument,
    onInputEvent = _ref.onInputEvent,
    onBeforeRegexMatch = _ref.onBeforeRegexMatch;
  return function (_ref2) {
    var view = _ref2.view,
      from = _ref2.from,
      to = _ref2.to,
      text = _ref2.text;
    if (view.composing) {
      return false;
    }
    var state = view.state;
    var $from = state.doc.resolve(from);
    if ($from.parent.type.spec.code) {
      return false;
    }
    if (onInputEvent && !onInputEvent({
      state: state,
      from: from,
      to: to
    })) {
      return false;
    }
    var textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - _constants.MAX_REGEX_MATCH), $from.parentOffset, undefined, _constants.leafNodeReplacementCharacter) + text;
    var result = findMatchOnRules({
      rules: rules,
      textBefore: textBefore,
      from: from,
      to: to,
      state: state
    });
    if (!result) {
      return false;
    }
    var tr = allowInsertTextOnDocument ? state.tr.insertText(text, from, to) : state.tr;
    tr.setMeta(_constants.TEXT_INPUT_RULE_TRANSACTION_KEY, true);
    tr.setMeta(pluginKey, {
      textInserted: text,
      from: result.from,
      to: result.to,
      matchedRule: result.matchedRule
    });
    if (onBeforeRegexMatch) {
      onBeforeRegexMatch(tr);
    }
    view.dispatch(tr);
    return true;
  };
};
function findMatchOnRules(_ref3) {
  var rules = _ref3.rules,
    textBefore = _ref3.textBefore,
    from = _ref3.from,
    to = _ref3.to,
    state = _ref3.state;
  for (var i = 0; i < rules.length; i++) {
    var _textBefore$at;
    var rule = rules[i];

    // Some plugins like Typeahead require a whitespace before a trigger character.
    // We want them to fire inside a gap cursor. Yet, a gap cursor is not considered a whitespace,
    // and `textBefore` contains the text in the previous block before the gap cursor.
    // Here is a workaround: if we inside a gap cursor, match the input rule only against the last typed character
    // (which may be a typeahead trigger) and ignore the rest.
    var matchString = (0, _editorCommon.isGapCursorSelection)(state.selection) ? (_textBefore$at = textBefore.at(-1)) !== null && _textBefore$at !== void 0 ? _textBefore$at : '' : textBefore;
    var match = rule.match.exec(matchString);
    if (!match) {
      continue;
    }
    var parentNodeStartAt = state.selection.$from.start();
    var offset = Math.max(0, state.selection.$from.parentOffset - _constants.MAX_REGEX_MATCH);
    var fromFixed = Math.max(parentNodeStartAt + match.index + offset, 1);
    var transform = rule.handler(state, match, fromFixed, to);
    if (transform) {
      return {
        from: fromFixed,
        to: to,
        matchedRule: _objectSpread(_objectSpread({}, rule), {}, {
          result: match
        })
      };
    }
  }
  return null;
}