import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useEffect, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { css, jsx } from '@emotion/react';
import { layoutBreakpointWidth } from '@atlaskit/editor-shared-styles';
import { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box';
import { dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';
import { B200 } from '@atlaskit/theme/colors';
import { getNodeAnchor } from '../pm-plugins/decorations-common';
import { useActiveAnchorTracker } from '../pm-plugins/utils/active-anchor-tracker';
import { isAnchorSupported } from '../pm-plugins/utils/anchor-utils';
import { getInsertLayoutStep, updateSelection } from '../pm-plugins/utils/update-selection';

// 8px gap + 16px on left and right
var DROP_TARGET_LAYOUT_DROP_ZONE_WIDTH = 40;
var dropTargetLayoutStyle = css({
  height: '100%',
  width: "".concat(DROP_TARGET_LAYOUT_DROP_ZONE_WIDTH, "px"),
  transform: 'translateX(-50%)',
  zIndex: 120,
  position: 'relative',
  display: 'flex',
  justifyContent: 'center'
});
var dropTargetLayoutHintStyle = css({
  height: '100%',
  position: 'relative',
  borderRight: "1px dashed ".concat("var(--ds-border-focused, ".concat(B200, ")")),
  width: 0
});
export var DropTargetLayout = function DropTargetLayout(props) {
  var _ref$current, _api$blockControls;
  var api = props.api,
    getPos = props.getPos,
    parent = props.parent,
    anchorRectCache = props.anchorRectCache;
  var ref = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDraggedOver = _useState2[0],
    setIsDraggedOver = _useState2[1];
  var anchorName = getNodeAnchor(parent);
  var nextNodeAnchorName = (_ref$current = ref.current) === null || _ref$current === void 0 || (_ref$current = _ref$current.parentElement) === null || _ref$current === void 0 || (_ref$current = _ref$current.nextElementSibling) === null || _ref$current === void 0 ? void 0 : _ref$current.getAttribute('data-drag-handler-anchor-name');
  var height = '100%';
  if (nextNodeAnchorName) {
    if (isAnchorSupported()) {
      height = "anchor-size(".concat(nextNodeAnchorName, " height)");
    } else if (anchorRectCache) {
      var layoutColumnRect = anchorRectCache.getRect(nextNodeAnchorName);
      height = "".concat((layoutColumnRect === null || layoutColumnRect === void 0 ? void 0 : layoutColumnRect.height) || 0, "px");
    }
  }
  var dropTargetStackLayoutHintStyle = css(_defineProperty({}, "@container layout-area (max-width:".concat(layoutBreakpointWidth.MEDIUM - 1, "px)"), {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
    height: height,
    marginTop: "var(--ds-space-050, 4px)"
  }));
  var _useActiveAnchorTrack = useActiveAnchorTracker(anchorName),
    _useActiveAnchorTrack2 = _slicedToArray(_useActiveAnchorTrack, 1),
    isActiveAnchor = _useActiveAnchorTrack2[0];
  var _ref = (api === null || api === void 0 || (_api$blockControls = api.blockControls) === null || _api$blockControls === void 0 ? void 0 : _api$blockControls.sharedState.currentState()) || {},
    activeNode = _ref.activeNode;
  var onDrop = useCallback(function () {
    if (!activeNode) {
      return;
    }
    var to = getPos();
    var mappedTo;
    if (to !== undefined) {
      var _api$core, _api$core2;
      var from = activeNode.pos;
      api === null || api === void 0 || (_api$core = api.core) === null || _api$core === void 0 || _api$core.actions.execute(function (_ref2) {
        var _api$blockControls2;
        var tr = _ref2.tr;
        api === null || api === void 0 || (_api$blockControls2 = api.blockControls) === null || _api$blockControls2 === void 0 || (_api$blockControls2 = _api$blockControls2.commands) === null || _api$blockControls2 === void 0 || _api$blockControls2.moveToLayout(from, to)({
          tr: tr
        });
        var insertColumnStep = getInsertLayoutStep(tr);
        mappedTo = insertColumnStep === null || insertColumnStep === void 0 ? void 0 : insertColumnStep.from;
        return tr;
      });
      api === null || api === void 0 || (_api$core2 = api.core) === null || _api$core2 === void 0 || _api$core2.actions.execute(function (_ref3) {
        var tr = _ref3.tr;
        if (mappedTo !== undefined) {
          updateSelection(tr, mappedTo);
        }
        return tr;
      });
    }
  }, [api, getPos, activeNode]);
  useEffect(function () {
    if (ref.current) {
      return dropTargetForElements({
        element: ref.current,
        onDragEnter: function onDragEnter() {
          setIsDraggedOver(true);
        },
        onDragLeave: function onDragLeave() {
          setIsDraggedOver(false);
        },
        onDrop: onDrop
      });
    }
  }, [onDrop]);
  if ((activeNode === null || activeNode === void 0 ? void 0 : activeNode.nodeType) === 'layoutSection') {
    return null;
  }
  return jsx("div", {
    ref: ref
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    css: [dropTargetLayoutStyle, dropTargetStackLayoutHintStyle],
    "data-testid": "block-ctrl-drop-indicator"
  }, isDraggedOver ? jsx(DropIndicator, {
    edge: "right",
    gap: "-".concat(DROP_TARGET_LAYOUT_DROP_ZONE_WIDTH, "px")
  }) : isActiveAnchor && jsx("div", {
    "data-testid": "block-ctrl-drop-hint"
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    ,
    css: dropTargetLayoutHintStyle
  }));
};