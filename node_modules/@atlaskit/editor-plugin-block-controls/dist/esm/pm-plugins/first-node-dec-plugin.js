import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { ReplaceAroundStep, ReplaceStep } from '@atlaskit/editor-prosemirror/transform';
import { DecorationSet, Decoration } from '@atlaskit/editor-prosemirror/view';
export var firstNodeDecPluginKey = new PluginKey('firstNodeDec');
var createFirstNodeDecSet = function createFirstNodeDecSet(state) {
  var firstNode = state.doc.firstChild;
  if (!firstNode) {
    return DecorationSet.empty;
  }
  return DecorationSet.create(state.doc, [Decoration.node(0, firstNode.nodeSize, {
    style: 'margin-top: 0'
  })]);
};
export var firstNodeDecPlugin = function firstNodeDecPlugin() {
  return new SafePlugin({
    key: firstNodeDecPluginKey,
    state: {
      init: function init(_, state) {
        return createFirstNodeDecSet(state);
      },
      apply: function apply(tr, currentState, _, newState) {
        var isDocChanged = tr.docChanged && tr.steps.some(function (step) {
          return step instanceof ReplaceStep || step instanceof ReplaceAroundStep;
        });
        // Reapply decorations if there are any steps that modify the document
        if (isDocChanged) {
          return createFirstNodeDecSet(newState);
        }
        return currentState;
      }
    },
    props: {
      decorations: function decorations(state) {
        return firstNodeDecPluginKey.getState(state);
      }
    }
  });
};