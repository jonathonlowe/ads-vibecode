import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { ReplaceAroundStep, ReplaceStep } from '@atlaskit/editor-prosemirror/transform';
import { DecorationSet, Decoration } from '@atlaskit/editor-prosemirror/view';
export const firstNodeDecPluginKey = new PluginKey('firstNodeDec');
const createFirstNodeDecSet = state => {
  const firstNode = state.doc.firstChild;
  if (!firstNode) {
    return DecorationSet.empty;
  }
  return DecorationSet.create(state.doc, [Decoration.node(0, firstNode.nodeSize, {
    style: 'margin-top: 0'
  })]);
};
export const firstNodeDecPlugin = () => new SafePlugin({
  key: firstNodeDecPluginKey,
  state: {
    init(_, state) {
      return createFirstNodeDecSet(state);
    },
    apply(tr, currentState, _, newState) {
      const isDocChanged = tr.docChanged && tr.steps.some(step => step instanceof ReplaceStep || step instanceof ReplaceAroundStep);
      // Reapply decorations if there are any steps that modify the document
      if (isDocChanged) {
        return createFirstNodeDecSet(newState);
      }
      return currentState;
    }
  },
  props: {
    decorations(state) {
      return firstNodeDecPluginKey.getState(state);
    }
  }
});