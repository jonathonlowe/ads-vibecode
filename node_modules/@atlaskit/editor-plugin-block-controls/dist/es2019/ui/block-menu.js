import React from 'react';
import { injectIntl } from 'react-intl-next';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { ArrowKeyNavigationType, DropdownMenu } from '@atlaskit/editor-common/ui-menu';
import { akEditorFloatingOverlapPanelZIndex } from '@atlaskit/editor-shared-styles';
import { getBlockMenuItems, menuItemsCallback } from './block-menu-items';
import { BLOCK_MENU_WIDTH } from './consts';
const BlockMenu = ({
  editorView,
  mountPoint,
  boundariesElement,
  scrollableElement,
  api,
  intl: {
    formatMessage
  }
}) => {
  const {
    blockControlsState
  } = useSharedPluginState(api, ['blockControls']);
  if (!(blockControlsState !== null && blockControlsState !== void 0 && blockControlsState.isMenuOpen)) {
    return null;
  }
  const activeNodeSelector = `[data-drag-handler-anchor-name=${blockControlsState === null || blockControlsState === void 0 ? void 0 : blockControlsState.menuTriggerBy}]`;
  const targetHandleRef = document.querySelector(activeNodeSelector);
  const items = getBlockMenuItems(formatMessage);
  const handleOpenChange = payload => {
    if (!(payload !== null && payload !== void 0 && payload.isOpen)) {
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : api.blockControls.commands.toggleBlockMenu({
        closeMenu: true
      }));
    }
  };
  const onMenuItemActivated = ({
    item
  }) => {
    if (editorView) {
      var _menuItemsCallback, _menuItemsCallback$ca;
      (_menuItemsCallback = menuItemsCallback[item.value.name]) === null || _menuItemsCallback === void 0 ? void 0 : (_menuItemsCallback$ca = _menuItemsCallback.call(menuItemsCallback, api, formatMessage)) === null || _menuItemsCallback$ca === void 0 ? void 0 : _menuItemsCallback$ca(editorView.state, editorView.dispatch, editorView);
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : api.blockControls.commands.toggleBlockMenu({
        closeMenu: true
      }));
    }
  };
  return /*#__PURE__*/React.createElement(Popup, {
    alignX: 'left',
    alignY: 'start'
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    ,
    target: targetHandleRef,
    mountTo: undefined,
    zIndex: akEditorFloatingOverlapPanelZIndex,
    forcePlacement: true,
    stick: true,
    offset: [-6, 8]
  }, /*#__PURE__*/React.createElement(DropdownMenu, {
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement
    //This needs be removed when the a11y is completely handled
    //Disabling key navigation now as it works only partially
    ,
    arrowKeyNavigationProviderOptions: {
      type: ArrowKeyNavigationType.MENU
    },
    items: items,
    isOpen: true,
    fitWidth: BLOCK_MENU_WIDTH,
    section: {
      hasSeparator: true
    },
    onOpenChange: handleOpenChange,
    onItemActivated: onMenuItemActivated
  }));
};
export default injectIntl(BlockMenu);