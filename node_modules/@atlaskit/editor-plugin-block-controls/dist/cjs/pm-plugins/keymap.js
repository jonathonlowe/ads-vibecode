"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boundKeydownHandler = void 0;
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _moveNode = require("../editor-commands/move-node");
var _showDragHandle = require("../editor-commands/show-drag-handle");
var _consts = require("./utils/consts");
function keymapList(api, formatMessage) {
  var keymapList = {};
  if (api && (0, _platformFeatureFlags.fg)('platform_editor_element_drag_and_drop_ed_23873')) {
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.showElementDragHandle.common, function (state) {
      (0, _showDragHandle.showDragHandleAtSelection)(api)(state);
      //we always want to handle this shortcut to prevent default browser special char insert when option + alphabetical key is used
      return true;
    }, keymapList);
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.dragToMoveUp.common, (0, _moveNode.moveNodeViaShortcut)(api, _consts.DIRECTION.UP, formatMessage), keymapList);
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.dragToMoveDown.common, (0, _moveNode.moveNodeViaShortcut)(api, _consts.DIRECTION.DOWN, formatMessage), keymapList);
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.dragToMoveLeft.common, (0, _moveNode.moveNodeViaShortcut)(api, _consts.DIRECTION.LEFT, formatMessage), keymapList);
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.dragToMoveRight.common, (0, _moveNode.moveNodeViaShortcut)(api, _consts.DIRECTION.RIGHT, formatMessage), keymapList);
  }
  return keymapList;
}
var boundKeydownHandler = exports.boundKeydownHandler = function boundKeydownHandler(api, formatMessage) {
  return (0, _keymap.keydownHandler)(keymapList(api, formatMessage));
};