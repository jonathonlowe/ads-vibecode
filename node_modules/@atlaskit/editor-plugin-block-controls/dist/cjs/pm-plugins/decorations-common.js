"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unmountDecorations = exports.getNodeTypeWithLevel = exports.getNodeAnchor = exports.TYPE_NODE_DEC = exports.TYPE_HANDLE_DEC = exports.TYPE_DROP_TARGET_DEC = exports.NESTED_DEPTH = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _uuid = _interopRequireDefault(require("uuid"));
var TYPE_DROP_TARGET_DEC = exports.TYPE_DROP_TARGET_DEC = 'drop-target-decoration';
var TYPE_HANDLE_DEC = exports.TYPE_HANDLE_DEC = 'drag-handle';
var TYPE_NODE_DEC = exports.TYPE_NODE_DEC = 'node-decoration';
var NESTED_DEPTH = exports.NESTED_DEPTH = 100;
var getNodeAnchor = exports.getNodeAnchor = function getNodeAnchor(node) {
  var handleId = ObjHash.getForNode(node);
  return "--node-anchor-".concat(node.type.name, "-").concat(handleId);
};
var getNodeTypeWithLevel = exports.getNodeTypeWithLevel = function getNodeTypeWithLevel(node) {
  var subType = node.attrs.level ? "-".concat(node.attrs.level) : '';
  return node.type.name + subType;
};
var ObjHash = /*#__PURE__*/function () {
  function ObjHash() {
    (0, _classCallCheck2.default)(this, ObjHash);
  }
  return (0, _createClass2.default)(ObjHash, null, [{
    key: "getForNode",
    value: function getForNode(node) {
      if (this.caching.has(node)) {
        return this.caching.get(node);
      }
      var uniqueId = (0, _uuid.default)();
      this.caching.set(node, uniqueId);
      return uniqueId;
    }
  }]);
}();
(0, _defineProperty2.default)(ObjHash, "caching", new WeakMap());
var unmountDecorations = exports.unmountDecorations = function unmountDecorations(nodeViewPortalProviderAPI, selector, key) {
  // Removing decorations manually instead of using native destroy function in prosemirror API
  // as it was more responsive and causes less re-rendering
  var decorationsToRemove = document.querySelectorAll("[".concat(selector, "=\"true\"]"));
  decorationsToRemove.forEach(function (el) {
    _reactDom.default.unmountComponentAtNode(el);
  });
};