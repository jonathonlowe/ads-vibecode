"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quickInsertButtonDecoration = exports.findQuickInsertInsertButtonDecoration = void 0;
var _react = require("react");
var _uuid = _interopRequireDefault(require("uuid"));
var _view = require("@atlaskit/editor-prosemirror/view");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _quickInsertButton = require("../ui/quick-insert-button");
var TYPE_QUICK_INSERT = 'INSERT_BUTTON';
var findQuickInsertInsertButtonDecoration = exports.findQuickInsertInsertButtonDecoration = function findQuickInsertInsertButtonDecoration(decorations, from, to) {
  return decorations.find(from, to, function (spec) {
    return spec.type === TYPE_QUICK_INSERT;
  });
};
var quickInsertButtonDecoration = exports.quickInsertButtonDecoration = function quickInsertButtonDecoration(api, formatMessage, rootPos, anchorName, nodeType, nodeViewPortalProviderAPI, rootAnchorName, rootNodeType, anchorRectCache) {
  var key = (0, _uuid.default)();
  return _view.Decoration.widget(rootPos, function (view, getPos) {
    var element = document.createElement('span');
    element.contentEditable = 'false';
    element.setAttribute('data-blocks-quick-insert-container', 'true');
    element.setAttribute('data-testid', 'block-ctrl-quick-insert-button');

    // all changes already under experiment
    if ((0, _platformFeatureFlags.fg)('platform_editor_controls_widget_visibility')) {
      nodeViewPortalProviderAPI.render(function () {
        return /*#__PURE__*/(0, _react.createElement)(_quickInsertButton.QuickInsertWithVisibility, {
          api: api,
          getPos: getPos,
          formatMessage: formatMessage,
          view: view,
          nodeType: nodeType,
          anchorName: anchorName,
          rootAnchorName: rootAnchorName,
          rootNodeType: rootNodeType !== null && rootNodeType !== void 0 ? rootNodeType : nodeType,
          anchorRectCache: anchorRectCache
        });
      }, element, key);
    } else {
      nodeViewPortalProviderAPI.render(function () {
        return /*#__PURE__*/(0, _react.createElement)(_quickInsertButton.TypeAheadControl, {
          api: api,
          getPos: getPos,
          formatMessage: formatMessage,
          view: view,
          nodeType: nodeType,
          anchorName: anchorName,
          rootAnchorName: rootAnchorName,
          rootNodeType: rootNodeType !== null && rootNodeType !== void 0 ? rootNodeType : nodeType,
          anchorRectCache: anchorRectCache
        });
      }, element, key);
    }
    return element;
  }, {
    side: -2,
    type: TYPE_QUICK_INSERT,
    destroy: function destroy(_) {
      if ((0, _platformFeatureFlags.fg)('platform_editor_fix_widget_destroy')) {
        nodeViewPortalProviderAPI.remove(key);
      }
    }
  });
};