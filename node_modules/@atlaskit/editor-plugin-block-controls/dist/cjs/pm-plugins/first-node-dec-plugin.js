"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firstNodeDecPluginKey = exports.firstNodeDecPlugin = void 0;
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _transform = require("@atlaskit/editor-prosemirror/transform");
var _view = require("@atlaskit/editor-prosemirror/view");
var firstNodeDecPluginKey = exports.firstNodeDecPluginKey = new _state.PluginKey('firstNodeDec');
var createFirstNodeDecSet = function createFirstNodeDecSet(state) {
  var firstNode = state.doc.firstChild;
  if (!firstNode) {
    return _view.DecorationSet.empty;
  }
  return _view.DecorationSet.create(state.doc, [_view.Decoration.node(0, firstNode.nodeSize, {
    style: 'margin-top: 0'
  })]);
};
var firstNodeDecPlugin = exports.firstNodeDecPlugin = function firstNodeDecPlugin() {
  return new _safePlugin.SafePlugin({
    key: firstNodeDecPluginKey,
    state: {
      init: function init(_, state) {
        return createFirstNodeDecSet(state);
      },
      apply: function apply(tr, currentState, _, newState) {
        var isDocChanged = tr.docChanged && tr.steps.some(function (step) {
          return step instanceof _transform.ReplaceStep || step instanceof _transform.ReplaceAroundStep;
        });
        // Reapply decorations if there are any steps that modify the document
        if (isDocChanged) {
          return createFirstNodeDecSet(newState);
        }
        return currentState;
      }
    },
    props: {
      decorations: function decorations(state) {
        return firstNodeDecPluginKey.getState(state);
      }
    }
  });
};