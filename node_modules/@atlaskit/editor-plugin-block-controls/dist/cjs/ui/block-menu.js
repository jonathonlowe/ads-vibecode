"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _blockMenuItems = require("./block-menu-items");
var _consts = require("./consts");
var BlockMenu = function BlockMenu(_ref) {
  var editorView = _ref.editorView,
    mountPoint = _ref.mountPoint,
    boundariesElement = _ref.boundariesElement,
    scrollableElement = _ref.scrollableElement,
    api = _ref.api,
    formatMessage = _ref.intl.formatMessage;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['blockControls']),
    blockControlsState = _useSharedPluginState.blockControlsState;
  if (!(blockControlsState !== null && blockControlsState !== void 0 && blockControlsState.isMenuOpen)) {
    return null;
  }
  var activeNodeSelector = "[data-drag-handler-anchor-name=".concat(blockControlsState === null || blockControlsState === void 0 ? void 0 : blockControlsState.menuTriggerBy, "]");
  var targetHandleRef = document.querySelector(activeNodeSelector);
  var items = (0, _blockMenuItems.getBlockMenuItems)(formatMessage);
  var handleOpenChange = function handleOpenChange(payload) {
    if (!(payload !== null && payload !== void 0 && payload.isOpen)) {
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 ? void 0 : api.blockControls.commands.toggleBlockMenu({
        closeMenu: true
      }));
    }
  };
  var onMenuItemActivated = function onMenuItemActivated(_ref2) {
    var item = _ref2.item;
    if (editorView) {
      var _menuItemsCallback, _menuItemsCallback$ca;
      (_menuItemsCallback = _blockMenuItems.menuItemsCallback[item.value.name]) === null || _menuItemsCallback === void 0 || (_menuItemsCallback$ca = _menuItemsCallback.call(_blockMenuItems.menuItemsCallback, api, formatMessage)) === null || _menuItemsCallback$ca === void 0 || _menuItemsCallback$ca(editorView.state, editorView.dispatch, editorView);
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 ? void 0 : api.blockControls.commands.toggleBlockMenu({
        closeMenu: true
      }));
    }
  };
  return /*#__PURE__*/_react.default.createElement(_ui.Popup, {
    alignX: 'left',
    alignY: 'start'
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    ,
    target: targetHandleRef,
    mountTo: undefined,
    zIndex: _editorSharedStyles.akEditorFloatingOverlapPanelZIndex,
    forcePlacement: true,
    stick: true,
    offset: [-6, 8]
  }, /*#__PURE__*/_react.default.createElement(_uiMenu.DropdownMenu, {
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement
    //This needs be removed when the a11y is completely handled
    //Disabling key navigation now as it works only partially
    ,
    arrowKeyNavigationProviderOptions: {
      type: _uiMenu.ArrowKeyNavigationType.MENU
    },
    items: items,
    isOpen: true,
    fitWidth: _consts.BLOCK_MENU_WIDTH,
    section: {
      hasSeparator: true
    },
    onOpenChange: handleOpenChange,
    onItemActivated: onMenuItemActivated
  }));
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(BlockMenu);