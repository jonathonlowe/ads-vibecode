"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockControlsPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _selection = require("@atlaskit/editor-common/selection");
var _state = require("@atlaskit/editor-prosemirror/state");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _moveNode = require("./editor-commands/move-node");
var _moveToLayout = require("./editor-commands/move-to-layout");
var _firstNodeDecPlugin = require("./pm-plugins/first-node-dec-plugin");
var _pmPlugin = require("./pm-plugins/interaction-tracking/pm-plugin");
var _main = require("./pm-plugins/main");
var _getSelection = require("./pm-plugins/utils/getSelection");
var _blockMenu = _interopRequireDefault(require("./ui/block-menu"));
var _dragHandleMenu = require("./ui/drag-handle-menu");
var _globalStyles = require("./ui/global-styles");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var blockControlsPlugin = exports.blockControlsPlugin = function blockControlsPlugin(_ref) {
  var api = _ref.api;
  return {
    name: 'blockControls',
    pmPlugins: function pmPlugins() {
      var pmPlugins = [{
        name: 'blockControlsPmPlugin',
        plugin: function plugin(_ref2) {
          var getIntl = _ref2.getIntl,
            nodeViewPortalProviderAPI = _ref2.nodeViewPortalProviderAPI;
          return (0, _main.createPlugin)(api, getIntl, nodeViewPortalProviderAPI);
        }
      }];
      if ((0, _experiments.editorExperiment)('platform_editor_controls', 'variant1')) {
        if ((0, _platformFeatureFlags.fg)('platform_editor_controls_widget_visibility')) {
          pmPlugins.push({
            name: 'blockControlsInteractionTrackingPlugin',
            plugin: _pmPlugin.createInteractionTrackingPlugin
          });
        }
        pmPlugins.push({
          name: 'firstNodeDec',
          plugin: _firstNodeDecPlugin.firstNodeDecPlugin
        });
      }
      return pmPlugins;
    },
    commands: {
      moveNode: (0, _moveNode.moveNode)(api),
      moveToLayout: (0, _moveToLayout.moveToLayout)(api),
      showDragHandleAt: function showDragHandleAt(pos, anchorName, nodeType, handleOptions, rootPos, rootAnchorName, rootNodeType) {
        return function (_ref3) {
          var tr = _ref3.tr;
          var currMeta = tr.getMeta(_main.key);
          tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
            activeNode: {
              pos: pos,
              anchorName: anchorName,
              nodeType: nodeType,
              handleOptions: handleOptions,
              rootPos: rootPos,
              rootAnchorName: rootAnchorName,
              rootNodeType: rootNodeType
            },
            closeMenu: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? true : undefined
          }));
          return tr;
        };
      },
      toggleBlockMenu: function toggleBlockMenu(options) {
        return function (_ref4) {
          var tr = _ref4.tr;
          var currMeta = tr.getMeta(_main.key);
          if (options !== null && options !== void 0 && options.closeMenu) {
            tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
              closeMenu: true
            }));
            return tr;
          }
          tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
            toggleMenu: {
              anchorName: options === null || options === void 0 ? void 0 : options.anchorName
            }
          }));
          return tr;
        };
      },
      setNodeDragged: function setNodeDragged(getPos, anchorName, nodeType) {
        return function (_ref5) {
          var tr = _ref5.tr;
          var pos = getPos();
          if (pos === undefined) {
            return tr;
          }
          var currMeta = tr.getMeta(_main.key);
          tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
            isDragging: true,
            activeNode: {
              pos: pos,
              anchorName: anchorName,
              nodeType: nodeType
            }
          }));
          if ((0, _platformFeatureFlags.fg)('platform_editor_ease_of_use_metrics')) {
            var _api$metrics;
            api === null || api === void 0 || (_api$metrics = api.metrics) === null || _api$metrics === void 0 || _api$metrics.commands.handleIntentToStartEdit({
              shouldStartTimer: false,
              shouldPersistActiveSession: true
            })({
              tr: tr
            });
          }
          if ((0, _platformFeatureFlags.fg)('platform_editor_user_intent_plugin')) {
            var _api$userIntent;
            api === null || api === void 0 || (_api$userIntent = api.userIntent) === null || _api$userIntent === void 0 || _api$userIntent.commands.setCurrentUserIntent('dragging')({
              tr: tr
            });
          }
          return tr;
        };
      },
      setMultiSelectPositions: function setMultiSelectPositions(anchor, head) {
        return function (_ref6) {
          var _api$selection, _$to$nodeBefore, _$from$nodeAfter;
          var tr = _ref6.tr;
          var _tr$selection = tr.selection,
            userAnchor = _tr$selection.anchor,
            userHead = _tr$selection.head;
          var $expandedAnchor, $expandedHead;
          if (anchor !== undefined && head !== undefined) {
            $expandedAnchor = tr.doc.resolve(anchor);
            $expandedHead = tr.doc.resolve(head);
          } else {
            var expandedSelection = (0, _selection.expandSelectionBounds)(tr.selection.$anchor, tr.selection.$head);
            $expandedAnchor = expandedSelection.$anchor;
            $expandedHead = expandedSelection.$head;
          }
          api === null || api === void 0 || (_api$selection = api.selection) === null || _api$selection === void 0 || _api$selection.commands.setManualSelection($expandedAnchor.pos, $expandedHead.pos)({
            tr: tr
          });
          var $from = $expandedAnchor.min($expandedHead);
          var $to = $expandedAnchor.max($expandedHead);
          var expandedNormalisedSel;
          if ($from.nodeAfter === $to.nodeBefore) {
            (0, _getSelection.selectNode)(tr, $from.pos, $expandedAnchor.node().type.name);
            expandedNormalisedSel = tr.selection;
          } else if (((_$to$nodeBefore = $to.nodeBefore) === null || _$to$nodeBefore === void 0 ? void 0 : _$to$nodeBefore.type.name) === 'mediaSingle' || ((_$from$nodeAfter = $from.nodeAfter) === null || _$from$nodeAfter === void 0 ? void 0 : _$from$nodeAfter.type.name) === 'mediaSingle') {
            expandedNormalisedSel = new _state.TextSelection($expandedAnchor, $expandedHead);
            tr.setSelection(expandedNormalisedSel);
          } else {
            // this is to normalise the selection's boundaries to inline positions, preventing it from collapsing
            expandedNormalisedSel = _state.TextSelection.between($expandedAnchor, $expandedHead);
            tr.setSelection(expandedNormalisedSel);
          }
          var multiSelectDnD = {
            anchor: $expandedAnchor.pos,
            head: $expandedHead.pos,
            textAnchor: expandedNormalisedSel.anchor,
            textHead: expandedNormalisedSel.head,
            userAnchor: userAnchor,
            userHead: userHead
          };
          var currMeta = tr.getMeta(_main.key);
          tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
            multiSelectDnD: multiSelectDnD
          }));
          return tr;
        };
      },
      setSelectedViaDragHandle: function setSelectedViaDragHandle(isSelectedViaDragHandle) {
        return function (_ref7) {
          var tr = _ref7.tr;
          var currMeta = tr.getMeta(_main.key);
          return tr.setMeta(_main.key, _objectSpread(_objectSpread({}, currMeta), {}, {
            isSelectedViaDragHandle: isSelectedViaDragHandle
          }));
        };
      }
    },
    getSharedState: function getSharedState(editorState) {
      var _key$getState$isMenuO, _key$getState, _key$getState$menuTri, _key$getState2, _key$getState$activeN, _key$getState3, _key$getState$isDragg, _key$getState4, _key$getState$isPMDra, _key$getState5, _key$getState$multiSe, _key$getState6, _key$getState$isShift, _key$getState7, _key$getState$lastDra, _key$getState8, _interactionTrackingP, _key$getState$isSelec, _key$getState9;
      if (!editorState) {
        return undefined;
      }
      return {
        isMenuOpen: (_key$getState$isMenuO = (_key$getState = _main.key.getState(editorState)) === null || _key$getState === void 0 ? void 0 : _key$getState.isMenuOpen) !== null && _key$getState$isMenuO !== void 0 ? _key$getState$isMenuO : false,
        menuTriggerBy: (_key$getState$menuTri = (_key$getState2 = _main.key.getState(editorState)) === null || _key$getState2 === void 0 ? void 0 : _key$getState2.menuTriggerBy) !== null && _key$getState$menuTri !== void 0 ? _key$getState$menuTri : undefined,
        activeNode: (_key$getState$activeN = (_key$getState3 = _main.key.getState(editorState)) === null || _key$getState3 === void 0 ? void 0 : _key$getState3.activeNode) !== null && _key$getState$activeN !== void 0 ? _key$getState$activeN : undefined,
        isDragging: (_key$getState$isDragg = (_key$getState4 = _main.key.getState(editorState)) === null || _key$getState4 === void 0 ? void 0 : _key$getState4.isDragging) !== null && _key$getState$isDragg !== void 0 ? _key$getState$isDragg : false,
        isPMDragging: (_key$getState$isPMDra = (_key$getState5 = _main.key.getState(editorState)) === null || _key$getState5 === void 0 ? void 0 : _key$getState5.isPMDragging) !== null && _key$getState$isPMDra !== void 0 ? _key$getState$isPMDra : false,
        multiSelectDnD: (_key$getState$multiSe = (_key$getState6 = _main.key.getState(editorState)) === null || _key$getState6 === void 0 ? void 0 : _key$getState6.multiSelectDnD) !== null && _key$getState$multiSe !== void 0 ? _key$getState$multiSe : undefined,
        isShiftDown: (_key$getState$isShift = (_key$getState7 = _main.key.getState(editorState)) === null || _key$getState7 === void 0 ? void 0 : _key$getState7.isShiftDown) !== null && _key$getState$isShift !== void 0 ? _key$getState$isShift : undefined,
        lastDragCancelled: (_key$getState$lastDra = (_key$getState8 = _main.key.getState(editorState)) === null || _key$getState8 === void 0 ? void 0 : _key$getState8.lastDragCancelled) !== null && _key$getState$lastDra !== void 0 ? _key$getState$lastDra : false,
        isEditing: (_interactionTrackingP = _pmPlugin.interactionTrackingPluginKey.getState(editorState)) === null || _interactionTrackingP === void 0 ? void 0 : _interactionTrackingP.isEditing,
        isSelectedViaDragHandle: (_key$getState$isSelec = (_key$getState9 = _main.key.getState(editorState)) === null || _key$getState9 === void 0 ? void 0 : _key$getState9.isSelectedViaDragHandle) !== null && _key$getState$isSelec !== void 0 ? _key$getState$isSelec : false
      };
    },
    contentComponent: function contentComponent(_ref8) {
      var editorView = _ref8.editorView,
        popupsMountPoint = _ref8.popupsMountPoint,
        popupsBoundariesElement = _ref8.popupsBoundariesElement,
        popupsScrollableElement = _ref8.popupsScrollableElement;
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? /*#__PURE__*/_react.default.createElement(_blockMenu.default, {
        editorView: editorView,
        mountPoint: popupsMountPoint,
        boundariesElement: popupsBoundariesElement,
        scrollableElement: popupsScrollableElement,
        api: api
      }) : /*#__PURE__*/_react.default.createElement(_dragHandleMenu.DragHandleMenu, {
        api: api
      }), /*#__PURE__*/_react.default.createElement(_globalStyles.GlobalStylesWrapper, null));
    }
  };
};