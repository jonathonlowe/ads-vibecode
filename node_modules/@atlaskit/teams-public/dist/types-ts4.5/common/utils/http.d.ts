export declare const EXPONENTIAL_BACKOFF_RETRY_POLICY: {
    INITIAL_DELAY: number;
    MAX_RETRIES: number;
    JITTER: boolean;
};
/**
 * Checks whether a status code is a 5xx HTTP code.
 * @param {number} status HTTP status code
 */
export declare function is5xx(status: number): boolean;
export declare function isFetchResponse(data: unknown): data is {
    response: Response;
};
type ToTryFunctionArgs = any[];
type ToTryFunction<T> = (...args: ToTryFunctionArgs) => Promise<T>;
type RetryIfCallback<T> = (a: T) => boolean;
interface WithExponentialBackoffOptions<T> {
    initial: number;
    jitter?: boolean;
    max: number;
    retryIf?: RetryIfCallback<T>;
}
/**
 * Transparently wrap a function so that it is retried until it succeeds or reaches a max retry limit.
 * The returned function has the same signature as the wrapped function.
 *
 * Modified from https://jsfiddle.net/pajtai/pLka0ow9/
 */
export declare function withExponentialBackoff<ResponseType>(toTry: ToTryFunction<ResponseType>, hofOptions?: WithExponentialBackoffOptions<ResponseType>): (...args: ToTryFunctionArgs) => Promise<ResponseType>;
export declare const fetchWithExponentialBackoff: (...args: ToTryFunctionArgs) => Promise<Response>;
export {};
