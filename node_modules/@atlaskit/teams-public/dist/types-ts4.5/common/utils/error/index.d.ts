export declare enum StatusCode {
    UNAUTHORIZED = 401,
    FORBIDDEN = 403,
    TIMEOUT = 408,
    GONE = 410,
    PAYLOAD_TOO_LARGE = 413
}
declare class CommonError extends Error {
    message: string;
    name: string;
    stack: string;
    constructor(message?: string);
}
export declare class DefaultError extends CommonError {
    constructor({ message }: {
        message?: string;
    });
}
/**
 * These errors will not fail UFO experiences
 */
export declare class SLOIgnoreError extends CommonError {
    constructor({ message }: {
        message?: string;
    });
}
interface HttpErrorArguments {
    message: string;
    status: number;
    traceId?: string;
    path?: string;
}
export declare class HttpError extends CommonError {
    status: number;
    traceId?: string;
    path?: string;
    constructor({ message, status, traceId, path }: HttpErrorArguments);
}
interface ResultErrorData {
    category: string;
    message: string;
    fields?: object;
}
interface FieldError {
    message: string;
    field: string;
}
export interface ErrorData {
    category: string;
    message: string;
    fields?: FieldError[];
}
export declare class GraphQLError extends CommonError {
    fields?: any;
    category?: string;
    constructor({ message, category, fields }: Partial<ResultErrorData>);
    static from: (rawErrors: ErrorData[]) => GraphQLError;
}
export {};
