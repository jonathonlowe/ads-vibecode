import { type ClientContextProps, type TeamContainers, TeamWithMemberships } from './types';
type AwaitedReturn<T extends (...args: any) => any> = Awaited<ReturnType<T>>;
export declare class TeamsClient {
    private readonly _aggClient;
    constructor(
    /**
     * @param {ClientContextProps} context - Context including CloudId & OrgId to be used for all requests
     */
    context?: ClientContextProps);
    /**
     * Sets the base URL to be used in the client requests
     * @param {string} baseUrl - The new base URL
     */
    setBaseUrl(baseUrl: string): void;
    /**
     * Sets context including CloudId & OrgId to be used for all requests
     */
    setContext(context: ClientContextProps): void;
    /**
     * Get the containers for a given team
     * @param {string} teamId
     * @returns {Promise<TeamContainers>}
     */
    getTeamContainers(teamId: string): Promise<TeamContainers>;
    /**
     * Get the number of teams connected to a container (Confluence space or Jira project)
     * @param {string} containerId
     * @returns {Promise}
     */
    getNumberOfConnectedTeams(containerId: string): Promise<number>;
    /**
     * Get teams connected to a container (Confluence space or Jira project)
     * @param {string} containerId
     * @returns {Promise}
     */
    getConnectedTeams(containerId: string): Promise<TeamWithMemberships[]>;
    /**
     * Unlink a container from a team
     * @param {string} teamId
     * @param {string} containerId
     * @returns {Promise<void>}
     */
    unlinkTeamContainer(teamId: string, containerId: string): Promise<AwaitedReturn<typeof this._aggClient.unlinkTeamContainer>>;
}
export declare const teamsClient: TeamsClient;
export {};
