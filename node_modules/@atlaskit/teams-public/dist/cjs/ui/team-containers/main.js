"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TeamContainers = exports.MAX_NUMBER_OF_CONTAINERS_TO_SHOW = exports.ICON_COLOR = exports.ICON_BACKGROUND = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _analyticsNext = require("@atlaskit/analytics-next");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _modalTransition = _interopRequireDefault(require("@atlaskit/modal-dialog/modal-transition"));
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
var _analytics = require("../../common/utils/analytics");
var _controllers = require("../../controllers");
var _useProductPermission2 = require("../../controllers/hooks/use-product-permission");
var _useTeamContainers2 = require("../../controllers/hooks/use-team-containers");
var _addContainerCard = require("./add-container-card");
var _async = require("./disconnect-dialog/async");
var _linkedContainerCard = require("./linked-container-card");
var _noProductAccessEmptyState = require("./no-product-access-empty-state");
var _teamContainersSkeleton = require("./team-containers-skeleton");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ICON_BACKGROUND = exports.ICON_BACKGROUND = "var(--ds-icon-inverse, ".concat(_colors.N0, ")");
var ICON_COLOR = exports.ICON_COLOR = "var(--ds-icon-subtle, ".concat(_colors.N90, ")");
var MAX_NUMBER_OF_CONTAINERS_TO_SHOW = exports.MAX_NUMBER_OF_CONTAINERS_TO_SHOW = 4;
var TeamContainers = exports.TeamContainers = function TeamContainers(_ref) {
  var teamId = _ref.teamId,
    _onAddAContainerClick = _ref.onAddAContainerClick,
    components = _ref.components,
    userId = _ref.userId,
    cloudId = _ref.cloudId,
    filterContainerId = _ref.filterContainerId,
    isDisplayedOnProfileCard = _ref.isDisplayedOnProfileCard;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useTeamContainers = (0, _useTeamContainers2.useTeamContainers)(teamId),
    teamContainers = _useTeamContainers.teamContainers,
    loading = _useTeamContainers.loading,
    unlinkError = _useTeamContainers.unlinkError;
  var _useTeamContainersHoo = (0, _useTeamContainers2.useTeamContainersHook)(),
    _useTeamContainersHoo2 = (0, _slicedToArray2.default)(_useTeamContainersHoo, 2),
    _ = _useTeamContainersHoo2[0],
    actions = _useTeamContainersHoo2[1];
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showAddJiraContainer = _useState2[0],
    setShowAddJiraContainer = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showAddConfluenceContainer = _useState4[0],
    setShowAddConfluenceContainer = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showMore = _useState6[0],
    setShowMore = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isDisconnectDialogOpen = _useState8[0],
    setIsDisconnectDialogOpen = _useState8[1];
  var _useState9 = (0, _react.useState)(),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    selectedContainerDetails = _useState10[0],
    setSelectedContainerDetails = _useState10[1];
  var _useState11 = (0, _react.useState)(teamContainers),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    filteredTeamContainers = _useState12[0],
    setFilteredTeamContainers = _useState12[1];
  var _usePeopleAndTeamAnal = (0, _analytics.usePeopleAndTeamAnalytics)(),
    fireOperationalEvent = _usePeopleAndTeamAnal.fireOperationalEvent,
    fireTrackEvent = _usePeopleAndTeamAnal.fireTrackEvent;
  var _useProductPermission = (0, _useProductPermission2.useProductPermissions)({
      userId: userId,
      cloudId: cloudId
    }),
    productPermissions = _useProductPermission.data,
    productPermissionIsLoading = _useProductPermission.loading;
  (0, _react.useEffect)(function () {
    if (isDisplayedOnProfileCard && filterContainerId) {
      setFilteredTeamContainers(teamContainers.filter(function (container) {
        return container.id !== filterContainerId;
      }));
    } else {
      setFilteredTeamContainers(teamContainers);
    }
  }, [isDisplayedOnProfileCard, filterContainerId, teamContainers]);
  (0, _react.useEffect)(function () {
    if (filteredTeamContainers.length > MAX_NUMBER_OF_CONTAINERS_TO_SHOW || isDisplayedOnProfileCard) {
      setShowAddJiraContainer(false);
      setShowAddConfluenceContainer(false);
    } else {
      var hasJiraProject = filteredTeamContainers.some(function (container) {
        return container.type === 'JiraProject';
      });
      var hasConfluenceSpace = filteredTeamContainers.some(function (container) {
        return container.type === 'ConfluenceSpace';
      });
      setShowAddJiraContainer(!hasJiraProject && !!productPermissions && !!(0, _controllers.hasProductPermission)(productPermissions, 'jira'));
      setShowAddConfluenceContainer(!hasConfluenceSpace && !!productPermissions && !!(0, _controllers.hasProductPermission)(productPermissions, 'confluence'));
    }
  }, [isDisplayedOnProfileCard, productPermissions, filteredTeamContainers]);
  var handleShowMore = function handleShowMore() {
    setShowMore(!showMore);
  };
  var handleOpenDisconnectDialog = (0, _react.useCallback)(function (containerDetails) {
    setSelectedContainerDetails(containerDetails);
    setIsDisconnectDialogOpen(true);
    fireTrackEvent(createAnalyticsEvent, {
      action: _analytics.AnalyticsAction.OPENED,
      actionSubject: 'unlinkContainerDialog',
      attributes: {
        teamId: teamId
      }
    });
  }, [createAnalyticsEvent, fireTrackEvent, teamId]);
  var LinkedContainerCardComponent = (components === null || components === void 0 ? void 0 : components.ContainerCard) || _linkedContainerCard.LinkedContainerCard;
  var handleDisconnect = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(containerId) {
      var removedContainer;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            removedContainer = filteredTeamContainers.find(function (container) {
              return container.id === containerId;
            });
            _context.next = 3;
            return actions.unlinkTeamContainers(teamId, containerId);
          case 3:
            setIsDisconnectDialogOpen(false);
            if (unlinkError) {
              fireOperationalEvent(createAnalyticsEvent, {
                action: _analytics.AnalyticsAction.FAILED,
                actionSubject: 'teamContainerUnlinked'
              });
            } else {
              fireOperationalEvent(createAnalyticsEvent, {
                action: _analytics.AnalyticsAction.SUCCEEDED,
                actionSubject: 'teamContainerUnlinked',
                attributes: {
                  containerRemoved: {
                    containerId: removedContainer === null || removedContainer === void 0 ? void 0 : removedContainer.id,
                    container: removedContainer === null || removedContainer === void 0 ? void 0 : removedContainer.type
                  },
                  teamId: teamId
                }
              });
            }
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [actions, createAnalyticsEvent, fireOperationalEvent, filteredTeamContainers, teamId, unlinkError]);
  var TeamContainersSkeletonComponent = (components === null || components === void 0 ? void 0 : components.TeamContainersSkeleton) || _teamContainersSkeleton.TeamContainersSkeleton;
  if (loading || productPermissionIsLoading) {
    return /*#__PURE__*/_react.default.createElement(TeamContainersSkeletonComponent, {
      numberOfContainers: MAX_NUMBER_OF_CONTAINERS_TO_SHOW
    });
  }
  if (filteredTeamContainers.length === 0 && !isDisplayedOnProfileCard && (!productPermissions || !(productPermissions && ((0, _controllers.hasProductPermission)(productPermissions, 'jira') || (0, _controllers.hasProductPermission)(productPermissions, 'confluence'))))) {
    return /*#__PURE__*/_react.default.createElement(_noProductAccessEmptyState.NoProductAccessState, null);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_primitives.Stack, {
    space: "space.200"
  }, /*#__PURE__*/_react.default.createElement(_primitives.Grid, {
    templateColumns: "repeat(auto-fill, minmax(300px, 1fr))",
    gap: isDisplayedOnProfileCard ? 'space.0' : 'space.100'
  }, filteredTeamContainers.slice(0, MAX_NUMBER_OF_CONTAINERS_TO_SHOW).map(function (container) {
    return /*#__PURE__*/_react.default.createElement(LinkedContainerCardComponent, {
      key: container.id,
      containerType: container.type,
      containerTypeProperties: container.containerTypeProperties,
      title: container.name,
      containerIcon: container.icon || undefined,
      link: container.link || undefined,
      containerId: container.id,
      onDisconnectButtonClick: function onDisconnectButtonClick() {
        return handleOpenDisconnectDialog({
          containerId: container.id,
          containerType: container.type,
          containerName: container.name
        });
      }
    });
  }), showAddJiraContainer && /*#__PURE__*/_react.default.createElement(_addContainerCard.AddContainerCard, {
    onAddAContainerClick: function onAddAContainerClick(e) {
      return _onAddAContainerClick(e, 'Jira');
    },
    containerType: "JiraProject"
  }), showAddConfluenceContainer && /*#__PURE__*/_react.default.createElement(_addContainerCard.AddContainerCard, {
    onAddAContainerClick: function onAddAContainerClick(e) {
      return _onAddAContainerClick(e, 'Confluence');
    },
    containerType: "ConfluenceSpace"
  }), showMore && filteredTeamContainers.slice(MAX_NUMBER_OF_CONTAINERS_TO_SHOW).map(function (container) {
    return /*#__PURE__*/_react.default.createElement(LinkedContainerCardComponent, {
      key: container.id,
      containerType: container.type,
      containerTypeProperties: container.containerTypeProperties,
      title: container.name,
      containerId: container.id,
      containerIcon: container.icon || undefined,
      link: container.link || undefined,
      onDisconnectButtonClick: function onDisconnectButtonClick() {
        return handleOpenDisconnectDialog({
          containerId: container.id,
          containerType: container.type,
          containerName: container.name
        });
      }
    });
  })), filteredTeamContainers.length > MAX_NUMBER_OF_CONTAINERS_TO_SHOW && /*#__PURE__*/_react.default.createElement(_primitives.Inline, null, /*#__PURE__*/_react.default.createElement(_new.default, {
    appearance: "subtle",
    onClick: handleShowMore
  }, showMore ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messages.showLess) : /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messages.showMore)))), /*#__PURE__*/_react.default.createElement(_modalTransition.default, null, isDisconnectDialogOpen && selectedContainerDetails && /*#__PURE__*/_react.default.createElement(_async.DisconnectDialogLazy, {
    containerName: selectedContainerDetails.containerName,
    containerType: selectedContainerDetails.containerType,
    onClose: function onClose() {
      return setIsDisconnectDialogOpen(false);
    },
    onDisconnect: function onDisconnect() {
      return handleDisconnect(selectedContainerDetails.containerId);
    }
  })));
};
var messages = (0, _reactIntlNext.defineMessages)({
  showMore: {
    id: 'ptc-directory.team-profile-page.team-containers.show-more.non-final',
    defaultMessage: 'Show more',
    description: 'Button to show more containers'
  },
  showLess: {
    id: 'ptc-directory.team-profile-page.team-containers.show-less.non-final',
    defaultMessage: 'Show less',
    description: 'Button to show less containers'
  }
});