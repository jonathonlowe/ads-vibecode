/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddContainerCard = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _new = require("@atlaskit/button/new");
var _add = _interopRequireDefault(require("@atlaskit/icon/utility/add"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _getContainerProperties = require("../../../common/utils/get-container-properties");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  card: "_4cvr1h6o _1bsb1osq",
  container: "_2rkoop52 _ca0qutpp _u5f3utpp _n3tdutpp _19bvutpp _d0altlke",
  iconWrapper: "_2rkoiti9 _12y3e4h9 _12jimuej _1qu2gq9o _syaz131l _4cvxmuej _ksodnqa1"
};
var AddContainerCardWrapper = function AddContainerCardWrapper(_ref) {
  var children = _ref.children,
    onClick = _ref.onClick;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hovered = _useState2[0],
    setHovered = _useState2[1];
  var handleMouseEnter = function handleMouseEnter() {
    return setHovered(true);
  };
  var handleMouseLeave = function handleMouseLeave() {
    return setHovered(false);
  };
  return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    backgroundColor: hovered ? 'elevation.surface.hovered' : 'elevation.surface.sunken',
    xcss: styles.container,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: onClick
  }, children);
};
var AddContainerCard = exports.AddContainerCard = function AddContainerCard(_ref2) {
  var containerType = _ref2.containerType,
    onAddAContainerClick = _ref2.onAddAContainerClick;
  var _getContainerProperti = (0, _getContainerProperties.getContainerProperties)(containerType),
    description = _getContainerProperti.description,
    icon = _getContainerProperti.icon,
    title = _getContainerProperti.title;
  return /*#__PURE__*/_react.default.createElement(AddContainerCardWrapper, {
    onClick: onAddAContainerClick
  }, /*#__PURE__*/_react.default.createElement(_compiled.Inline, {
    space: "space.100",
    xcss: styles.card
  }, /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    xcss: styles.iconWrapper
  }, /*#__PURE__*/_react.default.createElement(_new.IconButton, {
    label: "Add a container",
    appearance: "subtle",
    icon: _add.default,
    testId: "add-icon",
    onClick: function onClick(e) {
      onAddAContainerClick(e);
      e.stopPropagation();
    }
  })), /*#__PURE__*/_react.default.createElement(_compiled.Stack, null, /*#__PURE__*/_react.default.createElement(_compiled.Text, {
    maxLines: 1,
    weight: "medium",
    color: "color.text"
  }, title), /*#__PURE__*/_react.default.createElement(_compiled.Flex, (0, _extends2.default)({
    gap: "space.050"
  }, (0, _platformFeatureFlags.fg)('enable_card_alignment_fix') ? {
    alignItems: 'center'
  } : {}), icon, /*#__PURE__*/_react.default.createElement(_compiled.Text, {
    size: "small",
    color: "color.text.subtle"
  }, description)))));
};