"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.DisconnectDialog = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _modalDialog = _interopRequireWildcard(require("@atlaskit/modal-dialog"));
var _compiled = require("@atlaskit/primitives/compiled");
var _getContainerProperties = require("../../../common/utils/get-container-properties");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var messages = exports.messages = (0, _reactIntlNext.defineMessages)({
  disconnectDialogTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.title.non-final',
    defaultMessage: 'Disconnect place',
    description: 'Title of the disconnect dialog for team containers'
  },
  disconnectDialogDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.description.non-final',
    defaultMessage: 'This team will no longer be connected to the {containerName} {containerType}.',
    description: 'Description of the disconnect dialog for team containers'
  },
  disconnectDialogDisclaimer: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.disclaimer.non-final',
    defaultMessage: 'Disconnecting the team from the {containerType} will not affect any work connected to the team within the {containerType}.',
    description: 'Disclaimer of the disconnect dialog for team containers'
  },
  disconnectDialogCancelButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.cancel-button.non-final',
    defaultMessage: 'Cancel',
    description: 'Button to cancel the dialog'
  },
  disconnectDialogRemoveButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.remove-button.non-final',
    defaultMessage: 'Remove',
    description: 'Button to disconnect the team from the container'
  }
});
var DisconnectDialog = exports.DisconnectDialog = function DisconnectDialog(_ref) {
  var containerName = _ref.containerName,
    containerType = _ref.containerType,
    onDisconnect = _ref.onDisconnect,
    onClose = _ref.onClose;
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isDisconnecting = _React$useState2[0],
    setIsDisconnecting = _React$useState2[1];
  var handleDisconnect = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setIsDisconnecting(true);
            _context.next = 3;
            return onDisconnect();
          case 3:
            setIsDisconnecting(false);
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleDisconnect() {
      return _ref2.apply(this, arguments);
    };
  }();
  var _getContainerProperti = (0, _getContainerProperties.getContainerProperties)(containerType),
    containerTypeText = _getContainerProperti.containerTypeText,
    description = _getContainerProperti.description;
  return /*#__PURE__*/_react.default.createElement(_modalDialog.default, {
    onClose: onClose,
    width: "small",
    testId: "team-containers-disconnect-dialog",
    shouldScrollInViewport: true
  }, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalHeader, null, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalTitle, {
    appearance: "warning"
  }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messages.disconnectDialogTitle))), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalBody, null, /*#__PURE__*/_react.default.createElement(_compiled.Stack, {
    space: "space.150"
  }, /*#__PURE__*/_react.default.createElement(_compiled.Box, null, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, messages.disconnectDialogDescription, {
    values: {
      containerName: /*#__PURE__*/_react.default.createElement("b", null, containerName),
      containerType: description
    }
  }))), /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, messages.disconnectDialogDisclaimer, {
    values: {
      containerType: containerTypeText
    }
  })))), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalFooter, null, /*#__PURE__*/_react.default.createElement(_new.default, {
    appearance: "subtle",
    onClick: onClose
  }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messages.disconnectDialogCancelButton)), /*#__PURE__*/_react.default.createElement(_new.default, {
    appearance: "warning",
    onClick: handleDisconnect,
    isLoading: isDisconnecting
  }, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messages.disconnectDialogRemoveButton))));
};