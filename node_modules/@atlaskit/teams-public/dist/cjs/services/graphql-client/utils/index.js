"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleGraphQLRequest = handleGraphQLRequest;
exports.makeGraphQLRequestWithoutRetries = makeGraphQLRequestWithoutRetries;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _error = require("../../../common/utils/error");
var _http = require("../../../common/utils/http");
var _statusCodeHandlersProvider = require("../../../common/utils/status-code-handlers-provider");
function makeGraphQLRequestWithoutRetries(_x, _x2) {
  return _makeGraphQLRequestWithoutRetries.apply(this, arguments);
}
function _makeGraphQLRequestWithoutRetries() {
  _makeGraphQLRequestWithoutRetries = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(serviceUrl, body) {
    var options,
      operationNameQuery,
      errorPolicy,
      url,
      request,
      response,
      errors,
      _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
          operationNameQuery = options.operationName ? "?q=".concat(options.operationName) : '';
          errorPolicy = options.errorPolicy || 'none';
          url = serviceUrl + operationNameQuery;
          request = fetch(url, {
            method: 'POST',
            headers: new Headers({
              'Content-Type': 'application/json'
            }),
            credentials: 'include',
            body: JSON.stringify(body)
          }).then(function (res) {
            if (res.status < 300 || res.status === 400) {
              return res.json();
            } else {
              throw res;
            }
          });
          _context.prev = 5;
          _context.next = 8;
          return request;
        case 8:
          response = _context.sent;
          errors = response.errors;
          if (!errors) {
            _context.next = 17;
            break;
          }
          if (!(errorPolicy === 'none')) {
            _context.next = 15;
            break;
          }
          throw _error.GraphQLError.from(errors);
        case 15:
          if (!(errorPolicy === 'all')) {
            _context.next = 17;
            break;
          }
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            setTimeout(function () {
              reject(_error.GraphQLError.from(errors));
            }, 0);
          }));
        case 17:
          return _context.abrupt("return", response.data);
        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](5);
          if (!(_context.t0 instanceof Response)) {
            _context.next = 24;
            break;
          }
          return _context.abrupt("return", {
            response: _context.t0
          });
        case 24:
          if (!Object(_context.t0).hasOwnProperty('response')) {
            _context.next = 26;
            break;
          }
          throw _context.t0;
        case 26:
          return _context.abrupt("return", _context.t0);
        case 27:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[5, 20]]);
  }));
  return _makeGraphQLRequestWithoutRetries.apply(this, arguments);
}
function handleGraphQLRequest(_x3, _x4) {
  return _handleGraphQLRequest.apply(this, arguments);
}
function _handleGraphQLRequest() {
  _handleGraphQLRequest = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(serviceUrl, body) {
    var options,
      makeGraphQLRequestWithRetries,
      result,
      response,
      status,
      statusText,
      traceId,
      _args2 = arguments;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
          makeGraphQLRequestWithRetries = (0, _http.withExponentialBackoff)(makeGraphQLRequestWithoutRetries, {
            initial: _http.EXPONENTIAL_BACKOFF_RETRY_POLICY.INITIAL_DELAY,
            jitter: _http.EXPONENTIAL_BACKOFF_RETRY_POLICY.JITTER,
            max: _http.EXPONENTIAL_BACKOFF_RETRY_POLICY.MAX_RETRIES,
            retryIf: function retryIf(data) {
              return (0, _http.isFetchResponse)(data) && (0, _http.is5xx)(data.response.status);
            }
          });
          _context2.next = 4;
          return makeGraphQLRequestWithRetries(serviceUrl, body, options);
        case 4:
          result = _context2.sent;
          response = result === null || result === void 0 ? void 0 : result.response;
          if (!response) {
            _context2.next = 13;
            break;
          }
          status = response.status;
          statusText = response.statusText;
          traceId = response.headers.get('atl-traceid');
          (0, _statusCodeHandlersProvider.handleResponse)(response);
          if (!(status > 400 && status <= 599)) {
            _context2.next = 13;
            break;
          }
          throw new _error.HttpError({
            message: statusText,
            status: status,
            traceId: traceId !== null && traceId !== void 0 ? traceId : undefined
          });
        case 13:
          return _context2.abrupt("return", result);
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _handleGraphQLRequest.apply(this, arguments);
}