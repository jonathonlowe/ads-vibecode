import { type ClientContext, type ClientContextProps } from '../types';
type NestedContext = {
    [key: string]: string | number | boolean | NestedContext;
};
export type LogExceptionFN = (ex: unknown | Error, name: string, context?: NestedContext & {
    tags?: Record<string, string>;
}) => void;
export type ClientConfig = {
    logException: LogExceptionFN;
};
export declare class BaseClient {
    private config;
    private context;
    private cache;
    constructor(config: ClientConfig);
    setContext(context: ClientContextProps): void;
    getContext(): ClientContext;
    /**
     *
     * @param localValue is used for backwards compatibility
     * @returns
     */
    getOrgId(localValue?: string): string;
    /**
     *
     * @param localValue is used for backwards compatibility
     * @returns
     */
    getCloudId(localValue?: string): string | null | undefined;
    logException: (ex: unknown | Error, name: string, context?: NestedContext & {
        tags?: Record<string, string>;
    }) => void;
    private keyWithContext;
    cacheValue<T>(key: string, value: T, expiryMs?: number): void;
    getCachedValue<T>(key: string): T | undefined;
}
export {};
