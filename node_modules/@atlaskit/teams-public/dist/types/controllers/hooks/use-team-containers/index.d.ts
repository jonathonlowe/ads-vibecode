import { type Action } from 'react-sweet-state';
import { type TeamContainer } from '../../../common/types';
import { type TeamContainers, TeamWithMemberships, type UnlinkContainerMutationError } from '../../../services/types';
type ConnectedTeams = {
    containerId: string | undefined;
    isLoading: boolean;
    hasLoaded: boolean;
    teams: TeamWithMemberships[] | undefined;
    error: Error | null;
    numberOfTeams: number | undefined;
};
type State = {
    teamContainers: TeamContainers;
    loading: boolean;
    error: Error | null;
    unlinkError: UnlinkContainerMutationError | null;
    teamId: string | null;
    connectedTeams: ConnectedTeams;
};
type FireAnalyticsProps = {
    action: string;
    actionSubject: string;
    containerId: string;
    numberOfTeams?: number;
    error?: Error;
};
export declare const useTeamContainersHook: import("react-sweet-state").HookFunction<State, import("react-sweet-state").BoundActions<State, {
    fetchTeamContainers: (teamId: string, fireAnalytics: (action: string, actionSubject: string, error?: Error) => void) => Action<State>;
    fetchNumberOfConnectedTeams: (containerId: string, fireAnalytics: (props: FireAnalyticsProps) => void) => Action<State>;
    fetchConnectedTeams: (containerId: string, fireAnalytics: (props: FireAnalyticsProps) => void) => Action<State>;
    unlinkTeamContainers: (teamId: string, containerId: string) => Action<State>;
    addTeamContainer: (teamContainer: TeamContainer) => Action<State>;
}>, void>;
export declare const useTeamContainers: (teamId: string, enable?: boolean) => {
    addTeamContainer: (teamContainer: TeamContainer) => void | Promise<void>;
    teamContainers: TeamContainers;
    loading: boolean;
    error: Error | null;
    unlinkError: UnlinkContainerMutationError | null;
    teamId: string | null;
    connectedTeams: ConnectedTeams;
};
export declare const useConnectedTeams: () => {
    fetchNumberOfConnectedTeams: (containerId: string) => void | Promise<void>;
    fetchConnectedTeams: (containerId: string) => void | Promise<void>;
    containerId: string | undefined;
    isLoading: boolean;
    hasLoaded: boolean;
    teams: TeamWithMemberships[] | undefined;
    error: Error | null;
    numberOfTeams: number | undefined;
};
export {};
