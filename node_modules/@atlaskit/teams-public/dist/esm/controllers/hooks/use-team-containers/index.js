import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useEffect } from 'react';
import { createHook, createStore } from 'react-sweet-state';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { AnalyticsAction, usePeopleAndTeamAnalytics } from '../../../common/utils/analytics';
import { teamsClient } from '../../../services';
var initialConnectedTeamsState = {
  containerId: undefined,
  isLoading: false,
  hasLoaded: false,
  teams: undefined,
  error: null,
  numberOfTeams: undefined
};
var initialState = {
  teamContainers: [],
  loading: true,
  error: null,
  unlinkError: null,
  teamId: null,
  connectedTeams: initialConnectedTeamsState
};
var actions = {
  fetchTeamContainers: function fetchTeamContainers(teamId, fireAnalytics) {
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var setState, getState, _getState, currentTeamId, containers;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              setState = _ref.setState, getState = _ref.getState;
              _getState = getState(), currentTeamId = _getState.teamId;
              if (!(currentTeamId === teamId)) {
                _context.next = 4;
                break;
              }
              return _context.abrupt("return");
            case 4:
              setState({
                loading: true,
                error: null,
                teamContainers: [],
                teamId: teamId
              });
              _context.prev = 5;
              _context.next = 8;
              return teamsClient.getTeamContainers(teamId);
            case 8:
              containers = _context.sent;
              fireAnalytics(AnalyticsAction.SUCCEEDED, 'fetchTeamContainers');
              setState({
                teamContainers: containers,
                loading: false,
                error: null
              });
              _context.next = 17;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](5);
              fireAnalytics(AnalyticsAction.FAILED, 'fetchTeamContainers', _context.t0);
              setState({
                teamContainers: [],
                error: _context.t0,
                loading: false
              });
            case 17:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[5, 13]]);
      }));
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  },
  fetchNumberOfConnectedTeams: function fetchNumberOfConnectedTeams(containerId, fireAnalytics) {
    return /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {
        var setState, getState, _getState2, currentContainerId, numberOfTeams;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              setState = _ref3.setState, getState = _ref3.getState;
              _getState2 = getState(), currentContainerId = _getState2.connectedTeams.containerId;
              if (!(currentContainerId === containerId)) {
                _context2.next = 4;
                break;
              }
              return _context2.abrupt("return");
            case 4:
              setState({
                connectedTeams: _objectSpread(_objectSpread({}, initialConnectedTeamsState), {}, {
                  containerId: containerId,
                  numberOfTeams: undefined
                })
              });
              _context2.prev = 5;
              _context2.next = 8;
              return teamsClient.getNumberOfConnectedTeams(containerId);
            case 8:
              numberOfTeams = _context2.sent;
              fireAnalytics({
                action: AnalyticsAction.SUCCEEDED,
                actionSubject: 'fetchNumberOfConnectedTeams',
                containerId: containerId,
                numberOfTeams: numberOfTeams
              });
              setState({
                connectedTeams: _objectSpread(_objectSpread({}, initialConnectedTeamsState), {}, {
                  containerId: containerId,
                  numberOfTeams: numberOfTeams
                })
              });
              _context2.next = 17;
              break;
            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](5);
              fireAnalytics({
                action: AnalyticsAction.FAILED,
                actionSubject: 'fetchNumberOfConnectedTeams',
                containerId: containerId,
                numberOfTeams: initialConnectedTeamsState.numberOfTeams,
                error: _context2.t0
              });
              setState({
                connectedTeams: _objectSpread(_objectSpread({}, initialConnectedTeamsState), {}, {
                  containerId: containerId,
                  error: _context2.t0
                })
              });
            case 17:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[5, 13]]);
      }));
      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }();
  },
  fetchConnectedTeams: function fetchConnectedTeams(containerId, fireAnalytics) {
    return /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5) {
        var setState, getState, _getState3, _getState3$connectedT, currentContainerId, numberOfTeams, hasLoaded, teams;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              setState = _ref5.setState, getState = _ref5.getState;
              _getState3 = getState(), _getState3$connectedT = _getState3.connectedTeams, currentContainerId = _getState3$connectedT.containerId, numberOfTeams = _getState3$connectedT.numberOfTeams, hasLoaded = _getState3$connectedT.hasLoaded;
              if (!(currentContainerId === containerId && hasLoaded)) {
                _context3.next = 4;
                break;
              }
              return _context3.abrupt("return");
            case 4:
              setState({
                connectedTeams: {
                  containerId: containerId,
                  isLoading: true,
                  hasLoaded: false,
                  teams: undefined,
                  error: null,
                  numberOfTeams: numberOfTeams
                }
              });
              _context3.prev = 5;
              _context3.next = 8;
              return teamsClient.getConnectedTeams(containerId);
            case 8:
              teams = _context3.sent;
              fireAnalytics({
                action: AnalyticsAction.SUCCEEDED,
                actionSubject: 'fetchConnectedTeams',
                containerId: containerId,
                numberOfTeams: numberOfTeams
              });
              setState({
                connectedTeams: {
                  containerId: containerId,
                  isLoading: false,
                  hasLoaded: true,
                  teams: teams,
                  error: null,
                  numberOfTeams: numberOfTeams
                }
              });
              _context3.next = 17;
              break;
            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](5);
              fireAnalytics({
                action: AnalyticsAction.FAILED,
                actionSubject: 'fetchConnectedTeams',
                containerId: containerId,
                numberOfTeams: numberOfTeams,
                error: _context3.t0
              });
              setState({
                connectedTeams: {
                  containerId: containerId,
                  isLoading: false,
                  hasLoaded: false,
                  teams: [],
                  error: _context3.t0,
                  numberOfTeams: numberOfTeams
                }
              });
            case 17:
            case "end":
              return _context3.stop();
          }
        }, _callee3, null, [[5, 13]]);
      }));
      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }();
  },
  unlinkTeamContainers: function unlinkTeamContainers(teamId, containerId) {
    return /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref7) {
        var setState, getState, mutationResult, _getState4, teamContainers, connectedTeams, newContainers;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              setState = _ref7.setState, getState = _ref7.getState;
              setState({
                unlinkError: null
              });
              _context4.prev = 2;
              _context4.next = 5;
              return teamsClient.unlinkTeamContainer(teamId, containerId);
            case 5:
              mutationResult = _context4.sent;
              if (mutationResult.deleteTeamConnectedToContainer.errors.length) {
                // Just handle 1 error at a time should be suffcient as we disconenct only 1 container at a time
                setState({
                  unlinkError: mutationResult.deleteTeamConnectedToContainer.errors[0]
                });
              } else {
                _getState4 = getState(), teamContainers = _getState4.teamContainers, connectedTeams = _getState4.connectedTeams;
                newContainers = teamContainers.filter(function (container) {
                  return container.id !== containerId;
                });
                if (connectedTeams.containerId === containerId) {
                  setState({
                    teamContainers: newContainers,
                    connectedTeams: initialConnectedTeamsState
                  });
                } else {
                  setState({
                    teamContainers: newContainers
                  });
                }
              }
              _context4.next = 12;
              break;
            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](2);
              setState({
                unlinkError: _context4.t0
              });
            case 12:
            case "end":
              return _context4.stop();
          }
        }, _callee4, null, [[2, 9]]);
      }));
      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }();
  },
  addTeamContainer: function addTeamContainer(teamContainer) {
    return /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref9) {
        var setState, getState, _getState5, teamContainers, connectedTeams, containerExists;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              setState = _ref9.setState, getState = _ref9.getState;
              _getState5 = getState(), teamContainers = _getState5.teamContainers, connectedTeams = _getState5.connectedTeams;
              containerExists = teamContainers.some(function (container) {
                return container.id === teamContainer.id;
              });
              if (!containerExists) {
                _context5.next = 5;
                break;
              }
              return _context5.abrupt("return");
            case 5:
              if (connectedTeams.containerId === teamContainer.id) {
                setState({
                  teamContainers: [].concat(_toConsumableArray(teamContainers), [teamContainer]),
                  connectedTeams: initialConnectedTeamsState
                });
              } else {
                setState({
                  teamContainers: [].concat(_toConsumableArray(teamContainers), [teamContainer])
                });
              }
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }();
  }
};
var Store = createStore({
  initialState: initialState,
  actions: actions,
  name: 'teamContainersStore'
});
export var useTeamContainersHook = createHook(Store);
export var useTeamContainers = function useTeamContainers(teamId) {
  var enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var _useTeamContainersHoo = useTeamContainersHook(),
    _useTeamContainersHoo2 = _slicedToArray(_useTeamContainersHoo, 2),
    state = _useTeamContainersHoo2[0],
    actions = _useTeamContainersHoo2[1];
  var _usePeopleAndTeamAnal = usePeopleAndTeamAnalytics(),
    fireOperationalEvent = _usePeopleAndTeamAnal.fireOperationalEvent;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var fireOperationalAnalytics = useCallback(function (action, actionSubject, error) {
    fireOperationalEvent(createAnalyticsEvent, {
      action: action,
      actionSubject: actionSubject,
      attributes: _objectSpread({
        teamId: teamId
      }, error && {
        error: {
          message: error.message || JSON.stringify(error),
          stack: error.stack
        }
      })
    });
  }, [fireOperationalEvent, createAnalyticsEvent, teamId]);
  useEffect(function () {
    if (enable) {
      actions.fetchTeamContainers(teamId, fireOperationalAnalytics);
    }
  }, [teamId, actions, enable, fireOperationalAnalytics]);
  return _objectSpread(_objectSpread({}, state), {}, {
    addTeamContainer: actions.addTeamContainer
  });
};
export var useConnectedTeams = function useConnectedTeams() {
  var _useTeamContainersHoo3 = useTeamContainersHook(),
    _useTeamContainersHoo4 = _slicedToArray(_useTeamContainersHoo3, 2),
    state = _useTeamContainersHoo4[0],
    actions = _useTeamContainersHoo4[1];
  var _usePeopleAndTeamAnal2 = usePeopleAndTeamAnalytics(),
    fireOperationalEvent = _usePeopleAndTeamAnal2.fireOperationalEvent;
  var _useAnalyticsEvents2 = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var fireOperationalAnalytics = useCallback(function (_ref11) {
    var action = _ref11.action,
      actionSubject = _ref11.actionSubject,
      containerId = _ref11.containerId,
      numberOfTeams = _ref11.numberOfTeams,
      error = _ref11.error;
    fireOperationalEvent(createAnalyticsEvent, {
      action: action,
      actionSubject: actionSubject,
      attributes: _objectSpread({
        containerId: containerId,
        numberOfTeams: numberOfTeams
      }, error && {
        error: {
          message: error.message || JSON.stringify(error),
          stack: error.stack
        }
      })
    });
  }, [fireOperationalEvent, createAnalyticsEvent]);
  return _objectSpread(_objectSpread({}, state.connectedTeams), {}, {
    fetchNumberOfConnectedTeams: function fetchNumberOfConnectedTeams(containerId) {
      return actions.fetchNumberOfConnectedTeams(containerId, fireOperationalAnalytics);
    },
    fetchConnectedTeams: function fetchConnectedTeams(containerId) {
      return actions.fetchConnectedTeams(containerId, fireOperationalAnalytics);
    }
  });
};