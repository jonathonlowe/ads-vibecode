import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useEffect } from 'react';
import { useProductPermissionsStore } from '../../product-permission/main';
export var useProductPermissions = function useProductPermissions(_ref) {
  var userId = _ref.userId,
    cloudId = _ref.cloudId,
    permissionIds = _ref.permissionIds;
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      enabled: true
    },
    enabled = _ref2.enabled;
  var _useProductPermission = useProductPermissionsStore(),
    _useProductPermission2 = _slicedToArray(_useProductPermission, 2),
    state = _useProductPermission2[0],
    getPermissions = _useProductPermission2[1].getPermissions;
  var fetchData = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          getPermissions({
            cloudId: cloudId,
            userId: userId,
            enabled: enabled,
            permissionIds: permissionIds || ['manage', 'write']
          });
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })), [cloudId, enabled, getPermissions, userId, permissionIds]);
  useEffect(function () {
    fetchData();
  }, [fetchData]);
  return {
    loading: state.isLoading,
    data: state.permissions,
    error: state.error
  };
};