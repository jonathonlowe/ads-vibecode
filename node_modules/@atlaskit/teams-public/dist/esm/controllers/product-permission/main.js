import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createHook, createStore } from 'react-sweet-state';
import { getProductPermissionRequestBody, transformPermissions } from './utils';
var actions = {
  getPermissions: function getPermissions(_ref) {
    var userId = _ref.userId,
      cloudId = _ref.cloudId,
      enabled = _ref.enabled,
      _ref$permissionIds = _ref.permissionIds,
      permissionIds = _ref$permissionIds === void 0 ? ['manage', 'write'] : _ref$permissionIds;
    return /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
        var setState, getState, dispatch, _getState, hasLoaded, isLoading, permissions, shouldFetch, response, _permissions;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              setState = _ref2.setState, getState = _ref2.getState, dispatch = _ref2.dispatch;
              _getState = getState(), hasLoaded = _getState.hasLoaded, isLoading = _getState.isLoading, permissions = _getState.permissions;
              if (!(isLoading || !userId || !cloudId || !enabled)) {
                _context.next = 4;
                break;
              }
              return _context.abrupt("return");
            case 4:
              shouldFetch = !hasLoaded || permissionIds.some(function (permissionId) {
                var _permissions$confluen, _permissions$jira;
                return ((_permissions$confluen = permissions.confluence) === null || _permissions$confluen === void 0 ? void 0 : _permissions$confluen[permissionId]) === undefined || ((_permissions$jira = permissions.jira) === null || _permissions$jira === void 0 ? void 0 : _permissions$jira[permissionId]) === undefined;
              });
              if (shouldFetch) {
                _context.next = 7;
                break;
              }
              return _context.abrupt("return");
            case 7:
              _context.prev = 7;
              setState({
                isLoading: true
              });
              _context.next = 11;
              return fetch('/gateway/api/permissions/bulk/permitted', {
                headers: {
                  'Content-Type': 'application/json'
                },
                method: 'POST',
                credentials: 'include',
                body: getProductPermissionRequestBody(cloudId, userId, permissionIds)
              });
            case 11:
              response = _context.sent;
              if (response.ok) {
                _context.next = 14;
                break;
              }
              throw new Error('Failed to fetch product permissions');
            case 14:
              _context.next = 16;
              return response.json();
            case 16:
              _permissions = _context.sent;
              dispatch(actions.setPermissions(_permissions));
              _context.next = 23;
              break;
            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](7);
              dispatch(actions.setError(new Error('Failed to fetch product permissions')));
            case 23:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[7, 20]]);
      }));
      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }();
  },
  setError: function setError(error) {
    return function (_ref4) {
      var setState = _ref4.setState;
      setState({
        hasLoaded: true,
        isLoading: false,
        error: error
      });
    };
  },
  setLoading: function setLoading(isLoading) {
    return function (_ref5) {
      var setState = _ref5.setState;
      setState({
        isLoading: isLoading
      });
    };
  },
  setPermissions: function setPermissions(permissions) {
    return function (_ref6) {
      var setState = _ref6.setState;
      setState({
        hasLoaded: true,
        isLoading: false,
        permissions: transformPermissions(permissions),
        permissionsResponse: permissions
      });
    };
  }
};
var Store = createStore({
  initialState: {
    error: undefined,
    hasLoaded: false,
    isLoading: false,
    permissions: {}
  },
  actions: actions,
  name: 'product-permissions'
});
export var useProductPermissionsStore = createHook(Store);