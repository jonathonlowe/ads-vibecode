import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PRODUCTS = ['confluence', 'jira', 'jira-core', 'jira-software', 'jira-servicedesk', 'jira-product-discovery'];
export var transformPermissions = function transformPermissions(permissions) {
  return permissions.reduce(function (acc, permission) {
    if (permission.resourceId.includes('jira')) {
      var _acc$jira;
      acc['jira'] = _objectSpread(_objectSpread({}, acc['jira']), {}, _defineProperty({}, permission.permissionId, ((_acc$jira = acc['jira']) === null || _acc$jira === void 0 ? void 0 : _acc$jira[permission.permissionId]) || permission.permitted));
    } else if (permission.resourceId.includes('confluence')) {
      var _acc$confluence;
      acc['confluence'] = _objectSpread(_objectSpread({}, acc['confluence']), {}, _defineProperty({}, permission.permissionId, ((_acc$confluence = acc['confluence']) === null || _acc$confluence === void 0 ? void 0 : _acc$confluence[permission.permissionId]) || permission.permitted));
    }
    return acc;
  }, {});
};
export var getProductPermissionRequestBody = function getProductPermissionRequestBody(cloudId, userId, permissionIds) {
  var body = permissionIds.reduce(function (acc, permissionId) {
    var permission = {
      permissionId: permissionId,
      resourceId: '',
      principalId: "ari:cloud:identity::user/".concat(userId),
      dontRequirePrincipalInSite: true
    };
    PRODUCTS.forEach(function (product) {
      acc.push(_objectSpread(_objectSpread({}, permission), {}, {
        resourceId: "ari:cloud:".concat(product, "::site/").concat(cloudId)
      }));
    });
    return acc;
  }, []);
  return JSON.stringify(body);
};
export var hasProductPermission = function hasProductPermission(permissions, product, permissionIds) {
  if (!permissions[product]) {
    return false;
  }
  if ((!permissionIds || permissionIds.length === 0) && permissions[product]) {
    return Object.values(permissions[product] || {}).some(function (value) {
      return value === true;
    });
  }
  return permissionIds === null || permissionIds === void 0 ? void 0 : permissionIds.some(function (permissionId) {
    var _permissions$product;
    return (_permissions$product = permissions[product]) === null || _permissions$product === void 0 ? void 0 : _permissions$product[permissionId];
  });
};