import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import ModalDialog, { ModalBody, ModalFooter, ModalHeader, ModalTitle } from '@atlaskit/modal-dialog';
import { Box, Stack } from '@atlaskit/primitives/compiled';
import { getContainerProperties } from '../../../common/utils/get-container-properties';
export var messages = defineMessages({
  disconnectDialogTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.title.non-final',
    defaultMessage: 'Disconnect place',
    description: 'Title of the disconnect dialog for team containers'
  },
  disconnectDialogDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.description.non-final',
    defaultMessage: 'This team will no longer be connected to the {containerName} {containerType}.',
    description: 'Description of the disconnect dialog for team containers'
  },
  disconnectDialogDisclaimer: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.disclaimer.non-final',
    defaultMessage: 'Disconnecting the team from the {containerType} will not affect any work connected to the team within the {containerType}.',
    description: 'Disclaimer of the disconnect dialog for team containers'
  },
  disconnectDialogCancelButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.cancel-button.non-final',
    defaultMessage: 'Cancel',
    description: 'Button to cancel the dialog'
  },
  disconnectDialogRemoveButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.remove-button.non-final',
    defaultMessage: 'Remove',
    description: 'Button to disconnect the team from the container'
  }
});
export var DisconnectDialog = function DisconnectDialog(_ref) {
  var containerName = _ref.containerName,
    containerType = _ref.containerType,
    onDisconnect = _ref.onDisconnect,
    onClose = _ref.onClose;
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isDisconnecting = _React$useState2[0],
    setIsDisconnecting = _React$useState2[1];
  var handleDisconnect = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setIsDisconnecting(true);
            _context.next = 3;
            return onDisconnect();
          case 3:
            setIsDisconnecting(false);
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleDisconnect() {
      return _ref2.apply(this, arguments);
    };
  }();
  var _getContainerProperti = getContainerProperties(containerType),
    containerTypeText = _getContainerProperti.containerTypeText,
    description = _getContainerProperti.description;
  return /*#__PURE__*/React.createElement(ModalDialog, {
    onClose: onClose,
    width: "small",
    testId: "team-containers-disconnect-dialog",
    shouldScrollInViewport: true
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, {
    appearance: "warning"
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogTitle))), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(Stack, {
    space: "space.150"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.disconnectDialogDescription, {
    values: {
      containerName: /*#__PURE__*/React.createElement("b", null, containerName),
      containerType: description
    }
  }))), /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.disconnectDialogDisclaimer, {
    values: {
      containerType: containerTypeText
    }
  })))), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: onClose
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogCancelButton)), /*#__PURE__*/React.createElement(Button, {
    appearance: "warning",
    onClick: handleDisconnect,
    isLoading: isDisconnecting
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogRemoveButton))));
};