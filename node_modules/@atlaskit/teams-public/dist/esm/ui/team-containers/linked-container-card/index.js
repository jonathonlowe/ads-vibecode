/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useState } from 'react';
import { defineMessages, useIntl } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import Avatar from '@atlaskit/avatar';
import { IconButton } from '@atlaskit/button/new';
import CrossIcon from '@atlaskit/icon/utility/cross';
import Link from '@atlaskit/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex, Inline, Stack, Text } from '@atlaskit/primitives/compiled';
import Tooltip from '@atlaskit/tooltip';
import { AnalyticsAction, usePeopleAndTeamAnalytics } from '../../../common/utils/analytics';
import { getContainerProperties } from '../../../common/utils/get-container-properties';
var styles = {
  container: "_2rkoop52 _1h6dz9xs _12y3e4h9 _12jimuej _1qu2nqa1 _ca0qutpp _u5f3utpp _n3tdutpp _19bvutpp _syaz1fxt",
  card: "_4cvr1h6o _1bsb1osq",
  iconWrapper: "_1bsbzwfg _4t3izwfg _1ul9zwfg _1tkezwfg",
  crossIconWrapper: "_1e0c1txw _4cvr1h6o _1bahesu3 _18u01wug"
};
var LinkedCardWrapper = function LinkedCardWrapper(_ref) {
  var children = _ref.children,
    href = _ref.href,
    handleMouseEnter = _ref.handleMouseEnter,
    handleMouseLeave = _ref.handleMouseLeave,
    containerType = _ref.containerType,
    containerId = _ref.containerId;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hovered = _useState2[0],
    setHovered = _useState2[1];
  var onMouseEnter = function onMouseEnter() {
    handleMouseEnter();
    setHovered(true);
  };
  var _usePeopleAndTeamAnal = usePeopleAndTeamAnalytics(),
    fireUIEvent = _usePeopleAndTeamAnal.fireUIEvent;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var onMouseLeave = function onMouseLeave() {
    handleMouseLeave();
    setHovered(false);
  };
  return /*#__PURE__*/React.createElement(Box, {
    backgroundColor: hovered ? 'color.background.input.hovered' : 'color.background.input',
    xcss: styles.container,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    testId: "linked-container-card-inner"
  }, /*#__PURE__*/React.createElement(Link, {
    href: href,
    appearance: "subtle",
    onClick: function onClick() {
      fireUIEvent(createAnalyticsEvent, {
        action: AnalyticsAction.CLICKED,
        actionSubject: 'container',
        actionSubjectId: 'teamContainer',
        attributes: {
          containerSelected: {
            container: containerType,
            containerId: containerId
          }
        }
      });
    }
  }, children));
};
export var LinkedContainerCard = function LinkedContainerCard(_ref2) {
  var containerType = _ref2.containerType,
    title = _ref2.title,
    containerIcon = _ref2.containerIcon,
    link = _ref2.link,
    containerId = _ref2.containerId,
    containerTypeProperties = _ref2.containerTypeProperties,
    onDisconnectButtonClick = _ref2.onDisconnectButtonClick;
  var _useAnalyticsEvents2 = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var _getContainerProperti = getContainerProperties(containerType, 'small', containerTypeProperties),
    description = _getContainerProperti.description,
    icon = _getContainerProperti.icon,
    containerTypeText = _getContainerProperti.containerTypeText;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showCloseIcon = _useState4[0],
    setShowCloseIcon = _useState4[1];
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _usePeopleAndTeamAnal2 = usePeopleAndTeamAnalytics(),
    fireUIEvent = _usePeopleAndTeamAnal2.fireUIEvent;
  return /*#__PURE__*/React.createElement(LinkedCardWrapper, {
    href: link || '#',
    handleMouseEnter: function handleMouseEnter() {
      return setShowCloseIcon(true);
    },
    handleMouseLeave: function handleMouseLeave() {
      return setShowCloseIcon(false);
    },
    containerType: containerType,
    containerId: containerId
  }, /*#__PURE__*/React.createElement(Inline, {
    space: "space.100",
    xcss: styles.card
  }, /*#__PURE__*/React.createElement(Avatar, {
    appearance: "square",
    size: "medium",
    src: containerIcon,
    testId: "linked-container-icon"
  }), /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(Text, {
    maxLines: 1,
    weight: "medium",
    color: "color.text"
  }, title), /*#__PURE__*/React.createElement(Flex, _extends({
    gap: "space.050"
  }, fg('enable_card_alignment_fix') ? {
    alignItems: 'center'
  } : {}), icon, /*#__PURE__*/React.createElement(Inline, {
    space: "space.050"
  }, /*#__PURE__*/React.createElement(Text, {
    size: "small",
    color: "color.text.subtle"
  }, description), /*#__PURE__*/React.createElement(Text, {
    size: "small",
    color: "color.text.subtle"
  }, containerTypeText)))), showCloseIcon && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.crossIconWrapper
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: formatMessage(messages.disconnectTooltip),
    position: "top"
  }, /*#__PURE__*/React.createElement(IconButton, {
    label: "disconnect the container ".concat(title),
    appearance: "subtle",
    icon: CrossIcon,
    spacing: "compact",
    onClick: function onClick(e) {
      e.preventDefault();
      e.stopPropagation();
      onDisconnectButtonClick();
      fireUIEvent(createAnalyticsEvent, {
        action: AnalyticsAction.CLICKED,
        actionSubject: 'button',
        actionSubjectId: 'containerUnlinkButton'
      });
    }
  })))));
};
var messages = defineMessages({
  disconnectTooltip: {
    id: 'ptc-directory.team-containers.disconnect-button.tooltip',
    defaultMessage: 'Disconnect',
    description: 'Tooltip for the disconnect button'
  }
});