import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { DefaultError, GraphQLError } from '../../common/utils/error';
import { BaseClient } from '../base-client';
import { handleGraphQLRequest } from './utils';
export var BaseGraphQlClient = /*#__PURE__*/function (_BaseClient) {
  function BaseGraphQlClient(serviceUrl, config) {
    var _this;
    _classCallCheck(this, BaseGraphQlClient);
    _this = _callSuper(this, BaseGraphQlClient, [config]);
    _this.serviceUrl = serviceUrl;
    return _this;
  }
  _inherits(BaseGraphQlClient, _BaseClient);
  return _createClass(BaseGraphQlClient, [{
    key: "setServiceUrl",
    value: function setServiceUrl(serviceUrl) {
      this.serviceUrl = serviceUrl;
    }
  }, {
    key: "makeGraphQLRequest",
    value: function () {
      var _makeGraphQLRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body) {
        var options,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              _context.prev = 1;
              return _context.abrupt("return", handleGraphQLRequest(this.serviceUrl, body, options));
            case 5:
              _context.prev = 5;
              _context.t0 = _context["catch"](1);
              if (!(_context.t0 instanceof GraphQLError)) {
                _context.next = 9;
                break;
              }
              throw _context.t0;
            case 9:
              this.logException(_context.t0, 'UnknownError in GraphQLClient.makeGraphQLRequestWithoutRetries');
              throw new DefaultError({});
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 5]]);
      }));
      function makeGraphQLRequest(_x) {
        return _makeGraphQLRequest.apply(this, arguments);
      }
      return makeGraphQLRequest;
    }()
  }]);
}(BaseClient);