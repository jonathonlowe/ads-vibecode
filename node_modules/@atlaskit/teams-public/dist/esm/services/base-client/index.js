import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
export var BaseClient = /*#__PURE__*/function () {
  function BaseClient(config) {
    var _this = this;
    _classCallCheck(this, BaseClient);
    _defineProperty(this, "cache", {});
    _defineProperty(this, "logException", function (ex, name, context) {
      _this.config.logException(ex, name, context);
    });
    this.config = config;
    this.context = {
      cloudId: null
    };
  }
  return _createClass(BaseClient, [{
    key: "setContext",
    value: function setContext(context) {
      this.context = _objectSpread(_objectSpread({}, context), {}, {
        cloudId: context.cloudId || null
      });
    }
  }, {
    key: "getContext",
    value: function getContext() {
      return this.context;
    }

    /**
     *
     * @param localValue is used for backwards compatibility
     * @returns
     */
  }, {
    key: "getOrgId",
    value: function getOrgId(localValue) {
      var orgId = localValue || this.getContext().orgId;
      if (!orgId) {
        var err = new Error('No orgId set');
        this.logException(err, 'No orgId set');
        throw err;
      }
      return orgId;
    }
    /**
     *
     * @param localValue is used for backwards compatibility
     * @returns
     */
  }, {
    key: "getCloudId",
    value: function getCloudId(localValue) {
      return localValue || this.getContext().cloudId;
    }
  }, {
    key: "keyWithContext",
    value: function keyWithContext(key) {
      var _this$getContext$orgI, _this$getContext$user;
      return "".concat(this.getContext().cloudId, "-").concat((_this$getContext$orgI = this.getContext().orgId) !== null && _this$getContext$orgI !== void 0 ? _this$getContext$orgI : 'no-org-id', "-").concat((_this$getContext$user = this.getContext().userId) !== null && _this$getContext$user !== void 0 ? _this$getContext$user : 'no-user-id', "-").concat(key);
    }

    // Default expiration is 5 minutes
  }, {
    key: "cacheValue",
    value: function cacheValue(key, value) {
      var expiryMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000 * 60 * 5;
      this.cache[this.keyWithContext(key)] = {
        data: value,
        expiration: Date.now() + expiryMs
      };
    }
  }, {
    key: "getCachedValue",
    value: function getCachedValue(key) {
      var record = this.cache[this.keyWithContext(key)];
      if (record && record.expiration > Date.now()) {
        return record.data;
      }
      return undefined;
    }
  }]);
}();