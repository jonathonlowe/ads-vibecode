import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { aggClient } from './agg-client';
export var TeamsClient = /*#__PURE__*/function () {
  function TeamsClient(
  /**
   * @param {ClientContextProps} context - Context including CloudId & OrgId to be used for all requests
   */
  context) {
    _classCallCheck(this, TeamsClient);
    _defineProperty(this, "_aggClient", aggClient);
    if (context) {
      this.setContext(context);
    }
  }

  /**
   * Sets the base URL to be used in the client requests
   * @param {string} baseUrl - The new base URL
   */
  return _createClass(TeamsClient, [{
    key: "setBaseUrl",
    value: function setBaseUrl(baseUrl) {
      this._aggClient.setBaseUrl(baseUrl);
    }

    /**
     * Sets context including CloudId & OrgId to be used for all requests
     */
  }, {
    key: "setContext",
    value: function setContext(context) {
      this._aggClient.setContext(context);
    }

    /**
     * Get the containers for a given team
     * @param {string} teamId
     * @returns {Promise<TeamContainers>}
     */
  }, {
    key: "getTeamContainers",
    value: (function () {
      var _getTeamContainers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(teamId) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._aggClient.getTeamContainers(teamId));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getTeamContainers(_x) {
        return _getTeamContainers.apply(this, arguments);
      }
      return getTeamContainers;
    }()
    /**
     * Get the number of teams connected to a container (Confluence space or Jira project)
     * @param {string} containerId
     * @returns {Promise}
     */
    )
  }, {
    key: "getNumberOfConnectedTeams",
    value: (function () {
      var _getNumberOfConnectedTeams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(containerId) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this._aggClient.queryNumberOfTeamConnectedToContainer(containerId));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function getNumberOfConnectedTeams(_x2) {
        return _getNumberOfConnectedTeams.apply(this, arguments);
      }
      return getNumberOfConnectedTeams;
    }()
    /**
     * Get teams connected to a container (Confluence space or Jira project)
     * @param {string} containerId
     * @returns {Promise}
     */
    )
  }, {
    key: "getConnectedTeams",
    value: (function () {
      var _getConnectedTeams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(containerId) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._aggClient.queryTeamsConnectedToContainer(containerId));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getConnectedTeams(_x3) {
        return _getConnectedTeams.apply(this, arguments);
      }
      return getConnectedTeams;
    }()
    /**
     * Unlink a container from a team
     * @param {string} teamId
     * @param {string} containerId
     * @returns {Promise<void>}
     */
    )
  }, {
    key: "unlinkTeamContainer",
    value: (function () {
      var _unlinkTeamContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(teamId, containerId) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this._aggClient.unlinkTeamContainer(teamId, containerId));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function unlinkTeamContainer(_x4, _x5) {
        return _unlinkTeamContainer.apply(this, arguments);
      }
      return unlinkTeamContainer;
    }())
  }]);
}();
export var teamsClient = new TeamsClient();