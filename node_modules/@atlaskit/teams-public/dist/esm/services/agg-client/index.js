import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { teamIdToAri } from '../../common/utils/team-id-to-ari';
import { toUserId } from '../../common/utils/user-ari';
import { DEFAULT_CONFIG } from '../constants';
import { BaseGraphQlClient } from '../graphql-client';
import { UnlinkContainerMutation } from './utils/mutations/unlink-container-mutation';
import { NumberOfTeamConnectedToContainerQuery } from './utils/queries/number-of-team-connected-to-container-query';
import { TeamConnectedToContainerQuery } from './utils/queries/team-connected-to-container-query';
import { TeamContainersQuery } from './utils/queries/team-containers-query';
export var AGGClient = /*#__PURE__*/function (_BaseGraphQlClient) {
  function AGGClient(baseUrl, config) {
    _classCallCheck(this, AGGClient);
    return _callSuper(this, AGGClient, ["".concat(baseUrl, "/graphql"), config]);
  }
  _inherits(AGGClient, _BaseGraphQlClient);
  return _createClass(AGGClient, [{
    key: "setBaseUrl",
    value: function setBaseUrl(baseUrl) {
      this.setServiceUrl("".concat(baseUrl, "/graphql"));
    }
  }, {
    key: "getTeamContainers",
    value: function () {
      var _getTeamContainers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(teamId) {
        var teamAri, cypherQuery, response, containersResult;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              teamAri = teamIdToAri(teamId);
              cypherQuery = "MATCH (team:IdentityTeam {ari: '".concat(teamAri, "'})-[:team_connected_to_container]->(container) RETURN container");
              _context.next = 4;
              return this.makeGraphQLRequest({
                query: TeamContainersQuery,
                variables: {
                  cypherQuery: cypherQuery
                }
              }, {
                operationName: 'TeamContainersQuery'
              });
            case 4:
              response = _context.sent;
              containersResult = response.graphStore.cypherQuery.edges.map(function (edge) {
                return {
                  id: edge.node.to.id,
                  type: edge.node.to.data.__typename,
                  name: edge.node.to.data.__typename === 'ConfluenceSpace' ? edge.node.to.data.confluenceSpaceName || '' : edge.node.to.data.jiraProjectName,
                  icon: edge.node.to.data.__typename === 'ConfluenceSpace' ? "".concat(edge.node.to.data.links.base).concat(edge.node.to.data.icon.path) : edge.node.to.data.avatar.medium,
                  createdDate: edge.node.to.data.__typename === 'ConfluenceSpace' ? new Date(edge.node.to.data.createdDate) : new Date(edge.node.to.data.created),
                  link: edge.node.to.data.__typename === 'ConfluenceSpace' ? "".concat(edge.node.to.data.links.base).concat(edge.node.to.data.links.webUi) : edge.node.to.data.webUrl,
                  containerTypeProperties: {
                    subType: edge.node.to.data.__typename === 'JiraProject' ? edge.node.to.data.projectType || '' : undefined,
                    name: edge.node.to.data.__typename === 'JiraProject' ? edge.node.to.data.projectTypeName || '' : undefined
                  }
                };
              });
              return _context.abrupt("return", containersResult);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getTeamContainers(_x) {
        return _getTeamContainers.apply(this, arguments);
      }
      return getTeamContainers;
    }()
  }, {
    key: "unlinkTeamContainer",
    value: function () {
      var _unlinkTeamContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(teamId, containerId) {
        var teamAri, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              teamAri = teamIdToAri(teamId);
              _context2.next = 3;
              return this.makeGraphQLRequest({
                query: UnlinkContainerMutation,
                variables: {
                  containerId: containerId,
                  teamId: teamAri
                }
              }, {
                operationName: 'UnlinkContainerMutation'
              });
            case 3:
              response = _context2.sent;
              return _context2.abrupt("return", response.graphStore);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function unlinkTeamContainer(_x2, _x3) {
        return _unlinkTeamContainer.apply(this, arguments);
      }
      return unlinkTeamContainer;
    }()
  }, {
    key: "queryNumberOfTeamConnectedToContainer",
    value: function () {
      var _queryNumberOfTeamConnectedToContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(containerId) {
        var _response$graphStore;
        var response;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.makeGraphQLRequest({
                query: NumberOfTeamConnectedToContainerQuery,
                variables: {
                  containerId: containerId
                }
              }, {
                operationName: 'NumberOfTeamConnectedToContainerQuery'
              });
            case 2:
              response = _context3.sent;
              return _context3.abrupt("return", response === null || response === void 0 || (_response$graphStore = response.graphStore) === null || _response$graphStore === void 0 || (_response$graphStore = _response$graphStore.teamConnectedToContainerInverse) === null || _response$graphStore === void 0 || (_response$graphStore = _response$graphStore.edges) === null || _response$graphStore === void 0 ? void 0 : _response$graphStore.length);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function queryNumberOfTeamConnectedToContainer(_x4) {
        return _queryNumberOfTeamConnectedToContainer.apply(this, arguments);
      }
      return queryNumberOfTeamConnectedToContainer;
    }()
  }, {
    key: "queryTeamsConnectedToContainer",
    value: function () {
      var _queryTeamsConnectedToContainer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(containerId) {
        var _response$graphStore2;
        var response;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.makeGraphQLRequest({
                query: TeamConnectedToContainerQuery,
                variables: {
                  containerId: containerId
                }
              }, {
                operationName: 'TeamConnectedToContainerQuery'
              });
            case 2:
              response = _context4.sent;
              return _context4.abrupt("return", response === null || response === void 0 || (_response$graphStore2 = response.graphStore) === null || _response$graphStore2 === void 0 || (_response$graphStore2 = _response$graphStore2.teamConnectedToContainerInverse) === null || _response$graphStore2 === void 0 || (_response$graphStore2 = _response$graphStore2.edges) === null || _response$graphStore2 === void 0 ? void 0 : _response$graphStore2.map(function (_ref) {
                var _node$creator, _node$members$nodes$m, _node$members, _node$members$nodes$l, _node$members2;
                var node = _ref.node;
                return {
                  id: node.id,
                  displayName: node.displayName,
                  description: node.description,
                  state: node.state,
                  membershipSettings: node.membershipSettings,
                  organizationId: node.organizationId,
                  creatorId: (_node$creator = node.creator) === null || _node$creator === void 0 ? void 0 : _node$creator.id,
                  isVerified: node.isVerified,
                  members: (_node$members$nodes$m = (_node$members = node.members) === null || _node$members === void 0 ? void 0 : _node$members.nodes.map(function (_ref2) {
                    var _member$name;
                    var member = _ref2.member;
                    return {
                      id: member !== null && member !== void 0 && member.id ? toUserId(member === null || member === void 0 ? void 0 : member.id) : '',
                      fullName: (_member$name = member === null || member === void 0 ? void 0 : member.name) !== null && _member$name !== void 0 ? _member$name : '',
                      avatarUrl: member === null || member === void 0 ? void 0 : member.picture,
                      status: member === null || member === void 0 ? void 0 : member.accountStatus
                    };
                  })) !== null && _node$members$nodes$m !== void 0 ? _node$members$nodes$m : [],
                  includesYou: false,
                  // to-do - this needs to be computed - https://product-fabric.atlassian.net/browse/CCECO-4368
                  memberCount: (_node$members$nodes$l = (_node$members2 = node.members) === null || _node$members2 === void 0 ? void 0 : _node$members2.nodes.length) !== null && _node$members$nodes$l !== void 0 ? _node$members$nodes$l : 0,
                  largeAvatarImageUrl: node.largeAvatarImageUrl,
                  smallAvatarImageUrl: node.smallAvatarImageUrl,
                  largeHeaderImageUrl: node.largeHeaderImageUrl,
                  smallHeaderImageUrl: node.smallHeaderImageUrl,
                  restriction: 'ORG_MEMBERS' // to-do - figure out if this should be optional (it's deprecated) - https://product-fabric.atlassian.net/browse/CCECO-4368
                };
              }));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function queryTeamsConnectedToContainer(_x5) {
        return _queryTeamsConnectedToContainer.apply(this, arguments);
      }
      return queryTeamsConnectedToContainer;
    }()
  }]);
}(BaseGraphQlClient);
export var aggClient = new AGGClient(DEFAULT_CONFIG.stargateRoot, {
  logException: function logException() {}
});