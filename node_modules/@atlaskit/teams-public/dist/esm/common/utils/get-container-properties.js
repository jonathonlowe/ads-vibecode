/* get-container-properties.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./get-container-properties.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import Image from '@atlaskit/image';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex, Text } from '@atlaskit/primitives/compiled';
import ConfluenceIcon from '../assets/ConfluenceIcon.svg';
import JiraIcon from '../assets/JiraIcon.svg';
import JiraProjectDiscovery from '../assets/JiraProjectDiscovery.svg';
import JiraServiceManagement from '../assets/JiraServiceManagement.svg';
var styles = {
  iconWrapper: "_1bsb1crf _4t3i1crf",
  mediumIconWrapper: "_1bsb7vkz _4t3i7vkz"
};
export var messages = defineMessages({
  addConfluenceContainerTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.add-confluence-space-title.non-final',
    defaultMessage: 'Add space',
    description: 'Title of the card to add a Confluence space to a team'
  },
  confluenceContainerDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.add-confluence-space-description.non-final',
    defaultMessage: 'Confluence',
    description: 'Description of the card to add a Confluence space to a team'
  },
  addJiraProjectTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.add-jira-project-title.non-final',
    defaultMessage: 'Add project',
    description: 'Title of the card to add a Jira project to a team'
  },
  jiraProjectDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.add-jira-project-description.non-final',
    defaultMessage: 'Jira',
    description: 'Description of the card to add a Jira project to a team'
  },
  addLoomSpaceTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.add-loom-space-title.non-final',
    defaultMessage: 'Add space',
    description: 'Title of the card to add a Loom space to a team'
  },
  loomSpaceDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.add-loom-space-description.non-final',
    defaultMessage: 'Loom',
    description: 'Description of the card to add a Loom space to a team'
  },
  projectContainerText: {
    id: 'ptc-directory.team-profile-page.team-containers.project-container-text.non-final',
    defaultMessage: 'project',
    description: 'Text for project type containers'
  },
  spaceContainerText: {
    id: 'ptc-directory.team-profile-page.team-containers.space-container-text.non-final',
    defaultMessage: 'space',
    description: 'Text for space type containers'
  },
  webLinkContainerTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.webLink-container-text.non-final',
    defaultMessage: 'Add any web link',
    description: 'Description of the card to add a web link to a team'
  }
});
var getJiraIcon = function getJiraIcon(containerSubTypes) {
  switch (containerSubTypes) {
    case 'PRODUCT_DISCOVERY':
      return JiraProjectDiscovery;
    case 'SERVICE_DESK':
      return JiraServiceManagement;
    default:
      return JiraIcon;
  }
};
var getJiraContainerProperties = function getJiraContainerProperties(containerTypeProperties) {
  var _ref = containerTypeProperties || {},
    subType = _ref.subType,
    name = _ref.name;
  var Comp = fg('enable_card_alignment_fix') ? Flex : Box;
  var baseProperties = {
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.jiraProjectDescription),
    icon: /*#__PURE__*/React.createElement(Comp, {
      xcss: styles.iconWrapper
    }, /*#__PURE__*/React.createElement(Image, {
      src: getJiraIcon(subType),
      alt: "",
      testId: "jira-project-container-icon"
    })),
    title: /*#__PURE__*/React.createElement(FormattedMessage, messages.addJiraProjectTitle),
    containerTypeText: /*#__PURE__*/React.createElement(FormattedMessage, messages.projectContainerText)
  };
  switch (subType) {
    case 'PRODUCT_DISCOVERY':
    case 'SERVICE_DESK':
      return _objectSpread(_objectSpread({}, baseProperties), {}, {
        containerTypeText: '',
        description: name || baseProperties.description
      });
    default:
      return baseProperties;
  }
};
export var getContainerProperties = function getContainerProperties(containerType) {
  var iconSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'small';
  var containerTypeProperties = arguments.length > 2 ? arguments[2] : undefined;
  var Comp = fg('enable_card_alignment_fix') ? Flex : Box;
  switch (containerType) {
    case 'ConfluenceSpace':
      return {
        description: /*#__PURE__*/React.createElement(FormattedMessage, messages.confluenceContainerDescription),
        icon: /*#__PURE__*/React.createElement(Comp, {
          xcss: iconSize === 'medium' ? styles.mediumIconWrapper : styles.iconWrapper
        }, /*#__PURE__*/React.createElement(Image, {
          src: ConfluenceIcon,
          alt: "",
          testId: "confluence-space-container-icon"
        })),
        title: /*#__PURE__*/React.createElement(FormattedMessage, messages.addConfluenceContainerTitle),
        containerTypeText: /*#__PURE__*/React.createElement(FormattedMessage, messages.spaceContainerText)
      };
    case 'JiraProject':
      return getJiraContainerProperties(containerTypeProperties);
    case 'WebLink':
      return {
        description: /*#__PURE__*/React.createElement(Text, {
          size: "medium",
          weight: "medium"
        }, /*#__PURE__*/React.createElement(FormattedMessage, messages.webLinkContainerTitle)),
        icon: null,
        title: null,
        containerTypeText: null
      };
    default:
      return {
        description: null,
        icon: null,
        title: null,
        containerTypeText: null
      };
  }
};