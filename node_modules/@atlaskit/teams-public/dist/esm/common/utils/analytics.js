import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { usePeopleTeamsAnalyticsSubcontext } from '@atlaskit/people-teams-ui-public/analytics';
var ANALYTICS_CHANNEL = 'peopleTeams';
var runItLater = function runItLater(cb) {
  if (window.requestIdleCallback === 'function') {
    return window.requestIdleCallback(cb);
  }
  if (typeof window.requestAnimationFrame === 'function') {
    return window.requestAnimationFrame(cb);
  }
  return function () {
    return setTimeout(cb);
  };
};
export var usePeopleAndTeamAnalytics = function usePeopleAndTeamAnalytics() {
  var _usePeopleTeamsAnalyt = usePeopleTeamsAnalyticsSubcontext(),
    _usePeopleTeamsAnalyt2 = _slicedToArray(_usePeopleTeamsAnalyt, 1),
    injectedEventAttributes = _usePeopleTeamsAnalyt2[0].eventAttributes;
  var fireEvent = function fireEvent(kind) {
    return function (createAnalyticsEvent, body) {
      if (!createAnalyticsEvent) {
        return;
      }
      runItLater(function () {
        var eventWithSubcontextAttributes = _objectSpread(_objectSpread({}, body.attributes), injectedEventAttributes);
        createAnalyticsEvent(_objectSpread(_objectSpread({
          eventType: kind
        }, body), {}, {
          attributes: eventWithSubcontextAttributes
        })).fire(ANALYTICS_CHANNEL);
      });
    };
  };
  return {
    fireOperationalEvent: fireEvent('operational'),
    fireScreenEvent: fireEvent('screen'),
    fireTrackEvent: fireEvent('track'),
    fireUIEvent: fireEvent('ui')
  };
};
export var AnalyticsAction = /*#__PURE__*/function (AnalyticsAction) {
  AnalyticsAction["RENDERED"] = "rendered";
  AnalyticsAction["CLICKED"] = "clicked";
  AnalyticsAction["FAILED"] = "failed";
  AnalyticsAction["SUCCEEDED"] = "succeeded";
  AnalyticsAction["VIEWED"] = "viewed";
  AnalyticsAction["CLOSED"] = "closed";
  AnalyticsAction["ERROR"] = "error";
  AnalyticsAction["SUBMITED"] = "submitted";
  AnalyticsAction["FETCHED"] = "fetched";
  AnalyticsAction["SENT"] = "sent";
  AnalyticsAction["OPENED"] = "opened";
  return AnalyticsAction;
}({});