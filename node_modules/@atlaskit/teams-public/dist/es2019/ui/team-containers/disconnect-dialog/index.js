import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import ModalDialog, { ModalBody, ModalFooter, ModalHeader, ModalTitle } from '@atlaskit/modal-dialog';
import { Box, Stack } from '@atlaskit/primitives/compiled';
import { getContainerProperties } from '../../../common/utils/get-container-properties';
export const messages = defineMessages({
  disconnectDialogTitle: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.title.non-final',
    defaultMessage: 'Disconnect place',
    description: 'Title of the disconnect dialog for team containers'
  },
  disconnectDialogDescription: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.description.non-final',
    defaultMessage: 'This team will no longer be connected to the {containerName} {containerType}.',
    description: 'Description of the disconnect dialog for team containers'
  },
  disconnectDialogDisclaimer: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.disclaimer.non-final',
    defaultMessage: 'Disconnecting the team from the {containerType} will not affect any work connected to the team within the {containerType}.',
    description: 'Disclaimer of the disconnect dialog for team containers'
  },
  disconnectDialogCancelButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.cancel-button.non-final',
    defaultMessage: 'Cancel',
    description: 'Button to cancel the dialog'
  },
  disconnectDialogRemoveButton: {
    id: 'ptc-directory.team-profile-page.team-containers.disconnect-dialog.remove-button.non-final',
    defaultMessage: 'Remove',
    description: 'Button to disconnect the team from the container'
  }
});
export const DisconnectDialog = ({
  containerName,
  containerType,
  onDisconnect,
  onClose
}) => {
  const [isDisconnecting, setIsDisconnecting] = React.useState(false);
  const handleDisconnect = async () => {
    setIsDisconnecting(true);
    await onDisconnect();
    setIsDisconnecting(false);
  };
  const {
    containerTypeText,
    description
  } = getContainerProperties(containerType);
  return /*#__PURE__*/React.createElement(ModalDialog, {
    onClose: onClose,
    width: "small",
    testId: "team-containers-disconnect-dialog",
    shouldScrollInViewport: true
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, {
    appearance: "warning"
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogTitle))), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(Stack, {
    space: "space.150"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.disconnectDialogDescription, {
    values: {
      containerName: /*#__PURE__*/React.createElement("b", null, containerName),
      containerType: description
    }
  }))), /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.disconnectDialogDisclaimer, {
    values: {
      containerType: containerTypeText
    }
  })))), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: onClose
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogCancelButton)), /*#__PURE__*/React.createElement(Button, {
    appearance: "warning",
    onClick: handleDisconnect,
    isLoading: isDisconnecting
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.disconnectDialogRemoveButton))));
};