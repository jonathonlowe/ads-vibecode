import React, { useCallback, useEffect, useState } from 'react';
import { defineMessages, FormattedMessage } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import Button from '@atlaskit/button/new';
import ModalTransition from '@atlaskit/modal-dialog/modal-transition';
import { Grid, Inline, Stack } from '@atlaskit/primitives';
import { N0, N90 } from '@atlaskit/theme/colors';
import { AnalyticsAction, usePeopleAndTeamAnalytics } from '../../common/utils/analytics';
import { hasProductPermission } from '../../controllers';
import { useProductPermissions } from '../../controllers/hooks/use-product-permission';
import { useTeamContainers, useTeamContainersHook } from '../../controllers/hooks/use-team-containers';
import { AddContainerCard } from './add-container-card';
import { DisconnectDialogLazy } from './disconnect-dialog/async';
import { LinkedContainerCard } from './linked-container-card';
import { NoProductAccessState } from './no-product-access-empty-state';
import { TeamContainersSkeleton } from './team-containers-skeleton';
export const ICON_BACKGROUND = `var(--ds-icon-inverse, ${N0})`;
export const ICON_COLOR = `var(--ds-icon-subtle, ${N90})`;
export const MAX_NUMBER_OF_CONTAINERS_TO_SHOW = 4;
export const TeamContainers = ({
  teamId,
  onAddAContainerClick,
  components,
  userId,
  cloudId,
  filterContainerId,
  isDisplayedOnProfileCard
}) => {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const {
    teamContainers,
    loading,
    unlinkError
  } = useTeamContainers(teamId);
  const [_, actions] = useTeamContainersHook();
  const [showAddJiraContainer, setShowAddJiraContainer] = useState(false);
  const [showAddConfluenceContainer, setShowAddConfluenceContainer] = useState(false);
  const [showMore, setShowMore] = useState(false);
  const [isDisconnectDialogOpen, setIsDisconnectDialogOpen] = useState(false);
  const [selectedContainerDetails, setSelectedContainerDetails] = useState();
  const [filteredTeamContainers, setFilteredTeamContainers] = useState(teamContainers);
  const {
    fireOperationalEvent,
    fireTrackEvent
  } = usePeopleAndTeamAnalytics();
  const {
    data: productPermissions,
    loading: productPermissionIsLoading
  } = useProductPermissions({
    userId,
    cloudId
  });
  useEffect(() => {
    if (isDisplayedOnProfileCard && filterContainerId) {
      setFilteredTeamContainers(teamContainers.filter(container => container.id !== filterContainerId));
    } else {
      setFilteredTeamContainers(teamContainers);
    }
  }, [isDisplayedOnProfileCard, filterContainerId, teamContainers]);
  useEffect(() => {
    if (filteredTeamContainers.length > MAX_NUMBER_OF_CONTAINERS_TO_SHOW || isDisplayedOnProfileCard) {
      setShowAddJiraContainer(false);
      setShowAddConfluenceContainer(false);
    } else {
      const hasJiraProject = filteredTeamContainers.some(container => container.type === 'JiraProject');
      const hasConfluenceSpace = filteredTeamContainers.some(container => container.type === 'ConfluenceSpace');
      setShowAddJiraContainer(!hasJiraProject && !!productPermissions && !!hasProductPermission(productPermissions, 'jira'));
      setShowAddConfluenceContainer(!hasConfluenceSpace && !!productPermissions && !!hasProductPermission(productPermissions, 'confluence'));
    }
  }, [isDisplayedOnProfileCard, productPermissions, filteredTeamContainers]);
  const handleShowMore = () => {
    setShowMore(!showMore);
  };
  const handleOpenDisconnectDialog = useCallback(containerDetails => {
    setSelectedContainerDetails(containerDetails);
    setIsDisconnectDialogOpen(true);
    fireTrackEvent(createAnalyticsEvent, {
      action: AnalyticsAction.OPENED,
      actionSubject: 'unlinkContainerDialog',
      attributes: {
        teamId
      }
    });
  }, [createAnalyticsEvent, fireTrackEvent, teamId]);
  const LinkedContainerCardComponent = (components === null || components === void 0 ? void 0 : components.ContainerCard) || LinkedContainerCard;
  const handleDisconnect = useCallback(async containerId => {
    const removedContainer = filteredTeamContainers.find(container => container.id === containerId);
    await actions.unlinkTeamContainers(teamId, containerId);
    setIsDisconnectDialogOpen(false);
    if (unlinkError) {
      fireOperationalEvent(createAnalyticsEvent, {
        action: AnalyticsAction.FAILED,
        actionSubject: 'teamContainerUnlinked'
      });
    } else {
      fireOperationalEvent(createAnalyticsEvent, {
        action: AnalyticsAction.SUCCEEDED,
        actionSubject: 'teamContainerUnlinked',
        attributes: {
          containerRemoved: {
            containerId: removedContainer === null || removedContainer === void 0 ? void 0 : removedContainer.id,
            container: removedContainer === null || removedContainer === void 0 ? void 0 : removedContainer.type
          },
          teamId
        }
      });
    }
  }, [actions, createAnalyticsEvent, fireOperationalEvent, filteredTeamContainers, teamId, unlinkError]);
  const TeamContainersSkeletonComponent = (components === null || components === void 0 ? void 0 : components.TeamContainersSkeleton) || TeamContainersSkeleton;
  if (loading || productPermissionIsLoading) {
    return /*#__PURE__*/React.createElement(TeamContainersSkeletonComponent, {
      numberOfContainers: MAX_NUMBER_OF_CONTAINERS_TO_SHOW
    });
  }
  if (filteredTeamContainers.length === 0 && !isDisplayedOnProfileCard && (!productPermissions || !(productPermissions && (hasProductPermission(productPermissions, 'jira') || hasProductPermission(productPermissions, 'confluence'))))) {
    return /*#__PURE__*/React.createElement(NoProductAccessState, null);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Stack, {
    space: "space.200"
  }, /*#__PURE__*/React.createElement(Grid, {
    templateColumns: "repeat(auto-fill, minmax(300px, 1fr))",
    gap: isDisplayedOnProfileCard ? 'space.0' : 'space.100'
  }, filteredTeamContainers.slice(0, MAX_NUMBER_OF_CONTAINERS_TO_SHOW).map(container => {
    return /*#__PURE__*/React.createElement(LinkedContainerCardComponent, {
      key: container.id,
      containerType: container.type,
      containerTypeProperties: container.containerTypeProperties,
      title: container.name,
      containerIcon: container.icon || undefined,
      link: container.link || undefined,
      containerId: container.id,
      onDisconnectButtonClick: () => handleOpenDisconnectDialog({
        containerId: container.id,
        containerType: container.type,
        containerName: container.name
      })
    });
  }), showAddJiraContainer && /*#__PURE__*/React.createElement(AddContainerCard, {
    onAddAContainerClick: e => onAddAContainerClick(e, 'Jira'),
    containerType: "JiraProject"
  }), showAddConfluenceContainer && /*#__PURE__*/React.createElement(AddContainerCard, {
    onAddAContainerClick: e => onAddAContainerClick(e, 'Confluence'),
    containerType: "ConfluenceSpace"
  }), showMore && filteredTeamContainers.slice(MAX_NUMBER_OF_CONTAINERS_TO_SHOW).map(container => {
    return /*#__PURE__*/React.createElement(LinkedContainerCardComponent, {
      key: container.id,
      containerType: container.type,
      containerTypeProperties: container.containerTypeProperties,
      title: container.name,
      containerId: container.id,
      containerIcon: container.icon || undefined,
      link: container.link || undefined,
      onDisconnectButtonClick: () => handleOpenDisconnectDialog({
        containerId: container.id,
        containerType: container.type,
        containerName: container.name
      })
    });
  })), filteredTeamContainers.length > MAX_NUMBER_OF_CONTAINERS_TO_SHOW && /*#__PURE__*/React.createElement(Inline, null, /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: handleShowMore
  }, showMore ? /*#__PURE__*/React.createElement(FormattedMessage, messages.showLess) : /*#__PURE__*/React.createElement(FormattedMessage, messages.showMore)))), /*#__PURE__*/React.createElement(ModalTransition, null, isDisconnectDialogOpen && selectedContainerDetails && /*#__PURE__*/React.createElement(DisconnectDialogLazy, {
    containerName: selectedContainerDetails.containerName,
    containerType: selectedContainerDetails.containerType,
    onClose: () => setIsDisconnectDialogOpen(false),
    onDisconnect: () => handleDisconnect(selectedContainerDetails.containerId)
  })));
};
const messages = defineMessages({
  showMore: {
    id: 'ptc-directory.team-profile-page.team-containers.show-more.non-final',
    defaultMessage: 'Show more',
    description: 'Button to show more containers'
  },
  showLess: {
    id: 'ptc-directory.team-profile-page.team-containers.show-less.non-final',
    defaultMessage: 'Show less',
    description: 'Button to show less containers'
  }
});