import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _GraphQLError;
export let StatusCode = /*#__PURE__*/function (StatusCode) {
  StatusCode[StatusCode["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
  StatusCode[StatusCode["FORBIDDEN"] = 403] = "FORBIDDEN";
  StatusCode[StatusCode["TIMEOUT"] = 408] = "TIMEOUT";
  StatusCode[StatusCode["GONE"] = 410] = "GONE";
  StatusCode[StatusCode["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
  return StatusCode;
}({});
class CommonError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
    this.message = message || 'UnknownError';
    this.stack = new Error(message).stack || '';
  }
}
export class DefaultError extends CommonError {
  constructor({
    message
  }) {
    super(message || 'UnknownError');
    Object.setPrototypeOf(this, DefaultError.prototype);
  }
}

/**
 * These errors will not fail UFO experiences
 */
export class SLOIgnoreError extends CommonError {
  constructor({
    message
  }) {
    super(`SentryIgnore: ${message || 'UnknownError'}`);
    Object.setPrototypeOf(this, SLOIgnoreError.prototype);
  }
}
// Http Errors
export class HttpError extends CommonError {
  constructor({
    message,
    status,
    traceId,
    path
  }) {
    super(message);
    Object.setPrototypeOf(this, HttpError.prototype);
    this.status = status;
    this.traceId = traceId;
    this.path = path;
  }
}

// Graphql Errors

export class GraphQLError extends CommonError {
  // tslint:disable-line no-any

  constructor({
    message,
    category = 'default',
    fields
  }) {
    super(message);
    Object.setPrototypeOf(this, GraphQLError.prototype);
    this.category = category;
    if (fields) {
      this.fields = fields;
    }
  }
}
_GraphQLError = GraphQLError;
_defineProperty(GraphQLError, "from", rawErrors => {
  const firstError = rawErrors[0];
  const errorData = {
    category: firstError.category,
    message: firstError.message
  };
  if (firstError.fields) {
    errorData.fields = firstError.fields.reduce((obj, item) => {
      obj[item.field] = item.message;
      return obj;
    }, {});
  }
  return new _GraphQLError(errorData);
});