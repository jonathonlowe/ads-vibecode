const PRODUCTS = ['confluence', 'jira', 'jira-core', 'jira-software', 'jira-servicedesk', 'jira-product-discovery'];
export const transformPermissions = permissions => {
  return permissions.reduce((acc, permission) => {
    if (permission.resourceId.includes('jira')) {
      var _acc$jira;
      acc['jira'] = {
        ...acc['jira'],
        [permission.permissionId]: ((_acc$jira = acc['jira']) === null || _acc$jira === void 0 ? void 0 : _acc$jira[permission.permissionId]) || permission.permitted
      };
    } else if (permission.resourceId.includes('confluence')) {
      var _acc$confluence;
      acc['confluence'] = {
        ...acc['confluence'],
        [permission.permissionId]: ((_acc$confluence = acc['confluence']) === null || _acc$confluence === void 0 ? void 0 : _acc$confluence[permission.permissionId]) || permission.permitted
      };
    }
    return acc;
  }, {});
};
export const getProductPermissionRequestBody = (cloudId, userId, permissionIds) => {
  const body = permissionIds.reduce((acc, permissionId) => {
    const permission = {
      permissionId,
      resourceId: '',
      principalId: `ari:cloud:identity::user/${userId}`,
      dontRequirePrincipalInSite: true
    };
    PRODUCTS.forEach(product => {
      acc.push({
        ...permission,
        resourceId: `ari:cloud:${product}::site/${cloudId}`
      });
    });
    return acc;
  }, []);
  return JSON.stringify(body);
};
export const hasProductPermission = (permissions, product, permissionIds) => {
  if (!permissions[product]) {
    return false;
  }
  if ((!permissionIds || permissionIds.length === 0) && permissions[product]) {
    return Object.values(permissions[product] || {}).some(value => value === true);
  }
  return permissionIds === null || permissionIds === void 0 ? void 0 : permissionIds.some(permissionId => {
    var _permissions$product;
    return (_permissions$product = permissions[product]) === null || _permissions$product === void 0 ? void 0 : _permissions$product[permissionId];
  });
};