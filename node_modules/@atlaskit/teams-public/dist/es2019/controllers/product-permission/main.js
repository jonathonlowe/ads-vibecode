import { createHook, createStore } from 'react-sweet-state';
import { getProductPermissionRequestBody, transformPermissions } from './utils';
const actions = {
  getPermissions: ({
    userId,
    cloudId,
    enabled,
    permissionIds = ['manage', 'write']
  }) => async ({
    setState,
    getState,
    dispatch
  }) => {
    const {
      hasLoaded,
      isLoading,
      permissions
    } = getState();
    if (isLoading || !userId || !cloudId || !enabled) {
      return;
    }
    const shouldFetch = !hasLoaded || permissionIds.some(permissionId => {
      var _permissions$confluen, _permissions$jira;
      return ((_permissions$confluen = permissions.confluence) === null || _permissions$confluen === void 0 ? void 0 : _permissions$confluen[permissionId]) === undefined || ((_permissions$jira = permissions.jira) === null || _permissions$jira === void 0 ? void 0 : _permissions$jira[permissionId]) === undefined;
    });
    if (!shouldFetch) {
      return;
    }
    try {
      setState({
        isLoading: true
      });
      const response = await fetch('/gateway/api/permissions/bulk/permitted', {
        headers: {
          'Content-Type': 'application/json'
        },
        method: 'POST',
        credentials: 'include',
        body: getProductPermissionRequestBody(cloudId, userId, permissionIds)
      });
      if (!response.ok) {
        throw new Error('Failed to fetch product permissions');
      }
      const permissions = await response.json();
      dispatch(actions.setPermissions(permissions));
    } catch (error) {
      dispatch(actions.setError(new Error('Failed to fetch product permissions')));
    }
  },
  setError: error => ({
    setState
  }) => {
    setState({
      hasLoaded: true,
      isLoading: false,
      error
    });
  },
  setLoading: isLoading => ({
    setState
  }) => {
    setState({
      isLoading
    });
  },
  setPermissions: permissions => ({
    setState
  }) => {
    setState({
      hasLoaded: true,
      isLoading: false,
      permissions: transformPermissions(permissions),
      permissionsResponse: permissions
    });
  }
};
const Store = createStore({
  initialState: {
    error: undefined,
    hasLoaded: false,
    isLoading: false,
    permissions: {}
  },
  actions,
  name: 'product-permissions'
});
export const useProductPermissionsStore = createHook(Store);