import { teamIdToAri } from '../../common/utils/team-id-to-ari';
import { toUserId } from '../../common/utils/user-ari';
import { DEFAULT_CONFIG } from '../constants';
import { BaseGraphQlClient } from '../graphql-client';
import { UnlinkContainerMutation } from './utils/mutations/unlink-container-mutation';
import { NumberOfTeamConnectedToContainerQuery } from './utils/queries/number-of-team-connected-to-container-query';
import { TeamConnectedToContainerQuery } from './utils/queries/team-connected-to-container-query';
import { TeamContainersQuery } from './utils/queries/team-containers-query';
export class AGGClient extends BaseGraphQlClient {
  constructor(baseUrl, config) {
    super(`${baseUrl}/graphql`, config);
  }
  setBaseUrl(baseUrl) {
    this.setServiceUrl(`${baseUrl}/graphql`);
  }
  async getTeamContainers(teamId) {
    const teamAri = teamIdToAri(teamId);
    const cypherQuery = `MATCH (team:IdentityTeam {ari: '${teamAri}'})-[:team_connected_to_container]->(container) RETURN container`;
    const response = await this.makeGraphQLRequest({
      query: TeamContainersQuery,
      variables: {
        cypherQuery
      }
    }, {
      operationName: 'TeamContainersQuery'
    });
    const containersResult = response.graphStore.cypherQuery.edges.map(edge => ({
      id: edge.node.to.id,
      type: edge.node.to.data.__typename,
      name: edge.node.to.data.__typename === 'ConfluenceSpace' ? edge.node.to.data.confluenceSpaceName || '' : edge.node.to.data.jiraProjectName,
      icon: edge.node.to.data.__typename === 'ConfluenceSpace' ? `${edge.node.to.data.links.base}${edge.node.to.data.icon.path}` : edge.node.to.data.avatar.medium,
      createdDate: edge.node.to.data.__typename === 'ConfluenceSpace' ? new Date(edge.node.to.data.createdDate) : new Date(edge.node.to.data.created),
      link: edge.node.to.data.__typename === 'ConfluenceSpace' ? `${edge.node.to.data.links.base}${edge.node.to.data.links.webUi}` : edge.node.to.data.webUrl,
      containerTypeProperties: {
        subType: edge.node.to.data.__typename === 'JiraProject' ? edge.node.to.data.projectType || '' : undefined,
        name: edge.node.to.data.__typename === 'JiraProject' ? edge.node.to.data.projectTypeName || '' : undefined
      }
    }));
    return containersResult;
  }
  async unlinkTeamContainer(teamId, containerId) {
    const teamAri = teamIdToAri(teamId);
    const response = await this.makeGraphQLRequest({
      query: UnlinkContainerMutation,
      variables: {
        containerId,
        teamId: teamAri
      }
    }, {
      operationName: 'UnlinkContainerMutation'
    });
    return response.graphStore;
  }
  async queryNumberOfTeamConnectedToContainer(containerId) {
    var _response$graphStore, _response$graphStore$, _response$graphStore$2;
    const response = await this.makeGraphQLRequest({
      query: NumberOfTeamConnectedToContainerQuery,
      variables: {
        containerId
      }
    }, {
      operationName: 'NumberOfTeamConnectedToContainerQuery'
    });
    return response === null || response === void 0 ? void 0 : (_response$graphStore = response.graphStore) === null || _response$graphStore === void 0 ? void 0 : (_response$graphStore$ = _response$graphStore.teamConnectedToContainerInverse) === null || _response$graphStore$ === void 0 ? void 0 : (_response$graphStore$2 = _response$graphStore$.edges) === null || _response$graphStore$2 === void 0 ? void 0 : _response$graphStore$2.length;
  }
  async queryTeamsConnectedToContainer(containerId) {
    var _response$graphStore2, _response$graphStore3, _response$graphStore4;
    const response = await this.makeGraphQLRequest({
      query: TeamConnectedToContainerQuery,
      variables: {
        containerId
      }
    }, {
      operationName: 'TeamConnectedToContainerQuery'
    });
    return response === null || response === void 0 ? void 0 : (_response$graphStore2 = response.graphStore) === null || _response$graphStore2 === void 0 ? void 0 : (_response$graphStore3 = _response$graphStore2.teamConnectedToContainerInverse) === null || _response$graphStore3 === void 0 ? void 0 : (_response$graphStore4 = _response$graphStore3.edges) === null || _response$graphStore4 === void 0 ? void 0 : _response$graphStore4.map(({
      node
    }) => {
      var _node$creator, _node$members$nodes$m, _node$members, _node$members$nodes$l, _node$members2;
      return {
        id: node.id,
        displayName: node.displayName,
        description: node.description,
        state: node.state,
        membershipSettings: node.membershipSettings,
        organizationId: node.organizationId,
        creatorId: (_node$creator = node.creator) === null || _node$creator === void 0 ? void 0 : _node$creator.id,
        isVerified: node.isVerified,
        members: (_node$members$nodes$m = (_node$members = node.members) === null || _node$members === void 0 ? void 0 : _node$members.nodes.map(({
          member
        }) => {
          var _member$name;
          return {
            id: member !== null && member !== void 0 && member.id ? toUserId(member === null || member === void 0 ? void 0 : member.id) : '',
            fullName: (_member$name = member === null || member === void 0 ? void 0 : member.name) !== null && _member$name !== void 0 ? _member$name : '',
            avatarUrl: member === null || member === void 0 ? void 0 : member.picture,
            status: member === null || member === void 0 ? void 0 : member.accountStatus
          };
        })) !== null && _node$members$nodes$m !== void 0 ? _node$members$nodes$m : [],
        includesYou: false,
        // to-do - this needs to be computed - https://product-fabric.atlassian.net/browse/CCECO-4368
        memberCount: (_node$members$nodes$l = (_node$members2 = node.members) === null || _node$members2 === void 0 ? void 0 : _node$members2.nodes.length) !== null && _node$members$nodes$l !== void 0 ? _node$members$nodes$l : 0,
        largeAvatarImageUrl: node.largeAvatarImageUrl,
        smallAvatarImageUrl: node.smallAvatarImageUrl,
        largeHeaderImageUrl: node.largeHeaderImageUrl,
        smallHeaderImageUrl: node.smallHeaderImageUrl,
        restriction: 'ORG_MEMBERS' // to-do - figure out if this should be optional (it's deprecated) - https://product-fabric.atlassian.net/browse/CCECO-4368
      };
    });
  }
}
export const aggClient = new AGGClient(DEFAULT_CONFIG.stargateRoot, {
  logException: () => {}
});