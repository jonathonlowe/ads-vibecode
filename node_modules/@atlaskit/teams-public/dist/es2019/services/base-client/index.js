import _defineProperty from "@babel/runtime/helpers/defineProperty";
export class BaseClient {
  constructor(config) {
    _defineProperty(this, "cache", {});
    _defineProperty(this, "logException", (ex, name, context) => {
      this.config.logException(ex, name, context);
    });
    this.config = config;
    this.context = {
      cloudId: null
    };
  }
  setContext(context) {
    this.context = {
      ...context,
      cloudId: context.cloudId || null
    };
  }
  getContext() {
    return this.context;
  }

  /**
   *
   * @param localValue is used for backwards compatibility
   * @returns
   */
  getOrgId(localValue) {
    const orgId = localValue || this.getContext().orgId;
    if (!orgId) {
      const err = new Error('No orgId set');
      this.logException(err, 'No orgId set');
      throw err;
    }
    return orgId;
  }
  /**
   *
   * @param localValue is used for backwards compatibility
   * @returns
   */
  getCloudId(localValue) {
    return localValue || this.getContext().cloudId;
  }
  keyWithContext(key) {
    var _this$getContext$orgI, _this$getContext$user;
    return `${this.getContext().cloudId}-${(_this$getContext$orgI = this.getContext().orgId) !== null && _this$getContext$orgI !== void 0 ? _this$getContext$orgI : 'no-org-id'}-${(_this$getContext$user = this.getContext().userId) !== null && _this$getContext$user !== void 0 ? _this$getContext$user : 'no-user-id'}-${key}`;
  }

  // Default expiration is 5 minutes
  cacheValue(key, value, expiryMs = 1000 * 60 * 5) {
    this.cache[this.keyWithContext(key)] = {
      data: value,
      expiration: Date.now() + expiryMs
    };
  }
  getCachedValue(key) {
    const record = this.cache[this.keyWithContext(key)];
    if (record && record.expiration > Date.now()) {
      return record.data;
    }
    return undefined;
  }
}