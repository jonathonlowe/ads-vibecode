import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { aggClient } from './agg-client';
export class TeamsClient {
  constructor(
  /**
   * @param {ClientContextProps} context - Context including CloudId & OrgId to be used for all requests
   */
  context) {
    _defineProperty(this, "_aggClient", aggClient);
    if (context) {
      this.setContext(context);
    }
  }

  /**
   * Sets the base URL to be used in the client requests
   * @param {string} baseUrl - The new base URL
   */
  setBaseUrl(baseUrl) {
    this._aggClient.setBaseUrl(baseUrl);
  }

  /**
   * Sets context including CloudId & OrgId to be used for all requests
   */
  setContext(context) {
    this._aggClient.setContext(context);
  }

  /**
   * Get the containers for a given team
   * @param {string} teamId
   * @returns {Promise<TeamContainers>}
   */
  async getTeamContainers(teamId) {
    return this._aggClient.getTeamContainers(teamId);
  }

  /**
   * Get the number of teams connected to a container (Confluence space or Jira project)
   * @param {string} containerId
   * @returns {Promise}
   */
  async getNumberOfConnectedTeams(containerId) {
    return this._aggClient.queryNumberOfTeamConnectedToContainer(containerId);
  }

  /**
   * Get teams connected to a container (Confluence space or Jira project)
   * @param {string} containerId
   * @returns {Promise}
   */
  async getConnectedTeams(containerId) {
    return this._aggClient.queryTeamsConnectedToContainer(containerId);
  }

  /**
   * Unlink a container from a team
   * @param {string} teamId
   * @param {string} containerId
   * @returns {Promise<void>}
   */
  async unlinkTeamContainer(teamId, containerId) {
    return this._aggClient.unlinkTeamContainer(teamId, containerId);
  }
}
export const teamsClient = new TeamsClient();