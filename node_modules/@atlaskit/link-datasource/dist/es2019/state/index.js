import React from 'react';
import { createActionsHook, createContainer, createStateHook, createStore } from 'react-sweet-state';
import { v4 as uuidv4 } from 'uuid';
const getInitialState = () => ({
  items: {}
});
export const actions = {
  onUpdateItem: (id, data) => ({
    setState,
    getState
  }) => {
    const oldItems = {
      ...getState().items
    };
    const oldItem = oldItems[id];
    if (!oldItem) {
      return;
    }
    setState({
      items: {
        ...oldItems,
        [id]: {
          ...oldItem,
          data: {
            ...data,
            ari: oldItem.data.ari
          }
        }
      }
    });
  },
  onAddItems: (items, integrationKey, entityType) => ({
    setState,
    getState
  }) => {
    const oldItems = {
      ...getState().items
    };
    const [newItemIds, newItems] = items.reduce(([ids, itemMap], item) => {
      var _item$ari, _oldItems$id;
      const ari = typeof ((_item$ari = item['ari']) === null || _item$ari === void 0 ? void 0 : _item$ari.data) === 'string' ? item['ari'].data : undefined;
      const id = ari !== null && ari !== void 0 ? ari : uuidv4();
      return [[...ids, id], {
        ...itemMap,
        [id]: {
          ari,
          entityType,
          integrationKey,
          data: {
            ...((_oldItems$id = oldItems[id]) === null || _oldItems$id === void 0 ? void 0 : _oldItems$id.data),
            ...item
          }
        }
      }];
    }, [[], oldItems]);
    setState({
      items: newItems
    });
    return newItemIds;
  }
};
export const Store = createStore({
  name: 'datasource-store',
  initialState: getInitialState(),
  actions
});
export const useDatasourceItem = createStateHook(Store, {
  selector: (state, {
    id
  }) => state.items[id]
});
export const useDatasourceActions = createActionsHook(Store);
const Container = createContainer(Store);
export const StoreContainer = ({
  children
}) => {
  return /*#__PURE__*/React.createElement(Container, {
    scope: "datasource"
  }, children);
};