/* inline-edit.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./inline-edit.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useMemo, useState } from 'react';
import { useIntl } from 'react-intl-next';
import AKInlineEdit from '@atlaskit/inline-edit';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { useSmartLinkReload } from '@atlaskit/smart-card/hooks';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { startUfoExperience } from '../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { useDatasourceTableFlag } from '../../../hooks/useDatasourceTableFlag';
import { useDatasourceActions, useDatasourceItem } from '../../../state';
import { editType } from '../edit-type';
import { EmptyAvatar } from '../shared-components/avatar';
import { getFieldLabelById } from '../utils';
import { tableCellMessages } from './messages';
export const InlineEditUFOExperience = 'inline-edit-rendered';
const styles = {
  editContainerStyles: "_1pfhx0bf"
};
/**
 * @returns String of the new field value, or ID of status transition / atlassian user ID / priority ID.
 * @throws Error if the value is not supplied.
 */
export const newGetBackendUpdateValue = typedNewValue => {
  if (typedNewValue.values.length === 0) {
    throw new Error(`Datasource 2 way sync: Backend update value or value ID not supplied for type ${typedNewValue.type}`);
  }
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0];
    case 'status':
      const {
        transitionId
      } = typedNewValue.values[0];
      if (transitionId === undefined || transitionId === '') {
        throw new Error(`Datasource 2 way sync: Backend status transition ID not supplied for type transition`);
      }
      return transitionId;
    case 'user':
      const {
        atlassianUserId
      } = typedNewValue.values[0];
      if (atlassianUserId === undefined || atlassianUserId === '') {
        throw new Error(`Datasource 2 way sync: Backend atlasian user ID not supplied for type user`);
      }
      return atlassianUserId;
    case 'icon':
      const {
        id
      } = typedNewValue.values[0];
      if (id === undefined || id === '') {
        throw new Error(`Datasource 2 way sync: Backend update ID not supplied for type icon`);
      }
      return id;
  }
  throw new Error(`Datasource 2 way sync Backend update value not implemented for type ${typedNewValue.type}`);
};
const getBackendUpdateValue = typedNewValue => {
  var _typedNewValue$values, _typedNewValue$values2, _typedNewValue$values3;
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0] || '';
    case 'status':
      return ((_typedNewValue$values = typedNewValue.values[0]) === null || _typedNewValue$values === void 0 ? void 0 : _typedNewValue$values.transitionId) || '';
    case 'user':
      return ((_typedNewValue$values2 = typedNewValue.values[0]) === null || _typedNewValue$values2 === void 0 ? void 0 : _typedNewValue$values2.atlassianUserId) || '';
    case 'icon':
      return ((_typedNewValue$values3 = typedNewValue.values[0]) === null || _typedNewValue$values3 === void 0 ? void 0 : _typedNewValue$values3.id) || '';
  }
  throw new Error(`Datasource 2 way sync Backend update value not implemented for type ${typedNewValue.type}`);
};
const getCurrentFieldLabel = typedNewValue => {
  var _typedNewValue$values4, _typedNewValue$values5, _typedNewValue$values6;
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0] || '';
    case 'status':
      return ((_typedNewValue$values4 = typedNewValue.values[0]) === null || _typedNewValue$values4 === void 0 ? void 0 : _typedNewValue$values4.text) || '';
    case 'user':
      return ((_typedNewValue$values5 = typedNewValue.values[0]) === null || _typedNewValue$values5 === void 0 ? void 0 : _typedNewValue$values5.displayName) || '';
    case 'icon':
      return ((_typedNewValue$values6 = typedNewValue.values[0]) === null || _typedNewValue$values6 === void 0 ? void 0 : _typedNewValue$values6.text) || '';
    default:
      return '';
  }
};
const mapUpdatedItem = (existingItem, columnKey, newValue) => {
  switch (newValue.type) {
    case 'string':
      return {
        ...existingItem,
        [columnKey]: {
          data: newValue.values[0] || ''
        }
      };
    case 'status':
    case 'user':
    case 'icon':
      return newValue.values[0] ? {
        ...existingItem,
        [columnKey]: {
          data: newValue.values[0]
        }
      } : existingItem;
    default:
  }
  return null;
};
const isNewValue = (columnKey, newItem, existingData) => {
  var _newItem$columnKey, _existingData$columnK;
  return ((_newItem$columnKey = newItem[columnKey]) === null || _newItem$columnKey === void 0 ? void 0 : _newItem$columnKey.data) && (!((_existingData$columnK = existingData[columnKey]) !== null && _existingData$columnK !== void 0 && _existingData$columnK.data) || newItem[columnKey].data !== existingData[columnKey].data);
};
const useRefreshDatasourceItem = item => {
  var _item$data, _item$data$key, _item$data$key$data;
  const url = item === null || item === void 0 ? void 0 : (_item$data = item.data) === null || _item$data === void 0 ? void 0 : (_item$data$key = _item$data.key) === null || _item$data$key === void 0 ? void 0 : (_item$data$key$data = _item$data$key.data) === null || _item$data$key$data === void 0 ? void 0 : _item$data$key$data.url;

  // passing empty string to the hook isn't ideal, but the alternatives are too much effort for this small fix.
  const reloadSmartLinkAction = useSmartLinkReload({
    url: url || ''
  });
  return useCallback(() => {
    if (url) {
      reloadSmartLinkAction();
    }
  }, [reloadSmartLinkAction, url]);
};
export const InlineEdit = ({
  ari,
  execute,
  executeFetch,
  readView,
  columnKey,
  columnTitle,
  datasourceTypeWithValues
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editValues, setEditValues] = useState(datasourceTypeWithValues);
  const item = useDatasourceItem({
    id: ari
  });
  const {
    entityType,
    integrationKey
  } = item || {};
  const {
    showErrorFlag
  } = useDatasourceTableFlag();
  const {
    onUpdateItem
  } = useDatasourceActions();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const refreshDatasourceItem = useRefreshDatasourceItem(item);
  const experienceId = useDatasourceExperienceId();
  const onCommitUpdate = useCallback(newValue => {
    if (!item) {
      setIsEditing(false);
      return;
    }
    const existingData = item.data;
    const newItem = mapUpdatedItem(item.data, columnKey, newValue);
    if (!newItem || !isNewValue(columnKey, newItem, existingData)) {
      setIsEditing(false);
      return;
    }
    onUpdateItem(ari, newItem);
    fireEvent('ui.form.submitted.inlineEdit', {});
    let updateValue;
    if (fg('platform-datasources-inline-edit-id-checks')) {
      try {
        // TODO: Refactor types so that valid update values are guaranteed for
        // all object types. Invalid options should be filtered out of options -
        // this frontend error flag is a last resort.
        updateValue = newGetBackendUpdateValue(newValue);
      } catch {
        // Show an error as the new value that was going to be sent to the
        // backend is invalid (and would have failed anyway, silently to the user)
        showErrorFlag({});
        onUpdateItem(ari, existingData);
        setIsEditing(false);
        return;
      }
    }
    execute(updateValue !== undefined && fg('platform-datasources-inline-edit-id-checks') ? updateValue :
    // Old behaviour is preserved in non-FFed path: errors thrown by getBackendUpdateValue are caught by
    // the error boundary, _not_ by the catch block & frontend flag here.
    getBackendUpdateValue(newValue)).then(refreshDatasourceItem).catch(error => {
      const status = error && typeof error === 'object' ? error.status : undefined;
      showErrorFlag({
        status
      });
      onUpdateItem(ari, existingData);
    });
    setIsEditing(false);
  }, [item, columnKey, onUpdateItem, ari, refreshDatasourceItem, fireEvent, execute, showErrorFlag]);
  const onEdit = useCallback(() => {
    setIsEditing(true);
    if (experienceId) {
      startUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    }
    if (integrationKey && entityType) {
      fireEvent('ui.inlineEdit.clicked.datasource', {
        integrationKey,
        entityType,
        fieldKey: columnKey
      });
    }
  }, [columnKey, entityType, experienceId, fireEvent, integrationKey]);
  const onCancelEdit = useCallback(() => {
    setIsEditing(false);
    if (integrationKey && entityType) {
      fireEvent('ui.inlineEdit.cancelled.datasource', {
        integrationKey,
        entityType,
        fieldKey: columnKey
      });
    }
  }, [columnKey, entityType, fireEvent, integrationKey]);
  const {
    formatMessage
  } = useIntl();
  const editButtonLabel = useMemo(() => {
    return formatMessage(tableCellMessages.editButtonLabel, {
      fieldName: columnTitle,
      fieldValue: getCurrentFieldLabel(editValues)
    });
  }, [columnTitle, formatMessage, editValues]);
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.editContainerStyles
  }, /*#__PURE__*/React.createElement(AKInlineEdit, _extends({}, editType({
    defaultValue: datasourceTypeWithValues,
    currentValue: editValues,
    setEditValues,
    executeFetch,
    labelId: getFieldLabelById(columnKey)
  }), {
    hideActionButtons: true,
    readView: editableRenderType({
      defaultValue: datasourceTypeWithValues,
      readView
    }),
    readViewFitContainerWidth: true,
    isEditing: isEditing,
    onEdit: onEdit,
    onCancel: onCancelEdit,
    onConfirm: () => onCommitUpdate(editValues),
    editButtonLabel: editButtonLabel
  })));
};

/**
 *
 * This function allows us to manipulate the readView on editable cells.
 * This way, for example, we can show a fallback Avatar on empty user cells.
 *
 */
const editableRenderType = ({
  defaultValue,
  readView
}) => {
  return () => {
    var _defaultValue$values;
    switch (defaultValue.type) {
      case 'user':
        if (!((_defaultValue$values = defaultValue.values) !== null && _defaultValue$values !== void 0 && _defaultValue$values[0])) {
          return /*#__PURE__*/React.createElement(EmptyAvatar, null);
        }
    }
    return readView;
  };
};