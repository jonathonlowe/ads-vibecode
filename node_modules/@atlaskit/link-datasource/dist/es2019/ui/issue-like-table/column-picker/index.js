/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import CustomizeIcon from '@atlaskit/icon/core/customize';
import BoardIcon from '@atlaskit/icon/core/migration/board';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import ChevronDownIconOld from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { CheckboxOption, createFilter, PopupSelect } from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import { succeedUfoExperience } from '../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { ConcatenatedMenuList, MenuItem } from './concatenated-menu-list';
import { columnPickerMessages } from './messages';
const styles = {
  chevronIconStyles: "_1e0c1txw _4cvr1h6o"
};
export const ColumnPicker = ({
  columns,
  selectedColumnKeys,
  onSelectedColumnKeysChange,
  onOpen
}) => {
  const intl = useIntl();
  const experienceId = useDatasourceExperienceId();
  const [allOptions, setAllOptions] = useState([]);
  const pickerRef = useRef(null);
  const mapColumnToOption = useCallback(({
    key,
    title
  }) => ({
    label: title,
    value: key
  }), []);
  const selectedOptions = columns.filter(({
    key
  }) => selectedColumnKeys.includes(key)).map(mapColumnToOption);
  useEffect(() => {
    setAllOptions(columns.filter(({
      title
    }) => title).map(mapColumnToOption));
  }, [columns, mapColumnToOption]);
  const handleChange = useCallback(selectedOptions => {
    const selectedValues = selectedOptions.map(({
      value
    }) => value);
    selectedValues.sort((a, b) => {
      const indexB = columns.findIndex(({
        key
      }) => key === b);
      const indexA = columns.findIndex(({
        key
      }) => key === a);
      return indexA - indexB;
    });
    onSelectedColumnKeysChange(selectedValues);
  }, [columns, onSelectedColumnKeysChange]);
  const sortSelectedColumnsTop = useCallback(() => {
    if (!allOptions.length) {
      return;
    }
    const nonSelectedOptions = allOptions.filter(option => !selectedOptions.find(selectedOption => selectedOption.value === option.value));
    const sortedOptions = [...selectedOptions, ...nonSelectedOptions];
    sortedOptions.length > 0 && setAllOptions(sortedOptions);
  }, [allOptions, selectedOptions]);
  const stopEscapePropagationWhenOpen = e => {
    if (e.key === 'Escape') {
      e.stopPropagation();
    }
  };
  const handleOpen = useCallback(() => {
    onOpen && onOpen();
    void sortSelectedColumnsTop();
  }, [onOpen, sortSelectedColumnsTop]);

  // If only 1 option is selected, disable it since we don't want user to uncheck everything
  const handleIsOptionDisabled = (option, selectValue) => {
    return selectValue.length === 1 && selectValue.some(selectedValue => selectedValue.value === option.value);
  };
  useEffect(() => {
    if (allOptions.length) {
      var _pickerRef$current, _pickerRef$current$se, _pickerRef$current$se2, _pickerRef$current$se3;
      // necessary to refocus the search input after the loading state
      pickerRef === null || pickerRef === void 0 ? void 0 : (_pickerRef$current = pickerRef.current) === null || _pickerRef$current === void 0 ? void 0 : (_pickerRef$current$se = _pickerRef$current.selectRef) === null || _pickerRef$current$se === void 0 ? void 0 : (_pickerRef$current$se2 = _pickerRef$current$se.select) === null || _pickerRef$current$se2 === void 0 ? void 0 : (_pickerRef$current$se3 = _pickerRef$current$se2.inputRef) === null || _pickerRef$current$se3 === void 0 ? void 0 : _pickerRef$current$se3.focus();
    }
  }, [allOptions]);
  useEffect(() => {
    if (allOptions.length) {
      if (experienceId) {
        succeedUfoExperience({
          name: 'column-picker-rendered'
        }, experienceId);
      }
    }
  }, [allOptions, experienceId]);
  const MenuOption = fg('platform-linking-visual-refresh-sllv') ? MenuItem : CheckboxOption;
  return /*#__PURE__*/React.createElement(PopupSelect, {
    classNamePrefix: 'column-picker-popup',
    testId: 'column-picker-popup',
    components: {
      Option: MenuOption,
      MenuList: ConcatenatedMenuList
    },
    filterOption: createFilter({
      ignoreAccents: false
    }),
    options: allOptions,
    value: selectedOptions
    // @ts-ignore - https://product-fabric.atlassian.net/browse/DSP-21000
    ,
    onOpen: handleOpen,
    closeMenuOnSelect: false,
    hideSelectedOptions: false,
    id: 'column-picker-popup',
    isMulti: true,
    ref: pickerRef,
    isOptionDisabled: handleIsOptionDisabled,
    placeholder: intl.formatMessage(columnPickerMessages.search),
    onKeyDown: stopEscapePropagationWhenOpen,
    label: "Search for fields",
    onChange: handleChange,
    isLoading: allOptions.length === 0,
    target: ({
      isOpen,
      ...triggerProps
    }) => /*#__PURE__*/React.createElement(Tooltip, {
      content: intl.formatMessage(columnPickerMessages.tooltip)
    }, tooltipProps => /*#__PURE__*/React.createElement(Button, _extends({}, tooltipProps, triggerProps, {
      isSelected: isOpen,
      spacing: "compact",
      appearance: fg('platform-linking-visual-refresh-sllv') ? 'default' : 'subtle',
      testId: "column-picker-trigger-button",
      iconBefore: () => /*#__PURE__*/React.createElement(Box, {
        as: "span",
        xcss: styles.chevronIconStyles
      }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(CustomizeIcon, {
        label: "customize"
      }) : /*#__PURE__*/React.createElement(BoardIcon, {
        color: "currentColor",
        label: "board",
        LEGACY_size: "medium",
        spacing: "spacious",
        LEGACY_margin: "0 0 0 4px"
      }), fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(ChevronDownIcon, {
        label: "down"
      }) : /*#__PURE__*/React.createElement(ChevronDownIconOld, {
        color: "currentColor",
        label: "down",
        LEGACY_size: "medium"
      }))
    }), ''))
  });
};