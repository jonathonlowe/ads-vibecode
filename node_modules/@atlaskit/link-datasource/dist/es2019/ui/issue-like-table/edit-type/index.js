import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import IconEditType from './icon';
import StatusEditType from './status';
import TextEditType from './text';
import UserEditType from './user';

// This is used in editor-card-plugin to identify if any type of inline edit is active.
const ACTIVE_INLINE_EDIT_ID = 'sllv-active-inline-edit';
export const editType = ({
  defaultValue,
  currentValue,
  labelId,
  setEditValues,
  executeFetch
}) => {
  var _toValueType, _value$atlassianUserI;
  switch (defaultValue.type) {
    case 'string':
      return {
        defaultValue: (_toValueType = toValueType(defaultValue)) !== null && _toValueType !== void 0 ? _toValueType : '',
        editView: ({
          ...fieldProps
        }) => /*#__PURE__*/React.createElement(TextEditType, _extends({}, fieldProps, {
          currentValue: currentValue,
          setEditValues: setEditValues,
          id: ACTIVE_INLINE_EDIT_ID,
          labelId: labelId
        }))
      };
    case 'icon':
      return {
        defaultValue: toValueType(defaultValue),
        editView: ({
          value,
          ...fieldProps
        }) => /*#__PURE__*/React.createElement(IconEditType, _extends({}, fieldProps, {
          currentValue: currentValue,
          setEditValues: setEditValues,
          id: ACTIVE_INLINE_EDIT_ID,
          executeFetch: executeFetch,
          labelId: labelId
        }))
      };
    case 'status':
      return {
        defaultValue: toValueType(defaultValue),
        editView: ({
          ...fieldProps
        }) => /*#__PURE__*/React.createElement(StatusEditType, _extends({}, fieldProps, {
          currentValue: currentValue,
          setEditValues: setEditValues,
          id: ACTIVE_INLINE_EDIT_ID,
          executeFetch: executeFetch,
          labelId: labelId
        }))
      };
    case 'user':
      const value = toValueType(defaultValue);
      return {
        defaultValue: (_value$atlassianUserI = value === null || value === void 0 ? void 0 : value.atlassianUserId) !== null && _value$atlassianUserI !== void 0 ? _value$atlassianUserI : '',
        editView: ({
          ...fieldProps
        }) => /*#__PURE__*/React.createElement(UserEditType, _extends({}, fieldProps, {
          currentValue: currentValue,
          setEditValues: setEditValues,
          id: ACTIVE_INLINE_EDIT_ID,
          executeFetch: executeFetch,
          labelId: labelId
        }))
      };
  }
  return {
    defaultValue: '',
    editView: () => /*#__PURE__*/React.createElement(React.Fragment, null)
  };
};
export const isEditTypeSupported = type => {
  const supportedEditType = ['string', ...(fg('platform-datasources-enable-two-way-sync-statuses') ? ['status'] : []), ...(fg('platform-datasources-enable-two-way-sync-priority') ? ['icon'] : []), ...(fg('platform-datasources-enable-two-way-sync-assignee') ? ['user'] : [])];
  return supportedEditType.includes(type);
};
export const isEditTypeSelectable = type => {
  const selectEditTypes = ['status', 'icon', 'user'];
  return selectEditTypes.includes(type);
};
export const toValueType = typeWithValues => {
  var _typeWithValues$value;
  return (_typeWithValues$value = typeWithValues.values) === null || _typeWithValues$value === void 0 ? void 0 : _typeWithValues$value[0];
};