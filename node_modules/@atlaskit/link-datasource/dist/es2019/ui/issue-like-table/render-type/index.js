import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import BooleanRenderType from './boolean';
import DateTimeRenderType, { getFormattedDate } from './date-time';
import IconRenderType from './icon';
import LinkRenderType from './link';
import NewIconRenderType from './new-icon';
import NumberRenderType from './number';
import RichTextRenderType, { parseRichText } from './richtext';
import StatusRenderType from './status';
import TagRenderType from './tag';
import StringRenderType from './text';
import UserRenderType from './user';
import { userTypeMessages } from './user/messages';
export const stringifyType = ({
  type,
  value
}, formatMessage, formatDate) => {
  switch (type) {
    case 'boolean':
    case 'number':
      return (value === null || value === void 0 ? void 0 : value.toString()) || '';
    case 'date':
      return getFormattedDate(value, 'date', formatDate);
    case 'datetime':
      return getFormattedDate(value, 'datetime', formatDate);
    case 'time':
      return getFormattedDate(value, 'time', formatDate);
    case 'icon':
      return (value === null || value === void 0 ? void 0 : value.label) || '';
    case 'status':
      return (value === null || value === void 0 ? void 0 : value.text.toString()) || '';
    case 'string':
      return value;
    case 'tag':
      return (value === null || value === void 0 ? void 0 : value.text) || '';
    case 'user':
      return (value === null || value === void 0 ? void 0 : value.displayName) || formatMessage(userTypeMessages.userDefaultdisplayNameValue);
    case 'richtext':
      const adfPlainText = parseRichText(value);
      return adfPlainText || '';
    case 'link':
    default:
      return '';
  }
};
export const renderType = item => {
  switch (item.type) {
    case 'boolean':
      return item.values.map(booleanValue => /*#__PURE__*/React.createElement(BooleanRenderType, {
        value: booleanValue
      }));
    case 'date':
      return item.values.map(dateValue => /*#__PURE__*/React.createElement(DateTimeRenderType, {
        value: dateValue,
        display: "date"
      }));
    case 'datetime':
      return item.values.map(datTimeValue => /*#__PURE__*/React.createElement(DateTimeRenderType, {
        value: datTimeValue,
        display: "datetime"
      }));
    case 'icon':
      return fg('platform-datasources-enable-two-way-sync-priority') ? item.values.map(iconValue => /*#__PURE__*/React.createElement(NewIconRenderType, iconValue)) : item.values.map(iconValue => /*#__PURE__*/React.createElement(IconRenderType, iconValue));
    case 'link':
      return item.values.map(linkValue => /*#__PURE__*/React.createElement(LinkRenderType, _extends({
        key: linkValue === null || linkValue === void 0 ? void 0 : linkValue.url
      }, linkValue)));
    case 'number':
      return item.values.map(numberValue => /*#__PURE__*/React.createElement(NumberRenderType, {
        number: numberValue
      }));
    case 'status':
      return item.values.map(statusValue => /*#__PURE__*/React.createElement(StatusRenderType, statusValue));
    case 'string':
      return item.values.map(stringValue => /*#__PURE__*/React.createElement(StringRenderType, {
        key: stringValue,
        text: stringValue
      }));
    case 'tag':
      return item.values.map(tagValue => /*#__PURE__*/React.createElement(TagRenderType, {
        key: (tagValue === null || tagValue === void 0 ? void 0 : tagValue.id) || (tagValue === null || tagValue === void 0 ? void 0 : tagValue.text),
        tag: tagValue
      }));
    case 'time':
      return item.values.map(timeValue => /*#__PURE__*/React.createElement(DateTimeRenderType, {
        value: timeValue,
        display: "time"
      }));
    case 'user':
      return /*#__PURE__*/React.createElement(UserRenderType, {
        users: item.values
      });
    case 'richtext':
      return item.values.map(richValue => /*#__PURE__*/React.createElement(RichTextRenderType, {
        value: richValue
      }));
    default:
      return /*#__PURE__*/React.createElement(React.Fragment, null);
  }
};