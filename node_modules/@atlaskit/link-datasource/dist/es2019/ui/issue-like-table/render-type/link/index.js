import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Card } from '@atlaskit/smart-card';
import { HoverCard } from '@atlaskit/smart-card/hover-card';
import LinkUrl from '@atlaskit/smart-card/link-url';
import { N300 } from '@atlaskit/theme/colors';
const linkStyles = {
  key: {
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    color: `var(--ds-text-subtlest, ${N300})`,
    marginTop: "var(--ds-space-250, 20px)"
  },
  default: {}
};
export const LINK_TYPE_TEST_ID = 'link-datasource-render-type--link';
const LinkRenderType = ({
  style,
  url,
  text,
  testId = LINK_TYPE_TEST_ID
}) => {
  const linkStyle = useMemo(() => {
    return (style === null || style === void 0 ? void 0 : style.appearance) && linkStyles[style.appearance] || {};
  }, [style]);
  const anchor = useMemo(() => /*#__PURE__*/React.createElement(HoverCard, {
    url: url
  }, /*#__PURE__*/React.createElement(LinkUrl, _extends({
    href: url
    // NOTE: This will no longer apply styles to `@atlaskit/link` when platform_editor_hyperlink_underline is enabled.
    // Wrap `@atlaskit/link` in a Text component to provide font styles to Link
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  }, fg('platform-linking-visual-refresh-sllv') ? {} : {
    style: {
      ...linkStyle
    }
  }, {
    "data-testid": testId,
    target: "_blank"
  }), text || url)), [linkStyle, url, text, testId]);
  const SmartCard = () => {
    const handleClick = e => {
      e.preventDefault();
      window.open(url, '_blank', 'noopener, noreferrer');
    };
    return /*#__PURE__*/React.createElement(Card, {
      appearance: "inline",
      onClick: handleClick,
      url: url,
      testId: testId,
      fallbackComponent: () => anchor
    });
  };

  // url can be undefined before data is fetched whilst adding new link column to display
  if (!url) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, text ? anchor : /*#__PURE__*/React.createElement(SmartCard, null), /*#__PURE__*/React.createElement("br", null));
};
export default /*#__PURE__*/React.memo(LinkRenderType);