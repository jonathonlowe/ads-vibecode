/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
import React, { useState } from 'react';
import { FormattedMessage } from 'react-intl-next';
import Avatar from '@atlaskit/avatar';
import AvatarGroup from '@atlaskit/avatar-group';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { WidthObserver } from '@atlaskit/width-detector';
import { userTypeMessages } from './messages';
const styles = {
  userWrapperStyles: "_11c82smr _1e0c1txw _4cvr1h6o",
  avatarWrapperStyles: "_2hwxu2gc",
  widthObserverWrapperStyles: "_kqswh2mm"
};
const labelWrapperStyles = null;

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
const AvatarGroupWrapperStyles = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_k7zygrf3", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  AvatarGroupWrapperStyles.displayName = 'AvatarGroupWrapperStyles';
}
const getMaxUserCount = (userCount, availableWidth) => {
  if (availableWidth <= 28) {
    // If width is less than or equal to 28px, we should only display the user count
    return 1;
  }
  const defaultMaxCount = 5;
  const usersNumFitToAvailableWidth = Math.ceil((availableWidth - 28) / 20);
  return usersNumFitToAvailableWidth > defaultMaxCount ? defaultMaxCount : usersNumFitToAvailableWidth;
};
export const USER_TYPE_TEST_ID = 'link-datasource-render-type--user';
const UserType = ({
  users
}) => {
  const [width, setWidth] = useState(null);
  let multipleUsers = false;
  if (fg('platform-datasources-enable-two-way-sync-assignee')) {
    multipleUsers = users.length === 1;
  } else {
    multipleUsers = users.length <= 1;
  }
  if (multipleUsers) {
    const {
      avatarSource,
      avatarSize = 'small',
      displayName,
      testId = USER_TYPE_TEST_ID,
      children
    } = users[0] || {};
    return /*#__PURE__*/React.createElement(Box, {
      xcss: styles.userWrapperStyles,
      testId: testId
    }, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.avatarWrapperStyles
    }, /*#__PURE__*/React.createElement(Avatar, {
      appearance: "circle",
      size: avatarSize || 'small',
      src: avatarSource,
      testId: `${testId}--avatar`
    })), /*#__PURE__*/React.createElement("span", {
      className: ax(["_1reo15vq _18m915vq _1bto1l2s _o5721q9c"])
    }, children || displayName || /*#__PURE__*/React.createElement(FormattedMessage, userTypeMessages.userDefaultdisplayNameValue)));
  } else {
    const maxCount = width !== null ? getMaxUserCount(users.length, width) : 5;
    const data = users.filter(user => !!user.displayName).map(({
      atlassianUserId,
      displayName,
      avatarSource,
      testId
    }) => ({
      key: atlassianUserId,
      name: displayName,
      src: avatarSource,
      testId: `${testId}--avatar`
    }));
    return /*#__PURE__*/React.createElement(AvatarGroupWrapperStyles, null, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.widthObserverWrapperStyles
    }, /*#__PURE__*/React.createElement(WidthObserver, {
      setWidth: setWidth
    })), /*#__PURE__*/React.createElement(AvatarGroup, {
      data: data,
      maxCount: maxCount,
      size: "small",
      isTooltipDisabled: true,
      testId: USER_TYPE_TEST_ID
    }));
  }
};
export default UserType;