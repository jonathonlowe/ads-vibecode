/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useMemo } from 'react';
import { N40 } from '@atlaskit/theme/colors';
import { AccessRequired } from '../../../common/error-state/access-required';
import { ModalLoadingError } from '../../../common/error-state/modal-loading-error';
import { NoResults } from '../../../common/error-state/no-results';
import { EmptyState, IssueLikeDataTableView } from '../../../issue-like-table';
import { InitialStateView } from './initial-state-view';
export const MODAL_HEIGHT = 420;

// This is to prevent y scrollbar when showing table loading state
const disableOverflowStyles = null;
const contentContainerStyles = null;
const tableBordersStyles = null;
const RejectedView = () => /*#__PURE__*/React.createElement("div", {
  className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5"])
}, /*#__PURE__*/React.createElement(ModalLoadingError, null));
const UnauthorizedView = () => /*#__PURE__*/React.createElement("div", {
  className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5"])
}, /*#__PURE__*/React.createElement(AccessRequired, null));
const EmptyView = () => /*#__PURE__*/React.createElement("div", {
  className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5"])
}, /*#__PURE__*/React.createElement(InitialStateView, null));
const NoResultsView = () => /*#__PURE__*/React.createElement("div", {
  className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5"])
}, /*#__PURE__*/React.createElement(NoResults, null));
const LoadingView = () => /*#__PURE__*/React.createElement("div", {
  className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5", "_1reo1wug _18m91wug _4t3i1pna _1e0c11p5", "_19ith6cr _n7zl17u4 _13lipd34 _qrwqpd34 _1itkwoh3 _12vemgnk _1lrw1sd4 _qmxj1c00", "_1reo15vq _18m915vq"])
}, /*#__PURE__*/React.createElement(EmptyState, {
  testId: "assets-aql-datasource-modal--loading-state"
}));
export const RenderAssetsContent = props => {
  const {
    status,
    responseItems,
    responseItemIds,
    visibleColumnKeys,
    onNextPage,
    hasNextPage,
    loadDatasourceDetails,
    columns,
    defaultVisibleColumnKeys,
    onVisibleColumnKeysChange,
    isFetchingInitialData
  } = props;
  const resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  const issueLikeDataTableView = useMemo(() => /*#__PURE__*/React.createElement("div", {
    className: ax(["_1reo1wug _18m91wug _4t3i1pna _1e0c11p5", "_19ith6cr _n7zl17u4 _13lipd34 _qrwqpd34 _1itkwoh3 _12vemgnk _1lrw1sd4 _qmxj1c00"])
  }, /*#__PURE__*/React.createElement(IssueLikeDataTableView, {
    testId: "asset-datasource-table",
    status: status,
    columns: columns,
    items: responseItems,
    itemIds: responseItemIds,
    hasNextPage: hasNextPage,
    visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
    onNextPage: onNextPage,
    onLoadDatasourceDetails: loadDatasourceDetails,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange
  })), [columns, defaultVisibleColumnKeys, hasNextPage, loadDatasourceDetails, onNextPage, onVisibleColumnKeysChange, responseItems, responseItemIds, status, visibleColumnKeys]);
  const renderAssetsContentView = useCallback(() => {
    if (isFetchingInitialData) {
      // Placing this check first as it's a priority before all others
      return /*#__PURE__*/React.createElement(LoadingView, null);
    } else if (status === 'rejected') {
      return /*#__PURE__*/React.createElement(RejectedView, null);
    } else if (status === 'unauthorized') {
      return /*#__PURE__*/React.createElement(UnauthorizedView, null);
    } else if (status === 'empty') {
      return /*#__PURE__*/React.createElement(EmptyView, null);
    } else if (resolvedWithNoResults) {
      return /*#__PURE__*/React.createElement(NoResultsView, null);
    } else if (status === 'loading' && !columns.length) {
      return /*#__PURE__*/React.createElement(LoadingView, null);
    }
    return issueLikeDataTableView;
  }, [columns.length, isFetchingInitialData, issueLikeDataTableView, resolvedWithNoResults, status]);
  return renderAssetsContentView();
};