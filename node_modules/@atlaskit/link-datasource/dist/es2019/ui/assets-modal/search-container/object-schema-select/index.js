/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { forwardRef } from 'react';
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import debounce from 'debounce-promise';
import { useIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import { Field } from '@atlaskit/form';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { AsyncSelect, PopupSelect } from '@atlaskit/select';
import { layers } from '@atlaskit/theme/constants';
import { useObjectSchemas } from '../../../../hooks/useObjectSchemas';
import { objectSchemaKey } from '../../../../types/assets/types';
import { objectSchemaSelectMessages } from './messages';
import { objectSchemaToSelectOption } from './utils';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const FieldContainer = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_16jlkb7n _1o9zkb7n _i0dlf1ug _19pkx0bf", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  FieldContainer.displayName = 'FieldContainer';
}
export const SEARCH_DEBOUNCE_MS = 350;
const mapObjectSchemasToOptions = objectSchemas => {
  return objectSchemas ? objectSchemas.map(objectSchema => objectSchemaToSelectOption(objectSchema)) : [];
};

/**
 * Rendering a `<Select>` in a `<Modal>` results in the select options getting cut off by the bottom of the modal and
 * scrolling. This is a work-around for that, see https://atlassian.slack.com/archives/CFJ9DU39U/p1623179496484100
 */
export const selectInAModalStyleFixProps = {
  styles: {
    menuPortal: base => ({
      ...base,
      zIndex: layers.modal()
    })
  },
  menuPortalTarget: document.body
};
export const AssetsObjectSchemaSelect = ({
  value,
  workspaceId,
  initialObjectSchemas,
  classNamePrefix = 'assets-datasource-modal--object-schema-select'
}) => {
  const {
    formatMessage
  } = useIntl();
  const {
    fetchObjectSchemas,
    objectSchemasLoading
  } = useObjectSchemas(workspaceId);
  const selectedObjectSchema = value ? objectSchemaToSelectOption(value) : undefined;
  const loadOptions = async inputValue => {
    const {
      objectSchemas
    } = await fetchObjectSchemas(inputValue);
    return mapObjectSchemasToOptions(objectSchemas);
  };
  const debouncedLoadOptions = debounce(loadOptions, SEARCH_DEBOUNCE_MS);
  const validateSchema = value => {
    if (!value || !value.value) {
      return formatMessage(objectSchemaSelectMessages.schemaRequired);
    }
    return undefined;
  };
  return /*#__PURE__*/React.createElement(FieldContainer, null, /*#__PURE__*/React.createElement(Field, {
    name: objectSchemaKey,
    defaultValue: selectedObjectSchema,
    validate: value => validateSchema(value)
  }, ({
    fieldProps: {
      onChange,
      onFocus,
      ...restFieldProps
    }
  }) => fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(PopupSelect, _extends({
    autoFocus: true,
    maxMenuWidth: 300,
    minMenuWidth: 300,
    isLoading: objectSchemasLoading,
    options: mapObjectSchemasToOptions(initialObjectSchemas),
    placeholder: formatMessage(objectSchemaSelectMessages.placeholder),
    onChange: newOption => newOption && onChange(newOption)
  }, restFieldProps, {
    label: formatMessage(objectSchemaSelectMessages.placeholder),
    target: ({
      isOpen,
      ...triggerProps
    }) => {
      var _restFieldProps$value;
      return /*#__PURE__*/React.createElement(Button, _extends({}, triggerProps, {
        isSelected: isOpen,
        iconAfter: () => /*#__PURE__*/React.createElement(ChevronDownIcon, {
          label: "",
          color: "currentColor"
        })
      }), ((_restFieldProps$value = restFieldProps.value) === null || _restFieldProps$value === void 0 ? void 0 : _restFieldProps$value.label) || formatMessage(objectSchemaSelectMessages.placeholder));
    }
  })) : /*#__PURE__*/React.createElement(AsyncSelect, _extends({
    autoFocus: true,
    classNamePrefix: classNamePrefix,
    isLoading: objectSchemasLoading,
    defaultOptions: mapObjectSchemasToOptions(initialObjectSchemas),
    isSearchable: true,
    loadOptions: debouncedLoadOptions,
    placeholder: formatMessage(objectSchemaSelectMessages.placeholder),
    onChange: newOption => newOption && onChange(newOption)
  }, selectInAModalStyleFixProps, restFieldProps, {
    label: formatMessage(objectSchemaSelectMessages.placeholder)
  }))));
};