/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { forwardRef } from 'react';
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import Form from '@atlaskit/form';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { AqlSearchInput } from './aql-search-input';
import { AssetsObjectSchemaSelect } from './object-schema-select';
import { FormRowContainer } from './styled';
const DEFAULT_AQL_QUERY = '';
const SEARCH_FORM_ID = 'linkDataSource.assets.configModal.searchContainer-form';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const SchemaSelectContainer = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1bsb1osq _p12ffkat", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  SchemaSelectContainer.displayName = 'SchemaSelectContainer';
}
const FormContainer = forwardRef(({
  as: C = "form",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c11p5 _1p57pxbi _1bsb1osq", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  FormContainer.displayName = 'FormContainer';
}
export const AssetsSearchContainer = props => {
  const {
    onSearch,
    workspaceId,
    initialSearchData,
    modalTitle,
    isSearching
  } = props;
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const onFormSubmit = searchFormValues => {
    const {
      aql,
      objectSchema
    } = searchFormValues;
    if (aql && objectSchema) {
      fireEvent('ui.aqlEditor.searched', {});
      // Pass the validated aql and object schema back to modal
      onSearch(aql, objectSchema.value);
    }
  };
  return /*#__PURE__*/React.createElement(Form, {
    onSubmit: onFormSubmit
  }, ({
    formProps
  }) => {
    var _initialSearchData$ob, _initialSearchData$ob2, _initialSearchData$aq;
    return /*#__PURE__*/React.createElement(FormContainer, _extends({}, formProps, {
      id: SEARCH_FORM_ID
    }), /*#__PURE__*/React.createElement(FormRowContainer, {
      isNarrowGap: true
    }, modalTitle, /*#__PURE__*/React.createElement(SchemaSelectContainer, null, /*#__PURE__*/React.createElement(AssetsObjectSchemaSelect, {
      value: (_initialSearchData$ob = initialSearchData.objectSchema) !== null && _initialSearchData$ob !== void 0 ? _initialSearchData$ob : undefined,
      workspaceId: workspaceId,
      initialObjectSchemas: (_initialSearchData$ob2 = initialSearchData.objectSchemas) !== null && _initialSearchData$ob2 !== void 0 ? _initialSearchData$ob2 : undefined,
      classNamePrefix: "assets-datasource-modal--object-schema-select"
    }))), /*#__PURE__*/React.createElement(FormRowContainer, null, /*#__PURE__*/React.createElement(AqlSearchInput, {
      value: (_initialSearchData$aq = initialSearchData.aql) !== null && _initialSearchData$aq !== void 0 ? _initialSearchData$aq : DEFAULT_AQL_QUERY,
      workspaceId: workspaceId,
      isSearching: isSearching
    })));
  });
};