/* datasourceTableView.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./datasourceTableView.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useEffect, useRef } from 'react';
import { withAnalyticsContext } from '@atlaskit/analytics-next';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import { fg } from '@atlaskit/platform-feature-flags';
import { useDatasourceAnalyticsEvents } from '../../analytics';
import { componentMetadata } from '../../analytics/constants';
import { startUfoExperience } from '../../analytics/ufoExperiences';
import { useColumnPickerRenderedFailedUfoExperience } from '../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience';
import { useDataRenderedUfoExperience } from '../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience';
import { fetchMessagesForLocale } from '../../common/utils/locale/fetch-messages-for-locale';
import { DatasourceExperienceIdProvider, useDatasourceExperienceId } from '../../contexts/datasource-experience-id';
import { useDatasourceTableState } from '../../hooks/useDatasourceTableState';
import i18nEN from '../../i18n/en';
import { StoreContainer } from '../../state';
import { ASSETS_LIST_OF_LINKS_DATASOURCE_ID } from '../assets-modal';
import { AccessRequired } from '../common/error-state/access-required';
import { LoadingError } from '../common/error-state/loading-error';
import { NoResults } from '../common/error-state/no-results';
import { ProviderAuthRequired } from '../common/error-state/provider-auth-required';
import { IssueLikeDataTableView } from '../issue-like-table';
import EmptyState from '../issue-like-table/empty-state';
import { TableFooter } from '../table-footer';
const containerStyles = null;
const ScrollableContainerHeight = 590;
const DatasourceTableViewWithoutAnalytics = ({
  datasourceId,
  parameters,
  visibleColumnKeys,
  onVisibleColumnKeysChange,
  url,
  columnCustomSizes,
  onColumnResize,
  wrappedColumnKeys,
  onWrappedColumnChange
}) => {
  const {
    reset,
    status,
    onNextPage,
    responseItems,
    responseItemIds,
    hasNextPage,
    columns,
    defaultVisibleColumnKeys,
    totalCount,
    loadDatasourceDetails,
    extensionKey = null,
    providerName,
    destinationObjectTypes,
    authDetails
  } = useDatasourceTableState({
    datasourceId,
    parameters,
    fieldKeys: visibleColumnKeys
  });
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const experienceId = useDatasourceExperienceId();
  const visibleColumnCount = useRef((visibleColumnKeys === null || visibleColumnKeys === void 0 ? void 0 : visibleColumnKeys.length) || 0);

  /*  Need this to make sure that the datasource in the editor gets updated new info if any edits are made in the modal
       But we don't want to call it on initial load. This screws up useDatasourceTableState's internal
       mechanism of initial loading. Use of ref here makes it basically work as a `componentDidUpdate` but not `componentDidMount`
    */
  const isInitialRender = useRef(true);
  const hasColumns = !!columns.length;
  const isDataReady = hasColumns && responseItems.length > 0 && totalCount && totalCount > 0;
  visibleColumnCount.current = (visibleColumnKeys === null || visibleColumnKeys === void 0 ? void 0 : visibleColumnKeys.length) || 0;
  useEffect(() => {
    if (!isInitialRender.current) {
      reset();
    }
    isInitialRender.current = false;
  }, [reset, parameters]);
  useEffect(() => {
    if (onVisibleColumnKeysChange && (visibleColumnKeys || []).length === 0 && defaultVisibleColumnKeys.length > 0) {
      onVisibleColumnKeysChange(defaultVisibleColumnKeys);
    }
  }, [visibleColumnKeys, defaultVisibleColumnKeys, onVisibleColumnKeysChange]);
  useEffect(() => {
    const isTableViewRenderedWithData = status === 'resolved' && isDataReady;
    if (isTableViewRenderedWithData) {
      fireEvent('ui.datasource.renderSuccess', {
        extensionKey,
        destinationObjectTypes,
        totalItemCount: totalCount,
        displayedColumnCount: visibleColumnCount.current,
        display: 'table'
      });
    }
  }, [totalCount, fireEvent, status, extensionKey, destinationObjectTypes, isDataReady]);
  useEffect(() => {
    const shouldStartUfoExperience = datasourceId && parameters && visibleColumnKeys && status === 'loading';
    if (shouldStartUfoExperience) {
      startUfoExperience({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [datasourceId, parameters, status, experienceId, visibleColumnKeys]);
  useColumnPickerRenderedFailedUfoExperience(status, experienceId);
  useDataRenderedUfoExperience({
    status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    extensionKey
  });
  const forcedReset = useCallback(() => {
    reset({
      shouldForceRequest: true,
      shouldResetColumns: datasourceId === ASSETS_LIST_OF_LINKS_DATASOURCE_ID
    });
  }, [reset, datasourceId]);
  const onRefresh = useCallback(() => {
    fireEvent('ui.button.clicked.sync', {
      extensionKey,
      destinationObjectTypes
    });
    forcedReset();
  }, [destinationObjectTypes, extensionKey, fireEvent, forcedReset]);
  const handleErrorRefresh = useCallback(() => {
    reset({
      shouldForceRequest: true
    });
  }, [reset]);
  if (status === 'resolved' && !responseItems.length || status === 'forbidden') {
    return /*#__PURE__*/React.createElement(NoResults, !fg('platform-linking-visual-refresh-sllv') && {
      onRefresh: handleErrorRefresh
    });
  }
  if (status === 'unauthorized') {
    return authDetails !== null && authDetails !== void 0 && authDetails.length && authDetails.length > 0 ? /*#__PURE__*/React.createElement(ProviderAuthRequired, {
      auth: authDetails,
      extensionKey: extensionKey,
      providerName: providerName,
      onAuthSuccess: forcedReset,
      onAuthError: forcedReset,
      datasourceId: datasourceId
    }) : /*#__PURE__*/React.createElement(AccessRequired, {
      url: url
    });
  }
  if (status === 'rejected') {
    return /*#__PURE__*/React.createElement(LoadingError, _extends({
      onRefresh: handleErrorRefresh
    }, fg('platform-linking-visual-refresh-sllv') && {
      url
    }));
  }
  return /*#__PURE__*/React.createElement(IntlMessagesProvider, {
    defaultMessages: i18nEN,
    loaderFn: fetchMessagesForLocale
  }, /*#__PURE__*/React.createElement("div", {
    className: ax(["_2rko1kw7", "datasource-table"])
  }, hasColumns ? /*#__PURE__*/React.createElement(IssueLikeDataTableView, {
    testId: 'datasource-table-view',
    hasNextPage: hasNextPage,
    items: responseItems,
    itemIds: responseItemIds,
    onNextPage: onNextPage,
    onLoadDatasourceDetails: loadDatasourceDetails,
    status: status,
    columns: columns,
    visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange,
    columnCustomSizes: columnCustomSizes,
    onColumnResize: onColumnResize,
    wrappedColumnKeys: wrappedColumnKeys,
    onWrappedColumnChange: onWrappedColumnChange,
    scrollableContainerHeight: ScrollableContainerHeight,
    extensionKey: extensionKey
  }) : /*#__PURE__*/React.createElement(EmptyState, {
    testId: "datasource-table-view-skeleton",
    isCompact: true
  }), /*#__PURE__*/React.createElement(TableFooter, {
    datasourceId: datasourceId,
    itemCount: isDataReady ? totalCount : undefined,
    onRefresh: onRefresh,
    isLoading: !isDataReady || status === 'loading',
    url: url
  })));
};
export const DatasourceTableView = withAnalyticsContext(componentMetadata.tableView)(props => /*#__PURE__*/React.createElement(StoreContainer, null, /*#__PURE__*/React.createElement(DatasourceExperienceIdProvider, null, /*#__PURE__*/React.createElement(DatasourceTableViewWithoutAnalytics, props))));
export const DataSourceTableViewNoSuspense = DatasourceTableView;