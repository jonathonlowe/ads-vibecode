/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex, Text } from '@atlaskit/primitives/compiled';
import { BasicSearchInput } from '../../common/modal/basic-search-input';
import { FILTER_SELECTION_DEBOUNCE_MS } from '../../common/modal/popup-select/constants';
import BasicFilters from '../basic-filters';
import { useBasicFilterHydration } from '../basic-filters/hooks/useBasicFilterHydration';
import { CLOLBasicFilters } from '../basic-filters/types';
import { searchMessages } from './messages';
const styles = {
  basicSearchInputBoxStyles: "_1bsb1osq",
  basicSearchInputContainerStyles: "_16jlkb7n"
};
const ConfluenceSearchContainer = ({
  parameters: {
    cloudId,
    searchString: initialSearchValue,
    lastModified,
    lastModifiedFrom,
    lastModifiedTo,
    contributorAccountIds
  },
  isSearching,
  onSearch
}) => {
  const {
    hydrateUsersFromAccountIds,
    users,
    status,
    reset: resetHydrationHook
  } = useBasicFilterHydration();
  const currentCloudId = useRef(cloudId);
  const [initialContributorAccountIds, setInitialContributorAccountIds] = useState(contributorAccountIds !== null && contributorAccountIds !== void 0 ? contributorAccountIds : []);
  const [searchBarSearchString, setSearchBarSearchString] = useState(initialSearchValue !== null && initialSearchValue !== void 0 ? initialSearchValue : '');
  const [filterSelections, setFilterSelections] = useState(() => lastModified ? {
    lastModified: [{
      optionType: 'dateRange',
      label: lastModified,
      value: lastModified,
      from: lastModifiedFrom,
      to: lastModifiedTo
    }]
  } : {});
  const {
    formatMessage
  } = useIntl();
  const handleSearchChange = useCallback(e => {
    const rawSearch = e.currentTarget.value;
    setSearchBarSearchString(rawSearch);
  }, []);
  const [debouncedBasicFilterSelectionChange] = useDebouncedCallback(filterValues => {
    onSearch(searchBarSearchString, filterValues);
  }, FILTER_SELECTION_DEBOUNCE_MS);
  const handleBasicFilterSelectionChange = useCallback((filterType, options) => {
    const updatedSelection = {
      ...filterSelections,
      [filterType]: Array.isArray(options) ? options : [options]
    };
    setFilterSelections(updatedSelection);
    if (filterType === CLOLBasicFilters.lastModified) {
      onSearch(searchBarSearchString, updatedSelection);
    } else {
      debouncedBasicFilterSelectionChange(updatedSelection);
    }
  }, [debouncedBasicFilterSelectionChange, filterSelections, onSearch, searchBarSearchString]);

  // TODO: further refactoring in EDM-9573
  // https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/82725/overview?commentId=6827913
  useEffect(() => {
    if (currentCloudId.current !== cloudId) {
      setInitialContributorAccountIds([]);
      resetHydrationHook();
      setSearchBarSearchString('');
      setFilterSelections({});
      currentCloudId.current = cloudId;
    }
  }, [cloudId, resetHydrationHook]);
  useEffect(() => {
    const hasAccountIds = (initialContributorAccountIds === null || initialContributorAccountIds === void 0 ? void 0 : initialContributorAccountIds.length) > 0;
    if (hasAccountIds && status === 'empty') {
      hydrateUsersFromAccountIds(initialContributorAccountIds);
    }
  }, [hydrateUsersFromAccountIds, initialContributorAccountIds, status]);
  useEffect(() => {
    if (status === 'resolved') {
      setFilterSelections({
        lastModified: filterSelections.lastModified,
        editedOrCreatedBy: users
      });
    }
  }, [users, status, filterSelections.lastModified]);
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.basicSearchInputBoxStyles
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    xcss: styles.basicSearchInputContainerStyles
  }, /*#__PURE__*/React.createElement(BasicSearchInput, {
    testId: "confluence-search-datasource-modal",
    isSearching: isSearching,
    onChange: handleSearchChange,
    onSearch: onSearch,
    searchTerm: searchBarSearchString,
    placeholder: searchMessages.searchLabel,
    ariaLabel: searchMessages.searchLabel,
    fullWidth: false
  }), /*#__PURE__*/React.createElement(BasicFilters, {
    cloudId: cloudId,
    selections: filterSelections,
    onChange: handleBasicFilterSelectionChange,
    isHydrating: status === 'loading'
  })), fg('platform-linking-visual-refresh-sllv') && /*#__PURE__*/React.createElement(Text, {
    size: "small",
    color: "color.text.subtlest",
    testId: "confluence-search-placeholder"
  }, formatMessage(searchMessages.searchLabel)));
};
export default ConfluenceSearchContainer;