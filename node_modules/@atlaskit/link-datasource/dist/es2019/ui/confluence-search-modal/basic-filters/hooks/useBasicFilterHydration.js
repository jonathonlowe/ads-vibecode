import { useCallback, useState } from 'react';
import { useBasicFilterAGG } from '../../../../services/useBasicFilterAGG';
export const useBasicFilterHydration = () => {
  const [status, setStatus] = useState('empty');
  const {
    getUsersFromAccountIDs
  } = useBasicFilterAGG();
  const [users, setUsers] = useState([]);
  const convertUserHydrationResponseToFilterOptions = response => {
    var _response$data, _response$data2;
    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.users)) {
      return [];
    }
    return (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.users.map(item => ({
      optionType: 'avatarLabel',
      label: item.name,
      value: item.accountId,
      avatar: item.picture
    }));
  };
  const hydrateUsersFromAccountIds = useCallback(async accountIds => {
    try {
      setStatus('loading');
      const response = await getUsersFromAccountIDs(accountIds);
      if (response.errors && response.errors.length > 0) {
        throw new Error(JSON.stringify(response.errors));
      }
      setUsers(convertUserHydrationResponseToFilterOptions(response));
      setStatus('resolved');
    } catch (error) {
      setStatus('rejected');
    }
  }, [getUsersFromAccountIDs]);
  const reset = useCallback(() => {
    setStatus('empty');
    setUsers([]);
  }, []);
  return {
    hydrateUsersFromAccountIds,
    status,
    users,
    reset
  };
};