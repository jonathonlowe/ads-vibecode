/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { DatePicker } from '@atlaskit/datetime-picker';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import { fg } from '@atlaskit/platform-feature-flags';
import Popup from '@atlaskit/popup';
import { N0, N20, N30, R400 } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import { useDatasourceAnalyticsEvents } from '../../../../../analytics';
import { dateRangeMessages } from './messages';
import { PopupComponent } from './PopupComponent';
import { CustomDropdownItem } from './styled';
import { PopupTrigger } from './trigger';
import { getCurrentOptionLabel, getDropdownLabel, useInvalidDateRange } from './utils';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const DateRangeErrorMessage = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_zulpv77o _11c8dcr7 _1e0c1txw _19pk57x3 _bozgv77o _syaz1ick _4cvr1h6o", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  DateRangeErrorMessage.displayName = 'DateRangeErrorMessage';
}
const CustomDropdown = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_2rkoiti9 _1bsb5x59 _bfhk1j9a _16qs1sus _1pby16oo", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  CustomDropdown.displayName = 'CustomDropdown';
}
const SelectDateRangeButton = forwardRef(({
  as: C = "button",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_19itglyw _11c81kw7 _2rkoiti9 _bfhk1y9p _1bsbymf6 _4t3i1ylp _19pkutpp _irr3134c _d0altlke", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  SelectDateRangeButton.displayName = 'SelectDateRangeButton';
}
const CustomDateWrapper = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_ca0qutpp _u5f3utpp _n3tdutpp _19bvutpp _vchhusvi", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  CustomDateWrapper.displayName = 'CustomDateWrapper';
}
const DatePickersWrapper = forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1txw _1bah1yb4 _4cvr1h6o _1bsb1osq", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  DatePickersWrapper.displayName = 'DatePickersWrapper';
}
const dateRangeValues = ['anyTime', 'today', 'yesterday', 'past7Days', 'past30Days', 'pastYear', 'custom'];
const defaultOptionValue = 'anyTime';
export const DateRangePicker = ({
  onSelectionChange,
  selection,
  filterName = 'datasource-date-range-picker'
}) => {
  const {
    value: selectedValue,
    from: fromDate,
    to: toDate
  } = selection || {};
  const todayDate = new Date().toISOString();
  const {
    locale,
    formatMessage,
    formatDate
  } = useIntl();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const [currentOption, setCurrentOption] = useState(selectedValue);
  const [customFromDate, setCustomFromDate] = useState(fromDate);
  const [customToDate, setCustomToDate] = useState(toDate);
  const [isPickerOpen, setIsPickerOpen] = useState(undefined);
  const isCustomSelected = currentOption === 'custom';
  const analyticsPayload = useMemo(() => ({
    filterName,
    selectionCount: (currentOption !== null && currentOption !== void 0 ? currentOption : defaultOptionValue) === defaultOptionValue ? 0 : 1
  }), [filterName, currentOption]);
  const invalidDateRange = useInvalidDateRange(customFromDate, customToDate);
  const handleClickUpdateDateRange = () => {
    onSelectionChange({
      value: 'custom',
      from: customFromDate,
      to: customToDate
    });
    setIsPickerOpen(false);
  };
  const handleClickFilterOption = useCallback(option => {
    if (option === currentOption) {
      setIsPickerOpen(false);
      return;
    }
    setCurrentOption(option);
    onSelectionChange({
      value: option
    });
    if (option !== 'custom') {
      setIsPickerOpen(false);
    }
  }, [onSelectionChange, currentOption]);
  const handlePickerToggle = () => {
    if (isPickerOpen) {
      setCustomToDate(toDate);
      setCustomFromDate(fromDate);
      setIsPickerOpen(false);
      return;
    }
    setIsPickerOpen(true);
    fireEvent('ui.dropdown.opened.basicSearchDropdown', analyticsPayload);
  };
  useEffect(() => {
    if (isPickerOpen === false) {
      fireEvent('ui.dropdown.closed.basicSearchDropdown', analyticsPayload);
    }
  }, [analyticsPayload, fireEvent, isPickerOpen]);
  const popupContent = () => {
    return /*#__PURE__*/React.createElement(CustomDropdown, null, dateRangeValues.map(option => /*#__PURE__*/React.createElement(CustomDropdownItem, {
      key: option
      // want to show Anytime as selected if none of the other options are selected
      ,
      isSelected: selectedValue ? option === selectedValue : option === defaultOptionValue,
      onClick: () => handleClickFilterOption(option)
    }, getDropdownLabel(option, formatMessage))), isPickerOpen && isCustomSelected && /*#__PURE__*/React.createElement(CustomDateWrapper, null, /*#__PURE__*/React.createElement(DatePickersWrapper, null, /*#__PURE__*/React.createElement(DatePicker, {
      maxDate: todayDate,
      innerProps: {
        style: {
          width: 140
        }
      },
      testId: "date-from-picker",
      dateFormat: "D MMM YYYY",
      onChange: setCustomFromDate,
      defaultValue: fromDate,
      placeholder: formatMessage(dateRangeMessages.dateRangeFrom),
      isInvalid: Boolean(invalidDateRange),
      locale: locale,
      selectProps: {
        styles: {
          placeholder: base => ({
            ...base,
            width: 'max-content'
          })
        }
      }
    }), /*#__PURE__*/React.createElement(FormattedMessage, dateRangeMessages.dateRangeToLabel), /*#__PURE__*/React.createElement(DatePicker, {
      maxDate: todayDate,
      innerProps: {
        style: {
          width: 140
        }
      },
      testId: "date-to-picker",
      dateFormat: "D MMM YYYY",
      onChange: setCustomToDate,
      defaultValue: toDate,
      placeholder: formatMessage(dateRangeMessages.dateRangeTo),
      isInvalid: Boolean(invalidDateRange),
      locale: locale,
      selectProps: {
        styles: {
          placeholder: base => ({
            ...base,
            width: 'max-content'
          })
        }
      }
    })), invalidDateRange && /*#__PURE__*/React.createElement(DateRangeErrorMessage, null, /*#__PURE__*/React.createElement(ErrorIcon, {
      LEGACY_size: "small",
      color: `var(--ds-icon-danger, ${R400})`,
      label: fg('bandicoots-update-sllv-icons') ? formatMessage(dateRangeMessages.dateRangeError) : 'Date range error',
      LEGACY_margin: `0 ${"var(--ds-space-negative-025, -2px)"}`
    }), invalidDateRange), /*#__PURE__*/React.createElement(SelectDateRangeButton, {
      "data-testId": "custom-date-range-update-button",
      disabled: Boolean(invalidDateRange),
      onClick: handleClickUpdateDateRange
    }, formatMessage(dateRangeMessages.dateRangeUpdateButton))));
  };
  return /*#__PURE__*/React.createElement(Popup, {
    isOpen: !!isPickerOpen,
    onClose: handlePickerToggle
    // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
    ,
    popupComponent: PopupComponent,
    zIndex: layers.modal(),
    content: popupContent,
    placement: "bottom-start",
    trigger: triggerProps => {
      const labelText = getCurrentOptionLabel(formatDate, formatMessage, selectedValue, toDate, fromDate);
      const isSelected = !!selectedValue || !!isPickerOpen;
      return /*#__PURE__*/React.createElement(PopupTrigger, {
        triggerProps: triggerProps,
        isSelected: isSelected,
        labelPrefix: formatMessage(dateRangeMessages.dateRangeTitle),
        selectedLabel: labelText,
        onClick: handlePickerToggle
      });
    }
  });
};