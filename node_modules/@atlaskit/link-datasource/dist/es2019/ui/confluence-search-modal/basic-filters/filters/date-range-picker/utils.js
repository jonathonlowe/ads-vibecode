import React, { useMemo } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { getFormattedDate } from '../../../../../ui/issue-like-table/render-type/date-time';
import { dateRangeMessages } from './messages';
export const getDropdownLabel = (option = 'anyTime', formatMessage) => {
  const mapping = {
    anyTime: 'dateRangeAnyTime',
    today: 'dateRangeToday',
    yesterday: 'dateRangeYesterday',
    past7Days: 'dateRangeLastWeek',
    past30Days: 'dateRangeLastMonth',
    pastYear: 'dateRangeLastYear',
    custom: 'dateRangeCustom'
  };
  return formatMessage(dateRangeMessages[mapping[option]]);
};
export const getCurrentOptionLabel = (formatDate, formatMessage, value, to, from) => {
  const selectedOption = value;
  if (selectedOption === 'custom') {
    const hasFromDate = !!from;
    const hasToDate = !!to;
    const formattedFromDate = getFormattedDate(from || '', 'date', formatDate);
    const formattedToDate = getFormattedDate(to || '', 'date', formatDate);
    if (hasFromDate && !hasToDate) {
      return formatMessage(dateRangeMessages.dateRangeAfterLabel, {
        date: formattedFromDate
      });
    }
    if (!hasFromDate && hasToDate) {
      return formatMessage(dateRangeMessages.dateRangeBeforeLabel, {
        date: formattedToDate
      });
    }
    if (hasFromDate && hasToDate) {
      return `${formattedFromDate} - ${formattedToDate}`;
    }
  }
  return getDropdownLabel(selectedOption, formatMessage);
};
export const useInvalidDateRange = (from, to) => {
  return useMemo(() => {
    if (!from && !to) {
      return null;
    }
    const dateFrom = new Date(`${from}${from ? 'T00:00:00' : ''}`);
    const dateTo = new Date(`${to}${to ? 'T00:00:00' : ''}`);
    const now = new Date();
    if (dateFrom > now) {
      return /*#__PURE__*/React.createElement(FormattedMessage, dateRangeMessages.dateRangeCustomInvalidDateAfterToday);
    }
    if (dateFrom > dateTo) {
      return /*#__PURE__*/React.createElement(FormattedMessage, dateRangeMessages.dateRangeCustomInvalidDateAfterEnd);
    }
    if (dateTo > now) {
      return /*#__PURE__*/React.createElement(FormattedMessage, dateRangeMessages.dateRangeCustomInvalidToDateAfterToday);
    }
    return null;
  }, [from, to]);
};