import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlaskit/platform/no-preconditioning */
/* eslint-disable @atlaskit/platform/ensure-feature-flag-prefix */
import React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import LinkComponent from '@atlaskit/link';
import { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import { fg } from '@atlaskit/platform-feature-flags';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { EVENT_CHANNEL } from '../../../analytics/constants';
import { DatasourceAction, DatasourceDisplay } from '../../../analytics/types';
import { startUfoExperience } from '../../../analytics/ufoExperiences';
import { useColumnPickerRenderedFailedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience';
import { useDataRenderedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience';
import { mapSearchMethod } from '../../../analytics/utils';
import { RichIconSearch } from '../../../common/ui/rich-icon/search';
import { fetchMessagesForLocale } from '../../../common/utils/locale/fetch-messages-for-locale';
import { useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { useUserInteractions } from '../../../contexts/user-interactions';
import i18nEN from '../../../i18n/en';
import { useAvailableSites } from '../../../services/useAvailableSites';
import { StoreContainer } from '../../../state';
import { AccessRequired } from '../../common/error-state/access-required';
import { loadingErrorMessages } from '../../common/error-state/messages';
import { ModalLoadingError } from '../../common/error-state/modal-loading-error';
import { NoInstancesView } from '../../common/error-state/no-instances';
import { NoResults } from '../../common/error-state/no-results';
import { InitialStateView } from '../../common/initial-state-view';
import { initialStateViewMessages } from '../../common/initial-state-view/messages';
import { CancelButton } from '../../common/modal/cancel-button';
import { ContentContainer } from '../../common/modal/content-container';
import { SmartCardPlaceholder, SmartLink } from '../../common/modal/count-view-smart-link';
import { useDatasourceContext } from '../../common/modal/datasource-context';
import { DatasourceModal } from '../../common/modal/datasource-modal';
import { createDatasourceModal } from '../../common/modal/datasource-modal/createDatasourceModal';
import DatasourcesTableInModalPreview from '../../common/modal/datasources-table-in-modal-preview';
import { InsertButton } from '../../common/modal/insert-button';
import { DatasourceViewModeDropDown } from '../../common/modal/mode-switcher';
import { useViewModeContext } from '../../common/modal/mode-switcher/useViewModeContext';
import TableSearchCount from '../../common/modal/search-count';
import { SiteSelector } from '../../common/modal/site-selector';
import { EmptyState } from '../../issue-like-table';
import { availableBasicFilterTypes } from '../basic-filters/ui';
import { isQueryTooComplex } from '../basic-filters/utils/isQueryTooComplex';
import { JiraSearchContainer } from '../jira-search-container';
import { JiraInitialStateSVG } from './jira-issues-initial-state-svg';
import { modalMessages } from './messages';
const noop = () => '';
const getDisplayValue = (currentViewMode, itemCount) => {
  if (currentViewMode === 'table') {
    return DatasourceDisplay.DATASOURCE_TABLE;
  }
  return itemCount === 1 ? DatasourceDisplay.INLINE : DatasourceDisplay.DATASOURCE_INLINE;
};
const jqlSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-advanced-search-with-jira-query-language-jql/';
const isValidParameters = parameters => typeof (parameters === null || parameters === void 0 ? void 0 : parameters.jql) === 'string' && parameters.jql.length > 0 && typeof (parameters === null || parameters === void 0 ? void 0 : parameters.cloudId) === 'string' && parameters.cloudId.length > 0;
const PlainJiraIssuesConfigModal = props => {
  const {
    onCancel,
    url: urlBeingEdited
  } = props;
  const {
    visibleColumnCount,
    visibleColumnKeys,
    parameters,
    setParameters,
    tableState
  } = useDatasourceContext();
  const {
    reset,
    status,
    responseItems,
    columns,
    totalCount,
    extensionKey = null,
    destinationObjectTypes
  } = tableState;
  const {
    cloudId,
    jql
  } = parameters !== null && parameters !== void 0 ? parameters : {};
  const [initialJql] = useState(jql);
  const {
    currentViewMode
  } = useViewModeContext();
  const {
    availableSites,
    selectedSite: selectedJiraSite
  } = useAvailableSites('jira', cloudId);
  const [searchBarJql, setSearchBarJql] = useState(jql);

  // analytics related parameters
  const searchCount = useRef(0);
  const userInteractions = useUserInteractions();
  const initialSearchMethod = !isQueryTooComplex(initialJql || '') ? 'basic' : 'jql';
  const [currentSearchMethod, setCurrentSearchMethod] = useState(initialSearchMethod);
  const searchMethodSearchedWith = useRef(null);
  const basicFilterSelectionsSearchedWith = useRef({});
  const isSearchedWithComplexQuery = useRef(false);
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const experienceId = useDatasourceExperienceId();
  const {
    formatMessage
  } = fg('bandicoots-update-sllv-icons') ?
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useIntl() : {
    formatMessage: noop
  };
  const analyticsPayload = useMemo(() => ({
    extensionKey,
    destinationObjectTypes
  }), [destinationObjectTypes, extensionKey]);
  const resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  const jqlUrl = selectedJiraSite && jql && `${selectedJiraSite.url}/issues/?jql=${encodeURI(jql)}`;
  const shouldShowIssueCount = !!totalCount && totalCount !== 1 && currentViewMode === 'table';
  const isDataReady = (visibleColumnKeys || []).length > 0;
  const hasNoJiraSites = availableSites && availableSites.length === 0;
  useEffect(() => {
    if (availableSites) {
      fireEvent('ui.modal.ready.datasource', {
        instancesCount: availableSites.length,
        schemasCount: null
      });
    }
  }, [fireEvent, availableSites]);
  useEffect(() => {
    const shouldStartUfoExperience = status === 'loading';
    if (shouldStartUfoExperience) {
      startUfoExperience({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [experienceId, status]);
  useDataRenderedUfoExperience({
    status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    canBeLink: currentViewMode === 'inline',
    extensionKey
  });

  /**
   * If the selected Jira site changes, update the cloudId in the parameters
   * This is mainly useful for setting the initial cloudId after the site selection loads
   */
  useEffect(() => {
    if (selectedJiraSite && (!cloudId || cloudId !== selectedJiraSite.cloudId)) {
      setParameters(() => ({
        jql: '',
        cloudId: selectedJiraSite.cloudId
      }));
    }
  }, [cloudId, selectedJiraSite, setParameters]);
  const fireSingleItemViewedEvent = useCallback(() => {
    fireEvent('ui.link.viewed.singleItem', {
      ...analyticsPayload,
      searchMethod: mapSearchMethod(searchMethodSearchedWith.current)
    });
  }, [analyticsPayload, fireEvent]);
  const fireCountViewedEvent = useCallback(() => {
    fireEvent('ui.link.viewed.count', {
      ...analyticsPayload,
      searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
      totalItemCount: totalCount || 0
    });
  }, [analyticsPayload, fireEvent, totalCount]);
  const fireTableViewedEvent = useCallback(() => {
    if (isDataReady) {
      fireEvent('ui.table.viewed.datasourceConfigModal', {
        ...analyticsPayload,
        totalItemCount: totalCount || 0,
        searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
        displayedColumnCount: visibleColumnCount.current
      });
    }
  }, [isDataReady, fireEvent, analyticsPayload, totalCount, visibleColumnCount]);
  const fireIssueViewAnalytics = useCallback(() => {
    if (!totalCount) {
      return;
    }
    if (totalCount > 1) {
      fireTableViewedEvent();
    } else if (totalCount === 1) {
      fireSingleItemViewedEvent();
    }
  }, [fireSingleItemViewedEvent, fireTableViewedEvent, totalCount]);
  useEffect(() => {
    const isResolved = status === 'resolved';
    const isIssueViewMode = currentViewMode === 'table';
    const isCountViewMode = currentViewMode === 'inline';
    if (!isResolved) {
      return;
    }
    if (isIssueViewMode) {
      fireIssueViewAnalytics();
    } else if (isCountViewMode) {
      fireCountViewedEvent();
    }
  }, [currentViewMode, status, fireIssueViewAnalytics, fireCountViewedEvent]);
  useColumnPickerRenderedFailedUfoExperience(status, experienceId);
  const onSearch = useCallback((newParameters, {
    searchMethod,
    basicFilterSelections,
    isQueryComplex
  }) => {
    searchCount.current++;
    searchMethodSearchedWith.current = searchMethod;
    basicFilterSelectionsSearchedWith.current = basicFilterSelections;
    isSearchedWithComplexQuery.current = isQueryComplex;
    if (jql !== newParameters.jql) {
      userInteractions.add(DatasourceAction.QUERY_UPDATED);
    }
    setParameters(state => state && newParameters.jql ? {
      cloudId: state.cloudId,
      jql: newParameters.jql
    } : undefined);
    reset({
      shouldForceRequest: true
    });
  }, [jql, reset, userInteractions, setParameters]);
  const onSiteSelection = useCallback(site => {
    userInteractions.add(DatasourceAction.INSTANCE_UPDATED);
    setParameters({
      jql: '',
      cloudId: site.cloudId
    });
    reset({
      shouldForceRequest: true
    });
  }, [reset, userInteractions, setParameters]);
  const retrieveUrlForSmartCardRender = useCallback(() => {
    var _data$key, _data$key$data;
    const [data] = responseItems;
    // agreement with BE that we will use `key` for rendering smartlink
    return data === null || data === void 0 ? void 0 : (_data$key = data.key) === null || _data$key === void 0 ? void 0 : (_data$key$data = _data$key.data) === null || _data$key$data === void 0 ? void 0 : _data$key$data.url;
  }, [responseItems]);
  const renderCountModeContent = useCallback(() => {
    const selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    if (status === 'unauthorized') {
      return /*#__PURE__*/React.createElement(AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (status === 'empty' || !jql || !selectedJiraSiteUrl) {
      return /*#__PURE__*/React.createElement(SmartCardPlaceholder, {
        placeholderText: fg('confluence-issue-terminology-refresh') ? modalMessages.issuesCountSmartCardPlaceholderTextIssueTermRefresh : modalMessages.issuesCountSmartCardPlaceholderText
      });
    } else {
      let url;
      if (responseItems.length === 1 && retrieveUrlForSmartCardRender()) {
        url = retrieveUrlForSmartCardRender();
      } else {
        url = `${selectedJiraSiteUrl}/issues/?jql=${encodeURIComponent(jql)}`;
      }
      return /*#__PURE__*/React.createElement(SmartLink, {
        url: url
      });
    }
  }, [jql, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, responseItems, retrieveUrlForSmartCardRender]);
  const renderIssuesModeContent = useCallback(() => {
    const selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    const getDescriptionMessage = () => {
      if (currentSearchMethod === 'basic' && fg('platform-linking-visual-refresh-sllv')) {
        return initialStateViewMessages.searchDescriptionForBasicSearchVisualRefreshSllv;
      }
      if (fg('confluence-issue-terminology-refresh')) {
        return currentSearchMethod === 'jql' ? initialStateViewMessages.searchDescriptionForJQLSearchIssueTermRefresh : initialStateViewMessages.searchDescriptionForBasicSearchIssueTermRefresh;
      }
      return currentSearchMethod === 'jql' ? initialStateViewMessages.searchDescriptionForJQLSearch : initialStateViewMessages.searchDescriptionForBasicSearch;
    };
    if (status === 'rejected' && jqlUrl) {
      if (fg('platform-linking-visual-refresh-sllv')) {
        return /*#__PURE__*/React.createElement(ModalLoadingError, {
          errorMessage: jqlUrl ? /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, modalMessages.checkConnectionWithSourceVisualRefreshSllv, {
            values: {
              a: urlText => /*#__PURE__*/React.createElement(LinkComponent, {
                href: jqlUrl
              }, urlText)
            }
          })) : undefined,
          onRefresh: () => reset({
            shouldForceRequest: true
          })
        });
      }
      return /*#__PURE__*/React.createElement(ModalLoadingError, {
        errorMessage: jqlUrl ? /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, modalMessages.checkConnectionWithSource, {
          values: {
            a: urlText => /*#__PURE__*/React.createElement("a", {
              href: jqlUrl
            }, urlText)
          }
        })) : undefined
      });
    } else if (status === 'unauthorized') {
      return /*#__PURE__*/React.createElement(AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (resolvedWithNoResults || status === 'forbidden') {
      return /*#__PURE__*/React.createElement(NoResults, null);
    } else if (status === 'empty' || !columns.length) {
      // persist the empty state when making the initial /data request which contains the columns
      return /*#__PURE__*/React.createElement(ContentContainer, {
        withTableBorder: !!jql
      }, !!jql ? /*#__PURE__*/React.createElement(EmptyState, {
        testId: `jira-datasource-modal--empty-state`
      }) : /*#__PURE__*/React.createElement(InitialStateView, {
        icon: fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(RichIconSearch, {
          alt: formatMessage(fg('confluence-issue-terminology-refresh') ? modalMessages.searchJiraTitleIssueTermRefresh : modalMessages.searchJiraTitle),
          size: 'xlarge'
        }) : /*#__PURE__*/React.createElement(JiraInitialStateSVG, null),
        title: fg('confluence-issue-terminology-refresh') ? modalMessages.searchJiraTitleIssueTermRefresh : modalMessages.searchJiraTitle,
        description: getDescriptionMessage(),
        learnMoreLink: currentSearchMethod === 'jql' ? {
          href: jqlSupportDocumentLink,
          text: initialStateViewMessages.learnMoreLinkOld
        } : fg('platform-linking-visual-refresh-sllv') ? {
          href: jqlSupportDocumentLink,
          text: initialStateViewMessages.learnMoreLink
        } : undefined
      }));
    }
    return /*#__PURE__*/React.createElement(ContentContainer, {
      withTableBorder: true
    }, /*#__PURE__*/React.createElement(DatasourcesTableInModalPreview, {
      testId: "jira-datasource-table"
    }));
  }, [columns.length, currentSearchMethod, formatMessage, jql, jqlUrl, resolvedWithNoResults, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, reset]);
  const siteSelectorLabel = useMemo(() => {
    if (fg('confluence-issue-terminology-refresh')) {
      return availableSites && availableSites.length > 1 ? modalMessages.insertIssuesTitleManySitesIssueTermRefresh : modalMessages.insertIssuesTitleIssueTermRefresh;
    }
    return availableSites && availableSites.length > 1 ? modalMessages.insertIssuesTitleManySites : modalMessages.insertIssuesTitle;
  }, [availableSites]);
  const getCancelButtonAnalyticsPayload = useCallback(() => {
    return {
      ...analyticsPayload,
      searchCount: searchCount.current,
      actions: userInteractions.get()
    };
  }, [analyticsPayload, userInteractions]);
  const filterSelectionCount = availableBasicFilterTypes.reduce((current, filter) => {
    var _basicFilterSelection;
    return {
      ...current,
      [`${filter}BasicFilterSelectionCount`]: ((_basicFilterSelection = basicFilterSelectionsSearchedWith.current[filter]) === null || _basicFilterSelection === void 0 ? void 0 : _basicFilterSelection.length) || 0
    };
  }, {});
  const getInsertButtonAnalyticsPayload = useCallback(() => ({
    ...analyticsPayload,
    display: getDisplayValue(currentViewMode, totalCount || 0),
    isQueryComplex: isSearchedWithComplexQuery.current,
    searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
    searchCount: searchCount.current,
    actions: userInteractions.get(),
    ...(searchMethodSearchedWith.current === 'basic' ? {
      ...filterSelectionCount
    } : {})
  }), [analyticsPayload, currentViewMode, filterSelectionCount, totalCount, userInteractions]);
  const urlToInsert = useMemo(() => {
    const jql = parameters === null || parameters === void 0 ? void 0 : parameters.jql;
    if (!jql || !(selectedJiraSite !== null && selectedJiraSite !== void 0 && selectedJiraSite.url)) {
      return;
    }
    const upToDateJqlUrl = `${selectedJiraSite.url}/issues/?jql=${encodeURIComponent(jql)}`;
    return currentViewMode === 'inline' && responseItems.length === 1 ? retrieveUrlForSmartCardRender() : upToDateJqlUrl;
  }, [currentViewMode, parameters === null || parameters === void 0 ? void 0 : parameters.jql, responseItems, retrieveUrlForSmartCardRender, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url]);
  return /*#__PURE__*/React.createElement(IntlMessagesProvider, {
    defaultMessages: i18nEN,
    loaderFn: fetchMessagesForLocale
  }, /*#__PURE__*/React.createElement(ModalTransition, null, /*#__PURE__*/React.createElement(DatasourceModal, {
    testId: "jira-datasource-modal",
    onClose: onCancel
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, null, /*#__PURE__*/React.createElement(SiteSelector, {
    availableSites: availableSites,
    onSiteSelection: onSiteSelection,
    selectedSite: selectedJiraSite,
    testId: "jira-datasource-modal--site-selector",
    label: siteSelectorLabel
  })), !hasNoJiraSites && /*#__PURE__*/React.createElement(DatasourceViewModeDropDown, null)), /*#__PURE__*/React.createElement(ModalBody, null, !hasNoJiraSites ? /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(JiraSearchContainer, {
    setSearchBarJql: setSearchBarJql,
    searchBarJql: searchBarJql,
    isSearching: status === 'loading',
    parameters: parameters,
    onSearch: onSearch,
    initialSearchMethod: initialSearchMethod,
    onSearchMethodChange: setCurrentSearchMethod,
    site: selectedJiraSite
  }), currentViewMode === 'inline' ? renderCountModeContent() : renderIssuesModeContent()) : /*#__PURE__*/React.createElement(NoInstancesView, {
    title: loadingErrorMessages.noAccessToJiraSitesTitle,
    description: loadingErrorMessages.noAccessToJiraSitesDescription,
    testId: `no-jira-instances-content`
  })), /*#__PURE__*/React.createElement(ModalFooter, null, shouldShowIssueCount && /*#__PURE__*/React.createElement(TableSearchCount, {
    searchCount: totalCount,
    url: jqlUrl,
    prefixTextType: "issue",
    testId: "jira-datasource-modal-total-issues-count"
  }), /*#__PURE__*/React.createElement(CancelButton, {
    onCancel: onCancel,
    getAnalyticsPayload: getCancelButtonAnalyticsPayload,
    testId: "jira-datasource-modal--cancel-button"
  }), !hasNoJiraSites && /*#__PURE__*/React.createElement(InsertButton, {
    testId: "jira-datasource-modal--insert-button",
    url: urlToInsert,
    getAnalyticsPayload: getInsertButtonAnalyticsPayload
  }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonTextIssueTermSllv) : fg('confluence-issue-terminology-refresh') ? /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonTextIssueTermRefresh) : /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonText))))));
};
const ConnectedJiraIssueConfigModal = createDatasourceModal({
  isValidParameters,
  dataProvider: 'jira-issues',
  component: PlainJiraIssuesConfigModal
});
export const JiraIssuesConfigModal = props => {
  const onInsert = props.onInsert;
  const onInsertWithMacroAnalytics = useCallback((adf, analyticsEvent) => {
    if (analyticsEvent && adf.type === 'inlineCard') {
      const macroInsertedEvent = analyticsEvent.clone();
      macroInsertedEvent === null || macroInsertedEvent === void 0 ? void 0 : macroInsertedEvent.update({
        eventType: 'track',
        action: 'inserted',
        actionSubject: 'macro',
        actionSubjectId: 'jlol'
      });
      macroInsertedEvent === null || macroInsertedEvent === void 0 ? void 0 : macroInsertedEvent.fire(EVENT_CHANNEL);
    }
    onInsert(adf, analyticsEvent);
  }, [onInsert]);
  return /*#__PURE__*/React.createElement(StoreContainer, null, /*#__PURE__*/React.createElement(ConnectedJiraIssueConfigModal, _extends({}, props, {
    onInsert: onInsertWithMacroAnalytics
  })));
};
export const JiraIssuesConfigModalNoSuspense = JiraIssuesConfigModal;