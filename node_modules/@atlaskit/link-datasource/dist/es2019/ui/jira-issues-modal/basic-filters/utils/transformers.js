import { appearanceMap } from '../types';
import { availableBasicFilterTypes } from '../ui';
function isNonNullSelectOption(edge) {
  return edge !== null;
}
function isColorName(colorName) {
  return Object.keys(appearanceMap).includes(colorName);
}
const getLozengeAppearance = colorName => {
  if (isColorName(colorName)) {
    return appearanceMap[colorName];
  }
};
const checkAndConvertToAbsoluteUrl = (url, siteUrl) => {
  if (!url) {
    return '';
  }
  if (/^data:(.*)/.test(url) || /^http(.*)/.test(url) || !siteUrl) {
    return url;
  }
  return `${siteUrl}${url}`;
};
function mapNodeToOption({
  displayName,
  jqlTerm,
  group,
  issueTypes,
  project,
  statusCategory,
  user,
  siteUrl
}) {
  try {
    const baseProps = {
      label: displayName,
      // this ensures that the returned value is not wrapped in single and double quotes
      // e.g. '"value"' -> 'value'
      value: decodeURIComponent(jqlTerm).replace(/^"|"$/g, '')
    };
    if (user) {
      return {
        ...baseProps,
        optionType: 'avatarLabel',
        avatar: user.picture,
        isSquare: false
      };
    }
    if (group) {
      return {
        ...baseProps,
        optionType: 'avatarLabel',
        isGroup: true
      };
    }
    if (project) {
      var _project$avatar;
      return {
        ...baseProps,
        optionType: 'iconLabel',
        icon: checkAndConvertToAbsoluteUrl((_project$avatar = project.avatar) === null || _project$avatar === void 0 ? void 0 : _project$avatar.small, siteUrl)
      };
    }
    if (issueTypes) {
      var _issueTypes$;
      return {
        ...baseProps,
        optionType: 'iconLabel',
        icon: checkAndConvertToAbsoluteUrl((_issueTypes$ = issueTypes[0]) === null || _issueTypes$ === void 0 ? void 0 : _issueTypes$.avatar.small, siteUrl)
      };
    }
    if (statusCategory) {
      return {
        ...baseProps,
        optionType: 'lozengeLabel',
        appearance: getLozengeAppearance(statusCategory.colorName)
      };
    }
    return null;
  } catch (error) {
    return null;
  }
}
export function mapHydrateResponseData({
  data
}) {
  var _data$jira, _data$jira$jqlBuilder, _data$jira$jqlBuilder2, _data$jira$jqlBuilder3;
  const transformedHydrateResponseData = {};
  data === null || data === void 0 ? void 0 : (_data$jira = data.jira) === null || _data$jira === void 0 ? void 0 : (_data$jira$jqlBuilder = _data$jira.jqlBuilder) === null || _data$jira$jqlBuilder === void 0 ? void 0 : (_data$jira$jqlBuilder2 = _data$jira$jqlBuilder.hydrateJqlQuery) === null || _data$jira$jqlBuilder2 === void 0 ? void 0 : (_data$jira$jqlBuilder3 = _data$jira$jqlBuilder2.fields) === null || _data$jira$jqlBuilder3 === void 0 ? void 0 : _data$jira$jqlBuilder3.forEach(({
    jqlTerm,
    values = []
  }) => {
    /**
     * Currently, we expect to hydrate only the 4 filter fields that we use.
     * Hence we check if jqlTerm is one of the values in availableBasicFilterTypes
     */
    if (!availableBasicFilterTypes.includes(jqlTerm)) {
      return;
    }
    const options = values.map(({
      values
    }) => values && values[0] ? mapNodeToOption(values[0]) : null).filter(isNonNullSelectOption) || [];
    transformedHydrateResponseData[jqlTerm] = options;
  });
  return transformedHydrateResponseData;
}
export function mapFieldValuesToFilterOptions({
  data,
  siteUrl
}) {
  var _data$jira2, _data$jira2$jqlBuilde, _data$jira2$jqlBuilde2, _data$jira2$jqlBuilde3;
  return (data === null || data === void 0 ? void 0 : (_data$jira2 = data.jira) === null || _data$jira2 === void 0 ? void 0 : (_data$jira2$jqlBuilde = _data$jira2.jqlBuilder) === null || _data$jira2$jqlBuilde === void 0 ? void 0 : (_data$jira2$jqlBuilde2 = _data$jira2$jqlBuilde.fieldValues) === null || _data$jira2$jqlBuilde2 === void 0 ? void 0 : (_data$jira2$jqlBuilde3 = _data$jira2$jqlBuilde2.edges) === null || _data$jira2$jqlBuilde3 === void 0 ? void 0 : _data$jira2$jqlBuilde3.map(edge => edge.node ? mapNodeToOption({
    ...edge.node,
    siteUrl
  }) : null).filter(isNonNullSelectOption)) || [];
}
export function mapFieldValuesToTotalCount({
  data
}) {
  var _data$jira3, _data$jira3$jqlBuilde, _data$jira3$jqlBuilde2;
  return (data === null || data === void 0 ? void 0 : (_data$jira3 = data.jira) === null || _data$jira3 === void 0 ? void 0 : (_data$jira3$jqlBuilde = _data$jira3.jqlBuilder) === null || _data$jira3$jqlBuilde === void 0 ? void 0 : (_data$jira3$jqlBuilde2 = _data$jira3$jqlBuilde.fieldValues) === null || _data$jira3$jqlBuilde2 === void 0 ? void 0 : _data$jira3$jqlBuilde2.totalCount) || 0;
}
export function mapFieldValuesToPageCursor({
  data
}) {
  var _data$jira4, _data$jira4$jqlBuilde, _data$jira4$jqlBuilde2, _data$jira4$jqlBuilde3;
  return data === null || data === void 0 ? void 0 : (_data$jira4 = data.jira) === null || _data$jira4 === void 0 ? void 0 : (_data$jira4$jqlBuilde = _data$jira4.jqlBuilder) === null || _data$jira4$jqlBuilde === void 0 ? void 0 : (_data$jira4$jqlBuilde2 = _data$jira4$jqlBuilde.fieldValues) === null || _data$jira4$jqlBuilde2 === void 0 ? void 0 : (_data$jira4$jqlBuilde3 = _data$jira4$jqlBuilde2.pageInfo) === null || _data$jira4$jqlBuilde3 === void 0 ? void 0 : _data$jira4$jqlBuilde3.endCursor;
}