/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useMemo } from 'react';
import { Flex } from '@atlaskit/primitives/compiled';
import { extractValuesFromNonComplexJQL } from '../utils/extractValuesFromNonComplexJQL';
import AsyncPopupSelect from './async-popup-select';
export const availableBasicFilterTypes = ['project', 'type', 'status', 'assignee'];
const styles = {
  basicFilterContainerStyles: "_19bvu2gc"
};
const BasicFilterContainer = ({
  jql,
  site,
  onChange,
  selections,
  isJQLHydrating
}) => {
  const extractedFilterValues = useMemo(() => isJQLHydrating ? extractValuesFromNonComplexJQL(jql) : {}, [isJQLHydrating, jql]);
  const {
    cloudId
  } = site || {};
  return /*#__PURE__*/React.createElement(Flex, {
    xcss: styles.basicFilterContainerStyles,
    gap: "space.100",
    testId: "jlol-basic-filter-container"
  }, availableBasicFilterTypes.map(filter => {
    var _extractedFilterValue;
    const shouldShowHydrationLoader = isJQLHydrating && ((_extractedFilterValue = extractedFilterValues[filter]) === null || _extractedFilterValue === void 0 ? void 0 : _extractedFilterValue.length) > 0;
    return /*#__PURE__*/React.createElement(AsyncPopupSelect, {
      site: site,
      filterType: filter,
      key: filter,
      selection: selections[filter] || [],
      isJQLHydrating: shouldShowHydrationLoader,
      isDisabled: !cloudId,
      onSelectionChange: onChange
    });
  }));
};
export default BasicFilterContainer;