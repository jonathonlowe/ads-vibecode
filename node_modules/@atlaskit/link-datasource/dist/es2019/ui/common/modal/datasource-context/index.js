import React, { useContext, useMemo, useState } from 'react';
import { useDatasourceTableState } from '../../../../hooks/useDatasourceTableState';
import { useColumnResize } from '../datasources-table-in-modal-preview/use-column-resize';
import { useColumnVisibility } from '../datasources-table-in-modal-preview/use-column-visibility';
import { useColumnWrapping } from '../datasources-table-in-modal-preview/use-column-wrapping';
const DatasourceContext = /*#__PURE__*/React.createContext(null);
export const DatasourceContextProvider = ({
  children,
  datasourceId,
  isValidParameters,
  initialParameters,
  initialVisibleColumnKeys,
  initialColumnCustomSizes,
  initialWrappedColumnKeys,
  onInsert
}) => {
  const [parameters, setParameters] = useState(initialParameters);
  const [visibleColumnKeys, setVisibleColumnKeys] = useState(initialVisibleColumnKeys);
  const {
    columnCustomSizes,
    onColumnResize
  } = useColumnResize(initialColumnCustomSizes);
  const {
    wrappedColumnKeys,
    onWrappedColumnChange
  } = useColumnWrapping(initialWrappedColumnKeys);
  const tableState = useDatasourceTableState({
    datasourceId,
    parameters: isValidParameters(parameters) ? parameters : undefined,
    fieldKeys: visibleColumnKeys
  });
  const {
    onVisibleColumnKeysChange,
    visibleColumnCount
  } = useColumnVisibility({
    visibleColumnKeys,
    setVisibleColumnKeys,
    defaultVisibleColumnKeys: tableState.defaultVisibleColumnKeys,
    initialVisibleColumnKeys
  });
  const contextValue = useMemo(() => ({
    datasourceId,
    isValidParameters,
    tableState,
    visibleColumnCount,
    visibleColumnKeys,
    onVisibleColumnKeysChange,
    columnCustomSizes,
    onColumnResize,
    wrappedColumnKeys,
    onWrappedColumnChange,
    parameters,
    setParameters,
    onInsert: onInsert
  }), [datasourceId, isValidParameters, tableState, visibleColumnCount, visibleColumnKeys, onVisibleColumnKeysChange, columnCustomSizes, onColumnResize, wrappedColumnKeys, onWrappedColumnChange, parameters, onInsert]);
  return /*#__PURE__*/React.createElement(DatasourceContext.Provider, {
    value: contextValue
  }, children);
};
export const useDatasourceContext = () => {
  const value = useContext(DatasourceContext);
  if (!value) {
    throw new Error('useDatasourceStore must be used within DatasourceContextProvider');
  }
  return value;
};