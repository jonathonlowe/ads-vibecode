import React, { useCallback } from 'react';
import Button from '@atlaskit/button/standard-button';
import { EVENT_CHANNEL } from '../../../../analytics';
import { DatasourceDisplay, DatasourceSearchMethod } from '../../../../analytics/types';
import { buildDatasourceAdf } from '../../../../common/utils/adf';
import { useUserInteractions } from '../../../../contexts/user-interactions';
import { useDatasourceContext } from '../datasource-context';
import { useViewModeContext } from '../mode-switcher/useViewModeContext';
export const InsertButton = ({
  testId,
  url,
  getAnalyticsPayload,
  children
}) => {
  const {
    datasourceId,
    parameters,
    tableState: {
      status,
      totalCount
    },
    isValidParameters,
    visibleColumnCount,
    visibleColumnKeys,
    columnCustomSizes,
    wrappedColumnKeys,
    onInsert
  } = useDatasourceContext();
  const userInteractions = useUserInteractions();
  const {
    currentViewMode
  } = useViewModeContext();
  const isInsertDisabled = !isValidParameters(parameters) || status === 'rejected' || status === 'unauthorized' || status === 'loading';
  const onInsertPressed = useCallback((e, analyticsEvent) => {
    var _insertButtonClickedE;
    if (!parameters || !isValidParameters(parameters) || !url) {
      return;
    }
    const insertButtonClickedEvent = analyticsEvent.update({
      actionSubjectId: 'insert',
      attributes: {
        totalItemCount: totalCount || 0,
        displayedColumnCount: visibleColumnCount.current,
        display: currentViewMode === 'inline' ? DatasourceDisplay.DATASOURCE_INLINE : DatasourceDisplay.DATASOURCE_TABLE,
        searchMethod: DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
        actions: userInteractions.get(),
        ...getAnalyticsPayload()
      },
      eventType: 'ui'
    });
    const consumerEvent = (_insertButtonClickedE = insertButtonClickedEvent.clone()) !== null && _insertButtonClickedE !== void 0 ? _insertButtonClickedE : undefined;
    insertButtonClickedEvent.fire(EVENT_CHANNEL);
    if (currentViewMode === 'inline') {
      onInsert({
        type: 'inlineCard',
        attrs: {
          url
        }
      }, consumerEvent);
    } else {
      onInsert(buildDatasourceAdf({
        id: datasourceId,
        parameters,
        views: [{
          type: 'table',
          properties: {
            columns: (visibleColumnKeys || []).map(key => {
              const width = columnCustomSizes === null || columnCustomSizes === void 0 ? void 0 : columnCustomSizes[key];
              const isWrapped = wrappedColumnKeys === null || wrappedColumnKeys === void 0 ? void 0 : wrappedColumnKeys.includes(key);
              return {
                key,
                ...(width ? {
                  width
                } : {}),
                ...(isWrapped ? {
                  isWrapped
                } : {})
              };
            })
          }
        }]
      }, url), consumerEvent);
    }
  }, [columnCustomSizes, currentViewMode, datasourceId, getAnalyticsPayload, isValidParameters, onInsert, parameters, totalCount, url, userInteractions, visibleColumnCount, visibleColumnKeys, wrappedColumnKeys]);
  return /*#__PURE__*/React.createElement(Button, {
    appearance: "primary",
    onClick: onInsertPressed,
    isDisabled: isInsertDisabled,
    testId: testId
  }, children);
};