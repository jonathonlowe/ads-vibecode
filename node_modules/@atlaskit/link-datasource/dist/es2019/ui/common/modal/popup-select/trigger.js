/* trigger.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./trigger.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { forwardRef, useCallback } from 'react';
import Badge from '@atlaskit/badge';
import NewButton from '@atlaskit/button/new';
import Button from '@atlaskit/button/standard-button';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import ChevronDownIconOld from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner';
const styles = {
  triggerButtonLabelStyles: "_1reo15vq _18m915vq _1bto1l2s",
  badgeStylesOld: "_18u01b66",
  badgeStyles: "_18u0utpp"
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const LoadingStateAnimationWrapper = /*#__PURE__*/forwardRef(({
  as: C = "div",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_y44vkmg5 _kqswh2mm", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  LoadingStateAnimationWrapper.displayName = 'LoadingStateAnimationWrapper';
}
const PopupTrigger = /*#__PURE__*/forwardRef(({
  isSelected,
  isDisabled,
  isLoading,
  selectedOptions,
  testId,
  label
}, ref) => {
  const [firstOption] = selectedOptions || [];
  const hasOptions = selectedOptions && selectedOptions.length > 0;
  const showButtonLoading = !isDisabled && isLoading;
  const triggerButtonTestId = `${testId}-trigger`;
  const LoadingButton = useCallback(() => /*#__PURE__*/React.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/React.createElement(Button, {
    iconAfter: /*#__PURE__*/React.createElement(Spinner, {
      size: 'xsmall'
    }),
    testId: `${triggerButtonTestId}--loading-button`
  }, label)), [label, triggerButtonTestId]);
  const DefaultButton = useCallback(() => fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(NewButton, {
    isSelected: isSelected || hasOptions,
    isDisabled: isDisabled,
    iconAfter: () => /*#__PURE__*/React.createElement(ChevronDownIcon, {
      label: "",
      color: "currentColor"
    }),
    testId: `${triggerButtonTestId}--button`
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    xcss: styles.triggerButtonLabelStyles
  }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
    xcss: styles.badgeStyles,
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Badge, {
    appearance: "primary"
  }, "+", selectedOptions.length - 1)))) : /*#__PURE__*/React.createElement(Button, {
    appearance: "default",
    isSelected: isSelected || hasOptions,
    isDisabled: isDisabled,
    iconAfter: /*#__PURE__*/React.createElement(ChevronDownIconOld, {
      label: "",
      color: "currentColor"
    }),
    testId: `${triggerButtonTestId}--button`
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
    xcss: styles.triggerButtonLabelStyles
  }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
    xcss: styles.badgeStylesOld,
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Badge, {
    appearance: "primary"
  }, "+", selectedOptions.length - 1)))), [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/React.createElement(Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/React.createElement(LoadingButton, null) : /*#__PURE__*/React.createElement(DefaultButton, null));
});
export default PopupTrigger;