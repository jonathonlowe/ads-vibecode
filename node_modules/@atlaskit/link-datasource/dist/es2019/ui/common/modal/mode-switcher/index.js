/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { N0, N20, N30A, N60, N700 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { DatasourceAction } from '../../../../analytics/types';
import { useUserInteractions } from '../../../../contexts/user-interactions';
import { DisplayViewDropDown } from '../display-view-dropdown/display-view-drop-down';
import { useViewModeContext } from './useViewModeContext';
const modeSwitcherStylesOld = null;
const modeSwitcherStyles = null;
const compactModeSwitcherStyles = null;
const modeInputStyles = null;
const modeSwitcherLabelStylesOld = null;
const modeSwitcherLabelStyles = null;
const modeSwitcherLabelSelectedStylesOld = null;
const modeSwitcherLabelSelectedStyles = null;
const modeSwitcherLabelDisabledStyles = null;
const modeSwitcherDisabledStyles = null;
const compactModeSwitcherLabelStyles = null;
export const ModeSwitcher = props => {
  var _options$;
  const {
    isCompact,
    isDisabled,
    onOptionValueChange,
    options,
    selectedOptionValue = (_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.value
  } = props;
  const handleModeChange = event => {
    onOptionValueChange(event.currentTarget.value);
  };
  return options.length > 0 ? /*#__PURE__*/React.createElement("fieldset", {
    "data-testid": "mode-toggle-container",
    disabled: isDisabled,
    className: ax([fg('platform-linking-visual-refresh-sllv') ? "_2rko1b66 _1h6dmuej _189ee4h9 _1dqonqa1 _4cvr1h6o _vchhusvi _1e0c116y _u5f31b66 _19bv1b66 _18u0v47k _4t3izwfg _1j55105o" : "_2rko1b66 _zulp1b66 _4cvr1h6o _bfhk1s4m _vchhusvi _1e0c116y _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66 _18u0v47k _1j55105o", isCompact && "_zulpv77o _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66"])
  }, options.map(({
    value,
    label,
    disabled: isOptionDisabled,
    tooltipText
  }) => {
    const isSelected = value === selectedOptionValue;
    return /*#__PURE__*/React.createElement(Tooltip, {
      key: value,
      content: tooltipText
    }, tooltipProps => fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement("label", _extends({}, tooltipProps, {
      key: value,
      "data-testid": `mode-toggle-${value}`,
      className: ax(["_11c82smr _2rko1b66 _1h6d1j28 _189ee4h9 _1dqonqa1 _syaz1be1 _vchhusvi _k48p1wq8 _u5f3utpp _19bvutpp _1tke1tcg _1e0c1txw _4cvr1h6o _1bah1h6o _d0altlke _irr3g4tq", isCompact && "_ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", isSelected && "_2rko1b66 _1h6d1yqz _bfhkfg4m _syazaqb7 _d0altlke _irr3fg4m", isDisabled && "_irr31j28 _d0al13gf", isOptionDisabled && "_syaz8q0r", isOptionDisabled && "_irr31j28 _d0al13gf"])
    }), label, /*#__PURE__*/React.createElement("input", {
      "aria-checked": isSelected,
      "aria-disabled": isOptionDisabled,
      checked: isSelected,
      disabled: isOptionDisabled,
      onChange: handleModeChange,
      type: "radio",
      value: value,
      className: ax(["_1e0cglyw"])
    })) : /*#__PURE__*/React.createElement("label", _extends({}, tooltipProps, {
      key: value,
      "data-testid": `mode-toggle-${value}`,
      className: ax(["_11c8dcr7 _2rko1b66 _syaz1be1 _k48p1pd9 _1p1dangw _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66 _d0altlke _irr3g4tq", isCompact && "_ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", isSelected && "_2rko1b66 _bfhkr01l _16qs1jze _d0altlke _irr3r01l", isDisabled && "_irr31j28 _d0al13gf", isOptionDisabled && "_syaz8q0r", isOptionDisabled && "_irr31j28 _d0al13gf"])
    }), label, /*#__PURE__*/React.createElement("input", {
      "aria-checked": isSelected,
      "aria-disabled": isOptionDisabled,
      checked: isSelected,
      disabled: isOptionDisabled,
      onChange: handleModeChange,
      type: "radio",
      value: value,
      className: ax(["_1e0cglyw"])
    })));
  })) : null;
};
export const DatasourceViewModeDropDown = () => {
  const userInteractions = useUserInteractions();
  const {
    currentViewMode,
    setCurrentViewMode,
    disableDisplayDropdown
  } = useViewModeContext();
  if (disableDisplayDropdown) {
    return null;
  }
  const handleViewModeChange = selectedMode => {
    userInteractions.add(DatasourceAction.DISPLAY_VIEW_CHANGED);
    setCurrentViewMode(selectedMode);
  };
  return /*#__PURE__*/React.createElement(DisplayViewDropDown, {
    onViewModeChange: handleViewModeChange,
    viewMode: currentViewMode
  });
};