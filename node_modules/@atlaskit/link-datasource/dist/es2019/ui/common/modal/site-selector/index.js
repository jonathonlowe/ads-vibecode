/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useMemo } from 'react';
import { useIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import Heading from '@atlaskit/heading';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Select, { PopupSelect } from '@atlaskit/select';
import { siteSelectorMessages } from './messages';
const styles = {
  dropdownContainerStyles: "_zulpu2gc _1e0c1txw _4cvr1h6o _1tke1ylp"
};
export const SiteSelector = props => {
  const {
    availableSites,
    onSiteSelection,
    selectedSite,
    label,
    testId
  } = props;
  const {
    formatMessage
  } = useIntl();
  const onChange = newValue => {
    const selectedSite = availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(site => site.cloudId === (newValue === null || newValue === void 0 ? void 0 : newValue.value));
    if (selectedSite) {
      onSiteSelection(selectedSite);
    }
  };
  const availableSitesOptions = useMemo(() => availableSites === null || availableSites === void 0 ? void 0 : availableSites.map(site => ({
    label: site.displayName,
    value: site.cloudId
  })), [availableSites]);
  const selectedSiteOption = selectedSite && {
    label: selectedSite.displayName,
    value: selectedSite.cloudId
  };
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.dropdownContainerStyles
  }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(Heading, {
    size: "medium",
    as: "h1"
  }, formatMessage(label)) : formatMessage(label), availableSites && availableSites.length > 1 && /*#__PURE__*/React.createElement("span", {
    "data-testid": `${testId}--trigger`
  }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(PopupSelect, {
    searchThreshold: 10,
    maxMenuWidth: 300,
    minMenuWidth: 300,
    isLoading: !availableSites,
    testId: testId,
    onChange: onChange,
    value: selectedSiteOption,
    label: formatMessage(siteSelectorMessages.chooseSite),
    options: availableSitesOptions,
    placeholder: formatMessage(siteSelectorMessages.chooseSite),
    target: ({
      isOpen,
      ...triggerProps
    }) => /*#__PURE__*/React.createElement(Button, _extends({}, triggerProps, {
      isSelected: isOpen,
      iconAfter: () => /*#__PURE__*/React.createElement(ChevronDownIcon, {
        label: "",
        color: "currentColor"
      }),
      testId: `${testId}__control`
    }), (selectedSiteOption === null || selectedSiteOption === void 0 ? void 0 : selectedSiteOption.label) || formatMessage(siteSelectorMessages.chooseSite))
  }) : /*#__PURE__*/React.createElement(Select, {
    classNamePrefix: testId,
    isLoading: !availableSites,
    onChange: onChange,
    options: availableSitesOptions,
    placeholder: formatMessage(siteSelectorMessages.chooseSiteOld)
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides
    ,
    styles: {
      container: css => ({
        ...css,
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        zIndex: 11
      }),
      // prevents the popup menu with available sites from being too narrow
      // if the selected site is much shorter than the other options
      menu: ({
        width,
        ...css
      }) => ({
        ...css,
        minWidth: '100%',
        width: 'max-content',
        // font-weight has to be overridden here so that it gets applied after the font styles in teh css element above
        fontWeight: "var(--ds-font-weight-medium, 500)"
      }),
      valueContainer: ({
        width,
        ...css
      }) => ({
        ...css,
        // font-weight has to be overridden here so that it gets applied after the font styles in teh css element above
        fontWeight: "var(--ds-font-weight-medium, 500)"
      })
    },
    testId: testId,
    value: selectedSiteOption,
    label: formatMessage(siteSelectorMessages.chooseSiteOld)
  })));
};