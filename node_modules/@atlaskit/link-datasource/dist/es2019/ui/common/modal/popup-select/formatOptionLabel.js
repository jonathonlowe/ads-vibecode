/* formatOptionLabel.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./formatOptionLabel.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import Avatar from '@atlaskit/avatar';
import { cx } from '@atlaskit/css';
import PeopleGroupIcon from '@atlaskit/icon/core/migration/people-group';
import Lozenge from '@atlaskit/lozenge';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex } from '@atlaskit/primitives/compiled';
const styles = {
  commonLabelStyles: "_1reo15vq _18m915vq _1bto1l2s",
  avatarOptionLabelStyles: "_18u01b66",
  groupWrapperStyles: "_1bsbgktf _1ul9gktf _4t3igktf"
};
const IconOptionLabel = ({
  data
}) => {
  const {
    label,
    icon: avatar,
    value
  } = data;
  const avatarOptionLabelData = {
    label,
    avatar,
    value,
    optionType: 'avatarLabel',
    isSquare: true
  };
  return /*#__PURE__*/React.createElement(AvatarOptionLabel, {
    data: avatarOptionLabelData,
    testId: "basic-filter-popup-select-option--icon-label"
  });
};
const LozengeOptionLabel = ({
  data
}) => {
  return /*#__PURE__*/React.createElement(Lozenge, {
    appearance: data.appearance,
    isBold: fg('platform-component-visual-refresh') ? true : false,
    testId: "basic-filter-popup-select-option--lozenge"
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: styles.commonLabelStyles
  }, data.label));
};
const AvatarOptionLabel = ({
  data,
  testId
}) => {
  return /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    testId: testId || 'basic-filter-popup-select-option--avatar'
  }, data.isGroup ? /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    justifyContent: "center",
    xcss: styles.groupWrapperStyles
  }, /*#__PURE__*/React.createElement(PeopleGroupIcon, {
    color: "currentColor",
    LEGACY_size: "small",
    label: ""
  })) : /*#__PURE__*/React.createElement(Avatar, {
    appearance: data.isSquare ? 'square' : 'circle',
    src: data.avatar,
    size: "xsmall"
  }), /*#__PURE__*/React.createElement(Box, {
    xcss: cx(styles.commonLabelStyles, styles.avatarOptionLabelStyles)
  }, data.label));
};
const formatOptionLabel = data => {
  if (data.optionType === 'lozengeLabel') {
    return /*#__PURE__*/React.createElement(LozengeOptionLabel, {
      data: data
    });
  }
  if (data.optionType === 'avatarLabel') {
    return /*#__PURE__*/React.createElement(AvatarOptionLabel, {
      data: data
    });
  }
  if (data.optionType === 'iconLabel') {
    return /*#__PURE__*/React.createElement(IconOptionLabel, {
      data: data
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null);
};
export default formatOptionLabel;