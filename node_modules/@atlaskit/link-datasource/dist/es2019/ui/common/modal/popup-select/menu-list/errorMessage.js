import React, { useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import { fg } from '@atlaskit/platform-feature-flags';
import { N500 } from '@atlaskit/theme/colors';
import { useDatasourceAnalyticsEvents } from '../../../../../analytics';
import { SpotError } from '../../../../../common/ui/spot/error-state/error';
import { SpotErrorOld } from '../../../../../common/ui/spot/error-state/error-old';
import { SEARCH_DEBOUNCE_MS } from '../constants';
import { asyncPopupSelectMessages } from './messages';
import CustomSelectMessage from './selectMessage';
const getErrorReasonType = errors => {
  const [error] = errors || [];
  if (error instanceof Error) {
    return 'network';
  }
  if (errors && errors.length > 0) {
    return 'agg';
  }
  return 'unknown';
};
const noop = () => '';
const CustomErrorMessage = ({
  filterName,
  errors
}) => {
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();

  /**
   * Debounce is required because our search is debounced
   * ref: ./noOptionsMessage.tsx
   */
  const [debouncedAnalyticsCallback] = useDebouncedCallback(() => {
    fireEvent('ui.error.shown.basicSearchDropdown', {
      filterName,
      reason: getErrorReasonType(errors)
    });
  }, SEARCH_DEBOUNCE_MS);
  useEffect(debouncedAnalyticsCallback, [debouncedAnalyticsCallback]);
  const {
    formatMessage
  } = fg('bandicoots-update-sllv-icons') ?
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useIntl() : {
    formatMessage: noop
  };
  return /*#__PURE__*/React.createElement(CustomSelectMessage, {
    icon: fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(SpotError, {
      size: "large",
      alt: formatMessage(asyncPopupSelectMessages.errorMessage)
    }) : fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(SpotErrorOld, {
      size: 'medium',
      alt: formatMessage(asyncPopupSelectMessages.errorMessageOld)
    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ErrorIcon, {
      primaryColor: `var(--ds-icon, ${N500})`,
      label: "",
      size: "xlarge"
    })),
    message: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.errorMessage : asyncPopupSelectMessages.errorMessageOld,
    description: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.errorDescription : undefined,
    testId: `${filterName}--error-message`
  });
};
export default CustomErrorMessage;