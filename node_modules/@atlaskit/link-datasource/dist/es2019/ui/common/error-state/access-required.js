/* access-required.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./access-required.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import EmptyState from '@atlaskit/empty-state';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { N400 } from '@atlaskit/theme/colors';
import { fontFallback } from '@atlaskit/theme/typography';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { SpotPadlockKey } from '../../../common/ui/spot/basics/padlock-key';
import { AccessRequiredSVGOld } from './access-required-svg';
import { loadingErrorMessages } from './messages';
const styles = {
  iconContainerStyles: "_otyrpxbi",
  descriptionMessageStyles: "_zulppxbi _1e0c1txw _2lx21bp4",
  urlStylesOld: "_11c82smr _syaznoz8",
  urlStyles: "_11c8lodh _syaz1fxt _19pkmgjw"
};
const Description = ({
  message,
  url
}) => {
  return /*#__PURE__*/React.createElement("div", {
    className: ax([styles.descriptionMessageStyles])
  }, /*#__PURE__*/React.createElement("span", {
    className: ax([fg('platform-linking-visual-refresh-sllv') ? styles.urlStyles : styles.urlStylesOld])
  }, url), /*#__PURE__*/React.createElement("span", null, message));
};
const noop = () => '';
const IconContainer = () => {
  const {
    formatMessage
  } = fg('bandicoots-update-sllv-icons') ?
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useIntl() : {
    formatMessage: noop
  };
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.iconContainerStyles
  }, fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(SpotPadlockKey, {
    size: 'xlarge',
    alt: formatMessage(loadingErrorMessages.accessRequired)
  }) : /*#__PURE__*/React.createElement(AccessRequiredSVGOld, null));
};
export const AccessRequired = ({
  url
}) => {
  const {
    formatMessage
  } = useIntl();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  useEffect(() => {
    fireEvent('ui.error.shown', {
      reason: 'access'
    });
  }, [fireEvent]);
  if (url) {
    return /*#__PURE__*/React.createElement(EmptyState, {
      testId: "datasource--access-required-with-url",
      header: formatMessage(fg('platform-linking-visual-refresh-sllv') ? loadingErrorMessages.accessRequiredWithSite : loadingErrorMessages.accessRequiredWithSiteOld),
      headingLevel: fg('platform-linking-visual-refresh-sllv') ? 2 : undefined,
      description: /*#__PURE__*/React.createElement(Description, {
        message: formatMessage(loadingErrorMessages.accessInstructions),
        url: url
      }),
      renderImage: IconContainer
    });
  }
  return /*#__PURE__*/React.createElement(EmptyState, {
    testId: "datasource--access-required",
    header: formatMessage(loadingErrorMessages.accessRequired),
    description: formatMessage(loadingErrorMessages.accessInstructions),
    renderImage: IconContainer
  });
};