import { useCallback, useMemo } from 'react';
import { request } from '@atlaskit/linking-common';
import { fieldValuesQuery, hydrateJQLQuery, userHydration, userQuery } from './utils';
const AGG_BASE_URL = '/gateway/api/graphql';
export const useBasicFilterAGG = () => {
  const requestCall = useCallback(async (body, headers) => request('post', AGG_BASE_URL, body, headers, [200, 201, 202, 203, 204]), []);
  const getHydratedJQL = useCallback((cloudId, jql) => requestCall({
    variables: {
      cloudId,
      jql
    },
    operationName: 'hydrate',
    query: hydrateJQLQuery
  }, {
    'X-ExperimentalApi': 'JiraJqlBuilder'
  }), [requestCall]);
  const getFieldValues = useCallback(({
    cloudId,
    jql = '',
    jqlTerm,
    searchString = '',
    pageCursor
  }) => requestCall({
    variables: {
      cloudId,
      jql,
      first: 10,
      jqlTerm,
      searchString,
      after: pageCursor
    },
    operationName: 'fieldValues',
    query: fieldValuesQuery
  }, {
    'X-ExperimentalApi': 'JiraJqlBuilder'
  }), [requestCall]);
  const getCurrentUserInfo = useCallback(() => requestCall({
    operationName: 'userQuery',
    query: userQuery
  }), [requestCall]);
  const getUsersFromAccountIDs = useCallback(accountIds => requestCall({
    variables: {
      accountIds
    },
    operationName: 'userHydration',
    query: userHydration
  }), [requestCall]);
  return useMemo(() => ({
    getHydratedJQL,
    getFieldValues,
    getCurrentUserInfo,
    getUsersFromAccountIDs
  }), [getHydratedJQL, getFieldValues, getCurrentUserInfo, getUsersFromAccountIDs]);
};