import React, { useContext, useMemo, useRef } from 'react';
const UserInteractionsContext = /*#__PURE__*/React.createContext(undefined);
const UserInteractionsProvider = ({
  children
}) => {
  const userInteractionActions = useRef(new Set());
  const providerValue = useMemo(() => {
    return {
      add: action => {
        userInteractionActions.current.add(action);
      },
      get: () => Array.from(userInteractionActions.current)
    };
  }, []);
  return /*#__PURE__*/React.createElement(UserInteractionsContext.Provider, {
    value: providerValue
  }, children);
};

/**
 * Use this hook to track user activities. This is mainly used to populate analytic events with
 * a trail of user activities.
 *
 * @returns an object that can track datasource actions and retrieve the actions that have been tracked.
 */
const useUserInteractions = () => {
  const context = useContext(UserInteractionsContext);
  if (!context) {
    throw new Error('useUserInteractions() must be wrapped in <UserInteractionsProvider>');
  }
  return context;
};
export { UserInteractionsProvider, useUserInteractions };