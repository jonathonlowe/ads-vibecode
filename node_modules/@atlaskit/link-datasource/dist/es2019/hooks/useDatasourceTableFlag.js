import React, { useCallback } from 'react';
import { FormattedMessage } from 'react-intl-next';
import uuid from 'uuid';
import { useFlags } from '@atlaskit/flag';
import CrossCircleIcon from '@atlaskit/icon/core/migration/cross-circle';
import { useDatasourceAnalyticsEvents } from '../analytics';
import { issueLikeTableMessages } from '../ui/issue-like-table/messages';
const getErrorReason = status => {
  switch (status) {
    case 403:
      return 'access_denied';
    default:
      return 'request_failed';
  }
};
const getExecuteActionErrorMessage = status => {
  switch (status) {
    case 403:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateError403Title),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateError403Description)
      };
    default:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateErrorGenericTitle),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateErrorGenericDescription)
      };
  }
};
const getFetchActionErrorMessage = status => {
  switch (status) {
    default:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.fetchActionErrorGenericTitle),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.fetchActionErrorGenericDescription)
      };
  }
};
export const useDatasourceTableFlag = options => {
  const {
    showFlag
  } = useFlags();
  const {
    fireEvent
  } = useDatasourceAnalyticsEvents();
  const showErrorFlag = useCallback(args => {
    showFlag({
      icon: /*#__PURE__*/React.createElement(CrossCircleIcon, {
        spacing: "spacious",
        label: "Error",
        color: "var(--ds-icon-danger, #C9372C)"
      }),
      id: uuid(),
      isAutoDismiss: true,
      ...(options !== null && options !== void 0 && options.isFetchAction ? getFetchActionErrorMessage(args === null || args === void 0 ? void 0 : args.status) : getExecuteActionErrorMessage(args === null || args === void 0 ? void 0 : args.status)),
      ...args
    });
    fireEvent('ui.error.shown.inlineEdit', {
      reason: getErrorReason(args === null || args === void 0 ? void 0 : args.status)
    });
  }, [fireEvent, options === null || options === void 0 ? void 0 : options.isFetchAction, showFlag]);
  return {
    showErrorFlag
  };
};