import { useEffect, useReducer } from 'react';
import { ActionOperationStatus } from '@atlaskit/linking-types';
import { useDatasourceTableFlag } from './useDatasourceTableFlag';
const loadOptions = async (fetchInputs = {}, executeFetch) => {
  if (!executeFetch) {
    return [];
  }
  const result = await executeFetch(fetchInputs);
  const {
    operationStatus,
    entities
  } = result;
  if (operationStatus === ActionOperationStatus.FAILURE) {
    throw new Error('Failed to fetch status options');
  }
  return entities !== null && entities !== void 0 ? entities : [];
};
const reducer = (state, payload) => {
  return {
    ...state,
    ...payload
  };
};
export const useLoadOptions = ({
  fetchInputs,
  executeFetch,
  emptyOption
}) => {
  const [{
    options,
    isLoading,
    hasFailed
  }, dispatch] = useReducer(reducer, {
    isLoading: true,
    options: [],
    hasFailed: false
  });
  const {
    showErrorFlag
  } = useDatasourceTableFlag({
    isFetchAction: true
  });
  useEffect(() => {
    let isMounted = true;
    // Set the loading state before sending the request
    dispatch({
      isLoading: true
    });
    // Query the options
    loadOptions(fetchInputs, executeFetch).then(options => {
      if (isMounted) {
        dispatch({
          isLoading: false,
          options: emptyOption ? [emptyOption, ...options] : options,
          hasFailed: false
        });
      }
    }).catch(err => {
      showErrorFlag();
      dispatch({
        isLoading: false,
        options: [],
        hasFailed: true
      });
    });
    return () => {
      isMounted = false;
    };
  }, [fetchInputs, executeFetch, showErrorFlag, emptyOption]);
  return {
    options,
    isLoading,
    hasFailed
  };
};