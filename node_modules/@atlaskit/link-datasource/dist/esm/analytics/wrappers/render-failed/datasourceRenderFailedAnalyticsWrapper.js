import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useEffect } from 'react';
import { withAnalyticsContext } from '@atlaskit/analytics-next';
import { logToSentry } from '../../../hooks/useErrorLogger';
import { componentMetadata } from '../../constants';
import { useDatasourceAnalyticsEvents } from '../../index';
var DatasourceRenderFailedAnalyticsWrapper = withAnalyticsContext(componentMetadata.generic)(function (props) {
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  useEffect(function () {
    fireEvent('operational.datasource.renderFailure', {
      reason: 'internal'
    });
  }, [fireEvent]);
  useEffect(function () {
    logToSentry(props.error, 'link-datasource', _objectSpread(_objectSpread({}, props.datasourceId && {
      datasourceId: props.datasourceId
    }), props.datasourceModalType && {
      datasourceModalType: props.datasourceModalType
    }));
  }, [props.error, props.datasourceId, props.datasourceModalType]);
  return props.children;
});
export default DatasourceRenderFailedAnalyticsWrapper;