import React, { useContext, useMemo, useRef } from 'react';
var UserInteractionsContext = /*#__PURE__*/React.createContext(undefined);
var UserInteractionsProvider = function UserInteractionsProvider(_ref) {
  var children = _ref.children;
  var userInteractionActions = useRef(new Set());
  var providerValue = useMemo(function () {
    return {
      add: function add(action) {
        userInteractionActions.current.add(action);
      },
      get: function get() {
        return Array.from(userInteractionActions.current);
      }
    };
  }, []);
  return /*#__PURE__*/React.createElement(UserInteractionsContext.Provider, {
    value: providerValue
  }, children);
};

/**
 * Use this hook to track user activities. This is mainly used to populate analytic events with
 * a trail of user activities.
 *
 * @returns an object that can track datasource actions and retrieve the actions that have been tracked.
 */
var useUserInteractions = function useUserInteractions() {
  var context = useContext(UserInteractionsContext);
  if (!context) {
    throw new Error('useUserInteractions() must be wrapped in <UserInteractionsProvider>');
  }
  return context;
};
export { UserInteractionsProvider, useUserInteractions };