import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { createActionsHook, createContainer, createStateHook, createStore } from 'react-sweet-state';
import { v4 as uuidv4 } from 'uuid';
var getInitialState = function getInitialState() {
  return {
    items: {}
  };
};
export var actions = {
  onUpdateItem: function onUpdateItem(id, data) {
    return function (_ref) {
      var setState = _ref.setState,
        getState = _ref.getState;
      var oldItems = _objectSpread({}, getState().items);
      var oldItem = oldItems[id];
      if (!oldItem) {
        return;
      }
      setState({
        items: _objectSpread(_objectSpread({}, oldItems), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, oldItem), {}, {
          data: _objectSpread(_objectSpread({}, data), {}, {
            ari: oldItem.data.ari
          })
        })))
      });
    };
  },
  onAddItems: function onAddItems(items, integrationKey, entityType) {
    return function (_ref2) {
      var setState = _ref2.setState,
        getState = _ref2.getState;
      var oldItems = _objectSpread({}, getState().items);
      var _items$reduce = items.reduce(function (_ref3, item) {
          var _item$ari, _oldItems$id;
          var _ref4 = _slicedToArray(_ref3, 2),
            ids = _ref4[0],
            itemMap = _ref4[1];
          var ari = typeof ((_item$ari = item['ari']) === null || _item$ari === void 0 ? void 0 : _item$ari.data) === 'string' ? item['ari'].data : undefined;
          var id = ari !== null && ari !== void 0 ? ari : uuidv4();
          return [[].concat(_toConsumableArray(ids), [id]), _objectSpread(_objectSpread({}, itemMap), {}, _defineProperty({}, id, {
            ari: ari,
            entityType: entityType,
            integrationKey: integrationKey,
            data: _objectSpread(_objectSpread({}, (_oldItems$id = oldItems[id]) === null || _oldItems$id === void 0 ? void 0 : _oldItems$id.data), item)
          }))];
        }, [[], oldItems]),
        _items$reduce2 = _slicedToArray(_items$reduce, 2),
        newItemIds = _items$reduce2[0],
        newItems = _items$reduce2[1];
      setState({
        items: newItems
      });
      return newItemIds;
    };
  }
};
export var Store = createStore({
  name: 'datasource-store',
  initialState: getInitialState(),
  actions: actions
});
export var useDatasourceItem = createStateHook(Store, {
  selector: function selector(state, _ref5) {
    var id = _ref5.id;
    return state.items[id];
  }
});
export var useDatasourceActions = createActionsHook(Store);
var Container = createContainer(Store);
export var StoreContainer = function StoreContainer(_ref6) {
  var children = _ref6.children;
  return /*#__PURE__*/React.createElement(Container, {
    scope: "datasource"
  }, children);
};