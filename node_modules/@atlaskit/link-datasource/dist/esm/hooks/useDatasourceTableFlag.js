import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback } from 'react';
import { FormattedMessage } from 'react-intl-next';
import uuid from 'uuid';
import { useFlags } from '@atlaskit/flag';
import CrossCircleIcon from '@atlaskit/icon/core/migration/cross-circle';
import { useDatasourceAnalyticsEvents } from '../analytics';
import { issueLikeTableMessages } from '../ui/issue-like-table/messages';
var getErrorReason = function getErrorReason(status) {
  switch (status) {
    case 403:
      return 'access_denied';
    default:
      return 'request_failed';
  }
};
var getExecuteActionErrorMessage = function getExecuteActionErrorMessage(status) {
  switch (status) {
    case 403:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateError403Title),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateError403Description)
      };
    default:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateErrorGenericTitle),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.updateErrorGenericDescription)
      };
  }
};
var getFetchActionErrorMessage = function getFetchActionErrorMessage(status) {
  switch (status) {
    default:
      return {
        title: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.fetchActionErrorGenericTitle),
        description: /*#__PURE__*/React.createElement(FormattedMessage, issueLikeTableMessages.fetchActionErrorGenericDescription)
      };
  }
};
export var useDatasourceTableFlag = function useDatasourceTableFlag(options) {
  var _useFlags = useFlags(),
    showFlag = _useFlags.showFlag;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var showErrorFlag = useCallback(function (args) {
    showFlag(_objectSpread(_objectSpread({
      icon: /*#__PURE__*/React.createElement(CrossCircleIcon, {
        spacing: "spacious",
        label: "Error",
        color: "var(--ds-icon-danger, #C9372C)"
      }),
      id: uuid(),
      isAutoDismiss: true
    }, options !== null && options !== void 0 && options.isFetchAction ? getFetchActionErrorMessage(args === null || args === void 0 ? void 0 : args.status) : getExecuteActionErrorMessage(args === null || args === void 0 ? void 0 : args.status)), args));
    fireEvent('ui.error.shown.inlineEdit', {
      reason: getErrorReason(args === null || args === void 0 ? void 0 : args.status)
    });
  }, [fireEvent, options === null || options === void 0 ? void 0 : options.isFetchAction, showFlag]);
  return {
    showErrorFlag: showErrorFlag
  };
};