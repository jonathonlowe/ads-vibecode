import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect, useState } from 'react';
import { useDatasourceAnalyticsEvents } from '../analytics';
import { fetchObjectSchema, fetchObjectSchemas, getWorkspaceId } from '../services/cmdbService';
var handleAssetsClientErrors = function handleAssetsClientErrors(errorSetter, error) {
  if (error instanceof Error) {
    errorSetter(error);
  } else {
    errorSetter(new Error('Unexpected error occured'));
  }
};
export var useAssetsClient = function useAssetsClient(initialParameters) {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    workspaceId = _useState4[0],
    setWorkspaceId = _useState4[1];
  var _useState5 = useState(),
    _useState6 = _slicedToArray(_useState5, 2),
    workspaceError = _useState6[0],
    setWorkspaceError = _useState6[1];
  var _useState7 = useState(),
    _useState8 = _slicedToArray(_useState7, 2),
    existingObjectSchema = _useState8[0],
    setExistingObjectSchema = _useState8[1];
  var _useState9 = useState(),
    _useState10 = _slicedToArray(_useState9, 2),
    existingObjectSchemaError = _useState10[0],
    setExistingObjectSchemaError = _useState10[1];
  var _useState11 = useState(),
    _useState12 = _slicedToArray(_useState11, 2),
    objectSchemas = _useState12[0],
    setObjectSchemas = _useState12[1];
  var _useState13 = useState(),
    _useState14 = _slicedToArray(_useState13, 2),
    totalObjectSchemas = _useState14[0],
    setTotalObjectSchemas = _useState14[1];
  var _useState15 = useState(),
    _useState16 = _slicedToArray(_useState15, 2),
    objectSchemasError = _useState16[0],
    setObjectSchemasError = _useState16[1];
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;

  /*
   * We wrap this in nested try/catch blocks because we want to handle
   * workspaceError/existingObjectSchemaError/objectSchemasError differently
   * if we need to implement more initial data fetching/errors we should look at a store
   */
  useEffect(function () {
    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _workspaceId, fetchedObjectSchema, fetchedObjectSchemasResponse;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setLoading(true);
            setWorkspaceError(undefined);
            _context.prev = 2;
            _context.next = 5;
            return getWorkspaceId(fireEvent);
          case 5:
            _workspaceId = _context.sent;
            setWorkspaceId(_workspaceId);
            // Check schema from initial parameters still exists and fetch name/permissions for schema select
            if (!(initialParameters !== null && initialParameters !== void 0 && initialParameters.schemaId)) {
              _context.next = 18;
              break;
            }
            _context.prev = 8;
            _context.next = 11;
            return fetchObjectSchema(_workspaceId, initialParameters === null || initialParameters === void 0 ? void 0 : initialParameters.schemaId, fireEvent);
          case 11:
            fetchedObjectSchema = _context.sent;
            setExistingObjectSchema(fetchedObjectSchema);
            _context.next = 18;
            break;
          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](8);
            handleAssetsClientErrors(setExistingObjectSchemaError, _context.t0);
          case 18:
            _context.prev = 18;
            _context.next = 21;
            return fetchObjectSchemas(_workspaceId, undefined, fireEvent);
          case 21:
            fetchedObjectSchemasResponse = _context.sent;
            setObjectSchemas(fetchedObjectSchemasResponse.values);
            setTotalObjectSchemas(fetchedObjectSchemasResponse.total);
            _context.next = 29;
            break;
          case 26:
            _context.prev = 26;
            _context.t1 = _context["catch"](18);
            handleAssetsClientErrors(setObjectSchemasError, _context.t1);
          case 29:
            _context.next = 34;
            break;
          case 31:
            _context.prev = 31;
            _context.t2 = _context["catch"](2);
            handleAssetsClientErrors(setWorkspaceError, _context.t2);
          case 34:
            _context.prev = 34;
            setLoading(false);
            return _context.finish(34);
          case 37:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[2, 31, 34, 37], [8, 15], [18, 26]]);
    }))();
  }, [initialParameters, fireEvent]);
  return {
    workspaceId: workspaceId,
    workspaceError: workspaceError,
    existingObjectSchema: existingObjectSchema,
    existingObjectSchemaError: existingObjectSchemaError,
    objectSchemas: objectSchemas,
    totalObjectSchemas: totalObjectSchemas,
    objectSchemasError: objectSchemasError,
    assetsClientLoading: loading
  };
};