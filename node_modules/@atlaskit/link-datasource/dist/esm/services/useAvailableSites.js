import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect, useMemo, useState } from 'react';
import { getAvailableSites } from './getAvailableSites';
export var useAvailableSites = function useAvailableSites(product, cloudId) {
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    availableSites = _useState2[0],
    setAvailableSites = _useState2[1];
  useEffect(function () {
    var fetchSiteDisplayNames = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var sites, sortedAvailableSites;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getAvailableSites(product);
            case 2:
              sites = _context.sent;
              sortedAvailableSites = _toConsumableArray(sites).sort(function (a, b) {
                return a.displayName.localeCompare(b.displayName);
              });
              setAvailableSites(sortedAvailableSites);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function fetchSiteDisplayNames() {
        return _ref.apply(this, arguments);
      };
    }();
    void fetchSiteDisplayNames();
  }, [product]);
  var selectedSite = useMemo(function () {
    if (cloudId) {
      return availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
        return site.cloudId === cloudId;
      });
    }
    var currentlyLoggedInSiteUrl;
    if (typeof window.location !== 'undefined') {
      currentlyLoggedInSiteUrl = window.location.origin;
    }
    return (availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
      return site.url === currentlyLoggedInSiteUrl;
    })) || (availableSites === null || availableSites === void 0 ? void 0 : availableSites[0]);
  }, [availableSites, cloudId]);
  return {
    availableSites: availableSites,
    selectedSite: selectedSite
  };
};