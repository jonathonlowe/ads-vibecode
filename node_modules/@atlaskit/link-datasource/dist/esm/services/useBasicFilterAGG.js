import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useMemo } from 'react';
import { request } from '@atlaskit/linking-common';
import { fieldValuesQuery, hydrateJQLQuery, userHydration, userQuery } from './utils';
var AGG_BASE_URL = '/gateway/api/graphql';
export var useBasicFilterAGG = function useBasicFilterAGG() {
  var requestCall = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, headers) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", request('post', AGG_BASE_URL, body, headers, [200, 201, 202, 203, 204]));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var getHydratedJQL = useCallback(function (cloudId, jql) {
    return requestCall({
      variables: {
        cloudId: cloudId,
        jql: jql
      },
      operationName: 'hydrate',
      query: hydrateJQLQuery
    }, {
      'X-ExperimentalApi': 'JiraJqlBuilder'
    });
  }, [requestCall]);
  var getFieldValues = useCallback(function (_ref2) {
    var cloudId = _ref2.cloudId,
      _ref2$jql = _ref2.jql,
      jql = _ref2$jql === void 0 ? '' : _ref2$jql,
      jqlTerm = _ref2.jqlTerm,
      _ref2$searchString = _ref2.searchString,
      searchString = _ref2$searchString === void 0 ? '' : _ref2$searchString,
      pageCursor = _ref2.pageCursor;
    return requestCall({
      variables: {
        cloudId: cloudId,
        jql: jql,
        first: 10,
        jqlTerm: jqlTerm,
        searchString: searchString,
        after: pageCursor
      },
      operationName: 'fieldValues',
      query: fieldValuesQuery
    }, {
      'X-ExperimentalApi': 'JiraJqlBuilder'
    });
  }, [requestCall]);
  var getCurrentUserInfo = useCallback(function () {
    return requestCall({
      operationName: 'userQuery',
      query: userQuery
    });
  }, [requestCall]);
  var getUsersFromAccountIDs = useCallback(function (accountIds) {
    return requestCall({
      variables: {
        accountIds: accountIds
      },
      operationName: 'userHydration',
      query: userHydration
    });
  }, [requestCall]);
  return useMemo(function () {
    return {
      getHydratedJQL: getHydratedJQL,
      getFieldValues: getFieldValues,
      getCurrentUserInfo: getCurrentUserInfo,
      getUsersFromAccountIDs: getUsersFromAccountIDs
    };
  }, [getHydratedJQL, getFieldValues, getCurrentUserInfo, getUsersFromAccountIDs]);
};