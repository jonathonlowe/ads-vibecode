import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
export var makeGetJqlSuggestionsData = function makeGetJqlSuggestionsData(cloudId) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
      var response;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch("/gateway/api/ex/jira/".concat(cloudId, "/").concat(url), {
              headers: {
                'content-type': 'application/json'
              }
            });
          case 2:
            response = _context.sent;
            if (!response.ok) {
              _context.next = 5;
              break;
            }
            return _context.abrupt("return", response.json());
          case 5:
            _context.t0 = Error;
            _context.next = 8;
            return response.text();
          case 8:
            _context.t1 = _context.sent;
            if (_context.t1) {
              _context.next = 11;
              break;
            }
            _context.t1 = 'Something went wrong';
          case 11:
            _context.t2 = _context.t1;
            throw new _context.t0(_context.t2);
          case 13:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};