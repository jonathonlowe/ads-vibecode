import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
export var getAvailableSites = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(product) {
    var requestConfig, response, res;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          requestConfig = {
            method: 'POST',
            credentials: 'include',
            headers: {
              Accept: 'application/json',
              'Cache-Control': 'no-cache',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              products: product === 'confluence' ? ['confluence.ondemand'] : ['jira-software.ondemand', 'jira-core.ondemand', 'jira-incident-manager.ondemand', 'jira-product-discovery', 'jira-servicedesk.ondemand']
            })
          };
          _context.next = 3;
          return fetch("/gateway/api/available-sites", requestConfig);
        case 3:
          response = _context.sent;
          if (!response.ok) {
            _context.next = 9;
            break;
          }
          _context.next = 7;
          return response.json();
        case 7:
          res = _context.sent;
          return _context.abrupt("return", res.sites);
        case 9:
          _context.t0 = Error;
          _context.next = 12;
          return response.text();
        case 12:
          _context.t1 = _context.sent;
          if (_context.t1) {
            _context.next = 15;
            break;
          }
          _context.t1 = 'Something went wrong';
        case 15:
          _context.t2 = _context.t1;
          throw new _context.t0(_context.t2);
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAvailableSites(_x) {
    return _ref.apply(this, arguments);
  };
}();