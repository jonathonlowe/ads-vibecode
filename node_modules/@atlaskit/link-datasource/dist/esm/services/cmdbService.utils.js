import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
export var mapFetchErrors = function mapFetchErrors(error) {
  if (error instanceof Response && !error.ok) {
    return new FetchError(error.status, "Error server response: ".concat(error.status));
  }
  return error;
};
export var getStatusCodeGroup = function getStatusCodeGroup(error) {
  if (error instanceof FetchError) {
    var statusCode = error.statusCode;
    if (statusCode >= 100 && statusCode < 200) {
      return '1xx';
    }
    if (statusCode >= 300 && statusCode < 400) {
      return '3xx';
    }
    if (statusCode >= 400 && statusCode < 500) {
      return '4xx';
    }
    if (statusCode >= 500 && statusCode < 600) {
      return '5xx';
    }
  }
  return 'unknown';
};
export var PermissionError = /*#__PURE__*/function (_Error) {
  function PermissionError(message) {
    var _this;
    _classCallCheck(this, PermissionError);
    _this = _callSuper(this, PermissionError, [message]);
    _this.name = 'PermissionError';
    return _this;
  }
  _inherits(PermissionError, _Error);
  return _createClass(PermissionError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export var FetchError = /*#__PURE__*/function (_Error2) {
  function FetchError(statusCode, message) {
    var _this2;
    _classCallCheck(this, FetchError);
    _this2 = _callSuper(this, FetchError, [message || "Fetch call failed with status code: ".concat(statusCode)]);
    _this2.name = 'FetchError';
    _this2.statusCode = statusCode;
    return _this2;
  }
  _inherits(FetchError, _Error2);
  return _createClass(FetchError);
}( /*#__PURE__*/_wrapNativeSuper(Error));