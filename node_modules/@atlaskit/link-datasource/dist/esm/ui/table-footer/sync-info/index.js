import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useEffect, useState } from 'react';
import { FormattedDate, FormattedMessage, FormattedRelativeTime } from 'react-intl-next';
import { messages } from './messages';
var SECONDS_IN_MIN = 60;
var SECONDS_IN_HR = SECONDS_IN_MIN * 60;
var SECONDS_IN_DAY = SECONDS_IN_HR * 24;
var WithUpdatedLabel = function WithUpdatedLabel(formattedDate) {
  var i18nMessage = formattedDate ? messages.overOneMinuteText : messages.underOneMinuteText;
  return /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, i18nMessage, {
    values: {
      date: formattedDate
    }
  }));
};
export var SyncInfo = function SyncInfo(_ref) {
  var lastSyncTime = _ref.lastSyncTime;
  var calculateTimeDiff = useCallback(function () {
    return Math.floor((Date.now() - lastSyncTime.getTime()) / 1000);
  }, [lastSyncTime]);
  var _useState = useState(calculateTimeDiff()),
    _useState2 = _slicedToArray(_useState, 2),
    secondsSinceUpdate = _useState2[0],
    setSecondsSinceUpdate = _useState2[1];
  var totalDays = Math.floor(secondsSinceUpdate / SECONDS_IN_DAY);
  var totalHours = Math.floor(secondsSinceUpdate / SECONDS_IN_HR);
  var totalMinutes = Math.floor(secondsSinceUpdate / SECONDS_IN_MIN);
  useEffect(function () {
    setSecondsSinceUpdate(calculateTimeDiff());
    var interval = setInterval(function () {
      return setSecondsSinceUpdate(calculateTimeDiff());
    }, 1000);
    return function () {
      return clearInterval(interval);
    };
  }, [lastSyncTime, calculateTimeDiff]);
  if (totalMinutes >= 1 && totalMinutes < 60) {
    return /*#__PURE__*/React.createElement(FormattedRelativeTime, {
      value: -totalMinutes,
      style: "long",
      unit: "minute"
    }, WithUpdatedLabel);
  }
  if (totalHours >= 1 && totalHours < 24) {
    return /*#__PURE__*/React.createElement(FormattedRelativeTime, {
      value: -totalHours,
      style: "long",
      unit: "hour"
    }, WithUpdatedLabel);
  }
  if (totalDays >= 1 && totalDays < 8) {
    return /*#__PURE__*/React.createElement(FormattedRelativeTime, {
      value: -totalDays,
      style: "long",
      unit: "day"
    }, WithUpdatedLabel);
  }
  if (totalDays >= 8) {
    return /*#__PURE__*/React.createElement(FormattedDate, {
      year: "numeric",
      month: "short",
      day: "2-digit",
      value: lastSyncTime
    }, WithUpdatedLabel);
  }
  return WithUpdatedLabel();
};