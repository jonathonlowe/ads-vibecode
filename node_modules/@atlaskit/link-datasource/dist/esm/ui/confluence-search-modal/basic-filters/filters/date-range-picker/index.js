/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "style"],
  _excluded2 = ["as", "style"],
  _excluded3 = ["as", "style"],
  _excluded4 = ["as", "style"],
  _excluded5 = ["as", "style"];
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { DatePicker } from '@atlaskit/datetime-picker';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import { fg } from '@atlaskit/platform-feature-flags';
import Popup from '@atlaskit/popup';
import { N0, N20, N30, R400 } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import { useDatasourceAnalyticsEvents } from '../../../../../analytics';
import { dateRangeMessages } from './messages';
import { PopupComponent } from './PopupComponent';
import { CustomDropdownItem } from './styled';
import { PopupTrigger } from './trigger';
import { getCurrentOptionLabel, getDropdownLabel, useInvalidDateRange } from './utils';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
var DateRangeErrorMessage = forwardRef(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_zulpv77o _11c8dcr7 _1e0c1txw _19pk57x3 _bozgv77o _syaz1ick _4cvr1h6o", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  DateRangeErrorMessage.displayName = 'DateRangeErrorMessage';
}
var CustomDropdown = forwardRef(function (_ref2, __cmplr) {
  var _ref2$as = _ref2.as,
    C = _ref2$as === void 0 ? "div" : _ref2$as,
    __cmpls = _ref2.style,
    __cmplp = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_2rkoiti9 _1bsb5x59 _bfhk1j9a _16qs1sus _1pby16oo", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  CustomDropdown.displayName = 'CustomDropdown';
}
var SelectDateRangeButton = forwardRef(function (_ref3, __cmplr) {
  var _ref3$as = _ref3.as,
    C = _ref3$as === void 0 ? "button" : _ref3$as,
    __cmpls = _ref3.style,
    __cmplp = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_19itglyw _11c81kw7 _2rkoiti9 _bfhk1y9p _1bsbymf6 _4t3i1ylp _19pkutpp _irr3134c _d0altlke", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  SelectDateRangeButton.displayName = 'SelectDateRangeButton';
}
var CustomDateWrapper = forwardRef(function (_ref4, __cmplr) {
  var _ref4$as = _ref4.as,
    C = _ref4$as === void 0 ? "div" : _ref4$as,
    __cmpls = _ref4.style,
    __cmplp = _objectWithoutProperties(_ref4, _excluded4);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_ca0qutpp _u5f3utpp _n3tdutpp _19bvutpp _vchhusvi", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
if (process.env.NODE_ENV !== 'production') {
  CustomDateWrapper.displayName = 'CustomDateWrapper';
}
var DatePickersWrapper = forwardRef(function (_ref5, __cmplr) {
  var _ref5$as = _ref5.as,
    C = _ref5$as === void 0 ? "div" : _ref5$as,
    __cmpls = _ref5.style,
    __cmplp = _objectWithoutProperties(_ref5, _excluded5);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1txw _1bah1yb4 _4cvr1h6o _1bsb1osq", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  DatePickersWrapper.displayName = 'DatePickersWrapper';
}
var dateRangeValues = ['anyTime', 'today', 'yesterday', 'past7Days', 'past30Days', 'pastYear', 'custom'];
var defaultOptionValue = 'anyTime';
export var DateRangePicker = function DateRangePicker(_ref6) {
  var onSelectionChange = _ref6.onSelectionChange,
    selection = _ref6.selection,
    _ref6$filterName = _ref6.filterName,
    filterName = _ref6$filterName === void 0 ? 'datasource-date-range-picker' : _ref6$filterName;
  var _ref7 = selection || {},
    selectedValue = _ref7.value,
    fromDate = _ref7.from,
    toDate = _ref7.to;
  var todayDate = new Date().toISOString();
  var _useIntl = useIntl(),
    locale = _useIntl.locale,
    formatMessage = _useIntl.formatMessage,
    formatDate = _useIntl.formatDate;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var _useState = useState(selectedValue),
    _useState2 = _slicedToArray(_useState, 2),
    currentOption = _useState2[0],
    setCurrentOption = _useState2[1];
  var _useState3 = useState(fromDate),
    _useState4 = _slicedToArray(_useState3, 2),
    customFromDate = _useState4[0],
    setCustomFromDate = _useState4[1];
  var _useState5 = useState(toDate),
    _useState6 = _slicedToArray(_useState5, 2),
    customToDate = _useState6[0],
    setCustomToDate = _useState6[1];
  var _useState7 = useState(undefined),
    _useState8 = _slicedToArray(_useState7, 2),
    isPickerOpen = _useState8[0],
    setIsPickerOpen = _useState8[1];
  var isCustomSelected = currentOption === 'custom';
  var analyticsPayload = useMemo(function () {
    return {
      filterName: filterName,
      selectionCount: (currentOption !== null && currentOption !== void 0 ? currentOption : defaultOptionValue) === defaultOptionValue ? 0 : 1
    };
  }, [filterName, currentOption]);
  var invalidDateRange = useInvalidDateRange(customFromDate, customToDate);
  var handleClickUpdateDateRange = function handleClickUpdateDateRange() {
    onSelectionChange({
      value: 'custom',
      from: customFromDate,
      to: customToDate
    });
    setIsPickerOpen(false);
  };
  var handleClickFilterOption = useCallback(function (option) {
    if (option === currentOption) {
      setIsPickerOpen(false);
      return;
    }
    setCurrentOption(option);
    onSelectionChange({
      value: option
    });
    if (option !== 'custom') {
      setIsPickerOpen(false);
    }
  }, [onSelectionChange, currentOption]);
  var handlePickerToggle = function handlePickerToggle() {
    if (isPickerOpen) {
      setCustomToDate(toDate);
      setCustomFromDate(fromDate);
      setIsPickerOpen(false);
      return;
    }
    setIsPickerOpen(true);
    fireEvent('ui.dropdown.opened.basicSearchDropdown', analyticsPayload);
  };
  useEffect(function () {
    if (isPickerOpen === false) {
      fireEvent('ui.dropdown.closed.basicSearchDropdown', analyticsPayload);
    }
  }, [analyticsPayload, fireEvent, isPickerOpen]);
  var popupContent = function popupContent() {
    return /*#__PURE__*/React.createElement(CustomDropdown, null, dateRangeValues.map(function (option) {
      return /*#__PURE__*/React.createElement(CustomDropdownItem, {
        key: option
        // want to show Anytime as selected if none of the other options are selected
        ,
        isSelected: selectedValue ? option === selectedValue : option === defaultOptionValue,
        onClick: function onClick() {
          return handleClickFilterOption(option);
        }
      }, getDropdownLabel(option, formatMessage));
    }), isPickerOpen && isCustomSelected && /*#__PURE__*/React.createElement(CustomDateWrapper, null, /*#__PURE__*/React.createElement(DatePickersWrapper, null, /*#__PURE__*/React.createElement(DatePicker, {
      maxDate: todayDate,
      innerProps: {
        style: {
          width: 140
        }
      },
      testId: "date-from-picker",
      dateFormat: "D MMM YYYY",
      onChange: setCustomFromDate,
      defaultValue: fromDate,
      placeholder: formatMessage(dateRangeMessages.dateRangeFrom),
      isInvalid: Boolean(invalidDateRange),
      locale: locale,
      selectProps: {
        styles: {
          placeholder: function placeholder(base) {
            return _objectSpread(_objectSpread({}, base), {}, {
              width: 'max-content'
            });
          }
        }
      }
    }), /*#__PURE__*/React.createElement(FormattedMessage, dateRangeMessages.dateRangeToLabel), /*#__PURE__*/React.createElement(DatePicker, {
      maxDate: todayDate,
      innerProps: {
        style: {
          width: 140
        }
      },
      testId: "date-to-picker",
      dateFormat: "D MMM YYYY",
      onChange: setCustomToDate,
      defaultValue: toDate,
      placeholder: formatMessage(dateRangeMessages.dateRangeTo),
      isInvalid: Boolean(invalidDateRange),
      locale: locale,
      selectProps: {
        styles: {
          placeholder: function placeholder(base) {
            return _objectSpread(_objectSpread({}, base), {}, {
              width: 'max-content'
            });
          }
        }
      }
    })), invalidDateRange && /*#__PURE__*/React.createElement(DateRangeErrorMessage, null, /*#__PURE__*/React.createElement(ErrorIcon, {
      LEGACY_size: "small",
      color: "var(--ds-icon-danger, ".concat(R400, ")"),
      label: fg('bandicoots-update-sllv-icons') ? formatMessage(dateRangeMessages.dateRangeError) : 'Date range error',
      LEGACY_margin: "0 ".concat("var(--ds-space-negative-025, -2px)")
    }), invalidDateRange), /*#__PURE__*/React.createElement(SelectDateRangeButton, {
      "data-testId": "custom-date-range-update-button",
      disabled: Boolean(invalidDateRange),
      onClick: handleClickUpdateDateRange
    }, formatMessage(dateRangeMessages.dateRangeUpdateButton))));
  };
  return /*#__PURE__*/React.createElement(Popup, {
    isOpen: !!isPickerOpen,
    onClose: handlePickerToggle
    // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
    ,
    popupComponent: PopupComponent,
    zIndex: layers.modal(),
    content: popupContent,
    placement: "bottom-start",
    trigger: function trigger(triggerProps) {
      var labelText = getCurrentOptionLabel(formatDate, formatMessage, selectedValue, toDate, fromDate);
      var isSelected = !!selectedValue || !!isPickerOpen;
      return /*#__PURE__*/React.createElement(PopupTrigger, {
        triggerProps: triggerProps,
        isSelected: isSelected,
        labelPrefix: formatMessage(dateRangeMessages.dateRangeTitle),
        selectedLabel: labelText,
        onClick: handlePickerToggle
      });
    }
  });
};