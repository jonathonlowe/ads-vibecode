/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex, Text } from '@atlaskit/primitives/compiled';
import { BasicSearchInput } from '../../common/modal/basic-search-input';
import { FILTER_SELECTION_DEBOUNCE_MS } from '../../common/modal/popup-select/constants';
import BasicFilters from '../basic-filters';
import { useBasicFilterHydration } from '../basic-filters/hooks/useBasicFilterHydration';
import { CLOLBasicFilters } from '../basic-filters/types';
import { searchMessages } from './messages';
var styles = {
  basicSearchInputBoxStyles: "_1bsb1osq",
  basicSearchInputContainerStyles: "_16jlkb7n"
};
var ConfluenceSearchContainer = function ConfluenceSearchContainer(_ref) {
  var _ref$parameters = _ref.parameters,
    cloudId = _ref$parameters.cloudId,
    initialSearchValue = _ref$parameters.searchString,
    lastModified = _ref$parameters.lastModified,
    lastModifiedFrom = _ref$parameters.lastModifiedFrom,
    lastModifiedTo = _ref$parameters.lastModifiedTo,
    contributorAccountIds = _ref$parameters.contributorAccountIds,
    isSearching = _ref.isSearching,
    onSearch = _ref.onSearch;
  var _useBasicFilterHydrat = useBasicFilterHydration(),
    hydrateUsersFromAccountIds = _useBasicFilterHydrat.hydrateUsersFromAccountIds,
    users = _useBasicFilterHydrat.users,
    status = _useBasicFilterHydrat.status,
    resetHydrationHook = _useBasicFilterHydrat.reset;
  var currentCloudId = useRef(cloudId);
  var _useState = useState(contributorAccountIds !== null && contributorAccountIds !== void 0 ? contributorAccountIds : []),
    _useState2 = _slicedToArray(_useState, 2),
    initialContributorAccountIds = _useState2[0],
    setInitialContributorAccountIds = _useState2[1];
  var _useState3 = useState(initialSearchValue !== null && initialSearchValue !== void 0 ? initialSearchValue : ''),
    _useState4 = _slicedToArray(_useState3, 2),
    searchBarSearchString = _useState4[0],
    setSearchBarSearchString = _useState4[1];
  var _useState5 = useState(function () {
      return lastModified ? {
        lastModified: [{
          optionType: 'dateRange',
          label: lastModified,
          value: lastModified,
          from: lastModifiedFrom,
          to: lastModifiedTo
        }]
      } : {};
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    filterSelections = _useState6[0],
    setFilterSelections = _useState6[1];
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var handleSearchChange = useCallback(function (e) {
    var rawSearch = e.currentTarget.value;
    setSearchBarSearchString(rawSearch);
  }, []);
  var _useDebouncedCallback = useDebouncedCallback(function (filterValues) {
      onSearch(searchBarSearchString, filterValues);
    }, FILTER_SELECTION_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    debouncedBasicFilterSelectionChange = _useDebouncedCallback2[0];
  var handleBasicFilterSelectionChange = useCallback(function (filterType, options) {
    var updatedSelection = _objectSpread(_objectSpread({}, filterSelections), {}, _defineProperty({}, filterType, Array.isArray(options) ? options : [options]));
    setFilterSelections(updatedSelection);
    if (filterType === CLOLBasicFilters.lastModified) {
      onSearch(searchBarSearchString, updatedSelection);
    } else {
      debouncedBasicFilterSelectionChange(updatedSelection);
    }
  }, [debouncedBasicFilterSelectionChange, filterSelections, onSearch, searchBarSearchString]);

  // TODO: further refactoring in EDM-9573
  // https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/82725/overview?commentId=6827913
  useEffect(function () {
    if (currentCloudId.current !== cloudId) {
      setInitialContributorAccountIds([]);
      resetHydrationHook();
      setSearchBarSearchString('');
      setFilterSelections({});
      currentCloudId.current = cloudId;
    }
  }, [cloudId, resetHydrationHook]);
  useEffect(function () {
    var hasAccountIds = (initialContributorAccountIds === null || initialContributorAccountIds === void 0 ? void 0 : initialContributorAccountIds.length) > 0;
    if (hasAccountIds && status === 'empty') {
      hydrateUsersFromAccountIds(initialContributorAccountIds);
    }
  }, [hydrateUsersFromAccountIds, initialContributorAccountIds, status]);
  useEffect(function () {
    if (status === 'resolved') {
      setFilterSelections({
        lastModified: filterSelections.lastModified,
        editedOrCreatedBy: users
      });
    }
  }, [users, status, filterSelections.lastModified]);
  return /*#__PURE__*/React.createElement(Box, {
    xcss: styles.basicSearchInputBoxStyles
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    xcss: styles.basicSearchInputContainerStyles
  }, /*#__PURE__*/React.createElement(BasicSearchInput, {
    testId: "confluence-search-datasource-modal",
    isSearching: isSearching,
    onChange: handleSearchChange,
    onSearch: onSearch,
    searchTerm: searchBarSearchString,
    placeholder: searchMessages.searchLabel,
    ariaLabel: searchMessages.searchLabel,
    fullWidth: false
  }), /*#__PURE__*/React.createElement(BasicFilters, {
    cloudId: cloudId,
    selections: filterSelections,
    onChange: handleBasicFilterSelectionChange,
    isHydrating: status === 'loading'
  })), fg('platform-linking-visual-refresh-sllv') && /*#__PURE__*/React.createElement(Text, {
    size: "small",
    color: "color.text.subtlest",
    testId: "confluence-search-placeholder"
  }, formatMessage(searchMessages.searchLabel)));
};
export default ConfluenceSearchContainer;