/* provider-auth-required.tsx generated by @compiled/babel-plugin v0.36.1 */
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./provider-auth-required.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import Button from '@atlaskit/button';
import EmptyState from '@atlaskit/empty-state';
import { AuthError, auth as outboundAuth } from '@atlaskit/outbound-auth-flow-client';
import { Anchor } from '@atlaskit/primitives/compiled';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import useErrorLogger from '../../../hooks/useErrorLogger';
import { loadingErrorMessages } from './messages';
import { ProviderAuthRequiredSVG } from './provider-auth-required-svg';
var buttonStyles = null;
var learnMoreAboutSmartLinksUrl = 'https://support.atlassian.com/confluence-cloud/docs/insert-links-and-anchors/#Smart-Links-from-Jira-and-other-products';
export var ProviderAuthRequired = function ProviderAuthRequired(_ref) {
  var _ref$auth = _ref.auth,
    auth = _ref$auth === void 0 ? [] : _ref$auth,
    onAuthSuccess = _ref.onAuthSuccess,
    onAuthError = _ref.onAuthError,
    extensionKey = _ref.extensionKey,
    providerName = _ref.providerName,
    datasourceId = _ref.datasourceId;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useErrorLogger = useErrorLogger({
      datasourceId: datasourceId
    }),
    captureError = _useErrorLogger.captureError;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var _auth = _slicedToArray(auth, 1),
    authInfo = _auth[0];
  useEffect(function () {
    fireEvent('ui.error.shown', {
      reason: 'access'
    });
  }, [fireEvent]);
  var onAuthRequest = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return outboundAuth(authInfo.url);
          case 3:
            fireEvent('operational.provider.authSuccess', {
              extensionKey: extensionKey,
              experience: 'datasource'
            });
            onAuthSuccess === null || onAuthSuccess === void 0 || onAuthSuccess();
            _context.next = 12;
            break;
          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            fireEvent('operational.provider.authFailure', {
              reason: _context.t0 instanceof AuthError && _context.t0.type ? _context.t0.type : null,
              extensionKey: extensionKey,
              experience: 'datasource'
            });
            captureError('ProviderOnAuthRequest', _context.t0);
            onAuthError === null || onAuthError === void 0 || onAuthError();
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 7]]);
    }));
    return function onAuthRequest() {
      return _ref2.apply(this, arguments);
    };
  }();
  var renderAuthDescription = function renderAuthDescription() {
    return /*#__PURE__*/React.createElement(React.Fragment, null, formatMessage(loadingErrorMessages.authScreenDescriptionText, {
      providerName: providerName
    }), ' ', /*#__PURE__*/React.createElement(Anchor, {
      href: learnMoreAboutSmartLinksUrl,
      target: "_blank",
      rel: "noreferrer noopener"
    }, formatMessage(loadingErrorMessages.learnMoreAboutSmartLinks)));
  };
  var renderAuthConnectButton = function renderAuthConnectButton() {
    return /*#__PURE__*/React.createElement(Button, {
      onClick: onAuthRequest,
      appearance: "primary",
      className: ax(["_19pkpxbi"])
    }, formatMessage(loadingErrorMessages.authConnectButtonText));
  };
  return /*#__PURE__*/React.createElement(EmptyState, {
    testId: "datasource--access-required-with-auth",
    header: formatMessage(loadingErrorMessages.authScreenHeaderText, {
      providerName: providerName
    }),
    description: renderAuthDescription(),
    renderImage: ProviderAuthRequiredSVG,
    primaryAction: renderAuthConnectButton()
  });
};