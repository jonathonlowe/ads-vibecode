/* loading-error.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./loading-error.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment, useEffect } from 'react';
import { FormattedMessage } from 'react-intl-next';
import Button from '@atlaskit/button/standard-button';
import AKLink from '@atlaskit/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Inline, Text } from '@atlaskit/primitives/compiled';
import { fontFallback } from '@atlaskit/theme/typography';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { SpotErrorSearch } from '../../../common/ui/spot/error-state/search';
import { LoadingErrorSVGOld } from './loading-error-svg-old';
import { loadingErrorMessages } from './messages';
var styles = {
  errorContainerStylesOld: "_zulppxbi _4cvr1h6o _6a6z1h6o _1wpz1h6o _10fp1h6o _1e0c11p5",
  errorContainerStylesNew: "_zulppxbi _4cvr1h6o _6a6z1h6o _1wpz1h6o _10fp1h6o _1e0c11p5 _p12fko4j _y3gn1h6o",
  errorMessageContainerStyles: "_zulpu2gc _4cvr1h6o _6a6z1h6o _1e0c11p5",
  errorMessageStyles: "_11c8nbxd"
};
var isConfluenceSearch = function isConfluenceSearch(url) {
  return !!url.match(/https:\/\/.*\/wiki\/search/);
};
var isJiraIssuesList = function isJiraIssuesList(url) {
  return !!url.match(/https:\/\/.*\/issues\/?\?jql=/);
};
export var LoadingError = function LoadingError(_ref) {
  var onRefresh = _ref.onRefresh,
    url = _ref.url;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  useEffect(function () {
    fireEvent('ui.error.shown', {
      reason: 'network'
    });
  }, [fireEvent]);
  var connectionErrorMessage = loadingErrorMessages.checkConnection;
  if (fg('platform-linking-visual-refresh-sllv')) {
    if (url && isConfluenceSearch(url)) {
      connectionErrorMessage = loadingErrorMessages.checkConnectionConfluence;
    }
    if (url && isJiraIssuesList(url)) {
      connectionErrorMessage = loadingErrorMessages.checkConnectionJira;
    }
  }

  // TODO: Move it to inline when cleaning platform-linking-visual-refresh-sllv
  var FGWrapper = fg('platform-linking-visual-refresh-sllv') ? 'div' : Fragment;
  return /*#__PURE__*/React.createElement(FGWrapper, fg('platform-linking-visual-refresh-sllv') && {
    contentEditable: false
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: fg('platform-linking-visual-refresh-sllv') ? styles.errorContainerStylesNew : styles.errorContainerStylesOld,
    testId: "datasource--loading-error"
  }, fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(SpotErrorSearch, {
    size: 'xlarge',
    alt: ""
  }) : /*#__PURE__*/React.createElement(LoadingErrorSVGOld, null), /*#__PURE__*/React.createElement(Box, {
    xcss: styles.errorMessageContainerStyles
  }, /*#__PURE__*/React.createElement(Inline, {
    as: "span",
    xcss: styles.errorMessageStyles
  }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(FormattedMessage, loadingErrorMessages.unableToLoadResultsVisualRefreshSllv) : /*#__PURE__*/React.createElement(FormattedMessage, loadingErrorMessages.unableToLoadItemsOld)), /*#__PURE__*/React.createElement(Text, {
    as: "p"
  }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, connectionErrorMessage, fg('platform-linking-visual-refresh-sllv') && {
    values: {
      a: function a(chunks) {
        return /*#__PURE__*/React.createElement(AKLink, {
          href: url || '',
          target: "blank"
        }, chunks);
      }
    }
  }))), onRefresh && /*#__PURE__*/React.createElement(Button, {
    appearance: "primary",
    onClick: onRefresh
  }, /*#__PURE__*/React.createElement(FormattedMessage, loadingErrorMessages.refresh)))));
};