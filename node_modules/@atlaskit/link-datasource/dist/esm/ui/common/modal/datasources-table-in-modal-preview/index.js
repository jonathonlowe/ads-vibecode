import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback } from 'react';
import { DatasourceAction } from '../../../../analytics/types';
import { useUserInteractions } from '../../../../contexts/user-interactions';
import { IssueLikeDataTableView } from '../../../issue-like-table';
import { useDatasourceContext } from '../datasource-context';
var Table = function Table(props) {
  var _useDatasourceContext = useDatasourceContext(),
    columnCustomSizes = _useDatasourceContext.columnCustomSizes,
    onColumnResize = _useDatasourceContext.onColumnResize,
    wrappedColumnKeys = _useDatasourceContext.wrappedColumnKeys,
    onWrappedColumnChange = _useDatasourceContext.onWrappedColumnChange,
    visibleColumnKeys = _useDatasourceContext.visibleColumnKeys,
    onVisibleColumnKeysChange = _useDatasourceContext.onVisibleColumnKeysChange,
    _useDatasourceContext2 = _useDatasourceContext.tableState,
    status = _useDatasourceContext2.status,
    onNextPage = _useDatasourceContext2.onNextPage,
    responseItems = _useDatasourceContext2.responseItems,
    responseItemIds = _useDatasourceContext2.responseItemIds,
    hasNextPage = _useDatasourceContext2.hasNextPage,
    columns = _useDatasourceContext2.columns,
    defaultVisibleColumnKeys = _useDatasourceContext2.defaultVisibleColumnKeys,
    loadDatasourceDetails = _useDatasourceContext2.loadDatasourceDetails,
    _useDatasourceContext3 = _useDatasourceContext2.extensionKey,
    extensionKey = _useDatasourceContext3 === void 0 ? null : _useDatasourceContext3;
  var userInteractions = useUserInteractions();
  var handleOnNextPage = useCallback(function () {
    var onNextPageProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    userInteractions.add(DatasourceAction.NEXT_PAGE_SCROLLED);
    onNextPage(onNextPageProps);
  }, [onNextPage, userInteractions]);
  return /*#__PURE__*/React.createElement(IssueLikeDataTableView, _extends({}, props, {
    status: status,
    columns: columns,
    items: responseItems,
    itemIds: responseItemIds,
    hasNextPage: hasNextPage,
    visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
    onNextPage: handleOnNextPage,
    onLoadDatasourceDetails: loadDatasourceDetails,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange,
    extensionKey: extensionKey,
    columnCustomSizes: columnCustomSizes,
    onColumnResize: onColumnResize,
    wrappedColumnKeys: wrappedColumnKeys,
    onWrappedColumnChange: onWrappedColumnChange
  }));
};
export default Table;