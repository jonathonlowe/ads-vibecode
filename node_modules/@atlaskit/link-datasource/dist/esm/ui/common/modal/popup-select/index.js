import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["isOpen"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useEffect, useRef, useState } from 'react';
import isEqual from 'lodash/isEqual';
import { useIntl } from 'react-intl-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { CheckboxOption, PopupSelect } from '@atlaskit/select';
import { useDatasourceAnalyticsEvents } from '../../../../analytics';
import { CheckboxOptionVisualRefreshSllv } from './checkbox-option-visual-refresh-sllv';
import CustomControl from './control';
import CustomDropdownIndicator from './dropdownIndicator';
import PopupFooter from './footer';
import formatOptionLabel from './formatOptionLabel';
import CustomMenuList from './menu-list';
import { asyncPopupSelectMessages } from './messages';
import PopupTrigger from './trigger';
// Needed to disable filtering from react-select
var noFilterOptions = function noFilterOptions() {
  return true;
};
export var FilterPopupSelect = function FilterPopupSelect(_ref) {
  var filterName = _ref.filterName,
    _ref$totalCount = _ref.totalCount,
    totalCount = _ref$totalCount === void 0 ? 0 : _ref$totalCount,
    status = _ref.status,
    buttonLabel = _ref.buttonLabel,
    searchPlaceholder = _ref.searchPlaceholder,
    _ref$showLoading = _ref.showLoading,
    showLoading = _ref$showLoading === void 0 ? false : _ref$showLoading,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$showHydrating = _ref.showHydrating,
    showHydrating = _ref$showHydrating === void 0 ? false : _ref$showHydrating,
    _ref$shouldShowFooter = _ref.shouldShowFooter,
    shouldShowFooter = _ref$shouldShowFooter === void 0 ? true : _ref$shouldShowFooter,
    menuListProps = _ref.menuListProps,
    options = _ref.options,
    selectedOptions = _ref.selectedOptions,
    onSelectionChange = _ref.onSelectionChange,
    onInputChange = _ref.onInputChange,
    onMenuClose = _ref.onMenuClose,
    onMenuOpen = _ref.onMenuOpen;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    searchTerm = _useState2[0],
    setSearchTerm = _useState2[1];
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    sortedOptions = _useState4[0],
    setSortedOptions = _useState4[1];
  var sortPaginatedResults = useRef(false); // this is to track pagination for sorting purpose

  var sortOptionsOnPopupOpen = useCallback(function () {
    if (selectedOptions.length === 0) {
      return setSortedOptions(options);
    }
    var nonSelectedOptions = options.filter(function (option) {
      return !selectedOptions.find(function (selectedOption) {
        return selectedOption.value === option.value;
      });
    });
    var newOptions = [].concat(_toConsumableArray(selectedOptions), _toConsumableArray(nonSelectedOptions));
    if (!isEqual(newOptions, sortedOptions)) {
      setSortedOptions(newOptions);
    }
  }, [selectedOptions, options, sortedOptions]);
  var sortOptionsOnResolve = useCallback(function () {
    // when the user is searching, we want the search result to be displayed as it is, and the select component will take care of marking the selected items
    if (searchTerm) {
      sortPaginatedResults.current = false; // set to false to indicate pagination resolve action is completed from the sorting perspective
      return setSortedOptions(options);
    }

    // sortedOptions is empty initially, this will take care of setting the initial value and bring the selected items to the top
    if (sortedOptions.length === 0) {
      return sortOptionsOnPopupOpen();
    }

    // this block handles the pagination, where on pagination, we will just append newOptions to the current list
    if (sortPaginatedResults.current) {
      var newOptions = options.filter(function (option) {
        return !sortedOptions.find(function (sortedOption) {
          return sortedOption.value === option.value;
        });
      });
      if (newOptions.length > 0) {
        setSortedOptions([].concat(_toConsumableArray(sortedOptions), _toConsumableArray(newOptions)));
      }
      sortPaginatedResults.current = false; // set to false to indicate pagination resolve action is completed from the sorting perspective
      return;
    }
    sortPaginatedResults.current = false; // set to false to indicate pagination resolve action is completed from the sorting perspective
    sortOptionsOnPopupOpen();
  }, [options, searchTerm, sortOptionsOnPopupOpen, sortedOptions]);
  var handleMenuOpen = useCallback(function () {
    if (status === 'resolved') {
      sortOptionsOnPopupOpen();
    }
    fireEvent('ui.dropdown.opened.basicSearchDropdown', {
      filterName: filterName,
      selectionCount: selectedOptions.length
    });
    onMenuOpen === null || onMenuOpen === void 0 || onMenuOpen();
  }, [filterName, fireEvent, onMenuOpen, selectedOptions.length, sortOptionsOnPopupOpen, status]);
  var handleMenuClose = useCallback(function () {
    /**
     * Clearing the search is to ensure that the sortOptionsOnPopupOpen logic does not mess up.
     * Without this, when the user opens, sortOptionsOnPopupOpen will inject the selected options to the list and the list count and values will be off
     */
    if (searchTerm) {
      setSearchTerm('');
      onInputChange('', {
        action: 'input-change',
        prevInputValue: searchTerm
      });
    }
    onMenuClose === null || onMenuClose === void 0 || onMenuClose();
    fireEvent('ui.dropdown.closed.basicSearchDropdown', {
      filterName: filterName,
      selectionCount: selectedOptions.length
    });
  }, [filterName, fireEvent, onInputChange, onMenuClose, searchTerm, selectedOptions.length]);
  var handleInputChange = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newSearchTerm, actionMeta) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (actionMeta.action === 'input-change' && newSearchTerm !== searchTerm) {
              setSearchTerm(newSearchTerm);
              onInputChange(newSearchTerm, actionMeta);
            }
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [onInputChange, searchTerm]);
  useEffect(function () {
    if (status === 'resolved') {
      sortOptionsOnResolve();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [status]); // we only want the sortOptionsOnResolve to run when there is a status change

  useEffect(function () {
    if (status === 'loadingMore') {
      sortPaginatedResults.current = true;
    }
  }, [status]);
  return /*#__PURE__*/React.createElement(PopupSelect, {
    isMulti: true,
    maxMenuWidth: 300,
    minMenuWidth: 300,
    testId: "".concat(filterName, "-popup-select"),
    inputId: "".concat(filterName, "-popup-select--input")
    /*
         this threshold controls the display of the search control (input field for search)
         if this threshold is less than 0, when typing a search string that returns no results it will not remove the search control
         if this threshold is 0 or higher, it will remove the search control when there are no results, the user will be unable to clear the search to see more results
       */,
    searchThreshold: -1,
    inputValue: searchTerm,
    closeMenuOnSelect: false,
    shouldCloseMenuOnTab: false,
    hideSelectedOptions: false,
    isLoading: showLoading,
    placeholder: searchPlaceholder && fg('platform-linking-visual-refresh-sllv') ? searchPlaceholder : formatMessage(asyncPopupSelectMessages.selectPlaceholder)
    // @ts-ignore - https://product-fabric.atlassian.net/browse/DSP-21000
    ,
    menuListProps: menuListProps,
    components: {
      Option: fg('platform-linking-visual-refresh-sllv') ? CheckboxOptionVisualRefreshSllv : CheckboxOption,
      Control: CustomControl,
      MenuList: CustomMenuList,
      DropdownIndicator: CustomDropdownIndicator,
      LoadingIndicator: undefined // disables the three ... indicator in the searchbox when picker is loading
    }
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides
    ,
    styles: fg('platform-linking-visual-refresh-sllv') ? {
      container: function container(base) {
        return _objectSpread(_objectSpread({}, base), {}, {
          paddingTop: "var(--ds-space-075, 6px)",
          paddingBottom: 0
        });
      },
      menuList: function menuList(base) {
        return _objectSpread(_objectSpread({}, base), {}, {
          paddingTop: "var(--ds-space-050, 4px)",
          paddingBottom: 0
        });
      }
    } : undefined,
    options: sortedOptions,
    value: selectedOptions,
    filterOption: noFilterOptions,
    formatOptionLabel: formatOptionLabel,
    onChange: onSelectionChange,
    onInputChange: handleInputChange,
    onOpen: handleMenuOpen,
    onClose: handleMenuClose,
    target: function target(_ref3) {
      var isOpen = _ref3.isOpen,
        triggerProps = _objectWithoutProperties(_ref3, _excluded);
      return /*#__PURE__*/React.createElement(PopupTrigger, _extends({}, triggerProps, {
        label: buttonLabel,
        selectedOptions: selectedOptions,
        isSelected: isOpen,
        isDisabled: isDisabled,
        isLoading: showHydrating,
        testId: filterName
      }));
    },
    footer: shouldShowFooter && /*#__PURE__*/React.createElement(PopupFooter, {
      currentDisplayCount: options.length,
      totalCount: totalCount,
      filterName: filterName
    })
  });
};