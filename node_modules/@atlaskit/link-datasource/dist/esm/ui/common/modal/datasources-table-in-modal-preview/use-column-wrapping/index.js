import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useCallback, useState } from 'react';
export var useColumnWrapping = function useColumnWrapping() {
  var initialWrappedColumnKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _useState = useState(initialWrappedColumnKeys),
    _useState2 = _slicedToArray(_useState, 2),
    wrappedColumnKeys = _useState2[0],
    setWrappedColumnKeys = _useState2[1];
  var onWrappedColumnChange = useCallback(function (key, isWrapped) {
    var set = new Set(wrappedColumnKeys);
    if (isWrapped) {
      set.add(key);
    } else {
      set.delete(key);
    }
    setWrappedColumnKeys(Array.from(set));
  }, [wrappedColumnKeys]);
  return {
    wrappedColumnKeys: wrappedColumnKeys,
    onWrappedColumnChange: onWrappedColumnChange
  };
};