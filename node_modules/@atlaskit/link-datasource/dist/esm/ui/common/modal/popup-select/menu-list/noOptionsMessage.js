import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import QuestionCircleIcon from '@atlaskit/icon/glyph/question-circle';
import { fg } from '@atlaskit/platform-feature-flags';
import { N500 } from '@atlaskit/theme/colors';
import { useDatasourceAnalyticsEvents } from '../../../../../analytics';
import { SpotSearchNoResult } from '../../../../../common/ui/spot/error-state/search-no-result';
import { SEARCH_DEBOUNCE_MS } from '../constants';
import { asyncPopupSelectMessages } from './messages';
import CustomSelectMessage from './selectMessage';
var noop = function noop() {
  return '';
};
var CustomNoOptionsMessage = function CustomNoOptionsMessage(_ref) {
  var filterName = _ref.filterName;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;

  /**
   * Debounce is required because our search is debounced
   * When we type in the input box, it does not trigger a request right away. This means, if you currently having an empty result set, and you do a search,
   * there might be some react render cycles becuause of setting search input value where you could seen an empty UI condition triggered.
   * To fix this, we need to wait till the search debounce period to see if the new results are emtpy or not.
   */
  var _useDebouncedCallback = useDebouncedCallback(function () {
      fireEvent('ui.emptyResult.shown.basicSearchDropdown', {
        filterName: filterName
      });
    }, SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    debouncedAnalyticsCallback = _useDebouncedCallback2[0];
  useEffect(debouncedAnalyticsCallback, [debouncedAnalyticsCallback]);
  var _ref2 = fg('bandicoots-update-sllv-icons') ?
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useIntl() : {
      formatMessage: noop
    },
    formatMessage = _ref2.formatMessage;
  return /*#__PURE__*/React.createElement(CustomSelectMessage, {
    icon: fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(SpotSearchNoResult, {
      size: fg('platform-linking-visual-refresh-sllv') ? 'large' : 'medium',
      alt: formatMessage(fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.noOptionsMessage : asyncPopupSelectMessages.noOptionsMessageOld)
    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(QuestionCircleIcon, {
      primaryColor: "var(--ds-icon, ".concat(N500, ")"),
      size: "xlarge",
      label: ""
    })),
    message: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.noOptionsMessage : asyncPopupSelectMessages.noOptionsMessageOld,
    description: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.noOptionsDescription : undefined,
    testId: "".concat(filterName, "--no-options-message")
  });
};
export default CustomNoOptionsMessage;