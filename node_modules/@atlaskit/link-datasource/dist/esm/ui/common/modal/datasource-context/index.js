import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useContext, useMemo, useState } from 'react';
import { useDatasourceTableState } from '../../../../hooks/useDatasourceTableState';
import { useColumnResize } from '../datasources-table-in-modal-preview/use-column-resize';
import { useColumnVisibility } from '../datasources-table-in-modal-preview/use-column-visibility';
import { useColumnWrapping } from '../datasources-table-in-modal-preview/use-column-wrapping';
var DatasourceContext = /*#__PURE__*/React.createContext(null);
export var DatasourceContextProvider = function DatasourceContextProvider(_ref) {
  var children = _ref.children,
    datasourceId = _ref.datasourceId,
    isValidParameters = _ref.isValidParameters,
    initialParameters = _ref.initialParameters,
    initialVisibleColumnKeys = _ref.initialVisibleColumnKeys,
    initialColumnCustomSizes = _ref.initialColumnCustomSizes,
    initialWrappedColumnKeys = _ref.initialWrappedColumnKeys,
    onInsert = _ref.onInsert;
  var _useState = useState(initialParameters),
    _useState2 = _slicedToArray(_useState, 2),
    parameters = _useState2[0],
    setParameters = _useState2[1];
  var _useState3 = useState(initialVisibleColumnKeys),
    _useState4 = _slicedToArray(_useState3, 2),
    visibleColumnKeys = _useState4[0],
    setVisibleColumnKeys = _useState4[1];
  var _useColumnResize = useColumnResize(initialColumnCustomSizes),
    columnCustomSizes = _useColumnResize.columnCustomSizes,
    onColumnResize = _useColumnResize.onColumnResize;
  var _useColumnWrapping = useColumnWrapping(initialWrappedColumnKeys),
    wrappedColumnKeys = _useColumnWrapping.wrappedColumnKeys,
    onWrappedColumnChange = _useColumnWrapping.onWrappedColumnChange;
  var tableState = useDatasourceTableState({
    datasourceId: datasourceId,
    parameters: isValidParameters(parameters) ? parameters : undefined,
    fieldKeys: visibleColumnKeys
  });
  var _useColumnVisibility = useColumnVisibility({
      visibleColumnKeys: visibleColumnKeys,
      setVisibleColumnKeys: setVisibleColumnKeys,
      defaultVisibleColumnKeys: tableState.defaultVisibleColumnKeys,
      initialVisibleColumnKeys: initialVisibleColumnKeys
    }),
    onVisibleColumnKeysChange = _useColumnVisibility.onVisibleColumnKeysChange,
    visibleColumnCount = _useColumnVisibility.visibleColumnCount;
  var contextValue = useMemo(function () {
    return {
      datasourceId: datasourceId,
      isValidParameters: isValidParameters,
      tableState: tableState,
      visibleColumnCount: visibleColumnCount,
      visibleColumnKeys: visibleColumnKeys,
      onVisibleColumnKeysChange: onVisibleColumnKeysChange,
      columnCustomSizes: columnCustomSizes,
      onColumnResize: onColumnResize,
      wrappedColumnKeys: wrappedColumnKeys,
      onWrappedColumnChange: onWrappedColumnChange,
      parameters: parameters,
      setParameters: setParameters,
      onInsert: onInsert
    };
  }, [datasourceId, isValidParameters, tableState, visibleColumnCount, visibleColumnKeys, onVisibleColumnKeysChange, columnCustomSizes, onColumnResize, wrappedColumnKeys, onWrappedColumnChange, parameters, onInsert]);
  return /*#__PURE__*/React.createElement(DatasourceContext.Provider, {
    value: contextValue
  }, children);
};
export var useDatasourceContext = function useDatasourceContext() {
  var value = useContext(DatasourceContext);
  if (!value) {
    throw new Error('useDatasourceStore must be used within DatasourceContextProvider');
  }
  return value;
};