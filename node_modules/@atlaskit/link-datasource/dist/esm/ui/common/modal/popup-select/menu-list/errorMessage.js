import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import { fg } from '@atlaskit/platform-feature-flags';
import { N500 } from '@atlaskit/theme/colors';
import { useDatasourceAnalyticsEvents } from '../../../../../analytics';
import { SpotError } from '../../../../../common/ui/spot/error-state/error';
import { SpotErrorOld } from '../../../../../common/ui/spot/error-state/error-old';
import { SEARCH_DEBOUNCE_MS } from '../constants';
import { asyncPopupSelectMessages } from './messages';
import CustomSelectMessage from './selectMessage';
var getErrorReasonType = function getErrorReasonType(errors) {
  var _ref = errors || [],
    _ref2 = _slicedToArray(_ref, 1),
    error = _ref2[0];
  if (error instanceof Error) {
    return 'network';
  }
  if (errors && errors.length > 0) {
    return 'agg';
  }
  return 'unknown';
};
var noop = function noop() {
  return '';
};
var CustomErrorMessage = function CustomErrorMessage(_ref3) {
  var filterName = _ref3.filterName,
    errors = _ref3.errors;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;

  /**
   * Debounce is required because our search is debounced
   * ref: ./noOptionsMessage.tsx
   */
  var _useDebouncedCallback = useDebouncedCallback(function () {
      fireEvent('ui.error.shown.basicSearchDropdown', {
        filterName: filterName,
        reason: getErrorReasonType(errors)
      });
    }, SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    debouncedAnalyticsCallback = _useDebouncedCallback2[0];
  useEffect(debouncedAnalyticsCallback, [debouncedAnalyticsCallback]);
  var _ref4 = fg('bandicoots-update-sllv-icons') ?
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useIntl() : {
      formatMessage: noop
    },
    formatMessage = _ref4.formatMessage;
  return /*#__PURE__*/React.createElement(CustomSelectMessage, {
    icon: fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(SpotError, {
      size: "large",
      alt: formatMessage(asyncPopupSelectMessages.errorMessage)
    }) : fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(SpotErrorOld, {
      size: 'medium',
      alt: formatMessage(asyncPopupSelectMessages.errorMessageOld)
    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ErrorIcon, {
      primaryColor: "var(--ds-icon, ".concat(N500, ")"),
      label: "",
      size: "xlarge"
    })),
    message: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.errorMessage : asyncPopupSelectMessages.errorMessageOld,
    description: fg('platform-linking-visual-refresh-sllv') ? asyncPopupSelectMessages.errorDescription : undefined,
    testId: "".concat(filterName, "--error-message")
  });
};
export default CustomErrorMessage;