import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { createContext, useContext, useMemo, useState } from 'react';
var ViewModeContext = /*#__PURE__*/createContext(null);
export var DatasourceViewModeProvider = function DatasourceViewModeProvider(_ref) {
  var initialViewMode = _ref.viewMode,
    disableDisplayDropdown = _ref.disableDisplayDropdown,
    children = _ref.children;
  var _useState = useState(initialViewMode),
    _useState2 = _slicedToArray(_useState, 2),
    currentViewMode = _useState2[0],
    setCurrentViewMode = _useState2[1];
  var value = useMemo(function () {
    return {
      currentViewMode: currentViewMode,
      setCurrentViewMode: setCurrentViewMode,
      disableDisplayDropdown: disableDisplayDropdown
    };
  }, [currentViewMode, setCurrentViewMode, disableDisplayDropdown]);
  return /*#__PURE__*/React.createElement(ViewModeContext.Provider, {
    value: value
  }, children);
};
export var useViewModeContext = function useViewModeContext() {
  var value = useContext(ViewModeContext);
  if (!value) {
    throw new Error('useViewModeContext must be called within DatasourceViewModeProvider');
  }
  return value;
};