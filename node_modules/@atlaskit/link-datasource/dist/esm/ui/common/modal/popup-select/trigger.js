/* trigger.tsx generated by @compiled/babel-plugin v0.36.1 */
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "style"];
import "./trigger.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { forwardRef, useCallback } from 'react';
import Badge from '@atlaskit/badge';
import NewButton from '@atlaskit/button/new';
import Button from '@atlaskit/button/standard-button';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import ChevronDownIconOld from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner';
var styles = {
  triggerButtonLabelStyles: "_1reo15vq _18m915vq _1bto1l2s",
  badgeStylesOld: "_18u01b66",
  badgeStyles: "_18u0utpp"
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
var LoadingStateAnimationWrapper = /*#__PURE__*/forwardRef(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_y44vkmg5 _kqswh2mm", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  LoadingStateAnimationWrapper.displayName = 'LoadingStateAnimationWrapper';
}
var PopupTrigger = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var isSelected = _ref2.isSelected,
    isDisabled = _ref2.isDisabled,
    isLoading = _ref2.isLoading,
    selectedOptions = _ref2.selectedOptions,
    testId = _ref2.testId,
    label = _ref2.label;
  var _ref3 = selectedOptions || [],
    _ref4 = _slicedToArray(_ref3, 1),
    firstOption = _ref4[0];
  var hasOptions = selectedOptions && selectedOptions.length > 0;
  var showButtonLoading = !isDisabled && isLoading;
  var triggerButtonTestId = "".concat(testId, "-trigger");
  var LoadingButton = useCallback(function () {
    return /*#__PURE__*/React.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/React.createElement(Button, {
      iconAfter: /*#__PURE__*/React.createElement(Spinner, {
        size: 'xsmall'
      }),
      testId: "".concat(triggerButtonTestId, "--loading-button")
    }, label));
  }, [label, triggerButtonTestId]);
  var DefaultButton = useCallback(function () {
    return fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(NewButton, {
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: function iconAfter() {
        return /*#__PURE__*/React.createElement(ChevronDownIcon, {
          label: "",
          color: "currentColor"
        });
      },
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
      xcss: styles.badgeStyles,
      alignItems: "center"
    }, /*#__PURE__*/React.createElement(Badge, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1)))) : /*#__PURE__*/React.createElement(Button, {
      appearance: "default",
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: /*#__PURE__*/React.createElement(ChevronDownIconOld, {
        label: "",
        color: "currentColor"
      }),
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/React.createElement(React.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/React.createElement(Flex, {
      xcss: styles.badgeStylesOld,
      alignItems: "center"
    }, /*#__PURE__*/React.createElement(Badge, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1))));
  }, [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/React.createElement(Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/React.createElement(LoadingButton, null) : /*#__PURE__*/React.createElement(DefaultButton, null));
});
export default PopupTrigger;