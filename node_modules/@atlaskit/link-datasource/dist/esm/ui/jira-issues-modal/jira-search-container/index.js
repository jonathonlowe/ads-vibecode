/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["basicInputTextValue"];
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Flex, Text } from '@atlaskit/primitives/compiled';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { BasicSearchInput } from '../../common/modal/basic-search-input';
import { basicSearchInputMessages } from '../../common/modal/basic-search-input/messages';
import { ModeSwitcher } from '../../common/modal/mode-switcher';
import { FILTER_SELECTION_DEBOUNCE_MS } from '../../common/modal/popup-select/constants';
import { BasicFilters } from '../basic-filters';
import { useHydrateJqlQuery } from '../basic-filters/hooks/useHydrateJqlQuery';
import { isQueryTooComplex } from '../basic-filters/utils/isQueryTooComplex';
import { JiraJQLEditor } from '../jql-editor';
import { buildJQL } from './buildJQL';
import { modeSwitcherMessages } from './messages';
var styles = {
  basicSearchInputBoxStyles: "_1bsb1osq",
  basicSearchInputContainerStyles: "_16jlkb7n",
  inputContainerStylesOld: "_4cvr1q9y _1e0c1txw _1tket9kd",
  inputContainerStyles: "_4cvr1y6m _1e0c1txw _1tket9kd",
  modeSwitcherContainerStyles: "_19pk1b66"
};
export var DEFAULT_JQL_QUERY = 'ORDER BY created DESC';
export var ALLOWED_ORDER_BY_KEYS = ['key', 'summary', 'assignee', 'status', 'created'];
export var JiraSearchContainer = function JiraSearchContainer(props) {
  var isSearching = props.isSearching,
    parameters = props.parameters,
    onSearch = props.onSearch,
    onSearchMethodChangeCallback = props.onSearchMethodChange,
    initialSearchMethod = props.initialSearchMethod,
    setSearchBarJql = props.setSearchBarJql,
    _props$searchBarJql = props.searchBarJql,
    searchBarJql = _props$searchBarJql === void 0 ? DEFAULT_JQL_QUERY : _props$searchBarJql,
    site = props.site;
  var _ref = parameters || {},
    currentCloudId = _ref.cloudId;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    basicSearchTerm = _useState2[0],
    setBasicSearchTerm = _useState2[1];
  var _useState3 = useState(initialSearchMethod),
    _useState4 = _slicedToArray(_useState3, 2),
    currentSearchMethod = _useState4[0],
    setCurrentSearchMethod = _useState4[1];
  var _useState5 = useState(currentCloudId),
    _useState6 = _slicedToArray(_useState5, 2),
    cloudId = _useState6[0],
    setCloudId = _useState6[1];
  var _useState7 = useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    isComplexQuery = _useState8[0],
    setIsComplexQuery = _useState8[1];
  var _useState9 = useState(),
    _useState10 = _slicedToArray(_useState9, 2),
    orderKey = _useState10[0],
    setOrderKey = _useState10[1];
  var _useState11 = useState(),
    _useState12 = _slicedToArray(_useState11, 2),
    orderDirection = _useState12[0],
    setOrderDirection = _useState12[1];
  var _useState13 = useState({}),
    _useState14 = _slicedToArray(_useState13, 2),
    filterSelections = _useState14[0],
    setFilterSelections = _useState14[1];
  var modeSwitcherOptionsMap = useMemo(function () {
    return {
      jql: {
        label: 'JQL',
        value: 'jql'
      },
      basic: {
        label: formatMessage(modeSwitcherMessages.basicTextSearchLabel),
        value: 'basic',
        disabled: isComplexQuery,
        tooltipText: isComplexQuery ? formatMessage(modeSwitcherMessages.basicModeSwitchDisabledTooltipText) : ''
      }
    };
  }, [formatMessage, isComplexQuery]);
  var modeSwitcherOptions = useMemo(function () {
    return [modeSwitcherOptionsMap.basic, modeSwitcherOptionsMap.jql];
  }, [modeSwitcherOptionsMap]);
  var _useHydrateJqlQuery = useHydrateJqlQuery(cloudId || '', searchBarJql),
    hydratedOptions = _useHydrateJqlQuery.hydratedOptions,
    fetchHydratedJqlOptions = _useHydrateJqlQuery.fetchHydratedJqlOptions,
    basicFilterHydrationStatus = _useHydrateJqlQuery.status;
  var onSearchMethodChange = useCallback(function (searchMethod) {
    onSearchMethodChangeCallback(searchMethod);
    setCurrentSearchMethod(searchMethod);
  }, [onSearchMethodChangeCallback]);
  var handleBasicSearchChange = useCallback(function (e) {
    var rawSearch = e.currentTarget.value;
    setBasicSearchTerm(rawSearch);
    setSearchBarJql(buildJQL({
      rawSearch: rawSearch,
      filterValues: filterSelections,
      orderDirection: orderDirection,
      orderKey: orderKey
    }));
  }, [setSearchBarJql, filterSelections, orderDirection, orderKey]);
  var onQueryChange = useCallback(function (query) {
    var _query$split$map$filt, _fragments$at, _fragments$at2, _fragments$at3;
    // determine if order keys have been set so they can be saved and persisted when changes occur in basic search
    var fragments = (_query$split$map$filt = query === null || query === void 0 ? void 0 : query.split(/(^| )(order by)( |$)/i).map(function (item) {
      return item.trim();
    }).filter(Boolean)) !== null && _query$split$map$filt !== void 0 ? _query$split$map$filt : [];
    var hasOrder = ((_fragments$at = fragments.at(-2)) === null || _fragments$at === void 0 ? void 0 : _fragments$at.toLowerCase()) === 'order by';
    var key = hasOrder ? (_fragments$at2 = fragments.at(-1)) === null || _fragments$at2 === void 0 ? void 0 : _fragments$at2.split(' ').at(-2) : undefined;
    var order = hasOrder ? (_fragments$at3 = fragments.at(-1)) === null || _fragments$at3 === void 0 ? void 0 : _fragments$at3.split(' ').at(-1) : undefined;

    // TODO: confirm if these are the only order keys we want to preserve - existing whiteboard logic
    if (key && ALLOWED_ORDER_BY_KEYS.includes(key)) {
      setOrderKey(key);
      setOrderDirection(order);
    }
    setSearchBarJql(query);
  }, [setSearchBarJql]);
  var handleSearch = useCallback(function () {
    var isCurrentQueryComplex = isQueryTooComplex(searchBarJql);
    onSearch({
      jql: searchBarJql
    }, {
      searchMethod: currentSearchMethod,
      basicFilterSelections: filterSelections,
      isQueryComplex: isCurrentQueryComplex
    });
    if (currentSearchMethod === 'jql') {
      fireEvent('ui.jqlEditor.searched', {
        isQueryComplex: isCurrentQueryComplex
      });
      setIsComplexQuery(isCurrentQueryComplex);
      if (!isCurrentQueryComplex) {
        fetchHydratedJqlOptions();
      }
    }
  }, [currentSearchMethod, fetchHydratedJqlOptions, filterSelections, fireEvent, searchBarJql, onSearch]);
  var _useDebouncedCallback = useDebouncedCallback(function (filterValues) {
      var jqlWithFilterValues = buildJQL({
        rawSearch: basicSearchTerm,
        filterValues: filterValues,
        orderDirection: orderDirection,
        orderKey: orderKey
      });
      setSearchBarJql(jqlWithFilterValues);
      var isCurrentQueryComplex = isQueryTooComplex(jqlWithFilterValues);
      onSearch({
        jql: jqlWithFilterValues
      }, {
        searchMethod: currentSearchMethod,
        basicFilterSelections: filterSelections,
        isQueryComplex: isCurrentQueryComplex
      });
    }, FILTER_SELECTION_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    debouncedBasicFilterSelectionChange = _useDebouncedCallback2[0];
  var handleBasicFilterSelectionChange = useCallback(function (filterType, options) {
    var updatedSelection = _objectSpread(_objectSpread({}, filterSelections), {}, _defineProperty({}, filterType, options));
    setFilterSelections(updatedSelection);
    debouncedBasicFilterSelectionChange(updatedSelection);
  }, [debouncedBasicFilterSelectionChange, filterSelections]);
  useEffect(function () {
    var isCurrentQueryComplex = isQueryTooComplex(searchBarJql);
    setIsComplexQuery(isCurrentQueryComplex);
    if (!isCurrentQueryComplex && searchBarJql !== DEFAULT_JQL_QUERY) {
      fetchHydratedJqlOptions();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useEffect(function () {
    if (basicFilterHydrationStatus === 'resolved') {
      var basicInputTextValue = hydratedOptions.basicInputTextValue,
        hydratedFilterOptions = _objectWithoutProperties(hydratedOptions, _excluded);
      setFilterSelections(hydratedFilterOptions);
      if (basicInputTextValue) {
        setBasicSearchTerm(basicInputTextValue);
      }
    }
  }, [hydratedOptions, basicFilterHydrationStatus]);
  useEffect(function () {
    if (currentCloudId !== cloudId) {
      setBasicSearchTerm('');
      setSearchBarJql(DEFAULT_JQL_QUERY);
      setIsComplexQuery(false);
      setOrderKey(undefined);
      setOrderDirection(undefined);
      setFilterSelections({});
      setCloudId(currentCloudId);
    }
  }, [currentCloudId, cloudId, setSearchBarJql]);
  if (fg('platform-linking-visual-refresh-sllv')) {
    return /*#__PURE__*/React.createElement("div", {
      "data-testid": "jira-search-container",
      className: ax([styles.inputContainerStyles])
    }, currentSearchMethod === 'basic' && /*#__PURE__*/React.createElement(Box, {
      xcss: styles.basicSearchInputBoxStyles
    }, /*#__PURE__*/React.createElement(Flex, {
      alignItems: "center",
      xcss: styles.basicSearchInputContainerStyles
    }, /*#__PURE__*/React.createElement(BasicSearchInput, {
      isSearching: isSearching,
      onChange: handleBasicSearchChange,
      onSearch: handleSearch,
      searchTerm: basicSearchTerm,
      placeholder: basicSearchInputMessages.basicTextSearchLabel,
      ariaLabel: basicSearchInputMessages.basicTextSearchLabel,
      testId: "jira-datasource-modal",
      fullWidth: false
    }), /*#__PURE__*/React.createElement(BasicFilters, {
      jql: searchBarJql,
      site: site,
      onChange: handleBasicFilterSelectionChange,
      selections: filterSelections,
      isJQLHydrating: basicFilterHydrationStatus === 'loading'
    })), currentSearchMethod === 'basic' && /*#__PURE__*/React.createElement(Text, {
      size: "small",
      color: "color.text.subtlest",
      testId: "jira-search-placeholder"
    }, formatMessage(basicSearchInputMessages.basicTextSearchLabel))), currentSearchMethod === 'jql' && /*#__PURE__*/React.createElement(JiraJQLEditor, {
      cloudId: cloudId || '',
      isSearching: isSearching,
      onChange: onQueryChange,
      onSearch: handleSearch,
      query: searchBarJql
    }), /*#__PURE__*/React.createElement(Box, {
      xcss: styles.modeSwitcherContainerStyles
    }, /*#__PURE__*/React.createElement(ModeSwitcher, {
      onOptionValueChange: onSearchMethodChange,
      selectedOptionValue: currentSearchMethod,
      options: modeSwitcherOptions
    })));
  }
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "jira-search-container",
    className: ax([styles.inputContainerStylesOld])
  }, currentSearchMethod === 'basic' && /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    xcss: styles.basicSearchInputContainerStyles
  }, /*#__PURE__*/React.createElement(BasicSearchInput, {
    isSearching: isSearching,
    onChange: handleBasicSearchChange,
    onSearch: handleSearch,
    searchTerm: basicSearchTerm,
    placeholder: basicSearchInputMessages.basicTextSearchLabel,
    ariaLabel: basicSearchInputMessages.basicTextSearchLabel,
    testId: "jira-datasource-modal",
    fullWidth: false
  }), /*#__PURE__*/React.createElement(BasicFilters, {
    jql: searchBarJql,
    site: site,
    onChange: handleBasicFilterSelectionChange,
    selections: filterSelections,
    isJQLHydrating: basicFilterHydrationStatus === 'loading'
  })), currentSearchMethod === 'jql' && /*#__PURE__*/React.createElement(JiraJQLEditor, {
    cloudId: cloudId || '',
    isSearching: isSearching,
    onChange: onQueryChange,
    onSearch: handleSearch,
    query: searchBarJql
  }), /*#__PURE__*/React.createElement(ModeSwitcher, {
    onOptionValueChange: onSearchMethodChange,
    selectedOptionValue: currentSearchMethod,
    options: modeSwitcherOptions
  }));
};