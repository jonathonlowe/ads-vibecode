import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlaskit/platform/no-preconditioning */
/* eslint-disable @atlaskit/platform/ensure-feature-flag-prefix */
import React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import LinkComponent from '@atlaskit/link';
import { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import { fg } from '@atlaskit/platform-feature-flags';
import { useDatasourceAnalyticsEvents } from '../../../analytics';
import { EVENT_CHANNEL } from '../../../analytics/constants';
import { DatasourceAction, DatasourceDisplay } from '../../../analytics/types';
import { startUfoExperience } from '../../../analytics/ufoExperiences';
import { useColumnPickerRenderedFailedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience';
import { useDataRenderedUfoExperience } from '../../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience';
import { mapSearchMethod } from '../../../analytics/utils';
import { RichIconSearch } from '../../../common/ui/rich-icon/search';
import { fetchMessagesForLocale } from '../../../common/utils/locale/fetch-messages-for-locale';
import { useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { useUserInteractions } from '../../../contexts/user-interactions';
import i18nEN from '../../../i18n/en';
import { useAvailableSites } from '../../../services/useAvailableSites';
import { StoreContainer } from '../../../state';
import { AccessRequired } from '../../common/error-state/access-required';
import { loadingErrorMessages } from '../../common/error-state/messages';
import { ModalLoadingError } from '../../common/error-state/modal-loading-error';
import { NoInstancesView } from '../../common/error-state/no-instances';
import { NoResults } from '../../common/error-state/no-results';
import { InitialStateView } from '../../common/initial-state-view';
import { initialStateViewMessages } from '../../common/initial-state-view/messages';
import { CancelButton } from '../../common/modal/cancel-button';
import { ContentContainer } from '../../common/modal/content-container';
import { SmartCardPlaceholder, SmartLink } from '../../common/modal/count-view-smart-link';
import { useDatasourceContext } from '../../common/modal/datasource-context';
import { DatasourceModal } from '../../common/modal/datasource-modal';
import { createDatasourceModal } from '../../common/modal/datasource-modal/createDatasourceModal';
import DatasourcesTableInModalPreview from '../../common/modal/datasources-table-in-modal-preview';
import { InsertButton } from '../../common/modal/insert-button';
import { DatasourceViewModeDropDown } from '../../common/modal/mode-switcher';
import { useViewModeContext } from '../../common/modal/mode-switcher/useViewModeContext';
import TableSearchCount from '../../common/modal/search-count';
import { SiteSelector } from '../../common/modal/site-selector';
import { EmptyState } from '../../issue-like-table';
import { availableBasicFilterTypes } from '../basic-filters/ui';
import { isQueryTooComplex } from '../basic-filters/utils/isQueryTooComplex';
import { JiraSearchContainer } from '../jira-search-container';
import { JiraInitialStateSVG } from './jira-issues-initial-state-svg';
import { modalMessages } from './messages';
var noop = function noop() {
  return '';
};
var getDisplayValue = function getDisplayValue(currentViewMode, itemCount) {
  if (currentViewMode === 'table') {
    return DatasourceDisplay.DATASOURCE_TABLE;
  }
  return itemCount === 1 ? DatasourceDisplay.INLINE : DatasourceDisplay.DATASOURCE_INLINE;
};
var jqlSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-advanced-search-with-jira-query-language-jql/';
var isValidParameters = function isValidParameters(parameters) {
  return typeof (parameters === null || parameters === void 0 ? void 0 : parameters.jql) === 'string' && parameters.jql.length > 0 && typeof (parameters === null || parameters === void 0 ? void 0 : parameters.cloudId) === 'string' && parameters.cloudId.length > 0;
};
var PlainJiraIssuesConfigModal = function PlainJiraIssuesConfigModal(props) {
  var onCancel = props.onCancel,
    urlBeingEdited = props.url;
  var _useDatasourceContext = useDatasourceContext(),
    visibleColumnCount = _useDatasourceContext.visibleColumnCount,
    visibleColumnKeys = _useDatasourceContext.visibleColumnKeys,
    parameters = _useDatasourceContext.parameters,
    setParameters = _useDatasourceContext.setParameters,
    tableState = _useDatasourceContext.tableState;
  var reset = tableState.reset,
    status = tableState.status,
    responseItems = tableState.responseItems,
    columns = tableState.columns,
    totalCount = tableState.totalCount,
    _tableState$extension = tableState.extensionKey,
    extensionKey = _tableState$extension === void 0 ? null : _tableState$extension,
    destinationObjectTypes = tableState.destinationObjectTypes;
  var _ref = parameters !== null && parameters !== void 0 ? parameters : {},
    cloudId = _ref.cloudId,
    jql = _ref.jql;
  var _useState = useState(jql),
    _useState2 = _slicedToArray(_useState, 1),
    initialJql = _useState2[0];
  var _useViewModeContext = useViewModeContext(),
    currentViewMode = _useViewModeContext.currentViewMode;
  var _useAvailableSites = useAvailableSites('jira', cloudId),
    availableSites = _useAvailableSites.availableSites,
    selectedJiraSite = _useAvailableSites.selectedSite;
  var _useState3 = useState(jql),
    _useState4 = _slicedToArray(_useState3, 2),
    searchBarJql = _useState4[0],
    setSearchBarJql = _useState4[1];

  // analytics related parameters
  var searchCount = useRef(0);
  var userInteractions = useUserInteractions();
  var initialSearchMethod = !isQueryTooComplex(initialJql || '') ? 'basic' : 'jql';
  var _useState5 = useState(initialSearchMethod),
    _useState6 = _slicedToArray(_useState5, 2),
    currentSearchMethod = _useState6[0],
    setCurrentSearchMethod = _useState6[1];
  var searchMethodSearchedWith = useRef(null);
  var basicFilterSelectionsSearchedWith = useRef({});
  var isSearchedWithComplexQuery = useRef(false);
  var _useDatasourceAnalyti = useDatasourceAnalyticsEvents(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var experienceId = useDatasourceExperienceId();
  var _ref2 = fg('bandicoots-update-sllv-icons') ?
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useIntl() : {
      formatMessage: noop
    },
    formatMessage = _ref2.formatMessage;
  var analyticsPayload = useMemo(function () {
    return {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes
    };
  }, [destinationObjectTypes, extensionKey]);
  var resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  var jqlUrl = selectedJiraSite && jql && "".concat(selectedJiraSite.url, "/issues/?jql=").concat(encodeURI(jql));
  var shouldShowIssueCount = !!totalCount && totalCount !== 1 && currentViewMode === 'table';
  var isDataReady = (visibleColumnKeys || []).length > 0;
  var hasNoJiraSites = availableSites && availableSites.length === 0;
  useEffect(function () {
    if (availableSites) {
      fireEvent('ui.modal.ready.datasource', {
        instancesCount: availableSites.length,
        schemasCount: null
      });
    }
  }, [fireEvent, availableSites]);
  useEffect(function () {
    var shouldStartUfoExperience = status === 'loading';
    if (shouldStartUfoExperience) {
      startUfoExperience({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [experienceId, status]);
  useDataRenderedUfoExperience({
    status: status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    canBeLink: currentViewMode === 'inline',
    extensionKey: extensionKey
  });

  /**
   * If the selected Jira site changes, update the cloudId in the parameters
   * This is mainly useful for setting the initial cloudId after the site selection loads
   */
  useEffect(function () {
    if (selectedJiraSite && (!cloudId || cloudId !== selectedJiraSite.cloudId)) {
      setParameters(function () {
        return {
          jql: '',
          cloudId: selectedJiraSite.cloudId
        };
      });
    }
  }, [cloudId, selectedJiraSite, setParameters]);
  var fireSingleItemViewedEvent = useCallback(function () {
    fireEvent('ui.link.viewed.singleItem', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchMethod: mapSearchMethod(searchMethodSearchedWith.current)
    }));
  }, [analyticsPayload, fireEvent]);
  var fireCountViewedEvent = useCallback(function () {
    fireEvent('ui.link.viewed.count', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
      totalItemCount: totalCount || 0
    }));
  }, [analyticsPayload, fireEvent, totalCount]);
  var fireTableViewedEvent = useCallback(function () {
    if (isDataReady) {
      fireEvent('ui.table.viewed.datasourceConfigModal', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
        totalItemCount: totalCount || 0,
        searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
        displayedColumnCount: visibleColumnCount.current
      }));
    }
  }, [isDataReady, fireEvent, analyticsPayload, totalCount, visibleColumnCount]);
  var fireIssueViewAnalytics = useCallback(function () {
    if (!totalCount) {
      return;
    }
    if (totalCount > 1) {
      fireTableViewedEvent();
    } else if (totalCount === 1) {
      fireSingleItemViewedEvent();
    }
  }, [fireSingleItemViewedEvent, fireTableViewedEvent, totalCount]);
  useEffect(function () {
    var isResolved = status === 'resolved';
    var isIssueViewMode = currentViewMode === 'table';
    var isCountViewMode = currentViewMode === 'inline';
    if (!isResolved) {
      return;
    }
    if (isIssueViewMode) {
      fireIssueViewAnalytics();
    } else if (isCountViewMode) {
      fireCountViewedEvent();
    }
  }, [currentViewMode, status, fireIssueViewAnalytics, fireCountViewedEvent]);
  useColumnPickerRenderedFailedUfoExperience(status, experienceId);
  var onSearch = useCallback(function (newParameters, _ref3) {
    var searchMethod = _ref3.searchMethod,
      basicFilterSelections = _ref3.basicFilterSelections,
      isQueryComplex = _ref3.isQueryComplex;
    searchCount.current++;
    searchMethodSearchedWith.current = searchMethod;
    basicFilterSelectionsSearchedWith.current = basicFilterSelections;
    isSearchedWithComplexQuery.current = isQueryComplex;
    if (jql !== newParameters.jql) {
      userInteractions.add(DatasourceAction.QUERY_UPDATED);
    }
    setParameters(function (state) {
      return state && newParameters.jql ? {
        cloudId: state.cloudId,
        jql: newParameters.jql
      } : undefined;
    });
    reset({
      shouldForceRequest: true
    });
  }, [jql, reset, userInteractions, setParameters]);
  var onSiteSelection = useCallback(function (site) {
    userInteractions.add(DatasourceAction.INSTANCE_UPDATED);
    setParameters({
      jql: '',
      cloudId: site.cloudId
    });
    reset({
      shouldForceRequest: true
    });
  }, [reset, userInteractions, setParameters]);
  var retrieveUrlForSmartCardRender = useCallback(function () {
    var _data$key;
    var _responseItems = _slicedToArray(responseItems, 1),
      data = _responseItems[0];
    // agreement with BE that we will use `key` for rendering smartlink
    return data === null || data === void 0 || (_data$key = data.key) === null || _data$key === void 0 || (_data$key = _data$key.data) === null || _data$key === void 0 ? void 0 : _data$key.url;
  }, [responseItems]);
  var renderCountModeContent = useCallback(function () {
    var selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    if (status === 'unauthorized') {
      return /*#__PURE__*/React.createElement(AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (status === 'empty' || !jql || !selectedJiraSiteUrl) {
      return /*#__PURE__*/React.createElement(SmartCardPlaceholder, {
        placeholderText: fg('confluence-issue-terminology-refresh') ? modalMessages.issuesCountSmartCardPlaceholderTextIssueTermRefresh : modalMessages.issuesCountSmartCardPlaceholderText
      });
    } else {
      var url;
      if (responseItems.length === 1 && retrieveUrlForSmartCardRender()) {
        url = retrieveUrlForSmartCardRender();
      } else {
        url = "".concat(selectedJiraSiteUrl, "/issues/?jql=").concat(encodeURIComponent(jql));
      }
      return /*#__PURE__*/React.createElement(SmartLink, {
        url: url
      });
    }
  }, [jql, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, responseItems, retrieveUrlForSmartCardRender]);
  var renderIssuesModeContent = useCallback(function () {
    var selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    var getDescriptionMessage = function getDescriptionMessage() {
      if (currentSearchMethod === 'basic' && fg('platform-linking-visual-refresh-sllv')) {
        return initialStateViewMessages.searchDescriptionForBasicSearchVisualRefreshSllv;
      }
      if (fg('confluence-issue-terminology-refresh')) {
        return currentSearchMethod === 'jql' ? initialStateViewMessages.searchDescriptionForJQLSearchIssueTermRefresh : initialStateViewMessages.searchDescriptionForBasicSearchIssueTermRefresh;
      }
      return currentSearchMethod === 'jql' ? initialStateViewMessages.searchDescriptionForJQLSearch : initialStateViewMessages.searchDescriptionForBasicSearch;
    };
    if (status === 'rejected' && jqlUrl) {
      if (fg('platform-linking-visual-refresh-sllv')) {
        return /*#__PURE__*/React.createElement(ModalLoadingError, {
          errorMessage: jqlUrl ? /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, modalMessages.checkConnectionWithSourceVisualRefreshSllv, {
            values: {
              a: function a(urlText) {
                return /*#__PURE__*/React.createElement(LinkComponent, {
                  href: jqlUrl
                }, urlText);
              }
            }
          })) : undefined,
          onRefresh: function onRefresh() {
            return reset({
              shouldForceRequest: true
            });
          }
        });
      }
      return /*#__PURE__*/React.createElement(ModalLoadingError, {
        errorMessage: jqlUrl ? /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, modalMessages.checkConnectionWithSource, {
          values: {
            a: function a(urlText) {
              return /*#__PURE__*/React.createElement("a", {
                href: jqlUrl
              }, urlText);
            }
          }
        })) : undefined
      });
    } else if (status === 'unauthorized') {
      return /*#__PURE__*/React.createElement(AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (resolvedWithNoResults || status === 'forbidden') {
      return /*#__PURE__*/React.createElement(NoResults, null);
    } else if (status === 'empty' || !columns.length) {
      // persist the empty state when making the initial /data request which contains the columns
      return /*#__PURE__*/React.createElement(ContentContainer, {
        withTableBorder: !!jql
      }, !!jql ? /*#__PURE__*/React.createElement(EmptyState, {
        testId: "jira-datasource-modal--empty-state"
      }) : /*#__PURE__*/React.createElement(InitialStateView, {
        icon: fg('bandicoots-update-sllv-icons') ? /*#__PURE__*/React.createElement(RichIconSearch, {
          alt: formatMessage(fg('confluence-issue-terminology-refresh') ? modalMessages.searchJiraTitleIssueTermRefresh : modalMessages.searchJiraTitle),
          size: 'xlarge'
        }) : /*#__PURE__*/React.createElement(JiraInitialStateSVG, null),
        title: fg('confluence-issue-terminology-refresh') ? modalMessages.searchJiraTitleIssueTermRefresh : modalMessages.searchJiraTitle,
        description: getDescriptionMessage(),
        learnMoreLink: currentSearchMethod === 'jql' ? {
          href: jqlSupportDocumentLink,
          text: initialStateViewMessages.learnMoreLinkOld
        } : fg('platform-linking-visual-refresh-sllv') ? {
          href: jqlSupportDocumentLink,
          text: initialStateViewMessages.learnMoreLink
        } : undefined
      }));
    }
    return /*#__PURE__*/React.createElement(ContentContainer, {
      withTableBorder: true
    }, /*#__PURE__*/React.createElement(DatasourcesTableInModalPreview, {
      testId: "jira-datasource-table"
    }));
  }, [columns.length, currentSearchMethod, formatMessage, jql, jqlUrl, resolvedWithNoResults, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, reset]);
  var siteSelectorLabel = useMemo(function () {
    if (fg('confluence-issue-terminology-refresh')) {
      return availableSites && availableSites.length > 1 ? modalMessages.insertIssuesTitleManySitesIssueTermRefresh : modalMessages.insertIssuesTitleIssueTermRefresh;
    }
    return availableSites && availableSites.length > 1 ? modalMessages.insertIssuesTitleManySites : modalMessages.insertIssuesTitle;
  }, [availableSites]);
  var getCancelButtonAnalyticsPayload = useCallback(function () {
    return _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchCount: searchCount.current,
      actions: userInteractions.get()
    });
  }, [analyticsPayload, userInteractions]);
  var filterSelectionCount = availableBasicFilterTypes.reduce(function (current, filter) {
    var _basicFilterSelection;
    return _objectSpread(_objectSpread({}, current), {}, _defineProperty({}, "".concat(filter, "BasicFilterSelectionCount"), ((_basicFilterSelection = basicFilterSelectionsSearchedWith.current[filter]) === null || _basicFilterSelection === void 0 ? void 0 : _basicFilterSelection.length) || 0));
  }, {});
  var getInsertButtonAnalyticsPayload = useCallback(function () {
    return _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      display: getDisplayValue(currentViewMode, totalCount || 0),
      isQueryComplex: isSearchedWithComplexQuery.current,
      searchMethod: mapSearchMethod(searchMethodSearchedWith.current),
      searchCount: searchCount.current,
      actions: userInteractions.get()
    }, searchMethodSearchedWith.current === 'basic' ? _objectSpread({}, filterSelectionCount) : {});
  }, [analyticsPayload, currentViewMode, filterSelectionCount, totalCount, userInteractions]);
  var urlToInsert = useMemo(function () {
    var jql = parameters === null || parameters === void 0 ? void 0 : parameters.jql;
    if (!jql || !(selectedJiraSite !== null && selectedJiraSite !== void 0 && selectedJiraSite.url)) {
      return;
    }
    var upToDateJqlUrl = "".concat(selectedJiraSite.url, "/issues/?jql=").concat(encodeURIComponent(jql));
    return currentViewMode === 'inline' && responseItems.length === 1 ? retrieveUrlForSmartCardRender() : upToDateJqlUrl;
  }, [currentViewMode, parameters === null || parameters === void 0 ? void 0 : parameters.jql, responseItems, retrieveUrlForSmartCardRender, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url]);
  return /*#__PURE__*/React.createElement(IntlMessagesProvider, {
    defaultMessages: i18nEN,
    loaderFn: fetchMessagesForLocale
  }, /*#__PURE__*/React.createElement(ModalTransition, null, /*#__PURE__*/React.createElement(DatasourceModal, {
    testId: "jira-datasource-modal",
    onClose: onCancel
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, null, /*#__PURE__*/React.createElement(SiteSelector, {
    availableSites: availableSites,
    onSiteSelection: onSiteSelection,
    selectedSite: selectedJiraSite,
    testId: "jira-datasource-modal--site-selector",
    label: siteSelectorLabel
  })), !hasNoJiraSites && /*#__PURE__*/React.createElement(DatasourceViewModeDropDown, null)), /*#__PURE__*/React.createElement(ModalBody, null, !hasNoJiraSites ? /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(JiraSearchContainer, {
    setSearchBarJql: setSearchBarJql,
    searchBarJql: searchBarJql,
    isSearching: status === 'loading',
    parameters: parameters,
    onSearch: onSearch,
    initialSearchMethod: initialSearchMethod,
    onSearchMethodChange: setCurrentSearchMethod,
    site: selectedJiraSite
  }), currentViewMode === 'inline' ? renderCountModeContent() : renderIssuesModeContent()) : /*#__PURE__*/React.createElement(NoInstancesView, {
    title: loadingErrorMessages.noAccessToJiraSitesTitle,
    description: loadingErrorMessages.noAccessToJiraSitesDescription,
    testId: "no-jira-instances-content"
  })), /*#__PURE__*/React.createElement(ModalFooter, null, shouldShowIssueCount && /*#__PURE__*/React.createElement(TableSearchCount, {
    searchCount: totalCount,
    url: jqlUrl,
    prefixTextType: "issue",
    testId: "jira-datasource-modal-total-issues-count"
  }), /*#__PURE__*/React.createElement(CancelButton, {
    onCancel: onCancel,
    getAnalyticsPayload: getCancelButtonAnalyticsPayload,
    testId: "jira-datasource-modal--cancel-button"
  }), !hasNoJiraSites && /*#__PURE__*/React.createElement(InsertButton, {
    testId: "jira-datasource-modal--insert-button",
    url: urlToInsert,
    getAnalyticsPayload: getInsertButtonAnalyticsPayload
  }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonTextIssueTermSllv) : fg('confluence-issue-terminology-refresh') ? /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonTextIssueTermRefresh) : /*#__PURE__*/React.createElement(FormattedMessage, modalMessages.insertIssuesButtonText))))));
};
var ConnectedJiraIssueConfigModal = createDatasourceModal({
  isValidParameters: isValidParameters,
  dataProvider: 'jira-issues',
  component: PlainJiraIssuesConfigModal
});
export var JiraIssuesConfigModal = function JiraIssuesConfigModal(props) {
  var onInsert = props.onInsert;
  var onInsertWithMacroAnalytics = useCallback(function (adf, analyticsEvent) {
    if (analyticsEvent && adf.type === 'inlineCard') {
      var macroInsertedEvent = analyticsEvent.clone();
      macroInsertedEvent === null || macroInsertedEvent === void 0 || macroInsertedEvent.update({
        eventType: 'track',
        action: 'inserted',
        actionSubject: 'macro',
        actionSubjectId: 'jlol'
      });
      macroInsertedEvent === null || macroInsertedEvent === void 0 || macroInsertedEvent.fire(EVENT_CHANNEL);
    }
    onInsert(adf, analyticsEvent);
  }, [onInsert]);
  return /*#__PURE__*/React.createElement(StoreContainer, null, /*#__PURE__*/React.createElement(ConnectedJiraIssueConfigModal, _extends({}, props, {
    onInsert: onInsertWithMacroAnalytics
  })));
};
export var JiraIssuesConfigModalNoSuspense = JiraIssuesConfigModal;