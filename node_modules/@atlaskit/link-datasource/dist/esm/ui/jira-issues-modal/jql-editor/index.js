import React, { useEffect, useRef } from 'react';
import { JQLEditor } from '@atlaskit/jql-editor';
import { useAutocompleteProvider } from '@atlaskit/jql-editor-autocomplete-rest';
import { makeGetJqlAutocompleteData } from '../../../services/makeGetJqlAutocompleteData';
import { makeGetJqlSuggestionsData } from '../../../services/makeGetJqlSuggestionsData';
export var JiraJQLEditor = function JiraJQLEditor(_ref) {
  var cloudId = _ref.cloudId,
    isSearching = _ref.isSearching,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    query = _ref.query;
  var autocompleteProvider = useAutocompleteProvider('link-datasource', makeGetJqlAutocompleteData(cloudId), makeGetJqlSuggestionsData(cloudId));

  // This is an expected (pretty strange imo) way of making sure text field is in focus when rendered
  var inputRef = useRef({
    focus: function focus() {}
  });
  useEffect(function () {
    requestAnimationFrame(function () {
      var _inputRef$current;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
    });
  }, []);
  var searchIfValidJql = function searchIfValidJql(_, jast) {
    if (jast.errors.length === 0) {
      onSearch();
    }
  };
  return /*#__PURE__*/React.createElement(JQLEditor, {
    analyticsSource: "link-datasource",
    autocompleteProvider: autocompleteProvider,
    onSearch: searchIfValidJql,
    onUpdate: onChange,
    isSearching: isSearching,
    inputRef: inputRef,
    query: query,
    "aria-label": "JQL Query Editor"
  });
};