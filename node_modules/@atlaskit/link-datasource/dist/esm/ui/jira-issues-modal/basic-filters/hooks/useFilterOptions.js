import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useCallback, useEffect, useRef, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useBasicFilterAGG } from '../../../../services/useBasicFilterAGG';
import { mapFieldValuesToFilterOptions, mapFieldValuesToPageCursor, mapFieldValuesToTotalCount } from '../utils/transformers';
import { filterOptionMessages } from './messages';
export var getAssigneeUnassignedFilterOption = function getAssigneeUnassignedFilterOption(formatMessage) {
  return {
    label: formatMessage(filterOptionMessages.assigneeUnassignedFilterOption),
    optionType: 'avatarLabel',
    value: 'empty'
  };
};
export var useFilterOptions = function useFilterOptions(_ref) {
  var filterType = _ref.filterType,
    site = _ref.site;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    filterOptions = _useState2[0],
    setFilterOptions = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    totalCount = _useState4[0],
    setTotalCount = _useState4[1];
  var _useState5 = useState('empty'),
    _useState6 = _slicedToArray(_useState5, 2),
    status = _useState6[0],
    setStatus = _useState6[1];
  var _useState7 = useState([]),
    _useState8 = _slicedToArray(_useState7, 2),
    errors = _useState8[0],
    setErrors = _useState8[1];
  var _useState9 = useState(undefined),
    _useState10 = _slicedToArray(_useState9, 2),
    nextPageCursor = _useState10[0],
    setNextPageCursor = _useState10[1];
  var initialData = useRef();
  var _ref2 = site || {},
    cloudId = _ref2.cloudId,
    siteUrl = _ref2.url;
  var _useBasicFilterAGG = useBasicFilterAGG(),
    getFieldValues = _useBasicFilterAGG.getFieldValues;
  var fetchFilterOptions = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _ref4,
      pageCursor,
      searchString,
      isNewSearch,
      isRequestLikeInitialSearch,
      initialResponseData,
      response,
      mappedResponse,
      mappedTotalCount,
      _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _ref4 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, pageCursor = _ref4.pageCursor, searchString = _ref4.searchString;
          if (cloudId) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return");
        case 3:
          isNewSearch = !pageCursor;
          isRequestLikeInitialSearch = !pageCursor && !searchString;
          initialResponseData = initialData.current;
          isNewSearch ? setStatus('loading') : setStatus('loadingMore');
          _context.prev = 7;
          if (!(isRequestLikeInitialSearch && initialResponseData)) {
            _context.next = 12;
            break;
          }
          _context.t0 = initialResponseData;
          _context.next = 15;
          break;
        case 12:
          _context.next = 14;
          return getFieldValues({
            cloudId: cloudId,
            jql: '',
            jqlTerm: filterType,
            // @ts-expect-error - Type 'string | undefined' is not assignable to type 'string'
            searchString: searchString,
            pageCursor: pageCursor
          });
        case 14:
          _context.t0 = _context.sent;
        case 15:
          response = _context.t0;
          if (!(response.errors && response.errors.length > 0)) {
            _context.next = 20;
            break;
          }
          setStatus('rejected');
          setErrors(response.errors);
          return _context.abrupt("return");
        case 20:
          mappedResponse = mapFieldValuesToFilterOptions(_objectSpread(_objectSpread({}, response), {}, {
            siteUrl: siteUrl
          }));
          mappedTotalCount = mapFieldValuesToTotalCount(response);
          /**
           * For assignee filter option, we want `Unassigned` as an option.
           * Since we add it manually, we also need to update the total count by +1
           */
          if (filterType === 'assignee' && !searchString) {
            mappedTotalCount += 1;
          }
          if (isNewSearch) {
            if (isRequestLikeInitialSearch) {
              /**
               * The initial dataset is used in couple of paths, eg: when a user searches and clears the search text.
               * During these times, we dont want to fetch data again and again, hence a mini cache setup to store and provide the initial dataset
               */
              initialData.current = response;

              /**
               * For assignee filter option, we want `Unassigned` as an option.
               * Since `Unassigned/EMPTY` is not returned by the API, we add it manually, but only for the initial list
               */
              if (filterType === 'assignee') {
                mappedResponse.unshift(getAssigneeUnassignedFilterOption(formatMessage));
              }
            }
            setFilterOptions(mappedResponse);
          } else {
            setFilterOptions([].concat(_toConsumableArray(filterOptions), _toConsumableArray(mappedResponse)));
          }
          setTotalCount(mappedTotalCount);
          setNextPageCursor(mapFieldValuesToPageCursor(response));
          setStatus('resolved');
          _context.next = 33;
          break;
        case 29:
          _context.prev = 29;
          _context.t1 = _context["catch"](7);
          setStatus('rejected');
          setErrors([_context.t1]);
        case 33:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[7, 29]]);
  })), [cloudId, filterOptions, filterType, formatMessage, getFieldValues, siteUrl]);
  useEffect(function () {
    if (status !== 'rejected' && errors.length !== 0) {
      setErrors([]);
    }
  }, [errors.length, status]);
  var reset = useCallback(function () {
    setStatus('empty');
    setFilterOptions([]);
    setErrors([]);
    setTotalCount(0);
    setNextPageCursor(undefined);
    initialData.current = undefined;
  }, []);
  return {
    filterOptions: filterOptions,
    fetchFilterOptions: fetchFilterOptions,
    totalCount: totalCount,
    pageCursor: nextPageCursor,
    status: status,
    errors: errors,
    reset: reset
  };
};