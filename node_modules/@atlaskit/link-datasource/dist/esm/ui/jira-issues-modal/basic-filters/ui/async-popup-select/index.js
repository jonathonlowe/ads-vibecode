import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useCallback, useEffect, useRef, useState } from 'react';
import isEqual from 'lodash/isEqual';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import { fg } from '@atlaskit/platform-feature-flags';
import { FilterPopupSelect } from '../../../../common/modal/popup-select';
import { SEARCH_DEBOUNCE_MS } from '../../../../common/modal/popup-select/constants';
import { useFilterOptions } from '../../hooks/useFilterOptions';
import { asyncPopupSelectMessages } from './messages';
var AsyncPopupSelect = function AsyncPopupSelect(_ref) {
  var filterType = _ref.filterType,
    site = _ref.site,
    selection = _ref.selection,
    isJQLHydrating = _ref.isJQLHydrating,
    _ref$onSelectionChang = _ref.onSelectionChange,
    onSelectionChange = _ref$onSelectionChang === void 0 ? function () {} : _ref$onSelectionChang,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    searchTerm = _useState2[0],
    setSearchTerm = _useState2[1];
  var _useState3 = useState(selection),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedOptions = _useState4[0],
    setSelectedOptions = _useState4[1];
  var _ref2 = site || {},
    cloudId = _ref2.cloudId;
  var currentSiteCloudId = useRef(cloudId || '');
  var _useFilterOptions = useFilterOptions({
      filterType: filterType,
      site: site
    }),
    filterOptions = _useFilterOptions.filterOptions,
    fetchFilterOptions = _useFilterOptions.fetchFilterOptions,
    totalCount = _useFilterOptions.totalCount,
    status = _useFilterOptions.status,
    pageCursor = _useFilterOptions.pageCursor,
    resetHook = _useFilterOptions.reset,
    errors = _useFilterOptions.errors;
  var _useDebouncedCallback = useDebouncedCallback(function (searchString) {
      fetchFilterOptions({
        searchString: searchString
      });
    }, SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    handleDebouncedFetchFilterOptions = _useDebouncedCallback2[0];
  var handleInputChange = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newSearchTerm) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setSearchTerm(newSearchTerm);
            handleDebouncedFetchFilterOptions(newSearchTerm);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [handleDebouncedFetchFilterOptions]);
  var handleOptionSelection = useCallback(function (newValue) {
    onSelectionChange(filterType, newValue);
  }, [filterType, onSelectionChange]);
  var handleShowMore = useCallback(function () {
    if (pageCursor) {
      fetchFilterOptions({
        pageCursor: pageCursor,
        searchString: searchTerm
      });
    }
  }, [fetchFilterOptions, pageCursor, searchTerm]);
  var handleMenuOpen = useCallback(function () {
    if (status === 'empty' || status === 'rejected') {
      // if user searches and gets status as rejected, we want the dropdown to try load the request with searchString when the user reopens the dropdown
      fetchFilterOptions({
        searchString: searchTerm
      });
    }
  }, [fetchFilterOptions, searchTerm, status]);
  useEffect(function () {
    if (cloudId && currentSiteCloudId.current !== cloudId) {
      currentSiteCloudId.current = cloudId;
      setSearchTerm('');
      resetHook();
    }
  }, [cloudId, resetHook]);
  useEffect(function () {
    if (!isEqual(selection, selectedOptions)) {
      setSelectedOptions(selection);
    }
  }, [selectedOptions, selection]);
  var filterOptionsLength = filterOptions.length;
  var isError = status === 'rejected';
  var isLoading = status === 'loading' || status === 'empty';
  var isLoadingMore = status === 'loadingMore';
  var isEmpty = status === 'resolved' && filterOptionsLength === 0;
  var popupSelectOptions = isLoading || isError ? [] : filterOptions; // if not set to [], then on loading, no loading UI will be shown
  var areAllResultsLoaded = filterOptionsLength === totalCount;
  var filterName = "jlol-basic-filter-".concat(filterType);
  var shouldShowFooter = (status === 'resolved' || isLoadingMore) && filterOptionsLength > 0; // footer should not disappear when there is an inline spinner for loading more data
  var shouldDisplayShowMoreButton = status === 'resolved' && !!pageCursor && !areAllResultsLoaded;
  var triggerButtonLabel = formatMessage(!fg('platform-linking-visual-refresh-sllv') && filterType === 'type' ? asyncPopupSelectMessages.typeLabelOld : asyncPopupSelectMessages["".concat(filterType, "Label")]);
  return /*#__PURE__*/React.createElement(FilterPopupSelect, {
    filterName: filterName,
    status: status,
    showLoading: isLoading,
    showHydrating: isJQLHydrating,
    isDisabled: isDisabled,
    totalCount: totalCount,
    shouldShowFooter: shouldShowFooter,
    selectedOptions: selectedOptions,
    options: popupSelectOptions,
    buttonLabel: triggerButtonLabel,
    searchPlaceholder: fg('platform-linking-visual-refresh-sllv') ? formatMessage(asyncPopupSelectMessages["".concat(filterType, "SearchPlaceholder")]) : undefined,
    onInputChange: handleInputChange,
    onSelectionChange: handleOptionSelection,
    onMenuOpen: handleMenuOpen,
    menuListProps: {
      filterName: filterName,
      isError: isError,
      isEmpty: isEmpty,
      isLoading: isLoading,
      isLoadingMore: isLoadingMore,
      handleShowMore: handleShowMore,
      errors: errors,
      showMore: shouldDisplayShowMoreButton
    }
  });
};
export default AsyncPopupSelect;