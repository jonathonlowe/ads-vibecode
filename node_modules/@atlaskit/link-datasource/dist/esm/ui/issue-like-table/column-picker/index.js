/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["isOpen"];
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import CustomizeIcon from '@atlaskit/icon/core/customize';
import BoardIcon from '@atlaskit/icon/core/migration/board';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import ChevronDownIconOld from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { CheckboxOption, createFilter, PopupSelect } from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import { succeedUfoExperience } from '../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../contexts/datasource-experience-id';
import { ConcatenatedMenuList, MenuItem } from './concatenated-menu-list';
import { columnPickerMessages } from './messages';
var styles = {
  chevronIconStyles: "_1e0c1txw _4cvr1h6o"
};
export var ColumnPicker = function ColumnPicker(_ref) {
  var columns = _ref.columns,
    selectedColumnKeys = _ref.selectedColumnKeys,
    onSelectedColumnKeysChange = _ref.onSelectedColumnKeysChange,
    onOpen = _ref.onOpen;
  var intl = useIntl();
  var experienceId = useDatasourceExperienceId();
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    allOptions = _useState2[0],
    setAllOptions = _useState2[1];
  var pickerRef = useRef(null);
  var mapColumnToOption = useCallback(function (_ref2) {
    var key = _ref2.key,
      title = _ref2.title;
    return {
      label: title,
      value: key
    };
  }, []);
  var selectedOptions = columns.filter(function (_ref3) {
    var key = _ref3.key;
    return selectedColumnKeys.includes(key);
  }).map(mapColumnToOption);
  useEffect(function () {
    setAllOptions(columns.filter(function (_ref4) {
      var title = _ref4.title;
      return title;
    }).map(mapColumnToOption));
  }, [columns, mapColumnToOption]);
  var handleChange = useCallback(function (selectedOptions) {
    var selectedValues = selectedOptions.map(function (_ref5) {
      var value = _ref5.value;
      return value;
    });
    selectedValues.sort(function (a, b) {
      var indexB = columns.findIndex(function (_ref6) {
        var key = _ref6.key;
        return key === b;
      });
      var indexA = columns.findIndex(function (_ref7) {
        var key = _ref7.key;
        return key === a;
      });
      return indexA - indexB;
    });
    onSelectedColumnKeysChange(selectedValues);
  }, [columns, onSelectedColumnKeysChange]);
  var sortSelectedColumnsTop = useCallback(function () {
    if (!allOptions.length) {
      return;
    }
    var nonSelectedOptions = allOptions.filter(function (option) {
      return !selectedOptions.find(function (selectedOption) {
        return selectedOption.value === option.value;
      });
    });
    var sortedOptions = [].concat(_toConsumableArray(selectedOptions), _toConsumableArray(nonSelectedOptions));
    sortedOptions.length > 0 && setAllOptions(sortedOptions);
  }, [allOptions, selectedOptions]);
  var stopEscapePropagationWhenOpen = function stopEscapePropagationWhenOpen(e) {
    if (e.key === 'Escape') {
      e.stopPropagation();
    }
  };
  var handleOpen = useCallback(function () {
    onOpen && onOpen();
    void sortSelectedColumnsTop();
  }, [onOpen, sortSelectedColumnsTop]);

  // If only 1 option is selected, disable it since we don't want user to uncheck everything
  var handleIsOptionDisabled = function handleIsOptionDisabled(option, selectValue) {
    return selectValue.length === 1 && selectValue.some(function (selectedValue) {
      return selectedValue.value === option.value;
    });
  };
  useEffect(function () {
    if (allOptions.length) {
      var _pickerRef$current;
      // necessary to refocus the search input after the loading state
      pickerRef === null || pickerRef === void 0 || (_pickerRef$current = pickerRef.current) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.selectRef) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.select) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.inputRef) === null || _pickerRef$current === void 0 || _pickerRef$current.focus();
    }
  }, [allOptions]);
  useEffect(function () {
    if (allOptions.length) {
      if (experienceId) {
        succeedUfoExperience({
          name: 'column-picker-rendered'
        }, experienceId);
      }
    }
  }, [allOptions, experienceId]);
  var MenuOption = fg('platform-linking-visual-refresh-sllv') ? MenuItem : CheckboxOption;
  return /*#__PURE__*/React.createElement(PopupSelect, {
    classNamePrefix: 'column-picker-popup',
    testId: 'column-picker-popup',
    components: {
      Option: MenuOption,
      MenuList: ConcatenatedMenuList
    },
    filterOption: createFilter({
      ignoreAccents: false
    }),
    options: allOptions,
    value: selectedOptions
    // @ts-ignore - https://product-fabric.atlassian.net/browse/DSP-21000
    ,
    onOpen: handleOpen,
    closeMenuOnSelect: false,
    hideSelectedOptions: false,
    id: 'column-picker-popup',
    isMulti: true,
    ref: pickerRef,
    isOptionDisabled: handleIsOptionDisabled,
    placeholder: intl.formatMessage(columnPickerMessages.search),
    onKeyDown: stopEscapePropagationWhenOpen,
    label: "Search for fields",
    onChange: handleChange,
    isLoading: allOptions.length === 0,
    target: function target(_ref8) {
      var isOpen = _ref8.isOpen,
        triggerProps = _objectWithoutProperties(_ref8, _excluded);
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: intl.formatMessage(columnPickerMessages.tooltip)
      }, function (tooltipProps) {
        return /*#__PURE__*/React.createElement(Button, _extends({}, tooltipProps, triggerProps, {
          isSelected: isOpen,
          spacing: "compact",
          appearance: fg('platform-linking-visual-refresh-sllv') ? 'default' : 'subtle',
          testId: "column-picker-trigger-button",
          iconBefore: function iconBefore() {
            return /*#__PURE__*/React.createElement(Box, {
              as: "span",
              xcss: styles.chevronIconStyles
            }, fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(CustomizeIcon, {
              label: "customize"
            }) : /*#__PURE__*/React.createElement(BoardIcon, {
              color: "currentColor",
              label: "board",
              LEGACY_size: "medium",
              spacing: "spacious",
              LEGACY_margin: "0 0 0 4px"
            }), fg('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/React.createElement(ChevronDownIcon, {
              label: "down"
            }) : /*#__PURE__*/React.createElement(ChevronDownIconOld, {
              color: "currentColor",
              label: "down",
              LEGACY_size: "medium"
            }));
          }
        }), '');
      });
    }
  });
};