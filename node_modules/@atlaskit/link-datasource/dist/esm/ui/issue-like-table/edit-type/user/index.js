import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useMemo, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { useDebouncedCallback } from 'use-debounce';
import Avatar, { AvatarItem } from '@atlaskit/avatar';
import { Layering } from '@atlaskit/layering';
import Select from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import { failUfoExperience, succeedUfoExperience } from '../../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../../contexts/datasource-experience-id';
import { useLoadOptions } from '../../../../hooks/useLoadOptions';
import { SEARCH_DEBOUNCE_MS } from '../../../common/modal/popup-select/constants';
import { USER_TYPE_TEST_ID } from '../../render-type/user';
import { userTypeMessages } from '../../render-type/user/messages';
import { InlineEditUFOExperience } from '../../table-cell-content/inline-edit';
import { getCleanedSelectProps } from '../../utils';
var UserEditType = function UserEditType(props) {
  var _currentValue$values;
  var currentValue = props.currentValue,
    labelId = props.labelId,
    executeFetch = props.executeFetch;
  var _useState = useState({
      query: ''
    }),
    _useState2 = _slicedToArray(_useState, 2),
    fetchInputs = _useState2[0],
    setFetchInputs = _useState2[1];
  var _useDebouncedCallback = useDebouncedCallback(function (query) {
      return setFetchInputs({
        query: query
      });
    }, SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = _slicedToArray(_useDebouncedCallback, 1),
    handleUserInputDebounced = _useDebouncedCallback2[0];
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var emptyUser = useMemo(function () {
    return {
      accountId: null,
      displayName: formatMessage(userTypeMessages.userDefaultdisplayNameValue),
      avatarUrls: {}
    };
  }, [formatMessage]);
  var _useLoadOptions = useLoadOptions({
      executeFetch: executeFetch,
      fetchInputs: fetchInputs,
      emptyOption: emptyUser
    }),
    options = _useLoadOptions.options,
    isLoading = _useLoadOptions.isLoading,
    hasFailed = _useLoadOptions.hasFailed;
  var experienceId = useDatasourceExperienceId();
  useEffect(function () {
    if (!experienceId) {
      return;
    }
    if (hasFailed) {
      failUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    } else if (!isLoading) {
      succeedUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    }
  }, [experienceId, isLoading, hasFailed]);
  return /*#__PURE__*/React.createElement(Layering, {
    isDisabled: false
  }, /*#__PURE__*/React.createElement(Select, _extends({}, getCleanedSelectProps(props), {
    autoFocus: true,
    defaultMenuIsOpen: true,
    blurInputOnSelect: true,
    options: options,
    isLoading: isLoading,
    testId: "inline-edit-user",
    filterOption: filterOption,
    menuPlacement: "auto",
    onInputChange: handleUserInputDebounced,
    value: currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0],
    labelId: labelId,
    getOptionValue: function getOptionValue(option) {
      return option.atlassianUserId;
    },
    getOptionLabel: function getOptionLabel(option) {
      return option.displayName || '';
    },
    formatOptionLabel: function formatOptionLabel(option) {
      var _option$displayName;
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: (_option$displayName = option.displayName) !== null && _option$displayName !== void 0 ? _option$displayName : ''
      }, /*#__PURE__*/React.createElement(AvatarItem, {
        avatar: /*#__PURE__*/React.createElement(Avatar, {
          appearance: "circle",
          size: 'small',
          src: option.avatarSource,
          testId: "".concat(USER_TYPE_TEST_ID, "--avatar--").concat(option.atlassianUserId)
        }),
        primaryText: option.displayName
      }));
    },
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'user',
        values: e ? [e] : []
      });
    }
  })));
};
var filterOption = function filterOption(option, inputValue) {
  var _option$data$displayN, _option$data$displayN2;
  return (_option$data$displayN = (_option$data$displayN2 = option.data.displayName) === null || _option$data$displayN2 === void 0 ? void 0 : _option$data$displayN2.toLowerCase().includes(inputValue.toLowerCase())) !== null && _option$data$displayN !== void 0 ? _option$data$displayN : false;
};
export default UserEditType;