import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
import { Layering } from '@atlaskit/layering';
import { fg } from '@atlaskit/platform-feature-flags';
import Select from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import { failUfoExperience, succeedUfoExperience } from '../../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../../contexts/datasource-experience-id';
import { useLoadOptions } from '../../../../hooks/useLoadOptions';
import { SharedIconComponent } from '../../shared-components/icon';
import { InlineEditUFOExperience } from '../../table-cell-content/inline-edit';
import { getCleanedSelectProps } from '../../utils';
/**
 * Should be gated by FF rollout of platform-datasources-enable-two-way-sync-priority
 */
var IconEditType = function IconEditType(props) {
  var _currentValue$values;
  var currentValue = props.currentValue,
    labelId = props.labelId,
    executeFetch = props.executeFetch;
  var _useLoadOptions = useLoadOptions({
      executeFetch: executeFetch
    }),
    options = _useLoadOptions.options,
    isLoading = _useLoadOptions.isLoading,
    hasFailed = _useLoadOptions.hasFailed;
  var experienceId = useDatasourceExperienceId();
  useEffect(function () {
    if (!experienceId) {
      return;
    }
    if (hasFailed) {
      failUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    } else if (!isLoading) {
      succeedUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    }
  }, [experienceId, isLoading, hasFailed]);
  return /*#__PURE__*/React.createElement(Layering, {
    isDisabled: false
  }, /*#__PURE__*/React.createElement(Select, _extends({}, getCleanedSelectProps(props), {
    autoFocus: true,
    blurInputOnSelect: true,
    defaultMenuIsOpen: true
    // We can't update this field if we don't have an ID - however the ID
    // is typed optional.
    ,
    options: fg('platform-datasources-inline-edit-id-checks') ? options.filter(function (option) {
      return option.id;
    }) : options,
    menuPlacement: "auto",
    isLoading: isLoading,
    filterOption: filterOption,
    testId: "inline-edit-priority",
    value: currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0],
    labelId: labelId,
    getOptionValue: function getOptionValue(option) {
      return option.text || '';
    },
    formatOptionLabel: function formatOptionLabel(_ref) {
      var source = _ref.source,
        label = _ref.label,
        text = _ref.text;
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: text !== null && text !== void 0 ? text : ''
      }, /*#__PURE__*/React.createElement(SharedIconComponent, {
        iconUrl: source,
        text: text,
        label: label,
        testId: "inline-edit-priority-option-".concat(label)
      }));
    },
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'icon',
        values: e ? [e] : []
      });
    }
  })));
};
var filterOption = function filterOption(option, inputValue) {
  return option.label.toLowerCase().includes(inputValue.toLowerCase());
};
export default IconEditType;