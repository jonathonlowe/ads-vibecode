import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
import { Layering } from '@atlaskit/layering';
import Lozenge from '@atlaskit/lozenge';
import { fg } from '@atlaskit/platform-feature-flags';
import Select from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import { failUfoExperience, succeedUfoExperience } from '../../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../../contexts/datasource-experience-id';
import { useLoadOptions } from '../../../../hooks/useLoadOptions';
import { InlineEditUFOExperience } from '../../table-cell-content/inline-edit';
import { getCleanedSelectProps } from '../../utils';
var StatusEditType = function StatusEditType(props) {
  var _currentValue$values;
  var currentValue = props.currentValue,
    labelId = props.labelId,
    executeFetch = props.executeFetch;
  var _useLoadOptions = useLoadOptions({
      executeFetch: executeFetch
    }),
    options = _useLoadOptions.options,
    isLoading = _useLoadOptions.isLoading,
    hasFailed = _useLoadOptions.hasFailed;
  var experienceId = useDatasourceExperienceId();
  useEffect(function () {
    if (!experienceId) {
      return;
    }
    if (hasFailed) {
      failUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    } else if (!isLoading) {
      succeedUfoExperience({
        name: InlineEditUFOExperience
      }, experienceId);
    }
  }, [experienceId, isLoading, hasFailed]);
  return /*#__PURE__*/React.createElement(Layering, {
    isDisabled: false
  }, /*#__PURE__*/React.createElement(Select, _extends({}, getCleanedSelectProps(props), {
    autoFocus: true,
    options: options,
    defaultMenuIsOpen: true,
    blurInputOnSelect: true,
    menuPlacement: "auto",
    isLoading: isLoading,
    filterOption: filterOption,
    testId: "inline-edit-status",
    getOptionValue: function getOptionValue(option) {
      return option.text;
    },
    value: currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0],
    labelId: labelId,
    formatOptionLabel: function formatOptionLabel(option) {
      var _option$style, _option$style2;
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: option.text
      }, /*#__PURE__*/React.createElement(Lozenge, _extends({
        testId: "inline-edit-status-option-".concat(option.text)
      }, option.style, {
        isBold: fg('platform-component-visual-refresh') ? ((_option$style = option.style) === null || _option$style === void 0 ? void 0 : _option$style.isBold) !== false : (_option$style2 = option.style) === null || _option$style2 === void 0 ? void 0 : _option$style2.isBold
      }), option.text));
    },
    getOptionLabel: function getOptionLabel(option) {
      return option.text;
    },
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'status',
        values: e ? [e] : []
      });
    }
  })));
};
var filterOption = function filterOption(option, inputValue) {
  return option.data.text.toLowerCase().includes(inputValue.toLowerCase());
};
export default StatusEditType;