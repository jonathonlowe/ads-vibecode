import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
import { Layering } from '@atlaskit/layering';
import Textfield from '@atlaskit/textfield';
import { succeedUfoExperience } from '../../../../analytics/ufoExperiences';
import { useDatasourceExperienceId } from '../../../../contexts/datasource-experience-id';
var TextEditType = function TextEditType(props) {
  var _currentValue$values$, _currentValue$values;
  var experienceId = useDatasourceExperienceId();
  var currentValue = props.currentValue,
    labelId = props.labelId;
  useEffect(function () {
    if (experienceId) {
      succeedUfoExperience({
        name: 'inline-edit-rendered'
      }, experienceId);
    }
  }, [experienceId]);
  return /*#__PURE__*/React.createElement(Layering, {
    isDisabled: false
  }, /*#__PURE__*/React.createElement(Textfield, _extends({}, props, {
    autoFocus: true,
    isCompact: true,
    testId: "inline-edit-text",
    style: {
      // We need 8px left padding to match read only version, but there is already 1px of border
      padding: "var(--ds-space-100, 8px)".concat(" calc(", "var(--ds-space-100, 8px)", " - 1px)")
    },
    value: (_currentValue$values$ = currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0]) !== null && _currentValue$values$ !== void 0 ? _currentValue$values$ : '',
    "aria-labelledby": labelId,
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'string',
        values: [e.currentTarget.value]
      });
    }
  })));
};
export default TextEditType;