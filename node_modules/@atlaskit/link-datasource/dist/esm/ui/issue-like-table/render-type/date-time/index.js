import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { useIntl } from 'react-intl-next';
import { Text } from '@atlaskit/primitives/compiled';
export var DATETIME_TYPE_TEST_ID = 'link-datasource-render-type--datetime';
var dateOptions = {
  month: 'short',
  day: 'numeric',
  year: 'numeric'
};
var timeOptions = {
  hour12: false,
  hour: '2-digit',
  minute: '2-digit'
};
export function getFormattedDate(value) {
  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datetime';
  var formatDate = arguments.length > 2 ? arguments[2] : undefined;
  /* In some cases we get a value of `2023-12-20` which when parsed by JS assumes meantime timezone, causing the date
     to be one day off in some timezones. We want it to display the date without converting timezones and a solution
    is to replace the hyphens with slashes. So it should be 20th Dec regardless of the timezone in this case.
     See https://stackoverflow.com/a/31732581
    */
  var dateValue = /^\d{4}-\d{2}-\d{2}$/.exec(value) ? value.replace(/-/g, '/') : value;
  var date = new Date(dateValue);
  if (!value || isNaN(date.getTime())) {
    return '';
  }
  var options = {
    date: dateOptions,
    time: timeOptions,
    datetime: _objectSpread(_objectSpread({}, dateOptions), timeOptions)
  };
  return formatDate(date, options[display] || options['date']);
}
var DateTimeRenderType = function DateTimeRenderType(_ref) {
  var value = _ref.value,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? DATETIME_TYPE_TEST_ID : _ref$testId,
    _ref$display = _ref.display,
    display = _ref$display === void 0 ? 'datetime' : _ref$display;
  var intl = useIntl();
  var formattedString = getFormattedDate(value, display, intl.formatDate);
  if (formattedString === '') {
    return /*#__PURE__*/React.createElement(React.Fragment, null);
  }
  return /*#__PURE__*/React.createElement(Text, {
    testId: testId
  }, formattedString);
};
export default DateTimeRenderType;