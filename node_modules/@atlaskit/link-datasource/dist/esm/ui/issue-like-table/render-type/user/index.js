/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "style"];
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
import React, { useState } from 'react';
import { FormattedMessage } from 'react-intl-next';
import Avatar from '@atlaskit/avatar';
import AvatarGroup from '@atlaskit/avatar-group';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { WidthObserver } from '@atlaskit/width-detector';
import { userTypeMessages } from './messages';
var styles = {
  userWrapperStyles: "_11c82smr _1e0c1txw _4cvr1h6o",
  avatarWrapperStyles: "_2hwxu2gc",
  widthObserverWrapperStyles: "_kqswh2mm"
};
var labelWrapperStyles = null;

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var AvatarGroupWrapperStyles = forwardRef(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_k7zygrf3", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  AvatarGroupWrapperStyles.displayName = 'AvatarGroupWrapperStyles';
}
var getMaxUserCount = function getMaxUserCount(userCount, availableWidth) {
  if (availableWidth <= 28) {
    // If width is less than or equal to 28px, we should only display the user count
    return 1;
  }
  var defaultMaxCount = 5;
  var usersNumFitToAvailableWidth = Math.ceil((availableWidth - 28) / 20);
  return usersNumFitToAvailableWidth > defaultMaxCount ? defaultMaxCount : usersNumFitToAvailableWidth;
};
export var USER_TYPE_TEST_ID = 'link-datasource-render-type--user';
var UserType = function UserType(_ref2) {
  var users = _ref2.users;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    width = _useState2[0],
    setWidth = _useState2[1];
  var multipleUsers = false;
  if (fg('platform-datasources-enable-two-way-sync-assignee')) {
    multipleUsers = users.length === 1;
  } else {
    multipleUsers = users.length <= 1;
  }
  if (multipleUsers) {
    var _ref3 = users[0] || {},
      avatarSource = _ref3.avatarSource,
      _ref3$avatarSize = _ref3.avatarSize,
      avatarSize = _ref3$avatarSize === void 0 ? 'small' : _ref3$avatarSize,
      displayName = _ref3.displayName,
      _ref3$testId = _ref3.testId,
      testId = _ref3$testId === void 0 ? USER_TYPE_TEST_ID : _ref3$testId,
      children = _ref3.children;
    return /*#__PURE__*/React.createElement(Box, {
      xcss: styles.userWrapperStyles,
      testId: testId
    }, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.avatarWrapperStyles
    }, /*#__PURE__*/React.createElement(Avatar, {
      appearance: "circle",
      size: avatarSize || 'small',
      src: avatarSource,
      testId: "".concat(testId, "--avatar")
    })), /*#__PURE__*/React.createElement("span", {
      className: ax(["_1reo15vq _18m915vq _1bto1l2s _o5721q9c"])
    }, children || displayName || /*#__PURE__*/React.createElement(FormattedMessage, userTypeMessages.userDefaultdisplayNameValue)));
  } else {
    var maxCount = width !== null ? getMaxUserCount(users.length, width) : 5;
    var data = users.filter(function (user) {
      return !!user.displayName;
    }).map(function (_ref4) {
      var atlassianUserId = _ref4.atlassianUserId,
        displayName = _ref4.displayName,
        avatarSource = _ref4.avatarSource,
        testId = _ref4.testId;
      return {
        key: atlassianUserId,
        name: displayName,
        src: avatarSource,
        testId: "".concat(testId, "--avatar")
      };
    });
    return /*#__PURE__*/React.createElement(AvatarGroupWrapperStyles, null, /*#__PURE__*/React.createElement(Box, {
      xcss: styles.widthObserverWrapperStyles
    }, /*#__PURE__*/React.createElement(WidthObserver, {
      setWidth: setWidth
    })), /*#__PURE__*/React.createElement(AvatarGroup, {
      data: data,
      maxCount: maxCount,
      size: "small",
      isTooltipDisabled: true,
      testId: USER_TYPE_TEST_ID
    }));
  }
};
export default UserType;