/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "style"];
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { Box } from '@atlaskit/primitives/compiled';
import TextRenderType from '../text';
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- To migrate as part of go/ui-styling-standard
var IconWrapper = forwardRef(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1txw _4cvr1h6o _1bah1e5h", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  IconWrapper.displayName = 'IconWrapper';
}
var styles = {
  textWrapperStyles: "_1reo15vq _18m915vq _18u0u2gc _1bto1l2s _o5721q9c"
};
export var ICON_TYPE_TEST_ID = 'link-datasource-render-type--icon';
export var ICON_TYPE_TEXT_TEST_ID = "".concat(ICON_TYPE_TEST_ID, "-text");

/**
 * @deprecated: To be cleaned up and replaced with new-icon after
 * `platform-datasources-enable-two-way-sync-priority` rollout.
 */
var IconRenderType = function IconRenderType(_ref2) {
  var _ref2$label = _ref2.label,
    label = _ref2$label === void 0 ? '' : _ref2$label,
    text = _ref2.text,
    source = _ref2.source,
    _ref2$testId = _ref2.testId,
    testId = _ref2$testId === void 0 ? ICON_TYPE_TEST_ID : _ref2$testId;
  return /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement("img", {
    src: source,
    alt: label,
    "data-testid": testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      minWidth: '20px',
      maxWidth: '20px'
    } // having just width: '20px' shrinks it when table width is reduced
  }), text && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.textWrapperStyles
  }, /*#__PURE__*/React.createElement(TextRenderType, {
    testId: ICON_TYPE_TEXT_TEST_ID,
    text: text
  })));
};
export default IconRenderType;