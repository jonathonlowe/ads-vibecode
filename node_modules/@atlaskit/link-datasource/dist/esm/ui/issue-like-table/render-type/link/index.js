import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useMemo } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Card } from '@atlaskit/smart-card';
import { HoverCard } from '@atlaskit/smart-card/hover-card';
import LinkUrl from '@atlaskit/smart-card/link-url';
import { N300 } from '@atlaskit/theme/colors';
var linkStyles = {
  key: {
    fontWeight: "var(--ds-font-weight-semibold, 600)",
    color: "var(--ds-text-subtlest, ".concat(N300, ")"),
    marginTop: "var(--ds-space-250, 20px)"
  },
  default: {}
};
export var LINK_TYPE_TEST_ID = 'link-datasource-render-type--link';
var LinkRenderType = function LinkRenderType(_ref) {
  var style = _ref.style,
    url = _ref.url,
    text = _ref.text,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? LINK_TYPE_TEST_ID : _ref$testId;
  var linkStyle = useMemo(function () {
    return (style === null || style === void 0 ? void 0 : style.appearance) && linkStyles[style.appearance] || {};
  }, [style]);
  var anchor = useMemo(function () {
    return /*#__PURE__*/React.createElement(HoverCard, {
      url: url
    }, /*#__PURE__*/React.createElement(LinkUrl, _extends({
      href: url
      // NOTE: This will no longer apply styles to `@atlaskit/link` when platform_editor_hyperlink_underline is enabled.
      // Wrap `@atlaskit/link` in a Text component to provide font styles to Link
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    }, fg('platform-linking-visual-refresh-sllv') ? {} : {
      style: _objectSpread({}, linkStyle)
    }, {
      "data-testid": testId,
      target: "_blank"
    }), text || url));
  }, [linkStyle, url, text, testId]);
  var SmartCard = function SmartCard() {
    var handleClick = function handleClick(e) {
      e.preventDefault();
      window.open(url, '_blank', 'noopener, noreferrer');
    };
    return /*#__PURE__*/React.createElement(Card, {
      appearance: "inline",
      onClick: handleClick,
      url: url,
      testId: testId,
      fallbackComponent: function fallbackComponent() {
        return anchor;
      }
    });
  };

  // url can be undefined before data is fetched whilst adding new link column to display
  if (!url) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, text ? anchor : /*#__PURE__*/React.createElement(SmartCard, null), /*#__PURE__*/React.createElement("br", null));
};
export default /*#__PURE__*/React.memo(LinkRenderType);