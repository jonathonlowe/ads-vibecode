/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["as", "style"];
import "./index.compiled.css";
import { forwardRef } from 'react';
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment } from 'react';
import { useIntl } from 'react-intl-next';
import { LoadingButton } from '@atlaskit/button';
import { ErrorMessage, Field } from '@atlaskit/form';
import CrossCircleIcon from '@atlaskit/icon/core/migration/cross-circle';
import QuestionCircleIcon from '@atlaskit/icon/core/migration/question-circle';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import CheckCircleIcon from '@atlaskit/icon/core/migration/success--check-circle';
import Spinner from '@atlaskit/spinner';
import Textfield from '@atlaskit/textfield';
import { G300, N500, R400 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { useValidateAqlText } from '../../../../hooks/useValidateAqlText';
import { aqlKey } from '../../../../types/assets/types';
import { searchInputMessages } from './messages';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
var FieldContainer = forwardRef(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_16jlkb7n _1o9zkb7n _i0dlf1ug _19pkx0bf", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  FieldContainer.displayName = 'FieldContainer';
}
var buttonBaseStyles = null;
var AQLSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-assets-query-language-aql/';
var searchButtonStyles = null;
var renderValidatorIcon = function renderValidatorIcon(lastValidationResult) {
  if (lastValidationResult.type === 'loading') {
    return /*#__PURE__*/React.createElement(Spinner, {
      size: "medium",
      testId: "assets-datasource-modal--aql-validating"
    });
  }
  if (lastValidationResult.type === 'invalid') {
    return /*#__PURE__*/React.createElement(CrossCircleIcon, {
      label: "label",
      color: "var(--ds-icon-danger, ".concat(R400, ")"),
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-invalid",
      spacing: "spacious"
    });
  }
  if (lastValidationResult.type === 'valid') {
    return /*#__PURE__*/React.createElement(CheckCircleIcon, {
      label: "label",
      color: "var(--ds-icon-success, ".concat(G300, ")"),
      LEGACY_size: "medium",
      testId: "assets-datasource-modal--aql-valid",
      spacing: "spacious"
    });
  }
  return /*#__PURE__*/React.createElement(SearchIcon, {
    label: "label",
    LEGACY_size: "medium",
    testId: "assets-datasource-modal--aql-idle",
    color: "currentColor",
    spacing: "spacious"
  });
};
export var AqlSearchInput = function AqlSearchInput(_ref2) {
  var value = _ref2.value,
    workspaceId = _ref2.workspaceId,
    _ref2$testId = _ref2.testId,
    testId = _ref2$testId === void 0 ? 'assets-datasource-modal--aql-search-input' : _ref2$testId,
    isSearching = _ref2.isSearching;
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useValidateAqlText = useValidateAqlText(workspaceId, value),
    debouncedValidation = _useValidateAqlText.debouncedValidation,
    lastValidationResult = _useValidateAqlText.lastValidationResult;
  return /*#__PURE__*/React.createElement(FieldContainer, null, /*#__PURE__*/React.createElement(Field, {
    name: aqlKey,
    defaultValue: value,
    validate: debouncedValidation
  }, function (_ref3) {
    var fieldProps = _ref3.fieldProps;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Textfield, _extends({}, fieldProps, {
      elemBeforeInput: /*#__PURE__*/React.createElement("span", {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        style: {
          paddingLeft: "var(--ds-space-075, 6px)",
          width: 24,
          display: 'flex'
        }
      }, renderValidatorIcon(lastValidationResult)),
      elemAfterInput: /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
        content: formatMessage(searchInputMessages.helpTooltipText),
        position: "bottom"
      }, /*#__PURE__*/React.createElement("a", {
        href: AQLSupportDocumentLink,
        target: "_blank",
        className: ax(["_1e0c1txw _4t3i1osq _kqswh2mm _4cvr1h6o _1bah1h6o _2lx21bp4 _2hwx1f3t"])
      }, /*#__PURE__*/React.createElement(QuestionCircleIcon, {
        label: "label",
        color: "var(--ds-icon, ".concat(N500, ")"),
        LEGACY_size: "medium",
        testId: "assets-datasource-modal-help",
        spacing: "spacious"
      }))), /*#__PURE__*/React.createElement(LoadingButton, {
        appearance: "primary",
        iconBefore: /*#__PURE__*/React.createElement(SearchIcon, {
          label: formatMessage(searchInputMessages.placeholder),
          LEGACY_size: "medium",
          color: "currentColor",
          spacing: "spacious"
        }),
        isLoading: isSearching,
        spacing: "none",
        testId: "assets-datasource-modal--aql-search-button",
        type: "submit",
        isDisabled: lastValidationResult.type !== 'valid',
        className: ax(["_2hwx12x7"])
      })),
      placeholder: formatMessage(searchInputMessages.placeholder),
      testId: testId
    })), lastValidationResult.type === 'invalid' && lastValidationResult.error && /*#__PURE__*/React.createElement(ErrorMessage, null, lastValidationResult.error));
  }));
};