import React, { type PropsWithChildren } from 'react';
import { type DatasourceAdf, type InlineCardAdf } from '@atlaskit/linking-common';
import type { DatasourceParameters } from '@atlaskit/linking-types';
import { type OnInsertFunction } from '../../../../common/types';
import { type DatasourceTableState } from '../../../../hooks/useDatasourceTableState';
import type { ColumnSizesMap } from '../../../issue-like-table/types';
import { type ColumnResizeProps } from '../datasources-table-in-modal-preview/use-column-resize';
import { type ColumnVisibilityProps } from '../datasources-table-in-modal-preview/use-column-visibility';
import { type ColumnWrappingProps } from '../datasources-table-in-modal-preview/use-column-wrapping';
type DatasourceContextValue<Parameters extends DatasourceParameters = DatasourceParameters> = ColumnVisibilityProps & ColumnWrappingProps & ColumnResizeProps & Pick<DatasourceContextProviderProps<Parameters>, 'datasourceId' | 'onInsert' | 'isValidParameters'> & {
    tableState: DatasourceTableState;
    visibleColumnKeys?: string[];
    parameters: Parameters | undefined;
    setParameters: React.Dispatch<React.SetStateAction<Parameters | undefined>>;
};
type DatasourceContextProviderProps<Parameters extends DatasourceParameters> = PropsWithChildren<{
    datasourceId: string;
    isValidParameters: (params: DatasourceParameters | undefined) => boolean;
    initialParameters: Parameters | undefined;
    initialVisibleColumnKeys?: string[] | undefined;
    initialWrappedColumnKeys?: string[] | undefined;
    initialColumnCustomSizes?: ColumnSizesMap | undefined;
    onInsert: OnInsertFunction<InlineCardAdf | DatasourceAdf<Parameters>>;
}>;
export declare const DatasourceContextProvider: <Parameters extends DatasourceParameters>({ children, datasourceId, isValidParameters, initialParameters, initialVisibleColumnKeys, initialColumnCustomSizes, initialWrappedColumnKeys, onInsert, }: DatasourceContextProviderProps<Parameters>) => React.JSX.Element;
export declare const useDatasourceContext: <Parameters extends DatasourceParameters>() => DatasourceContextValue<Parameters>;
export {};
