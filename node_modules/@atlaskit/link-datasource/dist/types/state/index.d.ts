import React from 'react';
import { type Action } from 'react-sweet-state';
import type { DatasourceDataResponseItem } from '@atlaskit/linking-types';
type UniqueIdentifier = string;
export interface DatasourceItem {
    ari: string | undefined;
    entityType: string | undefined;
    integrationKey: string | undefined;
    data: DatasourceDataResponseItem;
}
export interface State {
    items: Record<UniqueIdentifier, DatasourceItem>;
}
export declare const actions: {
    onUpdateItem: (id: string, data: DatasourceDataResponseItem) => Action<State, void, void>;
    onAddItems: (items: DatasourceDataResponseItem[], integrationKey: string | undefined, entityType: string | undefined) => Action<State, void, string[]>;
};
export declare const Store: import("react-sweet-state").Store<State, {
    onUpdateItem: (id: string, data: DatasourceDataResponseItem) => Action<State, void, void>;
    onAddItems: (items: DatasourceDataResponseItem[], integrationKey: string | undefined, entityType: string | undefined) => Action<State, void, string[]>;
}>;
export declare const useDatasourceItem: import("react-sweet-state").HookStateFunction<DatasourceItem | undefined, {
    id: string;
}>;
export declare const useDatasourceActions: import("react-sweet-state").HookActionsFunction<import("react-sweet-state").BoundActions<State, {
    onUpdateItem: (id: string, data: DatasourceDataResponseItem) => Action<State, void, void>;
    onAddItems: (items: DatasourceDataResponseItem[], integrationKey: string | undefined, entityType: string | undefined) => Action<State, void, string[]>;
}>>;
export declare const StoreContainer: ({ children }: {
    children: JSX.Element;
}) => React.JSX.Element;
export {};
