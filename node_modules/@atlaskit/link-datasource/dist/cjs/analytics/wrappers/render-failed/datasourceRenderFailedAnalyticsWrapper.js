"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _useErrorLogger = require("../../../hooks/useErrorLogger");
var _constants = require("../../constants");
var _index = require("../../index");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DatasourceRenderFailedAnalyticsWrapper = (0, _analyticsNext.withAnalyticsContext)(_constants.componentMetadata.generic)(function (props) {
  var _useDatasourceAnalyti = (0, _index.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  (0, _react.useEffect)(function () {
    fireEvent('operational.datasource.renderFailure', {
      reason: 'internal'
    });
  }, [fireEvent]);
  (0, _react.useEffect)(function () {
    (0, _useErrorLogger.logToSentry)(props.error, 'link-datasource', _objectSpread(_objectSpread({}, props.datasourceId && {
      datasourceId: props.datasourceId
    }), props.datasourceModalType && {
      datasourceModalType: props.datasourceModalType
    }));
  }, [props.error, props.datasourceId, props.datasourceModalType]);
  return props.children;
});
var _default = exports.default = DatasourceRenderFailedAnalyticsWrapper;