"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLoadOptions = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _linkingTypes = require("@atlaskit/linking-types");
var _useDatasourceTableFlag = require("./useDatasourceTableFlag");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var loadOptions = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var fetchInputs,
      executeFetch,
      result,
      operationStatus,
      entities,
      _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          fetchInputs = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          executeFetch = _args.length > 1 ? _args[1] : undefined;
          if (executeFetch) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return", []);
        case 4:
          _context.next = 6;
          return executeFetch(fetchInputs);
        case 6:
          result = _context.sent;
          operationStatus = result.operationStatus, entities = result.entities;
          if (!(operationStatus === _linkingTypes.ActionOperationStatus.FAILURE)) {
            _context.next = 10;
            break;
          }
          throw new Error('Failed to fetch status options');
        case 10:
          return _context.abrupt("return", entities !== null && entities !== void 0 ? entities : []);
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function loadOptions() {
    return _ref.apply(this, arguments);
  };
}();
var reducer = function reducer(state, payload) {
  return _objectSpread(_objectSpread({}, state), payload);
};
var useLoadOptions = exports.useLoadOptions = function useLoadOptions(_ref2) {
  var fetchInputs = _ref2.fetchInputs,
    executeFetch = _ref2.executeFetch,
    emptyOption = _ref2.emptyOption;
  var _useReducer = (0, _react.useReducer)(reducer, {
      isLoading: true,
      options: [],
      hasFailed: false
    }),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    _useReducer2$ = _useReducer2[0],
    options = _useReducer2$.options,
    isLoading = _useReducer2$.isLoading,
    hasFailed = _useReducer2$.hasFailed,
    dispatch = _useReducer2[1];
  var _useDatasourceTableFl = (0, _useDatasourceTableFlag.useDatasourceTableFlag)({
      isFetchAction: true
    }),
    showErrorFlag = _useDatasourceTableFl.showErrorFlag;
  (0, _react.useEffect)(function () {
    var isMounted = true;
    // Set the loading state before sending the request
    dispatch({
      isLoading: true
    });
    // Query the options
    loadOptions(fetchInputs, executeFetch).then(function (options) {
      if (isMounted) {
        dispatch({
          isLoading: false,
          options: emptyOption ? [emptyOption].concat((0, _toConsumableArray2.default)(options)) : options,
          hasFailed: false
        });
      }
    }).catch(function (err) {
      showErrorFlag();
      dispatch({
        isLoading: false,
        options: [],
        hasFailed: true
      });
    });
    return function () {
      isMounted = false;
    };
  }, [fetchInputs, executeFetch, showErrorFlag, emptyOption]);
  return {
    options: options,
    isLoading: isLoading,
    hasFailed: hasFailed
  };
};