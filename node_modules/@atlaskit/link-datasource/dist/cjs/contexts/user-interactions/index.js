"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserInteractions = exports.UserInteractionsProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var UserInteractionsContext = /*#__PURE__*/_react.default.createContext(undefined);
var UserInteractionsProvider = exports.UserInteractionsProvider = function UserInteractionsProvider(_ref) {
  var children = _ref.children;
  var userInteractionActions = (0, _react.useRef)(new Set());
  var providerValue = (0, _react.useMemo)(function () {
    return {
      add: function add(action) {
        userInteractionActions.current.add(action);
      },
      get: function get() {
        return Array.from(userInteractionActions.current);
      }
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(UserInteractionsContext.Provider, {
    value: providerValue
  }, children);
};

/**
 * Use this hook to track user activities. This is mainly used to populate analytic events with
 * a trail of user activities.
 *
 * @returns an object that can track datasource actions and retrieve the actions that have been tracked.
 */
var useUserInteractions = exports.useUserInteractions = function useUserInteractions() {
  var context = (0, _react.useContext)(UserInteractionsContext);
  if (!context) {
    throw new Error('useUserInteractions() must be wrapped in <UserInteractionsProvider>');
  }
  return context;
};