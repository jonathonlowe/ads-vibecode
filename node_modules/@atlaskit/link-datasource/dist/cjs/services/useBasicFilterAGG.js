"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBasicFilterAGG = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _linkingCommon = require("@atlaskit/linking-common");
var _utils = require("./utils");
var AGG_BASE_URL = '/gateway/api/graphql';
var useBasicFilterAGG = exports.useBasicFilterAGG = function useBasicFilterAGG() {
  var requestCall = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(body, headers) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", (0, _linkingCommon.request)('post', AGG_BASE_URL, body, headers, [200, 201, 202, 203, 204]));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var getHydratedJQL = (0, _react.useCallback)(function (cloudId, jql) {
    return requestCall({
      variables: {
        cloudId: cloudId,
        jql: jql
      },
      operationName: 'hydrate',
      query: _utils.hydrateJQLQuery
    }, {
      'X-ExperimentalApi': 'JiraJqlBuilder'
    });
  }, [requestCall]);
  var getFieldValues = (0, _react.useCallback)(function (_ref2) {
    var cloudId = _ref2.cloudId,
      _ref2$jql = _ref2.jql,
      jql = _ref2$jql === void 0 ? '' : _ref2$jql,
      jqlTerm = _ref2.jqlTerm,
      _ref2$searchString = _ref2.searchString,
      searchString = _ref2$searchString === void 0 ? '' : _ref2$searchString,
      pageCursor = _ref2.pageCursor;
    return requestCall({
      variables: {
        cloudId: cloudId,
        jql: jql,
        first: 10,
        jqlTerm: jqlTerm,
        searchString: searchString,
        after: pageCursor
      },
      operationName: 'fieldValues',
      query: _utils.fieldValuesQuery
    }, {
      'X-ExperimentalApi': 'JiraJqlBuilder'
    });
  }, [requestCall]);
  var getCurrentUserInfo = (0, _react.useCallback)(function () {
    return requestCall({
      operationName: 'userQuery',
      query: _utils.userQuery
    });
  }, [requestCall]);
  var getUsersFromAccountIDs = (0, _react.useCallback)(function (accountIds) {
    return requestCall({
      variables: {
        accountIds: accountIds
      },
      operationName: 'userHydration',
      query: _utils.userHydration
    });
  }, [requestCall]);
  return (0, _react.useMemo)(function () {
    return {
      getHydratedJQL: getHydratedJQL,
      getFieldValues: getFieldValues,
      getCurrentUserInfo: getCurrentUserInfo,
      getUsersFromAccountIDs: getUsersFromAccountIDs
    };
  }, [getHydratedJQL, getFieldValues, getCurrentUserInfo, getUsersFromAccountIDs]);
};