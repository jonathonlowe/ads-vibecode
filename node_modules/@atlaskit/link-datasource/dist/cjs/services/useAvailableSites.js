"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAvailableSites = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _getAvailableSites = require("./getAvailableSites");
var useAvailableSites = exports.useAvailableSites = function useAvailableSites(product, cloudId) {
  var _useState = (0, _react.useState)(undefined),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    availableSites = _useState2[0],
    setAvailableSites = _useState2[1];
  (0, _react.useEffect)(function () {
    var fetchSiteDisplayNames = /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var sites, sortedAvailableSites;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _getAvailableSites.getAvailableSites)(product);
            case 2:
              sites = _context.sent;
              sortedAvailableSites = (0, _toConsumableArray2.default)(sites).sort(function (a, b) {
                return a.displayName.localeCompare(b.displayName);
              });
              setAvailableSites(sortedAvailableSites);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function fetchSiteDisplayNames() {
        return _ref.apply(this, arguments);
      };
    }();
    void fetchSiteDisplayNames();
  }, [product]);
  var selectedSite = (0, _react.useMemo)(function () {
    if (cloudId) {
      return availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
        return site.cloudId === cloudId;
      });
    }
    var currentlyLoggedInSiteUrl;
    if (typeof window.location !== 'undefined') {
      currentlyLoggedInSiteUrl = window.location.origin;
    }
    return (availableSites === null || availableSites === void 0 ? void 0 : availableSites.find(function (site) {
      return site.url === currentlyLoggedInSiteUrl;
    })) || (availableSites === null || availableSites === void 0 ? void 0 : availableSites[0]);
  }, [availableSites, cloudId]);
  return {
    availableSites: availableSites,
    selectedSite: selectedSite
  };
};