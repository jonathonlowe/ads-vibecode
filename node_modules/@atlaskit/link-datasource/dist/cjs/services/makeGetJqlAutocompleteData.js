"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeGetJqlAutocompleteData = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var makeGetJqlAutocompleteData = exports.makeGetJqlAutocompleteData = function makeGetJqlAutocompleteData(cloudId) {
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url) {
      var response, data;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch("/gateway/api/ex/jira/".concat(cloudId, "/").concat(url), {
              method: 'POST',
              headers: {
                'content-type': 'application/json'
              },
              body: JSON.stringify({
                includeCollapsedFields: true
              })
            });
          case 2:
            response = _context.sent;
            if (!response.ok) {
              _context.next = 8;
              break;
            }
            _context.next = 6;
            return response.json();
          case 6:
            data = _context.sent;
            return _context.abrupt("return", {
              jqlFields: data.visibleFieldNames,
              jqlFunctions: data.visibleFunctionNames
            });
          case 8:
            _context.t0 = Error;
            _context.next = 11;
            return response.text();
          case 11:
            _context.t1 = _context.sent;
            if (_context.t1) {
              _context.next = 14;
              break;
            }
            _context.t1 = 'Something went wrong';
          case 14:
            _context.t2 = _context.t1;
            throw new _context.t0(_context.t2);
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};