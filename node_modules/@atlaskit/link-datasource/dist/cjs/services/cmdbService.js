"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAql = exports.getWorkspaceId = exports.fetchObjectSchemas = exports.fetchObjectSchema = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _linkingCommon = require("@atlaskit/linking-common");
var _cmdbService = require("./cmdbService.utils");
var getWorkspaceId = exports.getWorkspaceId = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(fireEvent) {
    var url, _workspaceDetailsResp, workspaceDetailsResponse, error;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          url = '/rest/servicedesk/cmdb/latest/workspace';
          _context.prev = 1;
          _context.next = 4;
          return (0, _linkingCommon.request)('get', url, undefined, undefined, [200, 201, 202, 203, 204]);
        case 4:
          workspaceDetailsResponse = _context.sent;
          if ((_workspaceDetailsResp = workspaceDetailsResponse.results) !== null && _workspaceDetailsResp !== void 0 && _workspaceDetailsResp.length) {
            _context.next = 7;
            break;
          }
          throw new _cmdbService.PermissionError('No workspace results found');
        case 7:
          fireEvent && fireEvent('operational.getWorkspaceId.success', {});
          return _context.abrupt("return", workspaceDetailsResponse.results[0].id);
        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](1);
          error = (0, _cmdbService.mapFetchErrors)(_context.t0);
          if (error instanceof _cmdbService.FetchError) {
            fireEvent && fireEvent('operational.getWorkspaceId.failed', {
              statusCodeGroup: (0, _cmdbService.getStatusCodeGroup)(error)
            });
            // Only 429 and5xx errors will be treated as FetchErrors otherwise PermissionError
            if ((0, _cmdbService.getStatusCodeGroup)(error) !== '5xx' && error.statusCode !== 429) {
              error = new _cmdbService.PermissionError('Failed to fetch workspace');
            }
          }
          throw error;
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 11]]);
  }));
  return function getWorkspaceId(_x) {
    return _ref.apply(this, arguments);
  };
}();
var validateAql = exports.validateAql = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(workspaceId, data, fireEvent) {
    var url, response, error;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          url = "/gateway/api/jsm/assets/workspace/".concat(workspaceId, "/v1/aql/validate");
          _context2.prev = 1;
          _context2.next = 4;
          return (0, _linkingCommon.request)('post', url, {
            qlQuery: data.qlQuery,
            context: 'SMART_LINKS'
          }, undefined, [200, 201, 202, 203, 204]);
        case 4:
          response = _context2.sent;
          fireEvent && fireEvent('operational.validateAql.success', {});
          return _context2.abrupt("return", response);
        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](1);
          error = (0, _cmdbService.mapFetchErrors)(_context2.t0);
          if (error instanceof _cmdbService.FetchError) {
            fireEvent && fireEvent('operational.validateAql.failed', {
              statusCodeGroup: (0, _cmdbService.getStatusCodeGroup)(error)
            });
            if (error.statusCode === 401 || error.statusCode === 403) {
              error = new _cmdbService.PermissionError('Failed to fetch object schemas');
            }
          }
          throw error;
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[1, 9]]);
  }));
  return function validateAql(_x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var fetchObjectSchema = exports.fetchObjectSchema = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(workspaceId, schemaId, fireEvent) {
    var url, response, error;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          url = "/gateway/api/jsm/assets/workspace/".concat(workspaceId, "/v1/objectschema/").concat(schemaId);
          _context3.prev = 1;
          _context3.next = 4;
          return (0, _linkingCommon.request)('get', url, undefined, undefined, [200, 201, 202, 203, 204]);
        case 4:
          response = _context3.sent;
          fireEvent && fireEvent('operational.objectSchema.success', {});
          return _context3.abrupt("return", response);
        case 9:
          _context3.prev = 9;
          _context3.t0 = _context3["catch"](1);
          error = (0, _cmdbService.mapFetchErrors)(_context3.t0);
          if (error instanceof _cmdbService.FetchError) {
            fireEvent && fireEvent('operational.objectSchema.failed', {
              statusCodeGroup: (0, _cmdbService.getStatusCodeGroup)(error)
            });
            if (error.statusCode === 401 || error.statusCode === 403) {
              error = new _cmdbService.PermissionError('Failed to fetch object schemas');
            }
          }
          throw error;
        case 14:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[1, 9]]);
  }));
  return function fetchObjectSchema(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
var fetchObjectSchemas = exports.fetchObjectSchemas = /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(workspaceId, query, fireEvent) {
    var queryParams, url, response, error;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          queryParams = new URLSearchParams();
          queryParams.set('maxResults', '20');
          queryParams.set('includeCounts', 'false');
          query && queryParams.set('query', query);
          url = "/gateway/api/jsm/assets/workspace/".concat(workspaceId, "/v1/objectschema/list?").concat(queryParams);
          _context4.prev = 5;
          _context4.next = 8;
          return (0, _linkingCommon.request)('get', url, undefined, undefined, [200, 201, 202, 203, 204]);
        case 8:
          response = _context4.sent;
          fireEvent && fireEvent('operational.objectSchemas.success', {});
          return _context4.abrupt("return", response);
        case 13:
          _context4.prev = 13;
          _context4.t0 = _context4["catch"](5);
          error = (0, _cmdbService.mapFetchErrors)(_context4.t0);
          if (error instanceof _cmdbService.FetchError) {
            fireEvent && fireEvent('operational.objectSchemas.failed', {
              statusCodeGroup: (0, _cmdbService.getStatusCodeGroup)(error)
            });
            if (error.statusCode === 401 || error.statusCode === 403) {
              error = new _cmdbService.PermissionError('Failed to fetch object schemas');
            }
          }
          throw error;
        case 18:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[5, 13]]);
  }));
  return function fetchObjectSchemas(_x8, _x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();