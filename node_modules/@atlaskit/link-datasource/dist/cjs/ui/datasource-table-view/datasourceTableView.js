/* datasourceTableView.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatasourceTableView = exports.DataSourceTableViewNoSuspense = void 0;
require("./datasourceTableView.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _intlMessagesProvider = require("@atlaskit/intl-messages-provider");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _analytics = require("../../analytics");
var _constants = require("../../analytics/constants");
var _ufoExperiences = require("../../analytics/ufoExperiences");
var _useColumnPickerRenderedFailedUfoExperience = require("../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience");
var _useDataRenderedUfoExperience = require("../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience");
var _fetchMessagesForLocale = require("../../common/utils/locale/fetch-messages-for-locale");
var _datasourceExperienceId = require("../../contexts/datasource-experience-id");
var _useDatasourceTableState = require("../../hooks/useDatasourceTableState");
var _en = _interopRequireDefault(require("../../i18n/en"));
var _state = require("../../state");
var _assetsModal = require("../assets-modal");
var _accessRequired = require("../common/error-state/access-required");
var _loadingError = require("../common/error-state/loading-error");
var _noResults = require("../common/error-state/no-results");
var _providerAuthRequired = require("../common/error-state/provider-auth-required");
var _issueLikeTable = require("../issue-like-table");
var _emptyState = _interopRequireDefault(require("../issue-like-table/empty-state"));
var _tableFooter = require("../table-footer");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var containerStyles = null;
var ScrollableContainerHeight = 590;
var DatasourceTableViewWithoutAnalytics = function DatasourceTableViewWithoutAnalytics(_ref) {
  var datasourceId = _ref.datasourceId,
    parameters = _ref.parameters,
    visibleColumnKeys = _ref.visibleColumnKeys,
    onVisibleColumnKeysChange = _ref.onVisibleColumnKeysChange,
    url = _ref.url,
    columnCustomSizes = _ref.columnCustomSizes,
    onColumnResize = _ref.onColumnResize,
    wrappedColumnKeys = _ref.wrappedColumnKeys,
    onWrappedColumnChange = _ref.onWrappedColumnChange;
  var _useDatasourceTableSt = (0, _useDatasourceTableState.useDatasourceTableState)({
      datasourceId: datasourceId,
      parameters: parameters,
      fieldKeys: visibleColumnKeys
    }),
    reset = _useDatasourceTableSt.reset,
    status = _useDatasourceTableSt.status,
    onNextPage = _useDatasourceTableSt.onNextPage,
    responseItems = _useDatasourceTableSt.responseItems,
    responseItemIds = _useDatasourceTableSt.responseItemIds,
    hasNextPage = _useDatasourceTableSt.hasNextPage,
    columns = _useDatasourceTableSt.columns,
    defaultVisibleColumnKeys = _useDatasourceTableSt.defaultVisibleColumnKeys,
    totalCount = _useDatasourceTableSt.totalCount,
    loadDatasourceDetails = _useDatasourceTableSt.loadDatasourceDetails,
    _useDatasourceTableSt2 = _useDatasourceTableSt.extensionKey,
    extensionKey = _useDatasourceTableSt2 === void 0 ? null : _useDatasourceTableSt2,
    providerName = _useDatasourceTableSt.providerName,
    destinationObjectTypes = _useDatasourceTableSt.destinationObjectTypes,
    authDetails = _useDatasourceTableSt.authDetails;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  var visibleColumnCount = (0, _react.useRef)((visibleColumnKeys === null || visibleColumnKeys === void 0 ? void 0 : visibleColumnKeys.length) || 0);

  /*  Need this to make sure that the datasource in the editor gets updated new info if any edits are made in the modal
       But we don't want to call it on initial load. This screws up useDatasourceTableState's internal
       mechanism of initial loading. Use of ref here makes it basically work as a `componentDidUpdate` but not `componentDidMount`
    */
  var isInitialRender = (0, _react.useRef)(true);
  var hasColumns = !!columns.length;
  var isDataReady = hasColumns && responseItems.length > 0 && totalCount && totalCount > 0;
  visibleColumnCount.current = (visibleColumnKeys === null || visibleColumnKeys === void 0 ? void 0 : visibleColumnKeys.length) || 0;
  (0, _react.useEffect)(function () {
    if (!isInitialRender.current) {
      reset();
    }
    isInitialRender.current = false;
  }, [reset, parameters]);
  (0, _react.useEffect)(function () {
    if (onVisibleColumnKeysChange && (visibleColumnKeys || []).length === 0 && defaultVisibleColumnKeys.length > 0) {
      onVisibleColumnKeysChange(defaultVisibleColumnKeys);
    }
  }, [visibleColumnKeys, defaultVisibleColumnKeys, onVisibleColumnKeysChange]);
  (0, _react.useEffect)(function () {
    var isTableViewRenderedWithData = status === 'resolved' && isDataReady;
    if (isTableViewRenderedWithData) {
      fireEvent('ui.datasource.renderSuccess', {
        extensionKey: extensionKey,
        destinationObjectTypes: destinationObjectTypes,
        totalItemCount: totalCount,
        displayedColumnCount: visibleColumnCount.current,
        display: 'table'
      });
    }
  }, [totalCount, fireEvent, status, extensionKey, destinationObjectTypes, isDataReady]);
  (0, _react.useEffect)(function () {
    var shouldStartUfoExperience = datasourceId && parameters && visibleColumnKeys && status === 'loading';
    if (shouldStartUfoExperience) {
      (0, _ufoExperiences.startUfoExperience)({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [datasourceId, parameters, status, experienceId, visibleColumnKeys]);
  (0, _useColumnPickerRenderedFailedUfoExperience.useColumnPickerRenderedFailedUfoExperience)(status, experienceId);
  (0, _useDataRenderedUfoExperience.useDataRenderedUfoExperience)({
    status: status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    extensionKey: extensionKey
  });
  var forcedReset = (0, _react.useCallback)(function () {
    reset({
      shouldForceRequest: true,
      shouldResetColumns: datasourceId === _assetsModal.ASSETS_LIST_OF_LINKS_DATASOURCE_ID
    });
  }, [reset, datasourceId]);
  var onRefresh = (0, _react.useCallback)(function () {
    fireEvent('ui.button.clicked.sync', {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes
    });
    forcedReset();
  }, [destinationObjectTypes, extensionKey, fireEvent, forcedReset]);
  var handleErrorRefresh = (0, _react.useCallback)(function () {
    reset({
      shouldForceRequest: true
    });
  }, [reset]);
  if (status === 'resolved' && !responseItems.length || status === 'forbidden') {
    return /*#__PURE__*/React.createElement(_noResults.NoResults, !(0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') && {
      onRefresh: handleErrorRefresh
    });
  }
  if (status === 'unauthorized') {
    return authDetails !== null && authDetails !== void 0 && authDetails.length && authDetails.length > 0 ? /*#__PURE__*/React.createElement(_providerAuthRequired.ProviderAuthRequired, {
      auth: authDetails,
      extensionKey: extensionKey,
      providerName: providerName,
      onAuthSuccess: forcedReset,
      onAuthError: forcedReset,
      datasourceId: datasourceId
    }) : /*#__PURE__*/React.createElement(_accessRequired.AccessRequired, {
      url: url
    });
  }
  if (status === 'rejected') {
    return /*#__PURE__*/React.createElement(_loadingError.LoadingError, (0, _extends2.default)({
      onRefresh: handleErrorRefresh
    }, (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') && {
      url: url
    }));
  }
  return /*#__PURE__*/React.createElement(_intlMessagesProvider.IntlMessagesProvider, {
    defaultMessages: _en.default,
    loaderFn: _fetchMessagesForLocale.fetchMessagesForLocale
  }, /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)(["_2rko1kw7", "datasource-table"])
  }, hasColumns ? /*#__PURE__*/React.createElement(_issueLikeTable.IssueLikeDataTableView, {
    testId: 'datasource-table-view',
    hasNextPage: hasNextPage,
    items: responseItems,
    itemIds: responseItemIds,
    onNextPage: onNextPage,
    onLoadDatasourceDetails: loadDatasourceDetails,
    status: status,
    columns: columns,
    visibleColumnKeys: visibleColumnKeys || defaultVisibleColumnKeys,
    onVisibleColumnKeysChange: onVisibleColumnKeysChange,
    columnCustomSizes: columnCustomSizes,
    onColumnResize: onColumnResize,
    wrappedColumnKeys: wrappedColumnKeys,
    onWrappedColumnChange: onWrappedColumnChange,
    scrollableContainerHeight: ScrollableContainerHeight,
    extensionKey: extensionKey
  }) : /*#__PURE__*/React.createElement(_emptyState.default, {
    testId: "datasource-table-view-skeleton",
    isCompact: true
  }), /*#__PURE__*/React.createElement(_tableFooter.TableFooter, {
    datasourceId: datasourceId,
    itemCount: isDataReady ? totalCount : undefined,
    onRefresh: onRefresh,
    isLoading: !isDataReady || status === 'loading',
    url: url
  })));
};
var DatasourceTableView = exports.DatasourceTableView = (0, _analyticsNext.withAnalyticsContext)(_constants.componentMetadata.tableView)(function (props) {
  return /*#__PURE__*/React.createElement(_state.StoreContainer, null, /*#__PURE__*/React.createElement(_datasourceExperienceId.DatasourceExperienceIdProvider, null, /*#__PURE__*/React.createElement(DatasourceTableViewWithoutAnalytics, props)));
});
var DataSourceTableViewNoSuspense = exports.DataSourceTableViewNoSuspense = DatasourceTableView;