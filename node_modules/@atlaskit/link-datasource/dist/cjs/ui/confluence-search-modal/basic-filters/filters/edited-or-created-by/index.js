"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _useDebounce = require("use-debounce");
var _popupSelect = require("../../../../common/modal/popup-select");
var _constants = require("../../../../common/modal/popup-select/constants");
var _useCurrentUserInfo2 = require("../../hooks/useCurrentUserInfo");
var _useRecommendation2 = _interopRequireDefault(require("../../hooks/useRecommendation"));
var _types = require("../../types");
var _messages = require("./messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var filterName = "clol-basic-filter-".concat(_types.CLOLBasicFilters.editedOrCreatedBy);
var EditedOrCreatedByFilter = function EditedOrCreatedByFilter(_ref) {
  var cloudId = _ref.cloudId,
    onSelectionChange = _ref.onSelectionChange,
    _ref$selection = _ref.selection,
    selection = _ref$selection === void 0 ? [] : _ref$selection,
    _ref$isHydrating = _ref.isHydrating,
    isHydrating = _ref$isHydrating === void 0 ? false : _ref$isHydrating;
  var _useCurrentUserInfo = (0, _useCurrentUserInfo2.useCurrentUserInfo)(),
    user = _useCurrentUserInfo.user;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useRecommendation = (0, _useRecommendation2.default)(),
    status = _useRecommendation.status,
    filterOptions = _useRecommendation.filterOptions,
    fetchFilterOptions = _useRecommendation.fetchFilterOptions,
    errors = _useRecommendation.errors,
    resetHook = _useRecommendation.reset;
  var currentSiteCloudId = (0, _react.useRef)(cloudId || '');
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    searchTerm = _useState2[0],
    setSearchTerm = _useState2[1];
  var _useDebouncedCallback = (0, _useDebounce.useDebouncedCallback)(function (searchTerm) {
      if (cloudId && user !== null && user !== void 0 && user.accountId) {
        fetchFilterOptions({
          searchTerm: searchTerm,
          cloudId: cloudId,
          userId: user.accountId
        });
      }
    }, _constants.SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = (0, _slicedToArray2.default)(_useDebouncedCallback, 1),
    handleDebouncedFetchFilterOptions = _useDebouncedCallback2[0];
  var handleInputChange = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(newSearchTerm) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setSearchTerm(newSearchTerm);
            handleDebouncedFetchFilterOptions(newSearchTerm);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [handleDebouncedFetchFilterOptions]);
  var handleOptionSelection = (0, _react.useCallback)(function (newValue) {
    onSelectionChange(_types.CLOLBasicFilters.editedOrCreatedBy, newValue);
  }, [onSelectionChange]);
  var handleMenuOpen = (0, _react.useCallback)(function () {
    if ((status === 'empty' || status === 'rejected') && cloudId && user !== null && user !== void 0 && user.accountId) {
      // if user searches and gets status as rejected, we want the dropdown to try load the request with searchString when the user reopens the dropdown
      fetchFilterOptions({
        cloudId: cloudId,
        userId: user.accountId,
        searchTerm: searchTerm
      });
    }
  }, [fetchFilterOptions, status, cloudId, user === null || user === void 0 ? void 0 : user.accountId, searchTerm]);
  var filterOptionsLength = filterOptions.length;
  var isError = status === 'rejected';
  var isLoading = status === 'loading' || status === 'empty';
  var isEmpty = status === 'resolved' && filterOptionsLength === 0;
  var isDisabled = !cloudId || !(user !== null && user !== void 0 && user.accountId);
  (0, _react.useEffect)(function () {
    if (cloudId && currentSiteCloudId.current !== cloudId) {
      currentSiteCloudId.current = cloudId;
      if (status === 'resolved') {
        resetHook();
      }
    }
  }, [cloudId, resetHook, status]);
  return /*#__PURE__*/_react.default.createElement(_popupSelect.FilterPopupSelect, {
    buttonLabel: formatMessage(_messages.editedOrCreatedByMessage.buttonLabel),
    filterName: filterName,
    isDisabled: isDisabled,
    options: filterOptions,
    showLoading: isLoading,
    selectedOptions: selection,
    onSelectionChange: handleOptionSelection,
    onInputChange: handleInputChange,
    showHydrating: isHydrating,
    shouldShowFooter: false,
    status: status,
    onMenuOpen: handleMenuOpen,
    menuListProps: {
      filterName: filterName,
      errors: errors,
      isLoading: isLoading,
      isError: isError,
      isEmpty: isEmpty
    }
  });
};
var _default = exports.default = EditedOrCreatedByFilter;