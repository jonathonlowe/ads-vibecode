"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactIntlNext = require("react-intl-next");
var _smartUserPicker = require("@atlaskit/smart-user-picker");
var useRecommendation = function useRecommendation() {
  var intl = (0, _reactIntlNext.useIntl)();
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    filterOptions = _useState2[0],
    setFilterOptions = _useState2[1];
  var _useState3 = (0, _react.useState)('empty'),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    status = _useState4[0],
    setStatus = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    errors = _useState6[0],
    setErrors = _useState6[1];
  var initialData = (0, _react.useRef)();
  var convertRecommendationsToFilterOptions = function convertRecommendationsToFilterOptions(recommendations) {
    return recommendations.map(function (item) {
      return {
        optionType: 'avatarLabel',
        label: item.name,
        value: item.id,
        avatar: item.avatarUrl
      };
    });
  };
  var fetchFilterOptions = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {
      var userId, cloudId, searchTerm, requestParams, initialResponseData, isRequestLikeInitialSearch, recommendations;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            userId = _ref.userId, cloudId = _ref.cloudId, searchTerm = _ref.searchTerm;
            setStatus('loading');
            requestParams = {
              context: {
                contextType: 'contributors',
                principalId: userId || '',
                productAttributes: {
                  isEntitledConfluenceExternalCollaborator: true
                },
                productKey: 'confluence',
                siteId: cloudId
              },
              includeGroups: false,
              includeTeams: false,
              includeUsers: true,
              maxNumberOfResults: 10,
              performSearchQueryOnly: false,
              query: searchTerm
            };
            initialResponseData = initialData.current;
            isRequestLikeInitialSearch = !searchTerm;
            _context.prev = 5;
            if (!(isRequestLikeInitialSearch && initialResponseData)) {
              _context.next = 10;
              break;
            }
            _context.t0 = initialResponseData;
            _context.next = 13;
            break;
          case 10:
            _context.next = 12;
            return (0, _smartUserPicker.getUserRecommendations)(requestParams, intl);
          case 12:
            _context.t0 = _context.sent;
          case 13:
            recommendations = _context.t0;
            setFilterOptions(convertRecommendationsToFilterOptions(recommendations));
            setStatus('resolved');
            if (!searchTerm) {
              /**
               * The initial dataset is used in couple of paths, eg: when a user searches and clears the search text.
               * During these times, we dont want to fetch data again and again, hence a mini cache setup to store and provide the initial dataset
               */
              initialData.current = recommendations;
            }
            _context.next = 23;
            break;
          case 19:
            _context.prev = 19;
            _context.t1 = _context["catch"](5);
            setStatus('rejected');
            setErrors([_context.t1]);
          case 23:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[5, 19]]);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [intl]);
  var reset = (0, _react.useCallback)(function () {
    setStatus('empty');
    setFilterOptions([]);
    setErrors([]);
    initialData.current = undefined;
  }, []);
  return {
    status: status,
    errors: errors,
    filterOptions: filterOptions,
    reset: reset,
    fetchFilterOptions: fetchFilterOptions
  };
};
var _default = exports.default = useRecommendation;