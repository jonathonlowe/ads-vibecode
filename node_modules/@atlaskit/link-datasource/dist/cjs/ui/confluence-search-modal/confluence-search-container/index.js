/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _useDebounce = require("use-debounce");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _basicSearchInput = require("../../common/modal/basic-search-input");
var _constants = require("../../common/modal/popup-select/constants");
var _basicFilters = _interopRequireDefault(require("../basic-filters"));
var _useBasicFilterHydration = require("../basic-filters/hooks/useBasicFilterHydration");
var _types = require("../basic-filters/types");
var _messages = require("./messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var styles = {
  basicSearchInputBoxStyles: "_1bsb1osq",
  basicSearchInputContainerStyles: "_16jlkb7n"
};
var ConfluenceSearchContainer = function ConfluenceSearchContainer(_ref) {
  var _ref$parameters = _ref.parameters,
    cloudId = _ref$parameters.cloudId,
    initialSearchValue = _ref$parameters.searchString,
    lastModified = _ref$parameters.lastModified,
    lastModifiedFrom = _ref$parameters.lastModifiedFrom,
    lastModifiedTo = _ref$parameters.lastModifiedTo,
    contributorAccountIds = _ref$parameters.contributorAccountIds,
    isSearching = _ref.isSearching,
    onSearch = _ref.onSearch;
  var _useBasicFilterHydrat = (0, _useBasicFilterHydration.useBasicFilterHydration)(),
    hydrateUsersFromAccountIds = _useBasicFilterHydrat.hydrateUsersFromAccountIds,
    users = _useBasicFilterHydrat.users,
    status = _useBasicFilterHydrat.status,
    resetHydrationHook = _useBasicFilterHydrat.reset;
  var currentCloudId = (0, _react.useRef)(cloudId);
  var _useState = (0, _react.useState)(contributorAccountIds !== null && contributorAccountIds !== void 0 ? contributorAccountIds : []),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    initialContributorAccountIds = _useState2[0],
    setInitialContributorAccountIds = _useState2[1];
  var _useState3 = (0, _react.useState)(initialSearchValue !== null && initialSearchValue !== void 0 ? initialSearchValue : ''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    searchBarSearchString = _useState4[0],
    setSearchBarSearchString = _useState4[1];
  var _useState5 = (0, _react.useState)(function () {
      return lastModified ? {
        lastModified: [{
          optionType: 'dateRange',
          label: lastModified,
          value: lastModified,
          from: lastModifiedFrom,
          to: lastModifiedTo
        }]
      } : {};
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    filterSelections = _useState6[0],
    setFilterSelections = _useState6[1];
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var handleSearchChange = (0, _react.useCallback)(function (e) {
    var rawSearch = e.currentTarget.value;
    setSearchBarSearchString(rawSearch);
  }, []);
  var _useDebouncedCallback = (0, _useDebounce.useDebouncedCallback)(function (filterValues) {
      onSearch(searchBarSearchString, filterValues);
    }, _constants.FILTER_SELECTION_DEBOUNCE_MS),
    _useDebouncedCallback2 = (0, _slicedToArray2.default)(_useDebouncedCallback, 1),
    debouncedBasicFilterSelectionChange = _useDebouncedCallback2[0];
  var handleBasicFilterSelectionChange = (0, _react.useCallback)(function (filterType, options) {
    var updatedSelection = _objectSpread(_objectSpread({}, filterSelections), {}, (0, _defineProperty2.default)({}, filterType, Array.isArray(options) ? options : [options]));
    setFilterSelections(updatedSelection);
    if (filterType === _types.CLOLBasicFilters.lastModified) {
      onSearch(searchBarSearchString, updatedSelection);
    } else {
      debouncedBasicFilterSelectionChange(updatedSelection);
    }
  }, [debouncedBasicFilterSelectionChange, filterSelections, onSearch, searchBarSearchString]);

  // TODO: further refactoring in EDM-9573
  // https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/82725/overview?commentId=6827913
  (0, _react.useEffect)(function () {
    if (currentCloudId.current !== cloudId) {
      setInitialContributorAccountIds([]);
      resetHydrationHook();
      setSearchBarSearchString('');
      setFilterSelections({});
      currentCloudId.current = cloudId;
    }
  }, [cloudId, resetHydrationHook]);
  (0, _react.useEffect)(function () {
    var hasAccountIds = (initialContributorAccountIds === null || initialContributorAccountIds === void 0 ? void 0 : initialContributorAccountIds.length) > 0;
    if (hasAccountIds && status === 'empty') {
      hydrateUsersFromAccountIds(initialContributorAccountIds);
    }
  }, [hydrateUsersFromAccountIds, initialContributorAccountIds, status]);
  (0, _react.useEffect)(function () {
    if (status === 'resolved') {
      setFilterSelections({
        lastModified: filterSelections.lastModified,
        editedOrCreatedBy: users
      });
    }
  }, [users, status, filterSelections.lastModified]);
  return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    xcss: styles.basicSearchInputBoxStyles
  }, /*#__PURE__*/_react.default.createElement(_compiled.Flex, {
    alignItems: "center",
    xcss: styles.basicSearchInputContainerStyles
  }, /*#__PURE__*/_react.default.createElement(_basicSearchInput.BasicSearchInput, {
    testId: "confluence-search-datasource-modal",
    isSearching: isSearching,
    onChange: handleSearchChange,
    onSearch: onSearch,
    searchTerm: searchBarSearchString,
    placeholder: _messages.searchMessages.searchLabel,
    ariaLabel: _messages.searchMessages.searchLabel,
    fullWidth: false
  }), /*#__PURE__*/_react.default.createElement(_basicFilters.default, {
    cloudId: cloudId,
    selections: filterSelections,
    onChange: handleBasicFilterSelectionChange,
    isHydrating: status === 'loading'
  })), (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') && /*#__PURE__*/_react.default.createElement(_compiled.Text, {
    size: "small",
    color: "color.text.subtlest",
    testId: "confluence-search-placeholder"
  }, formatMessage(_messages.searchMessages.searchLabel)));
};
var _default = exports.default = ConfluenceSearchContainer;