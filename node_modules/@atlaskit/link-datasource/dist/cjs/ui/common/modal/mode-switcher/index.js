/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModeSwitcher = exports.DatasourceViewModeDropDown = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _types = require("../../../../analytics/types");
var _userInteractions = require("../../../../contexts/user-interactions");
var _displayViewDropDown = require("../display-view-dropdown/display-view-drop-down");
var _useViewModeContext2 = require("./useViewModeContext");
var modeSwitcherStylesOld = null;
var modeSwitcherStyles = null;
var compactModeSwitcherStyles = null;
var modeInputStyles = null;
var modeSwitcherLabelStylesOld = null;
var modeSwitcherLabelStyles = null;
var modeSwitcherLabelSelectedStylesOld = null;
var modeSwitcherLabelSelectedStyles = null;
var modeSwitcherLabelDisabledStyles = null;
var modeSwitcherDisabledStyles = null;
var compactModeSwitcherLabelStyles = null;
var ModeSwitcher = exports.ModeSwitcher = function ModeSwitcher(props) {
  var _options$;
  var isCompact = props.isCompact,
    isDisabled = props.isDisabled,
    onOptionValueChange = props.onOptionValueChange,
    options = props.options,
    _props$selectedOption = props.selectedOptionValue,
    selectedOptionValue = _props$selectedOption === void 0 ? (_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.value : _props$selectedOption;
  var handleModeChange = function handleModeChange(event) {
    onOptionValueChange(event.currentTarget.value);
  };
  return options.length > 0 ? /*#__PURE__*/_react.default.createElement("fieldset", {
    "data-testid": "mode-toggle-container",
    disabled: isDisabled,
    className: (0, _runtime.ax)([(0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? "_2rko1b66 _1h6dmuej _189ee4h9 _1dqonqa1 _4cvr1h6o _vchhusvi _1e0c116y _u5f31b66 _19bv1b66 _18u0v47k _4t3izwfg _1j55105o" : "_2rko1b66 _zulp1b66 _4cvr1h6o _bfhklslw _vchhusvi _1e0c116y _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66 _18u0v47k _1j55105o", isCompact && "_zulpv77o _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66"]),
    style: {
      "--_1jkcdu5": (0, _runtime.ix)("var(--ds-background-neutral, ".concat(_colors.N20, ")"))
    }
  }, options.map(function (_ref) {
    var value = _ref.value,
      label = _ref.label,
      isOptionDisabled = _ref.disabled,
      tooltipText = _ref.tooltipText;
    var isSelected = value === selectedOptionValue;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      key: value,
      content: tooltipText
    }, function (tooltipProps) {
      return (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/_react.default.createElement("label", (0, _extends2.default)({}, tooltipProps, {
        key: value,
        "data-testid": "mode-toggle-".concat(value),
        className: (0, _runtime.ax)(["_11c82smr _2rko1b66 _1h6d1j28 _189ee4h9 _1dqonqa1 _syaziwyp _vchhusvi _k48p1wq8 _u5f3utpp _19bvutpp _1tke1tcg _1e0c1txw _4cvr1h6o _1bah1h6o _d0altlke _irr3u7au", isCompact && "_ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", isSelected && "_2rko1b66 _1h6d1yqz _bfhkfg4m _syazaqb7 _d0altlke _irr3fg4m", isDisabled && "_irr31j28 _d0al13gf", isOptionDisabled && "_syaz111d", isOptionDisabled && "_irr31j28 _d0al13gf"]),
        style: {
          "--_k4gmmg": (0, _runtime.ix)("var(--ds-text-subtlest, ".concat(_colors.N700, ")")),
          "--_15egq0b": (0, _runtime.ix)("var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30A, ")")),
          "--_uz32ib": (0, _runtime.ix)("var(--ds-text-disabled, ".concat(_colors.N60, ")"))
        }
      }), label, /*#__PURE__*/_react.default.createElement("input", {
        "aria-checked": isSelected,
        "aria-disabled": isOptionDisabled,
        checked: isSelected,
        disabled: isOptionDisabled,
        onChange: handleModeChange,
        type: "radio",
        value: value,
        className: (0, _runtime.ax)(["_1e0cglyw"])
      })) : /*#__PURE__*/_react.default.createElement("label", (0, _extends2.default)({}, tooltipProps, {
        key: value,
        "data-testid": "mode-toggle-".concat(value),
        className: (0, _runtime.ax)(["_11c8dcr7 _2rko1b66 _syaziwyp _k48p1pd9 _1p1dangw _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66 _d0altlke _irr3u7au", isCompact && "_ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", isSelected && "_2rko1b66 _bfhkkwt5 _16qs1jze _d0altlke _irr3kwt5", isDisabled && "_irr31j28 _d0al13gf", isOptionDisabled && "_syaz111d", isOptionDisabled && "_irr31j28 _d0al13gf"]),
        style: {
          "--_k4gmmg": (0, _runtime.ix)("var(--ds-text-subtlest, ".concat(_colors.N700, ")")),
          "--_15egq0b": (0, _runtime.ix)("var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30A, ")")),
          "--_t0vtv2": (0, _runtime.ix)("var(--ds-background-input-pressed, ".concat(_colors.N0, ")")),
          "--_uz32ib": (0, _runtime.ix)("var(--ds-text-disabled, ".concat(_colors.N60, ")"))
        }
      }), label, /*#__PURE__*/_react.default.createElement("input", {
        "aria-checked": isSelected,
        "aria-disabled": isOptionDisabled,
        checked: isSelected,
        disabled: isOptionDisabled,
        onChange: handleModeChange,
        type: "radio",
        value: value,
        className: (0, _runtime.ax)(["_1e0cglyw"])
      }));
    });
  })) : null;
};
var DatasourceViewModeDropDown = exports.DatasourceViewModeDropDown = function DatasourceViewModeDropDown() {
  var userInteractions = (0, _userInteractions.useUserInteractions)();
  var _useViewModeContext = (0, _useViewModeContext2.useViewModeContext)(),
    currentViewMode = _useViewModeContext.currentViewMode,
    setCurrentViewMode = _useViewModeContext.setCurrentViewMode,
    disableDisplayDropdown = _useViewModeContext.disableDisplayDropdown;
  if (disableDisplayDropdown) {
    return null;
  }
  var handleViewModeChange = function handleViewModeChange(selectedMode) {
    userInteractions.add(_types.DatasourceAction.DISPLAY_VIEW_CHANGED);
    setCurrentViewMode(selectedMode);
  };
  return /*#__PURE__*/_react.default.createElement(_displayViewDropDown.DisplayViewDropDown, {
    onViewModeChange: handleViewModeChange,
    viewMode: currentViewMode
  });
};