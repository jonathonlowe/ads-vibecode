"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsertButton = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _analytics = require("../../../../analytics");
var _types = require("../../../../analytics/types");
var _adf = require("../../../../common/utils/adf");
var _userInteractions = require("../../../../contexts/user-interactions");
var _datasourceContext = require("../datasource-context");
var _useViewModeContext2 = require("../mode-switcher/useViewModeContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var InsertButton = exports.InsertButton = function InsertButton(_ref) {
  var testId = _ref.testId,
    url = _ref.url,
    getAnalyticsPayload = _ref.getAnalyticsPayload,
    children = _ref.children;
  var _useDatasourceContext = (0, _datasourceContext.useDatasourceContext)(),
    datasourceId = _useDatasourceContext.datasourceId,
    parameters = _useDatasourceContext.parameters,
    _useDatasourceContext2 = _useDatasourceContext.tableState,
    status = _useDatasourceContext2.status,
    totalCount = _useDatasourceContext2.totalCount,
    isValidParameters = _useDatasourceContext.isValidParameters,
    visibleColumnCount = _useDatasourceContext.visibleColumnCount,
    visibleColumnKeys = _useDatasourceContext.visibleColumnKeys,
    columnCustomSizes = _useDatasourceContext.columnCustomSizes,
    wrappedColumnKeys = _useDatasourceContext.wrappedColumnKeys,
    onInsert = _useDatasourceContext.onInsert;
  var userInteractions = (0, _userInteractions.useUserInteractions)();
  var _useViewModeContext = (0, _useViewModeContext2.useViewModeContext)(),
    currentViewMode = _useViewModeContext.currentViewMode;
  var isInsertDisabled = !isValidParameters(parameters) || status === 'rejected' || status === 'unauthorized' || status === 'loading';
  var onInsertPressed = (0, _react.useCallback)(function (e, analyticsEvent) {
    var _insertButtonClickedE;
    if (!parameters || !isValidParameters(parameters) || !url) {
      return;
    }
    var insertButtonClickedEvent = analyticsEvent.update({
      actionSubjectId: 'insert',
      attributes: _objectSpread({
        totalItemCount: totalCount || 0,
        displayedColumnCount: visibleColumnCount.current,
        display: currentViewMode === 'inline' ? _types.DatasourceDisplay.DATASOURCE_INLINE : _types.DatasourceDisplay.DATASOURCE_TABLE,
        searchMethod: _types.DatasourceSearchMethod.DATASOURCE_SEARCH_QUERY,
        actions: userInteractions.get()
      }, getAnalyticsPayload()),
      eventType: 'ui'
    });
    var consumerEvent = (_insertButtonClickedE = insertButtonClickedEvent.clone()) !== null && _insertButtonClickedE !== void 0 ? _insertButtonClickedE : undefined;
    insertButtonClickedEvent.fire(_analytics.EVENT_CHANNEL);
    if (currentViewMode === 'inline') {
      onInsert({
        type: 'inlineCard',
        attrs: {
          url: url
        }
      }, consumerEvent);
    } else {
      onInsert((0, _adf.buildDatasourceAdf)({
        id: datasourceId,
        parameters: parameters,
        views: [{
          type: 'table',
          properties: {
            columns: (visibleColumnKeys || []).map(function (key) {
              var width = columnCustomSizes === null || columnCustomSizes === void 0 ? void 0 : columnCustomSizes[key];
              var isWrapped = wrappedColumnKeys === null || wrappedColumnKeys === void 0 ? void 0 : wrappedColumnKeys.includes(key);
              return _objectSpread(_objectSpread({
                key: key
              }, width ? {
                width: width
              } : {}), isWrapped ? {
                isWrapped: isWrapped
              } : {});
            })
          }
        }]
      }, url), consumerEvent);
    }
  }, [columnCustomSizes, currentViewMode, datasourceId, getAnalyticsPayload, isValidParameters, onInsert, parameters, totalCount, url, userInteractions, visibleColumnCount, visibleColumnKeys, wrappedColumnKeys]);
  return /*#__PURE__*/_react.default.createElement(_standardButton.default, {
    appearance: "primary",
    onClick: onInsertPressed,
    isDisabled: isInsertDisabled,
    testId: testId
  }, children);
};