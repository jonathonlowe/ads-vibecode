"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDatasourceContext = exports.DatasourceContextProvider = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _useDatasourceTableState = require("../../../../hooks/useDatasourceTableState");
var _useColumnResize2 = require("../datasources-table-in-modal-preview/use-column-resize");
var _useColumnVisibility2 = require("../datasources-table-in-modal-preview/use-column-visibility");
var _useColumnWrapping2 = require("../datasources-table-in-modal-preview/use-column-wrapping");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DatasourceContext = /*#__PURE__*/_react.default.createContext(null);
var DatasourceContextProvider = exports.DatasourceContextProvider = function DatasourceContextProvider(_ref) {
  var children = _ref.children,
    datasourceId = _ref.datasourceId,
    isValidParameters = _ref.isValidParameters,
    initialParameters = _ref.initialParameters,
    initialVisibleColumnKeys = _ref.initialVisibleColumnKeys,
    initialColumnCustomSizes = _ref.initialColumnCustomSizes,
    initialWrappedColumnKeys = _ref.initialWrappedColumnKeys,
    onInsert = _ref.onInsert;
  var _useState = (0, _react.useState)(initialParameters),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    parameters = _useState2[0],
    setParameters = _useState2[1];
  var _useState3 = (0, _react.useState)(initialVisibleColumnKeys),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    visibleColumnKeys = _useState4[0],
    setVisibleColumnKeys = _useState4[1];
  var _useColumnResize = (0, _useColumnResize2.useColumnResize)(initialColumnCustomSizes),
    columnCustomSizes = _useColumnResize.columnCustomSizes,
    onColumnResize = _useColumnResize.onColumnResize;
  var _useColumnWrapping = (0, _useColumnWrapping2.useColumnWrapping)(initialWrappedColumnKeys),
    wrappedColumnKeys = _useColumnWrapping.wrappedColumnKeys,
    onWrappedColumnChange = _useColumnWrapping.onWrappedColumnChange;
  var tableState = (0, _useDatasourceTableState.useDatasourceTableState)({
    datasourceId: datasourceId,
    parameters: isValidParameters(parameters) ? parameters : undefined,
    fieldKeys: visibleColumnKeys
  });
  var _useColumnVisibility = (0, _useColumnVisibility2.useColumnVisibility)({
      visibleColumnKeys: visibleColumnKeys,
      setVisibleColumnKeys: setVisibleColumnKeys,
      defaultVisibleColumnKeys: tableState.defaultVisibleColumnKeys,
      initialVisibleColumnKeys: initialVisibleColumnKeys
    }),
    onVisibleColumnKeysChange = _useColumnVisibility.onVisibleColumnKeysChange,
    visibleColumnCount = _useColumnVisibility.visibleColumnCount;
  var contextValue = (0, _react.useMemo)(function () {
    return {
      datasourceId: datasourceId,
      isValidParameters: isValidParameters,
      tableState: tableState,
      visibleColumnCount: visibleColumnCount,
      visibleColumnKeys: visibleColumnKeys,
      onVisibleColumnKeysChange: onVisibleColumnKeysChange,
      columnCustomSizes: columnCustomSizes,
      onColumnResize: onColumnResize,
      wrappedColumnKeys: wrappedColumnKeys,
      onWrappedColumnChange: onWrappedColumnChange,
      parameters: parameters,
      setParameters: setParameters,
      onInsert: onInsert
    };
  }, [datasourceId, isValidParameters, tableState, visibleColumnCount, visibleColumnKeys, onVisibleColumnKeysChange, columnCustomSizes, onColumnResize, wrappedColumnKeys, onWrappedColumnChange, parameters, onInsert]);
  return /*#__PURE__*/_react.default.createElement(DatasourceContext.Provider, {
    value: contextValue
  }, children);
};
var useDatasourceContext = exports.useDatasourceContext = function useDatasourceContext() {
  var value = (0, _react.useContext)(DatasourceContext);
  if (!value) {
    throw new Error('useDatasourceStore must be used within DatasourceContextProvider');
  }
  return value;
};