/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicSearchInput = void 0;
require("./index.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _reactIntlNext = require("react-intl-next");
var _button = require("@atlaskit/button");
var _searchEditorSearch = _interopRequireDefault(require("@atlaskit/icon/core/migration/search--editor-search"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _analytics = require("../../../../analytics");
var _messages = require("./messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var searchButtonStyles = null;
var formStyles = null;
var formWithMaxWidthStylesOld = null;
var formWithMaxWidthStyles = null;
var BasicSearchInput = exports.BasicSearchInput = function BasicSearchInput(_ref) {
  var isDisabled = _ref.isDisabled,
    isSearching = _ref.isSearching,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    searchTerm = _ref.searchTerm,
    fullWidth = _ref.fullWidth,
    testId = _ref.testId,
    placeholder = _ref.placeholder,
    ariaLabel = _ref.ariaLabel;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var handleSearchWithAnalytics = function handleSearchWithAnalytics() {
    fireEvent('ui.form.submitted.basicSearch', {});
    onSearch(searchTerm);
  };
  var handleFormSubmit = function handleFormSubmit(e) {
    e.preventDefault();
    handleSearchWithAnalytics();
  };
  return /*#__PURE__*/React.createElement("form", {
    onSubmit: handleFormSubmit,
    className: (0, _runtime.ax)([fullWidth ? "_16jlkb7n _1o9zkb7n _i0dlf1ug" : (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? "_16jlkb7n _1o9zkb7n _i0dlf1ug _p12f1mjv" : "_16jlkb7n _1o9zkb7n _i0dlf1ug _p12fr0r7"])
  }, /*#__PURE__*/React.createElement(_textfield.default, {
    elemAfterInput: /*#__PURE__*/React.createElement(_button.LoadingButton, {
      appearance: "primary",
      iconBefore: /*#__PURE__*/React.createElement(_searchEditorSearch.default, {
        label: formatMessage((0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? _messages.basicSearchInputMessages.basicTextSearchLabelIssueTermRefresh : _messages.basicSearchInputMessages.basicTextSearchLabel),
        LEGACY_size: "medium",
        color: "currentColor",
        spacing: "spacious"
      }),
      isDisabled: isDisabled,
      isLoading: isSearching,
      onClick: handleSearchWithAnalytics,
      spacing: "none",
      testId: "".concat(testId, "--basic-search-button"),
      className: (0, _runtime.ax)(["_2hwx12x7"])
    }),
    autoFocus: true,
    onChange: onChange,
    placeholder: (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? undefined : formatMessage(placeholder),
    testId: "".concat(testId, "--basic-search-input"),
    value: searchTerm,
    "aria-label": formatMessage((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? ariaLabel : placeholder)
  }));
};