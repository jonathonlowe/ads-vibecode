/* trigger.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./trigger.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _badge = _interopRequireDefault(require("@atlaskit/badge"));
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _standardButton = _interopRequireDefault(require("@atlaskit/button/standard-button"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-down"));
var _chevronDown2 = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _excluded = ["as", "style"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  triggerButtonLabelStyles: "_1reo15vq _18m915vq _1bto1l2s",
  badgeStylesOld: "_18u01b66",
  badgeStyles: "_18u0utpp"
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
var LoadingStateAnimationWrapper = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, __cmplr) {
  var _ref$as = _ref.as,
    C = _ref$as === void 0 ? "div" : _ref$as,
    __cmpls = _ref.style,
    __cmplp = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(C, (0, _extends2.default)({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: (0, _runtime.ax)(["_y44vkmg5 _kqswh2mm", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  LoadingStateAnimationWrapper.displayName = 'LoadingStateAnimationWrapper';
}
var PopupTrigger = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, ref) {
  var isSelected = _ref2.isSelected,
    isDisabled = _ref2.isDisabled,
    isLoading = _ref2.isLoading,
    selectedOptions = _ref2.selectedOptions,
    testId = _ref2.testId,
    label = _ref2.label;
  var _ref3 = selectedOptions || [],
    _ref4 = (0, _slicedToArray2.default)(_ref3, 1),
    firstOption = _ref4[0];
  var hasOptions = selectedOptions && selectedOptions.length > 0;
  var showButtonLoading = !isDisabled && isLoading;
  var triggerButtonTestId = "".concat(testId, "-trigger");
  var LoadingButton = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(LoadingStateAnimationWrapper, null, /*#__PURE__*/_react.default.createElement(_standardButton.default, {
      iconAfter: /*#__PURE__*/_react.default.createElement(_spinner.default, {
        size: 'xsmall'
      }),
      testId: "".concat(triggerButtonTestId, "--loading-button")
    }, label));
  }, [label, triggerButtonTestId]);
  var DefaultButton = (0, _react.useCallback)(function () {
    return (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/_react.default.createElement(_new.default, {
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: function iconAfter() {
        return /*#__PURE__*/_react.default.createElement(_chevronDown.default, {
          label: "",
          color: "currentColor"
        });
      },
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/_react.default.createElement(_compiled.Flex, null, /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      xcss: styles.triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/_react.default.createElement(_compiled.Flex, {
      xcss: styles.badgeStyles,
      alignItems: "center"
    }, /*#__PURE__*/_react.default.createElement(_badge.default, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1)))) : /*#__PURE__*/_react.default.createElement(_standardButton.default, {
      appearance: "default",
      isSelected: isSelected || hasOptions,
      isDisabled: isDisabled,
      iconAfter: /*#__PURE__*/_react.default.createElement(_chevronDown2.default, {
        label: "",
        color: "currentColor"
      }),
      testId: "".concat(triggerButtonTestId, "--button")
    }, /*#__PURE__*/_react.default.createElement(_compiled.Flex, null, /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      xcss: styles.triggerButtonLabelStyles
    }, label, firstOption && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ": ", firstOption.label)), selectedOptions && selectedOptions.length > 1 && /*#__PURE__*/_react.default.createElement(_compiled.Flex, {
      xcss: styles.badgeStylesOld,
      alignItems: "center"
    }, /*#__PURE__*/_react.default.createElement(_badge.default, {
      appearance: "primary"
    }, "+", selectedOptions.length - 1))));
  }, [firstOption, hasOptions, isDisabled, isSelected, label, selectedOptions, triggerButtonTestId]);

  /**
   * We had an issue with the popup component referencing a stale DOM ref for the trigger button.
   * Hence introducing a Box to make sure ref is always the same and only content is refreshed on re-renders
   */
  return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    ref: ref,
    testId: triggerButtonTestId
  }, showButtonLoading ? /*#__PURE__*/_react.default.createElement(LoadingButton, null) : /*#__PURE__*/_react.default.createElement(DefaultButton, null));
});
var _default = exports.default = PopupTrigger;