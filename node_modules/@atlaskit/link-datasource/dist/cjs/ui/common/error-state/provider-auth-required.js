/* provider-auth-required.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProviderAuthRequired = void 0;
require("./provider-auth-required.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _emptyState = _interopRequireDefault(require("@atlaskit/empty-state"));
var _outboundAuthFlowClient = require("@atlaskit/outbound-auth-flow-client");
var _compiled = require("@atlaskit/primitives/compiled");
var _analytics = require("../../../analytics");
var _useErrorLogger2 = _interopRequireDefault(require("../../../hooks/useErrorLogger"));
var _messages = require("./messages");
var _providerAuthRequiredSvg = require("./provider-auth-required-svg");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var buttonStyles = null;
var learnMoreAboutSmartLinksUrl = 'https://support.atlassian.com/confluence-cloud/docs/insert-links-and-anchors/#Smart-Links-from-Jira-and-other-products';
var ProviderAuthRequired = exports.ProviderAuthRequired = function ProviderAuthRequired(_ref) {
  var _ref$auth = _ref.auth,
    auth = _ref$auth === void 0 ? [] : _ref$auth,
    onAuthSuccess = _ref.onAuthSuccess,
    onAuthError = _ref.onAuthError,
    extensionKey = _ref.extensionKey,
    providerName = _ref.providerName,
    datasourceId = _ref.datasourceId;
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useErrorLogger = (0, _useErrorLogger2.default)({
      datasourceId: datasourceId
    }),
    captureError = _useErrorLogger.captureError;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var _auth = (0, _slicedToArray2.default)(auth, 1),
    authInfo = _auth[0];
  (0, _react.useEffect)(function () {
    fireEvent('ui.error.shown', {
      reason: 'access'
    });
  }, [fireEvent]);
  var onAuthRequest = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _outboundAuthFlowClient.auth)(authInfo.url);
          case 3:
            fireEvent('operational.provider.authSuccess', {
              extensionKey: extensionKey,
              experience: 'datasource'
            });
            onAuthSuccess === null || onAuthSuccess === void 0 || onAuthSuccess();
            _context.next = 12;
            break;
          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            fireEvent('operational.provider.authFailure', {
              reason: _context.t0 instanceof _outboundAuthFlowClient.AuthError && _context.t0.type ? _context.t0.type : null,
              extensionKey: extensionKey,
              experience: 'datasource'
            });
            captureError('ProviderOnAuthRequest', _context.t0);
            onAuthError === null || onAuthError === void 0 || onAuthError();
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 7]]);
    }));
    return function onAuthRequest() {
      return _ref2.apply(this, arguments);
    };
  }();
  var renderAuthDescription = function renderAuthDescription() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, formatMessage(_messages.loadingErrorMessages.authScreenDescriptionText, {
      providerName: providerName
    }), ' ', /*#__PURE__*/_react.default.createElement(_compiled.Anchor, {
      href: learnMoreAboutSmartLinksUrl,
      target: "_blank",
      rel: "noreferrer noopener"
    }, formatMessage(_messages.loadingErrorMessages.learnMoreAboutSmartLinks)));
  };
  var renderAuthConnectButton = function renderAuthConnectButton() {
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: onAuthRequest,
      appearance: "primary",
      className: (0, _runtime.ax)(["_19pkpxbi"])
    }, formatMessage(_messages.loadingErrorMessages.authConnectButtonText));
  };
  return /*#__PURE__*/_react.default.createElement(_emptyState.default, {
    testId: "datasource--access-required-with-auth",
    header: formatMessage(_messages.loadingErrorMessages.authScreenHeaderText, {
      providerName: providerName
    }),
    description: renderAuthDescription(),
    renderImage: _providerAuthRequiredSvg.ProviderAuthRequiredSVG,
    primaryAction: renderAuthConnectButton()
  });
};