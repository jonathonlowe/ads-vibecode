"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapFieldValuesToFilterOptions = mapFieldValuesToFilterOptions;
exports.mapFieldValuesToPageCursor = mapFieldValuesToPageCursor;
exports.mapFieldValuesToTotalCount = mapFieldValuesToTotalCount;
exports.mapHydrateResponseData = mapHydrateResponseData;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _types = require("../types");
var _ui = require("../ui");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function isNonNullSelectOption(edge) {
  return edge !== null;
}
function isColorName(colorName) {
  return Object.keys(_types.appearanceMap).includes(colorName);
}
var getLozengeAppearance = function getLozengeAppearance(colorName) {
  if (isColorName(colorName)) {
    return _types.appearanceMap[colorName];
  }
};
var checkAndConvertToAbsoluteUrl = function checkAndConvertToAbsoluteUrl(url, siteUrl) {
  if (!url) {
    return '';
  }
  if (/^data:(.*)/.test(url) || /^http(.*)/.test(url) || !siteUrl) {
    return url;
  }
  return "".concat(siteUrl).concat(url);
};
function mapNodeToOption(_ref) {
  var displayName = _ref.displayName,
    jqlTerm = _ref.jqlTerm,
    group = _ref.group,
    issueTypes = _ref.issueTypes,
    project = _ref.project,
    statusCategory = _ref.statusCategory,
    user = _ref.user,
    siteUrl = _ref.siteUrl;
  try {
    var baseProps = {
      label: displayName,
      // this ensures that the returned value is not wrapped in single and double quotes
      // e.g. '"value"' -> 'value'
      value: decodeURIComponent(jqlTerm).replace(/^"|"$/g, '')
    };
    if (user) {
      return _objectSpread(_objectSpread({}, baseProps), {}, {
        optionType: 'avatarLabel',
        avatar: user.picture,
        isSquare: false
      });
    }
    if (group) {
      return _objectSpread(_objectSpread({}, baseProps), {}, {
        optionType: 'avatarLabel',
        isGroup: true
      });
    }
    if (project) {
      var _project$avatar;
      return _objectSpread(_objectSpread({}, baseProps), {}, {
        optionType: 'iconLabel',
        icon: checkAndConvertToAbsoluteUrl((_project$avatar = project.avatar) === null || _project$avatar === void 0 ? void 0 : _project$avatar.small, siteUrl)
      });
    }
    if (issueTypes) {
      var _issueTypes$;
      return _objectSpread(_objectSpread({}, baseProps), {}, {
        optionType: 'iconLabel',
        icon: checkAndConvertToAbsoluteUrl((_issueTypes$ = issueTypes[0]) === null || _issueTypes$ === void 0 ? void 0 : _issueTypes$.avatar.small, siteUrl)
      });
    }
    if (statusCategory) {
      return _objectSpread(_objectSpread({}, baseProps), {}, {
        optionType: 'lozengeLabel',
        appearance: getLozengeAppearance(statusCategory.colorName)
      });
    }
    return null;
  } catch (error) {
    return null;
  }
}
function mapHydrateResponseData(_ref2) {
  var _data$jira;
  var data = _ref2.data;
  var transformedHydrateResponseData = {};
  data === null || data === void 0 || (_data$jira = data.jira) === null || _data$jira === void 0 || (_data$jira = _data$jira.jqlBuilder) === null || _data$jira === void 0 || (_data$jira = _data$jira.hydrateJqlQuery) === null || _data$jira === void 0 || (_data$jira = _data$jira.fields) === null || _data$jira === void 0 || _data$jira.forEach(function (_ref3) {
    var jqlTerm = _ref3.jqlTerm,
      _ref3$values = _ref3.values,
      values = _ref3$values === void 0 ? [] : _ref3$values;
    /**
     * Currently, we expect to hydrate only the 4 filter fields that we use.
     * Hence we check if jqlTerm is one of the values in availableBasicFilterTypes
     */
    if (!_ui.availableBasicFilterTypes.includes(jqlTerm)) {
      return;
    }
    var options = values.map(function (_ref4) {
      var values = _ref4.values;
      return values && values[0] ? mapNodeToOption(values[0]) : null;
    }).filter(isNonNullSelectOption) || [];
    transformedHydrateResponseData[jqlTerm] = options;
  });
  return transformedHydrateResponseData;
}
function mapFieldValuesToFilterOptions(_ref5) {
  var _data$jira2;
  var data = _ref5.data,
    siteUrl = _ref5.siteUrl;
  return (data === null || data === void 0 || (_data$jira2 = data.jira) === null || _data$jira2 === void 0 || (_data$jira2 = _data$jira2.jqlBuilder) === null || _data$jira2 === void 0 || (_data$jira2 = _data$jira2.fieldValues) === null || _data$jira2 === void 0 || (_data$jira2 = _data$jira2.edges) === null || _data$jira2 === void 0 ? void 0 : _data$jira2.map(function (edge) {
    return edge.node ? mapNodeToOption(_objectSpread(_objectSpread({}, edge.node), {}, {
      siteUrl: siteUrl
    })) : null;
  }).filter(isNonNullSelectOption)) || [];
}
function mapFieldValuesToTotalCount(_ref6) {
  var _data$jira3;
  var data = _ref6.data;
  return (data === null || data === void 0 || (_data$jira3 = data.jira) === null || _data$jira3 === void 0 || (_data$jira3 = _data$jira3.jqlBuilder) === null || _data$jira3 === void 0 || (_data$jira3 = _data$jira3.fieldValues) === null || _data$jira3 === void 0 ? void 0 : _data$jira3.totalCount) || 0;
}
function mapFieldValuesToPageCursor(_ref7) {
  var _data$jira4;
  var data = _ref7.data;
  return data === null || data === void 0 || (_data$jira4 = data.jira) === null || _data$jira4 === void 0 || (_data$jira4 = _data$jira4.jqlBuilder) === null || _data$jira4 === void 0 || (_data$jira4 = _data$jira4.fieldValues) === null || _data$jira4 === void 0 || (_data$jira4 = _data$jira4.pageInfo) === null || _data$jira4 === void 0 ? void 0 : _data$jira4.endCursor;
}