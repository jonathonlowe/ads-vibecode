"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JiraIssuesConfigModalNoSuspense = exports.JiraIssuesConfigModal = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _intlMessagesProvider = require("@atlaskit/intl-messages-provider");
var _link = _interopRequireDefault(require("@atlaskit/link"));
var _modalDialog = require("@atlaskit/modal-dialog");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _analytics = require("../../../analytics");
var _constants = require("../../../analytics/constants");
var _types = require("../../../analytics/types");
var _ufoExperiences = require("../../../analytics/ufoExperiences");
var _useColumnPickerRenderedFailedUfoExperience = require("../../../analytics/ufoExperiences/hooks/useColumnPickerRenderedFailedUfoExperience");
var _useDataRenderedUfoExperience = require("../../../analytics/ufoExperiences/hooks/useDataRenderedUfoExperience");
var _utils = require("../../../analytics/utils");
var _search = require("../../../common/ui/rich-icon/search");
var _fetchMessagesForLocale = require("../../../common/utils/locale/fetch-messages-for-locale");
var _datasourceExperienceId = require("../../../contexts/datasource-experience-id");
var _userInteractions = require("../../../contexts/user-interactions");
var _en = _interopRequireDefault(require("../../../i18n/en"));
var _useAvailableSites2 = require("../../../services/useAvailableSites");
var _state = require("../../../state");
var _accessRequired = require("../../common/error-state/access-required");
var _messages = require("../../common/error-state/messages");
var _modalLoadingError = require("../../common/error-state/modal-loading-error");
var _noInstances = require("../../common/error-state/no-instances");
var _noResults = require("../../common/error-state/no-results");
var _initialStateView = require("../../common/initial-state-view");
var _messages2 = require("../../common/initial-state-view/messages");
var _cancelButton = require("../../common/modal/cancel-button");
var _contentContainer = require("../../common/modal/content-container");
var _countViewSmartLink = require("../../common/modal/count-view-smart-link");
var _datasourceContext = require("../../common/modal/datasource-context");
var _datasourceModal = require("../../common/modal/datasource-modal");
var _createDatasourceModal = require("../../common/modal/datasource-modal/createDatasourceModal");
var _datasourcesTableInModalPreview = _interopRequireDefault(require("../../common/modal/datasources-table-in-modal-preview"));
var _insertButton = require("../../common/modal/insert-button");
var _modeSwitcher = require("../../common/modal/mode-switcher");
var _useViewModeContext2 = require("../../common/modal/mode-switcher/useViewModeContext");
var _searchCount = _interopRequireDefault(require("../../common/modal/search-count"));
var _siteSelector = require("../../common/modal/site-selector");
var _issueLikeTable = require("../../issue-like-table");
var _ui = require("../basic-filters/ui");
var _isQueryTooComplex = require("../basic-filters/utils/isQueryTooComplex");
var _jiraSearchContainer = require("../jira-search-container");
var _jiraIssuesInitialStateSvg = require("./jira-issues-initial-state-svg");
var _messages3 = require("./messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable @atlaskit/platform/no-preconditioning */ /* eslint-disable @atlaskit/platform/ensure-feature-flag-prefix */
var noop = function noop() {
  return '';
};
var getDisplayValue = function getDisplayValue(currentViewMode, itemCount) {
  if (currentViewMode === 'table') {
    return _types.DatasourceDisplay.DATASOURCE_TABLE;
  }
  return itemCount === 1 ? _types.DatasourceDisplay.INLINE : _types.DatasourceDisplay.DATASOURCE_INLINE;
};
var jqlSupportDocumentLink = 'https://support.atlassian.com/jira-service-management-cloud/docs/use-advanced-search-with-jira-query-language-jql/';
var isValidParameters = function isValidParameters(parameters) {
  return typeof (parameters === null || parameters === void 0 ? void 0 : parameters.jql) === 'string' && parameters.jql.length > 0 && typeof (parameters === null || parameters === void 0 ? void 0 : parameters.cloudId) === 'string' && parameters.cloudId.length > 0;
};
var PlainJiraIssuesConfigModal = function PlainJiraIssuesConfigModal(props) {
  var onCancel = props.onCancel,
    urlBeingEdited = props.url;
  var _useDatasourceContext = (0, _datasourceContext.useDatasourceContext)(),
    visibleColumnCount = _useDatasourceContext.visibleColumnCount,
    visibleColumnKeys = _useDatasourceContext.visibleColumnKeys,
    parameters = _useDatasourceContext.parameters,
    setParameters = _useDatasourceContext.setParameters,
    tableState = _useDatasourceContext.tableState;
  var reset = tableState.reset,
    status = tableState.status,
    responseItems = tableState.responseItems,
    columns = tableState.columns,
    totalCount = tableState.totalCount,
    _tableState$extension = tableState.extensionKey,
    extensionKey = _tableState$extension === void 0 ? null : _tableState$extension,
    destinationObjectTypes = tableState.destinationObjectTypes;
  var _ref = parameters !== null && parameters !== void 0 ? parameters : {},
    cloudId = _ref.cloudId,
    jql = _ref.jql;
  var _useState = (0, _react.useState)(jql),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    initialJql = _useState2[0];
  var _useViewModeContext = (0, _useViewModeContext2.useViewModeContext)(),
    currentViewMode = _useViewModeContext.currentViewMode;
  var _useAvailableSites = (0, _useAvailableSites2.useAvailableSites)('jira', cloudId),
    availableSites = _useAvailableSites.availableSites,
    selectedJiraSite = _useAvailableSites.selectedSite;
  var _useState3 = (0, _react.useState)(jql),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    searchBarJql = _useState4[0],
    setSearchBarJql = _useState4[1];

  // analytics related parameters
  var searchCount = (0, _react.useRef)(0);
  var userInteractions = (0, _userInteractions.useUserInteractions)();
  var initialSearchMethod = !(0, _isQueryTooComplex.isQueryTooComplex)(initialJql || '') ? 'basic' : 'jql';
  var _useState5 = (0, _react.useState)(initialSearchMethod),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentSearchMethod = _useState6[0],
    setCurrentSearchMethod = _useState6[1];
  var searchMethodSearchedWith = (0, _react.useRef)(null);
  var basicFilterSelectionsSearchedWith = (0, _react.useRef)({});
  var isSearchedWithComplexQuery = (0, _react.useRef)(false);
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  var _ref2 = (0, _platformFeatureFlags.fg)('bandicoots-update-sllv-icons') ?
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, _reactIntlNext.useIntl)() : {
      formatMessage: noop
    },
    formatMessage = _ref2.formatMessage;
  var analyticsPayload = (0, _react.useMemo)(function () {
    return {
      extensionKey: extensionKey,
      destinationObjectTypes: destinationObjectTypes
    };
  }, [destinationObjectTypes, extensionKey]);
  var resolvedWithNoResults = status === 'resolved' && !responseItems.length;
  var jqlUrl = selectedJiraSite && jql && "".concat(selectedJiraSite.url, "/issues/?jql=").concat(encodeURI(jql));
  var shouldShowIssueCount = !!totalCount && totalCount !== 1 && currentViewMode === 'table';
  var isDataReady = (visibleColumnKeys || []).length > 0;
  var hasNoJiraSites = availableSites && availableSites.length === 0;
  (0, _react.useEffect)(function () {
    if (availableSites) {
      fireEvent('ui.modal.ready.datasource', {
        instancesCount: availableSites.length,
        schemasCount: null
      });
    }
  }, [fireEvent, availableSites]);
  (0, _react.useEffect)(function () {
    var shouldStartUfoExperience = status === 'loading';
    if (shouldStartUfoExperience) {
      (0, _ufoExperiences.startUfoExperience)({
        name: 'datasource-rendered'
      }, experienceId);
    }
  }, [experienceId, status]);
  (0, _useDataRenderedUfoExperience.useDataRenderedUfoExperience)({
    status: status,
    experienceId: experienceId,
    itemCount: responseItems.length,
    canBeLink: currentViewMode === 'inline',
    extensionKey: extensionKey
  });

  /**
   * If the selected Jira site changes, update the cloudId in the parameters
   * This is mainly useful for setting the initial cloudId after the site selection loads
   */
  (0, _react.useEffect)(function () {
    if (selectedJiraSite && (!cloudId || cloudId !== selectedJiraSite.cloudId)) {
      setParameters(function () {
        return {
          jql: '',
          cloudId: selectedJiraSite.cloudId
        };
      });
    }
  }, [cloudId, selectedJiraSite, setParameters]);
  var fireSingleItemViewedEvent = (0, _react.useCallback)(function () {
    fireEvent('ui.link.viewed.singleItem', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchMethod: (0, _utils.mapSearchMethod)(searchMethodSearchedWith.current)
    }));
  }, [analyticsPayload, fireEvent]);
  var fireCountViewedEvent = (0, _react.useCallback)(function () {
    fireEvent('ui.link.viewed.count', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchMethod: (0, _utils.mapSearchMethod)(searchMethodSearchedWith.current),
      totalItemCount: totalCount || 0
    }));
  }, [analyticsPayload, fireEvent, totalCount]);
  var fireTableViewedEvent = (0, _react.useCallback)(function () {
    if (isDataReady) {
      fireEvent('ui.table.viewed.datasourceConfigModal', _objectSpread(_objectSpread({}, analyticsPayload), {}, {
        totalItemCount: totalCount || 0,
        searchMethod: (0, _utils.mapSearchMethod)(searchMethodSearchedWith.current),
        displayedColumnCount: visibleColumnCount.current
      }));
    }
  }, [isDataReady, fireEvent, analyticsPayload, totalCount, visibleColumnCount]);
  var fireIssueViewAnalytics = (0, _react.useCallback)(function () {
    if (!totalCount) {
      return;
    }
    if (totalCount > 1) {
      fireTableViewedEvent();
    } else if (totalCount === 1) {
      fireSingleItemViewedEvent();
    }
  }, [fireSingleItemViewedEvent, fireTableViewedEvent, totalCount]);
  (0, _react.useEffect)(function () {
    var isResolved = status === 'resolved';
    var isIssueViewMode = currentViewMode === 'table';
    var isCountViewMode = currentViewMode === 'inline';
    if (!isResolved) {
      return;
    }
    if (isIssueViewMode) {
      fireIssueViewAnalytics();
    } else if (isCountViewMode) {
      fireCountViewedEvent();
    }
  }, [currentViewMode, status, fireIssueViewAnalytics, fireCountViewedEvent]);
  (0, _useColumnPickerRenderedFailedUfoExperience.useColumnPickerRenderedFailedUfoExperience)(status, experienceId);
  var onSearch = (0, _react.useCallback)(function (newParameters, _ref3) {
    var searchMethod = _ref3.searchMethod,
      basicFilterSelections = _ref3.basicFilterSelections,
      isQueryComplex = _ref3.isQueryComplex;
    searchCount.current++;
    searchMethodSearchedWith.current = searchMethod;
    basicFilterSelectionsSearchedWith.current = basicFilterSelections;
    isSearchedWithComplexQuery.current = isQueryComplex;
    if (jql !== newParameters.jql) {
      userInteractions.add(_types.DatasourceAction.QUERY_UPDATED);
    }
    setParameters(function (state) {
      return state && newParameters.jql ? {
        cloudId: state.cloudId,
        jql: newParameters.jql
      } : undefined;
    });
    reset({
      shouldForceRequest: true
    });
  }, [jql, reset, userInteractions, setParameters]);
  var onSiteSelection = (0, _react.useCallback)(function (site) {
    userInteractions.add(_types.DatasourceAction.INSTANCE_UPDATED);
    setParameters({
      jql: '',
      cloudId: site.cloudId
    });
    reset({
      shouldForceRequest: true
    });
  }, [reset, userInteractions, setParameters]);
  var retrieveUrlForSmartCardRender = (0, _react.useCallback)(function () {
    var _data$key;
    var _responseItems = (0, _slicedToArray2.default)(responseItems, 1),
      data = _responseItems[0];
    // agreement with BE that we will use `key` for rendering smartlink
    return data === null || data === void 0 || (_data$key = data.key) === null || _data$key === void 0 || (_data$key = _data$key.data) === null || _data$key === void 0 ? void 0 : _data$key.url;
  }, [responseItems]);
  var renderCountModeContent = (0, _react.useCallback)(function () {
    var selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    if (status === 'unauthorized') {
      return /*#__PURE__*/_react.default.createElement(_accessRequired.AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (status === 'empty' || !jql || !selectedJiraSiteUrl) {
      return /*#__PURE__*/_react.default.createElement(_countViewSmartLink.SmartCardPlaceholder, {
        placeholderText: (0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? _messages3.modalMessages.issuesCountSmartCardPlaceholderTextIssueTermRefresh : _messages3.modalMessages.issuesCountSmartCardPlaceholderText
      });
    } else {
      var url;
      if (responseItems.length === 1 && retrieveUrlForSmartCardRender()) {
        url = retrieveUrlForSmartCardRender();
      } else {
        url = "".concat(selectedJiraSiteUrl, "/issues/?jql=").concat(encodeURIComponent(jql));
      }
      return /*#__PURE__*/_react.default.createElement(_countViewSmartLink.SmartLink, {
        url: url
      });
    }
  }, [jql, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, responseItems, retrieveUrlForSmartCardRender]);
  var renderIssuesModeContent = (0, _react.useCallback)(function () {
    var selectedJiraSiteUrl = selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url;
    var getDescriptionMessage = function getDescriptionMessage() {
      if (currentSearchMethod === 'basic' && (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv')) {
        return _messages2.initialStateViewMessages.searchDescriptionForBasicSearchVisualRefreshSllv;
      }
      if ((0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh')) {
        return currentSearchMethod === 'jql' ? _messages2.initialStateViewMessages.searchDescriptionForJQLSearchIssueTermRefresh : _messages2.initialStateViewMessages.searchDescriptionForBasicSearchIssueTermRefresh;
      }
      return currentSearchMethod === 'jql' ? _messages2.initialStateViewMessages.searchDescriptionForJQLSearch : _messages2.initialStateViewMessages.searchDescriptionForBasicSearch;
    };
    if (status === 'rejected' && jqlUrl) {
      if ((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv')) {
        return /*#__PURE__*/_react.default.createElement(_modalLoadingError.ModalLoadingError, {
          errorMessage: jqlUrl ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages3.modalMessages.checkConnectionWithSourceVisualRefreshSllv, {
            values: {
              a: function a(urlText) {
                return /*#__PURE__*/_react.default.createElement(_link.default, {
                  href: jqlUrl
                }, urlText);
              }
            }
          })) : undefined,
          onRefresh: function onRefresh() {
            return reset({
              shouldForceRequest: true
            });
          }
        });
      }
      return /*#__PURE__*/_react.default.createElement(_modalLoadingError.ModalLoadingError, {
        errorMessage: jqlUrl ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages3.modalMessages.checkConnectionWithSource, {
          values: {
            a: function a(urlText) {
              return /*#__PURE__*/_react.default.createElement("a", {
                href: jqlUrl
              }, urlText);
            }
          }
        })) : undefined
      });
    } else if (status === 'unauthorized') {
      return /*#__PURE__*/_react.default.createElement(_accessRequired.AccessRequired, {
        url: selectedJiraSiteUrl || urlBeingEdited
      });
    } else if (resolvedWithNoResults || status === 'forbidden') {
      return /*#__PURE__*/_react.default.createElement(_noResults.NoResults, null);
    } else if (status === 'empty' || !columns.length) {
      // persist the empty state when making the initial /data request which contains the columns
      return /*#__PURE__*/_react.default.createElement(_contentContainer.ContentContainer, {
        withTableBorder: !!jql
      }, !!jql ? /*#__PURE__*/_react.default.createElement(_issueLikeTable.EmptyState, {
        testId: "jira-datasource-modal--empty-state"
      }) : /*#__PURE__*/_react.default.createElement(_initialStateView.InitialStateView, {
        icon: (0, _platformFeatureFlags.fg)('bandicoots-update-sllv-icons') ? /*#__PURE__*/_react.default.createElement(_search.RichIconSearch, {
          alt: formatMessage((0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? _messages3.modalMessages.searchJiraTitleIssueTermRefresh : _messages3.modalMessages.searchJiraTitle),
          size: 'xlarge'
        }) : /*#__PURE__*/_react.default.createElement(_jiraIssuesInitialStateSvg.JiraInitialStateSVG, null),
        title: (0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? _messages3.modalMessages.searchJiraTitleIssueTermRefresh : _messages3.modalMessages.searchJiraTitle,
        description: getDescriptionMessage(),
        learnMoreLink: currentSearchMethod === 'jql' ? {
          href: jqlSupportDocumentLink,
          text: _messages2.initialStateViewMessages.learnMoreLinkOld
        } : (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? {
          href: jqlSupportDocumentLink,
          text: _messages2.initialStateViewMessages.learnMoreLink
        } : undefined
      }));
    }
    return /*#__PURE__*/_react.default.createElement(_contentContainer.ContentContainer, {
      withTableBorder: true
    }, /*#__PURE__*/_react.default.createElement(_datasourcesTableInModalPreview.default, {
      testId: "jira-datasource-table"
    }));
  }, [columns.length, currentSearchMethod, formatMessage, jql, jqlUrl, resolvedWithNoResults, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url, status, urlBeingEdited, reset]);
  var siteSelectorLabel = (0, _react.useMemo)(function () {
    if ((0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh')) {
      return availableSites && availableSites.length > 1 ? _messages3.modalMessages.insertIssuesTitleManySitesIssueTermRefresh : _messages3.modalMessages.insertIssuesTitleIssueTermRefresh;
    }
    return availableSites && availableSites.length > 1 ? _messages3.modalMessages.insertIssuesTitleManySites : _messages3.modalMessages.insertIssuesTitle;
  }, [availableSites]);
  var getCancelButtonAnalyticsPayload = (0, _react.useCallback)(function () {
    return _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      searchCount: searchCount.current,
      actions: userInteractions.get()
    });
  }, [analyticsPayload, userInteractions]);
  var filterSelectionCount = _ui.availableBasicFilterTypes.reduce(function (current, filter) {
    var _basicFilterSelection;
    return _objectSpread(_objectSpread({}, current), {}, (0, _defineProperty2.default)({}, "".concat(filter, "BasicFilterSelectionCount"), ((_basicFilterSelection = basicFilterSelectionsSearchedWith.current[filter]) === null || _basicFilterSelection === void 0 ? void 0 : _basicFilterSelection.length) || 0));
  }, {});
  var getInsertButtonAnalyticsPayload = (0, _react.useCallback)(function () {
    return _objectSpread(_objectSpread({}, analyticsPayload), {}, {
      display: getDisplayValue(currentViewMode, totalCount || 0),
      isQueryComplex: isSearchedWithComplexQuery.current,
      searchMethod: (0, _utils.mapSearchMethod)(searchMethodSearchedWith.current),
      searchCount: searchCount.current,
      actions: userInteractions.get()
    }, searchMethodSearchedWith.current === 'basic' ? _objectSpread({}, filterSelectionCount) : {});
  }, [analyticsPayload, currentViewMode, filterSelectionCount, totalCount, userInteractions]);
  var urlToInsert = (0, _react.useMemo)(function () {
    var jql = parameters === null || parameters === void 0 ? void 0 : parameters.jql;
    if (!jql || !(selectedJiraSite !== null && selectedJiraSite !== void 0 && selectedJiraSite.url)) {
      return;
    }
    var upToDateJqlUrl = "".concat(selectedJiraSite.url, "/issues/?jql=").concat(encodeURIComponent(jql));
    return currentViewMode === 'inline' && responseItems.length === 1 ? retrieveUrlForSmartCardRender() : upToDateJqlUrl;
  }, [currentViewMode, parameters === null || parameters === void 0 ? void 0 : parameters.jql, responseItems, retrieveUrlForSmartCardRender, selectedJiraSite === null || selectedJiraSite === void 0 ? void 0 : selectedJiraSite.url]);
  return /*#__PURE__*/_react.default.createElement(_intlMessagesProvider.IntlMessagesProvider, {
    defaultMessages: _en.default,
    loaderFn: _fetchMessagesForLocale.fetchMessagesForLocale
  }, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalTransition, null, /*#__PURE__*/_react.default.createElement(_datasourceModal.DatasourceModal, {
    testId: "jira-datasource-modal",
    onClose: onCancel
  }, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalHeader, null, /*#__PURE__*/_react.default.createElement(_modalDialog.ModalTitle, null, /*#__PURE__*/_react.default.createElement(_siteSelector.SiteSelector, {
    availableSites: availableSites,
    onSiteSelection: onSiteSelection,
    selectedSite: selectedJiraSite,
    testId: "jira-datasource-modal--site-selector",
    label: siteSelectorLabel
  })), !hasNoJiraSites && /*#__PURE__*/_react.default.createElement(_modeSwitcher.DatasourceViewModeDropDown, null)), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalBody, null, !hasNoJiraSites ? /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_jiraSearchContainer.JiraSearchContainer, {
    setSearchBarJql: setSearchBarJql,
    searchBarJql: searchBarJql,
    isSearching: status === 'loading',
    parameters: parameters,
    onSearch: onSearch,
    initialSearchMethod: initialSearchMethod,
    onSearchMethodChange: setCurrentSearchMethod,
    site: selectedJiraSite
  }), currentViewMode === 'inline' ? renderCountModeContent() : renderIssuesModeContent()) : /*#__PURE__*/_react.default.createElement(_noInstances.NoInstancesView, {
    title: _messages.loadingErrorMessages.noAccessToJiraSitesTitle,
    description: _messages.loadingErrorMessages.noAccessToJiraSitesDescription,
    testId: "no-jira-instances-content"
  })), /*#__PURE__*/_react.default.createElement(_modalDialog.ModalFooter, null, shouldShowIssueCount && /*#__PURE__*/_react.default.createElement(_searchCount.default, {
    searchCount: totalCount,
    url: jqlUrl,
    prefixTextType: "issue",
    testId: "jira-datasource-modal-total-issues-count"
  }), /*#__PURE__*/_react.default.createElement(_cancelButton.CancelButton, {
    onCancel: onCancel,
    getAnalyticsPayload: getCancelButtonAnalyticsPayload,
    testId: "jira-datasource-modal--cancel-button"
  }), !hasNoJiraSites && /*#__PURE__*/_react.default.createElement(_insertButton.InsertButton, {
    testId: "jira-datasource-modal--insert-button",
    url: urlToInsert,
    getAnalyticsPayload: getInsertButtonAnalyticsPayload
  }, (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, _messages3.modalMessages.insertIssuesButtonTextIssueTermSllv) : (0, _platformFeatureFlags.fg)('confluence-issue-terminology-refresh') ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, _messages3.modalMessages.insertIssuesButtonTextIssueTermRefresh) : /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, _messages3.modalMessages.insertIssuesButtonText))))));
};
var ConnectedJiraIssueConfigModal = (0, _createDatasourceModal.createDatasourceModal)({
  isValidParameters: isValidParameters,
  dataProvider: 'jira-issues',
  component: PlainJiraIssuesConfigModal
});
var JiraIssuesConfigModal = exports.JiraIssuesConfigModal = function JiraIssuesConfigModal(props) {
  var onInsert = props.onInsert;
  var onInsertWithMacroAnalytics = (0, _react.useCallback)(function (adf, analyticsEvent) {
    if (analyticsEvent && adf.type === 'inlineCard') {
      var macroInsertedEvent = analyticsEvent.clone();
      macroInsertedEvent === null || macroInsertedEvent === void 0 || macroInsertedEvent.update({
        eventType: 'track',
        action: 'inserted',
        actionSubject: 'macro',
        actionSubjectId: 'jlol'
      });
      macroInsertedEvent === null || macroInsertedEvent === void 0 || macroInsertedEvent.fire(_constants.EVENT_CHANNEL);
    }
    onInsert(adf, analyticsEvent);
  }, [onInsert]);
  return /*#__PURE__*/_react.default.createElement(_state.StoreContainer, null, /*#__PURE__*/_react.default.createElement(ConnectedJiraIssueConfigModal, (0, _extends2.default)({}, props, {
    onInsert: onInsertWithMacroAnalytics
  })));
};
var JiraIssuesConfigModalNoSuspense = exports.JiraIssuesConfigModalNoSuspense = JiraIssuesConfigModal;