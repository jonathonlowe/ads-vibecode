"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JiraJQLEditor = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jqlEditor = require("@atlaskit/jql-editor");
var _jqlEditorAutocompleteRest = require("@atlaskit/jql-editor-autocomplete-rest");
var _makeGetJqlAutocompleteData = require("../../../services/makeGetJqlAutocompleteData");
var _makeGetJqlSuggestionsData = require("../../../services/makeGetJqlSuggestionsData");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var JiraJQLEditor = exports.JiraJQLEditor = function JiraJQLEditor(_ref) {
  var cloudId = _ref.cloudId,
    isSearching = _ref.isSearching,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    query = _ref.query;
  var autocompleteProvider = (0, _jqlEditorAutocompleteRest.useAutocompleteProvider)('link-datasource', (0, _makeGetJqlAutocompleteData.makeGetJqlAutocompleteData)(cloudId), (0, _makeGetJqlSuggestionsData.makeGetJqlSuggestionsData)(cloudId));

  // This is an expected (pretty strange imo) way of making sure text field is in focus when rendered
  var inputRef = (0, _react.useRef)({
    focus: function focus() {}
  });
  (0, _react.useEffect)(function () {
    requestAnimationFrame(function () {
      var _inputRef$current;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
    });
  }, []);
  var searchIfValidJql = function searchIfValidJql(_, jast) {
    if (jast.errors.length === 0) {
      onSearch();
    }
  };
  return /*#__PURE__*/_react.default.createElement(_jqlEditor.JQLEditor, {
    analyticsSource: "link-datasource",
    autocompleteProvider: autocompleteProvider,
    onSearch: searchIfValidJql,
    onUpdate: onChange,
    isSearching: isSearching,
    inputRef: inputRef,
    query: query,
    "aria-label": "JQL Query Editor"
  });
};