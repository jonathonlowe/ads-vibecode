"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fuzzyCharacter = exports.buildJQL = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jqlAst = require("@atlaskit/jql-ast");
var _ui = require("../basic-filters/ui");
var fuzzySearchRegExp = /^"(.+)"$/;
var jiraIssueKeyRegExp = /[A-Z]+-\d+/;
var fuzzyCharacter = exports.fuzzyCharacter = '*';
var constructTerminalClause = function constructTerminalClause(field, operator, value) {
  return _jqlAst.creators.terminalClause(_jqlAst.creators.field(field), _jqlAst.creators.operator(operator), _jqlAst.creators.valueOperand(value));
};
var buildJQL = exports.buildJQL = function buildJQL(input) {
  /**
   * Jql ast - Transforming the ast
   * https://atlaskit.atlassian.com/packages/jql/jql-ast/docs/transforming-the-ast
   */
  var jast = new _jqlAst.JastBuilder().build('');
  var query = jast.query;
  var rawSearch = input.rawSearch,
    _input$orderDirection = input.orderDirection,
    orderDirection = _input$orderDirection === void 0 ? _jqlAst.ORDER_BY_DIRECTION_DESC : _input$orderDirection,
    _input$orderKey = input.orderKey,
    orderKey = _input$orderKey === void 0 ? 'created' : _input$orderKey,
    filterValues = input.filterValues;
  var trimmedRawSearch = rawSearch.trim();
  var hasValidFilterSelectionAndValues = filterValues &&
  // checks if filterValues have only valid keys
  Object.entries(filterValues).every(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
      key = _ref2[0];
    return _ui.availableBasicFilterTypes.includes(key);
  }) &&
  // checks if atleast one fitler value has some selection object
  Object.values(filterValues).some(function (value) {
    return value.length > 0;
  });
  if (!query) {
    return '';
  }
  if (trimmedRawSearch) {
    var fuzzy = !trimmedRawSearch.match(fuzzySearchRegExp) ? fuzzyCharacter : '';
    var basicSearch = trimmedRawSearch.replace(/['"?*]+/g, '');
    var text = constructTerminalClause('text', _jqlAst.OPERATOR_LIKE, "".concat(basicSearch).concat(fuzzy));
    var summary = constructTerminalClause('summary', _jqlAst.OPERATOR_LIKE, "".concat(basicSearch).concat(fuzzy));
    var orClauseFields = [text, summary];
    if (jiraIssueKeyRegExp.test(trimmedRawSearch.toUpperCase())) {
      var key = constructTerminalClause('key', _jqlAst.OPERATOR_EQUALS, basicSearch);
      orClauseFields.push(key);
    }
    var orClause = _jqlAst.creators.compoundClause(_jqlAst.creators.compoundOperator(_jqlAst.COMPOUND_OPERATOR_OR), orClauseFields);
    query.appendClause(orClause, _jqlAst.COMPOUND_OPERATOR_AND);
  }
  if (hasValidFilterSelectionAndValues) {
    Object.entries(filterValues).forEach(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        key = _ref4[0],
        filterFieldValues = _ref4[1];
      if (filterFieldValues.length === 0) {
        return;
      }
      var filterInClause = _jqlAst.creators.terminalClause(_jqlAst.creators.field(key), _jqlAst.creators.operator(_jqlAst.OPERATOR_IN), _jqlAst.creators.listOperand(filterFieldValues.map(function (filterFieldValue) {
        return _jqlAst.creators.valueOperand(filterFieldValue.value);
      })));
      query.appendClause(filterInClause, _jqlAst.COMPOUND_OPERATOR_AND);
    });
  }
  var orderField = _jqlAst.creators.orderByField(_jqlAst.creators.field(orderKey));
  query.prependOrderField(orderField);
  query.setOrderDirection(_jqlAst.creators.orderByDirection(orderDirection.toLowerCase() === 'asc' ? _jqlAst.ORDER_BY_DIRECTION_ASC : _jqlAst.ORDER_BY_DIRECTION_DESC));
  return (0, _jqlAst.print)(jast, {
    printWidth: null // this ensures jql string is not broken to new line
  });
};