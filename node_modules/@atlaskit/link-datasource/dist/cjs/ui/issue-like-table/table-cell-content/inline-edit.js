/* inline-edit.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newGetBackendUpdateValue = exports.InlineEditUFOExperience = exports.InlineEdit = void 0;
require("./inline-edit.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _inlineEdit = _interopRequireDefault(require("@atlaskit/inline-edit"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _hooks = require("@atlaskit/smart-card/hooks");
var _analytics = require("../../../analytics");
var _ufoExperiences = require("../../../analytics/ufoExperiences");
var _datasourceExperienceId = require("../../../contexts/datasource-experience-id");
var _useDatasourceTableFlag = require("../../../hooks/useDatasourceTableFlag");
var _state = require("../../../state");
var _editType = require("../edit-type");
var _avatar = require("../shared-components/avatar");
var _utils = require("../utils");
var _messages = require("./messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var InlineEditUFOExperience = exports.InlineEditUFOExperience = 'inline-edit-rendered';
var styles = {
  editContainerStyles: "_1pfhx0bf"
};
/**
 * @returns String of the new field value, or ID of status transition / atlassian user ID / priority ID.
 * @throws Error if the value is not supplied.
 */
var newGetBackendUpdateValue = exports.newGetBackendUpdateValue = function newGetBackendUpdateValue(typedNewValue) {
  if (typedNewValue.values.length === 0) {
    throw new Error("Datasource 2 way sync: Backend update value or value ID not supplied for type ".concat(typedNewValue.type));
  }
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0];
    case 'status':
      var transitionId = typedNewValue.values[0].transitionId;
      if (transitionId === undefined || transitionId === '') {
        throw new Error("Datasource 2 way sync: Backend status transition ID not supplied for type transition");
      }
      return transitionId;
    case 'user':
      var atlassianUserId = typedNewValue.values[0].atlassianUserId;
      if (atlassianUserId === undefined || atlassianUserId === '') {
        throw new Error("Datasource 2 way sync: Backend atlasian user ID not supplied for type user");
      }
      return atlassianUserId;
    case 'icon':
      var id = typedNewValue.values[0].id;
      if (id === undefined || id === '') {
        throw new Error("Datasource 2 way sync: Backend update ID not supplied for type icon");
      }
      return id;
  }
  throw new Error("Datasource 2 way sync Backend update value not implemented for type ".concat(typedNewValue.type));
};
var getBackendUpdateValue = function getBackendUpdateValue(typedNewValue) {
  var _typedNewValue$values, _typedNewValue$values2, _typedNewValue$values3;
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0] || '';
    case 'status':
      return ((_typedNewValue$values = typedNewValue.values[0]) === null || _typedNewValue$values === void 0 ? void 0 : _typedNewValue$values.transitionId) || '';
    case 'user':
      return ((_typedNewValue$values2 = typedNewValue.values[0]) === null || _typedNewValue$values2 === void 0 ? void 0 : _typedNewValue$values2.atlassianUserId) || '';
    case 'icon':
      return ((_typedNewValue$values3 = typedNewValue.values[0]) === null || _typedNewValue$values3 === void 0 ? void 0 : _typedNewValue$values3.id) || '';
  }
  throw new Error("Datasource 2 way sync Backend update value not implemented for type ".concat(typedNewValue.type));
};
var getCurrentFieldLabel = function getCurrentFieldLabel(typedNewValue) {
  var _typedNewValue$values4, _typedNewValue$values5, _typedNewValue$values6;
  switch (typedNewValue.type) {
    case 'string':
      return typedNewValue.values[0] || '';
    case 'status':
      return ((_typedNewValue$values4 = typedNewValue.values[0]) === null || _typedNewValue$values4 === void 0 ? void 0 : _typedNewValue$values4.text) || '';
    case 'user':
      return ((_typedNewValue$values5 = typedNewValue.values[0]) === null || _typedNewValue$values5 === void 0 ? void 0 : _typedNewValue$values5.displayName) || '';
    case 'icon':
      return ((_typedNewValue$values6 = typedNewValue.values[0]) === null || _typedNewValue$values6 === void 0 ? void 0 : _typedNewValue$values6.text) || '';
    default:
      return '';
  }
};
var mapUpdatedItem = function mapUpdatedItem(existingItem, columnKey, newValue) {
  switch (newValue.type) {
    case 'string':
      return _objectSpread(_objectSpread({}, existingItem), {}, (0, _defineProperty2.default)({}, columnKey, {
        data: newValue.values[0] || ''
      }));
    case 'status':
    case 'user':
    case 'icon':
      return newValue.values[0] ? _objectSpread(_objectSpread({}, existingItem), {}, (0, _defineProperty2.default)({}, columnKey, {
        data: newValue.values[0]
      })) : existingItem;
    default:
  }
  return null;
};
var isNewValue = function isNewValue(columnKey, newItem, existingData) {
  var _newItem$columnKey, _existingData$columnK;
  return ((_newItem$columnKey = newItem[columnKey]) === null || _newItem$columnKey === void 0 ? void 0 : _newItem$columnKey.data) && (!((_existingData$columnK = existingData[columnKey]) !== null && _existingData$columnK !== void 0 && _existingData$columnK.data) || newItem[columnKey].data !== existingData[columnKey].data);
};
var useRefreshDatasourceItem = function useRefreshDatasourceItem(item) {
  var _item$data;
  var url = item === null || item === void 0 || (_item$data = item.data) === null || _item$data === void 0 || (_item$data = _item$data.key) === null || _item$data === void 0 || (_item$data = _item$data.data) === null || _item$data === void 0 ? void 0 : _item$data.url;

  // passing empty string to the hook isn't ideal, but the alternatives are too much effort for this small fix.
  var reloadSmartLinkAction = (0, _hooks.useSmartLinkReload)({
    url: url || ''
  });
  return (0, _react.useCallback)(function () {
    if (url) {
      reloadSmartLinkAction();
    }
  }, [reloadSmartLinkAction, url]);
};
var InlineEdit = exports.InlineEdit = function InlineEdit(_ref) {
  var ari = _ref.ari,
    execute = _ref.execute,
    executeFetch = _ref.executeFetch,
    readView = _ref.readView,
    columnKey = _ref.columnKey,
    columnTitle = _ref.columnTitle,
    datasourceTypeWithValues = _ref.datasourceTypeWithValues;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isEditing = _useState2[0],
    setIsEditing = _useState2[1];
  var _useState3 = (0, _react.useState)(datasourceTypeWithValues),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    editValues = _useState4[0],
    setEditValues = _useState4[1];
  var item = (0, _state.useDatasourceItem)({
    id: ari
  });
  var _ref2 = item || {},
    entityType = _ref2.entityType,
    integrationKey = _ref2.integrationKey;
  var _useDatasourceTableFl = (0, _useDatasourceTableFlag.useDatasourceTableFlag)(),
    showErrorFlag = _useDatasourceTableFl.showErrorFlag;
  var _useDatasourceActions = (0, _state.useDatasourceActions)(),
    onUpdateItem = _useDatasourceActions.onUpdateItem;
  var _useDatasourceAnalyti = (0, _analytics.useDatasourceAnalyticsEvents)(),
    fireEvent = _useDatasourceAnalyti.fireEvent;
  var refreshDatasourceItem = useRefreshDatasourceItem(item);
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  var onCommitUpdate = (0, _react.useCallback)(function (newValue) {
    if (!item) {
      setIsEditing(false);
      return;
    }
    var existingData = item.data;
    var newItem = mapUpdatedItem(item.data, columnKey, newValue);
    if (!newItem || !isNewValue(columnKey, newItem, existingData)) {
      setIsEditing(false);
      return;
    }
    onUpdateItem(ari, newItem);
    fireEvent('ui.form.submitted.inlineEdit', {});
    var updateValue;
    if ((0, _platformFeatureFlags.fg)('platform-datasources-inline-edit-id-checks')) {
      try {
        // TODO: Refactor types so that valid update values are guaranteed for
        // all object types. Invalid options should be filtered out of options -
        // this frontend error flag is a last resort.
        updateValue = newGetBackendUpdateValue(newValue);
      } catch (_unused) {
        // Show an error as the new value that was going to be sent to the
        // backend is invalid (and would have failed anyway, silently to the user)
        showErrorFlag({});
        onUpdateItem(ari, existingData);
        setIsEditing(false);
        return;
      }
    }
    execute(updateValue !== undefined && (0, _platformFeatureFlags.fg)('platform-datasources-inline-edit-id-checks') ? updateValue :
    // Old behaviour is preserved in non-FFed path: errors thrown by getBackendUpdateValue are caught by
    // the error boundary, _not_ by the catch block & frontend flag here.
    getBackendUpdateValue(newValue)).then(refreshDatasourceItem).catch(function (error) {
      var status = error && (0, _typeof2.default)(error) === 'object' ? error.status : undefined;
      showErrorFlag({
        status: status
      });
      onUpdateItem(ari, existingData);
    });
    setIsEditing(false);
  }, [item, columnKey, onUpdateItem, ari, refreshDatasourceItem, fireEvent, execute, showErrorFlag]);
  var onEdit = (0, _react.useCallback)(function () {
    setIsEditing(true);
    if (experienceId) {
      (0, _ufoExperiences.startUfoExperience)({
        name: InlineEditUFOExperience
      }, experienceId);
    }
    if (integrationKey && entityType) {
      fireEvent('ui.inlineEdit.clicked.datasource', {
        integrationKey: integrationKey,
        entityType: entityType,
        fieldKey: columnKey
      });
    }
  }, [columnKey, entityType, experienceId, fireEvent, integrationKey]);
  var onCancelEdit = (0, _react.useCallback)(function () {
    setIsEditing(false);
    if (integrationKey && entityType) {
      fireEvent('ui.inlineEdit.cancelled.datasource', {
        integrationKey: integrationKey,
        entityType: entityType,
        fieldKey: columnKey
      });
    }
  }, [columnKey, entityType, fireEvent, integrationKey]);
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var editButtonLabel = (0, _react.useMemo)(function () {
    return formatMessage(_messages.tableCellMessages.editButtonLabel, {
      fieldName: columnTitle,
      fieldValue: getCurrentFieldLabel(editValues)
    });
  }, [columnTitle, formatMessage, editValues]);
  return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    xcss: styles.editContainerStyles
  }, /*#__PURE__*/_react.default.createElement(_inlineEdit.default, (0, _extends2.default)({}, (0, _editType.editType)({
    defaultValue: datasourceTypeWithValues,
    currentValue: editValues,
    setEditValues: setEditValues,
    executeFetch: executeFetch,
    labelId: (0, _utils.getFieldLabelById)(columnKey)
  }), {
    hideActionButtons: true,
    readView: editableRenderType({
      defaultValue: datasourceTypeWithValues,
      readView: readView
    }),
    readViewFitContainerWidth: true,
    isEditing: isEditing,
    onEdit: onEdit,
    onCancel: onCancelEdit,
    onConfirm: function onConfirm() {
      return onCommitUpdate(editValues);
    },
    editButtonLabel: editButtonLabel
  })));
};

/**
 *
 * This function allows us to manipulate the readView on editable cells.
 * This way, for example, we can show a fallback Avatar on empty user cells.
 *
 */
var editableRenderType = function editableRenderType(_ref3) {
  var defaultValue = _ref3.defaultValue,
    readView = _ref3.readView;
  return function () {
    var _defaultValue$values;
    switch (defaultValue.type) {
      case 'user':
        if (!((_defaultValue$values = defaultValue.values) !== null && _defaultValue$values !== void 0 && _defaultValue$values[0])) {
          return /*#__PURE__*/_react.default.createElement(_avatar.EmptyAvatar, null);
        }
    }
    return readView;
  };
};