"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _useDebounce = require("use-debounce");
var _avatar = _interopRequireWildcard(require("@atlaskit/avatar"));
var _layering = require("@atlaskit/layering");
var _select = _interopRequireDefault(require("@atlaskit/select"));
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _ufoExperiences = require("../../../../analytics/ufoExperiences");
var _datasourceExperienceId = require("../../../../contexts/datasource-experience-id");
var _useLoadOptions2 = require("../../../../hooks/useLoadOptions");
var _constants = require("../../../common/modal/popup-select/constants");
var _user = require("../../render-type/user");
var _messages = require("../../render-type/user/messages");
var _inlineEdit = require("../../table-cell-content/inline-edit");
var _utils = require("../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var UserEditType = function UserEditType(props) {
  var _currentValue$values;
  var currentValue = props.currentValue,
    labelId = props.labelId,
    executeFetch = props.executeFetch;
  var _useState = (0, _react.useState)({
      query: ''
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    fetchInputs = _useState2[0],
    setFetchInputs = _useState2[1];
  var _useDebouncedCallback = (0, _useDebounce.useDebouncedCallback)(function (query) {
      return setFetchInputs({
        query: query
      });
    }, _constants.SEARCH_DEBOUNCE_MS),
    _useDebouncedCallback2 = (0, _slicedToArray2.default)(_useDebouncedCallback, 1),
    handleUserInputDebounced = _useDebouncedCallback2[0];
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var emptyUser = (0, _react.useMemo)(function () {
    return {
      accountId: null,
      displayName: formatMessage(_messages.userTypeMessages.userDefaultdisplayNameValue),
      avatarUrls: {}
    };
  }, [formatMessage]);
  var _useLoadOptions = (0, _useLoadOptions2.useLoadOptions)({
      executeFetch: executeFetch,
      fetchInputs: fetchInputs,
      emptyOption: emptyUser
    }),
    options = _useLoadOptions.options,
    isLoading = _useLoadOptions.isLoading,
    hasFailed = _useLoadOptions.hasFailed;
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  (0, _react.useEffect)(function () {
    if (!experienceId) {
      return;
    }
    if (hasFailed) {
      (0, _ufoExperiences.failUfoExperience)({
        name: _inlineEdit.InlineEditUFOExperience
      }, experienceId);
    } else if (!isLoading) {
      (0, _ufoExperiences.succeedUfoExperience)({
        name: _inlineEdit.InlineEditUFOExperience
      }, experienceId);
    }
  }, [experienceId, isLoading, hasFailed]);
  return /*#__PURE__*/_react.default.createElement(_layering.Layering, {
    isDisabled: false
  }, /*#__PURE__*/_react.default.createElement(_select.default, (0, _extends2.default)({}, (0, _utils.getCleanedSelectProps)(props), {
    autoFocus: true,
    defaultMenuIsOpen: true,
    blurInputOnSelect: true,
    options: options,
    isLoading: isLoading,
    testId: "inline-edit-user",
    filterOption: filterOption,
    menuPlacement: "auto",
    onInputChange: handleUserInputDebounced,
    value: currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0],
    labelId: labelId,
    getOptionValue: function getOptionValue(option) {
      return option.atlassianUserId;
    },
    getOptionLabel: function getOptionLabel(option) {
      return option.displayName || '';
    },
    formatOptionLabel: function formatOptionLabel(option) {
      var _option$displayName;
      return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        content: (_option$displayName = option.displayName) !== null && _option$displayName !== void 0 ? _option$displayName : ''
      }, /*#__PURE__*/_react.default.createElement(_avatar.AvatarItem, {
        avatar: /*#__PURE__*/_react.default.createElement(_avatar.default, {
          appearance: "circle",
          size: 'small',
          src: option.avatarSource,
          testId: "".concat(_user.USER_TYPE_TEST_ID, "--avatar--").concat(option.atlassianUserId)
        }),
        primaryText: option.displayName
      }));
    },
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'user',
        values: e ? [e] : []
      });
    }
  })));
};
var filterOption = function filterOption(option, inputValue) {
  var _option$data$displayN, _option$data$displayN2;
  return (_option$data$displayN = (_option$data$displayN2 = option.data.displayName) === null || _option$data$displayN2 === void 0 ? void 0 : _option$data$displayN2.toLowerCase().includes(inputValue.toLowerCase())) !== null && _option$data$displayN !== void 0 ? _option$data$displayN : false;
};
var _default = exports.default = UserEditType;