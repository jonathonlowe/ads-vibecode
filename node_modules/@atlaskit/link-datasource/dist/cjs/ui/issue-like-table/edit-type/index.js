"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toValueType = exports.isEditTypeSupported = exports.isEditTypeSelectable = exports.editType = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _icon = _interopRequireDefault(require("./icon"));
var _status = _interopRequireDefault(require("./status"));
var _text = _interopRequireDefault(require("./text"));
var _user = _interopRequireDefault(require("./user"));
var _excluded = ["value"];
// This is used in editor-card-plugin to identify if any type of inline edit is active.
var ACTIVE_INLINE_EDIT_ID = 'sllv-active-inline-edit';
var editType = exports.editType = function editType(_ref) {
  var _toValueType, _value$atlassianUserI;
  var defaultValue = _ref.defaultValue,
    currentValue = _ref.currentValue,
    labelId = _ref.labelId,
    setEditValues = _ref.setEditValues,
    executeFetch = _ref.executeFetch;
  switch (defaultValue.type) {
    case 'string':
      return {
        defaultValue: (_toValueType = toValueType(defaultValue)) !== null && _toValueType !== void 0 ? _toValueType : '',
        editView: function editView(_ref2) {
          var fieldProps = (0, _extends2.default)({}, ((0, _objectDestructuringEmpty2.default)(_ref2), _ref2));
          return /*#__PURE__*/_react.default.createElement(_text.default, (0, _extends2.default)({}, fieldProps, {
            currentValue: currentValue,
            setEditValues: setEditValues,
            id: ACTIVE_INLINE_EDIT_ID,
            labelId: labelId
          }));
        }
      };
    case 'icon':
      return {
        defaultValue: toValueType(defaultValue),
        editView: function editView(_ref3) {
          var value = _ref3.value,
            fieldProps = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
          return /*#__PURE__*/_react.default.createElement(_icon.default, (0, _extends2.default)({}, fieldProps, {
            currentValue: currentValue,
            setEditValues: setEditValues,
            id: ACTIVE_INLINE_EDIT_ID,
            executeFetch: executeFetch,
            labelId: labelId
          }));
        }
      };
    case 'status':
      return {
        defaultValue: toValueType(defaultValue),
        editView: function editView(_ref4) {
          var fieldProps = (0, _extends2.default)({}, ((0, _objectDestructuringEmpty2.default)(_ref4), _ref4));
          return /*#__PURE__*/_react.default.createElement(_status.default, (0, _extends2.default)({}, fieldProps, {
            currentValue: currentValue,
            setEditValues: setEditValues,
            id: ACTIVE_INLINE_EDIT_ID,
            executeFetch: executeFetch,
            labelId: labelId
          }));
        }
      };
    case 'user':
      var value = toValueType(defaultValue);
      return {
        defaultValue: (_value$atlassianUserI = value === null || value === void 0 ? void 0 : value.atlassianUserId) !== null && _value$atlassianUserI !== void 0 ? _value$atlassianUserI : '',
        editView: function editView(_ref5) {
          var fieldProps = (0, _extends2.default)({}, ((0, _objectDestructuringEmpty2.default)(_ref5), _ref5));
          return /*#__PURE__*/_react.default.createElement(_user.default, (0, _extends2.default)({}, fieldProps, {
            currentValue: currentValue,
            setEditValues: setEditValues,
            id: ACTIVE_INLINE_EDIT_ID,
            executeFetch: executeFetch,
            labelId: labelId
          }));
        }
      };
  }
  return {
    defaultValue: '',
    editView: function editView() {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
    }
  };
};
var isEditTypeSupported = exports.isEditTypeSupported = function isEditTypeSupported(type) {
  var supportedEditType = ['string'].concat((0, _toConsumableArray2.default)((0, _platformFeatureFlags.fg)('platform-datasources-enable-two-way-sync-statuses') ? ['status'] : []), (0, _toConsumableArray2.default)((0, _platformFeatureFlags.fg)('platform-datasources-enable-two-way-sync-priority') ? ['icon'] : []), (0, _toConsumableArray2.default)((0, _platformFeatureFlags.fg)('platform-datasources-enable-two-way-sync-assignee') ? ['user'] : []));
  return supportedEditType.includes(type);
};
var isEditTypeSelectable = exports.isEditTypeSelectable = function isEditTypeSelectable(type) {
  var selectEditTypes = ['status', 'icon', 'user'];
  return selectEditTypes.includes(type);
};
var toValueType = exports.toValueType = function toValueType(typeWithValues) {
  var _typeWithValues$value;
  return (_typeWithValues$value = typeWithValues.values) === null || _typeWithValues$value === void 0 ? void 0 : _typeWithValues$value[0];
};