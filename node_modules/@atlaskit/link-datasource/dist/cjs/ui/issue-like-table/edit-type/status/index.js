"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _layering = require("@atlaskit/layering");
var _lozenge = _interopRequireDefault(require("@atlaskit/lozenge"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _select = _interopRequireDefault(require("@atlaskit/select"));
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _ufoExperiences = require("../../../../analytics/ufoExperiences");
var _datasourceExperienceId = require("../../../../contexts/datasource-experience-id");
var _useLoadOptions2 = require("../../../../hooks/useLoadOptions");
var _inlineEdit = require("../../table-cell-content/inline-edit");
var _utils = require("../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var StatusEditType = function StatusEditType(props) {
  var _currentValue$values;
  var currentValue = props.currentValue,
    labelId = props.labelId,
    executeFetch = props.executeFetch;
  var _useLoadOptions = (0, _useLoadOptions2.useLoadOptions)({
      executeFetch: executeFetch
    }),
    options = _useLoadOptions.options,
    isLoading = _useLoadOptions.isLoading,
    hasFailed = _useLoadOptions.hasFailed;
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  (0, _react.useEffect)(function () {
    if (!experienceId) {
      return;
    }
    if (hasFailed) {
      (0, _ufoExperiences.failUfoExperience)({
        name: _inlineEdit.InlineEditUFOExperience
      }, experienceId);
    } else if (!isLoading) {
      (0, _ufoExperiences.succeedUfoExperience)({
        name: _inlineEdit.InlineEditUFOExperience
      }, experienceId);
    }
  }, [experienceId, isLoading, hasFailed]);
  return /*#__PURE__*/_react.default.createElement(_layering.Layering, {
    isDisabled: false
  }, /*#__PURE__*/_react.default.createElement(_select.default, (0, _extends2.default)({}, (0, _utils.getCleanedSelectProps)(props), {
    autoFocus: true,
    options: options,
    defaultMenuIsOpen: true,
    blurInputOnSelect: true,
    menuPlacement: "auto",
    isLoading: isLoading,
    filterOption: filterOption,
    testId: "inline-edit-status",
    getOptionValue: function getOptionValue(option) {
      return option.text;
    },
    value: currentValue === null || currentValue === void 0 || (_currentValue$values = currentValue.values) === null || _currentValue$values === void 0 ? void 0 : _currentValue$values[0],
    labelId: labelId,
    formatOptionLabel: function formatOptionLabel(option) {
      var _option$style, _option$style2;
      return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        content: option.text
      }, /*#__PURE__*/_react.default.createElement(_lozenge.default, (0, _extends2.default)({
        testId: "inline-edit-status-option-".concat(option.text)
      }, option.style, {
        isBold: (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? ((_option$style = option.style) === null || _option$style === void 0 ? void 0 : _option$style.isBold) !== false : (_option$style2 = option.style) === null || _option$style2 === void 0 ? void 0 : _option$style2.isBold
      }), option.text));
    },
    getOptionLabel: function getOptionLabel(option) {
      return option.text;
    },
    onChange: function onChange(e) {
      return props.setEditValues({
        type: 'status',
        values: e ? [e] : []
      });
    }
  })));
};
var filterOption = function filterOption(option, inputValue) {
  return option.data.text.toLowerCase().includes(inputValue.toLowerCase());
};
var _default = exports.default = StatusEditType;