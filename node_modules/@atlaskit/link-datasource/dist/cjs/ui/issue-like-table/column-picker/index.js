/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnPicker = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _customize = _interopRequireDefault(require("@atlaskit/icon/core/customize"));
var _board = _interopRequireDefault(require("@atlaskit/icon/core/migration/board"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-down"));
var _chevronDown2 = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _select = require("@atlaskit/select");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _ufoExperiences = require("../../../analytics/ufoExperiences");
var _datasourceExperienceId = require("../../../contexts/datasource-experience-id");
var _concatenatedMenuList = require("./concatenated-menu-list");
var _messages = require("./messages");
var _excluded = ["isOpen"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  chevronIconStyles: "_1e0c1txw _4cvr1h6o"
};
var ColumnPicker = exports.ColumnPicker = function ColumnPicker(_ref) {
  var columns = _ref.columns,
    selectedColumnKeys = _ref.selectedColumnKeys,
    onSelectedColumnKeysChange = _ref.onSelectedColumnKeysChange,
    onOpen = _ref.onOpen;
  var intl = (0, _reactIntlNext.useIntl)();
  var experienceId = (0, _datasourceExperienceId.useDatasourceExperienceId)();
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    allOptions = _useState2[0],
    setAllOptions = _useState2[1];
  var pickerRef = (0, _react.useRef)(null);
  var mapColumnToOption = (0, _react.useCallback)(function (_ref2) {
    var key = _ref2.key,
      title = _ref2.title;
    return {
      label: title,
      value: key
    };
  }, []);
  var selectedOptions = columns.filter(function (_ref3) {
    var key = _ref3.key;
    return selectedColumnKeys.includes(key);
  }).map(mapColumnToOption);
  (0, _react.useEffect)(function () {
    setAllOptions(columns.filter(function (_ref4) {
      var title = _ref4.title;
      return title;
    }).map(mapColumnToOption));
  }, [columns, mapColumnToOption]);
  var handleChange = (0, _react.useCallback)(function (selectedOptions) {
    var selectedValues = selectedOptions.map(function (_ref5) {
      var value = _ref5.value;
      return value;
    });
    selectedValues.sort(function (a, b) {
      var indexB = columns.findIndex(function (_ref6) {
        var key = _ref6.key;
        return key === b;
      });
      var indexA = columns.findIndex(function (_ref7) {
        var key = _ref7.key;
        return key === a;
      });
      return indexA - indexB;
    });
    onSelectedColumnKeysChange(selectedValues);
  }, [columns, onSelectedColumnKeysChange]);
  var sortSelectedColumnsTop = (0, _react.useCallback)(function () {
    if (!allOptions.length) {
      return;
    }
    var nonSelectedOptions = allOptions.filter(function (option) {
      return !selectedOptions.find(function (selectedOption) {
        return selectedOption.value === option.value;
      });
    });
    var sortedOptions = [].concat((0, _toConsumableArray2.default)(selectedOptions), (0, _toConsumableArray2.default)(nonSelectedOptions));
    sortedOptions.length > 0 && setAllOptions(sortedOptions);
  }, [allOptions, selectedOptions]);
  var stopEscapePropagationWhenOpen = function stopEscapePropagationWhenOpen(e) {
    if (e.key === 'Escape') {
      e.stopPropagation();
    }
  };
  var handleOpen = (0, _react.useCallback)(function () {
    onOpen && onOpen();
    void sortSelectedColumnsTop();
  }, [onOpen, sortSelectedColumnsTop]);

  // If only 1 option is selected, disable it since we don't want user to uncheck everything
  var handleIsOptionDisabled = function handleIsOptionDisabled(option, selectValue) {
    return selectValue.length === 1 && selectValue.some(function (selectedValue) {
      return selectedValue.value === option.value;
    });
  };
  (0, _react.useEffect)(function () {
    if (allOptions.length) {
      var _pickerRef$current;
      // necessary to refocus the search input after the loading state
      pickerRef === null || pickerRef === void 0 || (_pickerRef$current = pickerRef.current) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.selectRef) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.select) === null || _pickerRef$current === void 0 || (_pickerRef$current = _pickerRef$current.inputRef) === null || _pickerRef$current === void 0 || _pickerRef$current.focus();
    }
  }, [allOptions]);
  (0, _react.useEffect)(function () {
    if (allOptions.length) {
      if (experienceId) {
        (0, _ufoExperiences.succeedUfoExperience)({
          name: 'column-picker-rendered'
        }, experienceId);
      }
    }
  }, [allOptions, experienceId]);
  var MenuOption = (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? _concatenatedMenuList.MenuItem : _select.CheckboxOption;
  return /*#__PURE__*/_react.default.createElement(_select.PopupSelect, {
    classNamePrefix: 'column-picker-popup',
    testId: 'column-picker-popup',
    components: {
      Option: MenuOption,
      MenuList: _concatenatedMenuList.ConcatenatedMenuList
    },
    filterOption: (0, _select.createFilter)({
      ignoreAccents: false
    }),
    options: allOptions,
    value: selectedOptions
    // @ts-ignore - https://product-fabric.atlassian.net/browse/DSP-21000
    ,
    onOpen: handleOpen,
    closeMenuOnSelect: false,
    hideSelectedOptions: false,
    id: 'column-picker-popup',
    isMulti: true,
    ref: pickerRef,
    isOptionDisabled: handleIsOptionDisabled,
    placeholder: intl.formatMessage(_messages.columnPickerMessages.search),
    onKeyDown: stopEscapePropagationWhenOpen,
    label: "Search for fields",
    onChange: handleChange,
    isLoading: allOptions.length === 0,
    target: function target(_ref8) {
      var isOpen = _ref8.isOpen,
        triggerProps = (0, _objectWithoutProperties2.default)(_ref8, _excluded);
      return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        content: intl.formatMessage(_messages.columnPickerMessages.tooltip)
      }, function (tooltipProps) {
        return /*#__PURE__*/_react.default.createElement(_new.default, (0, _extends2.default)({}, tooltipProps, triggerProps, {
          isSelected: isOpen,
          spacing: "compact",
          appearance: (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? 'default' : 'subtle',
          testId: "column-picker-trigger-button",
          iconBefore: function iconBefore() {
            return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
              as: "span",
              xcss: styles.chevronIconStyles
            }, (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/_react.default.createElement(_customize.default, {
              label: "customize"
            }) : /*#__PURE__*/_react.default.createElement(_board.default, {
              color: "currentColor",
              label: "board",
              LEGACY_size: "medium",
              spacing: "spacious",
              LEGACY_margin: "0 0 0 4px"
            }), (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-sllv') ? /*#__PURE__*/_react.default.createElement(_chevronDown.default, {
              label: "down"
            }) : /*#__PURE__*/_react.default.createElement(_chevronDown2.default, {
              color: "currentColor",
              label: "down",
              LEGACY_size: "medium"
            }));
          }
        }), '');
      });
    }
  });
};