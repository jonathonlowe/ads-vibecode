import { type SelectOption } from '../ui/common/modal/popup-select/types';
import { type FieldValuesResponse, type HydrateResponse } from '../ui/jira-issues-modal/basic-filters/types';
export declare const mockHydrateJqlResponse: HydrateResponse;
export declare const mockFieldValuesResponse: FieldValuesResponse;
export declare const mockUserRecommendationsResponse: {
    recommendedUsers: ({
        entityType: string;
        id: string;
        name: string;
        avatarUrl: string;
        nickname: string;
        matchPositions: {};
        accessLevel: string;
        accountStatus: string;
        notMentionable: boolean;
        userType: string;
        attributes: {
            isConfluenceExternalCollaborator: boolean;
        };
        email?: undefined;
        locale?: undefined;
    } | {
        entityType: string;
        id: string;
        name: string;
        email: string;
        avatarUrl: string;
        nickname: string;
        matchPositions: {};
        accessLevel: string;
        accountStatus: string;
        notMentionable: boolean;
        locale: string;
        userType: string;
        attributes: {
            isConfluenceExternalCollaborator: boolean;
        };
    } | {
        entityType: string;
        id: string;
        name: string;
        avatarUrl: string;
        nickname: string;
        matchPositions: {};
        accessLevel: string;
        accountStatus: string;
        notMentionable: boolean;
        locale: string;
        userType: string;
        attributes: {
            isConfluenceExternalCollaborator: boolean;
        };
        email?: undefined;
    })[];
};
export declare const mockUserHydrationResponse: {
    data: {
        users: {
            accountId: string;
            name: string;
            picture: string;
        }[];
    };
};
export declare const mockTransformedUserHydrationResponse: SelectOption[];
