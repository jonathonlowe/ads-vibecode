import { type EditorState, type ReadonlyTransaction } from '@atlaskit/editor-prosemirror/state';
import { type NodeWithPos } from '@atlaskit/editor-prosemirror/utils';
import { Decoration, type DecorationSet } from '@atlaskit/editor-prosemirror/view';
import type { CodeBlockLineAttributes } from '../types';
export declare const DECORATION_WIDGET_TYPE = "decorationWidgetType";
export declare const DECORATION_WRAPPED_BLOCK_NODE_TYPE = "decorationNodeType";
/**
 * Generate the initial decorations for the code block.
 */
export declare const generateInitialDecorations: (state: EditorState) => Decoration[];
/**
 * Update all the decorations used by the code block.
 */
export declare const updateCodeBlockDecorations: (tr: ReadonlyTransaction, codeBlockNodes: NodeWithPos[], decorationSet: DecorationSet) => DecorationSet;
/**
 * Update the decorations set with the line number decorators. This will only happen for the code blocks passed to this function
 * when there has been a new line added or removed. The line decorations will not update the code block node otherwise.
 */
export declare const updateDecorationSetWithLineNumberDecorators: (tr: ReadonlyTransaction, codeBlockNodes: NodeWithPos[], decorationSet: DecorationSet) => DecorationSet;
export declare const generateLineAttributesFromNode: (node: NodeWithPos) => CodeBlockLineAttributes[];
export declare const createDecorationSetFromLineAttributes: (lineAttributes: CodeBlockLineAttributes[]) => Decoration[];
/**
 * There are edge cases like when a user drags and drops a code block node where the decorator breaks and no longer reflects
 * the correct word wrap state. This function validates that the decorator and the state are in line, otherwise it will
 * retrigger the logic to apply the word wrap decorator.
 */
export declare const validateWordWrappedDecorators: (tr: ReadonlyTransaction, codeBlockNodes: NodeWithPos[], decorationSet: DecorationSet) => DecorationSet;
/**
 * Update the decoration set with the word wrap decorator.
 */
export declare const updateDecorationSetWithWordWrappedDecorator: (decorationSet: DecorationSet, tr: ReadonlyTransaction, node: NodeWithPos | undefined) => DecorationSet;
/**
 * Get the word wrap decorators for the given node position.
 */
export declare const getWordWrapDecoratorsFromNodePos: (pos: number, decorationSet: DecorationSet) => Decoration[];
