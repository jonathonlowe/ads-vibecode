"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.languageListFilter = exports.getToolbarConfig = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _codeBlock = require("@atlaskit/editor-common/code-block");
var _messages = _interopRequireWildcard(require("@atlaskit/editor-common/messages"));
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _delete = _interopRequireDefault(require("@atlaskit/icon/core/delete"));
var _copy = _interopRequireDefault(require("@atlaskit/icon/core/migration/copy"));
var _deleteEditorRemove = _interopRequireDefault(require("@atlaskit/icon/core/migration/delete--editor-remove"));
var _textWrap = _interopRequireDefault(require("@atlaskit/icon/core/text-wrap"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _editorCommands = require("../editor-commands");
var _WrapIcon = require("../ui/icons/WrapIcon");
var _codeBlockCopySelectionPlugin = require("./codeBlockCopySelectionPlugin");
var _languageList = require("./language-list");
var _pluginKey = require("./plugin-key");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getToolbarConfig = exports.getToolbarConfig = function getToolbarConfig() {
  var allowCopyToClipboard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var api = arguments.length > 1 ? arguments[1] : undefined;
  var overrideLanguageName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  return function (state, _ref) {
    var _api$decorations$acti, _api$decorations, _api$analytics, _codeBlockState$pos, _node$attrs;
    var formatMessage = _ref.formatMessage;
    var _ref2 = (_api$decorations$acti = api === null || api === void 0 || (_api$decorations = api.decorations) === null || _api$decorations === void 0 ? void 0 : _api$decorations.actions) !== null && _api$decorations$acti !== void 0 ? _api$decorations$acti : {},
      hoverDecoration = _ref2.hoverDecoration;
    var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
    var codeBlockState = _pluginKey.pluginKey.getState(state);
    var pos = (_codeBlockState$pos = codeBlockState === null || codeBlockState === void 0 ? void 0 : codeBlockState.pos) !== null && _codeBlockState$pos !== void 0 ? _codeBlockState$pos : null;
    if (!codeBlockState || pos === null) {
      return;
    }
    var node = state.doc.nodeAt(pos);
    var nodeType = state.schema.nodes.codeBlock;
    if ((node === null || node === void 0 ? void 0 : node.type) !== nodeType) {
      return;
    }
    var isWrapped = (0, _codeBlock.isCodeBlockWordWrapEnabled)(node);
    var language = node === null || node === void 0 || (_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.language;
    var languageList = (0, _languageList.createLanguageList)(overrideLanguageName ? _languageList.DEFAULT_LANGUAGES.map(function (language) {
      return _objectSpread(_objectSpread({}, language), {}, {
        name: overrideLanguageName(language.name)
      });
    }) : _languageList.DEFAULT_LANGUAGES);
    var options = languageList.map(function (lang) {
      return {
        label: lang.name,
        value: (0, _languageList.getLanguageIdentifier)(lang),
        alias: lang.alias
      };
    });

    // If language is not undefined search for it in the value and then search in the aliases
    var defaultValue = language ? options.find(function (option) {
      return option.value === language;
    }) || options.find(function (option) {
      return option.alias.includes(language);
    }) : null;
    var languageSelect = {
      id: 'editor.codeBlock.languageOptions',
      type: 'select',
      selectType: 'list',
      onChange: function onChange(option) {
        return (0, _editorCommands.changeLanguage)(editorAnalyticsAPI)(option.value);
      },
      defaultValue: defaultValue,
      placeholder: formatMessage(_messages.codeBlockButtonMessages.selectLanguage),
      options: options,
      filterOption: languageListFilter
    };
    var separator = {
      type: 'separator'
    };
    var copyToClipboardItems = !allowCopyToClipboard ? [] : [{
      id: 'editor.codeBlock.copy',
      type: 'button',
      supportsViewMode: true,
      appearance: 'subtle',
      icon: _copy.default,
      // note: copyContentToClipboard contains logic that also removes the
      // visual feedback for the copy button
      onClick: _editorCommands.copyContentToClipboard,
      title: formatMessage(codeBlockState.contentCopied ? _messages.codeBlockButtonMessages.copiedCodeToClipboard : _messages.codeBlockButtonMessages.copyCodeToClipboard),
      onMouseEnter: _codeBlockCopySelectionPlugin.provideVisualFeedbackForCopyButton,
      // note: resetCopiedState contains logic that also removes the
      // visual feedback for the copy button
      onMouseLeave: _editorCommands.resetCopiedState,
      onFocus: _codeBlockCopySelectionPlugin.provideVisualFeedbackForCopyButton,
      onBlur: _codeBlockCopySelectionPlugin.removeVisualFeedbackForCopyButton,
      hideTooltipOnClick: false,
      disabled: codeBlockState.isNodeSelected,
      tabIndex: null
    }, separator];
    var deleteButton = {
      id: 'editor.codeBlock.delete',
      type: 'button',
      appearance: 'danger',
      icon: _delete.default,
      iconFallback: _deleteEditorRemove.default,
      onMouseEnter: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true),
      onMouseLeave: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false),
      onFocus: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true),
      onBlur: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false),
      onClick: _editorCommands.removeCodeBlock,
      title: formatMessage(_messages.default.remove),
      tabIndex: null
    };
    var codeBlockWrapButton = {
      id: 'editor.codeBlock.wrap',
      type: 'button',
      supportsViewMode: true,
      icon: _textWrap.default,
      iconFallback: _WrapIcon.WrapIcon,
      onClick: (0, _editorCommands.toggleWordWrapStateForCodeBlockNode)(editorAnalyticsAPI),
      title: (0, _platformFeatureFlags.fg)('editor_a11y_remove_unwrap_button') ? formatMessage(_messages.codeBlockButtonMessages.wrapCode) : isWrapped ? formatMessage(_messages.codeBlockButtonMessages.unwrapCode) : formatMessage(_messages.codeBlockButtonMessages.wrapCode),
      tabIndex: null,
      selected: isWrapped
    };
    return {
      title: 'CodeBlock floating controls',
      // Ignored via go/ees005
      // eslint-disable-next-line @atlaskit/editor/no-as-casting
      getDomRef: function getDomRef(view) {
        return (0, _utils.findDomRefAtPos)(pos, view.domAtPos.bind(view));
      },
      nodeType: nodeType,
      items: [languageSelect, separator, codeBlockWrapButton, separator].concat(copyToClipboardItems, [deleteButton]),
      scrollable: true
    };
  };
};

/**
 * Filters language list based on both name and alias properties.
 */
var languageListFilter = exports.languageListFilter = function languageListFilter(option, rawInput) {
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var _ref3 = option,
    data = _ref3.data;
  var searchString = rawInput.toLowerCase();
  return data.label.toLowerCase().includes(searchString) || data.alias.some(function (alias) {
    return alias.toLowerCase() === searchString;
  });
};