"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _adfSchema = require("@atlaskit/adf-schema");
var _analytics = require("@atlaskit/editor-common/analytics");
var _messages = require("@atlaskit/editor-common/messages");
var _quickInsert = require("@atlaskit/editor-common/quick-insert");
var _editorCommands = require("./editor-commands");
var _codeBlockAutoFullStopTransformPlugin = require("./pm-plugins/codeBlockAutoFullStopTransformPlugin");
var _codeBlockCopySelectionPlugin = require("./pm-plugins/codeBlockCopySelectionPlugin");
var _ideUx = _interopRequireDefault(require("./pm-plugins/ide-ux"));
var _inputRule = require("./pm-plugins/input-rule");
var _keymaps = _interopRequireDefault(require("./pm-plugins/keymaps"));
var _main = require("./pm-plugins/main");
var _refreshBrowserSelection = _interopRequireDefault(require("./pm-plugins/refresh-browser-selection"));
var _toolbar = require("./pm-plugins/toolbar");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var codeBlockPlugin = function codeBlockPlugin(_ref) {
  var options = _ref.config,
    api = _ref.api;
  return {
    name: 'codeBlock',
    nodes: function nodes() {
      return [{
        name: 'codeBlock',
        node: _adfSchema.codeBlock
      }];
    },
    getSharedState: function getSharedState(state) {
      if (!state) {
        return undefined;
      }
      return {
        copyButtonHoverNode: _codeBlockCopySelectionPlugin.copySelectionPluginKey.getState(state).codeBlockNode
      };
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'codeBlock',
        plugin: function plugin(_ref2) {
          var getIntl = _ref2.getIntl;
          return (0, _main.createPlugin)(_objectSpread(_objectSpread({}, options), {}, {
            getIntl: getIntl,
            api: api
          }));
        }
      }, {
        name: 'codeBlockInputRule',
        plugin: function plugin(_ref3) {
          var _api$analytics;
          var schema = _ref3.schema;
          return (0, _inputRule.createCodeBlockInputRule)(schema, api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions);
        }
      }, {
        name: 'codeBlockIDEKeyBindings',
        plugin: function plugin() {
          return (0, _ideUx.default)(api);
        }
      }, {
        name: 'codeBlockKeyMap',
        plugin: function plugin(_ref4) {
          var schema = _ref4.schema;
          return (0, _keymaps.default)(schema);
        }
      }, {
        name: 'codeBlockCopySelection',
        plugin: function plugin() {
          return (0, _codeBlockCopySelectionPlugin.codeBlockCopySelectionPlugin)();
        }
      }, {
        name: 'codeBlockAutoFullStopTransform',
        plugin: function plugin() {
          return (0, _codeBlockAutoFullStopTransformPlugin.codeBlockAutoFullStopTransformPlugin)();
        }
      }];
    },
    // Workaround for a firefox issue where dom selection is off sync
    // https://product-fabric.atlassian.net/browse/ED-12442
    onEditorViewStateUpdated: function onEditorViewStateUpdated(props) {
      (0, _refreshBrowserSelection.default)(props.originalTransaction, props.newEditorState);
    },
    actions: {
      /*
       * Function will insert code block at current selection if block is empty or below current selection and set focus on it.
       */
      insertCodeBlock: function insertCodeBlock(inputMethod) {
        var _api$analytics2;
        return (0, _editorCommands.insertCodeBlockWithAnalytics)(inputMethod, api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions);
      }
    },
    pluginsOptions: {
      quickInsert: function quickInsert(_ref5) {
        var formatMessage = _ref5.formatMessage;
        return [{
          id: 'codeblock',
          title: formatMessage(_messages.blockTypeMessages.codeblock),
          description: formatMessage(_messages.blockTypeMessages.codeblockDescription),
          keywords: ['code block'],
          priority: 700,
          keyshortcut: '```',
          icon: function icon() {
            return /*#__PURE__*/_react.default.createElement(_quickInsert.IconCode, null);
          },
          action: function action(_insert, state) {
            var _api$analytics3;
            var tr = (0, _editorCommands.createInsertCodeBlockTransaction)({
              state: state
            });
            api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 || _api$analytics3.actions.attachAnalyticsEvent({
              action: _analytics.ACTION.INSERTED,
              actionSubject: _analytics.ACTION_SUBJECT.DOCUMENT,
              actionSubjectId: _analytics.ACTION_SUBJECT_ID.CODE_BLOCK,
              attributes: {
                inputMethod: _analytics.INPUT_METHOD.QUICK_INSERT
              },
              eventType: _analytics.EVENT_TYPE.TRACK
            })(tr);
            return tr;
          }
        }];
      },
      floatingToolbar: (0, _toolbar.getToolbarConfig)(options === null || options === void 0 ? void 0 : options.allowCopyToClipboard, api, options === null || options === void 0 ? void 0 : options.overrideLanguageName)
    }
  };
};
var _default = exports.default = codeBlockPlugin;