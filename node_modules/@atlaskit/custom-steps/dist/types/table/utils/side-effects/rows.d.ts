import type { Node as ProseMirrorNode, Schema } from '@atlaskit/editor-prosemirror/model';
import type { Mappable, StepMap, Transform } from '@atlaskit/editor-prosemirror/transform';
import type { TableRect } from '@atlaskit/editor-tables/table-map';
import type { Cell } from '../cells-at-column';
import type { RowSideEffect, RowSideEffectJSON } from './types';
interface RowsHandler {
    handle: (tr: Transform, rect: TableRect, row: number, col: number, cell: Cell) => {
        handled: boolean;
        skipRows?: number;
    };
    end: (tr: Transform, rect: TableRect, col: number) => void;
}
export declare class RowsSideEffectHandler {
    rows?: RowSideEffect[];
    constructor(rowsSideEffect?: RowSideEffect[]);
    private deleteHandler;
    private addHandler;
    start(isDelete: boolean): RowsHandler;
    addRowRanges(ranges: number[], isDelete: boolean): number[];
    map(mapping: Mappable): RowSideEffect[];
    invert(originalDoc: ProseMirrorNode, isDelete: boolean, map: StepMap): RowSideEffect[] | undefined;
    toJSON(): RowSideEffectJSON[] | undefined;
    static fromJSON(schema: Schema, json: RowSideEffectJSON[]): RowSideEffect[];
}
export {};
