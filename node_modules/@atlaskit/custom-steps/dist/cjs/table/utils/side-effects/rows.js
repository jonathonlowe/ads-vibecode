"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowsSideEffectHandler = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _tableMap = require("../table-map");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function mergedRanges(first, second) {
  var newRanges = [];
  var firstLength = first.length;
  var secondLength = second.length;
  var i = 0;
  var j = 0;
  while (i < firstLength && j < secondLength) {
    if (first[i] < second[j]) {
      newRanges.push(first[i], first[i + 1], first[i + 2]);
      i += 3;
    } else {
      newRanges.push(second[j], second[j + 1], second[j + 2]);
      j += 3;
    }
  }
  if (i < firstLength) {
    newRanges.push.apply(newRanges, (0, _toConsumableArray2.default)(first.slice(i)));
  }
  if (j < secondLength) {
    newRanges.push.apply(newRanges, (0, _toConsumableArray2.default)(second.slice(i)));
  }
  return newRanges;
}
function increaseRowSpan(tr, rect, row) {
  var map = rect.map,
    tableStart = rect.tableStart;
  for (var col = 0; col < map.width; col++) {
    var index = row * map.width + col;
    var pos = map.map[index];
    var mappedPos = tr.mapping.map(pos + tableStart);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var attrs = tr.doc.nodeAt(mappedPos).attrs;
    tr.setNodeMarkup(mappedPos, undefined, _objectSpread(_objectSpread({}, attrs), {}, {
      rowspan: attrs.rowspan + 1
    }));
    col += attrs.colspan - 1;
  }
}
function decreaseRowspan(tr, rect, row, colToRemove) {
  var skipRows = 0;
  var map = rect.map,
    table = rect.table,
    tableStart = rect.tableStart;
  for (var col = 0; col < map.width; col++) {
    var index = row * map.width + col;
    var pos = map.map[index];
    if (row > 0 && pos === map.map[index - map.width]) {
      // If this cell starts in the row above, simply reduce its rowspan
      var mappedPos = tr.mapping.map(pos + tableStart);
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var attrs = tr.doc.nodeAt(mappedPos).attrs;
      tr.setNodeMarkup(mappedPos, undefined, _objectSpread(_objectSpread({}, attrs), {}, {
        rowspan: attrs.rowspan - 1
      }));
      col += attrs.colspan - 1;
    } else if (col === colToRemove) {
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      skipRows = table.nodeAt(pos).attrs.rowspan - 1;
    }
  }
  return skipRows;
}
function isLastCellInRow(rect, row, col) {
  var rowNode = rect.table.child(row);
  if (!rowNode) {
    return false;
  }
  return rowNode.childCount === 1 && !(0, _tableMap.hasMergedColumns)(rect.map, row, col);
}
function removeRowWithLastCell(tr, rect, row, _col) {
  // Get row pos
  var from = rect.tableStart;
  for (var i = 0; i < row; i++) {
    from += rect.table.child(i).nodeSize;
  }
  var rowNode = rect.table.child(row);
  var to = from + rowNode.nodeSize;

  // Create sideEffect and delete the row
  // We store original row position before modifications
  tr.delete(tr.mapping.map(from), tr.mapping.map(to));

  // Change rowspan of all cells except current col and get the rows to skip
  var skipRows = decreaseRowspan(tr, rect, row, _col);
  return {
    skipRows: skipRows,
    row: {
      from: from,
      to: to,
      rowNode: rowNode.copy(rowNode.content)
    }
  };
}
function addRow(tr, rect, prevRow, rowSideEffect) {
  var cellNode = rowSideEffect.rowNode.child(0);
  tr.insert(tr.mapping.map(rowSideEffect.from), rowSideEffect.rowNode);
  increaseRowSpan(tr, rect, prevRow);
  return cellNode.attrs.rowspan - 1;
}
var RowsSideEffectHandler = exports.RowsSideEffectHandler = /*#__PURE__*/function () {
  function RowsSideEffectHandler(rowsSideEffect) {
    var _this = this;
    (0, _classCallCheck2.default)(this, RowsSideEffectHandler);
    (0, _defineProperty2.default)(this, "deleteHandler", function () {
      var newRows = [];
      return {
        handle: function handle(tr, rect, row, col, cell) {
          if (!isLastCellInRow(rect, row, col)) {
            return {
              handled: false
            };
          }
          var _removeRowWithLastCel = removeRowWithLastCell(tr, rect, row, col),
            rowSideEffect = _removeRowWithLastCel.row,
            skipRows = _removeRowWithLastCel.skipRows;
          newRows.push(rowSideEffect);
          return {
            handled: true,
            skipRows: skipRows
          };
        },
        end: function end() {
          if (newRows.length > 0) {
            _this.rows = newRows;
          } else {
            _this.rows = undefined;
          }
        }
      };
    });
    (0, _defineProperty2.default)(this, "addHandler", function () {
      var lastCellFrom = 0;
      var i = 0;
      return {
        handle: function handle(tr, rect, row, col, cell) {
          // // If not sideEffects stored return;
          if (!_this.rows || i >= _this.rows.length) {
            return {
              handled: false
            };
          }

          // Next row to add;
          var skipRows;
          var nextRow;
          while (
          // Ignored via go/ees005
          // eslint-disable-next-line no-cond-assign
          (nextRow = _this.rows[i]) && nextRow.from > lastCellFrom && nextRow.from < cell.from) {
            // I am in between of the previous and next row in the table;
            skipRows = addRow(tr, rect, row - 1, nextRow);
            i++;
          }
          lastCellFrom = cell.from;
          if (!skipRows || skipRows === 0) {
            return {
              handled: false
            };
          }
          return {
            handled: true,
            skipRows: skipRows - 1
          };
        },
        end: function end(tr, rect, col) {
          if (!_this.rows || i >= _this.rows.length) {
            return;
          }

          // Add rows at the end of the table
          var nextRow;
          // Ignored via go/ees005
          // eslint-disable-next-line no-cond-assign
          while (nextRow = _this.rows[i]) {
            addRow(tr, rect, rect.map.height - 1, nextRow);
            i++;
          }
        }
      };
    });
    this.rows = rowsSideEffect;
  }
  return (0, _createClass2.default)(RowsSideEffectHandler, [{
    key: "start",
    value: function start(isDelete) {
      if (isDelete) {
        return this.deleteHandler();
      }
      return this.addHandler();
    }
  }, {
    key: "addRowRanges",
    value: function addRowRanges(ranges, isDelete) {
      if (!this.rows) {
        return ranges;
      }
      var rowRanges = [];
      var _iterator = _createForOfIteratorHelper(this.rows),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var row = _step.value;
          var from = row.from,
            to = row.to;
          if (isDelete) {
            rowRanges.push(from, to - from, 0);
          } else {
            rowRanges.push(from, 0, to - from);
          }
        }

        // Merged ranges
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return mergedRanges(ranges, rowRanges);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      return [];
    }
  }, {
    key: "invert",
    value: function invert(originalDoc, isDelete, map) {
      if (!this.rows) {
        return;
      }
      var invertedRows = [];
      var _iterator2 = _createForOfIteratorHelper(this.rows),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var row = _step2.value;
          if (isDelete) {
            // Moving from delete to add keep the inverted rows + offset
            var offset = map.map(row.from) - row.from;
            invertedRows.push(_objectSpread(_objectSpread({}, row), {}, {
              from: row.from + offset,
              to: row.from + offset
            }));
          } else {
            // Moving from add to delete keep
            // TODO: I think we need to add the respective cell into the cellSteps...... not sure....
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return invertedRows;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      if (!this.rows) {
        return;
      }
      var rowsInJson = [];
      var _iterator3 = _createForOfIteratorHelper(this.rows),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var row = _step3.value;
          rowsInJson.push({
            from: row.from,
            to: row.to,
            rowNode: row.rowNode.toJSON()
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return rowsInJson;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(schema, json) {
      var rowSideEffects = [];
      var _iterator4 = _createForOfIteratorHelper(json),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var row = _step4.value;
          rowSideEffects.push({
            from: row.from,
            to: row.to,
            rowNode: schema.nodeFromJSON(row.rowNode)
          });
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return rowSideEffects;
    }
  }]);
}();