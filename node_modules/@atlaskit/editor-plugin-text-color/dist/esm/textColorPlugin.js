import React from 'react';
import { textColor } from '@atlaskit/adf-schema';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { changeColor as _changeColor } from './pm-plugins/commands/change-color';
import { createPlugin, pluginKey as textColorPluginKey } from './pm-plugins/main';
import { FloatingToolbarComponent } from './ui/FloatingToolbarComponent';
import { PrimaryToolbarComponent } from './ui/PrimaryToolbarComponent';
var pluginConfig = function pluginConfig(textColorConfig) {
  if (!textColorConfig || typeof textColorConfig === 'boolean') {
    return undefined;
  }
  return textColorConfig;
};
export var textColorPlugin = function textColorPlugin(_ref) {
  var _api$primaryToolbar;
  var textColorConfig = _ref.config,
    api = _ref.api;
  var primaryToolbarComponent = function primaryToolbarComponent(_ref2) {
    var editorView = _ref2.editorView,
      popupsMountPoint = _ref2.popupsMountPoint,
      popupsBoundariesElement = _ref2.popupsBoundariesElement,
      popupsScrollableElement = _ref2.popupsScrollableElement,
      isToolbarReducedSpacing = _ref2.isToolbarReducedSpacing,
      dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
      disabled = _ref2.disabled;
    return /*#__PURE__*/React.createElement(PrimaryToolbarComponent, {
      isReducedSpacing: isToolbarReducedSpacing,
      editorView: editorView,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      disabled: disabled,
      api: api
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'textColor',
    component: primaryToolbarComponent
  });
  return {
    name: 'textColor',
    marks: function marks() {
      return [{
        name: 'textColor',
        mark: textColor
      }];
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'textColor',
        plugin: function plugin(_ref3) {
          var dispatch = _ref3.dispatch;
          return createPlugin(dispatch, pluginConfig(textColorConfig));
        }
      }];
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return undefined;
      }
      return textColorPluginKey.getState(editorState);
    },
    actions: {
      changeColor: function changeColor(color, inputMethod) {
        var _api$analytics;
        return _changeColor(color, api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions, inputMethod);
      }
    },
    pluginsOptions: {
      selectionToolbar: function selectionToolbar() {
        var _api$selectionToolbar;
        if ((api === null || api === void 0 || (_api$selectionToolbar = api.selectionToolbar) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.sharedState) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.currentState()) === null || _api$selectionToolbar === void 0 ? void 0 : _api$selectionToolbar.toolbarDocking) === 'none' && editorExperiment('platform_editor_controls', 'variant1', {
          exposure: true
        })) {
          var toolbarCustom = {
            type: 'custom',
            render: function render(view, _idx, dispatchAnalyticsEvent) {
              if (!view) {
                return;
              }
              return /*#__PURE__*/React.createElement(FloatingToolbarComponent, {
                editorView: view,
                dispatchAnalyticsEvent: dispatchAnalyticsEvent,
                api: api
              });
            },
            fallback: []
          };
          return {
            isToolbarAbove: true,
            items: [toolbarCustom],
            rank: 6,
            pluginName: 'textColor'
          };
        } else {
          return undefined;
        }
      }
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
};