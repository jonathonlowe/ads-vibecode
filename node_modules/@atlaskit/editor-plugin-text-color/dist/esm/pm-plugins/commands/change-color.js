import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { withAnalytics } from '@atlaskit/editor-common/editor-analytics';
import { pluginKey } from '../main';
import { getActiveColor } from '../utils/color';
import { removeColor } from './remove-color';
import { toggleColor } from './toggle-color';

/**
 * Helper to create a higher order analytics command
 * @param newColor  - Color to be change in hex code
 * @param previousColor - Active color in hex code
 * @param palette - Current palette of colors
 * @return Higher order command with analytics logic inside.
 */
function createWithColorAnalytics(newColor, previousColor, palette, editorAnalyticsApi, inputMethod) {
  var newColorFromPalette = palette.find(function (_ref) {
    var value = _ref.value;
    return value === newColor;
  });
  var previousColorFromPalette = palette.find(function (_ref2) {
    var value = _ref2.value;
    return value === previousColor;
  });
  var newColorLabel = newColorFromPalette ? newColorFromPalette.label : newColor;
  var previousColorLabel = previousColorFromPalette ? previousColorFromPalette.label : previousColor || '';
  return withAnalytics(editorAnalyticsApi, {
    action: ACTION.FORMATTED,
    actionSubject: ACTION_SUBJECT.TEXT,
    actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
    eventType: EVENT_TYPE.TRACK,
    attributes: {
      newColor: newColorLabel.toLowerCase(),
      previousColor: previousColorLabel.toLowerCase(),
      inputMethod: inputMethod
    }
  });
}
export var changeColor = function changeColor(color, editorAnalyticsApi, inputMethod) {
  return function (state, dispatch) {
    var textColor = state.schema.marks.textColor;
    if (textColor) {
      var pluginState = pluginKey.getState(state);
      var activeColor = getActiveColor(state);
      var withColorAnalytics = createWithColorAnalytics(color, activeColor, (pluginState === null || pluginState === void 0 ? void 0 : pluginState.palette) || [], editorAnalyticsApi, inputMethod);
      if (pluginState !== null && pluginState !== void 0 && pluginState.disabled) {
        return false;
      }
      if (color === (pluginState === null || pluginState === void 0 ? void 0 : pluginState.defaultColor)) {
        withColorAnalytics(removeColor())(state, dispatch);
        return true;
      }
      withColorAnalytics(toggleColor(color))(state, dispatch);
      return true;
    }
    return false;
  };
};