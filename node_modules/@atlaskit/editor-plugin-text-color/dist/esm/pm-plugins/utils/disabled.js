import { isMarkAllowedInRange, isMarkExcluded } from '@atlaskit/editor-common/mark';
import { overrideMarks } from './constants';
var hasLinkMark = function hasLinkMark($pos) {
  var linkMarkType = $pos.doc.type.schema.marks.link,
    pos = $pos.pos;
  if (!linkMarkType) {
    return false;
  }
  return $pos.doc.rangeHasMark(pos, Math.min(pos + 1, $pos.doc.content.size), linkMarkType);
};
export var getDisabledState = function getDisabledState(state) {
  var textColor = state.schema.marks.textColor;
  if (textColor) {
    var _state$storedMarks;
    var _ref = state.selection,
      empty = _ref.empty,
      ranges = _ref.ranges,
      $cursor = _ref.$cursor;
    if (empty && !$cursor || $cursor && hasLinkMark($cursor) || isMarkAllowedInRange(state.doc, ranges, textColor) === false) {
      return true;
    }

    // Allow "excluded" marks that can be overridden
    // These marks are explicitly removed before applying the new mark (see toggleColor command)
    var omitOverrides = function omitOverrides(mark) {
      return !overrideMarks.includes(mark.type.name);
    };
    if (isMarkExcluded(textColor, ((_state$storedMarks = state.storedMarks) === null || _state$storedMarks === void 0 ? void 0 : _state$storedMarks.filter(omitOverrides)) || $cursor && $cursor.marks().filter(omitOverrides))) {
      return true;
    }
    return false;
  }
  return true;
};