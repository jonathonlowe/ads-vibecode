import _readOnlyError from "@babel/runtime/helpers/readOnlyError";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { DynamicStrokeIconDecoration, SteppedRainbowIconDecoration } from '@atlaskit/editor-common/icons';
import { textColorMessages as messages } from '@atlaskit/editor-common/messages';
import { expandIconContainerStyle, separatorStyles, triggerWrapperStyles, triggerWrapperStylesWithPadding, wrapperStyle } from '@atlaskit/editor-common/styles';
import { ColorPalette, getSelectedRowAndColumnFromPalette, textPaletteTooltipMessages } from '@atlaskit/editor-common/ui-color';
import { ArrowKeyNavigationType, DropdownContainer as Dropdown, TOOLBAR_BUTTON, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorTextPaletteColor } from '@atlaskit/editor-palette';
import { akEditorMenuZIndex } from '@atlaskit/editor-shared-styles';
import TextStyleIcon from '@atlaskit/icon/core/text-style';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { changeColor as changeColorWithAnalytics } from '../../pm-plugins/commands/change-color';
import { getInputMethod } from '../../pm-plugins/utils/inputType';
import { ToolbarType } from '../../types';
import { EditorTextColorIcon } from './icon';
var addMarginToWrapper = css({
  marginRight: "var(--ds-space-050, 4px)"
});

// eslint-disable-next-line @repo/internal/react/no-class-components
export var ToolbarTextColor = /*#__PURE__*/function (_React$Component) {
  function ToolbarTextColor() {
    var _this;
    _classCallCheck(this, ToolbarTextColor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ToolbarTextColor, [].concat(args));
    _defineProperty(_this, "state", {
      isOpen: false,
      isOpenedByKeyboard: false
    });
    _defineProperty(_this, "toolbarItemRef", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "changeColor", function (color, editorAnalyticsApi) {
      return changeColorWithAnalytics(color, editorAnalyticsApi, getInputMethod(_this.props.toolbarType))(_this.props.editorView.state, _this.props.editorView.dispatch);
    });
    _defineProperty(_this, "changeTextColor", function (color, editorAnalyticsApi, disabled) {
      if (!disabled) {
        var _this$props$editorVie;
        _this.handleOpenChange({
          isOpen: false,
          logCloseEvent: false
        });
        _this.changeColor(color, editorAnalyticsApi);
        //To set the focus on the textcolor button when the menu is closed by 'Esc' only to meet aria guidelines
        (_this$props$editorVie = _this.props.editorView) === null || _this$props$editorVie === void 0 || _this$props$editorVie.focus();
      }
      return false;
    });
    _defineProperty(_this, "toggleOpen", function () {
      _this.handleOpenChange({
        isOpen: !_this.state.isOpen,
        logCloseEvent: true
      });
    });
    _defineProperty(_this, "onKeyDown", function (event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        _this.setState({
          isOpenedByKeyboard: true
        });
        _this.toggleOpen();
      }
    });
    _defineProperty(_this, "handleOpenChange", function (_ref) {
      var isOpen = _ref.isOpen,
        logCloseEvent = _ref.logCloseEvent;
      _this.setState({
        isOpen: isOpen
      });
      if (!isOpen) {
        _this.setState({
          isOpenedByKeyboard: false
        });
      }
      if (logCloseEvent) {
        _this.dispatchAnalyticsEvent(_this.buildAnalyticsPalette(isOpen ? ACTION.OPENED : ACTION.CLOSED, {
          noSelect: isOpen === false
        }));
      }
    });
    _defineProperty(_this, "hide", function (e) {
      var isOpen = _this.state.isOpen;
      if (isOpen === true) {
        _this.dispatchAnalyticsEvent(_this.buildAnalyticsPalette(ACTION.CLOSED, {
          noSelect: true
        }));
        _this.setState({
          isOpen: false
        });
        if (e instanceof KeyboardEvent && e.key === 'Escape') {
          var _this$toolbarItemRef;
          (_this$toolbarItemRef = _this.toolbarItemRef) === null || _this$toolbarItemRef === void 0 || (_this$toolbarItemRef = _this$toolbarItemRef.current) === null || _this$toolbarItemRef === void 0 || _this$toolbarItemRef.focus();
        }
      }
    });
    _defineProperty(_this, "hideonEsc", function (e) {
      var _this$toolbarItemRef2;
      _this.hide(e);
      (_this$toolbarItemRef2 = _this.toolbarItemRef) === null || _this$toolbarItemRef2 === void 0 || (_this$toolbarItemRef2 = _this$toolbarItemRef2.current) === null || _this$toolbarItemRef2 === void 0 || _this$toolbarItemRef2.focus();
    });
    return _this;
  }
  _inherits(ToolbarTextColor, _React$Component);
  return _createClass(ToolbarTextColor, [{
    key: "render",
    value: function render() {
      var _palette$find,
        _this2 = this;
      var _this$state = this.state,
        isOpen = _this$state.isOpen,
        isOpenedByKeyboard = _this$state.isOpenedByKeyboard;
      var _this$props = this.props,
        popupsMountPoint = _this$props.popupsMountPoint,
        popupsBoundariesElement = _this$props.popupsBoundariesElement,
        popupsScrollableElement = _this$props.popupsScrollableElement,
        isReducedSpacing = _this$props.isReducedSpacing,
        pluginState = _this$props.pluginState,
        formatMessage = _this$props.intl.formatMessage,
        disabled = _this$props.disabled,
        pluginInjectionApi = _this$props.pluginInjectionApi;
      var palette = pluginState.palette;
      var fitWidth;
      if (document.body.clientWidth <= 740) {
        // This was originally hard-coded, but moved here to a const
        // My guess is it's based off (width of button * columns) + left/right padding
        // 240 = (32 * 7) + (8 + 8)
        // Not sure where the extra 2px comes from
        fitWidth = 242;
      }
      var selectedColor = this.getSelectedColor(pluginState);
      // TODO: ED-26959 - This doesn't work, the label isn't translated
      var selectedColorPaletteItemLabel = (_palette$find = palette.find(function (paletteItem) {
        return paletteItem.value === pluginState.color;
      })) === null || _palette$find === void 0 ? void 0 : _palette$find.label;
      var selectedColorPaletteItemLabelText = selectedColorPaletteItemLabel || '';
      var labelTextColor = formatMessage(messages.textColor, {
        selectedColorName: selectedColorPaletteItemLabelText
      });
      var tooltipTextColor = formatMessage(messages.textColorTooltip);
      var _getSelectedRowAndCol = getSelectedRowAndColumnFromPalette(palette, pluginState.color),
        selectedRowIndex = _getSelectedRowAndCol.selectedRowIndex,
        selectedColumnIndex = _getSelectedRowAndCol.selectedColumnIndex;
      var reducedSpacing = this.props.toolbarType === ToolbarType.FLOATING ? 'compact' : 'none';
      return jsx("span", {
        css:
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/platform/ensure-feature-flag-prefix
        fg('platform-visual-refresh-icons') ? [wrapperStyle, addMarginToWrapper] : wrapperStyle
      }, jsx(Dropdown, {
        mountTo: popupsMountPoint,
        boundariesElement: popupsBoundariesElement,
        scrollableElement: popupsScrollableElement,
        isOpen: isOpen && !pluginState.disabled,
        handleClickOutside: this.hide,
        handleEscapeKeydown: this.hideonEsc,
        zIndex: akEditorMenuZIndex,
        fitWidth: fitWidth,
        closeOnTab: true,
        arrowKeyNavigationProviderOptions: {
          type: ArrowKeyNavigationType.COLOR,
          selectedRowIndex: selectedRowIndex,
          selectedColumnIndex: selectedColumnIndex,
          isOpenedByKeyboard: isOpenedByKeyboard,
          isPopupPositioned: true
        },
        trigger: jsx(ToolbarButton, {
          buttonId: TOOLBAR_BUTTON.TEXT_COLOR,
          spacing: !isReducedSpacing || editorExperiment('platform_editor_controls', 'variant1') ? 'default' : reducedSpacing,
          disabled: disabled || pluginState.disabled,
          selected: isOpen,
          "aria-label": labelTextColor,
          "aria-expanded": isOpen,
          "aria-haspopup": true,
          title: tooltipTextColor,
          onClick: this.toggleOpen,
          onKeyDown: this.onKeyDown,
          ref: this.toolbarItemRef,
          iconBefore: jsx("div", {
            css:
            // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-registration, @atlaskit/platform/ensure-feature-flag-prefix
            fg('platform-visual-refresh-icons') ?
            // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
            triggerWrapperStylesWithPadding :
            // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
            triggerWrapperStyles
          }, fg('platform-visual-refresh-icons') ? jsx(DynamicStrokeIconDecoration, {
            selectedColor: selectedColor,
            disabled: pluginState.disabled,
            icon: jsx(TextStyleIcon, {
              label: "",
              color: "currentColor",
              spacing: "spacious"
            })
          }) : jsx(SteppedRainbowIconDecoration, {
            selectedColor: selectedColor,
            disabled: pluginState.disabled,
            icon: jsx(EditorTextColorIcon, null)
          }),
          //eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
          jsx("span", {
            css: expandIconContainerStyle
          }, jsx(ChevronDownIcon, {
            label: "",
            color: "currentColor",
            LEGACY_margin: "0 0 0 -8px"
          })))
        })
      }, jsx("div", {
        "data-testid": "text-color-palette"
      }, jsx(ColorPalette, {
        onClick: function onClick(color) {
          var _pluginInjectionApi$a;
          return _this2.changeTextColor(color, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions, pluginState.disabled);
        },
        selectedColor: pluginState.color,
        paletteOptions: {
          palette: palette,
          hexToPaletteColor: hexToEditorTextPaletteColor,
          paletteColorTooltipMessages: textPaletteTooltipMessages
        }
      }))), !(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.primaryToolbar) && /* eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage */
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("span", {
        css: separatorStyles
      }));
    }
  }, {
    key: "getSelectedColor",
    value: function getSelectedColor(pluginState) {
      var selectedColor = pluginState.color !== pluginState.defaultColor ? pluginState.color ?
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      hexToEditorTextPaletteColor(pluginState.color) : pluginState.color : null;
      return selectedColor;
    }
  }, {
    key: "buildAnalyticsPalette",
    value: function buildAnalyticsPalette(action, data) {
      return {
        action: action,
        actionSubject: ACTION_SUBJECT.TOOLBAR,
        actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
        eventType: EVENT_TYPE.TRACK,
        attributes: _objectSpread({}, data)
      };
    }
  }, {
    key: "dispatchAnalyticsEvent",
    value: function dispatchAnalyticsEvent(payload) {
      var dispatchAnalyticsEvent = this.props.dispatchAnalyticsEvent;
      if (dispatchAnalyticsEvent) {
        dispatchAnalyticsEvent(payload);
      }
    }
  }]);
}(React.Component);
export default injectIntl(ToolbarTextColor);