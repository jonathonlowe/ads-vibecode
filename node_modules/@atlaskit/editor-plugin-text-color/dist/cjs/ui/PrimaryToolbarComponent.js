"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrimaryToolbarComponent = PrimaryToolbarComponent;
var _react = _interopRequireDefault(require("react"));
var _hooks = require("@atlaskit/editor-common/hooks");
var _types = require("../types");
var _ToolbarTextColor = _interopRequireDefault(require("./ToolbarTextColor"));
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default

function PrimaryToolbarComponent(_ref) {
  var api = _ref.api,
    isReducedSpacing = _ref.isReducedSpacing,
    editorView = _ref.editorView,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsScrollableElement = _ref.popupsScrollableElement,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    dispatchAnalyticsEvent = _ref.dispatchAnalyticsEvent,
    disabled = _ref.disabled;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['textColor']),
    textColorState = _useSharedPluginState.textColorState;
  return /*#__PURE__*/_react.default.createElement(_ToolbarTextColor.default
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  , {
    pluginState: textColorState,
    isReducedSpacing: isReducedSpacing,
    editorView: editorView,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    disabled: disabled,
    pluginInjectionApi: api,
    toolbarType: _types.ToolbarType.PRIMARY
  });
}