"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToolbarTextColor = void 0;
var _readOnlyError2 = _interopRequireDefault(require("@babel/runtime/helpers/readOnlyError"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _icons = require("@atlaskit/editor-common/icons");
var _messages = require("@atlaskit/editor-common/messages");
var _styles = require("@atlaskit/editor-common/styles");
var _uiColor = require("@atlaskit/editor-common/ui-color");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorPalette = require("@atlaskit/editor-palette");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _textStyle = _interopRequireDefault(require("@atlaskit/icon/core/text-style"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _changeColor = require("../../pm-plugins/commands/change-color");
var _inputType = require("../../pm-plugins/utils/inputType");
var _types = require("../../types");
var _icon = require("./icon");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var addMarginToWrapper = (0, _react2.css)({
  marginRight: "var(--ds-space-050, 4px)"
});

// eslint-disable-next-line @repo/internal/react/no-class-components
var ToolbarTextColor = exports.ToolbarTextColor = /*#__PURE__*/function (_React$Component) {
  function ToolbarTextColor() {
    var _this;
    (0, _classCallCheck2.default)(this, ToolbarTextColor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ToolbarTextColor, [].concat(args));
    (0, _defineProperty2.default)(_this, "state", {
      isOpen: false,
      isOpenedByKeyboard: false
    });
    (0, _defineProperty2.default)(_this, "toolbarItemRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(_this, "changeColor", function (color, editorAnalyticsApi) {
      return (0, _changeColor.changeColor)(color, editorAnalyticsApi, (0, _inputType.getInputMethod)(_this.props.toolbarType))(_this.props.editorView.state, _this.props.editorView.dispatch);
    });
    (0, _defineProperty2.default)(_this, "changeTextColor", function (color, editorAnalyticsApi, disabled) {
      if (!disabled) {
        var _this$props$editorVie;
        _this.handleOpenChange({
          isOpen: false,
          logCloseEvent: false
        });
        _this.changeColor(color, editorAnalyticsApi);
        //To set the focus on the textcolor button when the menu is closed by 'Esc' only to meet aria guidelines
        (_this$props$editorVie = _this.props.editorView) === null || _this$props$editorVie === void 0 || _this$props$editorVie.focus();
      }
      return false;
    });
    (0, _defineProperty2.default)(_this, "toggleOpen", function () {
      _this.handleOpenChange({
        isOpen: !_this.state.isOpen,
        logCloseEvent: true
      });
    });
    (0, _defineProperty2.default)(_this, "onKeyDown", function (event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        _this.setState({
          isOpenedByKeyboard: true
        });
        _this.toggleOpen();
      }
    });
    (0, _defineProperty2.default)(_this, "handleOpenChange", function (_ref) {
      var isOpen = _ref.isOpen,
        logCloseEvent = _ref.logCloseEvent;
      _this.setState({
        isOpen: isOpen
      });
      if (!isOpen) {
        _this.setState({
          isOpenedByKeyboard: false
        });
      }
      if (logCloseEvent) {
        _this.dispatchAnalyticsEvent(_this.buildAnalyticsPalette(isOpen ? _analytics.ACTION.OPENED : _analytics.ACTION.CLOSED, {
          noSelect: isOpen === false
        }));
      }
    });
    (0, _defineProperty2.default)(_this, "hide", function (e) {
      var isOpen = _this.state.isOpen;
      if (isOpen === true) {
        _this.dispatchAnalyticsEvent(_this.buildAnalyticsPalette(_analytics.ACTION.CLOSED, {
          noSelect: true
        }));
        _this.setState({
          isOpen: false
        });
        if (e instanceof KeyboardEvent && e.key === 'Escape') {
          var _this$toolbarItemRef;
          (_this$toolbarItemRef = _this.toolbarItemRef) === null || _this$toolbarItemRef === void 0 || (_this$toolbarItemRef = _this$toolbarItemRef.current) === null || _this$toolbarItemRef === void 0 || _this$toolbarItemRef.focus();
        }
      }
    });
    (0, _defineProperty2.default)(_this, "hideonEsc", function (e) {
      var _this$toolbarItemRef2;
      _this.hide(e);
      (_this$toolbarItemRef2 = _this.toolbarItemRef) === null || _this$toolbarItemRef2 === void 0 || (_this$toolbarItemRef2 = _this$toolbarItemRef2.current) === null || _this$toolbarItemRef2 === void 0 || _this$toolbarItemRef2.focus();
    });
    return _this;
  }
  (0, _inherits2.default)(ToolbarTextColor, _React$Component);
  return (0, _createClass2.default)(ToolbarTextColor, [{
    key: "render",
    value: function render() {
      var _palette$find,
        _this2 = this;
      var _this$state = this.state,
        isOpen = _this$state.isOpen,
        isOpenedByKeyboard = _this$state.isOpenedByKeyboard;
      var _this$props = this.props,
        popupsMountPoint = _this$props.popupsMountPoint,
        popupsBoundariesElement = _this$props.popupsBoundariesElement,
        popupsScrollableElement = _this$props.popupsScrollableElement,
        isReducedSpacing = _this$props.isReducedSpacing,
        pluginState = _this$props.pluginState,
        formatMessage = _this$props.intl.formatMessage,
        disabled = _this$props.disabled,
        pluginInjectionApi = _this$props.pluginInjectionApi;
      var palette = pluginState.palette;
      var fitWidth;
      if (document.body.clientWidth <= 740) {
        // This was originally hard-coded, but moved here to a const
        // My guess is it's based off (width of button * columns) + left/right padding
        // 240 = (32 * 7) + (8 + 8)
        // Not sure where the extra 2px comes from
        fitWidth = 242;
      }
      var selectedColor = this.getSelectedColor(pluginState);
      // TODO: ED-26959 - This doesn't work, the label isn't translated
      var selectedColorPaletteItemLabel = (_palette$find = palette.find(function (paletteItem) {
        return paletteItem.value === pluginState.color;
      })) === null || _palette$find === void 0 ? void 0 : _palette$find.label;
      var selectedColorPaletteItemLabelText = selectedColorPaletteItemLabel || '';
      var labelTextColor = formatMessage(_messages.textColorMessages.textColor, {
        selectedColorName: selectedColorPaletteItemLabelText
      });
      var tooltipTextColor = formatMessage(_messages.textColorMessages.textColorTooltip);
      var _getSelectedRowAndCol = (0, _uiColor.getSelectedRowAndColumnFromPalette)(palette, pluginState.color),
        selectedRowIndex = _getSelectedRowAndCol.selectedRowIndex,
        selectedColumnIndex = _getSelectedRowAndCol.selectedColumnIndex;
      var reducedSpacing = this.props.toolbarType === _types.ToolbarType.FLOATING ? 'compact' : 'none';
      return (0, _react2.jsx)("span", {
        css:
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/platform/ensure-feature-flag-prefix
        (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') ? [_styles.wrapperStyle, addMarginToWrapper] : _styles.wrapperStyle
      }, (0, _react2.jsx)(_uiMenu.DropdownContainer, {
        mountTo: popupsMountPoint,
        boundariesElement: popupsBoundariesElement,
        scrollableElement: popupsScrollableElement,
        isOpen: isOpen && !pluginState.disabled,
        handleClickOutside: this.hide,
        handleEscapeKeydown: this.hideonEsc,
        zIndex: _editorSharedStyles.akEditorMenuZIndex,
        fitWidth: fitWidth,
        closeOnTab: true,
        arrowKeyNavigationProviderOptions: {
          type: _uiMenu.ArrowKeyNavigationType.COLOR,
          selectedRowIndex: selectedRowIndex,
          selectedColumnIndex: selectedColumnIndex,
          isOpenedByKeyboard: isOpenedByKeyboard,
          isPopupPositioned: true
        },
        trigger: (0, _react2.jsx)(_uiMenu.ToolbarButton, {
          buttonId: _uiMenu.TOOLBAR_BUTTON.TEXT_COLOR,
          spacing: !isReducedSpacing || (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? 'default' : reducedSpacing,
          disabled: disabled || pluginState.disabled,
          selected: isOpen,
          "aria-label": labelTextColor,
          "aria-expanded": isOpen,
          "aria-haspopup": true,
          title: tooltipTextColor,
          onClick: this.toggleOpen,
          onKeyDown: this.onKeyDown,
          ref: this.toolbarItemRef,
          iconBefore: (0, _react2.jsx)("div", {
            css:
            // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-registration, @atlaskit/platform/ensure-feature-flag-prefix
            (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') ?
            // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
            _styles.triggerWrapperStylesWithPadding :
            // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
            _styles.triggerWrapperStyles
          }, (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') ? (0, _react2.jsx)(_icons.DynamicStrokeIconDecoration, {
            selectedColor: selectedColor,
            disabled: pluginState.disabled,
            icon: (0, _react2.jsx)(_textStyle.default, {
              label: "",
              color: "currentColor",
              spacing: "spacious"
            })
          }) : (0, _react2.jsx)(_icons.SteppedRainbowIconDecoration, {
            selectedColor: selectedColor,
            disabled: pluginState.disabled,
            icon: (0, _react2.jsx)(_icon.EditorTextColorIcon, null)
          }),
          //eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
          (0, _react2.jsx)("span", {
            css: _styles.expandIconContainerStyle
          }, (0, _react2.jsx)(_chevronDown.default, {
            label: "",
            color: "currentColor",
            LEGACY_margin: "0 0 0 -8px"
          })))
        })
      }, (0, _react2.jsx)("div", {
        "data-testid": "text-color-palette"
      }, (0, _react2.jsx)(_uiColor.ColorPalette, {
        onClick: function onClick(color) {
          var _pluginInjectionApi$a;
          return _this2.changeTextColor(color, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions, pluginState.disabled);
        },
        selectedColor: pluginState.color,
        paletteOptions: {
          palette: palette,
          hexToPaletteColor: _editorPalette.hexToEditorTextPaletteColor,
          paletteColorTooltipMessages: _uiColor.textPaletteTooltipMessages
        }
      }))), !(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.primaryToolbar) && /* eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage */
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      (0, _react2.jsx)("span", {
        css: _styles.separatorStyles
      }));
    }
  }, {
    key: "getSelectedColor",
    value: function getSelectedColor(pluginState) {
      var selectedColor = pluginState.color !== pluginState.defaultColor ? pluginState.color ?
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      (0, _editorPalette.hexToEditorTextPaletteColor)(pluginState.color) : pluginState.color : null;
      return selectedColor;
    }
  }, {
    key: "buildAnalyticsPalette",
    value: function buildAnalyticsPalette(action, data) {
      return {
        action: action,
        actionSubject: _analytics.ACTION_SUBJECT.TOOLBAR,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_COLOR,
        eventType: _analytics.EVENT_TYPE.TRACK,
        attributes: _objectSpread({}, data)
      };
    }
  }, {
    key: "dispatchAnalyticsEvent",
    value: function dispatchAnalyticsEvent(payload) {
      var dispatchAnalyticsEvent = this.props.dispatchAnalyticsEvent;
      if (dispatchAnalyticsEvent) {
        dispatchAnalyticsEvent(payload);
      }
    }
  }]);
}(_react.default.Component);
var _default = exports.default = (0, _reactIntlNext.injectIntl)(ToolbarTextColor);