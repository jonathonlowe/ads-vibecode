import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { DynamicStrokeIconDecoration, SteppedRainbowIconDecoration } from '@atlaskit/editor-common/icons';
import { textColorMessages as messages } from '@atlaskit/editor-common/messages';
import { expandIconContainerStyle, separatorStyles, triggerWrapperStyles, triggerWrapperStylesWithPadding, wrapperStyle } from '@atlaskit/editor-common/styles';
import { ColorPalette, getSelectedRowAndColumnFromPalette, textPaletteTooltipMessages } from '@atlaskit/editor-common/ui-color';
import { ArrowKeyNavigationType, DropdownContainer as Dropdown, TOOLBAR_BUTTON, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorTextPaletteColor } from '@atlaskit/editor-palette';
import { akEditorMenuZIndex } from '@atlaskit/editor-shared-styles';
import TextStyleIcon from '@atlaskit/icon/core/text-style';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { changeColor as changeColorWithAnalytics } from '../../pm-plugins/commands/change-color';
import { getInputMethod } from '../../pm-plugins/utils/inputType';
import { ToolbarType } from '../../types';
import { EditorTextColorIcon } from './icon';
const addMarginToWrapper = css({
  marginRight: "var(--ds-space-050, 4px)"
});

// eslint-disable-next-line @repo/internal/react/no-class-components
export class ToolbarTextColor extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isOpen: false,
      isOpenedByKeyboard: false
    });
    _defineProperty(this, "toolbarItemRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "changeColor", (color, editorAnalyticsApi) => changeColorWithAnalytics(color, editorAnalyticsApi, getInputMethod(this.props.toolbarType))(this.props.editorView.state, this.props.editorView.dispatch));
    _defineProperty(this, "changeTextColor", (color, editorAnalyticsApi, disabled) => {
      if (!disabled) {
        var _this$props$editorVie;
        this.handleOpenChange({
          isOpen: false,
          logCloseEvent: false
        });
        this.changeColor(color, editorAnalyticsApi);
        //To set the focus on the textcolor button when the menu is closed by 'Esc' only to meet aria guidelines
        (_this$props$editorVie = this.props.editorView) === null || _this$props$editorVie === void 0 ? void 0 : _this$props$editorVie.focus();
      }
      return false;
    });
    _defineProperty(this, "toggleOpen", () => {
      this.handleOpenChange({
        isOpen: !this.state.isOpen,
        logCloseEvent: true
      });
    });
    _defineProperty(this, "onKeyDown", event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this.setState({
          isOpenedByKeyboard: true
        });
        this.toggleOpen();
      }
    });
    _defineProperty(this, "handleOpenChange", ({
      isOpen,
      logCloseEvent
    }) => {
      this.setState({
        isOpen
      });
      if (!isOpen) {
        this.setState({
          isOpenedByKeyboard: false
        });
      }
      if (logCloseEvent) {
        this.dispatchAnalyticsEvent(this.buildAnalyticsPalette(isOpen ? ACTION.OPENED : ACTION.CLOSED, {
          noSelect: isOpen === false
        }));
      }
    });
    _defineProperty(this, "hide", e => {
      const {
        isOpen
      } = this.state;
      if (isOpen === true) {
        this.dispatchAnalyticsEvent(this.buildAnalyticsPalette(ACTION.CLOSED, {
          noSelect: true
        }));
        this.setState({
          isOpen: false
        });
        if (e instanceof KeyboardEvent && e.key === 'Escape') {
          var _this$toolbarItemRef, _this$toolbarItemRef$;
          (_this$toolbarItemRef = this.toolbarItemRef) === null || _this$toolbarItemRef === void 0 ? void 0 : (_this$toolbarItemRef$ = _this$toolbarItemRef.current) === null || _this$toolbarItemRef$ === void 0 ? void 0 : _this$toolbarItemRef$.focus();
        }
      }
    });
    _defineProperty(this, "hideonEsc", e => {
      var _this$toolbarItemRef2, _this$toolbarItemRef3;
      this.hide(e);
      (_this$toolbarItemRef2 = this.toolbarItemRef) === null || _this$toolbarItemRef2 === void 0 ? void 0 : (_this$toolbarItemRef3 = _this$toolbarItemRef2.current) === null || _this$toolbarItemRef3 === void 0 ? void 0 : _this$toolbarItemRef3.focus();
    });
  }
  render() {
    var _palette$find;
    const {
      isOpen,
      isOpenedByKeyboard
    } = this.state;
    const {
      popupsMountPoint,
      popupsBoundariesElement,
      popupsScrollableElement,
      isReducedSpacing,
      pluginState,
      intl: {
        formatMessage
      },
      disabled,
      pluginInjectionApi
    } = this.props;
    const palette = pluginState.palette;
    let fitWidth;
    if (document.body.clientWidth <= 740) {
      // This was originally hard-coded, but moved here to a const
      // My guess is it's based off (width of button * columns) + left/right padding
      // 240 = (32 * 7) + (8 + 8)
      // Not sure where the extra 2px comes from
      fitWidth = 242;
    }
    const selectedColor = this.getSelectedColor(pluginState);
    // TODO: ED-26959 - This doesn't work, the label isn't translated
    const selectedColorPaletteItemLabel = (_palette$find = palette.find(paletteItem => paletteItem.value === pluginState.color)) === null || _palette$find === void 0 ? void 0 : _palette$find.label;
    const selectedColorPaletteItemLabelText = selectedColorPaletteItemLabel || '';
    const labelTextColor = formatMessage(messages.textColor, {
      selectedColorName: selectedColorPaletteItemLabelText
    });
    const tooltipTextColor = formatMessage(messages.textColorTooltip);
    const {
      selectedRowIndex,
      selectedColumnIndex
    } = getSelectedRowAndColumnFromPalette(palette, pluginState.color);
    const reducedSpacing = this.props.toolbarType === ToolbarType.FLOATING ? 'compact' : 'none';
    return jsx("span", {
      css:
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/platform/ensure-feature-flag-prefix
      fg('platform-visual-refresh-icons') ? [wrapperStyle, addMarginToWrapper] : wrapperStyle
    }, jsx(Dropdown, {
      mountTo: popupsMountPoint,
      boundariesElement: popupsBoundariesElement,
      scrollableElement: popupsScrollableElement,
      isOpen: isOpen && !pluginState.disabled,
      handleClickOutside: this.hide,
      handleEscapeKeydown: this.hideonEsc,
      zIndex: akEditorMenuZIndex,
      fitWidth: fitWidth,
      closeOnTab: true,
      arrowKeyNavigationProviderOptions: {
        type: ArrowKeyNavigationType.COLOR,
        selectedRowIndex,
        selectedColumnIndex,
        isOpenedByKeyboard,
        isPopupPositioned: true
      },
      trigger: jsx(ToolbarButton, {
        buttonId: TOOLBAR_BUTTON.TEXT_COLOR,
        spacing: !isReducedSpacing || editorExperiment('platform_editor_controls', 'variant1') ? 'default' : reducedSpacing,
        disabled: disabled || pluginState.disabled,
        selected: isOpen,
        "aria-label": labelTextColor,
        "aria-expanded": isOpen,
        "aria-haspopup": true,
        title: tooltipTextColor,
        onClick: this.toggleOpen,
        onKeyDown: this.onKeyDown,
        ref: this.toolbarItemRef,
        iconBefore: jsx("div", {
          css:
          // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-registration, @atlaskit/platform/ensure-feature-flag-prefix
          fg('platform-visual-refresh-icons') ?
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
          triggerWrapperStylesWithPadding :
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
          triggerWrapperStyles
        }, fg('platform-visual-refresh-icons') ? jsx(DynamicStrokeIconDecoration, {
          selectedColor: selectedColor,
          disabled: pluginState.disabled,
          icon: jsx(TextStyleIcon, {
            label: "",
            color: "currentColor",
            spacing: "spacious"
          })
        }) : jsx(SteppedRainbowIconDecoration, {
          selectedColor: selectedColor,
          disabled: pluginState.disabled,
          icon: jsx(EditorTextColorIcon, null)
        }),
        //eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        jsx("span", {
          css: expandIconContainerStyle
        }, jsx(ChevronDownIcon, {
          label: "",
          color: "currentColor",
          LEGACY_margin: "0 0 0 -8px"
        })))
      })
    }, jsx("div", {
      "data-testid": "text-color-palette"
    }, jsx(ColorPalette, {
      onClick: color => {
        var _pluginInjectionApi$a;
        return this.changeTextColor(color, pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions, pluginState.disabled);
      },
      selectedColor: pluginState.color,
      paletteOptions: {
        palette,
        hexToPaletteColor: hexToEditorTextPaletteColor,
        paletteColorTooltipMessages: textPaletteTooltipMessages
      }
    }))), !(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.primaryToolbar) && /* eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage */
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("span", {
      css: separatorStyles
    }));
  }
  getSelectedColor(pluginState) {
    const selectedColor = pluginState.color !== pluginState.defaultColor ? pluginState.color ?
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    hexToEditorTextPaletteColor(pluginState.color) : pluginState.color : null;
    return selectedColor;
  }
  buildAnalyticsPalette(action, data) {
    return {
      action,
      actionSubject: ACTION_SUBJECT.TOOLBAR,
      actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
      eventType: EVENT_TYPE.TRACK,
      attributes: {
        ...data
      }
    };
  }
  dispatchAnalyticsEvent(payload) {
    const {
      dispatchAnalyticsEvent
    } = this.props;
    if (dispatchAnalyticsEvent) {
      dispatchAnalyticsEvent(payload);
    }
  }
}
export default injectIntl(ToolbarTextColor);