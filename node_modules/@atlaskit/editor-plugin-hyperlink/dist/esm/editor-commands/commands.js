import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, buildEditLinkPayload, EVENT_TYPE, INPUT_METHOD, unlinkPayload } from '@atlaskit/editor-common/analytics';
import { addLinkMetadata, commandWithMetadata } from '@atlaskit/editor-common/card';
import { withAnalytics } from '@atlaskit/editor-common/editor-analytics';
import { isTextAtPos, LinkAction } from '@atlaskit/editor-common/link';
import { editorCommandToPMCommand } from '@atlaskit/editor-common/preset';
import { getLinkCreationAnalyticsEvent, normalizeUrl } from '@atlaskit/editor-common/utils';
import { Selection } from '@atlaskit/editor-prosemirror/state';
import { fg } from '@atlaskit/platform-feature-flags';
import { stateKey } from '../pm-plugins/main';
function setLinkHrefEditorCommand(href, pos, editorAnalyticsApi, to, isTabPressed) {
  return function (_ref) {
    var tr = _ref.tr;
    if (!isTextAtPos(pos)({
      tr: tr
    })) {
      return null;
    }
    var $pos = tr.doc.resolve(pos);
    var node = tr.doc.nodeAt(pos);
    var linkMark = tr.doc.type.schema.marks.link;
    var mark = linkMark.isInSet(node.marks);
    var url = normalizeUrl(href);
    if (mark && mark.attrs.href === url) {
      return null;
    }
    var rightBound = to && pos !== to ? to : pos - $pos.textOffset + node.nodeSize;
    tr.removeMark(pos, rightBound, linkMark);
    if (href.trim()) {
      tr.addMark(pos, rightBound, linkMark.create(_objectSpread(_objectSpread({}, mark && mark.attrs || {}), {}, {
        href: url
      })));
    } else {
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent(unlinkPayload(ACTION_SUBJECT_ID.HYPERLINK))(tr);
    }
    if (!isTabPressed) {
      tr.setMeta(stateKey, {
        type: LinkAction.HIDE_TOOLBAR
      });
    }
    return tr;
  };
}
export function setLinkHref(href, pos, editorAnalyticsApi, to, isTabPressed) {
  return editorCommandToPMCommand(setLinkHrefEditorCommand(href, pos, editorAnalyticsApi, to, isTabPressed));
}
export function updateLinkEditorCommand(href, text, pos, to) {
  return function (_ref2) {
    var tr = _ref2.tr;
    var $pos = tr.doc.resolve(pos);
    var node = tr.doc.nodeAt(pos);
    if (!node) {
      return null;
    }
    var url = normalizeUrl(href);
    var mark = tr.doc.type.schema.marks.link.isInSet(node.marks);
    var linkMark = tr.doc.type.schema.marks.link;
    var rightBound = to && pos !== to ? to : pos - $pos.textOffset + node.nodeSize;
    if (!url && text) {
      tr.removeMark(pos, rightBound, linkMark);
      tr.insertText(text, pos, rightBound);
    } else if (!url) {
      return null;
    } else {
      tr.insertText(text, pos, rightBound);
      // Casting to LinkAttributes to prevent wrong attributes been passed (Example ED-7951)
      var linkAttrs = _objectSpread(_objectSpread({}, mark && mark.attrs || {}), {}, {
        href: url
      });
      tr.addMark(pos, pos + text.length, linkMark.create(linkAttrs));
      tr.setMeta(stateKey, {
        type: LinkAction.HIDE_TOOLBAR
      });
    }
    return tr;
  };
}
export function updateLink(href, text, pos, to) {
  return editorCommandToPMCommand(updateLinkEditorCommand(href, text, pos, to));
}
export function insertLink(from, to, incomingHref, incomingTitle, displayText, source, sourceEvent) {
  var appearance = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'inline';
  var cardApiActions = arguments.length > 8 ? arguments[8] : undefined;
  return function (state, dispatch) {
    var link = state.schema.marks.link;
    var tr = state.tr;
    if (incomingHref.trim()) {
      var _stateKey$getState;
      var normalizedUrl = normalizeUrl(incomingHref);
      // NB: in this context, `currentText` represents text which has been
      // highlighted in the Editor, upon which a link is is being added.
      var currentText = (_stateKey$getState = stateKey.getState(state)) === null || _stateKey$getState === void 0 ? void 0 : _stateKey$getState.activeText;
      var markEnd = to;
      var _text = displayText || incomingTitle || incomingHref;
      if (!displayText || displayText !== currentText) {
        tr.insertText(_text, from, to);
        if (fg('platform_editor_update_insert_link_mark_end_pos')) {
          // new block created to wrap the link
          if (tr.mapping.map(from) === from + _text.length + 2) {
            // +1 is for the block's opening tag
            markEnd = from + _text.length + 1;
          } else {
            markEnd = from + _text.length;
          }
        } else {
          if (!isTextAtPos(from)(state)) {
            markEnd = from + _text.length + 1;
          } else {
            markEnd = from + _text.length;
          }
        }
      }
      tr.addMark(from, markEnd, link.create({
        href: normalizedUrl
      }));
      tr.setSelection(Selection.near(tr.doc.resolve(markEnd)));
      if (!displayText || displayText === incomingHref) {
        var queueCardsFromChangedTr = cardApiActions === null || cardApiActions === void 0 ? void 0 : cardApiActions.queueCardsFromChangedTr;
        if (queueCardsFromChangedTr) {
          queueCardsFromChangedTr === null || queueCardsFromChangedTr === void 0 || queueCardsFromChangedTr(state, tr,
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          source, ACTION.INSERTED, false, sourceEvent, appearance);
        } else {
          addLinkMetadata(state.selection, tr, {
            action: ACTION.INSERTED,
            inputMethod: source,
            sourceEvent: sourceEvent
          });
        }
      } else {
        /**
         * Add link metadata because queue cards would have otherwise handled this for us
         */
        addLinkMetadata(state.selection, tr, {
          action: ACTION.INSERTED,
          inputMethod: source,
          sourceEvent: sourceEvent
        });
      }
      tr.setMeta(stateKey, {
        type: LinkAction.HIDE_TOOLBAR
      });
      if (dispatch) {
        dispatch(tr);
      }
      return true;
    }
    tr.setMeta(stateKey, {
      type: LinkAction.HIDE_TOOLBAR
    });
    if (dispatch) {
      dispatch(tr);
    }
    return false;
  };
}
export var insertLinkWithAnalytics = function insertLinkWithAnalytics(inputMethod, from, to, href, cardActions, editorAnalyticsApi, title, displayText) {
  var cardsAvailable = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;
  var sourceEvent = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : undefined;
  var appearance = arguments.length > 10 ? arguments[10] : undefined;
  // If smart cards are available, we send analytics for hyperlinks when a smart link is rejected.
  if (cardsAvailable && !title && !displayText) {
    return insertLink(from, to, href, title, displayText, inputMethod, sourceEvent, appearance, cardActions);
  }
  return withAnalytics(editorAnalyticsApi, getLinkCreationAnalyticsEvent(inputMethod, href))(insertLink(from, to, href, title, displayText, inputMethod, sourceEvent, appearance, cardActions));
};
export function removeLink(pos, editorAnalyticsApi) {
  return commandWithMetadata(setLinkHref('', pos, editorAnalyticsApi), {
    action: ACTION.UNLINK
  });
}
export function removeLinkEditorCommand(pos, editorAnalyticsApi) {
  return function (_ref3) {
    var tr = _ref3.tr;
    setLinkHrefEditorCommand('', pos, editorAnalyticsApi)({
      tr: tr
    });
    addLinkMetadata(tr.selection, tr, {
      action: ACTION.UNLINK
    });
    return tr;
  };
}
export function editInsertedLink(editorAnalyticsApi) {
  return function (state, dispatch) {
    if (dispatch) {
      var _tr = state.tr;
      _tr.setMeta(stateKey, {
        type: LinkAction.EDIT_INSERTED_TOOLBAR,
        inputMethod: INPUT_METHOD.FLOATING_TB
      });
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent(buildEditLinkPayload(ACTION_SUBJECT_ID.HYPERLINK))(_tr);
      dispatch(_tr);
    }
    return true;
  };
}
export function showLinkToolbar(inputMethod, editorAnalyticsApi) {
  return function (_ref4) {
    var tr = _ref4.tr;
    var newTr = tr.setMeta(stateKey, {
      type: LinkAction.SHOW_INSERT_TOOLBAR,
      inputMethod: inputMethod
    });
    editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
      action: ACTION.INVOKED,
      actionSubject: ACTION_SUBJECT.TYPEAHEAD,
      actionSubjectId: ACTION_SUBJECT_ID.TYPEAHEAD_LINK,
      attributes: {
        inputMethod: inputMethod
      },
      eventType: EVENT_TYPE.UI
    })(newTr);
    return newTr;
  };
}
export function hideLinkToolbar() {
  return function (state, dispatch) {
    if (dispatch) {
      dispatch(hideLinkToolbarSetMeta(state.tr));
    }
    return true;
  };
}
export var hideLinkToolbarSetMeta = function hideLinkToolbarSetMeta(tr) {
  return tr.setMeta(stateKey, {
    type: LinkAction.HIDE_TOOLBAR
  });
};
export var onEscapeCallback = function onEscapeCallback(cardActions) {
  return function (state, dispatch) {
    var _cardActions$hideLink;
    var tr = state.tr;
    hideLinkToolbarSetMeta(tr);
    cardActions === null || cardActions === void 0 || (_cardActions$hideLink = cardActions.hideLinkToolbar) === null || _cardActions$hideLink === void 0 || _cardActions$hideLink.call(cardActions, tr);
    if (dispatch) {
      dispatch(tr);
      return true;
    }
    return false;
  };
};
export var onClickAwayCallback = function onClickAwayCallback(state, dispatch) {
  if (dispatch) {
    hideLinkToolbar()(state, dispatch);
    return true;
  }
  return false;
};