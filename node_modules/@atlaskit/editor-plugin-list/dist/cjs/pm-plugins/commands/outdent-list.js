"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outdentList = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _lists = require("@atlaskit/editor-common/lists");
var _preset = require("@atlaskit/editor-common/preset");
var _utils = require("@atlaskit/editor-common/utils");
var _history = require("@atlaskit/editor-prosemirror/history");
var _outdentListItemsSelected = require("../actions/outdent-list-items-selected");
var _analytics2 = require("../utils/analytics");
var _find = require("../utils/find");
var _selection = require("../utils/selection");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var outdentList = exports.outdentList = function outdentList(editorAnalyticsAPI) {
  return function () {
    var inputMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _analytics.INPUT_METHOD.KEYBOARD;
    return function (_ref) {
      var tr = _ref.tr;
      if (!(0, _selection.isInsideListItem)(tr)) {
        return null;
      }
      var $from = tr.selection.$from;
      var parentListNode = (0, _find.findFirstParentListNode)($from);
      if (!parentListNode) {
        // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
        return new _preset.PassiveTransaction();
      }

      // Save the history, so it could undo/revert to the same state before the outdent, see https://product-fabric.atlassian.net/browse/ED-14753
      (0, _history.closeHistory)(tr);
      var actionSubjectId = (0, _utils.isBulletList)(parentListNode.node) ? _analytics.ACTION_SUBJECT_ID.FORMAT_LIST_BULLET : _analytics.ACTION_SUBJECT_ID.FORMAT_LIST_NUMBER;
      var customTr = tr;
      (0, _outdentListItemsSelected.outdentListItemsSelected)(customTr);
      if (!customTr || !customTr.docChanged) {
        // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
        // If inside table cell and can't outdent list, then let it handle by table keymap
        return !(0, _selection.isInsideTableCell)(customTr) ? new _preset.PassiveTransaction() : null;
      }
      var restartListsAttributes = {};
      var _getRestartListsAttri = (0, _analytics2.getRestartListsAttributes)(customTr),
        outdentScenario = _getRestartListsAttri.outdentScenario,
        splitListStartNumber = _getRestartListsAttri.splitListStartNumber;
      if (outdentScenario === _analytics.OUTDENT_SCENARIOS.SPLIT_LIST) {
        restartListsAttributes.outdentScenario = outdentScenario;
        restartListsAttributes.splitListStartNumber = splitListStartNumber;
      }
      editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
        action: _analytics.ACTION.OUTDENTED,
        actionSubject: _analytics.ACTION_SUBJECT.LIST,
        actionSubjectId: actionSubjectId,
        eventType: _analytics.EVENT_TYPE.TRACK,
        attributes: _objectSpread(_objectSpread(_objectSpread({}, (0, _lists.getCommonListAnalyticsAttributes)(customTr)), restartListsAttributes), {}, {
          inputMethod: inputMethod
        })
      })(customTr);
      return customTr;
    };
  };
};