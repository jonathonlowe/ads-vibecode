import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { bulletList, listItem, orderedListWithOrder, listItemWithoutNonBodiedMacros } from '@atlaskit/adf-schema';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { toggleBulletList, toggleOrderedList, tooltip } from '@atlaskit/editor-common/keymaps';
import { listMessages as messages } from '@atlaskit/editor-common/messages';
import { IconList, IconListNumber } from '@atlaskit/editor-common/quick-insert';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { toggleBulletList as toggleBulletListCommand, toggleOrderedList as toggleOrderedListCommand } from './pm-plugins/commands';
import { indentList } from './pm-plugins/commands/indent-list';
import { outdentList as _outdentList } from './pm-plugins/commands/outdent-list';
import inputRulePlugin from './pm-plugins/input-rules';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import keymapPlugin from './pm-plugins/keymap';
import { createPlugin, pluginKey as listPluginKey } from './pm-plugins/main';
import { findRootParentListNode } from './pm-plugins/utils/find';
import { isInsideListItem } from './pm-plugins/utils/selection';

/*
  Toolbar buttons to bullet and ordered list can be found in
  packages/editor/editor-core/src/plugins/toolbar-lists-indentation/ui/Toolbar.tsx
 */

/**
 * List plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
export var listPlugin = function listPlugin(_ref) {
  var _api$featureFlags, _api$analytics;
  var options = _ref.config,
    api = _ref.api;
  var featureFlags = (api === null || api === void 0 || (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState()) || {};
  var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  return {
    name: 'list',
    actions: {
      isInsideListItem: isInsideListItem,
      findRootParentListNode: findRootParentListNode
    },
    commands: {
      indentList: indentList(editorAnalyticsAPI),
      outdentList: function outdentList(inputMethod) {
        return _outdentList(editorAnalyticsAPI)(inputMethod);
      },
      toggleOrderedList: toggleOrderedListCommand(editorAnalyticsAPI),
      toggleBulletList: toggleBulletListCommand(editorAnalyticsAPI)
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return undefined;
      }
      return listPluginKey.getState(editorState);
    },
    nodes: function nodes() {
      var listItemNode = editorExperiment('platform_editor_nested_non_bodied_macros', 'test') ? listItem : listItemWithoutNonBodiedMacros;
      return [{
        name: 'bulletList',
        node: bulletList
      }, {
        name: 'orderedList',
        node: orderedListWithOrder
      }, {
        name: 'listItem',
        node: listItemNode
      }];
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'list',
        plugin: function plugin(_ref2) {
          var dispatch = _ref2.dispatch;
          return createPlugin(dispatch, featureFlags);
        }
      }, {
        name: 'listInputRule',
        plugin: function plugin(_ref3) {
          var _api$analytics2;
          var schema = _ref3.schema,
            featureFlags = _ref3.featureFlags;
          return inputRulePlugin(schema, api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions);
        }
      }, {
        name: 'listKeymap',
        plugin: function plugin() {
          var _api$analytics3;
          return keymapPlugin(featureFlags, api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions);
        }
      }];
    },
    pluginsOptions: _objectSpread({}, editorExperiment('platform_editor_insertion', 'control') && {
      quickInsert: function quickInsert(_ref4) {
        var formatMessage = _ref4.formatMessage;
        return [{
          id: 'unorderedList',
          title: formatMessage(messages.unorderedList),
          description: formatMessage(messages.unorderedListDescription),
          keywords: ['ul', 'unordered'],
          priority: 1100,
          keyshortcut: tooltip(toggleBulletList),
          icon: function icon() {
            return /*#__PURE__*/React.createElement(IconList, null);
          },
          action: function action(insert, state) {
            var tr = insert(state.schema.nodes.bulletList.createChecked({}, state.schema.nodes.listItem.createChecked({}, state.schema.nodes.paragraph.createChecked())));
            editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
              action: ACTION.INSERTED,
              actionSubject: ACTION_SUBJECT.LIST,
              actionSubjectId: ACTION_SUBJECT_ID.FORMAT_LIST_BULLET,
              eventType: EVENT_TYPE.TRACK,
              attributes: {
                inputMethod: INPUT_METHOD.QUICK_INSERT
              }
            })(tr);
            return tr;
          }
        }, {
          id: 'orderedList',
          title: formatMessage(messages.orderedList),
          description: formatMessage(messages.orderedListDescription),
          keywords: ['ol', 'ordered'],
          priority: 1200,
          keyshortcut: tooltip(toggleOrderedList),
          icon: function icon() {
            return /*#__PURE__*/React.createElement(IconListNumber, null);
          },
          action: function action(insert, state) {
            var tr = insert(state.schema.nodes.orderedList.createChecked({}, state.schema.nodes.listItem.createChecked({}, state.schema.nodes.paragraph.createChecked())));
            editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
              action: ACTION.INSERTED,
              actionSubject: ACTION_SUBJECT.LIST,
              actionSubjectId: ACTION_SUBJECT_ID.FORMAT_LIST_NUMBER,
              eventType: EVENT_TYPE.TRACK,
              attributes: {
                inputMethod: INPUT_METHOD.QUICK_INSERT
              }
            })(tr);
            return tr;
          }
        }];
      }
    })
  };
};