export var sanitiseMarksInSelection = function sanitiseMarksInSelection(tr, newParentType) {
  var _tr$selection = tr.selection,
    from = _tr$selection.from,
    to = _tr$selection.to;
  var nodesSanitized = [];
  tr.doc.nodesBetween(from, to, function (node, pos, parent) {
    if (node.isText) {
      return false;
    }
    // Skip expands and layouts if they are outside selection
    // but continue to iterate over their children.
    if (['expand', 'layoutSection'].includes(node.type.name) && (pos < from || pos > to)) {
      return true;
    }
    node.marks.forEach(function (mark) {
      if (!(parent !== null && parent !== void 0 && parent.type.allowsMarkType(mark.type)) || newParentType && !newParentType.allowsMarkType(mark.type)) {
        var filteredMarks = node.marks.filter(function (m) {
          return m.type !== mark.type;
        });
        var position = pos > 0 ? pos : 0;
        var marksRemoved = node.marks.filter(function (m) {
          return m.type === mark.type;
        });
        nodesSanitized.push({
          node: node,
          marksRemoved: marksRemoved
        });
        tr.setNodeMarkup(position, undefined, node.attrs, filteredMarks);
      }
    });
  });
  return nodesSanitized;
};