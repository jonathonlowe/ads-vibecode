import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { getCommonListAnalyticsAttributes, getListItemAttributes, hasValidListIndentationLevel } from '@atlaskit/editor-common/lists';
import { PassiveTransaction } from '@atlaskit/editor-common/preset';
import { isBulletList } from '@atlaskit/editor-common/utils';
import { closeHistory } from '@atlaskit/editor-prosemirror/history';
import { MAX_NESTED_LIST_INDENTATION } from '../../types';
import { indentListItemsSelected as indentListAction } from '../actions/indent-list-items-selected';
import { findFirstParentListNode } from '../utils/find';
import { isInsideListItem, isInsideTableCell } from '../utils/selection';
export var indentList = function indentList(editorAnalyticsAPI) {
  return function () {
    var inputMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INPUT_METHOD.KEYBOARD;
    return function (_ref) {
      var tr = _ref.tr;
      var $from = tr.selection.$from;

      // don't indent if selection is not inside a list
      if (!isInsideListItem(tr)) {
        return null;
      }

      // Save the history, so it could undo/revert to the same state before the indent, see https://product-fabric.atlassian.net/browse/ED-14753
      closeHistory(tr);
      var firstListItemSelectedAttributes = getListItemAttributes($from);
      var parentListNode = findFirstParentListNode($from);
      if (!parentListNode || firstListItemSelectedAttributes && firstListItemSelectedAttributes.indentLevel === 0 && firstListItemSelectedAttributes.itemIndex === 0) {
        if (isInsideTableCell(tr)) {
          // dont consume tab, as table-keymap should move cursor to next cell
          return null;
        } else {
          // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
          return new PassiveTransaction();
        }
      }
      var currentListNode = parentListNode.node;
      var actionSubjectId = isBulletList(currentListNode) ? ACTION_SUBJECT_ID.FORMAT_LIST_BULLET : ACTION_SUBJECT_ID.FORMAT_LIST_NUMBER;
      indentListAction(tr);
      var maximimunNestedLevelReached = !hasValidListIndentationLevel({
        tr: tr,
        maxIndentation: MAX_NESTED_LIST_INDENTATION
      });
      if (maximimunNestedLevelReached || !tr.docChanged) {
        // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
        return new PassiveTransaction();
      }
      editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
        action: ACTION.INDENTED,
        actionSubject: ACTION_SUBJECT.LIST,
        actionSubjectId: actionSubjectId,
        eventType: EVENT_TYPE.TRACK,
        attributes: _objectSpread(_objectSpread({}, getCommonListAnalyticsAttributes(tr)), {}, {
          inputMethod: inputMethod
        })
      })(tr);
      return tr;
    };
  };
};