import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD, OUTDENT_SCENARIOS } from '@atlaskit/editor-common/analytics';
import { getCommonListAnalyticsAttributes } from '@atlaskit/editor-common/lists';
import { PassiveTransaction } from '@atlaskit/editor-common/preset';
import { isBulletList } from '@atlaskit/editor-common/utils';
import { closeHistory } from '@atlaskit/editor-prosemirror/history';
import { outdentListItemsSelected as outdentListAction } from '../actions/outdent-list-items-selected';
import { getRestartListsAttributes } from '../utils/analytics';
import { findFirstParentListNode } from '../utils/find';
import { isInsideListItem, isInsideTableCell } from '../utils/selection';
export var outdentList = function outdentList(editorAnalyticsAPI) {
  return function () {
    var inputMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INPUT_METHOD.KEYBOARD;
    return function (_ref) {
      var tr = _ref.tr;
      if (!isInsideListItem(tr)) {
        return null;
      }
      var $from = tr.selection.$from;
      var parentListNode = findFirstParentListNode($from);
      if (!parentListNode) {
        // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
        return new PassiveTransaction();
      }

      // Save the history, so it could undo/revert to the same state before the outdent, see https://product-fabric.atlassian.net/browse/ED-14753
      closeHistory(tr);
      var actionSubjectId = isBulletList(parentListNode.node) ? ACTION_SUBJECT_ID.FORMAT_LIST_BULLET : ACTION_SUBJECT_ID.FORMAT_LIST_NUMBER;
      var customTr = tr;
      outdentListAction(customTr);
      if (!customTr || !customTr.docChanged) {
        // Even though this is a non-operation, we don't want to send this event to the browser. Because if we return false, the browser will move the focus to another place
        // If inside table cell and can't outdent list, then let it handle by table keymap
        return !isInsideTableCell(customTr) ? new PassiveTransaction() : null;
      }
      var restartListsAttributes = {};
      var _getRestartListsAttri = getRestartListsAttributes(customTr),
        outdentScenario = _getRestartListsAttri.outdentScenario,
        splitListStartNumber = _getRestartListsAttri.splitListStartNumber;
      if (outdentScenario === OUTDENT_SCENARIOS.SPLIT_LIST) {
        restartListsAttributes.outdentScenario = outdentScenario;
        restartListsAttributes.splitListStartNumber = splitListStartNumber;
      }
      editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
        action: ACTION.OUTDENTED,
        actionSubject: ACTION_SUBJECT.LIST,
        actionSubjectId: actionSubjectId,
        eventType: EVENT_TYPE.TRACK,
        attributes: _objectSpread(_objectSpread(_objectSpread({}, getCommonListAnalyticsAttributes(customTr)), restartListsAttributes), {}, {
          inputMethod: inputMethod
        })
      })(customTr);
      return customTr;
    };
  };
};