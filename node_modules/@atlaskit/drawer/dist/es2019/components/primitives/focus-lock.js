import React, { useEffect } from 'react';
import ReactFocusLock from 'react-focus-lock';
import ScrollLock from 'react-scrolllock';
import invariant from 'tiny-invariant';
/**
 * __Focus lock__
 *
 * Thin wrapper over react-focus-lock. This wrapper only exists to ensure API compatibility.
 * This component should be deleted during https://ecosystem.atlassian.net/browse/AK-5658
 */
const FocusLock = ({
  isFocusLockEnabled = true,
  autoFocusFirstElem = true,
  shouldReturnFocus = true,
  children
}) => {
  useEffect(() => {
    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && !process.env.CI) {
      invariant(typeof autoFocusFirstElem === 'boolean', '@atlaskit/drawer: Passing a function as autoFocus is deprecated. Instead call focus on the element ref or use the autofocus property.');
    }
    if (typeof autoFocusFirstElem === 'function' && isFocusLockEnabled) {
      const elem = autoFocusFirstElem();
      if (elem && elem.focus) {
        elem.focus();
      }
    }
  }, [autoFocusFirstElem, isFocusLockEnabled]);
  const getFocusTarget = () => {
    if (typeof shouldReturnFocus === 'boolean') {
      return shouldReturnFocus;
    }
    return false;
  };
  const onDeactivation = () => {
    if (typeof shouldReturnFocus !== 'boolean') {
      window.setTimeout(() => {
        var _shouldReturnFocus$cu;
        shouldReturnFocus === null || shouldReturnFocus === void 0 ? void 0 : (_shouldReturnFocus$cu = shouldReturnFocus.current) === null || _shouldReturnFocus$cu === void 0 ? void 0 : _shouldReturnFocus$cu.focus();
      }, 0);
    }
  };
  return /*#__PURE__*/React.createElement(ReactFocusLock, {
    disabled: !isFocusLockEnabled,
    autoFocus: !!autoFocusFirstElem,
    returnFocus: getFocusTarget(),
    onDeactivation: onDeactivation
  }, /*#__PURE__*/React.createElement(ScrollLock, null, children));
};
export default FocusLock;