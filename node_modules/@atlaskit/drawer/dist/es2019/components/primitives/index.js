import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { useCallback, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { IconButton } from '@atlaskit/button/new';
import ArrowLeft from '@atlaskit/icon/core/migration/arrow-left';
import { ExitingPersistence, SlideIn } from '@atlaskit/motion';
import { createExtender } from '../utils';
import ContentOverrides from './content';
import DrawerWrapper from './drawer-wrapper';
import FocusLock from './focus-lock';
import SidebarOverrides from './sidebar';

// Misc.
// ------------------------------

const defaults = {
  Sidebar: SidebarOverrides,
  Content: ContentOverrides
};

/**
 * This wrapper is used to specify separate durations for enter and exit.
 */
const CustomSlideIn = ({
  children,
  onFinish,
  enterFrom
}) => {
  return jsx(SlideIn, {
    animationTimingFunction: "ease-out",
    duration: "small",
    enterFrom: enterFrom,
    exitTo: enterFrom,
    fade: "none",
    onFinish: onFinish
  }, children);
};
const DrawerPrimitive = ({
  children,
  icon: Icon,
  closeLabel = 'Close drawer',
  scrollContentLabel,
  onClose,
  onCloseComplete,
  onOpenComplete,
  overrides,
  testId,
  in: isOpen,
  shouldReturnFocus,
  autoFocusFirstElem,
  isFocusLockEnabled,
  width,
  label,
  titleId,
  enterFrom = 'left'
}) => {
  const getOverrides = createExtender(defaults, overrides);
  const {
    component: Sidebar,
    ...sideBarOverrides
  } = getOverrides('Sidebar');
  const {
    component: Content,
    ...contentOverrides
  } = getOverrides('Content');

  /**
   * A ref to point to our wrapper, passed to `onCloseComplete` and `onOpenComplete` callbacks.
   */
  const drawerRef = useRef(null);
  const onFinish = useCallback(state => {
    if (state === 'entering') {
      onOpenComplete === null || onOpenComplete === void 0 ? void 0 : onOpenComplete(drawerRef.current);
    } else if (state === 'exiting') {
      onCloseComplete === null || onCloseComplete === void 0 ? void 0 : onCloseComplete(drawerRef.current);
    }
  }, [onCloseComplete, onOpenComplete]);
  return jsx(ExitingPersistence, {
    appear: true
  }, isOpen && jsx(CustomSlideIn, {
    onFinish: onFinish,
    enterFrom: enterFrom
  }, ({
    className
  }) => jsx(FocusLock, {
    autoFocusFirstElem: autoFocusFirstElem,
    isFocusLockEnabled: isFocusLockEnabled,
    shouldReturnFocus: shouldReturnFocus
  }, jsx(DrawerWrapper
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: className,
    width: width,
    testId: testId,
    drawerRef: drawerRef,
    label: label,
    titleId: titleId
  }, jsx(Sidebar, sideBarOverrides, jsx(IconButton, {
    onClick: onClose,
    testId: testId && 'DrawerPrimitiveSidebarCloseButton',
    icon: Icon ? iconProps => jsx(Icon, _extends({}, iconProps, {
      size: "large",
      LEGACY_size: "large"
    })) : ArrowLeft,
    label: closeLabel,
    shape: "circle",
    appearance: "subtle"
  })), jsx(Content, _extends({
    scrollContentLabel: scrollContentLabel
  }, contentOverrides), children)))));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default DrawerPrimitive;