"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _new = require("@atlaskit/button/new");
var _arrowLeft = _interopRequireDefault(require("@atlaskit/icon/core/migration/arrow-left"));
var _motion = require("@atlaskit/motion");
var _utils = require("../utils");
var _content = _interopRequireDefault(require("./content"));
var _drawerWrapper = _interopRequireDefault(require("./drawer-wrapper"));
var _focusLock = _interopRequireDefault(require("./focus-lock"));
var _sidebar = _interopRequireDefault(require("./sidebar"));
var _excluded = ["component"],
  _excluded2 = ["component"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
// Misc.
// ------------------------------

var defaults = {
  Sidebar: _sidebar.default,
  Content: _content.default
};

/**
 * This wrapper is used to specify separate durations for enter and exit.
 */
var CustomSlideIn = function CustomSlideIn(_ref) {
  var children = _ref.children,
    onFinish = _ref.onFinish,
    enterFrom = _ref.enterFrom;
  return (0, _react2.jsx)(_motion.SlideIn, {
    animationTimingFunction: "ease-out",
    duration: "small",
    enterFrom: enterFrom,
    exitTo: enterFrom,
    fade: "none",
    onFinish: onFinish
  }, children);
};
var DrawerPrimitive = function DrawerPrimitive(_ref2) {
  var children = _ref2.children,
    Icon = _ref2.icon,
    _ref2$closeLabel = _ref2.closeLabel,
    closeLabel = _ref2$closeLabel === void 0 ? 'Close drawer' : _ref2$closeLabel,
    scrollContentLabel = _ref2.scrollContentLabel,
    onClose = _ref2.onClose,
    onCloseComplete = _ref2.onCloseComplete,
    onOpenComplete = _ref2.onOpenComplete,
    overrides = _ref2.overrides,
    testId = _ref2.testId,
    isOpen = _ref2.in,
    shouldReturnFocus = _ref2.shouldReturnFocus,
    autoFocusFirstElem = _ref2.autoFocusFirstElem,
    isFocusLockEnabled = _ref2.isFocusLockEnabled,
    width = _ref2.width,
    label = _ref2.label,
    titleId = _ref2.titleId,
    _ref2$enterFrom = _ref2.enterFrom,
    enterFrom = _ref2$enterFrom === void 0 ? 'left' : _ref2$enterFrom;
  var getOverrides = (0, _utils.createExtender)(defaults, overrides);
  var _getOverrides = getOverrides('Sidebar'),
    Sidebar = _getOverrides.component,
    sideBarOverrides = (0, _objectWithoutProperties2.default)(_getOverrides, _excluded);
  var _getOverrides2 = getOverrides('Content'),
    Content = _getOverrides2.component,
    contentOverrides = (0, _objectWithoutProperties2.default)(_getOverrides2, _excluded2);

  /**
   * A ref to point to our wrapper, passed to `onCloseComplete` and `onOpenComplete` callbacks.
   */
  var drawerRef = (0, _react.useRef)(null);
  var onFinish = (0, _react.useCallback)(function (state) {
    if (state === 'entering') {
      onOpenComplete === null || onOpenComplete === void 0 || onOpenComplete(drawerRef.current);
    } else if (state === 'exiting') {
      onCloseComplete === null || onCloseComplete === void 0 || onCloseComplete(drawerRef.current);
    }
  }, [onCloseComplete, onOpenComplete]);
  return (0, _react2.jsx)(_motion.ExitingPersistence, {
    appear: true
  }, isOpen && (0, _react2.jsx)(CustomSlideIn, {
    onFinish: onFinish,
    enterFrom: enterFrom
  }, function (_ref3) {
    var className = _ref3.className;
    return (0, _react2.jsx)(_focusLock.default, {
      autoFocusFirstElem: autoFocusFirstElem,
      isFocusLockEnabled: isFocusLockEnabled,
      shouldReturnFocus: shouldReturnFocus
    }, (0, _react2.jsx)(_drawerWrapper.default
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      width: width,
      testId: testId,
      drawerRef: drawerRef,
      label: label,
      titleId: titleId
    }, (0, _react2.jsx)(Sidebar, sideBarOverrides, (0, _react2.jsx)(_new.IconButton, {
      onClick: onClose,
      testId: testId && 'DrawerPrimitiveSidebarCloseButton',
      icon: Icon ? function (iconProps) {
        return (0, _react2.jsx)(Icon, (0, _extends2.default)({}, iconProps, {
          size: "large",
          LEGACY_size: "large"
        }));
      } : _arrowLeft.default,
      label: closeLabel,
      shape: "circle",
      appearance: "subtle"
    })), (0, _react2.jsx)(Content, (0, _extends2.default)({
      scrollContentLabel: scrollContentLabel
    }, contentOverrides), children)));
  }));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = DrawerPrimitive;