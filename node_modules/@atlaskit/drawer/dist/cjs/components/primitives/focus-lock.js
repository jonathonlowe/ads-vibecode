"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));
var _reactScrolllock = _interopRequireDefault(require("react-scrolllock"));
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * __Focus lock__
 *
 * Thin wrapper over react-focus-lock. This wrapper only exists to ensure API compatibility.
 * This component should be deleted during https://ecosystem.atlassian.net/browse/AK-5658
 */
var FocusLock = function FocusLock(_ref) {
  var _ref$isFocusLockEnabl = _ref.isFocusLockEnabled,
    isFocusLockEnabled = _ref$isFocusLockEnabl === void 0 ? true : _ref$isFocusLockEnabl,
    _ref$autoFocusFirstEl = _ref.autoFocusFirstElem,
    autoFocusFirstElem = _ref$autoFocusFirstEl === void 0 ? true : _ref$autoFocusFirstEl,
    _ref$shouldReturnFocu = _ref.shouldReturnFocus,
    shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu,
    children = _ref.children;
  (0, _react.useEffect)(function () {
    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && !process.env.CI) {
      (0, _tinyInvariant.default)(typeof autoFocusFirstElem === 'boolean', '@atlaskit/drawer: Passing a function as autoFocus is deprecated. Instead call focus on the element ref or use the autofocus property.');
    }
    if (typeof autoFocusFirstElem === 'function' && isFocusLockEnabled) {
      var elem = autoFocusFirstElem();
      if (elem && elem.focus) {
        elem.focus();
      }
    }
  }, [autoFocusFirstElem, isFocusLockEnabled]);
  var getFocusTarget = function getFocusTarget() {
    if (typeof shouldReturnFocus === 'boolean') {
      return shouldReturnFocus;
    }
    return false;
  };
  var onDeactivation = function onDeactivation() {
    if (typeof shouldReturnFocus !== 'boolean') {
      window.setTimeout(function () {
        var _shouldReturnFocus$cu;
        shouldReturnFocus === null || shouldReturnFocus === void 0 || (_shouldReturnFocus$cu = shouldReturnFocus.current) === null || _shouldReturnFocus$cu === void 0 || _shouldReturnFocus$cu.focus();
      }, 0);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
    disabled: !isFocusLockEnabled,
    autoFocus: !!autoFocusFirstElem,
    returnFocus: getFocusTarget(),
    onDeactivation: onDeactivation
  }, /*#__PURE__*/_react.default.createElement(_reactScrolllock.default, null, children));
};
var _default = exports.default = FocusLock;