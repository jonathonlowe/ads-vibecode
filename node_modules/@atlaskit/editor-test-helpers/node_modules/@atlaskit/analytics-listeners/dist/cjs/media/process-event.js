"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var analytics_gas_types_1 = require("@atlaskit/analytics-gas-types");
var extract_data_from_event_1 = require("../atlaskit/extract-data-from-event");
var lodash_merge_1 = tslib_1.__importDefault(require("lodash.merge"));
var lodash_last_1 = tslib_1.__importDefault(require("lodash.last"));
var version_json_1 = require("../version.json");
var MEDIA_CONTEXT = 'mediaCtx';
function getMediaContexts(event) {
    return extract_data_from_event_1.extractFromEventContext(MEDIA_CONTEXT, event);
}
function getMediaRegion() {
    return (window &&
        window.sessionStorage &&
        window.sessionStorage.getItem('media-api-region'));
}
function processEvent(event) {
    var sources = extract_data_from_event_1.getSources(event);
    var _a = lodash_last_1.default(extract_data_from_event_1.getPackageInfo(event)) || {}, packageName = _a.packageName, packageVersion = _a.packageVersion;
    var extraAttributes = extract_data_from_event_1.getExtraAttributes(event);
    var mediaContexts = getMediaContexts(event) || [];
    var mediaAttributes = lodash_merge_1.default.apply(void 0, tslib_1.__spread([{}], mediaContexts));
    var tags = new Set(event.payload.tags || []);
    tags.add('media');
    var components = extract_data_from_event_1.getComponents(event);
    var mediaRegion = getMediaRegion();
    var payload = {
        source: lodash_last_1.default(sources) || analytics_gas_types_1.DEFAULT_SOURCE,
        actionSubject: event.payload.actionSubject,
        action: event.payload.action,
        eventType: event.payload.eventType,
        actionSubjectId: event.payload.actionSubjectId,
        tags: Array.from(tags),
        attributes: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, lodash_merge_1.default({}, extraAttributes, mediaAttributes, event.payload.attributes)), { componentHierarchy: components.join('.') || undefined, packageName: packageName,
            packageVersion: packageVersion, packageHierarchy: extract_data_from_event_1.getPackageHierarchy(event), sourceHierarchy: sources.join('.') || undefined, listenerVersion: version_json_1.version }), (mediaRegion ? { mediaRegion: mediaRegion } : undefined)),
    };
    return payload;
}
exports.processEvent = processEvent;
//# sourceMappingURL=process-event.js.map