"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var analytics_next_1 = require("@atlaskit/analytics-next");
var types_1 = require("../types");
var handle_event_1 = require("./handle-event");
/**
 * The TWP Fabric Editor is registered as a Platform Team.
 *
 * When the editor is consumed by products (e.g. Confluence, Jira, etc) it retains
 * their `product` name, and augments 'editor' as a `tag`.
 *
 * This configuration allows us to register events in Data Portal in a product agnostic way,
 * (avoiding duplicated events per product) and receive and filter events per product within Amplitude.
 *
 * @see https://data-portal.us-east-1.prod.public.atl-paas.net/
 * @see https://bitbucket.org/atlassian/events-catalog-service/src/master/src/main/java/com/atlassian/dataservices/eventcatalog/product/ProductService.java
 */
exports.EDITOR_TAG = 'editor';
// @deprecated ED-9043 Can be safely removed once all editor products consume a release that uses the new tag.
exports.LEGACY_EDITOR_TAG = 'fabricEditor';
var FabricEditorListener = /** @class */ (function (_super) {
    tslib_1.__extends(FabricEditorListener, _super);
    function FabricEditorListener() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleEventWrapper = function (event) {
            handle_event_1.handleEvent(event, [exports.EDITOR_TAG, exports.LEGACY_EDITOR_TAG], _this.props.logger, _this.props.client);
        };
        return _this;
    }
    FabricEditorListener.prototype.render = function () {
        return (react_1.default.createElement(analytics_next_1.AnalyticsListener, { onEvent: this.handleEventWrapper, channel: types_1.FabricChannel.editor }, this.props.children));
    };
    return FabricEditorListener;
}(react_1.default.Component));
exports.default = FabricEditorListener;
//# sourceMappingURL=FabricEditorListener.js.map