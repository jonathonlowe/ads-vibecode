/**
 * Largely taken from analytics-web-react
 */
import merge from 'lodash.merge';
const extractFromEventContext = (propertyNames, event, namespacedContextOnly = true, contextName) => event.context.reduce((acc, contextItem) => {
    propertyNames.forEach(propertyName => {
        const navContext = contextItem[contextName];
        const navContextProp = navContext ? navContext[propertyName] : null;
        const value = namespacedContextOnly
            ? navContextProp
            : navContextProp || contextItem[propertyName];
        if (value) {
            acc.push(value);
        }
    });
    return acc;
}, []);
export const getSources = (event, contextName) => extractFromEventContext(['source'], event, false, contextName);
export const getComponents = (event, contextName) => extractFromEventContext(['component', 'componentName'], event, false, contextName);
export const getExtraAttributes = (event, contextName) => extractFromEventContext(['attributes'], event, true, contextName).reduce((result, extraAttributes) => merge(result, extraAttributes), {});
export const getPackageInfo = (event, contextName) => event.context
    .map(contextItem => {
    const navContext = contextItem[contextName];
    const item = navContext ? navContext : contextItem;
    return {
        packageName: item.packageName,
        packageVersion: item.packageVersion,
    };
})
    .filter(p => p.packageName);
export const getPackageVersion = (event, contextName) => extractFromEventContext(['packageVersion'], event, true, contextName);
//# sourceMappingURL=extract-data-from-event.js.map