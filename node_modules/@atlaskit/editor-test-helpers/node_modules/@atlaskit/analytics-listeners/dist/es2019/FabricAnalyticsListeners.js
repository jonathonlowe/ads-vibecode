import React from 'react';
import { FabricChannel } from './types';
import FabricElementsListener from './fabric/FabricElementsListener';
import AtlaskitListener from './atlaskit/AtlaskitListener';
import Logger from './helpers/logger';
import NavigationListener from './navigation/NavigationListener';
import FabricEditorListener from './fabric/FabricEditorListener';
import MediaAnalyticsListener from './media/MediaAnalyticsListener';
import PeopleTeamsAnalyticsListener from './peopleTeams/PeopleTeamsAnalyticsListener';
const listenerMap = {
    [FabricChannel.elements]: FabricElementsListener,
    [FabricChannel.editor]: FabricEditorListener,
    [FabricChannel.atlaskit]: AtlaskitListener,
    [FabricChannel.navigation]: NavigationListener,
    [FabricChannel.media]: MediaAnalyticsListener,
    [FabricChannel.peopleTeams]: PeopleTeamsAnalyticsListener,
};
class FabricAnalyticsListeners extends React.Component {
    constructor(props) {
        super(props);
        this.logger = new Logger({ logLevel: props.logLevel });
    }
    render() {
        const { client, children, logLevel, excludedChannels } = this.props;
        if (typeof logLevel === 'number') {
            this.logger.setLogLevel(logLevel);
        }
        const listeners = Object.keys(listenerMap)
            .filter(channel => !excludedChannels || excludedChannels.indexOf(channel) < 0)
            .map(channel => listenerMap[channel])
            .reduce((prev, Listener) => (React.createElement(Listener, { client: client, logger: this.logger }, prev)), children);
        return listeners;
    }
}
export default FabricAnalyticsListeners;
//# sourceMappingURL=FabricAnalyticsListeners.js.map