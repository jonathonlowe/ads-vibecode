import { DEFAULT_SOURCE, } from '@atlaskit/analytics-gas-types';
import { ELEMENTS_CONTEXT, EDITOR_CONTEXT, } from '@atlaskit/analytics-namespaced-context';
import merge from 'lodash.merge';
import { ELEMENTS_TAG } from './FabricElementsListener';
import { EDITOR_TAG } from './FabricEditorListener';
const extractFieldsFromContext = (fieldsToPick) => (contexts) => contexts
    .map(ctx => fieldsToPick.reduce((result, key) => ctx[key] ? merge(result, { [key]: ctx[key] }) : result, {}))
    .reduce((result, item) => merge(result, item), {});
const fieldExtractor = (contextKey) => extractFieldsFromContext([
    'source',
    'objectType',
    'objectId',
    'containerType',
    'containerId',
    contextKey,
]);
const getContextKey = (tag) => {
    switch (tag) {
        case ELEMENTS_TAG:
            return ELEMENTS_CONTEXT;
        case EDITOR_TAG:
            return EDITOR_CONTEXT;
        default:
            return '';
    }
};
const updatePayloadWithContext = (primaryTag, event) => {
    if (event.context.length === 0) {
        return { source: DEFAULT_SOURCE, ...event.payload };
    }
    const contextKey = getContextKey(primaryTag) || 'attributes';
    const { [contextKey]: attributes, ...fields } = fieldExtractor(contextKey)(event.context);
    if (attributes) {
        event.payload.attributes = merge(attributes, event.payload.attributes || {});
    }
    return { source: DEFAULT_SOURCE, ...fields, ...event.payload };
};
const addTags = (tags, originalTags = []) => {
    const mergedTags = new Set([...originalTags, ...tags]);
    return Array.from(mergedTags);
};
/**
 * The primary tag is used for matching the analytics event payload
 * with its context.
 */
function getPrimaryTag(tags) {
    if (typeof tags === 'string') {
        return tags;
    }
    if (!tags.length) {
        throw new Error('Empty tags string array. Unable to match analytics event payload with context');
    }
    return tags[0];
}
export const processEventPayload = (event, tags) => {
    const primaryTag = getPrimaryTag(tags);
    const tagsArray = typeof tags === 'string' ? [tags] : tags;
    return {
        ...updatePayloadWithContext(primaryTag, event),
        tags: addTags(tagsArray, event.payload.tags),
    };
};
//# sourceMappingURL=process-event-payload.js.map