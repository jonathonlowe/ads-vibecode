import { __assign, __read, __spread } from "tslib";
import { DEFAULT_SOURCE } from '@atlaskit/analytics-gas-types';
import { getPackageHierarchy, getSources, getPackageInfo, getComponents, extractFromEventContext, getExtraAttributes, } from '../atlaskit/extract-data-from-event';
import merge from 'lodash.merge';
import last from 'lodash.last';
import { version as listenerVersion } from '../version.json';
var MEDIA_CONTEXT = 'mediaCtx';
function getMediaContexts(event) {
    return extractFromEventContext(MEDIA_CONTEXT, event);
}
function getMediaRegion() {
    return (window &&
        window.sessionStorage &&
        window.sessionStorage.getItem('media-api-region'));
}
export function processEvent(event) {
    var sources = getSources(event);
    var _a = last(getPackageInfo(event)) || {}, packageName = _a.packageName, packageVersion = _a.packageVersion;
    var extraAttributes = getExtraAttributes(event);
    var mediaContexts = getMediaContexts(event) || [];
    var mediaAttributes = merge.apply(void 0, __spread([{}], mediaContexts));
    var tags = new Set(event.payload.tags || []);
    tags.add('media');
    var components = getComponents(event);
    var mediaRegion = getMediaRegion();
    var payload = {
        source: last(sources) || DEFAULT_SOURCE,
        actionSubject: event.payload.actionSubject,
        action: event.payload.action,
        eventType: event.payload.eventType,
        actionSubjectId: event.payload.actionSubjectId,
        tags: Array.from(tags),
        attributes: __assign(__assign(__assign({}, merge({}, extraAttributes, mediaAttributes, event.payload.attributes)), { componentHierarchy: components.join('.') || undefined, packageName: packageName,
            packageVersion: packageVersion, packageHierarchy: getPackageHierarchy(event), sourceHierarchy: sources.join('.') || undefined, listenerVersion: listenerVersion }), (mediaRegion ? { mediaRegion: mediaRegion } : undefined)),
    };
    return payload;
}
//# sourceMappingURL=process-event.js.map