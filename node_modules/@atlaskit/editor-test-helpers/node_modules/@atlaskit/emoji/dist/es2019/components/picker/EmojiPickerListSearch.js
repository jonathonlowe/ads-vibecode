import AkFieldBase from '@atlaskit/field-base';
import SearchIcon from '@atlaskit/icon/glyph/search';
import React from 'react';
import { PureComponent } from 'react';
import { FormattedMessage } from 'react-intl';
import { messages } from '../i18n';
import * as styles from './styles';
export default class EmojiPickerListSearch extends PureComponent {
    constructor() {
        super(...arguments);
        this.onBlur = () => {
            const activeElement = document.activeElement;
            // Input lost focus to emoji picker container (happens in IE11 when updating search results)
            // See FS-2111
            if (activeElement instanceof HTMLElement &&
                activeElement.getAttribute('data-emoji-picker-container')) {
                this.restoreInputFocus();
            }
        };
        this.onChange = (e) => {
            this.saveInputSelection();
            this.props.onChange(e);
        };
        this.focusInput = () => {
            if (this.inputRef) {
                this.inputRef.focus();
            }
        };
        this.handleInputRef = (input) => {
            if (input) {
                // Defer focus so it give some time to position the popup before
                // setting the focus to search input.
                // see FS-2056
                this.inputRef = input;
                window.setTimeout(this.focusInput);
            }
        };
    }
    saveInputSelection() {
        this.inputSelection = undefined;
        if (this.inputRef) {
            const { selectionStart, selectionEnd, selectionDirection, } = this.inputRef;
            if (selectionStart && selectionEnd && selectionDirection) {
                this.inputSelection = {
                    selectionStart,
                    selectionEnd,
                    selectionDirection: selectionDirection,
                };
            }
        }
    }
    restoreInputFocus() {
        this.focusInput();
        if (this.inputSelection &&
            this.inputRef &&
            this.inputRef.setSelectionRange) {
            const { selectionStart, selectionEnd, selectionDirection, } = this.inputSelection;
            this.inputRef.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
        }
    }
    render() {
        const { style, query } = this.props;
        return (React.createElement("div", { className: styles.pickerSearch, style: style },
            React.createElement(FormattedMessage, Object.assign({}, messages.searchLabel), searchLabel => (React.createElement(AkFieldBase, { appearance: "standard", isCompact: true, isFitContainerWidthEnabled: true },
                React.createElement("span", { className: styles.searchIcon },
                    React.createElement(SearchIcon, { label: searchLabel })),
                React.createElement("input", { className: styles.input, autoComplete: "off", disabled: false, name: "search", placeholder: `${searchLabel}...`, required: false, onChange: this.onChange, value: query || '', ref: this.handleInputRef, onBlur: this.onBlur }))))));
    }
}
EmojiPickerListSearch.defaultProps = {
    style: {},
};
//# sourceMappingURL=EmojiPickerListSearch.js.map