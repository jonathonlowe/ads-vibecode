import { messages } from '../components/i18n';
import { customCategory, dataURLPrefix } from './constants';
export const isSpriteServiceRepresentation = (rep) => !!(rep && rep.spriteRef);
export const isSpriteRepresentation = (rep) => !!(rep && rep.sprite);
export const isImageRepresentation = (rep) => !!(rep && rep.imagePath);
export const isMediaRepresentation = (rep) => !!(rep && rep.mediaPath);
export const isPromise = (p) => !!(p && p.then);
export const isEmojiDescription = (possibleEmojiDescription) => possibleEmojiDescription &&
    possibleEmojiDescription.shortName &&
    possibleEmojiDescription.type;
export const isMediaEmoji = (emoji) => isMediaRepresentation(emoji.representation);
export const hasDataURLImage = (rep) => isImageRepresentation(rep) && rep.imagePath.indexOf(dataURLPrefix) === 0;
export const isLoadedMediaEmoji = (emoji) => emoji.category === customCategory && hasDataURLImage(emoji.representation);
export const isEmojiDescriptionWithVariations = (emoji) => !!(emoji && emoji.skinVariations);
export const isEmojiVariationDescription = (object) => {
    return 'baseId' in object;
};
export const isMessagesKey = (key) => key in messages;
export const toEmojiId = (emoji) => ({
    shortName: emoji.shortName,
    id: emoji.id,
    fallback: emoji.fallback,
});
export const toOptionalEmojiId = (emoji) => {
    if (!emoji) {
        return undefined;
    }
    return toEmojiId(emoji);
};
export const isEmojiIdEqual = (l, r) => l === r || (l && r && l.id === r.id && l.shortName === r.shortName);
export const containsEmojiId = (emojis, emojiId) => {
    if (!emojiId) {
        return false;
    }
    for (let i = 0; i < emojis.length; i++) {
        if (isEmojiIdEqual(emojis[i], emojiId)) {
            return true;
        }
    }
    return false;
};
export const convertImageToMediaRepresentation = (rep) => ({
    mediaPath: rep.imagePath,
    height: rep.height,
    width: rep.width,
});
export const convertMediaToImageRepresentation = (rep, newImagePath) => ({
    imagePath: newImagePath || rep.mediaPath,
    height: rep.height,
    width: rep.width,
});
export const convertMediaToImageEmoji = (emoji, newImagePath, useAlt) => {
    const mediaRepresentation = emoji.representation;
    const mediaAltRepresentation = emoji.altRepresentation;
    const imgPath = !useAlt ? newImagePath : undefined;
    const altImgPath = useAlt ? newImagePath : undefined;
    if (!isMediaRepresentation(mediaRepresentation) &&
        !isMediaRepresentation(mediaAltRepresentation)) {
        return emoji;
    }
    const representation = isMediaRepresentation(mediaRepresentation)
        ? convertMediaToImageRepresentation(mediaRepresentation, imgPath)
        : mediaRepresentation;
    const altRepresentation = isMediaRepresentation(mediaAltRepresentation)
        ? convertMediaToImageRepresentation(mediaAltRepresentation, altImgPath)
        : mediaAltRepresentation;
    const baseEmoji = {
        ...emoji,
        representation,
    };
    return buildEmojiDescriptionWithAltRepresentation(baseEmoji, altRepresentation);
};
// Prevent altRepresentation: undefined from being returned in EmojiDescription
export const buildEmojiDescriptionWithAltRepresentation = (emoji, altRepresentation) => {
    if (!altRepresentation) {
        return emoji;
    }
    return {
        ...emoji,
        altRepresentation,
    };
};
export const getCategoryId = (emoji) => emoji.category;
//# sourceMappingURL=type-helpers.js.map