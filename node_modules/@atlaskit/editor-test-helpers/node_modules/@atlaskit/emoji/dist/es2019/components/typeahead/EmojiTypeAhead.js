import React from 'react';
import debug from '../../util/logger';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import Popup from '../common/Popup';
const emojiTypeAheadModuleLoader = () => import(
/* webpackChunkName:"@atlaskit-internal_emojiTypeAheadComponent" */ './EmojiTypeAheadComponent');
const emojiTypeAheadComponentLoader = () => emojiTypeAheadModuleLoader().then(module => module.default);
export default class EmojiTypeahead extends LoadingEmojiComponent {
    constructor(props) {
        super(props, {});
        this.state = {
            asyncLoadedComponent: EmojiTypeahead.AsyncLoadedComponent,
        };
        this.selectNext = () => {
            if (this.refs.typeAhead) {
                this.refs.typeAhead.selectNext();
            }
        };
        this.selectPrevious = () => {
            if (this.refs.typeAhead) {
                this.refs.typeAhead.selectPrevious();
            }
        };
        this.chooseCurrentSelection = () => {
            if (this.refs.typeAhead) {
                this.refs.typeAhead.chooseCurrentSelection();
            }
        };
        this.count = () => {
            if (this.refs.typeAhead) {
                return this.refs.typeAhead.count();
            }
            return 0;
        };
    }
    asyncLoadComponent() {
        emojiTypeAheadComponentLoader().then(component => {
            EmojiTypeahead.AsyncLoadedComponent = component;
            this.setAsyncState(component);
        });
    }
    renderLoaded(loadedEmojiProvider, EmojiTypeAheadComponent) {
        const { emojiProvider, target, position, zIndex, offsetX, offsetY, ...otherProps } = this.props;
        const typeAhead = (React.createElement(EmojiTypeAheadComponent, Object.assign({}, otherProps, { emojiProvider: loadedEmojiProvider, ref: "typeAhead" })));
        if (position) {
            debug('target, position', target, position);
            if (target) {
                return (React.createElement(Popup, { target: target, relativePosition: position, zIndex: zIndex, offsetX: offsetX, offsetY: offsetY, children: typeAhead }));
            }
            // don't show if we have a position, but no target yet
            return null;
        }
        return typeAhead;
    }
}
//# sourceMappingURL=EmojiTypeAhead.js.map