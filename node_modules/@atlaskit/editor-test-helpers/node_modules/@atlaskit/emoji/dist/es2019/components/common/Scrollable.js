// FIXME - FAB-1732 looking at making a shared component for this
import classNames from 'classnames';
import React from 'react';
import { PureComponent } from 'react';
import { findDOMNode } from 'react-dom';
import * as styles from './styles';
export default class Scrollable extends PureComponent {
    constructor() {
        super(...arguments);
        this.scrollableDiv = null;
        // API
        this.reveal = (child, forceToTop) => {
            if (child && this.scrollableDiv) {
                const childNode = findDOMNode(child);
                // Not using Element.scrollIntoView as it scrolls even to top/bottom of view even if
                // already visible
                const scrollableRect = this.scrollableDiv.getBoundingClientRect();
                const elementRect = childNode.getBoundingClientRect();
                if (forceToTop || elementRect.top < scrollableRect.top) {
                    this.scrollableDiv.scrollTop += elementRect.top - scrollableRect.top;
                }
                else if (elementRect.bottom > scrollableRect.bottom) {
                    this.scrollableDiv.scrollTop +=
                        elementRect.bottom - scrollableRect.bottom;
                }
            }
        };
        this.scrollToBottom = () => {
            if (this.scrollableDiv) {
                this.scrollableDiv.scrollTop = this.scrollableDiv.scrollHeight;
            }
        };
        this.handleScroll = (event) => {
            const sampleOffset = 10;
            let firstElement;
            if (this.scrollableDiv) {
                const scrollableRect = this.scrollableDiv.getBoundingClientRect();
                firstElement = document.elementFromPoint(scrollableRect.left + sampleOffset, scrollableRect.top + sampleOffset);
            }
            if (this.props.onScroll && firstElement) {
                this.props.onScroll(firstElement, event);
            }
        };
        this.handleRef = (ref) => {
            this.scrollableDiv = ref;
        };
    }
    render() {
        const { children, className, maxHeight, onMouseLeave } = this.props;
        const scrollableClasses = ['emoji-scrollable', styles.emojiScrollable];
        if (className) {
            scrollableClasses.push(className);
        }
        const style = maxHeight ? { maxHeight } : {};
        return (React.createElement("div", { className: classNames(scrollableClasses), onMouseLeave: onMouseLeave, onScroll: this.handleScroll, ref: this.handleRef, style: style }, children));
    }
}
//# sourceMappingURL=Scrollable.js.map