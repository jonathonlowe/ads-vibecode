import Spinner from '@atlaskit/spinner';
import classNames from 'classnames';
import React from 'react';
import { PureComponent } from 'react';
import { emojiTypeAheadMaxHeight } from '../../util/shared-styles';
import { toEmojiId } from '../../util/type-helpers';
import debug from '../../util/logger';
import { actualMouseMove, mouseLocation } from '../../util/mouse';
import Scrollable from '../common/Scrollable';
import EmojiItem from './EmojiTypeAheadItem';
import * as styles from './styles';
function wrapIndex(emojis, index) {
    const len = emojis.length;
    let newIndex = index;
    while (newIndex < 0 && len > 0) {
        newIndex += len;
    }
    return newIndex % len;
}
function getKey(emoji) {
    return emoji.id || `${emoji.shortName}-${emoji.type}`;
}
function getKeyByIndex(emojis, index) {
    const emoji = emojis && emojis[index];
    if (emoji) {
        return getKey(emoji);
    }
    return undefined;
}
export default class EmojiTypeAheadList extends PureComponent {
    constructor(props) {
        super(props);
        // API
        this.selectNext = () => {
            const newIndex = wrapIndex(this.props.emojis, this.state.selectedIndex + 1);
            this.selectIndex(newIndex);
        };
        this.selectPrevious = () => {
            const newIndex = wrapIndex(this.props.emojis, this.state.selectedIndex - 1);
            this.selectIndex(newIndex);
        };
        this.chooseCurrentSelection = () => {
            const { emojis, onEmojiSelected } = this.props;
            const { selectedIndex } = this.state;
            const selectedEmoji = emojis[selectedIndex];
            debug('ak-typeahead-list.chooseCurrentSelection', selectedEmoji);
            if (onEmojiSelected) {
                onEmojiSelected(toEmojiId(selectedEmoji), selectedEmoji);
            }
        };
        this.selectIndexOnHover = (emojiId, _emoji, event) => {
            // TODO: fix this
            if (!event) {
                return;
            }
            const mousePosition = mouseLocation(event);
            if (actualMouseMove(this.lastMousePosition, mousePosition)) {
                this.selectByEmojiId(emojiId);
            }
            this.lastMousePosition = mousePosition;
        };
        this.itemSelected = (emojiId) => {
            this.selectByEmojiId(emojiId, () => {
                this.chooseCurrentSelection();
            });
        };
        this.handleScrollableRef = (ref) => {
            this.scrollable = ref;
        };
        this.state = {
            selectedKey: getKeyByIndex(props.emojis, 0),
            selectedIndex: 0,
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        // adjust selection
        const { emojis } = nextProps;
        const { selectedKey } = this.state;
        if (!selectedKey) {
            // go with default of selecting first item
            return;
        }
        for (let i = 0; i < emojis.length; i++) {
            if (selectedKey === emojis[i].id) {
                this.setState({
                    selectedIndex: i,
                });
                return;
            }
        }
        // existing selection not in results, pick first
        this.selectIndexNewEmoji(0, emojis);
    }
    componentDidUpdate() {
        const { emojis } = this.props;
        const { selectedIndex } = this.state;
        if (emojis && emojis[selectedIndex]) {
            const selectedEmoji = emojis[selectedIndex];
            this.revealItem(selectedEmoji.id || selectedEmoji.shortName);
        }
    }
    // Internal
    revealItem(key) {
        const item = this.items[key];
        if (item && this.scrollable) {
            this.scrollable.reveal(item);
        }
    }
    selectIndexNewEmoji(index, emojis) {
        this.setState({
            selectedIndex: index,
            selectedKey: getKeyByIndex(emojis, index),
        });
    }
    selectIndex(index, callback) {
        const { emojis } = this.props;
        this.setState({
            selectedIndex: index,
            selectedKey: getKeyByIndex(emojis, index),
        }, callback);
    }
    selectByEmojiId(emojiId, callback) {
        const { emojis } = this.props;
        for (let i = 0; i < emojis.length; i++) {
            const emoji = emojis[i];
            if (emoji.id === emojiId.id) {
                this.selectIndex(i, callback);
                return;
            }
        }
        for (let i = 0; i < emojis.length; i++) {
            const emoji = emojis[i];
            if (emoji.shortName === emojiId.shortName) {
                this.selectIndex(i, callback);
                return;
            }
        }
    }
    renderItems(emojis) {
        if (emojis && emojis.length) {
            this.items = {};
            return (React.createElement("div", null, emojis.map((emoji, idx) => {
                const key = getKey(emoji);
                const item = (React.createElement(EmojiItem, { emoji: emoji, key: key, selected: this.isSelectedEmoji(emoji, idx), onMouseMove: this.selectIndexOnHover, onSelection: this.itemSelected, ref: ref => {
                        if (ref) {
                            this.items[key] = ref;
                        }
                        else {
                            delete this.items[key];
                        }
                    } }));
                return item;
            })));
        }
        return null;
    }
    isSelectedEmoji(emoji, index) {
        const { selectedKey } = this.state;
        return selectedKey ? selectedKey === emoji.id : index === 0;
    }
    render() {
        const { emojis, loading } = this.props;
        const hasEmoji = emojis && emojis.length;
        const classes = classNames({
            'ak-emoji-typeahead-list': true,
            [styles.typeAheadList]: true,
            [styles.typeAheadEmpty]: !hasEmoji && !loading,
        });
        let listBody;
        if (loading) {
            listBody = (React.createElement("div", { className: styles.emojiTypeAheadSpinnerContainer },
                React.createElement("div", { className: styles.emojiTypeAheadSpinner },
                    React.createElement(Spinner, { size: "medium" }))));
        }
        else {
            listBody = this.renderItems(emojis);
        }
        return (React.createElement("div", { className: styles.typeAheadListContainer },
            React.createElement("div", { className: classes },
                React.createElement(Scrollable, { ref: this.handleScrollableRef, maxHeight: `${emojiTypeAheadMaxHeight}px` }, listBody))));
    }
}
EmojiTypeAheadList.defaultProps = {
    onEmojiSelected: () => { },
};
//# sourceMappingURL=EmojiTypeAheadList.js.map