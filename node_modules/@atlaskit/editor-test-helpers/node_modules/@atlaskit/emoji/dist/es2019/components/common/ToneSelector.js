import React from 'react';
import { PureComponent } from 'react';
import EmojiButton from './EmojiButton';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel, toneSelectedEvent, toneSelectorOpenedEvent, } from '../../util/analytics';
const extractAllTones = (emoji) => {
    if (emoji.skinVariations) {
        return [emoji, ...emoji.skinVariations];
    }
    return [emoji];
};
export class ToneSelectorInternal extends PureComponent {
    constructor() {
        super(...arguments);
        this.onToneSelectedHandler = (skinTone) => {
            const { onToneSelected } = this.props;
            onToneSelected(skinTone);
            const toneList = [
                'default',
                'light',
                'mediumLight',
                'medium',
                'mediumDark',
                'dark',
            ];
            this.fireEvent(toneSelectedEvent({
                skinToneModifier: toneList[skinTone],
            }));
        };
    }
    fireEvent(event) {
        const { createAnalyticsEvent } = this.props;
        if (createAnalyticsEvent) {
            createAndFireEventInElementsChannel(event)(createAnalyticsEvent);
        }
    }
    UNSAFE_componentWillMount() {
        this.fireEvent(toneSelectorOpenedEvent({}));
    }
    render() {
        const { emoji } = this.props;
        const toneEmojis = extractAllTones(emoji);
        return (React.createElement("div", null, toneEmojis.map((tone, i) => (React.createElement(EmojiButton, { key: `${tone.id}`, onSelected: () => this.onToneSelectedHandler(i), emoji: tone, selectOnHover: true })))));
    }
}
const ToneSelector = withAnalyticsEvents()(ToneSelectorInternal);
export default ToneSelector;
//# sourceMappingURL=ToneSelector.js.map