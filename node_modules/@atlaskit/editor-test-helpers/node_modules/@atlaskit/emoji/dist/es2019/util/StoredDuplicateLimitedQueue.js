import DuplicateLimitedQueue from './DuplicateLimitedQueue';
import debug from './logger';
/**
 * An extension to the DuplicateLimitedQueue that will initialise its contents from the
 * supplied Storage and will also update the storage for every new item enqueued.
 */
export default class StoredDuplicateLimitedQueue extends DuplicateLimitedQueue {
    constructor(options) {
        super(options);
        this.storage = options.storage;
        this.prefixedStorageKey = `${options.storagePrefix}.${StoredDuplicateLimitedQueue.storageKey}`;
        this.load();
    }
    /**
     * Enqueue the supplied item and also persist the new contents of the queue to storage.
     *
     * @param item the item to be enqueued
     */
    enqueue(item) {
        super.enqueue(item);
        this.save();
    }
    /**
     * Exposed for storybook/testing purposes only. Clear the contents of the queue, and localStorage.
     */
    clear() {
        super.clear();
        this.storage.removeItem(this.prefixedStorageKey);
    }
    /**
     * Initialise the queue contents from the configured Storage. If there is no data found in
     * storage then the queue will have no items added. Likewise, a failure to read or parse stored
     * data will be swallowed and no items are added to the queue.
     */
    load() {
        const itemsJson = this.storage.getItem(this.prefixedStorageKey);
        if (itemsJson) {
            try {
                const items = JSON.parse(itemsJson);
                this.bulkEnqueue(items);
            }
            catch (e) {
                debug(`Error parsing the queue stored as ${this.prefixedStorageKey} key from storage`, e);
            }
        }
    }
    /**
     * Save the current items in the queue, overwriting any previously stored queue.
     * Any failure in saving will be silently ignored with the likely outcome that any previous
     * saved items will remain unchanged in storage.
     */
    save() {
        const itemsJson = JSON.stringify(this.getItems());
        try {
            this.storage.setItem(this.prefixedStorageKey, itemsJson);
        }
        catch (e) {
            debug(`Error saving the queued items as ${this.prefixedStorageKey}`, e);
        }
    }
}
StoredDuplicateLimitedQueue.storageKey = 'lastUsed';
//# sourceMappingURL=StoredDuplicateLimitedQueue.js.map