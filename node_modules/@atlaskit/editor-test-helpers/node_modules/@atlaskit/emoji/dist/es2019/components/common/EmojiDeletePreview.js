import AkButton from '@atlaskit/button';
import React from 'react';
import { Component } from 'react';
import { FormattedMessage } from 'react-intl';
import { messages } from '../i18n';
import CachingEmoji from './CachingEmoji';
import EmojiErrorMessage from './EmojiErrorMessage';
import RetryableButton from './RetryableButton';
import * as styles from './styles';
export default class EmojiDeletePreview extends Component {
    constructor(props) {
        super(props);
        this.onSubmit = () => {
            const { emoji, onDeleteEmoji, onCloseDelete } = this.props;
            if (!this.state.loading) {
                this.setState({ loading: true });
                onDeleteEmoji(emoji).then(success => {
                    if (success) {
                        onCloseDelete();
                        return;
                    }
                    this.setState({
                        loading: false,
                        error: true,
                    });
                });
            }
        };
        this.onCancel = () => {
            this.props.onCloseDelete();
        };
        this.state = {
            loading: false,
            error: false,
        };
    }
    UNSAFE_componentWillUpdate(nextProps) {
        if (nextProps.emoji.id !== this.props.emoji.id) {
            this.setState({ error: false });
        }
    }
    render() {
        const { emoji } = this.props;
        const { loading, error } = this.state;
        return (React.createElement("div", { className: styles.deletePreview },
            React.createElement("div", { className: styles.deleteText },
                React.createElement("h5", null,
                    React.createElement(FormattedMessage, Object.assign({}, messages.deleteEmojiTitle))),
                React.createElement(FormattedMessage, Object.assign({}, messages.deleteEmojiDescription, { values: { emojiShortName: emoji.shortName } }))),
            React.createElement("div", { className: styles.deleteFooter },
                React.createElement(CachingEmoji, { emoji: emoji }),
                React.createElement("div", { className: styles.previewButtonGroup },
                    error ? (React.createElement(FormattedMessage, Object.assign({}, messages.deleteEmojiFailed), message => !loading ? (React.createElement(EmojiErrorMessage, { message: message, className: styles.emojiDeleteErrorMessage, tooltip: true })) : null)) : null,
                    React.createElement(FormattedMessage, Object.assign({}, messages.deleteEmojiLabel), message => (React.createElement(RetryableButton, { className: styles.uploadEmojiButton, retryClassName: styles.uploadRetryButton, label: message, onSubmit: this.onSubmit, appearance: "danger", loading: loading, error: error }))),
                    React.createElement(AkButton, { appearance: "subtle", onClick: this.onCancel, className: styles.cancelButton },
                        React.createElement(FormattedMessage, Object.assign({}, messages.cancelLabel)))))));
    }
}
//# sourceMappingURL=EmojiDeletePreview.js.map