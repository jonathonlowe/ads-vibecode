import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import React from 'react';
import LoadingEmojiComponent from '../common/LoadingEmojiComponent';
import { LoadingItem } from './EmojiPickerVirtualItems';
import * as styles from './styles';
const emojiPickerModuleLoader = () => import(
/* webpackChunkName:"@atlaskit-internal_emojiPickerComponent" */ './EmojiPickerComponent');
const emojiPickerLoader = () => emojiPickerModuleLoader().then(module => module.default);
export class EmojiPickerInternal extends LoadingEmojiComponent {
    constructor(props) {
        super(props, {});
        this.state = {
            asyncLoadedComponent: EmojiPickerInternal.AsyncLoadedComponent,
        };
    }
    asyncLoadComponent() {
        emojiPickerLoader().then(component => {
            EmojiPickerInternal.AsyncLoadedComponent = component;
            this.setAsyncState(component);
        });
    }
    renderLoading() {
        const item = new LoadingItem();
        const handlePickerRef = (ref) => {
            if (this.props.onPickerRef) {
                this.props.onPickerRef(ref);
            }
        };
        return (React.createElement("div", { className: styles.emojiPicker, ref: handlePickerRef }, item.renderItem()));
    }
    renderLoaded(loadedEmojiProvider, EmojiPickerComponent) {
        const { emojiProvider, ...otherProps } = this.props;
        return (React.createElement(EmojiPickerComponent, Object.assign({ emojiProvider: loadedEmojiProvider }, otherProps)));
    }
}
const EmojiPicker = withAnalyticsEvents()(EmojiPickerInternal);
export default EmojiPicker;
//# sourceMappingURL=EmojiPicker.js.map