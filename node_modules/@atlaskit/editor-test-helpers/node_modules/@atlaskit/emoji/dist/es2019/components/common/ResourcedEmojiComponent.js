import PropTypes from 'prop-types';
import React from 'react';
import { Component } from 'react';
import { defaultEmojiHeight } from '../../util/constants';
import { isPromise } from '../../util/type-helpers';
import CachingEmoji from './CachingEmoji';
import EmojiPlaceholder from './EmojiPlaceholder';
export default class ResourcedEmojiComponent extends Component {
    constructor(props) {
        super(props);
        this.ready = false;
        this.state = {
            emoji: undefined,
            loaded: false,
        };
    }
    getChildContext() {
        return {
            emoji: {
                emojiProvider: this.props.emojiProvider,
            },
        };
    }
    refreshEmoji(emojiProvider, emojiId) {
        const foundEmoji = emojiProvider.findByEmojiId(emojiId);
        if (isPromise(foundEmoji)) {
            this.setState({
                loaded: false,
            });
            foundEmoji.then(emoji => {
                if (this.ready) {
                    // don't update state if component was unmounted
                    this.setState({
                        emoji,
                        loaded: true,
                    });
                }
            });
        }
        else {
            // loaded
            this.setState({
                emoji: foundEmoji,
                loaded: true,
            });
        }
    }
    UNSAFE_componentWillMount() {
        this.ready = true;
        if (!this.state.emoji) {
            // using UNSAFE_componentWillMount instead of componentDidMount to avoid needless
            // rerendering.
            this.refreshEmoji(this.props.emojiProvider, this.props.emojiId);
        }
    }
    componentWillUnmount() {
        this.ready = false;
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.emojiProvider !== this.props.emojiProvider ||
            nextProps.emojiId !== this.props.emojiId) {
            this.refreshEmoji(nextProps.emojiProvider, nextProps.emojiId);
        }
    }
    render() {
        const { emojiId, fitToHeight = defaultEmojiHeight, showTooltip, } = this.props;
        const { emoji, loaded } = this.state;
        const { shortName, fallback } = emojiId;
        if (emoji) {
            return this.emojiWrapper(React.createElement(CachingEmoji, { emoji: emoji, showTooltip: showTooltip, fitToHeight: fitToHeight }));
        }
        else if (loaded) {
            // loaded but not found - render fallback
            return this.emojiWrapper(React.createElement("span", null, fallback || shortName));
        }
        return this.emojiWrapper(React.createElement(EmojiPlaceholder, { shortName: shortName, showTooltip: showTooltip, size: fitToHeight || defaultEmojiHeight }));
    }
    emojiWrapper(element) {
        const { shortName, id, fallback } = this.props.emojiId;
        return (React.createElement("span", { "data-emoji-id": id, "data-emoji-short-name": shortName, "data-emoji-text": fallback || shortName }, element));
    }
}
ResourcedEmojiComponent.childContextTypes = {
    emoji: PropTypes.object,
};
//# sourceMappingURL=ResourcedEmojiComponent.js.map