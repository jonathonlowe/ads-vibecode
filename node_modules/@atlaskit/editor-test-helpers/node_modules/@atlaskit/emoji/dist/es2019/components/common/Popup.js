import React from 'react';
import { PureComponent } from 'react';
import ReactDOM from 'react-dom';
const getTargetNode = (target) => {
    if (typeof target === 'string') {
        return document.querySelector(target);
    }
    // Expect to be an element
    return target;
};
/*
 * Simple implementation of popup while waiting for ak-inline-dialog
 */
export default class Popup extends PureComponent {
    constructor() {
        super(...arguments);
        this.debounced = null;
        this.handleResize = () => {
            if (this.debounced) {
                clearTimeout(this.debounced);
                this.debounced = null;
            }
            // Timeout set to 30ms as to not throttle IE11
            this.debounced = window.setTimeout(() => {
                this.applyAbsolutePosition();
                this.debounced = null;
            }, 30);
        };
    }
    componentDidMount() {
        this.popup = document.createElement('div');
        document.body.appendChild(this.popup);
        this.popup.style.position = 'absolute';
        window.addEventListener('resize', this.handleResize);
        this.applyAbsolutePosition();
        this.renderContent();
    }
    componentDidUpdate() {
        this.applyAbsolutePosition();
        this.renderContent();
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleResize);
        if (this.popup) {
            ReactDOM.unmountComponentAtNode(this.popup);
            document.body.removeChild(this.popup);
        }
    }
    // Internal
    applyBelowPosition() {
        const targetNode = getTargetNode(this.props.target);
        if (targetNode && this.popup) {
            const box = targetNode.getBoundingClientRect();
            const top = box.bottom + (this.props.offsetY || 0);
            const left = box.left + (this.props.offsetX || 0);
            this.popup.style.top = `${top}px`;
            this.popup.style.bottom = '';
            this.popup.style.left = `${left}px`;
        }
    }
    applyAbovePosition() {
        const targetNode = getTargetNode(this.props.target);
        if (targetNode && this.popup) {
            const box = targetNode.getBoundingClientRect();
            const bottom = window.innerHeight - box.top + (this.props.offsetY || 0);
            const left = box.left + (this.props.offsetX || 0);
            this.popup.style.top = '';
            this.popup.style.bottom = `${bottom}px`;
            this.popup.style.left = `${left}px`;
        }
    }
    applyAbsolutePosition() {
        if (this.props.relativePosition === 'above') {
            this.applyAbovePosition();
        }
        else if (this.props.relativePosition === 'below') {
            this.applyBelowPosition();
        }
        else {
            const targetNode = getTargetNode(this.props.target);
            if (targetNode) {
                const box = targetNode.getBoundingClientRect();
                const viewPortHeight = window.innerHeight;
                if (box.top < viewPortHeight / 2) {
                    this.applyBelowPosition();
                }
                else {
                    this.applyAbovePosition();
                }
            }
        }
        if (this.props.zIndex && this.popup) {
            this.popup.style.zIndex = `${this.props.zIndex}`;
        }
    }
    renderContent() {
        if (this.popup) {
            ReactDOM.render(this.props.children, this.popup);
        }
    }
    render() {
        // inline placeholder element for react to render inplace
        return React.createElement("div", null);
    }
}
Popup.defaultProps = {
    relativePosition: 'auto',
    offsetX: 0,
    offsetY: 0,
    zIndex: 0,
};
//# sourceMappingURL=Popup.js.map