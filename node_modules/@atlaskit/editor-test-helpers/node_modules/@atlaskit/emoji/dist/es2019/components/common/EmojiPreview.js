import AkButton from '@atlaskit/button';
import AddIcon from '@atlaskit/icon/glyph/add';
import classNames from 'classnames';
import React from 'react';
import { PureComponent } from 'react';
import { FormattedMessage } from 'react-intl';
import CachingEmoji from '../../components/common/CachingEmoji';
import EmojiButton from '../../components/common/EmojiButton';
import { messages } from '../i18n';
import * as styles from './styles';
import ToneSelector from './ToneSelector';
export default class EmojiPreview extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            selectingTone: false,
        };
        this.onToneButtonClick = () => {
            this.setState({
                selectingTone: true,
            });
        };
        this.onToneSelected = (toneValue) => {
            this.setState({
                selectingTone: false,
            });
            if (this.props.onToneSelected) {
                this.props.onToneSelected(toneValue);
            }
        };
        this.onMouseLeave = () => {
            const { selectingTone } = this.state;
            const { onToneSelectorCancelled } = this.props;
            if (selectingTone && onToneSelectorCancelled) {
                onToneSelectorCancelled();
            }
            this.setState({
                selectingTone: false,
            });
        };
    }
    renderTones() {
        const { toneEmoji, selectedTone } = this.props;
        if (!toneEmoji) {
            return null;
        }
        if (this.state.selectingTone) {
            return (React.createElement("div", { className: styles.toneSelectorContainer },
                React.createElement(ToneSelector, { emoji: toneEmoji, onToneSelected: this.onToneSelected })));
        }
        let previewEmoji = toneEmoji;
        if (selectedTone && previewEmoji.skinVariations) {
            previewEmoji = previewEmoji.skinVariations[(selectedTone || 1) - 1];
        }
        return (React.createElement("div", { className: styles.buttons },
            React.createElement(EmojiButton, { emoji: previewEmoji, onSelected: () => this.onToneButtonClick(), selectOnHover: true })));
    }
    renderEmojiPreview() {
        const { selectingTone } = this.state;
        const { emoji, uploadEnabled } = this.props;
        if (!emoji || selectingTone || uploadEnabled) {
            return null;
        }
        const previewClasses = classNames({
            [styles.preview]: true,
            [styles.withToneSelector]: !!this.props.toneEmoji,
        });
        const previewTextClasses = classNames({
            [styles.previewText]: true,
            [styles.previewSingleLine]: !emoji.name,
        });
        return (React.createElement("div", { className: previewClasses },
            React.createElement("span", { className: styles.previewImg },
                React.createElement(CachingEmoji, { emoji: emoji })),
            React.createElement("div", { className: previewTextClasses },
                React.createElement("span", { className: styles.name }, emoji.name),
                React.createElement("span", { className: styles.shortName }, emoji.shortName))));
    }
    // note: emoji-picker-add-emoji className is used by pollinator synthetic checks
    renderAddOwnEmoji() {
        const { onOpenUpload, uploadEnabled } = this.props;
        const { selectingTone } = this.state;
        if (!uploadEnabled || selectingTone) {
            return null;
        }
        return (React.createElement("div", { className: styles.AddCustomEmoji },
            React.createElement(FormattedMessage, Object.assign({}, messages.addCustomEmojiLabel), label => (React.createElement(AkButton, { onClick: onOpenUpload, iconBefore: React.createElement(AddIcon, { label: label, size: "small" }), appearance: "subtle", className: styles.addCustomEmojiButton + ' emoji-picker-add-emoji' }, label)))));
    }
    render() {
        const sectionClasses = classNames([
            styles.emojiPreview,
            styles.emojiPreviewSection,
        ]);
        return (React.createElement("div", { className: sectionClasses, onMouseLeave: this.onMouseLeave },
            this.renderAddOwnEmoji(),
            this.renderEmojiPreview(),
            this.renderTones()));
    }
}
//# sourceMappingURL=EmojiPreview.js.map