import Spinner from '@atlaskit/spinner';
import React from 'react';
import EmojiPickerCategoryHeading from './EmojiPickerCategoryHeading';
import EmojiPickerEmojiRow from './EmojiPickerEmojiRow';
import { sizes } from './EmojiPickerSizes';
import * as styles from './styles';
export class AbstractItem {
    constructor(props, height) {
        this.props = props;
        this.height = height;
    }
}
export class EmojisRowItem extends AbstractItem {
    constructor(props) {
        super(props, sizes.emojiRowHeight);
        this.renderItem = () => React.createElement(EmojiPickerEmojiRow, Object.assign({}, this.props));
    }
}
export class LoadingItem extends AbstractItem {
    constructor() {
        super({}, sizes.loadingRowHeight);
        this.renderItem = () => (React.createElement("div", { className: styles.emojiPickerSpinner },
            React.createElement("div", null,
                React.createElement(Spinner, { size: "medium" }))));
    }
}
export class CategoryHeadingItem extends AbstractItem {
    constructor(props) {
        super(props, sizes.categoryHeadingHeight);
        this.renderItem = () => React.createElement(EmojiPickerCategoryHeading, Object.assign({}, this.props));
    }
}
export const virtualItemRenderer = (rows, context) => {
    const { index, key, style } = context;
    const row = rows[index];
    return (React.createElement("div", { style: style, key: key }, row.renderItem(context)));
};
//# sourceMappingURL=EmojiPickerVirtualItems.js.map