import { utils as serviceUtils, } from '@atlaskit/util-service-support';
// expire 30 seconds early to factor in latency, slow services, etc
export const expireAdjustment = 30;
export default class TokenManager {
    constructor(siteServiceConfig) {
        this.siteServiceConfig = siteServiceConfig;
        this.tokens = new Map();
    }
    addToken(type, mediaApiToken) {
        this.tokens.set(type, {
            mediaApiToken,
        });
    }
    getToken(type, forceRefresh) {
        let tokenDetail = this.tokens.get(type);
        if (!tokenDetail) {
            tokenDetail = {};
            this.tokens.set(type, tokenDetail);
        }
        const { mediaApiToken, activeTokenRefresh } = tokenDetail;
        if (mediaApiToken) {
            const nowInSeconds = Date.now() / 1000;
            const expiresAt = mediaApiToken.expiresAt - expireAdjustment;
            if (nowInSeconds < expiresAt && !forceRefresh) {
                // still valid
                return Promise.resolve(mediaApiToken);
            }
            if (activeTokenRefresh) {
                // refresh already active, return that
                return activeTokenRefresh;
            }
            // clear expired token
            tokenDetail.mediaApiToken = undefined;
        }
        const path = `token/${type}`;
        // request a new token and track the promise for future requests until completed
        tokenDetail.activeTokenRefresh = serviceUtils
            .requestService(this.siteServiceConfig, { path })
            .then(mediaApiToken => {
            tokenDetail.activeTokenRefresh = undefined;
            tokenDetail.mediaApiToken = mediaApiToken;
            return mediaApiToken;
        });
        return tokenDetail.activeTokenRefresh;
    }
}
//# sourceMappingURL=TokenManager.js.map