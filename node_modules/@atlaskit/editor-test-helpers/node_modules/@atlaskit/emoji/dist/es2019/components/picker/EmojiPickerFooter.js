import classNames from 'classnames';
import React from 'react';
import { PureComponent } from 'react';
import EmojiDeletePreview from '../common/EmojiDeletePreview';
import EmojiPreview from '../common/EmojiPreview';
import EmojiUploadPicker from '../common/EmojiUploadPicker';
import * as styles from './styles';
export default class EmojiPickerFooter extends PureComponent {
    render() {
        const { initialUploadName, onToneSelected, onToneSelectorCancelled, onUploadCancelled, onUploadEmoji, onCloseDelete, onDeleteEmoji, selectedEmoji, selectedTone, toneEmoji, uploadErrorMessage, uploading, onFileChooserClicked, onOpenUpload, uploadEnabled, emojiToDelete, } = this.props;
        const previewFooterClassnames = classNames([
            styles.emojiPickerFooter,
            styles.emojiPickerFooterWithTopShadow,
        ]);
        if (uploading) {
            return (React.createElement("div", { className: previewFooterClassnames },
                React.createElement(EmojiUploadPicker, { onUploadCancelled: onUploadCancelled, onUploadEmoji: onUploadEmoji, onFileChooserClicked: onFileChooserClicked, errorMessage: uploadErrorMessage, initialUploadName: initialUploadName })));
        }
        if (emojiToDelete) {
            return (React.createElement("div", { className: previewFooterClassnames },
                React.createElement(EmojiDeletePreview, { emoji: emojiToDelete, onDeleteEmoji: onDeleteEmoji, onCloseDelete: onCloseDelete })));
        }
        return (React.createElement("div", { className: previewFooterClassnames },
            React.createElement(EmojiPreview, { emoji: selectedEmoji, toneEmoji: toneEmoji, selectedTone: selectedTone, onToneSelected: onToneSelected, onToneSelectorCancelled: onToneSelectorCancelled, onOpenUpload: onOpenUpload, uploadEnabled: uploadEnabled })));
    }
}
//# sourceMappingURL=EmojiPickerFooter.js.map