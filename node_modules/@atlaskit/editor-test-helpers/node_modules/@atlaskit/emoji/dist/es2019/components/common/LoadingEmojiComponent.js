import { Component } from 'react';
/**
 * A base class for components that don't want to start rendering
 * until the EmojiProvider is resolved.
 * Notes: super.componentDidMount and super.componentWillUnmount will need to be
 * called explicitly if they are overridden on the child class.
 */
export default class LoadingEmojiComponent extends Component {
    constructor(props, state) {
        super(props);
        this.isUnmounted = false;
        this.loaded = (state) => !!state.asyncLoadedComponent && !!state.loadedEmojiProvider;
        this.state = state;
        // initializing here instead of componentDidMount to avoid needless
        // rerendering if emojiProvider resolves immediately.
        this.loadEmojiProvider(this.props.emojiProvider);
    }
    componentDidMount() {
        // check for the module has not yet been loaded
        // state.asyncLoadedComponent should be initialised
        // with static field to prevent unnecessary rerender
        if (!this.state.asyncLoadedComponent) {
            this.asyncLoadComponent();
        }
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        this.loadEmojiProvider(nextProps.emojiProvider);
    }
    componentWillUnmount() {
        this.isUnmounted = true;
    }
    loadEmojiProvider(futureEmojiProvider) {
        futureEmojiProvider
            .then(loadedEmojiProvider => {
            if (!this.isUnmounted) {
                this.setState({
                    loadedEmojiProvider,
                });
            }
        })
            .catch(() => {
            if (!this.isUnmounted) {
                this.setState({
                    loadedEmojiProvider: undefined,
                });
            }
        });
    }
    setAsyncState(asyncLoadedComponent) {
        if (!this.isUnmounted) {
            this.setState({ asyncLoadedComponent });
        }
    }
    renderLoading() {
        return null;
    }
    render() {
        if (this.loaded(this.state)) {
            const { loadedEmojiProvider, asyncLoadedComponent } = this.state;
            return this.renderLoaded(loadedEmojiProvider, asyncLoadedComponent);
        }
        return this.renderLoading();
    }
}
//# sourceMappingURL=LoadingEmojiComponent.js.map