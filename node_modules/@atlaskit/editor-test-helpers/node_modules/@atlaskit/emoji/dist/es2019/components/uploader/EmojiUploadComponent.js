import React from 'react';
import { PureComponent } from 'react';
import { FormattedMessage } from 'react-intl';
import classNames from 'classnames';
import * as styles from './styles';
import { supportsUploadFeature } from '../../api/EmojiResource';
import EmojiUploadPicker from '../common/EmojiUploadPicker';
import { uploadEmoji } from '../common/UploadEmoji';
import { createAndFireEventInElementsChannel, selectedFileEvent, uploadCancelButton, uploadConfirmButton, } from '../../util/analytics';
export default class EmojiUploadComponent extends PureComponent {
    constructor(props) {
        super(props);
        this.onUploadEmoji = (upload, retry) => {
            const { emojiProvider } = this.props;
            this.fireAnalytics(uploadConfirmButton({ retry }));
            const errorSetter = (message) => {
                this.setState({
                    uploadErrorMessage: message,
                });
            };
            uploadEmoji(upload, emojiProvider, errorSetter, this.prepareForUpload, this.fireAnalytics);
        };
        this.prepareForUpload = () => {
            const { emojiProvider } = this.props;
            if (supportsUploadFeature(emojiProvider)) {
                emojiProvider.prepareForUpload();
            }
            this.setState({
                uploadErrorMessage: undefined,
            });
            if (this.ref) {
                this.ref.clearUploadPicker();
            }
        };
        this.onFileChooserClicked = () => {
            this.fireAnalytics(selectedFileEvent());
        };
        this.onUploadCancelled = () => {
            this.fireAnalytics(uploadCancelButton());
            this.prepareForUpload();
        };
        this.onUploaderRef = (emojiUploadPicker) => {
            this.ref = emojiUploadPicker;
        };
        this.fireAnalytics = (analyticsEvent) => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                createAndFireEventInElementsChannel(analyticsEvent)(createAnalyticsEvent);
            }
        };
        if (supportsUploadFeature(props.emojiProvider)) {
            props.emojiProvider.prepareForUpload();
        }
        this.state = {};
    }
    render() {
        const { uploadErrorMessage } = this.state;
        const errorMessage = uploadErrorMessage ? (React.createElement(FormattedMessage, Object.assign({}, uploadErrorMessage))) : null;
        return (React.createElement("div", { className: classNames([styles.emojiUploadWidget]), ref: this.props.onUploaderRef },
            React.createElement("div", { className: classNames([styles.emojiUploadFooter]) },
                React.createElement(EmojiUploadPicker, { ref: this.onUploaderRef, onFileChooserClicked: this.onFileChooserClicked, onUploadCancelled: this.onUploadCancelled, onUploadEmoji: this.onUploadEmoji, errorMessage: errorMessage }))));
    }
}
//# sourceMappingURL=EmojiUploadComponent.js.map