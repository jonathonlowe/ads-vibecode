import classNames from 'classnames';
import React from 'react';
import { PureComponent } from 'react';
import { FormattedMessage } from 'react-intl';
import { defaultCategories } from '../../util/constants';
import { messages } from '../i18n';
import { CategoryDescriptionMap, } from './categories';
import * as styles from './styles';
export const sortCategories = (c1, c2) => CategoryDescriptionMap[c1].order - CategoryDescriptionMap[c2].order;
const addNewCategories = (oldCategories, newCategories) => {
    if (!newCategories) {
        return oldCategories;
    }
    return oldCategories
        .concat(newCategories.filter(category => !!CategoryDescriptionMap[category]))
        .sort(sortCategories);
};
export default class CategorySelector extends PureComponent {
    constructor(props) {
        super(props);
        this.onClick = (event) => {
            const { onCategorySelected, disableCategories } = this.props;
            if (disableCategories) {
                event.preventDefault();
                return;
            }
            const categoryId = event.currentTarget.getAttribute('data-category-id');
            if (onCategorySelected) {
                onCategorySelected(categoryId);
            }
        };
        const { dynamicCategories } = props;
        let categories = defaultCategories;
        if (dynamicCategories) {
            categories = addNewCategories(categories, dynamicCategories);
        }
        this.state = {
            categories,
        };
    }
    UNSAFE_componentWillUpdate(nextProps) {
        if (this.props.dynamicCategories !== nextProps.dynamicCategories) {
            this.setState({
                categories: addNewCategories(defaultCategories, nextProps.dynamicCategories),
            });
        }
    }
    render() {
        const { disableCategories } = this.props;
        const { categories } = this.state;
        let categoriesSection;
        if (categories) {
            categoriesSection = (React.createElement("ul", null, categories.map((categoryId) => {
                const category = CategoryDescriptionMap[categoryId];
                const categoryClasses = [styles.category];
                if (categoryId === this.props.activeCategoryId) {
                    categoryClasses.push(styles.active);
                }
                if (disableCategories) {
                    categoryClasses.push(styles.disable);
                }
                const Icon = category.icon;
                return (React.createElement("li", { key: category.id },
                    React.createElement(FormattedMessage, Object.assign({}, messages[category.name]), categoryName => (React.createElement("button", { "data-category-id": category.id, className: classNames(categoryClasses), onClick: this.onClick, title: categoryName },
                        React.createElement(Icon, { label: categoryName }))))));
            })));
        }
        return (React.createElement("div", { className: classNames([styles.categorySelector]) }, categoriesSection));
    }
}
CategorySelector.defaultProps = {
    onCategorySelected: () => { },
    dynamicCategories: [],
};
//# sourceMappingURL=CategorySelector.js.map