import EditorDoneIcon from '@atlaskit/icon/glyph/editor/done';
import { colors } from '@atlaskit/theme';
import React from 'react';
import { PureComponent, } from 'react';
import { FormattedMessage } from 'react-intl';
import styled from 'styled-components';
import { ANALYTICS_HOVER_DELAY } from '../constants';
import { messages } from '../i18n';
const Button = styled.button `
  height: 24px;
  width: 24px;
  background: ${colors.N900};
  padding: 0;
  border-radius: 4px;
  border: 1px solid ${colors.N0};
  cursor: pointer;
  display: block;
  box-sizing: border-box;
  overflow: hidden;
`;
const ButtonWrapper = styled.span `
  border: 1px solid transparent;
  margin: 0 2px;
  font-size: 0;
  display: flex;
  align-items: center;
  padding: 1px;
  border-radius: 6px;
  &:hover {
    border: 1px solid ${colors.N50};
  }
`;
export default class Color extends PureComponent {
    constructor() {
        super(...arguments);
        this.hoverStartTime = 0;
        this.onMouseEnter = () => {
            this.hoverStartTime = Date.now();
        };
        this.onMouseLeave = () => {
            const { onHover } = this.props;
            const delay = Date.now() - this.hoverStartTime;
            if (delay >= ANALYTICS_HOVER_DELAY && onHover) {
                onHover(this.props.value);
            }
            this.hoverStartTime = 0;
        };
        this.onMouseDown = e => {
            e.preventDefault();
        };
        this.onClick = e => {
            const { onClick, value } = this.props;
            e.preventDefault();
            onClick(value);
        };
    }
    render() {
        const { tabIndex, backgroundColor, isSelected, borderColor, value, } = this.props;
        const borderStyle = `1px solid ${borderColor}`;
        return (React.createElement(ButtonWrapper, null,
            React.createElement(FormattedMessage, Object.assign({}, messages[`${value}Color`]), label => (React.createElement(Button, { onClick: this.onClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onMouseDown: this.onMouseDown, tabIndex: tabIndex, className: `${isSelected ? 'selected' : ''}`, title: label, style: {
                    backgroundColor: backgroundColor || 'transparent',
                    border: borderStyle,
                } }, isSelected && (React.createElement(EditorDoneIcon, { primaryColor: borderColor, label: label })))))));
    }
    componentWillUnmount() {
        this.hoverStartTime = 0;
    }
}
//# sourceMappingURL=color.js.map