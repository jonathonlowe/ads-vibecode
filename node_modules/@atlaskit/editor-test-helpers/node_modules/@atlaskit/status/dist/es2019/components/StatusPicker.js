import TextField from '@atlaskit/textfield';
import { gridSize } from '@atlaskit/theme';
import React from 'react';
import { PureComponent } from 'react';
import styled from 'styled-components';
import ColorPalette from './internal/color-palette';
const FieldTextWrapper = styled.div `
  margin: 0 ${gridSize()}px;
`;
export class StatusPicker extends PureComponent {
    constructor() {
        super(...arguments);
        this.fieldTextWrapperKey = Math.random().toString();
        this.colorPaletteKey = Math.random().toString();
        this.onChange = (evt) => {
            // @ts-ignore
            this.props.onTextChanged(evt.target.value);
        };
        this.onKeyPress = (event) => {
            if (event.key === 'Enter') {
                this.props.onEnter();
            }
        };
        this.handleInputRef = (ref) => {
            if (ref && this.props.autoFocus) {
                // Defer to prevent editor scrolling to top (See FS-3227, also ED-2992)
                setTimeout(() => {
                    ref.focus();
                });
            }
        };
    }
    render() {
        const { text, selectedColor, onColorClick, onColorHover } = this.props;
        // Using <React.Fragment> instead of [] to workaround Enzyme
        // (https://github.com/airbnb/enzyme/issues/1149)
        return (React.createElement(React.Fragment, null,
            React.createElement(FieldTextWrapper, { key: this.fieldTextWrapperKey },
                React.createElement(TextField, { value: text, isCompact: true, ref: this.handleInputRef, onChange: this.onChange, onKeyPress: this.onKeyPress, spellCheck: false, autoComplete: "off" })),
            React.createElement(ColorPalette, { key: this.colorPaletteKey, onClick: onColorClick, onHover: onColorHover, selectedColor: selectedColor })));
    }
}
StatusPicker.defaultProps = {
    autoFocus: true,
};
//# sourceMappingURL=StatusPicker.js.map