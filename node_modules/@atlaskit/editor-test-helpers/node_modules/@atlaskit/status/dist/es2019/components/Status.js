import React from 'react';
import { PureComponent } from 'react';
import Lozenge from '@atlaskit/lozenge';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { createStatusAnalyticsAndFire } from './analytics';
import { ANALYTICS_HOVER_DELAY } from './constants';
const colorToLozengeAppearanceMap = {
    neutral: 'default',
    purple: 'new',
    blue: 'inprogress',
    red: 'removed',
    yellow: 'moved',
    green: 'success',
};
const DEFAULT_APPEARANCE = 'default';
const MAX_WIDTH = 200;
class StatusInternal extends PureComponent {
    constructor() {
        super(...arguments);
        this.hoverStartTime = 0;
        this.handleMouseEnter = (_e) => {
            this.hoverStartTime = Date.now();
        };
        this.handleMouseLeave = (_e) => {
            const { onHover } = this.props;
            const delay = Date.now() - this.hoverStartTime;
            if (delay >= ANALYTICS_HOVER_DELAY && onHover) {
                onHover();
            }
            this.hoverStartTime = 0;
        };
    }
    componentWillUnmount() {
        this.hoverStartTime = 0;
    }
    render() {
        const { text, color, style, onClick } = this.props;
        if (text.trim().length === 0) {
            return null;
        }
        const appearance = colorToLozengeAppearanceMap[color] || DEFAULT_APPEARANCE;
        // Note: ommitted data-local-id attribute to avoid copying/pasting the same localId
        return (React.createElement("span", { className: "status-lozenge-span", 
            // Using title here as `@atlaskit/tooltip` adds too much overhead
            title: text, onClick: onClick, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave, "data-node-type": "status", "data-color": color, "data-style": style },
            React.createElement(Lozenge, { appearance: appearance, maxWidth: MAX_WIDTH }, text)));
    }
}
StatusInternal.displayName = 'StatusInternal';
export const Status = withAnalyticsEvents({
    onClick: (createEvent, props) => {
        const { localId } = props;
        return createStatusAnalyticsAndFire(createEvent)({
            action: 'clicked',
            actionSubject: 'statusLozenge',
            attributes: {
                localId,
            },
        });
    },
    onHover: (createEvent, props) => {
        const { localId } = props;
        return createStatusAnalyticsAndFire(createEvent)({
            action: 'hovered',
            actionSubject: 'statusLozenge',
            attributes: {
                localId,
            },
        });
    },
})(StatusInternal);
//# sourceMappingURL=Status.js.map