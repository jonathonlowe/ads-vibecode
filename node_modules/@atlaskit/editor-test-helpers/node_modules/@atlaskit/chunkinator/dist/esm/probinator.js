import { __assign } from "tslib";
import { bufferCount } from 'rxjs/operators/bufferCount';
import { concatMap } from 'rxjs/operators/concatMap';
import { from } from 'rxjs/observable/from';
export function probinator(hashedBlob$, _a) {
    var batchSize = _a.batchSize, prober = _a.prober;
    return hashedBlob$.pipe(bufferCount(batchSize), concatMap(function (hashedBlobs) {
        return prober(hashedBlobs).then(function (probes) {
            return hashedBlobs.map(function (hashedBlob, index) { return (__assign(__assign({}, hashedBlob), { exists: probes[index] })); });
        });
    }), concatMap(function (probedBlobs) { return from(probedBlobs); }));
}
//# sourceMappingURL=probinator.js.map