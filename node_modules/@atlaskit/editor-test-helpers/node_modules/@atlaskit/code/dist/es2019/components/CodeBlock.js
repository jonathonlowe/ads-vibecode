import React, { PureComponent } from 'react';
import { normalizeLanguage } from '../supportedLanguages';
import { applyTheme } from '../themes/themeBuilder';
import Code from './Code';
const LANGUAGE_FALLBACK = 'text';
export default class CodeBlock extends PureComponent {
    constructor() {
        super(...arguments);
        this.handleCopy = (event) => {
            /**
             * We don't want to copy the markup after highlighting, but rather the preformatted text in the selection
             */
            const data = event.nativeEvent.clipboardData;
            if (data) {
                event.preventDefault();
                const selection = window.getSelection();
                if (selection === null) {
                    return;
                }
                const selectedText = selection.toString();
                const document = `<!doctype html><html><head></head><body><pre>${selectedText}</pre></body></html>`;
                data.clearData();
                data.setData('text/html', document);
                data.setData('text/plain', selectedText);
            }
        };
    }
    render() {
        const { lineNumberContainerStyle, codeBlockStyle, codeContainerStyle, } = applyTheme(this.props.theme);
        const props = {
            language: normalizeLanguage(this.props.language || LANGUAGE_FALLBACK),
            codeStyle: codeBlockStyle,
            showLineNumbers: this.props.showLineNumbers,
            codeTagProps: { style: codeContainerStyle },
            lineNumberContainerStyle,
            text: this.props.text.toString(),
            highlight: this.props.highlight,
        };
        return React.createElement(Code, Object.assign({}, props));
    }
}
CodeBlock.displayName = 'CodeBlock';
CodeBlock.defaultProps = {
    showLineNumbers: true,
    language: LANGUAGE_FALLBACK,
    theme: {},
    highlight: '',
};
//# sourceMappingURL=CodeBlock.js.map