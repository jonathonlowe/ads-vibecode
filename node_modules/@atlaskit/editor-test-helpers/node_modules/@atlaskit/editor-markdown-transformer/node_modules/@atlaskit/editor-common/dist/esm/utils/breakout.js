import { akEditorBreakoutPadding, akEditorDefaultLayoutWidth, akEditorFullWidthLayoutWidth, akEditorWideLayoutWidth, breakoutWideScaleRatio, } from '../styles/consts';
import { mapBreakpointToLayoutMaxWidth as mapBreakpointToLayoutMaxWidthExported } from '../ui/BaseTheme';
import { getBreakpoint as getBreakpointExported } from '../ui/WidthProvider';
/**
 * Variables required to get better naming and
 * cleaner context for breakout ssr inline script.
 *
 * E.g.:
 * – getBreakpoint vs ModuleName.getBreakpoint
 * – breakoutConsts.padding vs consts_1.akEditorBreakoutPadding
 *
 * TODO: Clean this up after: https://product-fabric.atlassian.net/browse/ED-8942
 */
var mapBreakpointToLayoutMaxWidth = mapBreakpointToLayoutMaxWidthExported;
var getBreakpoint = getBreakpointExported;
var breakoutConsts = {
    padding: akEditorBreakoutPadding,
    defaultLayoutWidth: akEditorDefaultLayoutWidth,
    wideScaleRatio: breakoutWideScaleRatio,
    fullWidthLayoutWidth: akEditorFullWidthLayoutWidth,
    wideLayoutWidth: akEditorWideLayoutWidth,
};
var calcBreakoutWidth = function (layout, containerWidth) {
    var effectiveFullWidth = containerWidth - breakoutConsts.padding;
    switch (layout) {
        case 'full-width':
            return Math.min(effectiveFullWidth, breakoutConsts.fullWidthLayoutWidth) + "px";
        case 'wide':
            return calcWideWidth(containerWidth);
        default:
            return '100%';
    }
};
var calcWideWidth = function (containerWidth, maxWidth, fallback) {
    if (containerWidth === void 0) { containerWidth = breakoutConsts.defaultLayoutWidth; }
    if (maxWidth === void 0) { maxWidth = Infinity; }
    if (fallback === void 0) { fallback = '100%'; }
    var effectiveFullWidth = containerWidth - breakoutConsts.padding;
    var layoutMaxWidth = mapBreakpointToLayoutMaxWidth(getBreakpoint(containerWidth));
    var wideWidth = Math.min(Math.ceil(layoutMaxWidth * breakoutConsts.wideScaleRatio), effectiveFullWidth);
    return layoutMaxWidth > wideWidth
        ? fallback
        : Math.min(maxWidth, wideWidth) + "px";
};
export var absoluteBreakoutWidth = function (layout, containerWidth) {
    var breakoutWidth = calcBreakoutWidth(layout, containerWidth);
    // If it's percent, map to max layout size
    if (breakoutWidth.endsWith('%')) {
        switch (layout) {
            case 'full-width':
                return akEditorFullWidthLayoutWidth;
            case 'wide':
                return akEditorWideLayoutWidth;
            default:
                return mapBreakpointToLayoutMaxWidth(getBreakpoint(containerWidth));
        }
    }
    return parseInt(breakoutWidth, 10);
};
export { calcBreakoutWidth, calcWideWidth, breakoutConsts };
//# sourceMappingURL=breakout.js.map