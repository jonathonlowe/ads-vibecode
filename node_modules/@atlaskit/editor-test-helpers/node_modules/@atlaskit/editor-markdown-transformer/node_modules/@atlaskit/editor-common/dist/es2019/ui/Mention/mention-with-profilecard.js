import React, { PureComponent } from 'react';
import { findDOMNode } from 'react-dom';
import { ResourcedMention } from '@atlaskit/mention';
import ProfileCard from '@atlaskit/profilecard';
import Popup from '../Popup';
import withOuterListeners from '../with-outer-listeners';
const ProfilecardResourcedWithListeners = withOuterListeners(ProfileCard);
export default class MentionWithProfileCard extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            target: null,
            visible: false,
            popupAlignX: 'left',
            popupAlignY: 'top',
        };
        this.handleRef = (target) => {
            this.setState({ target });
        };
        this.handleMentionNodeRef = (component) => {
            if (!component) {
                this.domNode = null;
            }
            else {
                this.domNode = findDOMNode(component);
            }
        };
        this.showProfilecard = (event) => {
            if (!this.domNode) {
                return;
            }
            event.stopPropagation();
            const [popupAlignX, popupAlignY] = this.calculateLayerPosition();
            this.setState({
                popupAlignX,
                popupAlignY,
                visible: true,
            });
        };
        this.hideProfilecard = () => {
            this.setState({ visible: false });
        };
    }
    calculateLayerPosition() {
        const domNodeCentreCoords = this.getDomNodeCenterCoords();
        const visibleAreaCentreCoords = this.getVisibleAreaCentreCoords();
        const popupAlignY = domNodeCentreCoords.y > visibleAreaCentreCoords.y ? 'top' : 'bottom';
        const popupAlignX = domNodeCentreCoords.x > visibleAreaCentreCoords.x ? 'right' : 'left';
        return [popupAlignX, popupAlignY];
    }
    getDomNodeCenterCoords() {
        const rect = this.domNode.getBoundingClientRect();
        return {
            x: rect.left + rect.width / 2,
            y: rect.top + rect.height / 2,
        };
    }
    getVisibleAreaCentreCoords() {
        return {
            x: window.innerWidth / 2,
            y: window.innerHeight / 2,
        };
    }
    getActions(id, text, accessLevel) {
        const { profilecardProvider } = this.props;
        const actions = profilecardProvider.getActions(id, text, accessLevel);
        return actions.map(action => {
            return {
                ...action,
                callback: () => {
                    this.setState({ visible: false });
                    if (action && action.callback) {
                        action.callback();
                    }
                },
            };
        });
    }
    render() {
        const { accessLevel, id, mentionProvider, profilecardProvider, text, onClick, onMouseEnter, onMouseLeave, portal, } = this.props;
        const { popupAlignX, popupAlignY, target, visible } = this.state;
        const { cloudId, resourceClient } = profilecardProvider;
        return (React.createElement("span", { ref: this.handleRef, onClick: this.showProfilecard },
            React.createElement(ResourcedMention, { ref: this.handleMentionNodeRef, id: id, text: text, accessLevel: accessLevel, mentionProvider: mentionProvider, onClick: onClick, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }),
            target && portal && visible && (React.createElement(Popup, { offset: [0, 8], target: target, mountTo: portal, alignX: popupAlignX, alignY: popupAlignY },
                React.createElement(ProfilecardResourcedWithListeners, { handleClickOutside: this.hideProfilecard, handleEscapeKeydown: this.hideProfilecard, cloudId: cloudId, userId: id, resourceClient: resourceClient, actions: this.getActions(id, text, accessLevel) })))));
    }
}
//# sourceMappingURL=mention-with-profilecard.js.map