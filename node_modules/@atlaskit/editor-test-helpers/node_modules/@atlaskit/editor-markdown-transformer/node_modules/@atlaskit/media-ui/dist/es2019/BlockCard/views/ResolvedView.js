/** @jsx jsx */
import { jsx } from '@emotion/core';
import Lozenge from '@atlaskit/lozenge';
import { Frame } from '../components/Frame';
import { Thumbnail } from '../components/Thumbnail';
import { Provider } from '../components/Provider';
import { Name } from '../components/Name';
import { Byline } from '../components/Byline';
import { ActionList } from '../components/ActionList';
import { CollaboratorList } from '../components/CollaboratorList';
import { Icon } from '../components/Icon';
import { Content } from '../components/Content';
import { MetadataList } from '../components/MetadataList';
import { LozengeBlockWrapper } from '../../InlineCard/IconAndTitleLayout/styled';
import { ContentHeader } from '../components/ContentHeader';
import { ContentFooter } from '../components/ContentFooter';
import { gs } from '../utils';
import { handleClickCommon } from '../utils/handlers';
export const ResolvedView = ({ icon = {}, actions = [], thumbnail, context = { text: '' }, title = '', isSelected = false, users = [], handleAvatarClick = () => { }, handleMoreAvatarsClick = () => { }, onClick = () => { }, link = '', byline = '', lozenge, details = [], testId = 'block-card-resolved-view', showActions = true, }) => {
    const resolvedMetadata = details.length > 0 ? (jsx(MetadataList, { testId: testId ? `${testId}-meta` : undefined, items: details })) : (undefined);
    const resolvedByline = (jsx(Byline, { testId: testId ? `${testId}-by` : undefined }, byline));
    const handleClick = (event) => handleClickCommon(event, onClick);
    const hasActions = showActions && actions.length > 0;
    return (jsx(Frame, { isSelected: isSelected, testId: testId },
        jsx(Content, null,
            jsx("div", null,
                jsx("div", { css: {
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'flex-start',
                    } },
                    jsx(ContentHeader, { onClick: handleClick, link: link },
                        jsx(Icon, Object.assign({}, icon)),
                        jsx(Name, { name: title }),
                        lozenge && (jsx(LozengeBlockWrapper, { css: {
                                height: gs(2.5),
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                            } },
                            jsx(Lozenge, Object.assign({}, lozenge), lozenge.text)))),
                    jsx(CollaboratorList, { items: users, handleAvatarClick: handleAvatarClick, handleMoreAvatarsClick: handleMoreAvatarsClick })),
                resolvedByline,
                resolvedMetadata),
            jsx(ContentFooter, { hasSpaceBetween: hasActions },
                jsx(Provider, { name: context.text, icon: context.icon }),
                hasActions && jsx(ActionList, { items: actions }))),
        thumbnail ? (jsx(Thumbnail, { src: thumbnail, testId: testId ? `${testId}-thumb` : undefined })) : null));
};
//# sourceMappingURL=ResolvedView.js.map