import { buildAction } from './manifest-helpers';
export const groupBy = (arr, attr, keyRenamer) => arr.reduce((acc, item) => {
    acc[keyRenamer(item[attr])] = item;
    return acc;
}, {});
export const buildMenuItem = (manifest, extensionModule) => {
    const title = extensionModule.title || manifest.title;
    const key = `${manifest.key}:${extensionModule.key}`;
    const node = buildAction(extensionModule.action, manifest);
    if (!node) {
        throw new Error(`Couldn't find any action for ${title} (${key})`);
    }
    return {
        key,
        title,
        extensionType: manifest.type,
        keywords: extensionModule.keywords || manifest.keywords || [],
        description: extensionModule.description || manifest.description,
        icon: extensionModule.icon || manifest.icons['48'],
        node,
    };
};
export const filterByModule = (manifest, moduleType) => {
    const modules = manifest.modules[moduleType] || [];
    return modules.map(extensionModule => buildMenuItem(manifest, extensionModule));
};
const getGroupedMenuItems = (extensions, moduleType) => {
    return extensions.reduce((acc, extension) => {
        const items = filterByModule(extension, moduleType);
        return {
            ...acc,
            ...groupBy(items, 'key', key => key),
        };
    }, {});
};
export const getItemsFromModule = (extensions, moduleType, transformFunction) => {
    const groupedMenuItems = getGroupedMenuItems(extensions, moduleType);
    return Object.keys(groupedMenuItems).map((key, index) => {
        return transformFunction(groupedMenuItems[key], index);
    });
};
//# sourceMappingURL=menu-helpers.js.map