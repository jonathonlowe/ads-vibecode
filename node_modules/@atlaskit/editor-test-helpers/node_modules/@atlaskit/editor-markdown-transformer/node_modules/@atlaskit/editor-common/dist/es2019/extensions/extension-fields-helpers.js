const assertFieldHandlerLink = (handlerLink) => {
    if (!handlerLink.type) {
        throw new Error(`Missing type!`);
    }
};
const assertManifestFieldTypes = (manifest, fieldType) => {
    if (!manifest.modules.fields) {
        throw new Error(`No definition of fields for extension type "${manifest.type}" and key "${manifest.key}"!`);
    }
    if (!manifest.modules.fields[fieldType]) {
        throw new Error(`No definition for field type "${fieldType}" on manifest for extension with type "${manifest.type}" and key "${manifest.key}"!`);
    }
};
async function getExtensionModuleField(manifest, fieldType, handlerLink) {
    assertFieldHandlerLink(handlerLink);
    assertManifestFieldTypes(manifest, fieldType);
    const { type } = handlerLink;
    const handler = manifest.modules.fields[fieldType][type];
    if (!handler) {
        throw new Error(`No handler of type "${type}" for extension type "${manifest.type}" and key "${manifest.key}"!`);
    }
    return handler;
}
export async function getFieldResolver(manifest, handlerLink) {
    const customFieldHandler = await getExtensionModuleField(manifest, 'custom', handlerLink);
    return customFieldHandler.resolver;
}
export async function getFieldSerializer(manifest, handlerLink) {
    const fieldsetHandler = await getExtensionModuleField(manifest, 'fieldset', handlerLink);
    return fieldsetHandler.serializer;
}
export async function getFieldDeserializer(manifest, handlerLink) {
    const fieldsetHandler = await getExtensionModuleField(manifest, 'fieldset', handlerLink);
    return fieldsetHandler.deserializer;
}
//# sourceMappingURL=extension-fields-helpers.js.map