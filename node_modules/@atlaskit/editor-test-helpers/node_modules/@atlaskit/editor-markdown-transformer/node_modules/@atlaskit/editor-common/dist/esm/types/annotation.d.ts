/// <reference types="node" />
import EventEmitter from 'events';
import { AnnotationId, AnnotationMarkStates, AnnotationTypes } from '@atlaskit/adf-schema';
export interface AnnotationState<Type, State> {
    annotationType: Type;
    id: AnnotationId;
    state: State | null;
}
export declare enum AnnotationUpdateEvent {
    SET_ANNOTATION_FOCUS = "SET_ANNOTATION_FOCUS",
    SET_ANNOTATION_STATE = "SET_ANNOTATION_STATE",
    REMOVE_ANNOTATION_FOCUS = "REMOVE_ANNOTATION_FOCUS"
}
export declare type AnnotationUpdateEventPayloads = {
    [AnnotationUpdateEvent.SET_ANNOTATION_FOCUS]: {
        annotationId: AnnotationId;
    };
    [AnnotationUpdateEvent.SET_ANNOTATION_STATE]: {
        [AnnotationId: string]: AnnotationMarkStates;
    };
    ['resolve']: AnnotationId;
    ['unresolve']: AnnotationId;
};
declare type AnnotationUpdateEventPayloadsWithoutPayload = AnnotationUpdateEvent.REMOVE_ANNOTATION_FOCUS;
declare type EventTypes = keyof AnnotationUpdateEventPayloads | AnnotationUpdateEventPayloadsWithoutPayload;
export declare class AnnotationUpdateEmitter {
    private emitter;
    emit<T extends EventTypes>(event: T, ...payload: T extends keyof AnnotationUpdateEventPayloads ? [AnnotationUpdateEventPayloads[T]] : []): boolean;
    on<T extends EventTypes>(event: T, listener: (payload: T extends keyof AnnotationUpdateEventPayloads ? AnnotationUpdateEventPayloads[T] : []) => void): EventEmitter;
    off<T extends EventTypes>(event: T, listener: (payload: T extends keyof AnnotationUpdateEventPayloads ? AnnotationUpdateEventPayloads[T] : []) => void): EventEmitter;
    listeners(event: EventTypes): Function[];
}
export declare type AnnotationProviders<State> = {
    [AnnotationTypes.INLINE_COMMENT]: {
        getState: (annotationIds: AnnotationId[]) => Promise<AnnotationState<AnnotationTypes.INLINE_COMMENT, State>[]>;
        updateSubscriber?: AnnotationUpdateEmitter;
    };
};
export {};
