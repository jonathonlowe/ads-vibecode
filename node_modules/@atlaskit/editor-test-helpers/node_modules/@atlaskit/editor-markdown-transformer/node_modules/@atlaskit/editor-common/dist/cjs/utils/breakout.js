"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var consts_1 = require("../styles/consts");
var BaseTheme_1 = require("../ui/BaseTheme");
var WidthProvider_1 = require("../ui/WidthProvider");
/**
 * Variables required to get better naming and
 * cleaner context for breakout ssr inline script.
 *
 * E.g.:
 * – getBreakpoint vs ModuleName.getBreakpoint
 * – breakoutConsts.padding vs consts_1.akEditorBreakoutPadding
 *
 * TODO: Clean this up after: https://product-fabric.atlassian.net/browse/ED-8942
 */
var mapBreakpointToLayoutMaxWidth = BaseTheme_1.mapBreakpointToLayoutMaxWidth;
var getBreakpoint = WidthProvider_1.getBreakpoint;
var breakoutConsts = {
    padding: consts_1.akEditorBreakoutPadding,
    defaultLayoutWidth: consts_1.akEditorDefaultLayoutWidth,
    wideScaleRatio: consts_1.breakoutWideScaleRatio,
    fullWidthLayoutWidth: consts_1.akEditorFullWidthLayoutWidth,
    wideLayoutWidth: consts_1.akEditorWideLayoutWidth,
};
exports.breakoutConsts = breakoutConsts;
var calcBreakoutWidth = function (layout, containerWidth) {
    var effectiveFullWidth = containerWidth - breakoutConsts.padding;
    switch (layout) {
        case 'full-width':
            return Math.min(effectiveFullWidth, breakoutConsts.fullWidthLayoutWidth) + "px";
        case 'wide':
            return calcWideWidth(containerWidth);
        default:
            return '100%';
    }
};
exports.calcBreakoutWidth = calcBreakoutWidth;
var calcWideWidth = function (containerWidth, maxWidth, fallback) {
    if (containerWidth === void 0) { containerWidth = breakoutConsts.defaultLayoutWidth; }
    if (maxWidth === void 0) { maxWidth = Infinity; }
    if (fallback === void 0) { fallback = '100%'; }
    var effectiveFullWidth = containerWidth - breakoutConsts.padding;
    var layoutMaxWidth = mapBreakpointToLayoutMaxWidth(getBreakpoint(containerWidth));
    var wideWidth = Math.min(Math.ceil(layoutMaxWidth * breakoutConsts.wideScaleRatio), effectiveFullWidth);
    return layoutMaxWidth > wideWidth
        ? fallback
        : Math.min(maxWidth, wideWidth) + "px";
};
exports.calcWideWidth = calcWideWidth;
exports.absoluteBreakoutWidth = function (layout, containerWidth) {
    var breakoutWidth = calcBreakoutWidth(layout, containerWidth);
    // If it's percent, map to max layout size
    if (breakoutWidth.endsWith('%')) {
        switch (layout) {
            case 'full-width':
                return consts_1.akEditorFullWidthLayoutWidth;
            case 'wide':
                return consts_1.akEditorWideLayoutWidth;
            default:
                return mapBreakpointToLayoutMaxWidth(getBreakpoint(containerWidth));
        }
    }
    return parseInt(breakoutWidth, 10);
};
//# sourceMappingURL=breakout.js.map