import React from 'react';
import rafSchedule from 'raf-schd';
import styled from 'styled-components';
import { WidthObserver } from '@atlaskit/width-detector';
const SCROLLBAR_WIDTH = 30;
export function getBreakpoint(width = 0) {
    const MAX_S = 1266;
    const MAX_M = 2146;
    if (width >= MAX_S && width < MAX_M) {
        return 'M';
    }
    else if (width >= MAX_M) {
        return 'L';
    }
    return 'S';
}
export function createWidthContext(width = 0) {
    return { width, breakpoint: getBreakpoint(width) };
}
const { Provider, Consumer } = React.createContext(createWidthContext());
const RelativeContainer = React.memo(styled.div `
  position: relative;
  width: 100%;
`);
export class WidthProvider extends React.Component {
    constructor(props) {
        super(props);
        this.state = { width: 0 };
        this.setWidth = rafSchedule((width) => {
            // Ignore changes that are less than SCROLLBAR_WIDTH, otherwise it can cause infinite re-scaling
            if (Math.abs(this.state.width - width) < SCROLLBAR_WIDTH) {
                return;
            }
            this.setState({ width });
        });
        this.state.width = document.body.offsetWidth;
    }
    render() {
        return (React.createElement(RelativeContainer, { className: this.props.className },
            React.createElement(WidthObserver, { setWidth: this.setWidth, offscreen: true }),
            React.createElement(Provider, { value: createWidthContext(this.state.width) }, this.props.children)));
    }
}
export { Consumer as WidthConsumer };
//# sourceMappingURL=index.js.map