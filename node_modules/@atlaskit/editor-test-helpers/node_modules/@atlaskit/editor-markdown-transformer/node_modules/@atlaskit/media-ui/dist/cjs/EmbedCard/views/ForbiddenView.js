"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var UnresolvedView_1 = require("./UnresolvedView");
var constants_1 = require("../../BlockCard/utils/constants");
var ExpandedFrame_1 = require("../components/ExpandedFrame");
var ImageIcon_1 = require("../components/ImageIcon");
exports.EmbedCardForbiddenView = function (_a) {
    var link = _a.link, context = _a.context, isSelected = _a.isSelected, _b = _a.testId, testId = _b === void 0 ? 'embed-card-forbidden-view' : _b, onAuthorise = _a.onAuthorise, inheritDimensions = _a.inheritDimensions, onClick = _a.onClick;
    var icon = context && context.icon && (react_1.default.createElement(ImageIcon_1.ImageIcon, { src: typeof context.icon === 'string' ? context.icon : undefined }));
    return (react_1.default.createElement(ExpandedFrame_1.ExpandedFrame, { href: link, icon: icon, text: context && context.text, isVisible: true, isSelected: isSelected, inheritDimensions: inheritDimensions, onClick: onClick, testId: testId },
        react_1.default.createElement(UnresolvedView_1.EmbedCardUnresolvedView, { image: constants_1.LockImage, title: "invalid_permissions", description: "invalid_permissions_description", context: context && context.text, button: {
                appearance: 'default',
                text: 'try_another_account',
            }, onClick: onAuthorise, testId: testId })));
};
//# sourceMappingURL=ForbiddenView.js.map