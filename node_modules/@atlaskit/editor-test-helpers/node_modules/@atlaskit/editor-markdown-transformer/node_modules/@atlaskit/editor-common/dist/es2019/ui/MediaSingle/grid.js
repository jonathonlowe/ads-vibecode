const handleMargin = 12;
const gutterSize = handleMargin * 2;
const validWidthModes = [
    'center',
    'wrap-left',
    'wrap-right',
    'align-start',
    'align-end',
];
export const layoutSupportsWidth = (layout) => validWidthModes.indexOf(layout) > -1;
export function calcPxFromColumns(columns, lineLength, gridSize) {
    const maxWidth = lineLength + gutterSize;
    return (maxWidth / gridSize) * columns - gutterSize;
}
export function calcColumnsFromPx(width, lineLength, gridSize) {
    const maxWidth = lineLength + gutterSize;
    return ((width + gutterSize) * gridSize) / maxWidth;
}
export function calcPxFromPct(pct, lineLength) {
    const maxWidth = lineLength + gutterSize;
    return maxWidth * pct - gutterSize;
}
export function calcPctFromPx(width, lineLength) {
    const maxWidth = lineLength + gutterSize;
    return (width + gutterSize) / maxWidth;
}
export const snapToGrid = (gridWidth, width, height, lineLength, gridSize) => {
    const pxWidth = calcPxFromPct(gridWidth / 100, lineLength);
    const columnSpan = Math.round(calcColumnsFromPx(pxWidth, lineLength, gridSize));
    const alignedWidth = calcPxFromColumns(columnSpan, lineLength, gridSize);
    return {
        height: (height / width) * alignedWidth,
        width: alignedWidth,
    };
};
//# sourceMappingURL=grid.js.map