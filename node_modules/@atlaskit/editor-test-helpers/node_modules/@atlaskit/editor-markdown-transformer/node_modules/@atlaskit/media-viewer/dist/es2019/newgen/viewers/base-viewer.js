import React from 'react';
import { FormattedMessage } from 'react-intl';
import { messages } from '@atlaskit/media-ui';
import deepEqual from 'deep-equal';
import { globalMediaEventEmitter, } from '@atlaskit/media-client';
import ErrorMessage from '../error';
import { Spinner } from '../loading';
import { ErrorViewDownloadButton } from '../download';
export class BaseViewer extends React.Component {
    constructor() {
        super(...arguments);
        this.state = this.getInitialState();
        this.onMediaDisplayed = () => {
            const { item } = this.props;
            globalMediaEventEmitter.emit('media-viewed', {
                fileId: item.id,
                viewingLevel: 'full',
            });
        };
    }
    componentDidMount() {
        this.init();
    }
    componentWillUnmount() {
        this.release();
    }
    // NOTE: We've moved parts of the logic to reset a component into this method
    // to optimise the performance. Resetting the state before the `componentDidUpdate`
    // lifecycle event allows us avoid one additional render cycle.
    // However, this lifecycle method might eventually be deprecated, so be careful
    // when working with it.
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.needsReset(nextProps, this.props)) {
            this.release();
            this.setState(this.initialState);
        }
    }
    componentDidUpdate(prevProps) {
        if (this.needsReset(prevProps, this.props)) {
            this.init();
        }
    }
    render() {
        return this.state.content.match({
            pending: () => React.createElement(Spinner, null),
            successful: content => this.renderSuccessful(content),
            failed: err => (React.createElement(ErrorMessage, { error: err },
                React.createElement("p", null,
                    React.createElement(FormattedMessage, Object.assign({}, messages.try_downloading_file))),
                this.renderDownloadButton(err))),
        });
    }
    // Accessing abstract getters in a constructor is not allowed
    getInitialState() {
        return this.initialState;
    }
    renderDownloadButton(err) {
        const { item, mediaClient, collectionName } = this.props;
        return (React.createElement(ErrorViewDownloadButton, { state: item, mediaClient: mediaClient, err: err, collectionName: collectionName }));
    }
    needsReset(propsA, propsB) {
        return (!deepEqual(propsA.item, propsB.item) ||
            propsA.mediaClient !== propsB.mediaClient ||
            propsA.collectionName !== propsB.collectionName);
    }
}
//# sourceMappingURL=base-viewer.js.map