import { Signal } from '../signal';
export class ContextHolder {
    constructor(drawingArea) {
        this.contextLost = new Signal();
        this.contextRestored = new Signal();
        this.contextLostListener = () => this.contextLost.emit({});
        this.canvas = drawingArea.canvas;
        const gl = ContextHolder.getContext(this.canvas);
        if (gl) {
            this.gl = gl;
        }
        else {
            // eslint-disable-next-line no-console
            console.error('webgl is not supported');
            throw new Error('WEBGL is not supported');
        }
        this.contextRestoredListener = () => {
            this.contextRestored.emit(drawingArea.outputSize);
        };
        this.canvas.addEventListener('webglcontextlost', this.contextLostListener);
        this.canvas.addEventListener('webglcontextrestored', this.contextRestoredListener);
    }
    unload() {
        this.canvas.removeEventListener('webglcontextlost', this.contextLostListener);
        this.canvas.removeEventListener('webglcontextrestored', this.contextRestoredListener);
    }
    static getContext(canvas) {
        return (canvas.getContext('webgl') ||
            canvas.getContext('experimental-webgl'));
    }
}
//# sourceMappingURL=contextHolder.js.map