"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var styled_components_1 = require("styled-components");
var constants_1 = require("@atlaskit/theme/constants");
var styles_1 = require("../../styles");
var WidthProvider_1 = require("../WidthProvider");
function mapBreakpointToFontSize(breakpoint) {
    switch (breakpoint) {
        case 'M':
            return constants_1.fontSize() + 2;
        case 'L':
            return constants_1.fontSize() + 4;
        default:
            return constants_1.fontSize();
    }
}
function mapBreakpointToLayoutMaxWidth(breakpoint) {
    switch (breakpoint) {
        case 'M':
            return 760;
        case 'L':
            return 850;
        default:
            return 680;
    }
}
exports.mapBreakpointToLayoutMaxWidth = mapBreakpointToLayoutMaxWidth;
function BaseThemeWrapper(_a) {
    var breakpoint = _a.breakpoint, dynamicTextSizing = _a.dynamicTextSizing, baseFontSize = _a.baseFontSize, children = _a.children;
    var memoizedTheme = react_1.useMemo(function () { return ({
        baseFontSize: dynamicTextSizing
            ? mapBreakpointToFontSize(breakpoint)
            : baseFontSize || mapBreakpointToFontSize('S'),
        layoutMaxWidth: dynamicTextSizing
            ? mapBreakpointToLayoutMaxWidth(breakpoint)
            : styles_1.akEditorDefaultLayoutWidth,
    }); }, [breakpoint, dynamicTextSizing, baseFontSize]);
    return react_1.default.createElement(styled_components_1.ThemeProvider, { theme: memoizedTheme }, children);
}
exports.BaseThemeWrapper = BaseThemeWrapper;
function BaseTheme(_a) {
    var children = _a.children, dynamicTextSizing = _a.dynamicTextSizing, baseFontSize = _a.baseFontSize;
    return (react_1.default.createElement(WidthProvider_1.WidthConsumer, null, function (_a) {
        var breakpoint = _a.breakpoint;
        return (react_1.default.createElement(BaseThemeWrapper, { dynamicTextSizing: dynamicTextSizing, breakpoint: breakpoint, baseFontSize: baseFontSize },
            react_1.default.createElement(react_1.default.Fragment, null, children)));
    }));
}
exports.BaseTheme = BaseTheme;
//# sourceMappingURL=index.js.map