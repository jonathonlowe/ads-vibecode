"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var browser_1 = tslib_1.__importDefault(require("../../utils/browser"));
exports.shadowClassNames = {
    RIGHT_SHADOW: 'right-shadow',
    LEFT_SHADOW: 'left-shadow',
};
var isIE11 = browser_1.default.ie_version === 11;
function overflowShadow(Component, options) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(OverflowShadow, _super);
        function OverflowShadow() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                showLeftShadow: false,
                showRightShadow: false,
            };
            _this.handleScroll = function (event) {
                if (!_this.overflowContainer || event.target !== _this.overflowContainer) {
                    return;
                }
                _this.updateShadows();
            };
            _this.updateShadows = function () {
                _this.setState(function (prevState) {
                    if (!_this.overflowContainer) {
                        return;
                    }
                    var diff = _this.calcOverflowDiff();
                    var showRightShadow = diff > 0 && diff > _this.overflowContainer.scrollLeft;
                    var showLeftShadow = _this.showLeftShadow(_this.overflowContainer);
                    if (showLeftShadow !== prevState.showLeftShadow ||
                        showRightShadow !== _this.state.showRightShadow) {
                        return {
                            showLeftShadow: showLeftShadow,
                            showRightShadow: showRightShadow,
                        };
                    }
                    return null;
                });
            };
            _this.showLeftShadow = function (overflowContainer) {
                return !!overflowContainer && overflowContainer.scrollLeft > 0;
            };
            _this.calcOverflowDiff = function () {
                if (!_this.overflowContainer) {
                    return 0;
                }
                _this.diff = _this.calcScrollableWidth();
                return _this.diff - _this.overflowContainer.offsetWidth;
            };
            _this.calcScrollableWidth = function () {
                if (!_this.scrollable && _this.overflowContainer) {
                    return _this.overflowContainer.scrollWidth;
                }
                if (!_this.scrollable) {
                    return 0;
                }
                var width = 0;
                for (var i = 0; i < _this.scrollable.length; i++) {
                    var scrollableElement = _this.scrollable[i];
                    width += scrollableElement.scrollWidth;
                }
                return width;
            };
            _this.handleContainer = function (container) {
                if (!container || _this.container) {
                    return;
                }
                _this.container = container;
                _this.overflowContainer = container.querySelector(options.overflowSelector);
                if (!_this.overflowContainer) {
                    _this.overflowContainer = container;
                }
                if (options.scrollableSelector) {
                    _this.scrollable = container.querySelectorAll(options.scrollableSelector);
                }
                _this.updateShadows();
                if (!isIE11) {
                    _this.overflowContainer.addEventListener('scroll', _this.handleScroll);
                }
            };
            return _this;
        }
        OverflowShadow.prototype.componentWillUnmount = function () {
            if (this.overflowContainer && !isIE11) {
                this.overflowContainer.removeEventListener('scroll', this.handleScroll);
            }
            this.updateShadows();
        };
        OverflowShadow.prototype.componentDidUpdate = function () {
            this.updateShadows();
        };
        OverflowShadow.prototype.render = function () {
            var _a = this.state, showLeftShadow = _a.showLeftShadow, showRightShadow = _a.showRightShadow;
            var classNames = [
                showRightShadow && exports.shadowClassNames.RIGHT_SHADOW,
                showLeftShadow && exports.shadowClassNames.LEFT_SHADOW,
            ]
                .filter(Boolean)
                .join(' ');
            return (react_1.default.createElement(Component, tslib_1.__assign({ handleRef: this.handleContainer, shadowClassNames: classNames }, this.props)));
        };
        return OverflowShadow;
    }(react_1.default.Component));
}
exports.default = overflowShadow;
//# sourceMappingURL=index.js.map