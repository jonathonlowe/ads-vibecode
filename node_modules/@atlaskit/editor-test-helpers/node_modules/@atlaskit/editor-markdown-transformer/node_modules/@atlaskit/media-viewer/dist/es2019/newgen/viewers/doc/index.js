import React from 'react';
import { Outcome } from '../../domain';
import { createError } from '../../error';
import { Spinner } from '../../loading';
import { BaseViewer } from '../base-viewer';
import { getObjectUrlFromFileState } from '../../utils/getObjectUrlFromFileState';
const moduleLoader = () => import(
/* webpackChunkName:"@atlaskit-internal_media-viewer-pdf-viewer" */ './pdfRenderer');
const componentLoader = () => moduleLoader().then(module => module.PDFRenderer);
export class DocViewer extends BaseViewer {
    get initialState() {
        return {
            content: Outcome.pending(),
        };
    }
    async init() {
        if (!DocViewer.PDFComponent) {
            await this.loadDocViewer();
        }
        const { item, mediaClient, collectionName, onError } = this.props;
        if (item.status === 'processed') {
            try {
                const src = await mediaClient.file.getArtifactURL(item.artifacts, 'document.pdf', collectionName);
                this.onMediaDisplayed();
                this.setState({
                    content: Outcome.successful(src),
                });
            }
            catch (err) {
                this.setState({
                    content: Outcome.failed(createError('previewFailed', err, item)),
                });
                if (onError) {
                    onError(err);
                }
            }
        }
        else {
            const src = await getObjectUrlFromFileState(item);
            if (!src) {
                this.setState({
                    content: Outcome.pending(),
                });
                return;
            }
            this.setState({
                content: Outcome.successful(src),
            });
        }
    }
    async loadDocViewer() {
        DocViewer.PDFComponent = await componentLoader();
        this.forceUpdate();
    }
    release() {
        const { content } = this.state;
        if (!content.data) {
            return;
        }
        URL.revokeObjectURL(content.data);
    }
    renderSuccessful(content) {
        const { onClose, onSuccess, onError, isSidebarVisible } = this.props;
        const { PDFComponent } = DocViewer;
        if (!PDFComponent) {
            return React.createElement(Spinner, null);
        }
        return (React.createElement(PDFComponent, { src: content, onSuccess: onSuccess, onError: onError, onClose: onClose, isSidebarVisible: isSidebarVisible }));
    }
}
//# sourceMappingURL=index.js.map