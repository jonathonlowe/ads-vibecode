/** @jsx jsx */
import { useCallback, } from 'react';
import { css, jsx } from '@emotion/core';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { B200, background, N70A } from '@atlaskit/theme/colors';
import AvatarImage from './AvatarImage';
import { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';
import { PresenceWrapper } from './Presence';
import { StatusWrapper } from './Status';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
import { name as packageName, version as packageVersion } from './version.json';
const Avatar = ({ appearance = 'circle', borderColor, component, href, isDisabled, name, onClick, presence, size = 'medium', src, stackIndex, status, target, testId, }) => {
    const { createAnalyticsEvent } = useAnalyticsEvents();
    const avatarSize = AVATAR_SIZES[size];
    const avatarRadius = AVATAR_RADIUS[size];
    const customPresenceNode = typeof presence === 'object' ? presence : null;
    const customStatusNode = typeof status === 'object' ? status : null;
    const isValidIconSize = size !== 'xxlarge' && size !== 'xsmall';
    const guardedClick = useCallback((event) => {
        if (isDisabled || typeof onClick !== 'function')
            return;
        const analyticsEvent = createAnalyticsEvent({
            action: 'clicked',
            actionSubject: 'avatar',
            attributes: {
                componentName: 'avatar',
                packageName,
                packageVersion,
            },
        });
        onClick(event, analyticsEvent);
        analyticsEvent.fire('atlaskit');
    }, [createAnalyticsEvent, isDisabled, onClick]);
    const Element = component || getCustomElement(href, onClick);
    return (jsx("div", { "data-testid": testId, style: {
            display: 'inline-block',
            position: 'relative',
            outline: 0,
            zIndex: stackIndex,
            height: `${avatarSize + 4}px`,
            width: `${avatarSize + 4}px`,
        } },
        jsx(Element, Object.assign({ css: css `
            height: ${avatarSize}px;
            width: ${avatarSize}px;
            align-items: stretch;
            background-color: ${borderColor || background()};
            border: 0;
            border-radius: ${appearance === 'circle'
                ? '50%'
                : `${avatarRadius + BORDER_WIDTH}px`};
            padding: ${BORDER_WIDTH}px;
            box-sizing: content-box;
            cursor: inherit;
            display: flex;
            flex-direction: column;
            justify-content: center;
            outline: none;
            overflow: hidden;
            position: static;
            transform: translateZ(0);
            transition: opacity 200ms, background-color 200ms ease-out;

            &::-moz-focus-inner {
              border: 0;
              margin: 0;
              padding: 0;
            }

            &::after {
              background-color: transparent;
              border-radius: ${appearance === 'circle' ? '50%' : `${avatarRadius}px`};
              bottom: ${BORDER_WIDTH}px;
              content: ' ';
              left: ${BORDER_WIDTH}px;
              opacity: 0;
              pointer-events: none;
              position: absolute;
              right: ${BORDER_WIDTH}px;
              top: ${BORDER_WIDTH}px;
              transition: opacity 200ms;
            }
            ${stackIndex && `position: relative;`}

            ${Boolean(href || onClick) &&
                `
              cursor: pointer;

              :focus {
                outline: none;
                background-color: ${B200};
              }

              :active,
              :hover {
                &::after {
                  background-color: ${N70A};
                  opacity: 1;
                }
              }

              :active {
                transform: scale(0.9);
              }
            `}

            ${isDisabled &&
                `
                cursor: not-allowed;

                &::after {
                  opacity: 1;
                  pointer-events: none;
                  background-color: rgba(255, 255, 255, 0.7);
                }
              `}
          ` }, (href && getLinkProps(href, target)), (!href && onClick && getButtonProps(isDisabled)), (!component
            ? { 'data-testid': testId && `${testId}--inner` }
            : { testId: testId && `${testId}--inner` }), { onClick: guardedClick }),
            jsx(AvatarImage, { alt: name, appearance: appearance, size: size, src: src })),
        isValidIconSize && presence && !status && (jsx(PresenceWrapper, { appearance: appearance, size: size, presence: !customPresenceNode && presence, testId: testId }, customPresenceNode)),
        isValidIconSize && status && (jsx(StatusWrapper, { appearance: appearance, size: size, borderColor: borderColor, status: !customStatusNode && status, testId: testId }, customStatusNode))));
};
export default Avatar;
//# sourceMappingURL=Avatar.js.map