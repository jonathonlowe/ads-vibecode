import { LRUCache } from 'lru-fast';
export const PREVIEW_CACHE_LRU_SIZE = 20;
class ExtendedLRUCache extends LRUCache {
    shift() {
        const entry = super.shift();
        if (entry) {
            URL.revokeObjectURL(entry.value);
        }
        return entry;
    }
}
export class ObjectURLCache {
    constructor(size) {
        this.cache = new ExtendedLRUCache(size);
    }
    has(key) {
        return !!this.cache.get(key);
    }
    get(key) {
        return this.cache.get(key);
    }
    set(key, value) {
        this.cache.set(key, value);
    }
    reset() {
        this.cache.removeAll();
    }
}
export const objectURLCache = new ObjectURLCache(PREVIEW_CACHE_LRU_SIZE);
//# sourceMappingURL=objectURLCache.js.map