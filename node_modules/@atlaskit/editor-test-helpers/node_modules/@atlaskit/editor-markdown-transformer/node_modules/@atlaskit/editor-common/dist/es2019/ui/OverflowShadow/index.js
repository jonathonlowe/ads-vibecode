import React from 'react';
import browser from '../../utils/browser';
export const shadowClassNames = {
    RIGHT_SHADOW: 'right-shadow',
    LEFT_SHADOW: 'left-shadow',
};
const isIE11 = browser.ie_version === 11;
export default function overflowShadow(Component, options) {
    return class OverflowShadow extends React.Component {
        constructor() {
            super(...arguments);
            this.state = {
                showLeftShadow: false,
                showRightShadow: false,
            };
            this.handleScroll = (event) => {
                if (!this.overflowContainer || event.target !== this.overflowContainer) {
                    return;
                }
                this.updateShadows();
            };
            this.updateShadows = () => {
                this.setState(prevState => {
                    if (!this.overflowContainer) {
                        return;
                    }
                    const diff = this.calcOverflowDiff();
                    const showRightShadow = diff > 0 && diff > this.overflowContainer.scrollLeft;
                    const showLeftShadow = this.showLeftShadow(this.overflowContainer);
                    if (showLeftShadow !== prevState.showLeftShadow ||
                        showRightShadow !== this.state.showRightShadow) {
                        return {
                            showLeftShadow,
                            showRightShadow,
                        };
                    }
                    return null;
                });
            };
            this.showLeftShadow = (overflowContainer) => {
                return !!overflowContainer && overflowContainer.scrollLeft > 0;
            };
            this.calcOverflowDiff = () => {
                if (!this.overflowContainer) {
                    return 0;
                }
                this.diff = this.calcScrollableWidth();
                return this.diff - this.overflowContainer.offsetWidth;
            };
            this.calcScrollableWidth = () => {
                if (!this.scrollable && this.overflowContainer) {
                    return this.overflowContainer.scrollWidth;
                }
                if (!this.scrollable) {
                    return 0;
                }
                let width = 0;
                for (let i = 0; i < this.scrollable.length; i++) {
                    const scrollableElement = this.scrollable[i];
                    width += scrollableElement.scrollWidth;
                }
                return width;
            };
            this.handleContainer = (container) => {
                if (!container || this.container) {
                    return;
                }
                this.container = container;
                this.overflowContainer = container.querySelector(options.overflowSelector);
                if (!this.overflowContainer) {
                    this.overflowContainer = container;
                }
                if (options.scrollableSelector) {
                    this.scrollable = container.querySelectorAll(options.scrollableSelector);
                }
                this.updateShadows();
                if (!isIE11) {
                    this.overflowContainer.addEventListener('scroll', this.handleScroll);
                }
            };
        }
        componentWillUnmount() {
            if (this.overflowContainer && !isIE11) {
                this.overflowContainer.removeEventListener('scroll', this.handleScroll);
            }
            this.updateShadows();
        }
        componentDidUpdate() {
            this.updateShadows();
        }
        render() {
            const { showLeftShadow, showRightShadow } = this.state;
            const classNames = [
                showRightShadow && shadowClassNames.RIGHT_SHADOW,
                showLeftShadow && shadowClassNames.LEFT_SHADOW,
            ]
                .filter(Boolean)
                .join(' ');
            return (React.createElement(Component, Object.assign({ handleRef: this.handleContainer, shadowClassNames: classNames }, this.props)));
        }
    };
}
//# sourceMappingURL=index.js.map