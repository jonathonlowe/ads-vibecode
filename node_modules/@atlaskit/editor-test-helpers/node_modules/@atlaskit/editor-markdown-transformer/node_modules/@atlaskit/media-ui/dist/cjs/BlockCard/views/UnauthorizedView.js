"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/** @jsx jsx */
var core_1 = require("@emotion/core");
var colors_1 = require("@atlaskit/theme/colors");
var react_intl_1 = require("react-intl");
var Frame_1 = require("../components/Frame");
var Thumbnail_1 = require("../components/Thumbnail");
var Provider_1 = require("../components/Provider");
var Name_1 = require("../components/Name");
var Byline_1 = require("../components/Byline");
var ActionList_1 = require("../components/ActionList");
var Content_1 = require("../components/Content");
var messages_1 = require("../../messages");
var constants_1 = require("../utils/constants");
var ContentHeader_1 = require("../components/ContentHeader");
var ContentFooter_1 = require("../components/ContentFooter");
var Icon_1 = require("../components/Icon");
var handlers_1 = require("../utils/handlers");
var textNameProps = tslib_1.__assign({}, messages_1.messages.connect_link_account_card_name);
var textBylineProps = tslib_1.__assign({}, messages_1.messages.connect_link_account_card_description);
exports.UnauthorizedView = function (_a) {
    var _b = _a.context, context = _b === void 0 ? { text: '' } : _b, _c = _a.isSelected, isSelected = _c === void 0 ? false : _c, _d = _a.actions, actions = _d === void 0 ? [] : _d, _e = _a.testId, testId = _e === void 0 ? 'block-card-unauthorized-view' : _e, _f = _a.showActions, showActions = _f === void 0 ? true : _f, _g = _a.icon, icon = _g === void 0 ? {} : _g, _h = _a.link, link = _h === void 0 ? '' : _h, _j = _a.onClick, onClick = _j === void 0 ? function () { } : _j;
    var handleClick = function (event) {
        return handlers_1.handleClickCommon(event, onClick);
    };
    return (core_1.jsx(Frame_1.Frame, { isSelected: isSelected, testId: testId },
        core_1.jsx(Content_1.Content, null,
            core_1.jsx("div", null,
                core_1.jsx(ContentHeader_1.ContentHeader, { onClick: handleClick, link: link },
                    core_1.jsx(Icon_1.Icon, tslib_1.__assign({}, icon)),
                    core_1.jsx(Name_1.Name, { testId: testId ? testId + "-name" : undefined, name: core_1.jsx(react_intl_1.FormattedMessage, tslib_1.__assign({}, textNameProps, { values: { context: context.text } })) })),
                core_1.jsx(Byline_1.Byline, { testId: testId ? testId + "-byline" : undefined, text: core_1.jsx(react_intl_1.FormattedMessage, tslib_1.__assign({}, textBylineProps, { values: { context: context.text } })) })),
            core_1.jsx(ContentFooter_1.ContentFooter, null,
                core_1.jsx(Provider_1.Provider, { name: context.text, icon: context.icon }),
                showActions && core_1.jsx(ActionList_1.ActionList, { items: actions }))),
        core_1.jsx(Thumbnail_1.Thumbnail, { src: constants_1.CelebrationImage, color: colors_1.B50, testId: testId ? testId + "-thumb" : undefined })));
};
//# sourceMappingURL=UnauthorizedView.js.map