import { __awaiter, __generator, __read } from "tslib";
export var FORGE_EXTENSION_TYPE = 'com.atlassian.ecosystem';
export var getExtensionKeyAndNodeKey = function (extensionKey, extensionType) {
    // Forge macro extensionKey has a user generated string, so splitting on
    // a colon is unstable for their particular use case. They only have one
    // node in the relevant manifest so we can hardcode nodeKey to 'default'.
    if (extensionType === FORGE_EXTENSION_TYPE) {
        return [extensionKey, 'default'];
    }
    var _a = __read(extensionKey.split(':'), 2), extKey = _a[0], _b = _a[1], nodeKey = _b === void 0 ? 'default' : _b;
    return [extKey, nodeKey];
};
export var buildExtensionKeyAndNodeKey = function (extensionKey, nodeKey) {
    if (!nodeKey || nodeKey === 'default') {
        return extensionKey;
    }
    return extensionKey + ":" + nodeKey;
};
export var buildAction = function (action, manifest) {
    if (typeof action === 'function') {
        return action;
    }
    if (action.type === 'node' && manifest.modules.nodes) {
        return buildNode(action, manifest);
    }
};
export var resolveImport = function (importPromise) { return __awaiter(void 0, void 0, void 0, function () {
    var importedModule;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, importPromise];
            case 1:
                importedModule = _a.sent();
                return [2 /*return*/, importedModule && importedModule.__esModule
                        ? importedModule.default
                        : importedModule];
        }
    });
}); };
export var buildNode = function (action, manifest) {
    if (!manifest.modules.nodes) {
        return;
    }
    var node = manifest.modules.nodes[action.key];
    var extensionKey = buildExtensionKeyAndNodeKey(manifest.key, action.key);
    return {
        type: node.type,
        attrs: {
            extensionType: manifest.type,
            extensionKey: extensionKey,
            parameters: action.parameters,
        },
    };
};
//# sourceMappingURL=manifest-helpers.js.map