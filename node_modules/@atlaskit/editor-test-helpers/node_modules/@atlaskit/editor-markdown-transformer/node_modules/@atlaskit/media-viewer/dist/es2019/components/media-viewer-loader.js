import React from 'react';
import { ModalSpinner } from '@atlaskit/media-ui';
import * as colors from '@atlaskit/theme/colors';
export default class AsyncMediaViewer extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            // Set state value to equal to current static value of this class.
            MediaViewer: AsyncMediaViewer.MediaViewer,
            MediaViewerErrorBoundary: AsyncMediaViewer.MediaViewerErrorBoundary,
        };
    }
    async UNSAFE_componentWillMount() {
        if (!this.state.MediaViewer || !this.state.MediaViewerErrorBoundary) {
            try {
                const [mediaClient, mediaViewerModule, mediaViewerErrorBoundaryModule,] = await Promise.all([
                    import(
                    /* webpackChunkName:"@atlaskit-media-client" */ '@atlaskit/media-client'),
                    import(
                    /* webpackChunkName:"@atlaskit-internal_media-viewer" */ './media-viewer'),
                    import(
                    /* webpackChunkName:"@atlaskit-internal_MediaPickerErrorBoundary" */ './media-viewer-analytics-error-boundary'),
                ]);
                const MediaViewerWithClient = mediaClient.withMediaClient(mediaViewerModule.MediaViewer);
                AsyncMediaViewer.MediaViewer = MediaViewerWithClient;
                AsyncMediaViewer.MediaViewerErrorBoundary =
                    mediaViewerErrorBoundaryModule.default;
                this.setState({
                    MediaViewer: MediaViewerWithClient,
                    MediaViewerErrorBoundary: AsyncMediaViewer.MediaViewerErrorBoundary,
                });
            }
            catch (error) {
                // TODO [MS-2277]: Add operational error to catch async import error
            }
        }
    }
    render() {
        const { MediaViewer, MediaViewerErrorBoundary } = this.state;
        if (!MediaViewer || !MediaViewerErrorBoundary) {
            return (React.createElement(ModalSpinner, { blankedColor: colors.DN30, invertSpinnerColor: true }));
        }
        return (React.createElement(MediaViewerErrorBoundary, null,
            React.createElement(MediaViewer, Object.assign({}, this.props))));
    }
}
AsyncMediaViewer.displayName = 'AsyncMediaViewer';
//# sourceMappingURL=media-viewer-loader.js.map