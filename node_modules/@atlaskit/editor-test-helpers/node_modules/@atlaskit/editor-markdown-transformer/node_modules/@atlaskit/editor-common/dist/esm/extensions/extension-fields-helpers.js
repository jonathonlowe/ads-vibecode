import { __awaiter, __generator } from "tslib";
var assertFieldHandlerLink = function (handlerLink) {
    if (!handlerLink.type) {
        throw new Error("Missing type!");
    }
};
var assertManifestFieldTypes = function (manifest, fieldType) {
    if (!manifest.modules.fields) {
        throw new Error("No definition of fields for extension type \"" + manifest.type + "\" and key \"" + manifest.key + "\"!");
    }
    if (!manifest.modules.fields[fieldType]) {
        throw new Error("No definition for field type \"" + fieldType + "\" on manifest for extension with type \"" + manifest.type + "\" and key \"" + manifest.key + "\"!");
    }
};
function getExtensionModuleField(manifest, fieldType, handlerLink) {
    return __awaiter(this, void 0, void 0, function () {
        var type, handler;
        return __generator(this, function (_a) {
            assertFieldHandlerLink(handlerLink);
            assertManifestFieldTypes(manifest, fieldType);
            type = handlerLink.type;
            handler = manifest.modules.fields[fieldType][type];
            if (!handler) {
                throw new Error("No handler of type \"" + type + "\" for extension type \"" + manifest.type + "\" and key \"" + manifest.key + "\"!");
            }
            return [2 /*return*/, handler];
        });
    });
}
export function getFieldResolver(manifest, handlerLink) {
    return __awaiter(this, void 0, void 0, function () {
        var customFieldHandler;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getExtensionModuleField(manifest, 'custom', handlerLink)];
                case 1:
                    customFieldHandler = _a.sent();
                    return [2 /*return*/, customFieldHandler.resolver];
            }
        });
    });
}
export function getFieldSerializer(manifest, handlerLink) {
    return __awaiter(this, void 0, void 0, function () {
        var fieldsetHandler;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getExtensionModuleField(manifest, 'fieldset', handlerLink)];
                case 1:
                    fieldsetHandler = _a.sent();
                    return [2 /*return*/, fieldsetHandler.serializer];
            }
        });
    });
}
export function getFieldDeserializer(manifest, handlerLink) {
    return __awaiter(this, void 0, void 0, function () {
        var fieldsetHandler;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getExtensionModuleField(manifest, 'fieldset', handlerLink)];
                case 1:
                    fieldsetHandler = _a.sent();
                    return [2 /*return*/, fieldsetHandler.deserializer];
            }
        });
    });
}
//# sourceMappingURL=extension-fields-helpers.js.map