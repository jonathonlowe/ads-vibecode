import React from 'react';
import { Component } from 'react';
import { isExternalImageIdentifier } from '@atlaskit/media-client';
import { MediaViewer as MediaViewerNextGen } from '../newgen/media-viewer';
import { getIdentifierCollection } from '../newgen/utils/getIdentifierCollection';
import { getSelectedIndex } from '../newgen/utils';
export class MediaViewer extends Component {
    constructor() {
        super(...arguments);
        // returns a valid MV data source including current the card identifier
        this.getDataSourceWithSelectedItem = (dataSource, selectedItem) => {
            // we want to ensure the card identifier is in the list
            const { list } = dataSource;
            if (list) {
                const selectedItemIndex = getSelectedIndex(list, selectedItem);
                if (selectedItemIndex === -1) {
                    return {
                        list: [selectedItem, ...list],
                    };
                }
            }
            return dataSource;
        };
    }
    render() {
        const { featureFlags, onClose, mediaClient, selectedItem, collectionName, dataSource, pageSize, extensions, contextId, } = this.props;
        const defaultPageSize = 30;
        const dataSourceWithSelectedItem = this.getDataSourceWithSelectedItem(dataSource, selectedItem);
        if (dataSourceWithSelectedItem.list) {
            const items = dataSourceWithSelectedItem.list.map(identifier => ({
                ...identifier,
                collectionName: getIdentifierCollection(identifier, collectionName),
            }));
            const itemSource = {
                kind: 'ARRAY',
                items: items,
            };
            const identifier = {
                ...selectedItem,
                collectionName,
            };
            return (React.createElement(MediaViewerNextGen, { mediaClient: mediaClient, selectedItem: identifier, onClose: onClose, itemSource: itemSource, featureFlags: featureFlags, extensions: extensions, contextId: contextId }));
        }
        else if (dataSourceWithSelectedItem.collectionName) {
            if (isExternalImageIdentifier(selectedItem)) {
                // if integrators pass an external image + collection, we remove the collection and just show the selectedItem
                return (React.createElement(MediaViewerNextGen, { mediaClient: mediaClient, selectedItem: selectedItem, onClose: onClose, itemSource: { kind: 'ARRAY', items: [selectedItem] }, featureFlags: featureFlags, contextId: contextId }));
            }
            const itemSource = {
                kind: 'COLLECTION',
                collectionName: dataSourceWithSelectedItem.collectionName,
                pageSize: pageSize || defaultPageSize,
            };
            const identifier = {
                ...selectedItem,
                collectionName: dataSourceWithSelectedItem.collectionName,
            };
            return (React.createElement(MediaViewerNextGen, { mediaClient: mediaClient, selectedItem: identifier, onClose: onClose, itemSource: itemSource, featureFlags: featureFlags, contextId: contextId }));
        }
        else {
            throw new Error();
        }
    }
}
//# sourceMappingURL=media-viewer.js.map