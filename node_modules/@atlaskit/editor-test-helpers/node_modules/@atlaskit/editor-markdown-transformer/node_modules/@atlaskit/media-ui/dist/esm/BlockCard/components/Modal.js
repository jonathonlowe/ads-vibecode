import { __assign, __extends, __read } from "tslib";
import React, { useState } from 'react';
import ModalDialog, { ModalTransition, } from '@atlaskit/modal-dialog';
import { Header } from './ModalHeader';
import { gs } from '../utils';
var iframeStyles = {
    width: "100%",
    height: "calc(100% - " + gs(3) + ")",
};
var ModalWithErrorBoundary = /** @class */ (function (_super) {
    __extends(ModalWithErrorBoundary, _super);
    function ModalWithErrorBoundary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModalWithErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        if (this.props.onOpenFailed) {
            this.props.onOpenFailed(error, errorInfo);
        }
    };
    ModalWithErrorBoundary.prototype.render = function () {
        return React.createElement(Modal, __assign({}, this.props));
    };
    return ModalWithErrorBoundary;
}(React.Component));
var Modal = function (_a) {
    var onClose = _a.onClose, onOpen = _a.onOpen, src = _a.src, testId = _a.testId, showModal = _a.showModal, providerName = _a.providerName, metadata = _a.metadata, icon = _a.icon, closeLabel = _a.closeLabel, iframeName = _a.iframeName, title = _a.title, url = _a.url, download = _a.download, byline = _a.byline, onViewActionClick = _a.onViewActionClick, onDownloadActionClick = _a.onDownloadActionClick;
    var _b = __read(useState(showModal), 2), isOpen = _b[0], setIsOpen = _b[1];
    return (React.createElement(ModalTransition, null, isOpen && (React.createElement(ModalDialog, { height: "100%", width: "large", testId: testId, onOpenComplete: onOpen, components: {
            // TODO modal body wants to be original modal with height 100% - find out how to add
            Header: function (props) { return (React.createElement(Header, __assign({}, props, { providerName: providerName, icon: icon, metadata: metadata, url: url, title: title, label: closeLabel, download: download, byline: byline, onViewActionClick: onViewActionClick, onDownloadActionClick: onDownloadActionClick }))); },
        }, onClose: function () {
            setIsOpen(false);
        }, onCloseComplete: onClose }, src ? (React.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0, src: src })) : (React.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0 }))))));
};
export default ModalWithErrorBoundary;
//# sourceMappingURL=Modal.js.map