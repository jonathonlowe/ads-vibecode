import React from 'react';
import { Component } from 'react';
import { Wrapper } from './styled';
import { CardActionIconButton, } from './cardActionIconButton';
import { CardActionsDropdownMenu } from './cardActionsDropdownMenu';
import { PreventClickThrough } from '../preventClickThrough';
import { createAndFireMediaEvent } from '../analytics';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
const CardActionIconButtonWithProps = (props) => React.createElement(CardActionIconButton, Object.assign({}, props));
export class CardActionsView extends Component {
    render() {
        const { actions } = this.props;
        if (!actions.length) {
            return null;
        }
        const primaryAction = actions.find(actionWithIcon);
        const otherActions = actions.filter(actionNotEqualTo(primaryAction));
        return (React.createElement(PreventClickThrough, null,
            React.createElement(Wrapper, null,
                primaryAction
                    ? this.renderActionIconButton(primaryAction, true)
                    : null,
                this.renderOtherActionButtons(otherActions))));
    }
    renderActionIconButton(action, isPrimary) {
        const { triggerColor } = this.props;
        const { icon, handler, label } = action;
        const CardActionIconButtonWithAnalytics = withAnalyticsEvents({
            onClick: createAndFireMediaEvent({
                eventType: 'ui',
                action: 'clicked',
                actionSubject: 'button',
                actionSubjectId: isPrimary
                    ? 'mediaCardPrimaryActionButton'
                    : 'mediaCardSecondaryActionButton',
                attributes: {
                    label,
                },
            }),
        })(CardActionIconButtonWithProps);
        return (React.createElement(CardActionIconButtonWithAnalytics, { icon: icon, triggerColor: triggerColor, onClick: () => handler() }));
    }
    renderOtherActionButtons(actions) {
        if (actions.length === 0) {
            return null;
        }
        else {
            const { triggerColor, onToggle } = this.props;
            const firstActionWithIcon = actions.find(actionWithIcon);
            const otherActions = actions.filter(actionNotEqualTo(firstActionWithIcon));
            if (firstActionWithIcon && otherActions.length === 0) {
                return this.renderActionIconButton(firstActionWithIcon, false);
            }
            else {
                return (React.createElement(CardActionsDropdownMenu, { actions: actions, triggerColor: triggerColor, onOpenChange: onToggle }));
            }
        }
    }
}
function actionWithIcon(action) {
    return !!action.icon;
}
function actionNotEqualTo(otherAction) {
    return (action) => action !== otherAction;
}
//# sourceMappingURL=cardActionsView.js.map