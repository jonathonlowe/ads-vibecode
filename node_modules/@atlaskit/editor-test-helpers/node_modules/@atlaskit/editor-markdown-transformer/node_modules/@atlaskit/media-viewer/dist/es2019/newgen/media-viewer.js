import React from 'react';
import { IntlProvider, intlShape } from 'react-intl';
import { Shortcut } from '@atlaskit/media-ui';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { mediaViewerModalEvent } from './analytics/media-viewer';
import { closedEvent } from './analytics/closed';
import { channel } from './analytics/index';
import { List } from './list';
import { Collection } from './collection';
import { Content } from './content';
import { Blanket, SidebarWrapper } from './styled';
import { start } from 'perf-marks';
export class MediaViewerComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isSidebarVisible: false,
        };
        this.fireAnalytics = (payload) => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                const ev = createAnalyticsEvent(payload);
                ev.fire(channel);
            }
        };
        this.onShortcutClosed = () => {
            this.sendClosedEvent('escKey');
            const { onClose } = this.props;
            if (onClose) {
                onClose();
            }
        };
        this.onContentClose = (_e, analyticsEvent) => {
            const { onClose } = this.props;
            if (analyticsEvent &&
                analyticsEvent.payload &&
                analyticsEvent.payload.actionSubject === 'button') {
                this.sendClosedEvent('button');
            }
            if (onClose) {
                onClose();
            }
        };
        this.toggleSidebar = () => {
            this.setState({
                isSidebarVisible: !this.state.isSidebarVisible,
            });
        };
        this.renderSidebar = () => {
            const { extensions } = this.props;
            const { isSidebarVisible, selectedIdentifier } = this.state;
            const sidebardSelectedIdentifier = selectedIdentifier || this.defaultSelectedItem;
            if (sidebardSelectedIdentifier &&
                isSidebarVisible &&
                extensions &&
                extensions.sidebar) {
                return (React.createElement(SidebarWrapper, { "data-testid": "media-viewer-sidebar-content" }, extensions.sidebar.renderer(sidebardSelectedIdentifier, {
                    close: this.toggleSidebar,
                })));
            }
        };
        this.onNavigationChange = (selectedIdentifier) => {
            this.setState({ selectedIdentifier });
        };
    }
    UNSAFE_componentWillMount() {
        this.fireAnalytics(mediaViewerModalEvent());
        start('MediaViewer.SessionDuration');
    }
    sendClosedEvent(input) {
        this.fireAnalytics(closedEvent(input));
    }
    get defaultSelectedItem() {
        const { itemSource, selectedItem } = this.props;
        if (itemSource.kind === 'COLLECTION') {
            return selectedItem;
        }
        const { items } = itemSource;
        const firstItem = items[0];
        return selectedItem || firstItem;
    }
    render() {
        const content = (React.createElement(Blanket, { "data-testid": "media-viewer-popup" },
            React.createElement(Shortcut, { keyCode: 27, handler: this.onShortcutClosed }),
            React.createElement(Content, { onClose: this.onContentClose }, this.renderContent()),
            this.renderSidebar()));
        return this.context.intl ? (content) : (React.createElement(IntlProvider, { locale: "en" }, content));
    }
    renderContent() {
        const { mediaClient, onClose, itemSource, extensions, contextId, } = this.props;
        const { isSidebarVisible } = this.state;
        if (itemSource.kind === 'COLLECTION') {
            return (React.createElement(Collection, { pageSize: itemSource.pageSize, defaultSelectedItem: this.defaultSelectedItem, collectionName: itemSource.collectionName, mediaClient: mediaClient, onClose: onClose, extensions: extensions, onNavigationChange: this.onNavigationChange, onSidebarButtonClick: this.toggleSidebar }));
        }
        else if (itemSource.kind === 'ARRAY') {
            const { items } = itemSource;
            return (React.createElement(List, { defaultSelectedItem: this.defaultSelectedItem || items[0], items: items, mediaClient: mediaClient, onClose: onClose, extensions: extensions, onNavigationChange: this.onNavigationChange, onSidebarButtonClick: this.toggleSidebar, isSidebarVisible: isSidebarVisible, contextId: contextId }));
        }
        else {
            return null;
        }
    }
}
MediaViewerComponent.contextTypes = {
    intl: intlShape,
};
export const MediaViewer = withAnalyticsEvents()(MediaViewerComponent);
//# sourceMappingURL=media-viewer.js.map