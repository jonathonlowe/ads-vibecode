import React from 'react';
import { Component } from 'react';
import { injectIntl } from 'react-intl';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import Button from '@atlaskit/button';
import Tooltip from '@atlaskit/tooltip';
import { messages } from '@atlaskit/media-ui';
import { fireAnalyticsEvent } from '../../../util';
import LineWidthButton from './buttons/lineWidthButton';
import ColorButton from './buttons/colorButton';
import { ToolButton } from './buttons/toolButton';
import { LineWidthPopup } from './popups/lineWidthPopup';
import { ColorPopup } from './popups/colorPopup';
import { ToolbarContainer, CenterButtons, VerticalLine } from './styles';
import { ShapePopup, shapeTools } from './popups/shapePopup';
import ShapeButton from './buttons/shapeButton';
import { ButtonGroup } from './buttons/buttonGroup';
export const tools = [
    'arrow',
    'rectangle',
    'oval',
    'line',
    'text',
    'blur',
    'brush',
];
export class Toolbar extends Component {
    constructor() {
        super(...arguments);
        this.state = { popup: 'none' };
        this.onColorButtonClick = () => this.showOrHidePopup('color');
        this.onLineWidthButtonClick = () => this.showOrHidePopup('lineWidth');
        this.onShapeButtonClick = () => this.showOrHidePopup('shape');
        this.onToolClick = (tool) => {
            this.setState({ popup: 'none' });
            this.props.onToolChanged(tool);
            fireAnalyticsEvent({
                eventType: 'ui',
                action: 'selected',
                actionSubject: 'annotation',
                actionSubjectId: tool,
            }, this.props.createAnalyticsEvent);
        };
    }
    render() {
        const { color, tool, lineWidth, onColorChanged, onLineWidthChanged, onSave, onCancel, intl: { formatMessage }, createAnalyticsEvent, } = this.props;
        const { popup } = this.state;
        const showColorPopup = popup === 'color';
        const showLineWidthPopup = popup === 'lineWidth';
        const showShapePopup = popup === 'shape';
        const onPickColor = (color) => {
            onColorChanged(color);
            fireAnalyticsEvent({
                eventType: 'ui',
                action: 'selected',
                actionSubject: 'annotation',
                actionSubjectId: 'colour',
                attributes: { color },
            }, createAnalyticsEvent);
        };
        const onLineWidthClick = (lineWidth) => {
            onLineWidthChanged(lineWidth);
            fireAnalyticsEvent({
                eventType: 'ui',
                action: 'selected',
                actionSubject: 'annotation',
                actionSubjectId: 'size',
                attributes: { lineWidth },
            }, createAnalyticsEvent);
        };
        const onCloseInlinePopup = () => {
            this.setState({ popup: 'none' });
        };
        const isShapeTool = shapeTools.indexOf(tool) > -1;
        return (React.createElement(ToolbarContainer, null,
            React.createElement(CenterButtons, null,
                React.createElement(ButtonGroup, null,
                    React.createElement(Tooltip, { content: formatMessage(messages.annotate_tool_arrow) }, this.renderSimpleTool('arrow')),
                    React.createElement(Tooltip, { content: formatMessage(messages.annotate_tool_text) }, this.renderSimpleTool('text')),
                    React.createElement(ShapePopup, { isOpen: showShapePopup, shape: tool, onPickShape: this.onToolClick },
                        React.createElement("div", null,
                            React.createElement(ShapeButton, { onClick: this.onShapeButtonClick, isActive: isShapeTool, activeShape: tool }))),
                    React.createElement(Tooltip, { content: formatMessage(messages.annotate_tool_brush) }, this.renderSimpleTool('brush')),
                    React.createElement(Tooltip, { content: formatMessage(messages.annotate_tool_blur) }, this.renderSimpleTool('blur')),
                    React.createElement(VerticalLine, null),
                    React.createElement(LineWidthPopup, { onClose: onCloseInlinePopup, onLineWidthClick: onLineWidthClick, lineWidth: lineWidth, isOpen: showLineWidthPopup },
                        React.createElement("div", null,
                            React.createElement(LineWidthButton, { lineWidth: lineWidth, isActive: showLineWidthPopup, onClick: this.onLineWidthButtonClick }))),
                    React.createElement(ColorPopup, { onClose: onCloseInlinePopup, onPickColor: onPickColor, color: color, isOpen: showColorPopup },
                        React.createElement("div", null,
                            React.createElement(ColorButton, { color: color, isActive: showColorPopup, onClick: this.onColorButtonClick }))),
                    React.createElement(VerticalLine, null),
                    React.createElement(Button, { appearance: "primary", onClick: onSave, autoFocus: true }, formatMessage(messages.save)),
                    React.createElement(Button, { appearance: "default", onClick: onCancel }, formatMessage(messages.cancel))))));
    }
    renderSimpleTool(tool) {
        const { tool: activeTool } = this.props;
        return (React.createElement(ToolButton, { key: tool, tool: tool, activeTool: activeTool, onToolClick: this.onToolClick }));
    }
    showOrHidePopup(target) {
        if (this.state.popup === target) {
            this.setState({ popup: 'none' });
        }
        else {
            this.setState({ popup: target });
        }
    }
}
export default withAnalyticsEvents()(injectIntl(Toolbar));
//# sourceMappingURL=toolbar.js.map