import React from 'react';
import { PureComponent } from 'react';
import { CheckBoxWrapper } from '../styled/TaskItem';
import Item from './Item';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel } from '../analytics';
let taskCount = 0;
const getCheckBoxId = (localId) => `${localId}-${taskCount++}`;
export class TaskItem extends PureComponent {
    constructor(props) {
        super(props);
        this.handleOnChange = (_evt) => {
            const { onChange, taskId, isDone, createAnalyticsEvent } = this.props;
            const newIsDone = !isDone;
            if (onChange) {
                onChange(taskId, newIsDone);
            }
            const action = newIsDone ? 'checked' : 'unchecked';
            if (createAnalyticsEvent) {
                createAndFireEventInElementsChannel({
                    action,
                    actionSubject: 'action',
                    eventType: 'ui',
                    attributes: {
                        localId: taskId,
                    },
                })(createAnalyticsEvent);
            }
        };
        this.checkBoxId = getCheckBoxId(props.taskId);
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.taskId !== this.props.taskId) {
            this.checkBoxId = getCheckBoxId(nextProps.taskId);
        }
    }
    render() {
        const { appearance, isDone, contentRef, children, placeholder, showPlaceholder, disabled, dataAttributes, } = this.props;
        const icon = (React.createElement(CheckBoxWrapper, { contentEditable: false },
            React.createElement("input", { id: this.checkBoxId, name: this.checkBoxId, type: "checkbox", onChange: this.handleOnChange, checked: !!isDone, disabled: !!disabled, suppressHydrationWarning: true }),
            React.createElement("label", { htmlFor: this.checkBoxId, suppressHydrationWarning: true })));
        return (React.createElement(Item, { appearance: appearance, contentRef: contentRef, icon: icon, placeholder: placeholder, showPlaceholder: showPlaceholder, itemType: "TASK", dataAttributes: dataAttributes }, children));
    }
}
TaskItem.defaultProps = {
    appearance: 'inline',
};
// This is to ensure that the "type" is exported, as it gets lost and not exported along with TaskItem after
// going through the high order component.
export default withAnalyticsEvents()(TaskItem);
//# sourceMappingURL=TaskItem.js.map