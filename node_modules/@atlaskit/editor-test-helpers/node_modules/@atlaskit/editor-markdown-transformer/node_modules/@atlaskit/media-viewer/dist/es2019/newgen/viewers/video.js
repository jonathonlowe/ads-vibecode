import React from 'react';
import { getArtifactUrl, globalMediaEventEmitter, } from '@atlaskit/media-client';
import { CustomMediaPlayer, } from '@atlaskit/media-ui';
import { Outcome } from '../domain';
import { Video, CustomVideoPlayerWrapper } from '../styled';
import { isIE } from '../utils/isIE';
import { createError } from '../error';
import { BaseViewer } from './base-viewer';
import { getObjectUrlFromFileState } from '../utils/getObjectUrlFromFileState';
const sdArtifact = 'video_640.mp4';
const hdArtifact = 'video_1280.mp4';
const localStorageKeyName = 'mv_video_player_quality';
export class VideoViewer extends BaseViewer {
    constructor() {
        super(...arguments);
        this.onHDChange = () => {
            const isHDActive = !this.state.isHDActive;
            const preferredQuality = isHDActive ? 'hd' : 'sd';
            localStorage.setItem(localStorageKeyName, preferredQuality);
            this.setState({ isHDActive });
            this.init(isHDActive);
        };
        this.onFirstPlay = () => {
            const { item } = this.props;
            globalMediaEventEmitter.emit('media-viewed', {
                fileId: item.id,
                viewingLevel: 'full',
            });
        };
    }
    get initialState() {
        const { item } = this.props;
        const preferredQuality = localStorage.getItem(localStorageKeyName);
        return {
            content: Outcome.pending(),
            isHDActive: isHDAvailable(item) && preferredQuality !== 'sd',
        };
    }
    renderSuccessful(content) {
        const { isHDActive } = this.state;
        const { item, showControls, previewCount, onCanPlay, onError } = this.props;
        const useCustomVideoPlayer = !isIE();
        const isAutoPlay = previewCount === 0;
        return useCustomVideoPlayer ? (React.createElement(CustomVideoPlayerWrapper, { "data-testid": "media-viewer-video-content" },
            React.createElement(CustomMediaPlayer, { type: "video", isAutoPlay: isAutoPlay, onHDToggleClick: this.onHDChange, showControls: showControls, src: content, isHDActive: isHDActive, isHDAvailable: isHDAvailable(item), isShortcutEnabled: true, onCanPlay: onCanPlay, onFirstPlay: this.onFirstPlay, onError: onError }))) : (React.createElement(Video, { autoPlay: isAutoPlay, controls: true, src: content }));
    }
    async init(isHDActive = this.state.isHDActive) {
        const { mediaClient, item, collectionName } = this.props;
        try {
            let contentUrl;
            if (item.status === 'processed') {
                const preferHd = isHDActive && isHDAvailable(item);
                contentUrl = await mediaClient.file.getArtifactURL(item.artifacts, preferHd ? hdArtifact : sdArtifact, collectionName);
                if (!contentUrl) {
                    throw new Error(`No video artifacts found`);
                }
            }
            else {
                contentUrl = await getObjectUrlFromFileState(item);
                if (!contentUrl) {
                    this.setState({
                        content: Outcome.pending(),
                    });
                    return;
                }
            }
            this.setState({
                content: Outcome.successful(contentUrl),
            });
        }
        catch (err) {
            this.setState({
                content: Outcome.failed(createError('previewFailed', err, item)),
            });
        }
    }
    release() { }
}
function isHDAvailable(file) {
    if (file.status !== 'processed') {
        return false;
    }
    return !!getArtifactUrl(file.artifacts, hdArtifact);
}
//# sourceMappingURL=video.js.map