"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var promise_helpers_1 = require("./promise-helpers");
var flatten = function (arr) {
    var _a;
    return (_a = []).concat.apply(_a, tslib_1.__spread(arr));
};
/**
 * Allow to run methods from the given provider interface across all providers seamlessly.
 * Handles promise racing and discards rejected promises safely.
 */
exports.default = (function (providers) {
    if (providers.length === 0) {
        throw new Error('At least one provider must be provided');
    }
    var getFulfilledProviders = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var results;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promise_helpers_1.waitForAllPromises(providers.map(function (result) { return Promise.resolve(result); }))];
                case 1:
                    results = _a.sent();
                    return [2 /*return*/, promise_helpers_1.getOnlyFulfilled(results)];
            }
        });
    }); };
    var runInAllProviders = function (mapFunction) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getFulfilledProviders()];
                case 1: return [2 /*return*/, (_a.sent()).map(function (provider) {
                        return mapFunction(provider);
                    })];
            }
        });
    }); };
    var createCallback = function (methodName, args) { return function (provider) {
        var method = provider[methodName];
        if (typeof method === 'function') {
            return method.apply(provider, args);
        }
        throw new Error("\"" + methodName + "\" isn't a function of the provider");
    }; };
    /**
     * Run a method from the provider which expects to return a single item
     * @param methodName
     * @param args
     */
    var invokeSingle = function (methodName, args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var callback, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    callback = createCallback(methodName, args);
                    _a = promise_helpers_1.waitForFirstFulfilledPromise;
                    return [4 /*yield*/, runInAllProviders(callback)];
                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
            }
        });
    }); };
    /**
     * Run a method in the provider which expectes to return a list of items
     * @param methodName
     * @param args
     */
    var invokeList = function (methodName, args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var callback, results, _a, fulfilledResults;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    callback = createCallback(methodName, args);
                    _a = promise_helpers_1.waitForAllPromises;
                    return [4 /*yield*/, runInAllProviders(callback)];
                case 1: return [4 /*yield*/, _a.apply(void 0, [_b.sent()])];
                case 2:
                    results = _b.sent();
                    fulfilledResults = promise_helpers_1.getOnlyFulfilled(results);
                    return [2 /*return*/, flatten(fulfilledResults).filter(function (result) { return result; })];
            }
        });
    }); };
    return {
        invokeSingle: invokeSingle,
        invokeList: invokeList,
    };
});
//# sourceMappingURL=combine-providers.js.map