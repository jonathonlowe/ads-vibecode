export const FORGE_EXTENSION_TYPE = 'com.atlassian.ecosystem';
export const getExtensionKeyAndNodeKey = (extensionKey, extensionType) => {
    // Forge macro extensionKey has a user generated string, so splitting on
    // a colon is unstable for their particular use case. They only have one
    // node in the relevant manifest so we can hardcode nodeKey to 'default'.
    if (extensionType === FORGE_EXTENSION_TYPE) {
        return [extensionKey, 'default'];
    }
    const [extKey, nodeKey = 'default'] = extensionKey.split(':');
    return [extKey, nodeKey];
};
export const buildExtensionKeyAndNodeKey = (extensionKey, nodeKey) => {
    if (!nodeKey || nodeKey === 'default') {
        return extensionKey;
    }
    return `${extensionKey}:${nodeKey}`;
};
export const buildAction = (action, manifest) => {
    if (typeof action === 'function') {
        return action;
    }
    if (action.type === 'node' && manifest.modules.nodes) {
        return buildNode(action, manifest);
    }
};
export const resolveImport = async (importPromise) => {
    const importedModule = await importPromise;
    return importedModule && importedModule.__esModule
        ? importedModule.default
        : importedModule;
};
export const buildNode = (action, manifest) => {
    if (!manifest.modules.nodes) {
        return;
    }
    const node = manifest.modules.nodes[action.key];
    const extensionKey = buildExtensionKeyAndNodeKey(manifest.key, action.key);
    return {
        type: node.type,
        attrs: {
            extensionType: manifest.type,
            extensionKey: extensionKey,
            parameters: action.parameters,
        },
    };
};
//# sourceMappingURL=manifest-helpers.js.map