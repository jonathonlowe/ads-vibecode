import React, { Component } from 'react';
export const withImageLoader = (Wrapped) => class WithImageLoader extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            imageStatus: 'loading',
        };
        this.onLoad = () => {
            this.setState({
                imageStatus: 'complete',
            });
            const { onExternalImageLoaded } = this.props;
            if (onExternalImageLoaded && this.img) {
                onExternalImageLoaded({
                    width: this.img.naturalWidth,
                    height: this.img.naturalHeight,
                });
            }
        };
        this.onError = () => {
            this.setState({
                imageStatus: 'error',
            });
        };
    }
    componentDidMount() {
        this.fetchImage(this.props);
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.url !== this.props.url) {
            this.setState({
                imageStatus: 'loading',
            });
            this.fetchImage(nextProps);
        }
    }
    componentWillUnmount() {
        if (this.img) {
            this.img.removeEventListener('load', this.onLoad);
            this.img.removeEventListener('error', this.onError);
            this.img = null;
        }
    }
    fetchImage({ url }) {
        if (url) {
            if (!this.img) {
                this.img = new Image();
                this.img.addEventListener('load', this.onLoad);
                this.img.addEventListener('error', this.onError);
            }
            this.img.src = url;
        }
    }
    render() {
        const { imageStatus } = this.state;
        return React.createElement(Wrapped, Object.assign({}, this.props, { imageStatus: imageStatus }));
    }
};
//# sourceMappingURL=imageLoader.js.map