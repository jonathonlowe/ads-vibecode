import React from 'react';
import { Component } from 'react';
import { hideControlsClassName, MediaButton } from '@atlaskit/media-ui';
import ZoomOutIcon from '@atlaskit/icon/glyph/media-services/zoom-out';
import ZoomInIcon from '@atlaskit/icon/glyph/media-services/zoom-in';
import { ZoomWrapper, ZoomControlsWrapper, ZoomLevelIndicator } from './styled';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { channel } from './analytics';
import { createZoomEvent } from './analytics/zoom';
import { injectIntl } from 'react-intl';
import { messages } from '@atlaskit/media-ui';
export class ZoomControlsBase extends Component {
    constructor() {
        super(...arguments);
        this.zoomIn = () => {
            const { onChange, zoomLevel } = this.props;
            if (zoomLevel.canZoomIn) {
                const zoom = zoomLevel.zoomIn();
                this.fireAnalytics(createZoomEvent('zoomIn', zoom.value));
                onChange(zoom);
            }
        };
        this.zoomOut = () => {
            const { onChange, zoomLevel } = this.props;
            if (zoomLevel.canZoomOut) {
                const zoom = zoomLevel.zoomOut();
                this.fireAnalytics(createZoomEvent('zoomOut', zoom.value));
                onChange(zoom);
            }
        };
        this.fireAnalytics = (payload) => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                const ev = createAnalyticsEvent(payload);
                ev.fire(channel);
            }
        };
    }
    render() {
        const { zoomLevel, intl: { formatMessage }, } = this.props;
        return (React.createElement(ZoomWrapper, { className: hideControlsClassName },
            React.createElement(ZoomControlsWrapper, null,
                React.createElement(MediaButton, { appearance: 'toolbar', isDisabled: !zoomLevel.canZoomOut, onClick: this.zoomOut, iconBefore: React.createElement(ZoomOutIcon, { label: formatMessage(messages.zoom_out) }) }),
                React.createElement(MediaButton, { appearance: 'toolbar', isDisabled: !zoomLevel.canZoomIn, onClick: this.zoomIn, iconBefore: React.createElement(ZoomInIcon, { label: formatMessage(messages.zoom_in) }) })),
            React.createElement(ZoomLevelIndicator, null, zoomLevel.asPercentage)));
    }
}
export const ZoomControls = withAnalyticsEvents({})(injectIntl(ZoomControlsBase));
//# sourceMappingURL=zoomControls.js.map