"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var react_loadable_1 = tslib_1.__importDefault(require("react-loadable"));
var manifest_helpers_1 = require("./manifest-helpers");
function getExtensionModuleNode(extensionProvider, extensionType, extensionKey) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, extKey, nodeKey, manifest, node;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = tslib_1.__read(manifest_helpers_1.getExtensionKeyAndNodeKey(extensionKey, extensionType), 2), extKey = _a[0], nodeKey = _a[1];
                    return [4 /*yield*/, extensionProvider.getExtension(extensionType, extKey)];
                case 1:
                    manifest = _b.sent();
                    if (!manifest) {
                        throw new Error("Extension with key \"" + extKey + "\" and type \"" + extensionType + "\" not found!");
                    }
                    if (!manifest.modules.nodes) {
                        throw new Error("Couldn't find any node for extension type \"" + extensionType + "\" and key \"" + extensionKey + "\"!");
                    }
                    node = manifest.modules.nodes[nodeKey];
                    if (!node) {
                        throw new Error("Node with key \"" + extensionKey + "\" not found on manifest for extension type \"" + extensionType + "\" and key \"" + extensionKey + "\"!");
                    }
                    return [2 /*return*/, node];
            }
        });
    });
}
exports.getExtensionModuleNode = getExtensionModuleNode;
function ExtensionLoading(props) {
    if (props.error || props.timedOut) {
        // eslint-disable-next-line no-console
        console.error('Error rendering extension', props.error);
        return react_1.default.createElement("div", null, "Error loading the extension!");
    }
    else {
        return null;
    }
}
function getNodeRenderer(extensionProvider, extensionType, extensionKey) {
    return react_loadable_1.default({
        loader: function () {
            return getExtensionModuleNode(extensionProvider, extensionType, extensionKey).then(function (node) { return manifest_helpers_1.resolveImport(node.render()); });
        },
        loading: ExtensionLoading,
    });
}
exports.getNodeRenderer = getNodeRenderer;
//# sourceMappingURL=extension-handlers.js.map