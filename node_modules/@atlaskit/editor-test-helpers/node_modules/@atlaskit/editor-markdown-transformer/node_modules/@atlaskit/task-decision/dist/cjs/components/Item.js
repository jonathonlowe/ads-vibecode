"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var react_2 = require("react");
var theme_1 = require("@atlaskit/theme");
var Item_1 = require("../styled/Item");
var Placeholder_1 = require("../styled/Placeholder");
var Item = /** @class */ (function (_super) {
    tslib_1.__extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.prototype.renderPlaceholder = function () {
        var _a = this.props, children = _a.children, placeholder = _a.placeholder, showPlaceholder = _a.showPlaceholder, itemType = _a.itemType;
        if (!showPlaceholder || !placeholder || children) {
            return null;
        }
        var offset = theme_1.gridSize() * (itemType === 'TASK' ? 3 : 3.5);
        return (react_1.default.createElement(Placeholder_1.Placeholder, { contentEditable: false, offset: offset }, placeholder));
    };
    Item.prototype.renderMessageAppearance = function () {
        var _a = this.props, contentRef = _a.contentRef, children = _a.children, icon = _a.icon, itemType = _a.itemType, dataAttributes = _a.dataAttributes;
        if (itemType === 'TASK') {
            return (react_1.default.createElement(Item_1.TaskWrapper, null,
                icon,
                this.renderPlaceholder(),
                react_1.default.createElement(Item_1.ContentWrapper, tslib_1.__assign({}, dataAttributes, { innerRef: contentRef }), children)));
        }
        else if (itemType === 'DECISION') {
            return (react_1.default.createElement(Item_1.DecisionWrapper, { "data-decision-wrapper": "true" },
                icon,
                this.renderPlaceholder(),
                react_1.default.createElement(Item_1.ContentWrapper, tslib_1.__assign({}, dataAttributes, { innerRef: contentRef }), children)));
        }
        return null;
    };
    Item.prototype.render = function () {
        return this.renderMessageAppearance();
    };
    Item.defaultProps = {
        appearance: 'inline',
    };
    return Item;
}(react_2.PureComponent));
exports.default = Item;
//# sourceMappingURL=Item.js.map