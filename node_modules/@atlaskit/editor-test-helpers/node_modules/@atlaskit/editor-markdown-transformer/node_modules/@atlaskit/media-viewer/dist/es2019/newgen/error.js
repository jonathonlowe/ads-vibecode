import React from 'react';
import { FormattedMessage, injectIntl } from 'react-intl';
import { ErrorMessageWrapper, ErrorImage } from './styled';
import { messages as i18nMessages } from '@atlaskit/media-ui';
import { cannotViewFile, errorLoadingFile } from './error-images';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { mediaPreviewFailedEvent } from './analytics/item-viewer';
import { channel } from '../newgen/analytics';
const errorLoadingFileImage = (formatMessage) => (React.createElement(ErrorImage, { src: errorLoadingFile, alt: formatMessage(i18nMessages.error_loading_file) }));
const cannotViewFileImage = (formatMessage) => (React.createElement(ErrorImage, { src: cannotViewFile, alt: formatMessage(i18nMessages.error_generating_preview) }));
const getErrorMessage = (formatMessage, errorName) => {
    const messages = {
        metadataFailed: (React.createElement("div", null,
            errorLoadingFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.something_went_wrong))),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.might_be_a_hiccup))))),
        previewFailed: (React.createElement("div", null,
            cannotViewFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.couldnt_generate_preview))))),
        unsupported: (React.createElement("div", null,
            cannotViewFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.cant_preview_file_type))))),
        idNotFound: (React.createElement("div", null,
            errorLoadingFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.item_not_found_in_list))))),
        noPDFArtifactsFound: (React.createElement("div", null,
            cannotViewFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.no_pdf_artifacts))))),
        failedProcessing: (React.createElement("div", null,
            errorLoadingFileImage(formatMessage),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.something_went_wrong))),
            React.createElement("p", null,
                React.createElement(FormattedMessage, Object.assign({}, i18nMessages.might_be_a_hiccup))))),
    };
    return messages[errorName];
};
export class MediaViewerError {
    constructor(errorName, fileState, innerError) {
        this.errorName = errorName;
        this.fileState = fileState;
        this.innerError = innerError;
    }
}
export const createError = (name, innerError, fileState) => {
    return new MediaViewerError(name, fileState, innerError);
};
export class ErrorMessage extends React.Component {
    constructor() {
        super(...arguments);
        this.fireAnalytics = (payload) => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                const ev = createAnalyticsEvent(payload);
                ev.fire(channel);
            }
        };
    }
    componentDidMount() {
        const { error: { errorName: failReason, fileState }, } = this.props;
        const event = mediaPreviewFailedEvent(failReason, fileState);
        this.fireAnalytics(event);
    }
    render() {
        const { intl: { formatMessage }, } = this.props;
        const errorMessage = getErrorMessage(formatMessage, this.props.error.errorName);
        return (React.createElement(ErrorMessageWrapper, { "data-testid": "media-viewer-error" },
            errorMessage,
            this.props.children));
    }
}
export default withAnalyticsEvents()(injectIntl(ErrorMessage));
//# sourceMappingURL=error.js.map