import React from 'react';
import { Component } from 'react';
import { Ellipsify, MediaImage } from '@atlaskit/media-ui';
import VidPlayIcon from '@atlaskit/icon/glyph/vid-play';
import { CardOverlay } from './cardOverlay';
import { PlayIconWrapper, Wrapper, ProgressBarWrapper, Body, CardActionsWrapper, Overlay, ProgressWrapper, Title, } from './styled';
import { isLoadingImage } from '../../utils/isLoadingImage';
import { CardLoading } from '../../utils/lightCards/cardLoading';
import { shouldDisplayImageThumbnail } from '../../utils/shouldDisplayImageThumbnail';
import { ProgressBar } from '../../utils/progressBar';
import CardActions from '../../utils/cardActions';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { createAndFireCustomMediaEvent, getLoadingStatusAnalyticsPayload, } from '../../utils/analytics';
export class FileCardImageViewBase extends Component {
    constructor() {
        super(...arguments);
        this.wasThumbnailDisplayed = false;
        this.renderCardContents = () => {
            const { status, mediaType } = this.props;
            if (status === 'error') {
                return this.renderErrorContents();
            }
            else if (status === 'failed-processing') {
                return this.renderFailedContents();
            }
            // If a video has no errors/failed processing, we want to be able to play it
            // immediately, even if there's no image preview
            if (mediaType !== 'video' && this.isImageNotReadyForDisplay) {
                return this.renderLoadingContents();
            }
            return this.renderSuccessCardContents();
        };
        this.renderLoadingContents = () => {
            return (React.createElement("div", { className: "wrapper" },
                React.createElement("div", { className: "img-wrapper" },
                    React.createElement(CardLoading, null))));
        };
        this.renderErrorContents = () => {
            const { error, alt, mediaName, mediaType, onRetry, actions, fileSize, } = this.props;
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "wrapper" }),
                React.createElement(CardOverlay, { persistent: true, mediaName: mediaName, mediaType: mediaType, error: error, alt: alt, onRetry: onRetry, actions: actions, subtitle: fileSize })));
        };
        this.renderFailedContents = () => {
            const { mediaName, mediaType, actions, fileSize } = this.props;
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "wrapper" }),
                React.createElement(CardOverlay, { noHover: true, persistent: true, mediaName: mediaName, mediaType: mediaType, actions: actions, subtitle: fileSize })));
        };
        this.renderUploadingCardOverlay = () => {
            const { mediaType, dataURI, selectable, selected } = this.props;
            const isPersistent = mediaType === 'doc' || !dataURI;
            return (React.createElement(CardOverlay, { persistent: isPersistent, selectable: selectable, selected: selected }));
        };
        this.renderPlayButton = () => {
            const { mediaType, selectable, dataURI } = this.props;
            if (mediaType !== 'video') {
                return null;
            }
            if (selectable && !shouldDisplayImageThumbnail(dataURI, mediaType)) {
                return null;
            }
            return (React.createElement(PlayIconWrapper, null,
                React.createElement(VidPlayIcon, { label: "play", size: "large" })));
        };
        this.onImageLoad = () => {
            this.fireLoadingStatusAnalyticsEvent('succeeded');
        };
        this.onImageError = () => {
            this.fireLoadingStatusAnalyticsEvent('failed');
        };
        this.renderMediaImage = () => {
            const { dataURI, mediaType, previewOrientation, onDisplayImage, alt, } = this.props;
            if (!shouldDisplayImageThumbnail(dataURI, mediaType)) {
                this.fireLoadingStatusAnalyticsEvent('succeeded');
                return null;
            }
            if (!this.wasThumbnailDisplayed &&
                onDisplayImage &&
                mediaType === 'image') {
                onDisplayImage();
                this.wasThumbnailDisplayed = true;
            }
            return (React.createElement(MediaImage, { dataURI: dataURI, alt: alt, crop: this.isCropped, stretch: this.isStretched, previewOrientation: previewOrientation, onImageLoad: this.onImageLoad, onImageError: this.onImageError }));
        };
        this.shouldFireLoadingStatusAnalyticsEvent = (action) => !this.lastAnalyticsAction || this.lastAnalyticsAction !== action;
        this.fireLoadingStatusAnalyticsEvent = (action) => {
            const { createAnalyticsEvent } = this.props;
            if (this.shouldFireLoadingStatusAnalyticsEvent(action)) {
                this.lastAnalyticsAction = action;
                if (action === 'failed') {
                    createAndFireCustomMediaEvent(getLoadingStatusAnalyticsPayload(action, undefined, undefined, {
                        error: 'unknown error',
                        failReason: 'file-uri-error',
                    }), createAnalyticsEvent);
                }
                else {
                    createAndFireCustomMediaEvent(getLoadingStatusAnalyticsPayload(action), createAnalyticsEvent);
                }
            }
        };
        this.renderProgressBar = () => {
            const { mediaName, progress, actions, status } = this.props;
            if (status !== 'uploading') {
                return null;
            }
            return (React.createElement(ProgressBarWrapper, null,
                React.createElement(Overlay, null,
                    React.createElement(Title, null,
                        React.createElement(Ellipsify, { testId: "media-card-file-name", text: mediaName || '', lines: 2 })),
                    React.createElement(Body, null,
                        React.createElement(ProgressWrapper, null,
                            React.createElement(ProgressBar, { progress: progress })),
                        React.createElement(CardActionsWrapper, null, actions ? (React.createElement(CardActions, { actions: actions, triggerColor: "white" })) : null)))));
        };
        this.renderSuccessCardContents = () => {
            const { disableOverlay, selectable, status } = this.props;
            let overlay = null;
            if (!disableOverlay) {
                if (status === 'uploading') {
                    if (selectable) {
                        overlay = this.renderUploadingCardOverlay();
                    }
                }
                else {
                    overlay = this.renderSuccessCardOverlay();
                }
            }
            return (React.createElement("div", { className: "wrapper" },
                React.createElement("div", { className: "img-wrapper" },
                    this.renderMediaImage(),
                    this.renderProgressBar(),
                    this.renderPlayButton()),
                overlay));
        };
        this.renderSuccessCardOverlay = () => {
            const { mediaName, mediaType, fileSize, dataURI, selectable, selected, actions, } = this.props;
            const isPersistent = mediaType === 'doc' || !dataURI;
            return (React.createElement(CardOverlay, { persistent: isPersistent, selectable: selectable, selected: selected, mediaName: mediaName, mediaType: mediaType, subtitle: fileSize, actions: actions }));
        };
    }
    render() {
        const { disableOverlay, selectable, selected, mediaType, progress, status, mediaName, } = this.props;
        return (React.createElement(Wrapper, { "data-testid": "media-file-card-view", "data-test-media-name": mediaName, "data-test-status": status, "data-test-progress": progress, "data-test-selected": selected ? true : undefined, disableOverlay: disableOverlay, selectable: selectable, selected: selected, mediaType: mediaType }, this.renderCardContents()));
    }
    get isImageNotReadyForDisplay() {
        const { status, dataURI, mediaType } = this.props;
        if (dataURI) {
            return false;
        }
        return (status === 'loading' ||
            status === 'processing' ||
            isLoadingImage(mediaType, dataURI));
    }
    get isCropped() {
        const { resizeMode } = this.props;
        return resizeMode === 'crop';
    }
    get isStretched() {
        const { resizeMode } = this.props;
        return resizeMode === 'stretchy-fit';
    }
}
FileCardImageViewBase.defaultProps = {
    resizeMode: 'crop',
    disableOverlay: false,
};
export const FileCardImageView = withAnalyticsEvents()(FileCardImageViewBase);
//# sourceMappingURL=index.js.map