import { __assign } from "tslib";
/** @jsx jsx */
import { jsx } from '@emotion/core';
import { B50 } from '@atlaskit/theme/colors';
import { FormattedMessage } from 'react-intl';
import { Frame } from '../components/Frame';
import { Thumbnail } from '../components/Thumbnail';
import { Provider } from '../components/Provider';
import { Name } from '../components/Name';
import { Byline } from '../components/Byline';
import { ActionList } from '../components/ActionList';
import { Content } from '../components/Content';
import { messages } from '../../messages';
import { CelebrationImage } from '../utils/constants';
import { ContentHeader } from '../components/ContentHeader';
import { ContentFooter } from '../components/ContentFooter';
import { Icon } from '../components/Icon';
import { handleClickCommon } from '../utils/handlers';
var textNameProps = __assign({}, messages.connect_link_account_card_name);
var textBylineProps = __assign({}, messages.connect_link_account_card_description);
export var UnauthorizedView = function (_a) {
    var _b = _a.context, context = _b === void 0 ? { text: '' } : _b, _c = _a.isSelected, isSelected = _c === void 0 ? false : _c, _d = _a.actions, actions = _d === void 0 ? [] : _d, _e = _a.testId, testId = _e === void 0 ? 'block-card-unauthorized-view' : _e, _f = _a.showActions, showActions = _f === void 0 ? true : _f, _g = _a.icon, icon = _g === void 0 ? {} : _g, _h = _a.link, link = _h === void 0 ? '' : _h, _j = _a.onClick, onClick = _j === void 0 ? function () { } : _j;
    var handleClick = function (event) {
        return handleClickCommon(event, onClick);
    };
    return (jsx(Frame, { isSelected: isSelected, testId: testId },
        jsx(Content, null,
            jsx("div", null,
                jsx(ContentHeader, { onClick: handleClick, link: link },
                    jsx(Icon, __assign({}, icon)),
                    jsx(Name, { testId: testId ? testId + "-name" : undefined, name: jsx(FormattedMessage, __assign({}, textNameProps, { values: { context: context.text } })) })),
                jsx(Byline, { testId: testId ? testId + "-byline" : undefined, text: jsx(FormattedMessage, __assign({}, textBylineProps, { values: { context: context.text } })) })),
            jsx(ContentFooter, null,
                jsx(Provider, { name: context.text, icon: context.icon }),
                showActions && jsx(ActionList, { items: actions }))),
        jsx(Thumbnail, { src: CelebrationImage, color: B50, testId: testId ? testId + "-thumb" : undefined })));
};
//# sourceMappingURL=UnauthorizedView.js.map