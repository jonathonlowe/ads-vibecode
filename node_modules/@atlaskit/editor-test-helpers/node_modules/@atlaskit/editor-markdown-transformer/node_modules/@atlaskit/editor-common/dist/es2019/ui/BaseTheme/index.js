import React, { useMemo } from 'react';
import { ThemeProvider } from 'styled-components';
import { fontSize } from '@atlaskit/theme/constants';
import { akEditorDefaultLayoutWidth } from '../../styles';
import { WidthConsumer } from '../WidthProvider';
function mapBreakpointToFontSize(breakpoint) {
    switch (breakpoint) {
        case 'M':
            return fontSize() + 2;
        case 'L':
            return fontSize() + 4;
        default:
            return fontSize();
    }
}
export function mapBreakpointToLayoutMaxWidth(breakpoint) {
    switch (breakpoint) {
        case 'M':
            return 760;
        case 'L':
            return 850;
        default:
            return 680;
    }
}
export function BaseThemeWrapper({ breakpoint, dynamicTextSizing, baseFontSize, children, }) {
    const memoizedTheme = useMemo(() => ({
        baseFontSize: dynamicTextSizing
            ? mapBreakpointToFontSize(breakpoint)
            : baseFontSize || mapBreakpointToFontSize('S'),
        layoutMaxWidth: dynamicTextSizing
            ? mapBreakpointToLayoutMaxWidth(breakpoint)
            : akEditorDefaultLayoutWidth,
    }), [breakpoint, dynamicTextSizing, baseFontSize]);
    return React.createElement(ThemeProvider, { theme: memoizedTheme }, children);
}
export function BaseTheme({ children, dynamicTextSizing, baseFontSize, }) {
    return (React.createElement(WidthConsumer, null, ({ breakpoint }) => (React.createElement(BaseThemeWrapper, { dynamicTextSizing: dynamicTextSizing, breakpoint: breakpoint, baseFontSize: baseFontSize },
        React.createElement(React.Fragment, null, children)))));
}
//# sourceMappingURL=index.js.map