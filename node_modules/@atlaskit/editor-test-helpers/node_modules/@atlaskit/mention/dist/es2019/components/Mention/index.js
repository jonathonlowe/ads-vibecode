import React from 'react';
import { FormattedMessage } from 'react-intl';
import { MentionStyle } from './styles';
import { NoAccessTooltip } from '../NoAccessTooltip';
import { isRestricted, MentionType } from '../../types';
import { fireAnalyticsMentionEvent } from '../../util/analytics';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { messages } from '../i18n';
export const ANALYTICS_HOVER_DELAY = 1000;
export const UNKNOWN_USER_ID = '_|unknown|_';
export class MentionInternal extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.handleOnClick = (e) => {
            const { id, text, onClick } = this.props;
            if (onClick) {
                onClick(id, text, e);
            }
        };
        this.handleOnMouseEnter = (e) => {
            const { id, text, onMouseEnter, onHover } = this.props;
            if (onMouseEnter) {
                onMouseEnter(id, text, e);
            }
            this.hoverTimeout = window.setTimeout(() => {
                if (onHover) {
                    onHover();
                }
                this.hoverTimeout = undefined;
            }, ANALYTICS_HOVER_DELAY);
        };
        this.handleOnMouseLeave = (e) => {
            const { id, text, onMouseLeave } = this.props;
            if (onMouseLeave) {
                onMouseLeave(id, text, e);
            }
            if (this.hoverTimeout) {
                clearTimeout(this.hoverTimeout);
            }
        };
        this.getMentionType = () => {
            const { accessLevel, isHighlighted } = this.props;
            if (isHighlighted) {
                return MentionType.SELF;
            }
            if (isRestricted(accessLevel)) {
                return MentionType.RESTRICTED;
            }
            return MentionType.DEFAULT;
        };
    }
    componentWillUnmount() {
        if (this.hoverTimeout) {
            clearTimeout(this.hoverTimeout);
        }
    }
    renderUnknownUserError(id) {
        return (React.createElement(FormattedMessage, Object.assign({}, messages.unknownUserError, { values: { userId: id.slice(-5) } }), message => `@${message}`));
    }
    render() {
        const { handleOnClick, handleOnMouseEnter, handleOnMouseLeave, props, } = this;
        const { text, id, accessLevel } = props;
        const mentionType = this.getMentionType();
        const failedMention = text === `@${UNKNOWN_USER_ID}`;
        const mentionComponent = (React.createElement(MentionStyle, { mentionType: mentionType, onClick: handleOnClick, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave }, failedMention ? this.renderUnknownUserError(id) : text || '@...'));
        return (React.createElement("span", { "data-mention-id": id, "data-access-level": accessLevel, spellCheck: false }, mentionType === MentionType.RESTRICTED ? (React.createElement(NoAccessTooltip, { name: text }, mentionComponent)) : (mentionComponent)));
    }
}
const MentionWithAnalytics = withAnalyticsEvents({
    onClick: (createEvent, props) => {
        const { id, text, accessLevel } = props;
        const event = fireAnalyticsMentionEvent(createEvent)('mention', 'selected', text, id, accessLevel);
        return event;
    },
    onHover: (createEvent, props) => {
        const { id, text, accessLevel } = props;
        const event = fireAnalyticsMentionEvent(createEvent)('mention', 'hovered', text, id, accessLevel);
        return event;
    },
})(MentionInternal);
const Mention = MentionWithAnalytics;
export default Mention;
//# sourceMappingURL=index.js.map