import { padArray } from '../util';
/**
 * This component is stateful and should be instantianted per contextIdentifiers.
 */
export default class ContextMentionResource {
    constructor(mentionProvider, contextIdentifier) {
        this.callWithContextIds = (f, declaredArgs) => (...args) => {
            const argsLength = args ? args.length : 0;
            // cover the scenario where optional parameters are not passed
            // by passing undefined instead to keep the contextIdentifiers parameter in the right position
            const mentionArgs = argsLength !== declaredArgs
                ? padArray(args, declaredArgs - argsLength, undefined)
                : args;
            return this.mentionProvider[f](...mentionArgs, this.contextIdentifier);
        };
        this.callDefault = (f) => (...args) => this.mentionProvider[f](...args);
        this.subscribe = this.callDefault('subscribe');
        this.unsubscribe = this.callDefault('unsubscribe');
        this.filter = this.callWithContextIds('filter', 1);
        this.recordMentionSelection = this.callWithContextIds('recordMentionSelection', 1);
        this.shouldHighlightMention = this.callDefault('shouldHighlightMention');
        this.isFiltering = this.callDefault('isFiltering');
        this.mentionProvider = mentionProvider;
        this.contextIdentifier = contextIdentifier;
    }
    getContextIdentifier() {
        return this.contextIdentifier;
    }
}
//# sourceMappingURL=ContextMentionResource.js.map