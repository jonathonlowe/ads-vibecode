import React from 'react';
import { isResolvingMentionProvider, } from '../../api/MentionResource';
import { isPromise, MentionNameStatus, } from '../../types';
import Mention, { UNKNOWN_USER_ID } from './';
export default class ResourcedMention extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleMentionProvider = (props) => {
            const { id, mentionProvider, text } = props;
            if (mentionProvider) {
                mentionProvider
                    .then(provider => {
                    const newState = {
                        isHighlighted: provider.shouldHighlightMention({ id }),
                    };
                    if (!text && isResolvingMentionProvider(provider)) {
                        const nameDetail = provider.resolveMentionName(id);
                        if (isPromise(nameDetail)) {
                            nameDetail.then(nameDetailResult => {
                                this.setState({
                                    resolvedMentionName: this.processName(nameDetailResult),
                                });
                            });
                        }
                        else {
                            newState.resolvedMentionName = this.processName(nameDetail);
                        }
                    }
                    this.setState(newState);
                })
                    .catch(() => {
                    this.setState({
                        isHighlighted: false,
                    });
                });
            }
            else {
                this.setState({
                    isHighlighted: false,
                });
            }
        };
        this.state = {
            isHighlighted: false,
        };
    }
    componentDidMount() {
        this.handleMentionProvider(this.props);
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const { props } = this;
        if (props.id !== nextProps.id ||
            props.mentionProvider !== nextProps.mentionProvider) {
            this.handleMentionProvider(nextProps);
        }
    }
    processName(name) {
        let mentionName;
        switch (name.status) {
            case MentionNameStatus.OK:
                mentionName = name.name || '';
                break;
            case MentionNameStatus.SERVICE_ERROR:
            case MentionNameStatus.UNKNOWN:
            default:
                mentionName = UNKNOWN_USER_ID;
                break;
        }
        return `@${mentionName}`;
    }
    render() {
        const { props, state } = this;
        return (React.createElement(Mention, { id: props.id, text: state.resolvedMentionName || props.text, isHighlighted: state.isHighlighted, accessLevel: props.accessLevel, onClick: props.onClick, onMouseEnter: props.onMouseEnter, onMouseLeave: props.onMouseLeave }));
    }
}
//# sourceMappingURL=ResourcedMention.js.map