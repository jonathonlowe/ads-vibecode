"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
var plugin_1 = require("./plugin");
function addAnalytics(tr, payload, channel) {
    var analyticsMeta = tr.getMeta(plugin_1.analyticsPluginKey) || [];
    analyticsMeta.push({ payload: payload, channel: channel });
    return tr.setMeta(plugin_1.analyticsPluginKey, analyticsMeta);
}
exports.addAnalytics = addAnalytics;
function withAnalytics(payload, channel) {
    return function (command) { return function (state, dispatch, view) {
        return command(state, function (tr) {
            if (dispatch) {
                if (payload instanceof Function) {
                    var dynamicPayload = payload(state);
                    if (dynamicPayload) {
                        dispatch(addAnalytics(tr, dynamicPayload, channel));
                    }
                }
                else {
                    dispatch(addAnalytics(tr, payload, channel));
                }
            }
        }, view);
    }; };
}
exports.withAnalytics = withAnalytics;
function ruleWithAnalytics(getPayload) {
    return function (rule) {
        // Monkey patching handler to add analytics
        var handler = rule.handler;
        rule.handler = function (state, match, start, end) {
            var tr = handler(state, match, start, end);
            if (tr) {
                var payload = getPayload(state, match, start, end);
                tr = addAnalytics(tr, payload);
            }
            return tr;
        };
        return rule;
    };
}
exports.ruleWithAnalytics = ruleWithAnalytics;
exports.fireAnalyticsEvent = function (createAnalyticsEvent) { return function (_a) {
    var payload = _a.payload, _b = _a.channel, channel = _b === void 0 ? index_1.editorAnalyticsChannel : _b;
    return createAnalyticsEvent && createAnalyticsEvent(payload).fire(channel);
}; };
//# sourceMappingURL=utils.js.map