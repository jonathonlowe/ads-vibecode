/// <reference types="react-intl" />
import * as React from 'react';
import { EditorView } from 'prosemirror-view';
import { Schema } from 'prosemirror-model';
import * as PropTypes from 'prop-types';
import { EditorPlugin, EditorAppearanceComponentProps } from '../../types';
import { EventDispatcher, Dispatch } from '../../event-dispatcher';
import { PortalProviderAPI } from '../../ui/PortalProvider';
import { Transformer } from '@atlaskit/editor-common';
import { EditorActions } from '../../index';
export declare type EditorProps = {
    plugins?: Array<EditorPlugin>;
    transformer?: (schema: Schema) => Transformer<string>;
    children?: React.ReactChild;
    defaultValue?: string | object;
    popupsMountPoint?: HTMLElement;
    popupsBoundariesElement?: HTMLElement;
    popupsScrollableElement?: HTMLElement;
    disabled?: boolean;
    placeholder?: string;
};
export declare type EditorPropsExtended = EditorProps & {
    portalProviderAPI: PortalProviderAPI;
};
declare const PresetProvider: React.ProviderExoticComponent<React.ProviderProps<EditorPlugin[]>>;
export { PresetProvider };
export declare function corePlugins(props: EditorProps): EditorPlugin[];
export interface EditorSharedConfig {
    editorView: EditorView;
    eventDispatcher: EventDispatcher;
    dispatch: Dispatch;
    primaryToolbarComponents: EditorAppearanceComponentProps['primaryToolbarComponents'];
    contentComponents: EditorAppearanceComponentProps['contentComponents'];
    popupsMountPoint: EditorProps['popupsMountPoint'];
    popupsBoundariesElement: EditorProps['popupsBoundariesElement'];
    popupsScrollableElement: EditorProps['popupsScrollableElement'];
    providerFactory: EditorAppearanceComponentProps['providerFactory'];
    disabled: EditorProps['disabled'];
}
export declare class Editor extends React.Component<EditorProps> {
    render(): JSX.Element;
}
export declare class EditorInternal extends React.Component<EditorPropsExtended, EditorSharedConfig> {
    editorActions: EditorActions;
    static contextTypes: {
        editorActions: PropTypes.Requireable<any>;
        intl: ReactIntl.IntlShape;
    };
    constructor(props: EditorPropsExtended, context: any);
    handleRef: (ref: HTMLDivElement | null) => void;
    render(): JSX.Element;
}
export declare class EditorSharedConfigProvider extends React.Component<{
    value: EditorSharedConfig | null;
}, any> {
    static childContextTypes: {
        editorSharedConfig: PropTypes.Requireable<any>;
    };
    getChildContext(): {
        editorSharedConfig: EditorSharedConfig | null;
    };
    render(): JSX.Element;
}
interface EditorSharedConfigConsumerProps {
    children: (value: EditorSharedConfig | null) => React.ReactNode | null;
}
export declare class EditorSharedConfigConsumer extends React.Component<EditorSharedConfigConsumerProps> {
    static contextTypes: {
        editorSharedConfig: PropTypes.Requireable<any>;
    };
    render(): JSX.Element;
}
