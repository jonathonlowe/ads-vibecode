import { __assign, __extends } from "tslib";
import * as React from 'react';
import { EditorView } from 'prosemirror-view';
import * as PropTypes from 'prop-types';
import EditorContext from '../../ui/EditorContext';
import { EditorContentProvider } from './EditorContent';
import { EventDispatcher, createDispatch, } from '../../event-dispatcher';
import { processPluginsList, createPMPlugins, createSchema, } from '../../create-editor/create-editor';
import { intlShape, IntlProvider } from 'react-intl';
import { PortalProvider, PortalRenderer, } from '../../ui/PortalProvider';
import { ProviderFactory, WidthProvider, } from '@atlaskit/editor-common';
import { EditorState } from 'prosemirror-state';
import { EditorActions } from '../../index';
import { processRawValue } from '../../utils';
import { basePlugin, placeholderPlugin, editorDisabledPlugin, typeAheadPlugin, floatingToolbarPlugin, gapCursorPlugin, } from '../../plugins';
var _a = React.createContext([]), PresetProvider = _a.Provider, PresetConsumer = _a.Consumer;
export { PresetProvider };
export function corePlugins(props) {
    return [
        basePlugin({
            allowInlineCursorTarget: true,
            allowScrollGutter: function () {
                return document.querySelector('.fabric-editor-popup-scroll-parent');
            },
        }),
        placeholderPlugin({ placeholder: props.placeholder }),
        editorDisabledPlugin(),
        typeAheadPlugin(),
        floatingToolbarPlugin(),
        gapCursorPlugin(),
    ];
}
var Editor = /** @class */ (function (_super) {
    __extends(Editor, _super);
    function Editor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Editor.prototype.render = function () {
        var _this = this;
        return (React.createElement(PresetConsumer, null, function (plugins) { return (React.createElement(PortalProvider, { render: function (portalProviderAPI) { return (React.createElement(IntlProvider, { locale: "en" },
                React.createElement(React.Fragment, null,
                    React.createElement(EditorInternal, __assign({}, _this.props, { plugins: corePlugins(_this.props).concat(_this.props.plugins || [], plugins), portalProviderAPI: portalProviderAPI })),
                    React.createElement(PortalRenderer, { portalProviderAPI: portalProviderAPI })))); } })); }));
    };
    return Editor;
}(React.Component));
export { Editor };
var EditorInternal = /** @class */ (function (_super) {
    __extends(EditorInternal, _super);
    function EditorInternal(props, context) {
        var _this = _super.call(this, props) || this;
        _this.handleRef = function (ref) {
            if (!ref) {
                return;
            }
            var eventDispatcher = new EventDispatcher();
            var providerFactory = new ProviderFactory();
            var dispatch = createDispatch(eventDispatcher);
            var editorConfig = processPluginsList(_this.props.plugins || [], {});
            var schema = createSchema(editorConfig);
            var pmPlugins = createPMPlugins({
                editorConfig: editorConfig,
                schema: schema,
                dispatch: dispatch,
                eventDispatcher: eventDispatcher,
                props: {},
                portalProviderAPI: _this.props.portalProviderAPI,
                providerFactory: providerFactory,
                reactContext: function () { return _this.context; },
                dispatchAnalyticsEvent: function () { },
            });
            var state = EditorState.create({
                schema: schema,
                plugins: pmPlugins,
                doc: processRawValue(schema, _this.props.defaultValue),
            });
            var editorView = new EditorView({ mount: ref }, { state: state });
            // Editor Shared Config
            _this.setState({
                editorView: editorView,
                eventDispatcher: eventDispatcher,
                dispatch: dispatch,
                primaryToolbarComponents: editorConfig.primaryToolbarComponents,
                contentComponents: editorConfig.contentComponents,
                popupsMountPoint: _this.props.popupsMountPoint,
                popupsBoundariesElement: _this.props.popupsBoundariesElement,
                popupsScrollableElement: _this.props.popupsScrollableElement,
                disabled: _this.props.disabled,
                providerFactory: providerFactory,
            });
            _this.editorActions._privateRegisterEditor(editorView, eventDispatcher);
        };
        _this.editorActions = (context || {}).editorActions || new EditorActions();
        return _this;
    }
    EditorInternal.prototype.render = function () {
        return (React.createElement(WidthProvider, null,
            React.createElement(EditorContext, { editorActions: this.editorActions },
                React.createElement(EditorSharedConfigProvider, { value: this.state },
                    React.createElement(EditorContentProvider, { value: this.handleRef }, this.props.children)))));
    };
    EditorInternal.contextTypes = {
        editorActions: PropTypes.object,
        intl: intlShape,
    };
    return EditorInternal;
}(React.Component));
export { EditorInternal };
var _b = React.createContext(null), Provider = _b.Provider, Consumer = _b.Consumer;
var EditorSharedConfigProvider = /** @class */ (function (_super) {
    __extends(EditorSharedConfigProvider, _super);
    function EditorSharedConfigProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditorSharedConfigProvider.prototype.getChildContext = function () {
        return {
            editorSharedConfig: this.props.value,
        };
    };
    EditorSharedConfigProvider.prototype.render = function () {
        return React.createElement(Provider, { value: this.props.value }, this.props.children);
    };
    EditorSharedConfigProvider.childContextTypes = {
        editorSharedConfig: PropTypes.object,
    };
    return EditorSharedConfigProvider;
}(React.Component));
export { EditorSharedConfigProvider };
var EditorSharedConfigConsumer = /** @class */ (function (_super) {
    __extends(EditorSharedConfigConsumer, _super);
    function EditorSharedConfigConsumer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditorSharedConfigConsumer.prototype.render = function () {
        var _this = this;
        return (React.createElement(Consumer, null, function (value) { return _this.props.children(_this.context.editorSharedConfig || value); }));
    };
    EditorSharedConfigConsumer.contextTypes = {
        editorSharedConfig: PropTypes.object,
    };
    return EditorSharedConfigConsumer;
}(React.Component));
export { EditorSharedConfigConsumer };
//# sourceMappingURL=Editor.js.map