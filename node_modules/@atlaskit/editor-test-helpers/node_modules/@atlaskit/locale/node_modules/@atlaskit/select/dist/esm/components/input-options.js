import { __assign, __extends, __read, __rest } from "tslib";
/** @jsx jsx */
import { jsx } from '@emotion/core';
import { Component } from 'react';
import RadioIcon from '@atlaskit/icon/glyph/radio';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import { themed } from '@atlaskit/theme/components';
import { gridSize } from '@atlaskit/theme/constants';
import * as colors from '@atlaskit/theme/colors';
var getPrimitiveStyles = function (props) {
    var cx = props.cx, className = props.className, getStyles = props.getStyles, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected;
    var styles = {
        alignItems: 'center',
        backgroundColor: isFocused ? colors.N30 : 'transparent',
        color: 'inherit',
        display: 'flex ',
        paddingBottom: 4,
        paddingLeft: gridSize() * 2 + "px",
        paddingTop: 4,
        ':active': {
            backgroundColor: colors.B50,
        },
    };
    var augmentedStyles = __assign(__assign({}, getStyles('option', props)), styles);
    var bemClasses = {
        option: true,
        'option--is-disabled': isDisabled,
        'option--is-focused': isFocused,
        'option--is-selected': isSelected,
    };
    // maintain react-select API
    return [augmentedStyles, cx(null, bemClasses, className)];
};
// maintains function shape
var backgroundColor = themed({ light: colors.N40A, dark: colors.DN10 });
var transparent = themed({ light: 'transparent', dark: 'transparent' });
// the primary color represents the outer or background element
var getPrimaryColor = function (_a) {
    var isActive = _a.isActive, isDisabled = _a.isDisabled, isFocused = _a.isFocused, isSelected = _a.isSelected, rest = __rest(_a, ["isActive", "isDisabled", "isFocused", "isSelected"]);
    var color = backgroundColor;
    if (isDisabled && isSelected) {
        color = themed({ light: colors.B75, dark: colors.DN200 });
    }
    else if (isDisabled) {
        color = themed({ light: colors.N20A, dark: colors.DN10 });
    }
    else if (isActive) {
        color = themed({ light: colors.B75, dark: colors.B200 });
    }
    else if (isFocused && isSelected) {
        color = themed({ light: colors.B300, dark: colors.B75 });
    }
    else if (isFocused) {
        color = themed({ light: colors.N50A, dark: colors.DN30 });
    }
    else if (isSelected) {
        color = colors.blue;
    }
    return color(rest);
};
// the secondary color represents the radio dot or checkmark
var getSecondaryColor = function (_a) {
    var isActive = _a.isActive, isDisabled = _a.isDisabled, isSelected = _a.isSelected, rest = __rest(_a, ["isActive", "isDisabled", "isSelected"]);
    var color = themed({ light: colors.N0, dark: colors.DN10 });
    if (isDisabled && isSelected) {
        color = themed({ light: colors.N70, dark: colors.DN10 });
    }
    else if (isActive && isSelected && !isDisabled) {
        color = themed({ light: colors.B400, dark: colors.DN10 });
    }
    else if (!isSelected) {
        color = transparent;
    }
    return color(rest);
};
var ControlOption = /** @class */ (function (_super) {
    __extends(ControlOption, _super);
    function ControlOption() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { isActive: false };
        _this.onMouseDown = function () { return _this.setState({ isActive: true }); };
        _this.onMouseUp = function () { return _this.setState({ isActive: false }); };
        _this.onMouseLeave = function () { return _this.setState({ isActive: false }); };
        return _this;
    }
    ControlOption.prototype.render = function () {
        var _a = this.props, getStyles = _a.getStyles, Icon = _a.Icon, children = _a.children, innerProps = _a.innerProps, innerRef = _a.innerRef, rest = __rest(_a, ["getStyles", "Icon", "children", "innerProps", "innerRef"]);
        // prop assignment
        var props = __assign(__assign({}, innerProps), { onMouseDown: this.onMouseDown, onMouseUp: this.onMouseUp, onMouseLeave: this.onMouseLeave });
        var _b = __read(getPrimitiveStyles(__assign({ getStyles: getStyles }, rest)), 2), styles = _b[0], classes = _b[1];
        return (jsx("div", __assign({ css: styles, className: classes, ref: innerRef }, props),
            jsx("div", { css: {
                    alignItems: 'center',
                    display: 'flex ',
                    flexShrink: 0,
                    paddingRight: '4px',
                } }, !!Icon ? (jsx(Icon, { label: "", primaryColor: getPrimaryColor(__assign(__assign({}, this.props), this.state)), secondaryColor: getSecondaryColor(__assign(__assign({}, this.props), this.state)) })) : null),
            jsx("div", { css: {
                    textOverflow: 'ellipsis',
                    overflowX: 'hidden',
                    flexGrow: 1,
                    whiteSpace: 'nowrap',
                } }, children)));
    };
    return ControlOption;
}(Component));
export var CheckboxOption = function (props) { return (jsx(ControlOption, __assign({ Icon: CheckboxIcon }, props))); };
export var RadioOption = function (props) { return (jsx(ControlOption, __assign({ Icon: RadioIcon }, props))); };
//# sourceMappingURL=input-options.js.map