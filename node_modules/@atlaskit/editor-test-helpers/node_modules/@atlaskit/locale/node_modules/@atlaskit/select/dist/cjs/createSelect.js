"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_select_1 = require("react-select");
var animated_1 = tslib_1.__importDefault(require("react-select/animated"));
var memoize_one_1 = tslib_1.__importDefault(require("memoize-one"));
var react_fast_compare_1 = tslib_1.__importDefault(require("react-fast-compare"));
var defaultComponents = tslib_1.__importStar(require("./components"));
var styles_1 = tslib_1.__importDefault(require("./styles"));
function createSelect(WrappedComponent) {
    var _a;
    return _a = /** @class */ (function (_super) {
            tslib_1.__extends(AtlaskitSelect, _super);
            function AtlaskitSelect(props) {
                var _this = _super.call(this, props) || this;
                _this.components = {};
                _this.select = null;
                _this.cacheComponents = function (components, enableAnimation) {
                    _this.components = enableAnimation
                        ? animated_1.default(tslib_1.__assign(tslib_1.__assign({}, defaultComponents), components))
                        : tslib_1.__assign(tslib_1.__assign({}, defaultComponents), components);
                };
                _this.onSelectRef = function (ref) {
                    _this.select = ref;
                    var innerRef = _this.props.innerRef;
                    if (typeof innerRef === 'object') {
                        innerRef.current = ref;
                    }
                    if (typeof innerRef === 'function') {
                        innerRef(ref);
                    }
                };
                _this.cacheComponents = memoize_one_1.default(_this.cacheComponents, react_fast_compare_1.default).bind(_this);
                _this.cacheComponents(props.components || {}, props.enableAnimation);
                return _this;
            }
            AtlaskitSelect.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
                this.cacheComponents(nextProps.components, nextProps.enableAnimation);
            };
            AtlaskitSelect.prototype.focus = function () {
                if (this.select)
                    this.select.focus();
            };
            AtlaskitSelect.prototype.blur = function () {
                if (this.select)
                    this.select.blur();
            };
            AtlaskitSelect.prototype.render = function () {
                var _a = this.props, styles = _a.styles, validationState = _a.validationState, spacing = _a.spacing, isMulti = _a.isMulti, props = tslib_1.__rest(_a, ["styles", "validationState", "spacing", "isMulti"]);
                var isCompact = spacing === 'compact';
                // props must be spread first to stop `components` being overridden
                return (react_1.default.createElement(WrappedComponent, tslib_1.__assign({ ref: this.onSelectRef, isMulti: isMulti }, props, { components: this.components, styles: react_select_1.mergeStyles(styles_1.default(validationState, isCompact), styles) })));
            };
            return AtlaskitSelect;
        }(react_1.Component)),
        _a.defaultProps = {
            enableAnimation: true,
            validationState: 'default',
            spacing: 'default',
            onClickPreventDefault: true,
            tabSelectsValue: false,
            components: {},
            styles: {},
        },
        _a;
}
exports.default = createSelect;
//# sourceMappingURL=createSelect.js.map