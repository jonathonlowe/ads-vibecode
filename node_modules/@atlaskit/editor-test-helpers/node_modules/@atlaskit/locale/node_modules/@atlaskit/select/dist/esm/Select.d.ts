/// <reference types="react" />
/// <reference types="@emotion/core" />
import Select from 'react-select';
export declare const SelectWithoutAnalytics: {
    new <Option = import("./types.js").OptionType>(props: import("./types.js").SelectProps<Option>): {
        components: Partial<import("react-select/src/components").SelectComponents<Option>>;
        select: Select<Option, import("react-select/src/Select").default<Option>> | null;
        UNSAFE_componentWillReceiveProps(nextProps: import("./types.js").SelectProps<Option>): void;
        cacheComponents: (components: Partial<import("react-select/src/components").SelectComponents<Option>>, enableAnimation: boolean) => void;
        focus(): void;
        blur(): void;
        onSelectRef: (ref: Select<Option, import("react-select/src/Select").default<Option>>) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./types.js").SelectProps<Option>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<import("./types.js").SelectProps<Option>> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./types.js").SelectProps<Option>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./types.js").SelectProps<Option>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    defaultProps: {
        enableAnimation: boolean;
        validationState: string;
        spacing: string;
        onClickPreventDefault: boolean;
        tabSelectsValue: boolean;
        components: {};
        styles: {};
    };
    contextType?: import("react").Context<any> | undefined;
};
declare const _default: {
    new <Option = import("./types.js").OptionType>(props: import("./types.js").SelectProps<Option>): {
        components: Partial<import("react-select/src/components").SelectComponents<Option>>;
        select: Select<Option, import("react-select/src/Select").default<Option>> | null;
        UNSAFE_componentWillReceiveProps(nextProps: import("./types.js").SelectProps<Option>): void;
        cacheComponents: (components: Partial<import("react-select/src/components").SelectComponents<Option>>, enableAnimation: boolean) => void;
        focus(): void;
        blur(): void;
        onSelectRef: (ref: Select<Option, import("react-select/src/Select").default<Option>>) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("./types.js").SelectProps<Option>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<import("./types.js").SelectProps<Option>> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("./types.js").SelectProps<Option>>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<import("./types.js").SelectProps<Option>>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("./types.js").SelectProps<Option>>, nextState: Readonly<{}>, nextContext: any): void;
    };
    defaultProps: {
        enableAnimation: boolean;
        validationState: string;
        spacing: string;
        onClickPreventDefault: boolean;
        tabSelectsValue: boolean;
        components: {};
        styles: {};
    };
    contextType?: import("react").Context<any> | undefined;
};
export default _default;
