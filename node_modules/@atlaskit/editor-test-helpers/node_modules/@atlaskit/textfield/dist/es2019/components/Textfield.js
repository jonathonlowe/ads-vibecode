import React from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import GlobalTheme from '@atlaskit/theme/components';
import { Theme } from '../theme';
import { name as packageName, version as packageVersion, } from '../version.json';
import Input from './Input';
class Textfield extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isFocused: false,
            isHovered: false,
        };
        this.input = null;
        this.handleOnFocus = (event) => {
            this.setState({ isFocused: true });
            if (this.props.onFocus) {
                this.props.onFocus(event);
            }
        };
        this.handleOnBlur = (event) => {
            this.setState({ isFocused: false });
            if (this.props.onBlur) {
                this.props.onBlur(event);
            }
        };
        this.handleOnMouseDown = (event) => {
            /** Running e.preventDefault() on the INPUT prevents double click behaviour */
            // Sadly we needed this cast as the target type is being correctly set
            const target = event.target;
            if (target.tagName !== 'INPUT') {
                event.preventDefault();
            }
            if (this.input &&
                !this.props.isDisabled &&
                document.activeElement !== this.input) {
                this.input.focus();
            }
            if (this.props.onMouseDown) {
                this.props.onMouseDown(event);
            }
        };
        this.onMouseEnter = () => {
            if (!this.props.isDisabled) {
                this.setState({ isHovered: true });
            }
        };
        this.onMouseLeave = () => {
            if (!this.props.isDisabled) {
                this.setState({ isHovered: false });
            }
        };
        // we want to keep a copy of the ref as well as pass it along
        this.setInputRef = (input) => {
            this.input = input;
            const forwardedRef = this.props.forwardedRef;
            if (!forwardedRef) {
                return;
            }
            if (typeof forwardedRef === 'object') {
                // This is a blunder on the part of @types/react
                // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065
                // .current should be assignable
                // @ts-ignore
                forwardedRef.current = input;
            }
            if (typeof forwardedRef === 'function') {
                forwardedRef(input);
            }
        };
    }
    render() {
        const { isFocused, isHovered } = this.state;
        const { 
        // Sadly need to pull these out.
        // It is injected by the HOC and we don't want to pass it onto the HTML input
        // @ts-ignore: not passed onto input
        createAnalyticsEvent, 
        // @ts-ignore: not passed onto input
        forwardedRef, appearance, isCompact, isDisabled, isInvalid, isRequired, isReadOnly, isMonospaced, theme, width, elemAfterInput, elemBeforeInput, testId, ...otherProps } = this.props;
        return (React.createElement(Theme.Provider, { value: theme },
            React.createElement(GlobalTheme.Consumer, null, ({ mode }) => (React.createElement(Theme.Consumer, { appearance: appearance, mode: mode, width: width, isDisabled: isDisabled, isCompact: isCompact, isMonospaced: isMonospaced, isFocused: isFocused, isHovered: isHovered, isInvalid: isInvalid }, tokens => (React.createElement(Input
            /* spreading before applying other props to prevent overwriting */
            , Object.assign({}, otherProps, { isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, theme: tokens, onBlur: this.handleOnBlur, onFocus: this.handleOnFocus, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onMouseDown: this.handleOnMouseDown, elemAfterInput: elemAfterInput, elemBeforeInput: elemBeforeInput, innerRef: this.setInputRef, testId: testId }))))))));
    }
}
Textfield.defaultProps = {
    appearance: 'standard',
    isCompact: false,
    isMonospaced: false,
    isInvalid: false,
    isRequired: false,
    isReadOnly: false,
    isDisabled: false,
};
const ForwardRefTextfield = React.forwardRef((props, ref) => React.createElement(Textfield, Object.assign({}, props, { forwardedRef: ref })));
export { ForwardRefTextfield as TextFieldWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'textField',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    onBlur: createAndFireEventOnAtlaskit({
        action: 'blurred',
        actionSubject: 'textField',
        attributes: {
            componentName: 'textField',
            packageName,
            packageVersion,
        },
    }),
    onFocus: createAndFireEventOnAtlaskit({
        action: 'focused',
        actionSubject: 'textField',
        attributes: {
            componentName: 'textField',
            packageName,
            packageVersion,
        },
    }),
})(ForwardRefTextfield));
//# sourceMappingURL=Textfield.js.map