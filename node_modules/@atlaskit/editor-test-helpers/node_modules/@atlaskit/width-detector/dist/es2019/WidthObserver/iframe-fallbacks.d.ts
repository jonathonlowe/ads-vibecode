import React from 'react';
import { WidthObserverProps } from './types';
declare type Unsubscribe = () => void;
declare type SubscriptionCallback = (callback: Function) => Unsubscribe;
declare type IframeContext = {
    subscribe: SubscriptionCallback | null;
};
declare type SubscribeProps = {
    subscribe: SubscriptionCallback;
} & WidthObserverProps;
declare type IframeWidthObserverProps = {
    useIntersectionObserver: boolean;
} & WidthObserverProps;
declare const IframeWrapperConsumer: React.ExoticComponent<React.ConsumerProps<IframeContext>>, IframeWrapperProvider: React.ProviderExoticComponent<React.ProviderProps<IframeContext>>;
declare const SubscribeIframeResize: React.MemoExoticComponent<({ subscribe, setWidth }: SubscribeProps) => JSX.Element>;
declare const SubscribeIframeResizeWhenVisible: React.MemoExoticComponent<({ subscribe, setWidth }: SubscribeProps) => JSX.Element>;
/**
 * This component is responsible for creating an iframe using HTMLObjectElement.
 * It will provide a context object with a `subscribe` function as a callback,
 * so other components can subscribe to know when the iframe was resized.
 */
declare const IframeWidthObserverFallback: React.MemoExoticComponent<(props: {
    children?: React.ReactNode;
}) => JSX.Element>;
export { IframeWrapperConsumer, IframeWrapperProvider, IframeWidthObserverFallback, SubscribeIframeResizeWhenVisible, SubscribeIframeResize, };
export declare const IframeWidthObserver: React.MemoExoticComponent<({ setWidth, useIntersectionObserver }: IframeWidthObserverProps) => JSX.Element>;
export declare const IframeWidthObserverFallbackWrapper: React.MemoExoticComponent<(props: {
    children?: React.ReactNode;
}) => JSX.Element>;
