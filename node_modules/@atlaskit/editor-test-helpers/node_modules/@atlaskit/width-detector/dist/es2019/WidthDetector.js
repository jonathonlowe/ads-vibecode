import React from 'react';
import rafSchedule from 'raf-schd';
const containerDivStyle = {
    width: '100%',
    position: 'relative',
};
// Not using styled-components here for performance
// and framework-agnostic reasons.
const sizerStyle = {
    display: 'block',
    position: 'absolute',
    top: 0,
    left: 0,
    height: 0,
    width: '100%',
    opacity: 0,
    overflow: 'hidden',
    pointerEvents: 'none',
    zIndex: -1,
};
/**
 * @deprecated use WidthOvserver instead
 *
 * This component uses iframes for rendering and is currently
 * not performant. It will be DEPRECATED in the future.
 * It is recommended that you instead use WidthObserver from @atlaskit/width-detector
 */
export default class WidthDetector extends React.Component {
    constructor(props) {
        super(props);
        this.state = {};
        this.handleResize = rafSchedule(() => {
            const { container } = this;
            if (!container) {
                return;
            }
            const width = container.offsetWidth;
            this.setState({
                width,
            });
            if (this.props.onResize) {
                this.props.onResize(width);
            }
        });
        this.handleContainerRef = (ref) => {
            if (!ref) {
                return;
            }
            this.container = ref;
        };
        this.handleObjectRef = (ref) => {
            if (!ref) {
                return;
            }
            this.resizeObject = ref;
        };
        this.handleObjectLoad = () => {
            if (!this.resizeObject) {
                return;
            }
            this.resizeObjectDocument = this.resizeObject.contentDocument
                .defaultView;
            this.resizeObjectDocument.addEventListener('resize', this.handleResize);
            this.handleResize();
        };
        // eslint-disable-next-line no-console
        console.warn('WidthDetector will be deprecated, please use WidthObserver from @atlaskit/width-detector instead.');
    }
    componentDidMount() {
        if (this.resizeObject) {
            this.resizeObject.data = 'about:blank';
        }
        // Calculate width first time, after object has loaded.
        // Prevents it from getting in a weird state where width is always 0.
        this.handleResize();
    }
    componentWillUnmount() {
        this.handleResize.cancel();
        if (this.resizeObjectDocument) {
            this.resizeObjectDocument.removeEventListener('resize', this.handleResize);
        }
    }
    render() {
        // @TODO: Add alternative method using IntersectionObserver or ResizeObserver
        const sizerEl = (React.createElement("object", { type: "text/html", style: sizerStyle, ref: this.handleObjectRef, onLoad: this.handleObjectLoad, "aria-hidden": true, tabIndex: -1 }));
        // pluck non-DOM props off the props so we can safely spread remaining items
        const { containerStyle, onResize, children, ...props } = this.props;
        return (React.createElement("div", Object.assign({}, props, { style: { ...containerDivStyle, ...containerStyle }, ref: this.handleContainerRef }),
            children(this.state.width),
            sizerEl));
    }
}
WidthDetector.defaultProps = {
    containerStyle: {},
};
//# sourceMappingURL=WidthDetector.js.map