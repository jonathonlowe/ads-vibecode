"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _adfSchema = require("@atlaskit/adf-schema");
var _analytics = require("@atlaskit/editor-common/analytics");
var _messages = require("@atlaskit/editor-common/messages");
var _quickInsert = require("@atlaskit/editor-common/quick-insert");
var _utils = require("@atlaskit/editor-common/utils");
var _colors = require("@atlaskit/theme/colors");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _actions = require("./editor-actions/actions");
var _keymaps = _interopRequireDefault(require("./pm-plugins/keymaps"));
var _main = require("./pm-plugins/main");
var _toolbar = require("./ui/toolbar");
var panelPlugin = function panelPlugin(_ref) {
  var _ref$config = _ref.config,
    options = _ref$config === void 0 ? {} : _ref$config,
    api = _ref.api;
  return {
    name: 'panel',
    nodes: function nodes() {
      var panelNode = (0, _adfSchema.extendedPanel)(!!options.allowCustomPanel);
      return [{
        name: 'panel',
        node: panelNode
      }];
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'panel',
        plugin: function plugin(_ref2) {
          var providerFactory = _ref2.providerFactory,
            dispatch = _ref2.dispatch,
            nodeViewPortalProviderAPI = _ref2.nodeViewPortalProviderAPI;
          return (0, _main.createPlugin)(dispatch, providerFactory, options, api, nodeViewPortalProviderAPI);
        }
      }, {
        name: 'panelKeyMap',
        plugin: function plugin() {
          return (0, _keymaps.default)();
        }
      }];
    },
    actions: {
      insertPanel: function insertPanel(inputMethod) {
        var _api$analytics;
        return (0, _actions.insertPanelWithAnalytics)(inputMethod, api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions);
      }
    },
    pluginsOptions: {
      quickInsert: function quickInsert(_ref3) {
        var formatMessage = _ref3.formatMessage;
        if ((0, _experiments.editorExperiment)('platform_editor_insertion', 'variant1')) {
          return [{
            id: 'infopanel',
            title: formatMessage(_messages.blockTypeMessages.infoPanel),
            keywords: ['panel'],
            description: formatMessage(_messages.blockTypeMessages.infoPanelDescription),
            priority: 800,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanel, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.INFO
                },
                api: api,
                insert: insert
              });
            }
          }];
        } else {
          var quickInsertOptions = [{
            id: 'infopanel',
            title: formatMessage(_messages.blockTypeMessages.infoPanel),
            keywords: ['panel'],
            description: formatMessage(_messages.blockTypeMessages.infoPanelDescription),
            priority: 800,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanel, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.INFO
                },
                api: api,
                insert: insert
              });
            }
          }, {
            id: 'notepanel',
            title: formatMessage(_messages.blockTypeMessages.notePanel),
            description: formatMessage(_messages.blockTypeMessages.notePanelDescription),
            priority: 1000,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanelNote, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.NOTE
                },
                api: api,
                insert: insert
              });
            }
          }, {
            id: 'successpanel',
            title: formatMessage(_messages.blockTypeMessages.successPanel),
            description: formatMessage(_messages.blockTypeMessages.successPanelDescription),
            keywords: ['tip'],
            priority: 1000,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanelSuccess, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.SUCCESS
                },
                api: api,
                insert: insert
              });
            }
          }, {
            id: 'warningpanel',
            title: formatMessage(_messages.blockTypeMessages.warningPanel),
            description: formatMessage(_messages.blockTypeMessages.warningPanelDescription),
            priority: 1000,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanelWarning, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.WARNING
                },
                api: api,
                insert: insert
              });
            }
          }, {
            id: 'errorpanel',
            title: formatMessage(_messages.blockTypeMessages.errorPanel),
            description: formatMessage(_messages.blockTypeMessages.errorPanelDescription),
            priority: 1000,
            icon: function icon() {
              return /*#__PURE__*/_react.default.createElement(_quickInsert.IconPanelError, null);
            },
            action: function action(insert, state) {
              return createPanelAction({
                state: state,
                attributes: {
                  panelType: _adfSchema.PanelType.ERROR
                },
                api: api,
                insert: insert
              });
            }
          }];
          if (options.allowCustomPanel && options.allowCustomPanelEdit) {
            quickInsertOptions.push({
              id: 'custompanel',
              title: formatMessage(_messages.blockTypeMessages.customPanel),
              description: formatMessage(_messages.blockTypeMessages.customPanelDescription),
              priority: 1000,
              icon: function icon() {
                return /*#__PURE__*/_react.default.createElement(_quickInsert.IconCustomPanel, null);
              },
              action: function action(insert, state) {
                return createPanelAction({
                  state: state,
                  attributes: {
                    panelType: _adfSchema.PanelType.CUSTOM,
                    panelIcon: ':rainbow:',
                    panelIconId: '1f308',
                    panelIconText: 'ðŸŒˆ',
                    // Ignored via go/ees007
                    // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
                    // TODO: https://product-fabric.atlassian.net/browse/DSP-7268
                    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
                    panelColor: _colors.T50
                  },
                  api: api,
                  insert: insert
                });
              }
            });
          }
          return quickInsertOptions;
        }
      },
      floatingToolbar: function floatingToolbar(state, intl, providerFactory) {
        return (0, _toolbar.getToolbarConfig)(state, intl, options, providerFactory, api);
      }
    }
  };
};

/**
 * Creates panel action and wrap selection transaction with analytics for the panel insertion.
 *
 * @example
 * const tr = createPanelAction({
 *   state: editorState,
 *   attributes: { panelType: 'info' },
 * });
 * if (tr) {
 *   applyTransaction(tr);
 * }
 */
function createPanelAction(_ref4) {
  var state = _ref4.state,
    attributes = _ref4.attributes,
    api = _ref4.api,
    insert = _ref4.insert;
  var panel = state.schema.nodes.panel;
  var tr;

  // Panels should wrap content by default when inserted, the quickInsert `insert` method
  // will insert the node on a newline
  if ((0, _experiments.editorExperiment)('platform_editor_controls', 'variant1')) {
    tr = state.selection.empty && (0, _utils.createWrapSelectionTransaction)({
      state: state,
      type: panel,
      nodeAttributes: attributes
    });
  } else {
    var node = panel.createAndFill(attributes);
    if (!node) {
      return false;
    }
    tr = state.selection.empty && insert(node);
  }
  if (tr) {
    var _api$analytics2;
    api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 || _api$analytics2.actions.attachAnalyticsEvent({
      action: _analytics.ACTION.INSERTED,
      actionSubject: _analytics.ACTION_SUBJECT.DOCUMENT,
      actionSubjectId: _analytics.ACTION_SUBJECT_ID.PANEL,
      attributes: {
        inputMethod: _analytics.INPUT_METHOD.QUICK_INSERT,
        panelType: attributes.panelType
      },
      eventType: _analytics.EVENT_TYPE.TRACK
    })(tr);
  }
  return tr;
}
var _default = exports.default = panelPlugin;