"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.panelIcons = exports.getPanelNodeView = exports.PanelIcon = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _react = _interopRequireDefault(require("react"));
var _v = _interopRequireDefault(require("uuid/v4"));
var _adfSchema = require("@atlaskit/adf-schema");
var _emoji = require("@atlaskit/editor-common/emoji");
var _hooks = require("@atlaskit/editor-common/hooks");
var _icons = require("@atlaskit/editor-common/icons");
var _panel = require("@atlaskit/editor-common/panel");
var _model = require("@atlaskit/editor-prosemirror/model");
var _consts = require("@atlaskit/editor-shared-styles/consts");
var _lightbulbEditorHint = _interopRequireDefault(require("@atlaskit/icon/core/migration/lightbulb--editor-hint"));
var _utils = require("../pm-plugins/utils/utils");
/* eslint-disable @atlaskit/editor/no-re-export */
// Mapping export
var panelIcons = exports.panelIcons = {
  info: _icons.PanelInfoIcon,
  success: _icons.PanelSuccessIcon,
  note: _icons.PanelNoteIcon,
  tip: _lightbulbEditorHint.default,
  warning: _icons.PanelWarningIcon,
  error: _icons.PanelErrorIcon,
  custom: _icons.PanelInfoIcon
};
/* eslint-enable @atlaskit/editor/no-re-export */

var useEmojiProvider = function useEmojiProvider(pluginInjectionApi) {
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['emoji']),
    emojiState = _useSharedPluginState.emojiState;
  return emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider;
};
var PanelIcon = exports.PanelIcon = function PanelIcon(props) {
  var allowCustomPanel = props.allowCustomPanel,
    providerFactory = props.providerFactory,
    pluginInjectionApi = props.pluginInjectionApi,
    _props$panelAttribute = props.panelAttributes,
    panelType = _props$panelAttribute.panelType,
    panelIcon = _props$panelAttribute.panelIcon,
    panelIconId = _props$panelAttribute.panelIconId,
    panelIconText = _props$panelAttribute.panelIconText;
  var emojiProvider = useEmojiProvider(pluginInjectionApi);
  if (allowCustomPanel && panelIcon && panelType === _adfSchema.PanelType.CUSTOM) {
    return /*#__PURE__*/_react.default.createElement(_emoji.Emoji, {
      emojiProvider: emojiProvider,
      providers: providerFactory,
      shortName: panelIcon,
      id: panelIconId,
      fallback: panelIconText,
      showTooltip: false,
      allowTextFallback: false,
      fitToHeight: _consts.akEditorCustomIconSize
    });
  }
  var Icon = panelIcons[panelType];
  return /*#__PURE__*/_react.default.createElement(Icon, {
    label: "".concat(panelType, " panel")
  });
};
var PanelNodeView = /*#__PURE__*/function () {
  function PanelNodeView(node, view, getPos, pluginOptions, api, nodeViewPortalProviderAPI, providerFactory) {
    var _this = this;
    (0, _classCallCheck2.default)(this, PanelNodeView);
    this.nodeViewPortalProviderAPI = nodeViewPortalProviderAPI;
    this.providerFactory = providerFactory;
    this.pluginOptions = pluginOptions;
    this.view = view;
    this.node = node;
    this.key = (0, _v.default)();
    var _DOMSerializer$render = _model.DOMSerializer.renderSpec(document, (0, _utils.panelAttrsToDom)(node.attrs, pluginOptions.allowCustomPanel || false)),
      dom = _DOMSerializer$render.dom,
      contentDOM = _DOMSerializer$render.contentDOM;
    this.getPos = getPos;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.dom = dom;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.contentDOM = contentDOM;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.icon = this.dom.querySelector(".".concat(_panel.PanelSharedCssClassName.icon));
    if (!this.icon) {
      return;
    }
    // set contentEditable as false to be able to select the custom panels with keyboard
    this.icon.contentEditable = 'false';
    this.nodeViewPortalProviderAPI.render(function () {
      return /*#__PURE__*/_react.default.createElement(PanelIcon, {
        pluginInjectionApi: api,
        allowCustomPanel: pluginOptions.allowCustomPanel,
        panelAttributes: node.attrs,
        providerFactory: _this.providerFactory
      });
    }, this.icon, this.key);
  }
  return (0, _createClass2.default)(PanelNodeView, [{
    key: "ignoreMutation",
    value: function ignoreMutation(mutation) {
      // ignore mutation if it caused by the icon.
      if (!this.icon) {
        return false;
      }
      var isIcon = mutation.target === this.icon || mutation.target.parentNode === this.icon;
      // ignore mutation if it caused by the lazy load emoji inside icon.
      var isInsideIcon = this.icon.contains(mutation.target);
      return isIcon || isInsideIcon;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.nodeViewPortalProviderAPI.remove(this.key);
    }
  }]);
}();
var getPanelNodeView = exports.getPanelNodeView = function getPanelNodeView(pluginOptions, api, nodeViewPortalProviderAPI, providerFactory) {
  return function (node, view, getPos) {
    return new PanelNodeView(node, view, getPos, pluginOptions, api, nodeViewPortalProviderAPI, providerFactory);
  };
};