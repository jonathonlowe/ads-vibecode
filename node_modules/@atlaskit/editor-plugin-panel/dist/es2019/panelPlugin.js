import React from 'react';
import { extendedPanel, PanelType } from '@atlaskit/adf-schema';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { blockTypeMessages } from '@atlaskit/editor-common/messages';
import { IconCustomPanel, IconPanel, IconPanelError, IconPanelNote, IconPanelSuccess, IconPanelWarning } from '@atlaskit/editor-common/quick-insert';
import { createWrapSelectionTransaction } from '@atlaskit/editor-common/utils';
import { T50 } from '@atlaskit/theme/colors';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { insertPanelWithAnalytics } from './editor-actions/actions';
import keymap from './pm-plugins/keymaps';
import { createPlugin } from './pm-plugins/main';
import { getToolbarConfig } from './ui/toolbar';
const panelPlugin = ({
  config: options = {},
  api
}) => ({
  name: 'panel',
  nodes() {
    const panelNode = extendedPanel(!!options.allowCustomPanel);
    return [{
      name: 'panel',
      node: panelNode
    }];
  },
  pmPlugins() {
    return [{
      name: 'panel',
      plugin: ({
        providerFactory,
        dispatch,
        nodeViewPortalProviderAPI
      }) => createPlugin(dispatch, providerFactory, options, api, nodeViewPortalProviderAPI)
    }, {
      name: 'panelKeyMap',
      plugin: () => keymap()
    }];
  },
  actions: {
    insertPanel(inputMethod) {
      var _api$analytics;
      return insertPanelWithAnalytics(inputMethod, api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions);
    }
  },
  pluginsOptions: {
    quickInsert: ({
      formatMessage
    }) => {
      if (editorExperiment('platform_editor_insertion', 'variant1')) {
        return [{
          id: 'infopanel',
          title: formatMessage(blockTypeMessages.infoPanel),
          keywords: ['panel'],
          description: formatMessage(blockTypeMessages.infoPanelDescription),
          priority: 800,
          icon: () => /*#__PURE__*/React.createElement(IconPanel, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.INFO
              },
              api,
              insert
            });
          }
        }];
      } else {
        const quickInsertOptions = [{
          id: 'infopanel',
          title: formatMessage(blockTypeMessages.infoPanel),
          keywords: ['panel'],
          description: formatMessage(blockTypeMessages.infoPanelDescription),
          priority: 800,
          icon: () => /*#__PURE__*/React.createElement(IconPanel, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.INFO
              },
              api,
              insert
            });
          }
        }, {
          id: 'notepanel',
          title: formatMessage(blockTypeMessages.notePanel),
          description: formatMessage(blockTypeMessages.notePanelDescription),
          priority: 1000,
          icon: () => /*#__PURE__*/React.createElement(IconPanelNote, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.NOTE
              },
              api,
              insert
            });
          }
        }, {
          id: 'successpanel',
          title: formatMessage(blockTypeMessages.successPanel),
          description: formatMessage(blockTypeMessages.successPanelDescription),
          keywords: ['tip'],
          priority: 1000,
          icon: () => /*#__PURE__*/React.createElement(IconPanelSuccess, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.SUCCESS
              },
              api,
              insert
            });
          }
        }, {
          id: 'warningpanel',
          title: formatMessage(blockTypeMessages.warningPanel),
          description: formatMessage(blockTypeMessages.warningPanelDescription),
          priority: 1000,
          icon: () => /*#__PURE__*/React.createElement(IconPanelWarning, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.WARNING
              },
              api,
              insert
            });
          }
        }, {
          id: 'errorpanel',
          title: formatMessage(blockTypeMessages.errorPanel),
          description: formatMessage(blockTypeMessages.errorPanelDescription),
          priority: 1000,
          icon: () => /*#__PURE__*/React.createElement(IconPanelError, null),
          action(insert, state) {
            return createPanelAction({
              state,
              attributes: {
                panelType: PanelType.ERROR
              },
              api,
              insert
            });
          }
        }];
        if (options.allowCustomPanel && options.allowCustomPanelEdit) {
          quickInsertOptions.push({
            id: 'custompanel',
            title: formatMessage(blockTypeMessages.customPanel),
            description: formatMessage(blockTypeMessages.customPanelDescription),
            priority: 1000,
            icon: () => /*#__PURE__*/React.createElement(IconCustomPanel, null),
            action(insert, state) {
              return createPanelAction({
                state,
                attributes: {
                  panelType: PanelType.CUSTOM,
                  panelIcon: ':rainbow:',
                  panelIconId: '1f308',
                  panelIconText: 'ðŸŒˆ',
                  // Ignored via go/ees007
                  // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
                  // TODO: https://product-fabric.atlassian.net/browse/DSP-7268
                  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
                  panelColor: T50
                },
                api,
                insert
              });
            }
          });
        }
        return quickInsertOptions;
      }
    },
    floatingToolbar: (state, intl, providerFactory) => getToolbarConfig(state, intl, options, providerFactory, api)
  }
});

/**
 * Creates panel action and wrap selection transaction with analytics for the panel insertion.
 *
 * @example
 * const tr = createPanelAction({
 *   state: editorState,
 *   attributes: { panelType: 'info' },
 * });
 * if (tr) {
 *   applyTransaction(tr);
 * }
 */
function createPanelAction({
  state,
  attributes,
  api,
  insert
}) {
  const {
    panel
  } = state.schema.nodes;
  let tr;

  // Panels should wrap content by default when inserted, the quickInsert `insert` method
  // will insert the node on a newline
  if (editorExperiment('platform_editor_controls', 'variant1')) {
    tr = state.selection.empty && createWrapSelectionTransaction({
      state,
      type: panel,
      nodeAttributes: attributes
    });
  } else {
    const node = panel.createAndFill(attributes);
    if (!node) {
      return false;
    }
    tr = state.selection.empty && insert(node);
  }
  if (tr) {
    var _api$analytics2;
    api === null || api === void 0 ? void 0 : (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions.attachAnalyticsEvent({
      action: ACTION.INSERTED,
      actionSubject: ACTION_SUBJECT.DOCUMENT,
      actionSubjectId: ACTION_SUBJECT_ID.PANEL,
      attributes: {
        inputMethod: INPUT_METHOD.QUICK_INSERT,
        panelType: attributes.panelType
      },
      eventType: EVENT_TYPE.TRACK
    })(tr);
  }
  return tr;
}
export default panelPlugin;