import React from 'react';
import uuid from 'uuid/v4';
import { PanelType } from '@atlaskit/adf-schema';
import { Emoji } from '@atlaskit/editor-common/emoji';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { PanelErrorIcon, PanelInfoIcon, PanelNoteIcon, PanelSuccessIcon, PanelWarningIcon } from '@atlaskit/editor-common/icons';
import { PanelSharedCssClassName } from '@atlaskit/editor-common/panel';
import { DOMSerializer } from '@atlaskit/editor-prosemirror/model';
import { akEditorCustomIconSize } from '@atlaskit/editor-shared-styles/consts';
import LightbulbIcon from '@atlaskit/icon/core/migration/lightbulb--editor-hint';
import { panelAttrsToDom } from '../pm-plugins/utils/utils';

/* eslint-disable @atlaskit/editor/no-re-export */
// Mapping export
export const panelIcons = {
  info: PanelInfoIcon,
  success: PanelSuccessIcon,
  note: PanelNoteIcon,
  tip: LightbulbIcon,
  warning: PanelWarningIcon,
  error: PanelErrorIcon,
  custom: PanelInfoIcon
};
/* eslint-enable @atlaskit/editor/no-re-export */

const useEmojiProvider = pluginInjectionApi => {
  const {
    emojiState
  } = useSharedPluginState(pluginInjectionApi, ['emoji']);
  return emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider;
};
export const PanelIcon = props => {
  const {
    allowCustomPanel,
    providerFactory,
    pluginInjectionApi,
    panelAttributes: {
      panelType,
      panelIcon,
      panelIconId,
      panelIconText
    }
  } = props;
  const emojiProvider = useEmojiProvider(pluginInjectionApi);
  if (allowCustomPanel && panelIcon && panelType === PanelType.CUSTOM) {
    return /*#__PURE__*/React.createElement(Emoji, {
      emojiProvider: emojiProvider,
      providers: providerFactory,
      shortName: panelIcon,
      id: panelIconId,
      fallback: panelIconText,
      showTooltip: false,
      allowTextFallback: false,
      fitToHeight: akEditorCustomIconSize
    });
  }
  const Icon = panelIcons[panelType];
  return /*#__PURE__*/React.createElement(Icon, {
    label: `${panelType} panel`
  });
};
class PanelNodeView {
  constructor(node, view, getPos, pluginOptions, api, nodeViewPortalProviderAPI, providerFactory) {
    this.nodeViewPortalProviderAPI = nodeViewPortalProviderAPI;
    this.providerFactory = providerFactory;
    this.pluginOptions = pluginOptions;
    this.view = view;
    this.node = node;
    this.key = uuid();
    const {
      dom,
      contentDOM
    } = DOMSerializer.renderSpec(document, panelAttrsToDom(node.attrs, pluginOptions.allowCustomPanel || false));
    this.getPos = getPos;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.dom = dom;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.contentDOM = contentDOM;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.icon = this.dom.querySelector(`.${PanelSharedCssClassName.icon}`);
    if (!this.icon) {
      return;
    }
    // set contentEditable as false to be able to select the custom panels with keyboard
    this.icon.contentEditable = 'false';
    this.nodeViewPortalProviderAPI.render(() => /*#__PURE__*/React.createElement(PanelIcon, {
      pluginInjectionApi: api,
      allowCustomPanel: pluginOptions.allowCustomPanel,
      panelAttributes: node.attrs,
      providerFactory: this.providerFactory
    }), this.icon, this.key);
  }
  ignoreMutation(mutation) {
    // ignore mutation if it caused by the icon.
    if (!this.icon) {
      return false;
    }
    const isIcon = mutation.target === this.icon || mutation.target.parentNode === this.icon;
    // ignore mutation if it caused by the lazy load emoji inside icon.
    const isInsideIcon = this.icon.contains(mutation.target);
    return isIcon || isInsideIcon;
  }
  destroy() {
    this.nodeViewPortalProviderAPI.remove(this.key);
  }
}
export const getPanelNodeView = (pluginOptions, api, nodeViewPortalProviderAPI, providerFactory) => (node, view, getPos) => {
  return new PanelNodeView(node, view, getPos, pluginOptions, api, nodeViewPortalProviderAPI, providerFactory);
};