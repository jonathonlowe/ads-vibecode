const ALLOWED_RESPONSE_STATUS_CODES = [200, 401, 404];
export class NetworkError extends Error {
  constructor(error) {
    super(error);
  }
}
export async function request(method, url, data, headers, statuses = ALLOWED_RESPONSE_STATUS_CODES) {
  const requestConfig = {
    method,
    credentials: 'include',
    headers: {
      Accept: 'application/json',
      'Cache-Control': 'no-cache',
      'Content-Type': 'application/json',
      ...headers
    },
    ...(data ? {
      body: JSON.stringify(data)
    } : {})
  };
  try {
    const response = await fetch(url, requestConfig);
    if (response.ok || statuses !== null && statuses !== void 0 && statuses.includes(response.status)) {
      if (statuses.includes(204)) {
        const text = await response.text();
        return text ? JSON.parse(text) : undefined;
      } else {
        return await response.json();
      }
    }
    throw response;
  } catch (error) {
    if (typeof error === 'string' || error instanceof TypeError) {
      throw new NetworkError(error);
    }
    throw error;
  }
}