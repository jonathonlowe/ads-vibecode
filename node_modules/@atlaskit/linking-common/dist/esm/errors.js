import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
//500

// Used to catch any other errors - not server-side.

export var APIError = /*#__PURE__*/function (_Error) {
  function APIError(kind, hostname, message, type, extensionKey) {
    var _this;
    _classCallCheck(this, APIError);
    _this = _callSuper(this, APIError, ["".concat(kind, ": ").concat(message)]);
    _this.kind = kind;
    _this.hostname = hostname;
    _this.message = message;
    _this.type = type;
    _this.extensionKey = extensionKey;
    _this.name = 'APIError';
    // The error type received from the server.
    _this.type = type;
    // The kind mapped to on the client.
    _this.kind = kind;
    // The message received from the server.
    _this.message = message;
    // The hostname of the URL which failed - do NOT log this (contains PII/UGC).
    _this.hostname = hostname;
    // The extensionKey passed from the error response from ORS
    _this.extensionKey = extensionKey;
    return _this;
  }
  _inherits(APIError, _Error);
  return _createClass(APIError);
}( /*#__PURE__*/_wrapNativeSuper(Error));