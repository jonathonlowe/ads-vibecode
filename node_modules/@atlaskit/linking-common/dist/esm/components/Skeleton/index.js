/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { B50, N30, N40, N50, N60 } from '@atlaskit/theme/colors';
var placeholderShimmer = null;
var appearanceValues = {
  darkGray: {
    animation: "var(--ds-background-accent-gray-subtle, ".concat(N60, ")")
  },
  gray: {
    animation: "var(--ds-skeleton, ".concat(N40, ")")
  },
  blue: {
    animation: "var(--ds-background-information-hovered, #cce0ff)"
  }
};
var spanSkeletonStyles = null;
var spanSkeletonBackgroundStyleMap = {
  gray: "_bfhk1cs6",
  blue: "_bfhk1hdx",
  darkGray: "_bfhk1gk7"
};
export var SpanSkeleton = function SpanSkeleton(_ref) {
  var width = _ref.width,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'gray' : _ref$appearance,
    _ref$height = _ref.height,
    height = _ref$height === void 0 ? 14 : _ref$height,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 0 : _ref$borderRadius,
    _ref$isShimmering = _ref.isShimmering,
    isShimmering = _ref$isShimmering === void 0 ? true : _ref$isShimmering,
    testId = _ref.testId,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {} : _ref$style;
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId,
    className: ax(["_y44v1exl _uiztglyw _12vemgnk", spanSkeletonBackgroundStyleMap[appearance]]),
    style: _objectSpread(_objectSpread({}, style), {}, {
      height: (typeof height === 'number' ? "".concat(height, "px") : height) || 'auto',
      width: (typeof width === 'number' ? "".concat(width, "px") : width) || 'auto',
      borderRadius: (typeof borderRadius === 'number' ? "".concat(borderRadius, "px") : borderRadius) || 0,
      backgroundImage: "linear-gradient(\n    to right,\n    transparent 0%,\n    ".concat(appearanceValues[appearance].animation, " 20%,\n    transparent 40%,\n    transparent 100%\n  )"),
      backgroundSize: isShimmering ? "40px ".concat(height) : '0px',
      "--_vn3mby": ix("".concat(placeholderShimmer, " 1s linear infinite forwards"))
    })
  });
};
export var Skeleton = function Skeleton(_ref2) {
  var width = _ref2.width,
    _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'gray' : _ref2$appearance,
    _ref2$height = _ref2.height,
    height = _ref2$height === void 0 ? 14 : _ref2$height,
    _ref2$borderRadius = _ref2.borderRadius,
    borderRadius = _ref2$borderRadius === void 0 ? 0 : _ref2$borderRadius,
    _ref2$isShimmering = _ref2.isShimmering,
    isShimmering = _ref2$isShimmering === void 0 ? true : _ref2$isShimmering,
    testId = _ref2.testId,
    _ref2$style = _ref2.style,
    style = _ref2$style === void 0 ? {} : _ref2$style;
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": testId,
    className: ax(["_y44v1exl _uiztglyw _12vemgnk", spanSkeletonBackgroundStyleMap[appearance]]),
    style: _objectSpread(_objectSpread({}, style), {}, {
      height: (typeof height === 'number' ? "".concat(height, "px") : height) || 'auto',
      width: (typeof width === 'number' ? "".concat(width, "px") : width) || 'auto',
      borderRadius: (typeof borderRadius === 'number' ? "".concat(borderRadius, "px") : borderRadius) || 0,
      backgroundImage: "linear-gradient(\n    to right,\n    transparent 0%,\n    ".concat(appearanceValues[appearance].animation, " 20%,\n    transparent 40%,\n    transparent 100%\n  )"),
      backgroundSize: isShimmering ? "40px ".concat(height) : '0px',
      "--_vn3mby": ix("".concat(placeholderShimmer, " 1s linear infinite forwards"))
    })
  });
};
export default Skeleton;