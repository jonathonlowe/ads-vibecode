export type ServerErrorType = 'ResolveBadRequestError' | 'ResolveAuthError' | 'ResolveUnsupportedError' | 'ResolveFailedError' | 'ResolveRateLimitError' | 'ResolveTimeoutError' | 'SearchBadRequestError' | 'SearchAuthError' | 'SearchUnsupportedError' | 'SearchFailedError' | 'SearchTimeoutError' | 'SearchRateLimitError' | 'InternalServerError' | 'UnsupportedError' | 'AuthError' | 'TimeoutError' | 'OperationFailedError' | 'BadRequestError' | 'RateLimitError' | 'UnexpectedError';
export type ErrorType = ServerErrorType | 'UnexpectedError';
export type APIErrorKind = 'fatal' | 'auth' | 'error' | 'fallback';
export declare class APIError extends Error {
    readonly kind: APIErrorKind;
    readonly hostname: string;
    readonly message: string;
    readonly type?: ErrorType | undefined;
    readonly extensionKey?: string | undefined;
    constructor(kind: APIErrorKind, hostname: string, message: string, type?: ErrorType | undefined, extensionKey?: string | undefined);
}
