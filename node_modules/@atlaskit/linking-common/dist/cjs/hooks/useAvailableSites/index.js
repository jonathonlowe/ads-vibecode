"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAvailableSitesV2 = exports.useAvailableSites = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _types = require("./types");
var _analytics = _interopRequireDefault(require("../../common/utils/analytics/analytics.codegen"));
var _constants = require("../../common/utils/constants");
var _analyticsNext = require("@atlaskit/analytics-next");
var _useIsMounted = require("../useIsMounted");
var _utils = require("./utils");
var defaultProducts = [_types.AvailableSitesProductType.WHITEBOARD, _types.AvailableSitesProductType.BEACON, _types.AvailableSitesProductType.COMPASS, _types.AvailableSitesProductType.CONFLUENCE, _types.AvailableSitesProductType.JIRA_BUSINESS, _types.AvailableSitesProductType.JIRA_INCIDENT_MANAGER, _types.AvailableSitesProductType.JIRA_PRODUCT_DISCOVERY, _types.AvailableSitesProductType.JIRA_SERVICE_DESK, _types.AvailableSitesProductType.JIRA_SOFTWARE, _types.AvailableSitesProductType.MERCURY, _types.AvailableSitesProductType.OPSGENIE, _types.AvailableSitesProductType.STATUS_PAGE, _types.AvailableSitesProductType.ATLAS, _types.AvailableSitesProductType.LOOM];
var useAvailableSites = exports.useAvailableSites = function useAvailableSites() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    gatewayBaseUrl = _ref.gatewayBaseUrl;
  var _useState = (0, _react.useState)({
      data: [],
      loading: true
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  (0, _react.useEffect)(function () {
    var fetchSites = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _yield$getAvailableSi, sites, error;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return getAvailableSites({
                products: defaultProducts,
                gatewayBaseUrl: gatewayBaseUrl
              });
            case 3:
              _yield$getAvailableSi = _context.sent;
              sites = _yield$getAvailableSi.sites;
              setState({
                data: sites,
                loading: false,
                error: undefined
              });
              _context.next = 13;
              break;
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              createAnalyticsEvent((0, _analytics.default)('operational.getAvailableSitesResolve.failed', (0, _utils.getOperationFailedAttributes)(_context.t0))).fire(_constants.ANALYTICS_CHANNEL);
              error = _context.t0 instanceof Error ? _context.t0 : new Error('unknown error');
              setState({
                data: [],
                loading: false,
                error: error
              });
            case 13:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 8]]);
      }));
      return function fetchSites() {
        return _ref2.apply(this, arguments);
      };
    }();
    fetchSites();
  }, [createAnalyticsEvent, gatewayBaseUrl]);
  return state;
};
var useAvailableSitesV2 = exports.useAvailableSitesV2 = function useAvailableSitesV2(_ref3) {
  var gatewayBaseUrl = _ref3.gatewayBaseUrl;
  var _useAnalyticsEvents2 = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var isMounted = (0, _useIsMounted.useIsMounted)();
  var _useState3 = (0, _react.useState)({
      data: [],
      loading: true
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    state = _useState4[0],
    setState = _useState4[1];
  (0, _react.useEffect)(function () {
    var fetchSites = /*#__PURE__*/function () {
      var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _yield$getAvailableSi2, sites;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return getAvailableSites({
                products: defaultProducts,
                gatewayBaseUrl: gatewayBaseUrl
              });
            case 3:
              _yield$getAvailableSi2 = _context2.sent;
              sites = _yield$getAvailableSi2.sites;
              if (isMounted()) {
                setState({
                  data: sites,
                  loading: false,
                  error: undefined
                });
              }
              _context2.next = 11;
              break;
            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              if (isMounted()) {
                setState({
                  data: [],
                  loading: false,
                  error: _context2.t0
                });
              }
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 8]]);
      }));
      return function fetchSites() {
        return _ref4.apply(this, arguments);
      };
    }();
    fetchSites();
  }, [createAnalyticsEvent, gatewayBaseUrl, isMounted]);
  return state;
};
function getAvailableSites(_x) {
  return _getAvailableSites.apply(this, arguments);
}
function _getAvailableSites() {
  _getAvailableSites = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref5) {
    var products, gatewayBaseUrl, requestConfig, response;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          products = _ref5.products, gatewayBaseUrl = _ref5.gatewayBaseUrl;
          requestConfig = {
            method: 'POST',
            credentials: 'include',
            headers: {
              Accept: 'application/json',
              'Cache-Control': 'no-cache',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              products: products
            })
          };
          _context3.next = 4;
          return window.fetch(gatewayBaseUrl ? "".concat(gatewayBaseUrl, "/gateway/api/available-sites") : '/gateway/api/available-sites', requestConfig);
        case 4:
          response = _context3.sent;
          if (!response.ok) {
            _context3.next = 7;
            break;
          }
          return _context3.abrupt("return", response.json());
        case 7:
          throw response;
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _getAvailableSites.apply(this, arguments);
}