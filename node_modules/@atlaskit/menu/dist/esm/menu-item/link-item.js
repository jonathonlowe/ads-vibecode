import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "href", "cssFn", "description", "iconAfter", "iconBefore", "isDisabled", "isSelected", "onClick", "testId", "overrides", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_shouldDisableRouterLink", "UNSAFE_isDraggable", "interactionName"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef, memo, useCallback, useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useRouterLink } from '@atlaskit/app-provider';
import { propDeprecationWarning } from '@atlaskit/ds-lib/deprecation-warning';
import noop from '@atlaskit/ds-lib/noop';
import InteractionContext from '@atlaskit/interaction-context';
import { fg } from '@atlaskit/platform-feature-flags';
import MenuItemPrimitive from '../internal/components/menu-item-primitive';
var IS_EXTERNAL_LINK_REGEX = /^(?:(http|https):\/\/)/;
var IS_NON_HTTP_BASED = /^(((mailto|tel|sms):)|(#))/;
var preventEvent = function preventEvent(e) {
  e.preventDefault();
};

/**
 * __Link item__
 *
 * A link item is used to populate a menu with items that are links.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/link-item)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)
 */
var LinkItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(
// Type needed on props to extract types with extract react types.
function (props, ref) {
  var children = props.children,
    href = props.href,
    _props$cssFn = props.cssFn,
    cssFn = _props$cssFn === void 0 ? noop : _props$cssFn,
    description = props.description,
    iconAfter = props.iconAfter,
    iconBefore = props.iconBefore,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isSelected = props.isSelected,
    isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
    onClick = props.onClick,
    testId = props.testId,
    overrides = props.overrides,
    onMouseDown = props.onMouseDown,
    shouldTitleWrap = props.shouldTitleWrap,
    shouldDescriptionWrap = props.shouldDescriptionWrap,
    UNSAFE_className = props.className,
    UNSAFE_shouldDisableRouterLink = props.UNSAFE_shouldDisableRouterLink,
    UNSAFE_isDraggable = props.UNSAFE_isDraggable,
    interactionName = props.interactionName,
    rest = _objectWithoutProperties(props, _excluded);
  var onMouseDownHandler = onMouseDown;
  var RouterLink = useRouterLink();
  var interactionContext = useContext(InteractionContext);
  var handleClick = useCallback(function (e) {
    interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 || onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!children) {
    return null;
  }
  var isExternal = typeof href === 'string' && IS_EXTERNAL_LINK_REGEX.test(href);
  var isNonHttpBased = typeof href === 'string' && IS_NON_HTTP_BASED.test(href);
  var isEmptyHref = href == null || href === '';

  /**
   * Renders a router link if:
   *
   * - a link component is set in the app provider
   * - it's not an external link (starting with `http://` or `https://`)
   * - it's not a non-HTTP-based link (e.g. emails, phone numbers, hash links etc.)
   * - it doesn't have an empty href (e.g. href="" or href={undefined})
   */
  var isRouterLink = !UNSAFE_shouldDisableRouterLink && RouterLink && !isExternal && !isNonHttpBased && !isEmptyHref;
  var Component = isRouterLink ? RouterLink : 'a';
  propDeprecationWarning("@atlaskit/menu" || '', 'cssFn', cssFn !== noop, '' // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  return jsx(MenuItemPrimitive, _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: UNSAFE_className
    // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
    ,
    overrides: overrides,
    iconBefore: iconBefore,
    iconAfter: iconAfter,
    isSelected: isSelected,
    isDisabled: isDisabled,
    description: description,
    shouldTitleWrap: shouldTitleWrap,
    shouldDescriptionWrap: shouldDescriptionWrap,
    css:
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    cssFn({
      isSelected: isSelected,
      isDisabled: isDisabled
    }),
    title: children,
    testId: testId && "".concat(testId, "--primitive")
  }), function (_ref) {
    var children = _ref.children,
      className = _ref.className;
    return jsx(Component, _extends({
      "data-testid": testId,
      "data-is-router-link": testId ? isRouterLink ? 'true' : 'false' : undefined,
      "data-vc": "link-item"
    }, rest, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: className
      // @ts-expect-error
      ,
      href: isDisabled ? undefined : href
    }, UNSAFE_isDraggable ? {} : {
      draggable: false,
      onDragStart: preventEvent
    }, {
      onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
      onClick: isDisabled ? preventEvent : fg('platform_button_item-add-ufo-metrics') ? handleClick : onClick,
      "aria-current": isSelected ? 'page' : undefined,
      "aria-disabled": isDisabled,
      ref: ref
    }), children);
  });
}));
export default LinkItem;