"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _deprecationWarning = require("@atlaskit/ds-lib/deprecation-warning");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _interactionContext = _interopRequireDefault(require("@atlaskit/interaction-context"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _menuItemPrimitive = _interopRequireDefault(require("../internal/components/menu-item-primitive"));
var _excluded = ["component", "cssFn", "isDisabled", "isSelected", "onClick", "testId", "children", "description", "iconAfter", "iconBefore", "overrides", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_isDraggable", "interactionName"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var preventEvent = function preventEvent(e) {
  e.preventDefault();
};

// Dirty hack to get generics working with forward ref [1/2]

/**
 * __Custom item__
 *
 * A custom item is used to populate a menu with items that can be any element.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/custom-item)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)
 */
var CustomItem = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var Component = _ref.component,
    _ref$cssFn = _ref.cssFn,
    cssFn = _ref$cssFn === void 0 ? _noop.default : _ref$cssFn,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isSelected = _ref.isSelected,
    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    onClick = _ref.onClick,
    testId = _ref.testId,
    children = _ref.children,
    description = _ref.description,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    overrides = _ref.overrides,
    onMouseDown = _ref.onMouseDown,
    shouldTitleWrap = _ref.shouldTitleWrap,
    shouldDescriptionWrap = _ref.shouldDescriptionWrap,
    UNSAFE_className = _ref.className,
    UNSAFE_isDraggable = _ref.UNSAFE_isDraggable,
    interactionName = _ref.interactionName,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var onMouseDownHandler = onMouseDown;
  var interactionContext = (0, _react.useContext)(_interactionContext.default);
  var handleClick = (0, _react.useCallback)(function (e) {
    interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 || onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!Component) {
    return null;
  }
  (0, _deprecationWarning.propDeprecationWarning)("@atlaskit/menu" || '', 'cssFn', cssFn !== _noop.default, '' // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  return (0, _react2.jsx)(_menuItemPrimitive.default
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , (0, _extends2.default)({
    className: UNSAFE_className
  }, rest, {
    // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
    overrides: overrides,
    description: description,
    iconAfter: iconAfter,
    title: children,
    iconBefore: iconBefore,
    isSelected: isSelected,
    isDisabled: isDisabled,
    shouldTitleWrap: shouldTitleWrap,
    shouldDescriptionWrap: shouldDescriptionWrap
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    css: (0, _react2.css)(
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    cssFn({
      isDisabled: isDisabled,
      isSelected: isSelected
    })),
    testId: testId && "".concat(testId, "--primitive")
  }), function (_ref2) {
    var children = _ref2.children,
      className = _ref2.className;
    return (0, _react2.jsx)(Component, (0, _extends2.default)({
      "data-testid": testId
    }, rest, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: className,
      ref: ref
    }, UNSAFE_isDraggable ? {} : {
      draggable: false,
      onDragStart: preventEvent
    }, {
      onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
      onClick: isDisabled ? preventEvent : (0, _platformFeatureFlags.fg)('platform_button_item-add-ufo-metrics') ? handleClick : onClick,
      tabIndex: isDisabled ? -1 : undefined,
      "aria-disabled": isDisabled
    }), children);
  });
})
// Dirty hack to get generics working with forward ref [2/2]
);
var _default = exports.default = CustomItem;