import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef, memo, useCallback, useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useRouterLink } from '@atlaskit/app-provider';
import { propDeprecationWarning } from '@atlaskit/ds-lib/deprecation-warning';
import noop from '@atlaskit/ds-lib/noop';
import InteractionContext from '@atlaskit/interaction-context';
import { fg } from '@atlaskit/platform-feature-flags';
import MenuItemPrimitive from '../internal/components/menu-item-primitive';
const IS_EXTERNAL_LINK_REGEX = /^(?:(http|https):\/\/)/;
const IS_NON_HTTP_BASED = /^(((mailto|tel|sms):)|(#))/;
const preventEvent = e => {
  e.preventDefault();
};

/**
 * __Link item__
 *
 * A link item is used to populate a menu with items that are links.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/link-item)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)
 */
const LinkItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(
// Type needed on props to extract types with extract react types.
(props, ref) => {
  const {
    children,
    href,
    cssFn = noop,
    description,
    iconAfter,
    iconBefore,
    isDisabled = false,
    isSelected = false,
    onClick,
    testId,
    overrides,
    onMouseDown,
    shouldTitleWrap,
    shouldDescriptionWrap,
    className: UNSAFE_className,
    UNSAFE_shouldDisableRouterLink,
    UNSAFE_isDraggable,
    interactionName,
    ...rest
  } = props;
  const onMouseDownHandler = onMouseDown;
  const RouterLink = useRouterLink();
  const interactionContext = useContext(InteractionContext);
  const handleClick = useCallback(e => {
    interactionContext === null || interactionContext === void 0 ? void 0 : interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!children) {
    return null;
  }
  const isExternal = typeof href === 'string' && IS_EXTERNAL_LINK_REGEX.test(href);
  const isNonHttpBased = typeof href === 'string' && IS_NON_HTTP_BASED.test(href);
  const isEmptyHref = href == null || href === '';

  /**
   * Renders a router link if:
   *
   * - a link component is set in the app provider
   * - it's not an external link (starting with `http://` or `https://`)
   * - it's not a non-HTTP-based link (e.g. emails, phone numbers, hash links etc.)
   * - it doesn't have an empty href (e.g. href="" or href={undefined})
   */
  const isRouterLink = !UNSAFE_shouldDisableRouterLink && RouterLink && !isExternal && !isNonHttpBased && !isEmptyHref;
  const Component = isRouterLink ? RouterLink : 'a';
  propDeprecationWarning("@atlaskit/menu" || '', 'cssFn', cssFn !== noop, '' // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  return jsx(MenuItemPrimitive, _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: UNSAFE_className
    // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
    ,
    overrides: overrides,
    iconBefore: iconBefore,
    iconAfter: iconAfter,
    isSelected: isSelected,
    isDisabled: isDisabled,
    description: description,
    shouldTitleWrap: shouldTitleWrap,
    shouldDescriptionWrap: shouldDescriptionWrap,
    css:
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    cssFn({
      isSelected,
      isDisabled
    }),
    title: children,
    testId: testId && `${testId}--primitive`
  }), ({
    children,
    className
  }) => jsx(Component, _extends({
    "data-testid": testId,
    "data-is-router-link": testId ? isRouterLink ? 'true' : 'false' : undefined,
    "data-vc": "link-item"
  }, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: className
    // @ts-expect-error
    ,
    href: isDisabled ? undefined : href
  }, UNSAFE_isDraggable ? {} : {
    draggable: false,
    onDragStart: preventEvent
  }, {
    onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
    onClick: isDisabled ? preventEvent : fg('platform_button_item-add-ufo-metrics') ? handleClick : onClick,
    "aria-current": isSelected ? 'page' : undefined,
    "aria-disabled": isDisabled,
    ref: ref
  }), children));
}));
export default LinkItem;