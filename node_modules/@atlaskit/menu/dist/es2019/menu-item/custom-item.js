import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { forwardRef, memo, useCallback, useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { propDeprecationWarning } from '@atlaskit/ds-lib/deprecation-warning';
import noop from '@atlaskit/ds-lib/noop';
import InteractionContext from '@atlaskit/interaction-context';
import { fg } from '@atlaskit/platform-feature-flags';
import MenuItemPrimitive from '../internal/components/menu-item-primitive';
const preventEvent = e => {
  e.preventDefault();
};

// Dirty hack to get generics working with forward ref [1/2]

/**
 * __Custom item__
 *
 * A custom item is used to populate a menu with items that can be any element.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/custom-item)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)
 */
const CustomItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(({
  component: Component,
  cssFn = noop,
  isDisabled = false,
  isSelected = false,
  onClick,
  testId,
  children,
  description,
  iconAfter,
  iconBefore,
  overrides,
  onMouseDown,
  shouldTitleWrap,
  shouldDescriptionWrap,
  className: UNSAFE_className,
  UNSAFE_isDraggable,
  interactionName,
  ...rest
}, ref) => {
  const onMouseDownHandler = onMouseDown;
  const interactionContext = useContext(InteractionContext);
  const handleClick = useCallback(e => {
    interactionContext === null || interactionContext === void 0 ? void 0 : interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!Component) {
    return null;
  }
  propDeprecationWarning("@atlaskit/menu" || '', 'cssFn', cssFn !== noop, '' // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  return jsx(MenuItemPrimitive
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , _extends({
    className: UNSAFE_className
  }, rest, {
    // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
    overrides: overrides,
    description: description,
    iconAfter: iconAfter,
    title: children,
    iconBefore: iconBefore,
    isSelected: isSelected,
    isDisabled: isDisabled,
    shouldTitleWrap: shouldTitleWrap,
    shouldDescriptionWrap: shouldDescriptionWrap
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    ,
    css: css(
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    cssFn({
      isDisabled,
      isSelected
    })),
    testId: testId && `${testId}--primitive`
  }), ({
    children,
    className
  }) => jsx(Component, _extends({
    "data-testid": testId
  }, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: className,
    ref: ref
  }, UNSAFE_isDraggable ? {} : {
    draggable: false,
    onDragStart: preventEvent
  }, {
    onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
    onClick: isDisabled ? preventEvent : fg('platform_button_item-add-ufo-metrics') ? handleClick : onClick,
    tabIndex: isDisabled ? -1 : undefined,
    "aria-disabled": isDisabled
  }), children));
})
// Dirty hack to get generics working with forward ref [2/2]
);
export default CustomItem;