"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guidelinePlugin = exports.EMPTY_STATE = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("@emotion/react");
var _hooks = require("@atlaskit/editor-common/hooks");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _guidelineContainer = require("./ui/guidelineContainer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var guidelineStyles = (0, _react.css)({
  position: 'absolute',
  width: '100%',
  left: 0,
  right: 0,
  transform: "scale(1)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: "".concat(_editorSharedStyles.akEditorGridLineZIndex, ";"),
  display: 'flex',
  justifyContent: 'center'
});
var key = new _state.PluginKey('guidelinePlugin');
var displayGuideline = function displayGuideline(view) {
  return function (props) {
    var dispatch = view.dispatch,
      state = view.state;
    var tr = state.tr.setMeta(key, props);
    dispatch(tr);
    return true;
  };
};
var EMPTY_STATE = exports.EMPTY_STATE = {
  guidelines: []
};
var guidelinePMPlugin = new _safePlugin.SafePlugin({
  key: key,
  state: {
    init: function init() {
      return EMPTY_STATE;
    },
    apply: function apply(tr, currentPluginState) {
      var nextPluginState = tr.getMeta(key);
      if (nextPluginState) {
        return _objectSpread(_objectSpread({}, currentPluginState), nextPluginState);
      }
      return currentPluginState;
    }
  }
});
var ContentComponent = function ContentComponent(_ref) {
  var api = _ref.api,
    editorView = _ref.editorView,
    options = _ref.options;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['width', 'guideline']),
    widthState = _useSharedPluginState.widthState,
    guidelineState = _useSharedPluginState.guidelineState;
  if (!widthState || !widthState.width || !widthState.lineLength || !guidelineState || !guidelineState.guidelines || guidelineState.guidelines.length === 0) {
    return null;
  }
  var updateRect = function updateRect(_ref2) {
    var top = _ref2.top,
      left = _ref2.left;
    var dispatch = editorView.dispatch,
      state = editorView.state;
    var _ref3 = guidelineState.rect || {},
      prevTop = _ref3.top,
      prevLeft = _ref3.left;
    if (prevTop !== top || prevLeft !== left) {
      var tr = state.tr.setMeta(key, {
        rect: {
          top: top,
          left: left
        }
      });
      dispatch(tr);
      return true;
    }
  };
  return (0, _react.jsx)("div", {
    css: guidelineStyles
  }, (0, _react.jsx)(_guidelineContainer.GuidelineContainer, {
    guidelines: guidelineState.guidelines
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    ,
    height: editorView.dom.scrollHeight,
    width: widthState.width,
    editorWidth: widthState.lineLength,
    updateRect: updateRect
  }));
};

/**
 * Guideline plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
var guidelinePlugin = exports.guidelinePlugin = function guidelinePlugin(_ref4) {
  var options = _ref4.config,
    api = _ref4.api;
  return {
    name: 'guideline',
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return null;
      }
      return key.getState(editorState) || null;
    },
    actions: {
      displayGuideline: displayGuideline
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'guideline',
        plugin: function plugin() {
          return guidelinePMPlugin;
        }
      }];
    },
    contentComponent: function contentComponent(_ref5) {
      var editorView = _ref5.editorView;
      return (0, _react.jsx)(ContentComponent, {
        editorView: editorView,
        options: options,
        api: api
      });
    }
  };
};