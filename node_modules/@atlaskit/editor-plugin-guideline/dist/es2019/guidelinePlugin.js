/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { akEditorGridLineZIndex } from '@atlaskit/editor-shared-styles';
import { GuidelineContainer } from './ui/guidelineContainer';
const guidelineStyles = css({
  position: 'absolute',
  width: '100%',
  left: 0,
  right: 0,
  transform: `scale(1)`,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: `${akEditorGridLineZIndex};`,
  display: 'flex',
  justifyContent: 'center'
});
const key = new PluginKey('guidelinePlugin');
const displayGuideline = view => props => {
  const {
    dispatch,
    state
  } = view;
  const tr = state.tr.setMeta(key, props);
  dispatch(tr);
  return true;
};
export const EMPTY_STATE = {
  guidelines: []
};
const guidelinePMPlugin = new SafePlugin({
  key,
  state: {
    init() {
      return EMPTY_STATE;
    },
    apply(tr, currentPluginState) {
      const nextPluginState = tr.getMeta(key);
      if (nextPluginState) {
        return {
          ...currentPluginState,
          ...nextPluginState
        };
      }
      return currentPluginState;
    }
  }
});
const ContentComponent = ({
  api,
  editorView,
  options
}) => {
  const {
    widthState,
    guidelineState
  } = useSharedPluginState(api, ['width', 'guideline']);
  if (!widthState || !widthState.width || !widthState.lineLength || !guidelineState || !guidelineState.guidelines || guidelineState.guidelines.length === 0) {
    return null;
  }
  const updateRect = ({
    top,
    left
  }) => {
    const {
      dispatch,
      state
    } = editorView;
    const {
      top: prevTop,
      left: prevLeft
    } = guidelineState.rect || {};
    if (prevTop !== top || prevLeft !== left) {
      const tr = state.tr.setMeta(key, {
        rect: {
          top,
          left
        }
      });
      dispatch(tr);
      return true;
    }
  };
  return jsx("div", {
    css: guidelineStyles
  }, jsx(GuidelineContainer, {
    guidelines: guidelineState.guidelines
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    ,
    height: editorView.dom.scrollHeight,
    width: widthState.width,
    editorWidth: widthState.lineLength,
    updateRect: updateRect
  }));
};

/**
 * Guideline plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
export const guidelinePlugin = ({
  config: options,
  api
}) => ({
  name: 'guideline',
  getSharedState(editorState) {
    if (!editorState) {
      return null;
    }
    return key.getState(editorState) || null;
  },
  actions: {
    displayGuideline: displayGuideline
  },
  pmPlugins() {
    return [{
      name: 'guideline',
      plugin: () => guidelinePMPlugin
    }];
  },
  contentComponent: ({
    editorView
  }) => jsx(ContentComponent, {
    editorView: editorView,
    options: options,
    api: api
  })
});