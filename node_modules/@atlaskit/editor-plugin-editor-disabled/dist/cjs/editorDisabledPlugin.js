"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editorDisabledPlugin = void 0;
var _rafSchd = _interopRequireDefault(require("raf-schd"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _utils = require("@atlaskit/editor-common/utils");
var _state = require("@atlaskit/editor-prosemirror/state");
var pluginKey = new _state.PluginKey('editorDisabledPlugin');
function reducer(_pluginState, meta) {
  return meta;
}
var _pluginFactory = (0, _utils.pluginFactory)(pluginKey, reducer),
  createPluginState = _pluginFactory.createPluginState,
  getPluginState = _pluginFactory.getPluginState;
var scheduleEditorDisabledUpdate = (0, _rafSchd.default)(function (view) {
  if (getPluginState(view.state).editorDisabled !== !view.editable) {
    var tr = view.state.tr.setMeta(pluginKey, {
      editorDisabled: !view.editable
    });
    tr.setMeta('isLocal', true);
    view.dispatch(tr);
  }
});

/*
Stores the state of the editor enabled/disabled for panel and floating
toolbar to subscribe to through useSharedPluginState. Otherwise the NodeViews
won't re-render when it changes.
*/
function createPlugin(dispatch) {
  return new _safePlugin.SafePlugin({
    key: pluginKey,
    state: createPluginState(dispatch, {
      editorDisabled: false
    }),
    view: function view() {
      return {
        update: function update(view) {
          scheduleEditorDisabledUpdate(view);
        },
        destroy: function destroy() {
          scheduleEditorDisabledUpdate.cancel();
        }
      };
    }
  });
}

/**
 * Editor disabled plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
var editorDisabledPlugin = exports.editorDisabledPlugin = function editorDisabledPlugin() {
  return {
    name: 'editorDisabled',
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return {
          editorDisabled: false
        };
      }
      var pluginState = pluginKey.getState(editorState);
      if (!pluginState) {
        return {
          editorDisabled: false
        };
      }
      return pluginState;
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'editorDisabled',
        plugin: function plugin(_ref) {
          var dispatch = _ref.dispatch;
          return createPlugin(dispatch);
        }
      }];
    }
  };
};