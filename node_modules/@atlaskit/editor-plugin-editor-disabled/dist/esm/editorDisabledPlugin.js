import rafSchedule from 'raf-schd';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
var pluginKey = new PluginKey('editorDisabledPlugin');
function reducer(_pluginState, meta) {
  return meta;
}
var _pluginFactory = pluginFactory(pluginKey, reducer),
  createPluginState = _pluginFactory.createPluginState,
  getPluginState = _pluginFactory.getPluginState;
var scheduleEditorDisabledUpdate = rafSchedule(function (view) {
  if (getPluginState(view.state).editorDisabled !== !view.editable) {
    var tr = view.state.tr.setMeta(pluginKey, {
      editorDisabled: !view.editable
    });
    tr.setMeta('isLocal', true);
    view.dispatch(tr);
  }
});

/*
Stores the state of the editor enabled/disabled for panel and floating
toolbar to subscribe to through useSharedPluginState. Otherwise the NodeViews
won't re-render when it changes.
*/
function createPlugin(dispatch) {
  return new SafePlugin({
    key: pluginKey,
    state: createPluginState(dispatch, {
      editorDisabled: false
    }),
    view: function view() {
      return {
        update: function update(view) {
          scheduleEditorDisabledUpdate(view);
        },
        destroy: function destroy() {
          scheduleEditorDisabledUpdate.cancel();
        }
      };
    }
  });
}

/**
 * Editor disabled plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
export var editorDisabledPlugin = function editorDisabledPlugin() {
  return {
    name: 'editorDisabled',
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return {
          editorDisabled: false
        };
      }
      var pluginState = pluginKey.getState(editorState);
      if (!pluginState) {
        return {
          editorDisabled: false
        };
      }
      return pluginState;
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'editorDisabled',
        plugin: function plugin(_ref) {
          var dispatch = _ref.dispatch;
          return createPlugin(dispatch);
        }
      }];
    }
  };
};