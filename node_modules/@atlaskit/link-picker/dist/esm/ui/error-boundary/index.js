import React, { useCallback } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { failUfoExperience, ufoExperience } from '../../common/analytics/experiences';
import { ANALYTICS_CHANNEL } from '../../common/constants';
import createEventPayload from '../../common/utils/analytics/analytics.codegen';
import { useLinkPickerSessionId } from '../../controllers/session-provider';
import { BaseErrorBoundary } from './error-boundary-base';
import { ErrorBoundaryFallback } from './error-boundary-fallback';
export function ErrorBoundary(_ref) {
  var children = _ref.children;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var linkPickerSessionId = useLinkPickerSessionId();
  var handleError = useCallback(function (error, info) {
    var _window, _info$componentStack;
    // Fire Analytics event
    createAnalyticsEvent(createEventPayload('ui.linkPicker.unhandledErrorCaught', {
      browserInfo: ((_window = window) === null || _window === void 0 || (_window = _window.navigator) === null || _window === void 0 ? void 0 : _window.userAgent) || 'unknown',
      error: error.toString(),
      componentStack: (_info$componentStack = info === null || info === void 0 ? void 0 : info.componentStack) !== null && _info$componentStack !== void 0 ? _info$componentStack : ''
    })).fire(ANALYTICS_CHANNEL);

    // Fire UFO failed experience
    failUfoExperience(ufoExperience.mounted, linkPickerSessionId);
  }, [createAnalyticsEvent, linkPickerSessionId]);
  return /*#__PURE__*/React.createElement(BaseErrorBoundary, {
    onError: handleError,
    ErrorComponent: ErrorBoundaryFallback
  }, children);
}