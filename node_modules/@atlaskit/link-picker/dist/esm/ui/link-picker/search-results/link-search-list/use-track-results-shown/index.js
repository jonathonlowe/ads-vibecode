import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useEffect, useMemo, useRef } from 'react';
import { useDebounce } from 'use-debounce';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { ANALYTICS_CHANNEL } from '../../../../../common/constants';
import createEventPayload from '../../../../../common/utils/analytics/analytics.codegen';
var DEBOUNCE_MS = 400;
export var useTrackResultsShown = function useTrackResultsShown(isLoading, items, hasSearchTerm) {
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var hasSearchTermRef = useRef(hasSearchTerm);
  // Using ref so that not required in the dependency array
  // Analytics should be entirely dependent on change of items being viewed
  useEffect(function () {
    hasSearchTermRef.current = hasSearchTerm;
  }, [hasSearchTerm]);

  // Filters isLoading/items to only return the array of items if no longer loading more items
  // Loading state IS a factor here because some tabs will
  // load intermediate results whilst loading additional results (Atlassian tab)
  // Considered to only have "shown" results once we are in a final state (no longer loading)
  var finalItems = useMemo(function () {
    return !isLoading ? items : null;
  }, [isLoading, items]);

  // Because Atlassian tab resolves intermediate results on every keystroke (may never be loading)
  // Debounce the items so that we only consider the results to have been shown
  // after they have been stable for DEBOUNCE_MS
  var _useDebounce = useDebounce(finalItems, DEBOUNCE_MS),
    _useDebounce2 = _slicedToArray(_useDebounce, 1),
    debouncedItems = _useDebounce2[0];
  useEffect(function () {
    if (debouncedItems) {
      var event = !hasSearchTermRef.current ? 'ui.searchResults.shown.preQuerySearchResults' : 'ui.searchResults.shown.postQuerySearchResults';
      createAnalyticsEvent(createEventPayload(event, {
        resultCount: debouncedItems.length
      })).fire(ANALYTICS_CHANNEL);
    }
  }, [debouncedItems, createAnalyticsEvent]);
};