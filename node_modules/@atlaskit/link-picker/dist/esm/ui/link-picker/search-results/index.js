/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { Fragment } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner/spinner';
import Tabs, { Tab, TabList } from '@atlaskit/tabs';
import { LinkSearchError, testIds as searchErrorTestIds } from './link-search-error';
import { LinkSearchList, testIds as listTestIds } from './link-search-list';
import { ScrollingTabList } from './scrolling-tabs';
import { SearchResultsContainer } from './search-results-container';
import { TrackTabViewed } from './track-tab-viewed';
var styles = {
  tabsWrapper: "_19pkutpp"
};
var spinnerContainerStyles = null;
export var testIds = _objectSpread(_objectSpread(_objectSpread({}, searchErrorTestIds), listTestIds), {}, {
  tabsLoadingIndicator: 'link-picker.tabs-loading-indicator',
  tabList: 'link-picker-tabs',
  tabItem: 'link-picker-tab'
});
export var SearchResults = function SearchResults(_ref) {
  var _activePlugin$errorFa, _activePlugin$errorFa2;
  var tabs = _ref.tabs,
    activeTab = _ref.activeTab,
    activePlugin = _ref.activePlugin,
    isLoadingPlugins = _ref.isLoadingPlugins,
    isLoadingResults = _ref.isLoadingResults,
    isSubmitting = _ref.isSubmitting,
    handleTabChange = _ref.handleTabChange,
    handleSearchListOnChange = _ref.handleSearchListOnChange,
    featureFlags = _ref.featureFlags,
    linkSearchListId = _ref.linkSearchListId,
    error = _ref.error,
    queryState = _ref.queryState,
    items = _ref.items,
    activeIndex = _ref.activeIndex,
    selectedIndex = _ref.selectedIndex,
    handleSelected = _ref.handleSelected,
    handleKeyDown = _ref.handleKeyDown,
    adaptiveHeight = _ref.adaptiveHeight,
    retry = _ref.retry;
  var isActivePlugin = !!activePlugin;
  var tabList = /*#__PURE__*/React.createElement(TabList, null, tabs.map(function (tab) {
    return /*#__PURE__*/React.createElement(Tab, {
      key: tab.tabTitle,
      testId: testIds.tabItem
    }, tab.tabTitle);
  }));
  return /*#__PURE__*/React.createElement(SearchResultsContainer, {
    hasTabs: !!tabs.length || isLoadingPlugins,
    adaptiveHeight: adaptiveHeight,
    isLoadingResults: isLoadingResults
  }, isLoadingPlugins && !!queryState && /*#__PURE__*/React.createElement("div", {
    className: ax(["_1tkeys9h _1e0c1txw _4cvr1h6o _1bah1h6o _1wpz1h6o _16jlkb7n"])
  }, /*#__PURE__*/React.createElement(Spinner, {
    testId: testIds.tabsLoadingIndicator,
    interactionName: "link-picker-tabs-loading",
    size: "medium"
  })), !isLoadingPlugins && isActivePlugin && !!queryState && /*#__PURE__*/React.createElement(Fragment, null, tabs.length > 0 && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.tabsWrapper
  }, /*#__PURE__*/React.createElement(Tabs, {
    id: testIds.tabList,
    testId: testIds.tabList,
    selected: activeTab,
    onChange: handleTabChange
  }, featureFlags !== null && featureFlags !== void 0 && featureFlags.scrollingTabs ? /*#__PURE__*/React.createElement(ScrollingTabList, null, tabList) : tabList), /*#__PURE__*/React.createElement(TrackTabViewed, {
    activePlugin: activePlugin
  })), !error && /*#__PURE__*/React.createElement(LinkSearchList, {
    id: linkSearchListId,
    role: "listbox",
    ariaReadOnly: isSubmitting,
    items: items,
    isLoading: isLoadingResults,
    selectedIndex: selectedIndex,
    activeIndex: activeIndex,
    onSelect: handleSelected,
    onChange: handleSearchListOnChange,
    onKeyDown: handleKeyDown,
    hasSearchTerm: !!(queryState !== null && queryState !== void 0 && queryState.query.length),
    activePlugin: activePlugin,
    adaptiveHeight: adaptiveHeight,
    tabPanelId: "".concat(testIds.tabList, "-").concat(activeTab, "-tab")
  }), error ? (_activePlugin$errorFa = activePlugin === null || activePlugin === void 0 || (_activePlugin$errorFa2 = activePlugin.errorFallback) === null || _activePlugin$errorFa2 === void 0 ? void 0 : _activePlugin$errorFa2.call(activePlugin, error, retry)) !== null && _activePlugin$errorFa !== void 0 ? _activePlugin$errorFa : /*#__PURE__*/React.createElement(LinkSearchError, {
    onRetry: fg('platform-linking-visual-refresh-link-picker') ? retry : undefined
  }) : null));
};