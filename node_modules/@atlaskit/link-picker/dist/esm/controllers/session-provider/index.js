import React, { createContext, useContext, useEffect, useRef } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { abortUfoExperience, startUfoExperience, ufoExperience } from '../../common/analytics/experiences';
export var INIT_CONTEXT = 'SESSION_UNINITIALIZED';
export var SessionContext = /*#__PURE__*/createContext(INIT_CONTEXT);
var useConstructor = function useConstructor(callback) {
  var hasBeenFired = useRef(false);
  if (!hasBeenFired.current) {
    callback();
    hasBeenFired.current = true;
  }
  return null;
};
export var LinkPickerSessionProvider = function LinkPickerSessionProvider(_ref) {
  var children = _ref.children;
  var _useRef = useRef(uuidv4()),
    sessionId = _useRef.current;
  useEffect(function () {
    return function () {
      return abortUfoExperience(ufoExperience.mounted, sessionId);
    };
  }, [sessionId]);
  useConstructor(function () {
    return startUfoExperience(ufoExperience.mounted, sessionId);
  });
  return /*#__PURE__*/React.createElement(SessionContext.Provider, {
    value: sessionId
  }, children);
};
export var useLinkPickerSessionId = function useLinkPickerSessionId() {
  return useContext(SessionContext);
};