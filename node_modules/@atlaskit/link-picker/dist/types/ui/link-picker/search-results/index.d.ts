/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type KeyboardEvent } from 'react';
import { type LinkPickerPlugin, type LinkSearchListItemData } from '../../../common/types';
export declare const testIds: {
    tabsLoadingIndicator: string;
    tabList: string;
    tabItem: string;
    resultListTitle: string;
    searchResultList: string;
    searchResultLoadingIndicator: string;
    searchResultItem: string;
    searchResultIcon: string;
    emptyResultPage: string;
    searchError: string;
};
export type SearchResultsProps = {
    activePlugin?: LinkPickerPlugin;
    tabs: {
        tabTitle: string;
    }[];
    isLoadingPlugins?: boolean;
    isLoadingResults: boolean;
    isSubmitting?: boolean;
    activeTab: number;
    handleTabChange: (activeTab: number) => void;
    handleSearchListOnChange: (id: string) => void;
    featureFlags?: Record<string, unknown>;
    linkSearchListId: string;
    queryState?: {
        query: string;
    };
    items?: LinkSearchListItemData[] | null;
    activeIndex: number;
    selectedIndex: number;
    handleSelected: (objectId: string) => void;
    handleKeyDown: (e: KeyboardEvent<HTMLElement>) => void;
    error?: unknown;
    adaptiveHeight: boolean;
    retry: () => void;
};
export declare const SearchResults: ({ tabs, activeTab, activePlugin, isLoadingPlugins, isLoadingResults, isSubmitting, handleTabChange, handleSearchListOnChange, featureFlags, linkSearchListId, error, queryState, items, activeIndex, selectedIndex, handleSelected, handleKeyDown, adaptiveHeight, retry, }: SearchResultsProps) => JSX.Element;
