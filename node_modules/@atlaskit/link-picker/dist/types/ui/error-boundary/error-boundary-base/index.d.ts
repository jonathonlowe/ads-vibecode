import React, { Component, type ErrorInfo, type ReactNode } from 'react';
export type ErrorBoundaryErrorInfo = {
    componentStack: string;
};
type BaseErrorBoundaryState = {
    hasError: boolean;
};
interface BaseErrorBoundaryProps {
    children: ReactNode;
    ErrorComponent?: React.ComponentType;
    onError?: (error: Error, info?: ErrorInfo) => void;
}
export declare class BaseErrorBoundary extends Component<BaseErrorBoundaryProps, BaseErrorBoundaryState> {
    constructor(props: BaseErrorBoundaryProps);
    componentDidCatch(error: Error, info?: ErrorInfo): void;
    render(): string | number | boolean | Iterable<React.ReactNode> | React.JSX.Element | null | undefined;
}
export {};
