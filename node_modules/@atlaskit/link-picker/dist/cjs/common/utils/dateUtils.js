"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_THRESHOLDS = void 0;
exports.selectUnit = selectUnit;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
//copied from packages/activity-platform/recent-work-ui/src/common/ui/activity-event-type-message/utils.ts

var MS_PER_SECOND = 1e3;
var SECS_PER_MIN = 60;
var SECS_PER_HOUR = SECS_PER_MIN * 60;
var SECS_PER_DAY = SECS_PER_HOUR * 24;
var SECS_PER_WEEK = SECS_PER_DAY * 7;

// This function is a direct copy from https://github.com/formatjs/formatjs-old/blob/master/packages/intl-utils/src/diff.ts
// If the year between 'from' and 'to' is different and there is more than a week between them, the function returns
// 'year' as the unit. This means some activities display a '1 year ago' even though its 10 days old.
//
// In the below, we have removed the check for 'year' and 'month' as we display absolute dates for those periods.
function selectUnit(from) {
  var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();
  var thresholds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var resolvedThresholds = _objectSpread(_objectSpread({}, DEFAULT_THRESHOLDS), thresholds || {});
  var secs = (+from - +to) / MS_PER_SECOND;
  if (Math.abs(secs) < resolvedThresholds.second) {
    return {
      value: Math.round(secs),
      unit: 'second'
    };
  }
  var mins = secs / SECS_PER_MIN;
  if (Math.abs(mins) < resolvedThresholds.minute) {
    return {
      value: Math.round(mins),
      unit: 'minute'
    };
  }
  var hours = secs / SECS_PER_HOUR;
  if (Math.abs(hours) < resolvedThresholds.hour) {
    return {
      value: Math.round(hours),
      unit: 'hour'
    };
  }
  var days = secs / SECS_PER_DAY;
  if (Math.abs(days) < resolvedThresholds.day) {
    return {
      value: Math.round(days),
      unit: 'day'
    };
  }
  var weeks = secs / SECS_PER_WEEK;
  return {
    value: Math.round(weeks),
    unit: 'week'
  };
}
var DEFAULT_THRESHOLDS = exports.DEFAULT_THRESHOLDS = {
  second: 45,
  // seconds to minute
  minute: 45,
  // minutes to hour
  hour: 22,
  // hour to day
  day: 5 // day to week
};