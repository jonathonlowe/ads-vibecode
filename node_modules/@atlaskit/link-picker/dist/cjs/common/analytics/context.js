"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLinkPickerAnalytics = void 0;
exports.withLinkPickerAnalyticsContext = withLinkPickerAnalyticsContext;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _url = require("@atlaskit/linking-common/url");
var _constants = require("../constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_CONTEXT_ATTRIBUTES = {
  linkState: 'newLink',
  linkFieldContent: null,
  linkFieldContentInputMethod: null,
  linkFieldContentInputSource: null,
  displayTextFieldContent: null,
  displayTextFieldContentInputMethod: null,
  tab: null
};
var LinkPickerAnalyticsContext = /*#__PURE__*/_react.default.createContext({
  trackAttribute: function trackAttribute() {},
  trackAttributes: function trackAttributes() {},
  getAttributes: function getAttributes() {
    return DEFAULT_CONTEXT_ATTRIBUTES;
  }
});

/**
 * TODO: Should we hook this into the form state/reducer?
 * This function continues to duplicate / assume logic that runs in the picker
 */
var contextAttributesFromIntialProps = function contextAttributesFromIntialProps(props) {
  var _props$plugins$0$tabK, _props$plugins;
  return {
    linkState: (0, _url.normalizeUrl)(props.url) ? 'editLink' : 'newLink',
    linkFieldContent: (0, _url.normalizeUrl)(props.url) ? 'url' : null,
    displayTextFieldContent: Boolean(props.displayText) ? 'text_string' : null,
    // TODO: Assumes we alway load the first plugin as the current tab
    tab: (_props$plugins$0$tabK = (_props$plugins = props.plugins) === null || _props$plugins === void 0 || (_props$plugins = _props$plugins[0]) === null || _props$plugins === void 0 ? void 0 : _props$plugins.tabKey) !== null && _props$plugins$0$tabK !== void 0 ? _props$plugins$0$tabK : null
  };
};

/**
 * Context for tracking attributes to deliver at a context-level
 */
var LinkPickerAnalytics = function LinkPickerAnalytics(_ref) {
  var initialContext = _ref.initialContext,
    children = _ref.children;
  var dataRef = (0, _react.useRef)(_objectSpread(_objectSpread({}, DEFAULT_CONTEXT_ATTRIBUTES), initialContext));
  var methods = (0, _react.useMemo)(function () {
    return {
      trackAttribute: function trackAttribute(key, value) {
        dataRef.current[key] = value;
      },
      trackAttributes: function trackAttributes(attributes) {
        dataRef.current = _objectSpread(_objectSpread({}, dataRef.current), attributes);
      },
      getAttributes: function getAttributes() {
        return dataRef.current;
      }
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(LinkPickerAnalyticsContext.Provider, {
    value: methods
  }, children);
};

/**
 * Hook that exposes the context-level attribute getters and setters.
 */
var useLinkPickerAnalytics = exports.useLinkPickerAnalytics = function useLinkPickerAnalytics() {
  return (0, _react.useContext)(LinkPickerAnalyticsContext);
};

/**
 * Wrap component in "attributes" context store and initialise the initial context attributes from props.
 */
function withLinkPickerAnalytics(WrappedComponent) {
  return function (props) {
    var _useState = (0, _react.useState)(function () {
        return contextAttributesFromIntialProps(props);
      }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 1),
      initialContext = _useState2[0];
    return /*#__PURE__*/_react.default.createElement(LinkPickerAnalytics, (0, _extends2.default)({
      initialContext: initialContext
    }, props), /*#__PURE__*/_react.default.createElement(WrappedComponent, props));
  };
}

/**
 * Wraps a component with the analytics context + listener to update events with contextual-level attributes.
 * Should be implemented once at the root of the link picker.
 */
function withLinkPickerAnalyticsContext(WrappedComponent) {
  return withLinkPickerAnalytics(function (props) {
    var _useLinkPickerAnalyti = useLinkPickerAnalytics(),
      getAttributes = _useLinkPickerAnalyti.getAttributes;
    var onEvent = (0, _react.useCallback)(function (event) {
      var _event$payload$attrib;
      event.update({
        attributes: _objectSpread(_objectSpread({}, getAttributes()), (_event$payload$attrib = event.payload.attributes) !== null && _event$payload$attrib !== void 0 ? _event$payload$attrib : {})
      });
    }, [getAttributes]);
    return /*#__PURE__*/_react.default.createElement(_analyticsNext.AnalyticsListener, {
      channel: _constants.ANALYTICS_CHANNEL,
      onEvent: onEvent
    }, /*#__PURE__*/_react.default.createElement(WrappedComponent, props));
  });
}