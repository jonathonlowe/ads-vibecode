"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollForward = exports.scrollBack = exports.getTabList = exports.getContainer = exports.createGhost = exports.calculateConditionalButtons = void 0;
var BUTTON_SIZE = 24;
var GUTTER = 48;
var GHOST_WIDTH = 342 - GUTTER - 40;
var scrollBack = exports.scrollBack = function scrollBack(ref) {
  moveTabsScroll(ref, findPrevious);
};
var scrollForward = exports.scrollForward = function scrollForward(ref) {
  moveTabsScroll(ref, findNext);
};
var calculateConditionalButtons = exports.calculateConditionalButtons = function calculateConditionalButtons(container, hideButtons) {
  var initialState = {
    back: false,
    forward: false
  };
  if (!container || hideButtons) {
    return initialState;
  }
  var maxScrollValue = container.scrollWidth - container.clientWidth;
  return {
    back: container.scrollLeft > 0,
    forward: container.scrollLeft < maxScrollValue - GHOST_WIDTH
  };
};
var createGhost = exports.createGhost = function createGhost() {
  var ghost = document.createElement('div');
  ghost.setAttribute('id', 'scrolling-tabs-ghost');
  ghost.style.minWidth = "".concat(GHOST_WIDTH, "px");
  ghost.style.pointerEvents = 'none';
  return ghost;
};
var moveTabsScroll = function moveTabsScroll(ref, findFn) {
  var container = getContainer(ref);
  if (container) {
    var tablist = container.children[0];
    var _tabs = Array.from(tablist.children);
    if (_tabs.length > 0) {
      var target = findFn(container, _tabs);
      if (target) {
        var left = container.scrollLeft + target.getBoundingClientRect().left - container.getBoundingClientRect().left - BUTTON_SIZE;
        scrollTo(container, left);
      }
    }
  }
};
var scrollTo = function scrollTo(container, left) {
  container.scrollTo({
    left: left
  });
};
var getTabList = exports.getTabList = function getTabList(ref) {
  var _ref$current;
  return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector('[role="tablist"]');
};
var getContainer = exports.getContainer = function getContainer(ref) {
  var _getTabList;
  return (_getTabList = getTabList(ref)) === null || _getTabList === void 0 ? void 0 : _getTabList.parentElement;
};
var findPrevious = function findPrevious(container, tabs) {
  var previousTabs = tabs.filter(function (tab) {
    var _ref = [container.getBoundingClientRect(), tab.getBoundingClientRect()],
      containerRect = _ref[0],
      tabRect = _ref[1];
    var containerArea = containerRect.left + container.scrollLeft - GUTTER,
      tabArea = container.scrollLeft + tabRect.left + tabRect.width;
    return containerArea > tabArea;
  });
  if (previousTabs.length < 3) {
    return previousTabs[0];
  }
  return previousTabs[previousTabs.length - 1];
};
var findNext = function findNext(container, tabs) {
  var containerRect = container.getBoundingClientRect();
  return tabs.find(function (tab) {
    var tabRect = tab.getBoundingClientRect();
    var containerArea = container.clientWidth + containerRect.left - GUTTER,
      tabArea = tabRect.left + tabRect.width;
    return containerArea < tabArea;
  });
};