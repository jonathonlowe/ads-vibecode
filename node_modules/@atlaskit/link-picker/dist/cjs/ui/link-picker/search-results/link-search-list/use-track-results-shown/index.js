"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTrackResultsShown = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _useDebounce3 = require("use-debounce");
var _analyticsNext = require("@atlaskit/analytics-next");
var _constants = require("../../../../../common/constants");
var _analytics = _interopRequireDefault(require("../../../../../common/utils/analytics/analytics.codegen"));
var DEBOUNCE_MS = 400;
var useTrackResultsShown = exports.useTrackResultsShown = function useTrackResultsShown(isLoading, items, hasSearchTerm) {
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var hasSearchTermRef = (0, _react.useRef)(hasSearchTerm);
  // Using ref so that not required in the dependency array
  // Analytics should be entirely dependent on change of items being viewed
  (0, _react.useEffect)(function () {
    hasSearchTermRef.current = hasSearchTerm;
  }, [hasSearchTerm]);

  // Filters isLoading/items to only return the array of items if no longer loading more items
  // Loading state IS a factor here because some tabs will
  // load intermediate results whilst loading additional results (Atlassian tab)
  // Considered to only have "shown" results once we are in a final state (no longer loading)
  var finalItems = (0, _react.useMemo)(function () {
    return !isLoading ? items : null;
  }, [isLoading, items]);

  // Because Atlassian tab resolves intermediate results on every keystroke (may never be loading)
  // Debounce the items so that we only consider the results to have been shown
  // after they have been stable for DEBOUNCE_MS
  var _useDebounce = (0, _useDebounce3.useDebounce)(finalItems, DEBOUNCE_MS),
    _useDebounce2 = (0, _slicedToArray2.default)(_useDebounce, 1),
    debouncedItems = _useDebounce2[0];
  (0, _react.useEffect)(function () {
    if (debouncedItems) {
      var event = !hasSearchTermRef.current ? 'ui.searchResults.shown.preQuerySearchResults' : 'ui.searchResults.shown.postQuerySearchResults';
      createAnalyticsEvent((0, _analytics.default)(event, {
        resultCount: debouncedItems.length
      })).fire(_constants.ANALYTICS_CHANNEL);
    }
  }, [debouncedItems, createAnalyticsEvent]);
};