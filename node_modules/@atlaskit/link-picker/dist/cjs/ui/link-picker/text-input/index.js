/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testIds = exports.TextInput = void 0;
require("./index.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _useCallbackRef = require("use-callback-ref");
var _form = require("@atlaskit/form");
var _crossCircleSelectClear = _interopRequireDefault(require("@atlaskit/icon/core/migration/cross-circle--select-clear"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _conditionalSpotlightTargetWrapper = require("./conditional-spotlight-target-wrapper");
var _utils = require("./utils");
var _excluded = ["name", "label", "autoFocus", "onRedo", "onUndo", "onKeyDown", "onClear", "clearLabel", "error", "spotlightTargetName", "inputRef"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var styles = {
  clearTextButton: "_19itglyw _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _2hwx1b66 _bfhksm61 _s7n4nkob"
};

/**
 * Overriding text input margin top which design system provides as a default spacer
 * but it gets in the way of our layout
 */
var baseFieldStyles = null;
var newFieldStyles = null;
var testIds = exports.testIds = {
  urlError: 'link-error',
  clearUrlButton: 'clear-text'
};
var TextInput = exports.TextInput = function TextInput(_ref) {
  var name = _ref.name,
    label = _ref.label,
    autoFocus = _ref.autoFocus,
    onRedo = _ref.onRedo,
    onUndo = _ref.onUndo,
    onKeyDown = _ref.onKeyDown,
    onClear = _ref.onClear,
    clearLabel = _ref.clearLabel,
    error = _ref.error,
    spotlightTargetName = _ref.spotlightTargetName,
    inputRefProp = _ref.inputRef,
    restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var inputRef = (0, _react.useRef)(null);
  var handleRef = (0, _react.useCallback)(function (input) {
    if (input) {
      inputRef.current = input;
      if (autoFocus) {
        // Need this to prevent jumping when we render TextInput inside Portal @see ED-2992
        input.focus({
          preventScroll: true
        });
      }
    }
  }, [autoFocus]);
  var textfieldRef;
  if ((0, _platformFeatureFlags.fg)('jsc_inline_editing_field_refactor')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var refs = (0, _react.useMemo)(function () {
      return [handleRef, inputRefProp].filter(Boolean);
    }, [handleRef, inputRefProp]);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    textfieldRef = (0, _useCallbackRef.useMergeRefs)(refs);
  } else {
    textfieldRef = handleRef;
  }
  var handleKeydown = (0, _react.useCallback)(function (e) {
    if (typeof onUndo === 'function' && (0, _utils.isUndoEvent)(e)) {
      e.preventDefault();
      onUndo();
    } else if (typeof onRedo === 'function' && (0, _utils.isRedoEvent)(e)) {
      e.preventDefault();
      onRedo();
    }
    if (onKeyDown) {
      onKeyDown(e);
    }
  }, [onUndo, onRedo, onKeyDown]);
  var handleClear = (0, _react.useCallback)(function (e) {
    var _inputRef$current;
    e.preventDefault();
    e.stopPropagation();
    onClear === null || onClear === void 0 || onClear(name);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
  }, [name, onClear]);
  var clearText = restProps.value !== '' && /*#__PURE__*/React.createElement(_tooltip.default, {
    content: clearLabel
  }, /*#__PURE__*/React.createElement(_compiled.Pressable, {
    xcss: styles.clearTextButton,
    onClick: handleClear,
    testId: testIds.clearUrlButton
  }, /*#__PURE__*/React.createElement(_crossCircleSelectClear.default, {
    LEGACY_size: "medium",
    label: clearLabel || '',
    color: "var(--ds-icon-subtle, #626F86)",
    spacing: "spacious"
  })));
  return /*#__PURE__*/React.createElement("div", {
    className: (0, _runtime.ax)(["_7yjtidpf _onzypxbi", (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && "_11c81vhk"])
  }, /*#__PURE__*/React.createElement(_form.Field, {
    label: label,
    name: name
  }, function (_ref2) {
    var fieldProps = _ref2.fieldProps;
    return /*#__PURE__*/React.createElement(_conditionalSpotlightTargetWrapper.ConditionalSpotlightTargetWrapper, {
      spotlightTargetName: spotlightTargetName
    }, /*#__PURE__*/React.createElement(_react.Fragment, null, /*#__PURE__*/React.createElement(_textfield.default, (0, _extends2.default)({}, fieldProps, restProps, {
      onKeyDown: handleKeydown,
      ref: textfieldRef,
      elemAfterInput: clearText,
      isInvalid: !!error
    })), error && /*#__PURE__*/React.createElement(_form.ErrorMessage, {
      testId: testIds.urlError
    }, error)));
  }));
};