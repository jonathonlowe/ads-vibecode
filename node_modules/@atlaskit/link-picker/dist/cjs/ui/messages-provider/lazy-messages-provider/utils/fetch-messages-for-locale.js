"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchMessagesForLocale = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _i18n = require("../../../../i18n");
var fetchMessagesForLocale = exports.fetchMessagesForLocale = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(locale) {
    var localeKey, messages, parentLocale, _messages;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          localeKey = locale.replace('-', '_');
          if (!(localeKey in _i18n.locales)) {
            _context.next = 7;
            break;
          }
          _context.next = 5;
          return _i18n.locales[localeKey]();
        case 5:
          messages = _context.sent;
          return _context.abrupt("return", messages.default);
        case 7:
          _context.next = 11;
          break;
        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](0);
        case 11:
          _context.prev = 11;
          parentLocale = locale.split(/[-_]/)[0];
          if (!(parentLocale in _i18n.locales)) {
            _context.next = 18;
            break;
          }
          _context.next = 16;
          return _i18n.locales[parentLocale]();
        case 16:
          _messages = _context.sent;
          return _context.abrupt("return", _messages.default);
        case 18:
          _context.next = 22;
          break;
        case 20:
          _context.prev = 20;
          _context.t1 = _context["catch"](11);
        case 22:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 9], [11, 20]]);
  }));
  return function fetchMessagesForLocale(_x) {
    return _ref.apply(this, arguments);
  };
}();