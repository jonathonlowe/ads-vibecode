"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLinkPickerSessionId = exports.SessionContext = exports.LinkPickerSessionProvider = exports.INIT_CONTEXT = void 0;
var _react = _interopRequireWildcard(require("react"));
var _uuid = require("uuid");
var _experiences = require("../../common/analytics/experiences");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var INIT_CONTEXT = exports.INIT_CONTEXT = 'SESSION_UNINITIALIZED';
var SessionContext = exports.SessionContext = /*#__PURE__*/(0, _react.createContext)(INIT_CONTEXT);
var useConstructor = function useConstructor(callback) {
  var hasBeenFired = (0, _react.useRef)(false);
  if (!hasBeenFired.current) {
    callback();
    hasBeenFired.current = true;
  }
  return null;
};
var LinkPickerSessionProvider = exports.LinkPickerSessionProvider = function LinkPickerSessionProvider(_ref) {
  var children = _ref.children;
  var _useRef = (0, _react.useRef)((0, _uuid.v4)()),
    sessionId = _useRef.current;
  (0, _react.useEffect)(function () {
    return function () {
      return (0, _experiences.abortUfoExperience)(_experiences.ufoExperience.mounted, sessionId);
    };
  }, [sessionId]);
  useConstructor(function () {
    return (0, _experiences.startUfoExperience)(_experiences.ufoExperience.mounted, sessionId);
  });
  return /*#__PURE__*/_react.default.createElement(SessionContext.Provider, {
    value: sessionId
  }, children);
};
var useLinkPickerSessionId = exports.useLinkPickerSessionId = function useLinkPickerSessionId() {
  return (0, _react.useContext)(SessionContext);
};