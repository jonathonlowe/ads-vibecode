/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type KeyboardEvent } from 'react';
import { type LinkPickerPlugin, type LinkSearchListItemData } from '../../../../common/types';
export declare const messages: {
    titleRecentlyViewed: {
        id: string;
        defaultMessage: string;
        description: string;
    };
    titleResults: {
        id: string;
        defaultMessage: string;
        description: string;
    };
    searchLinkResults: {
        id: string;
        defaultMessage: string;
        description: string;
    };
};
export declare const testIds: {
    resultListTitle: string;
    searchResultList: string;
    searchResultLoadingIndicator: string;
    tabsLoadingIndicator: string;
    searchResultItem: string;
    searchResultIcon: string;
    emptyResultPage: string;
};
type LinkSearchListElement = HTMLElement;
export interface LinkSearchListProps extends Omit<React.HTMLAttributes<LinkSearchListElement>, 'onSelect' | 'onChange'> {
    items?: LinkSearchListItemData[] | null;
    isLoading: boolean;
    selectedIndex: number;
    activeIndex: number;
    adaptiveHeight: boolean;
    onChange: (objectId: string) => void;
    onSelect: (objectId: string) => void;
    onKeyDown?: (e: KeyboardEvent<LinkSearchListElement>) => void;
    ariaControls?: string;
    ariaLabelledBy?: string;
    ariaReadOnly?: boolean;
    role?: string;
    id?: string;
    hasSearchTerm?: boolean;
    activePlugin?: LinkPickerPlugin;
    /** Because we don't use the DST TabPanels component, tabPanelId is needed to set the correct aria-controls for a11y. */
    tabPanelId?: string;
}
export declare const LinkSearchList: import("react").ForwardRefExoticComponent<LinkSearchListProps & import("react").RefAttributes<HTMLDivElement>>;
export {};
