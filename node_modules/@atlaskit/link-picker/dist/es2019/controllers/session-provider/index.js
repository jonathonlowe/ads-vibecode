import React, { createContext, useContext, useEffect, useRef } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { abortUfoExperience, startUfoExperience, ufoExperience } from '../../common/analytics/experiences';
export const INIT_CONTEXT = 'SESSION_UNINITIALIZED';
export const SessionContext = /*#__PURE__*/createContext(INIT_CONTEXT);
const useConstructor = callback => {
  const hasBeenFired = useRef(false);
  if (!hasBeenFired.current) {
    callback();
    hasBeenFired.current = true;
  }
  return null;
};
export const LinkPickerSessionProvider = ({
  children
}) => {
  const {
    current: sessionId
  } = useRef(uuidv4());
  useEffect(() => {
    return () => abortUfoExperience(ufoExperience.mounted, sessionId);
  }, [sessionId]);
  useConstructor(() => startUfoExperience(ufoExperience.mounted, sessionId));
  return /*#__PURE__*/React.createElement(SessionContext.Provider, {
    value: sessionId
  }, children);
};
export const useLinkPickerSessionId = () => useContext(SessionContext);