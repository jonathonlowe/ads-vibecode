import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useContext, useMemo, useRef, useState } from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { normalizeUrl } from '@atlaskit/linking-common/url';
import { ANALYTICS_CHANNEL } from '../constants';
const DEFAULT_CONTEXT_ATTRIBUTES = {
  linkState: 'newLink',
  linkFieldContent: null,
  linkFieldContentInputMethod: null,
  linkFieldContentInputSource: null,
  displayTextFieldContent: null,
  displayTextFieldContentInputMethod: null,
  tab: null
};
const LinkPickerAnalyticsContext = /*#__PURE__*/React.createContext({
  trackAttribute: () => {},
  trackAttributes: () => {},
  getAttributes: () => DEFAULT_CONTEXT_ATTRIBUTES
});

/**
 * TODO: Should we hook this into the form state/reducer?
 * This function continues to duplicate / assume logic that runs in the picker
 */
const contextAttributesFromIntialProps = props => {
  var _props$plugins$0$tabK, _props$plugins, _props$plugins$;
  return {
    linkState: normalizeUrl(props.url) ? 'editLink' : 'newLink',
    linkFieldContent: normalizeUrl(props.url) ? 'url' : null,
    displayTextFieldContent: Boolean(props.displayText) ? 'text_string' : null,
    // TODO: Assumes we alway load the first plugin as the current tab
    tab: (_props$plugins$0$tabK = (_props$plugins = props.plugins) === null || _props$plugins === void 0 ? void 0 : (_props$plugins$ = _props$plugins[0]) === null || _props$plugins$ === void 0 ? void 0 : _props$plugins$.tabKey) !== null && _props$plugins$0$tabK !== void 0 ? _props$plugins$0$tabK : null
  };
};

/**
 * Context for tracking attributes to deliver at a context-level
 */
const LinkPickerAnalytics = ({
  initialContext,
  children
}) => {
  const dataRef = useRef({
    ...DEFAULT_CONTEXT_ATTRIBUTES,
    ...initialContext
  });
  const methods = useMemo(() => ({
    trackAttribute: (key, value) => {
      dataRef.current[key] = value;
    },
    trackAttributes: attributes => {
      dataRef.current = {
        ...dataRef.current,
        ...attributes
      };
    },
    getAttributes: () => dataRef.current
  }), []);
  return /*#__PURE__*/React.createElement(LinkPickerAnalyticsContext.Provider, {
    value: methods
  }, children);
};

/**
 * Hook that exposes the context-level attribute getters and setters.
 */
export const useLinkPickerAnalytics = () => useContext(LinkPickerAnalyticsContext);

/**
 * Wrap component in "attributes" context store and initialise the initial context attributes from props.
 */
function withLinkPickerAnalytics(WrappedComponent) {
  return props => {
    const [initialContext] = useState(() => contextAttributesFromIntialProps(props));
    return /*#__PURE__*/React.createElement(LinkPickerAnalytics, _extends({
      initialContext: initialContext
    }, props), /*#__PURE__*/React.createElement(WrappedComponent, props));
  };
}

/**
 * Wraps a component with the analytics context + listener to update events with contextual-level attributes.
 * Should be implemented once at the root of the link picker.
 */
export function withLinkPickerAnalyticsContext(WrappedComponent) {
  return withLinkPickerAnalytics(props => {
    const {
      getAttributes
    } = useLinkPickerAnalytics();
    const onEvent = useCallback(event => {
      var _event$payload$attrib;
      event.update({
        attributes: {
          ...getAttributes(),
          ...((_event$payload$attrib = event.payload.attributes) !== null && _event$payload$attrib !== void 0 ? _event$payload$attrib : {})
        }
      });
    }, [getAttributes]);
    return /*#__PURE__*/React.createElement(AnalyticsListener, {
      channel: ANALYTICS_CHANNEL,
      onEvent: onEvent
    }, /*#__PURE__*/React.createElement(WrappedComponent, props));
  });
}