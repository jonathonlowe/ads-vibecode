export class CancellationError extends Error {}
export const cancellable = promise => {
  let reject;
  return {
    promise: new Promise((resolve, _reject) => {
      reject = _reject;
      promise.then(resolve, reject);
    }),
    cancel: () => {
      reject(new CancellationError('Promise cancelled'));
    }
  };
};

/**
 * Wraps the resolve with a cancellation wrapper and makes promise + generator plugin resolves more compatible
 * Calling cancel for generator plugin prevents it from yielding any further updates
 */
export const resolvePluginUpdates = (plugin, state) => {
  const updates = plugin.resolve(state);

  // Promise plugin
  if (updates instanceof Promise) {
    const {
      promise,
      cancel
    } = cancellable(updates);
    return {
      cancel,
      next: async () => ({
        value: await promise,
        done: true
      })
    };
  }

  // Generator plugin
  const cancellationCallbacks = [];
  let cancelled = false;
  return {
    cancel: () => {
      cancelled = true;
      cancellationCallbacks.forEach(cb => cb());
    },
    next: () => {
      const {
        promise,
        cancel
      } = cancellable(updates.next());
      if (cancelled) {
        cancel();
      } else {
        cancellationCallbacks.push(cancel);
      }
      return promise;
    }
  };
};