/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment, useCallback, useMemo, useRef } from 'react';
import { useMergeRefs } from 'use-callback-ref';
import { ErrorMessage, Field } from '@atlaskit/form';
import Selectclear from '@atlaskit/icon/core/migration/cross-circle--select-clear';
import { fg } from '@atlaskit/platform-feature-flags';
import { Pressable } from '@atlaskit/primitives/compiled';
import Textfield from '@atlaskit/textfield';
import Tooltip from '@atlaskit/tooltip';
import { ConditionalSpotlightTargetWrapper } from './conditional-spotlight-target-wrapper';
import { isRedoEvent, isUndoEvent } from './utils';
const styles = {
  clearTextButton: "_19itglyw _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _2hwx1b66 _bfhksm61 _s7n4nkob"
};

/**
 * Overriding text input margin top which design system provides as a default spacer
 * but it gets in the way of our layout
 */
const baseFieldStyles = null;
const newFieldStyles = null;
export const testIds = {
  urlError: 'link-error',
  clearUrlButton: 'clear-text'
};
export const TextInput = ({
  name,
  label,
  autoFocus,
  onRedo,
  onUndo,
  onKeyDown,
  onClear,
  clearLabel,
  error,
  spotlightTargetName,
  inputRef: inputRefProp,
  ...restProps
}) => {
  const inputRef = useRef(null);
  const handleRef = useCallback(input => {
    if (input) {
      inputRef.current = input;
      if (autoFocus) {
        // Need this to prevent jumping when we render TextInput inside Portal @see ED-2992
        input.focus({
          preventScroll: true
        });
      }
    }
  }, [autoFocus]);
  let textfieldRef;
  if (fg('jsc_inline_editing_field_refactor')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const refs = useMemo(() => [handleRef, inputRefProp].filter(Boolean), [handleRef, inputRefProp]);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    textfieldRef = useMergeRefs(refs);
  } else {
    textfieldRef = handleRef;
  }
  const handleKeydown = useCallback(e => {
    if (typeof onUndo === 'function' && isUndoEvent(e)) {
      e.preventDefault();
      onUndo();
    } else if (typeof onRedo === 'function' && isRedoEvent(e)) {
      e.preventDefault();
      onRedo();
    }
    if (onKeyDown) {
      onKeyDown(e);
    }
  }, [onUndo, onRedo, onKeyDown]);
  const handleClear = useCallback(e => {
    var _inputRef$current;
    e.preventDefault();
    e.stopPropagation();
    onClear === null || onClear === void 0 ? void 0 : onClear(name);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
  }, [name, onClear]);
  const clearText = restProps.value !== '' && /*#__PURE__*/React.createElement(Tooltip, {
    content: clearLabel
  }, /*#__PURE__*/React.createElement(Pressable, {
    xcss: styles.clearTextButton,
    onClick: handleClear,
    testId: testIds.clearUrlButton
  }, /*#__PURE__*/React.createElement(Selectclear, {
    LEGACY_size: "medium",
    label: clearLabel || '',
    color: "var(--ds-icon-subtle, #626F86)",
    spacing: "spacious"
  })));
  return /*#__PURE__*/React.createElement("div", {
    className: ax(["_7yjtidpf _onzypxbi", fg('platform-linking-visual-refresh-v1') && "_11c81vhk"])
  }, /*#__PURE__*/React.createElement(Field, {
    label: label,
    name: name
  }, ({
    fieldProps
  }) => {
    return /*#__PURE__*/React.createElement(ConditionalSpotlightTargetWrapper, {
      spotlightTargetName: spotlightTargetName
    }, /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Textfield, _extends({}, fieldProps, restProps, {
      onKeyDown: handleKeydown,
      ref: textfieldRef,
      elemAfterInput: clearText,
      isInvalid: !!error
    })), error && /*#__PURE__*/React.createElement(ErrorMessage, {
      testId: testIds.urlError
    }, error)));
  }));
};