/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useMemo, useRef, useState } from 'react';
import { IconButton } from '@atlaskit/button/new';
import ChevronLeftIcon from '@atlaskit/icon/utility/migration/chevron-left';
import ChevronRightIcon from '@atlaskit/icon/utility/migration/chevron-right';
import { N0, N30 } from '@atlaskit/theme/colors';
import { calculateConditionalButtons, createGhost, getTabList, scrollBack, scrollForward } from './scrolling-tabs';
function isTouchDevice() {
  return 'ontouchstart' in window ||
  // eslint-disable-next-line compat/compat
  navigator.maxTouchPoints > 0;
}
const initialConditionalButtonsState = {
  back: false,
  forward: false
};
const scrollingContainerStyles = null;
const containerStyles = null;
const backButtonStyles = null;
const nextButtonStyles = null;

/* eslint-disable @repo/internal/dom-events/no-unsafe-event-listeners */
export const ScrollingTabList = props => {
  const ref = useRef(null);
  const [conditionalButtons, setConditionalButtons] = useState(initialConditionalButtonsState);
  const ghost = useMemo(() => createGhost(), []);
  const onTabClick = useCallback(e => {
    const target = e.currentTarget;
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'center'
      });
    }
  }, []);
  React.useLayoutEffect(() => {
    const container = ref.current;
    let scrollingContainer;
    let tabs;
    const handleConditionalButtonsChange = () => {
      const buttons = calculateConditionalButtons(scrollingContainer, isTouchDevice());
      setConditionalButtons(buttons);
    };
    const observerCallback = mutationList => {
      const tablist = getTabList(ref);
      for (const mutation of mutationList) {
        if (mutation.type === 'childList') {
          const addedNodes = Array.from(mutation.addedNodes);
          const found = addedNodes.find(node => node.getAttribute('role') === 'tab');
          if (found && tablist) {
            ghost.remove();
            const tabs = Array.from(tablist.children);
            tabs.forEach(tab => {
              tab.removeEventListener('click', onTabClick);
              tab.addEventListener('click', onTabClick);
            });
            tablist.appendChild(ghost);
            handleConditionalButtonsChange();
          }
        }
      }
    };
    const observer = new MutationObserver(observerCallback);
    if (container) {
      const tablist = getTabList(ref);
      scrollingContainer = tablist === null || tablist === void 0 ? void 0 : tablist.parentElement;
      observer.observe(container, {
        attributes: false,
        childList: true,
        subtree: true
      });
      if (scrollingContainer instanceof HTMLElement && tablist) {
        tablist.appendChild(ghost);
        tabs = Array.from(tablist.children);
        tabs.forEach(tab => tab.addEventListener('click', onTabClick));
        handleConditionalButtonsChange();
        scrollingContainer.addEventListener('scroll', handleConditionalButtonsChange);
      }
      return () => {
        if (scrollingContainer) {
          // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
          scrollingContainer.removeEventListener('scroll', handleConditionalButtonsChange);
        }
        if (tabs.length) {
          tabs.forEach(tab => tab.removeEventListener('click', onTabClick));
        }
      };
    }
  }, [onTabClick, ghost, ref]);
  const buttonProps = {
    appearance: 'subtle',
    spacing: 'compact'
  };
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    "data-testid": "scrolling-tabs",
    className: ax(["_kqswh2mm _18q9glyw _7hip261p _1fud261p _1dze261p"])
  }, conditionalButtons.back && /*#__PURE__*/React.createElement("div", {
    className: ax(["_kqswstnw _154i1b66 _1pby18h8 _bfhkvuon _1ltvidpf", "back"])
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    "data-test-id": "back",
    onClick: () => scrollBack(ref),
    label: "back",
    icon: ChevronLeftIcon
  }, buttonProps))), /*#__PURE__*/React.createElement("div", {
    className: ax(["_1bh4vqrj _1reo1wug _1dm8q5uf _1fjgglyw _rfx3yh40 _pascidpf _eid3idpf _zr3eidpf _fntnidpf _1kt9b3bt _19woidpf _1cs8stnw _1mp41kw7 _qnecu2gc _oounu2gc _kfgtyh40 _1rushloo _1cicglyw"])
  }, props.children), conditionalButtons.forward && /*#__PURE__*/React.createElement("div", {
    className: ax(["_kqswstnw _154i1b66 _1pby18h8 _bfhkvuon _1xi2idpf"])
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    "data-test-id": "forward",
    onClick: () => scrollForward(ref)
  }, buttonProps, {
    label: "forward",
    icon: ChevronRightIcon
  }))));
};