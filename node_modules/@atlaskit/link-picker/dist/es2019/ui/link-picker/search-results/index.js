/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner/spinner';
import Tabs, { Tab, TabList } from '@atlaskit/tabs';
import { LinkSearchError, testIds as searchErrorTestIds } from './link-search-error';
import { LinkSearchList, testIds as listTestIds } from './link-search-list';
import { ScrollingTabList } from './scrolling-tabs';
import { SearchResultsContainer } from './search-results-container';
import { TrackTabViewed } from './track-tab-viewed';
const styles = {
  tabsWrapper: "_19pkutpp"
};
const spinnerContainerStyles = null;
export const testIds = {
  ...searchErrorTestIds,
  ...listTestIds,
  tabsLoadingIndicator: 'link-picker.tabs-loading-indicator',
  tabList: 'link-picker-tabs',
  tabItem: 'link-picker-tab'
};
export const SearchResults = ({
  tabs,
  activeTab,
  activePlugin,
  isLoadingPlugins,
  isLoadingResults,
  isSubmitting,
  handleTabChange,
  handleSearchListOnChange,
  featureFlags,
  linkSearchListId,
  error,
  queryState,
  items,
  activeIndex,
  selectedIndex,
  handleSelected,
  handleKeyDown,
  adaptiveHeight,
  retry
}) => {
  var _activePlugin$errorFa, _activePlugin$errorFa2;
  const isActivePlugin = !!activePlugin;
  const tabList = /*#__PURE__*/React.createElement(TabList, null, tabs.map(tab => /*#__PURE__*/React.createElement(Tab, {
    key: tab.tabTitle,
    testId: testIds.tabItem
  }, tab.tabTitle)));
  return /*#__PURE__*/React.createElement(SearchResultsContainer, {
    hasTabs: !!tabs.length || isLoadingPlugins,
    adaptiveHeight: adaptiveHeight,
    isLoadingResults: isLoadingResults
  }, isLoadingPlugins && !!queryState && /*#__PURE__*/React.createElement("div", {
    className: ax(["_1tkeys9h _1e0c1txw _4cvr1h6o _1bah1h6o _1wpz1h6o _16jlkb7n"])
  }, /*#__PURE__*/React.createElement(Spinner, {
    testId: testIds.tabsLoadingIndicator,
    interactionName: "link-picker-tabs-loading",
    size: "medium"
  })), !isLoadingPlugins && isActivePlugin && !!queryState && /*#__PURE__*/React.createElement(Fragment, null, tabs.length > 0 && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.tabsWrapper
  }, /*#__PURE__*/React.createElement(Tabs, {
    id: testIds.tabList,
    testId: testIds.tabList,
    selected: activeTab,
    onChange: handleTabChange
  }, featureFlags !== null && featureFlags !== void 0 && featureFlags.scrollingTabs ? /*#__PURE__*/React.createElement(ScrollingTabList, null, tabList) : tabList), /*#__PURE__*/React.createElement(TrackTabViewed, {
    activePlugin: activePlugin
  })), !error && /*#__PURE__*/React.createElement(LinkSearchList, {
    id: linkSearchListId,
    role: "listbox",
    ariaReadOnly: isSubmitting,
    items: items,
    isLoading: isLoadingResults,
    selectedIndex: selectedIndex,
    activeIndex: activeIndex,
    onSelect: handleSelected,
    onChange: handleSearchListOnChange,
    onKeyDown: handleKeyDown,
    hasSearchTerm: !!(queryState !== null && queryState !== void 0 && queryState.query.length),
    activePlugin: activePlugin,
    adaptiveHeight: adaptiveHeight,
    tabPanelId: `${testIds.tabList}-${activeTab}-tab`
  }), error ? (_activePlugin$errorFa = activePlugin === null || activePlugin === void 0 ? void 0 : (_activePlugin$errorFa2 = activePlugin.errorFallback) === null || _activePlugin$errorFa2 === void 0 ? void 0 : _activePlugin$errorFa2.call(activePlugin, error, retry)) !== null && _activePlugin$errorFa !== void 0 ? _activePlugin$errorFa : /*#__PURE__*/React.createElement(LinkSearchError, {
    onRetry: fg('platform-linking-visual-refresh-link-picker') ? retry : undefined
  }) : null));
};