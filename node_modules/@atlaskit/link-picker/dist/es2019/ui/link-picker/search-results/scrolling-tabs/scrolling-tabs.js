const BUTTON_SIZE = 24;
const GUTTER = 48;
const GHOST_WIDTH = 342 - GUTTER - 40;
export const scrollBack = ref => {
  moveTabsScroll(ref, findPrevious);
};
export const scrollForward = ref => {
  moveTabsScroll(ref, findNext);
};
export const calculateConditionalButtons = (container, hideButtons) => {
  const initialState = {
    back: false,
    forward: false
  };
  if (!container || hideButtons) {
    return initialState;
  }
  const maxScrollValue = container.scrollWidth - container.clientWidth;
  return {
    back: container.scrollLeft > 0,
    forward: container.scrollLeft < maxScrollValue - GHOST_WIDTH
  };
};
export const createGhost = () => {
  const ghost = document.createElement('div');
  ghost.setAttribute('id', 'scrolling-tabs-ghost');
  ghost.style.minWidth = `${GHOST_WIDTH}px`;
  ghost.style.pointerEvents = 'none';
  return ghost;
};
const moveTabsScroll = (ref, findFn) => {
  const container = getContainer(ref);
  if (container) {
    const tablist = container.children[0];
    const tabs = Array.from(tablist.children);
    if (tabs.length > 0) {
      const target = findFn(container, tabs);
      if (target) {
        const left = container.scrollLeft + target.getBoundingClientRect().left - container.getBoundingClientRect().left - BUTTON_SIZE;
        scrollTo(container, left);
      }
    }
  }
};
const scrollTo = (container, left) => {
  container.scrollTo({
    left
  });
};
export const getTabList = ref => {
  var _ref$current;
  return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector('[role="tablist"]');
};
export const getContainer = ref => {
  var _getTabList;
  return (_getTabList = getTabList(ref)) === null || _getTabList === void 0 ? void 0 : _getTabList.parentElement;
};
const findPrevious = (container, tabs) => {
  const previousTabs = tabs.filter(tab => {
    const [containerRect, tabRect] = [container.getBoundingClientRect(), tab.getBoundingClientRect()];
    const [containerArea, tabArea] = [containerRect.left + container.scrollLeft - GUTTER, container.scrollLeft + tabRect.left + tabRect.width];
    return containerArea > tabArea;
  });
  if (previousTabs.length < 3) {
    return previousTabs[0];
  }
  return previousTabs[previousTabs.length - 1];
};
const findNext = (container, tabs) => {
  const containerRect = container.getBoundingClientRect();
  return tabs.find(tab => {
    const tabRect = tab.getBoundingClientRect();
    const [containerArea, tabArea] = [container.clientWidth + containerRect.left - GUTTER, tabRect.left + tabRect.width];
    return containerArea < tabArea;
  });
};