import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useMemo } from 'react';
import { AnalyticsContext } from '@atlaskit/analytics-next';
import { MEDIA_CONTEXT } from '@atlaskit/analytics-namespaced-context/MediaAnalyticsContext';
/**
 * HOC for attaching MediaAnalyticsContext to a top-level React Component.
 *
 * Similar than "packages/analytics/analytics-next/src/hocs/withAnalyticsContext.tsx",
 * except that we restrict attributes put in this context using ContextPublicAttributes and ContextPrivateAttributes.
 *
 * As a constraint, the wrapped React Component's props must extend ContextStaticProps.
 *
 * @param {ContextPublicAttributes} attributes public attributes to put in context
 *
 * @see packages/analytics/analytics-next/src/hocs/withAnalyticsContext.tsx
 */
export const withMediaAnalyticsContext = contextPublicAttributes => WrappedComponent => {
  // forwardRef() allows passing React refs to the wrapped component WithMediaAnalyticsContext
  const WithMediaAnalyticsContext = /*#__PURE__*/forwardRef((props, ref) => {
    const {
      featureFlags
    } = props;
    const contextData = useMemo(() => {
      const contextPrivateAttributes = {
        featureFlags
      };
      return {
        ...contextPublicAttributes,
        [MEDIA_CONTEXT]: {
          ...contextPrivateAttributes
        }
      };
    }, [featureFlags]);
    return /*#__PURE__*/React.createElement(AnalyticsContext, {
      data: contextData
    }, /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, {
      ref: ref
    })));
  });
  WithMediaAnalyticsContext.displayName = `WithMediaAnalyticsContext(${
  // @ts-ignore displayName doesn't exist on type
  WrappedComponent.displayName || WrappedComponent.name})`;
  return WithMediaAnalyticsContext;
};