import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { supportedProducts } from './types';
import { getProductKeys } from './productKeys';
import { getGenericFeatureFlag } from './genericFeatureFlag';
export var filterFeatureFlagNames = function filterFeatureFlagNames(flags) {
  var pairs = Object.entries(flags);
  return pairs.filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      _key = _ref2[0],
      value = _ref2[1];
    return !!value;
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
      key = _ref4[0];
    return key;
  });
};

// TODO(MEX-1547): This is temporary solution to just return the launch darkly feature flags for all products.
/**
 * Takes a record of {Media Feature Flag Names â†’ boolean}.
 * Returns the Launch Darkly Keys from all products for each of the flags set as true in the input record.
 * */
export var getFeatureFlagKeysAllProducts = function getFeatureFlagKeysAllProducts() {
  var productKeys = getProductKeys();
  var ldFeatureFlags = [];
  supportedProducts.forEach(function (product) {
    ldFeatureFlags = [].concat(_toConsumableArray(ldFeatureFlags), _toConsumableArray(Object.values(productKeys[product])));
  });
  return ldFeatureFlags.filter(function (flag) {
    return flag !== '';
  });
};

/**
 * defaultMediaFeatureFlags set default values used by the getter function getMediaFeatureFlag
 *
 * *************************************
 * ************* IMPORTANT *************
 * *************************************
 * Only in exceptional cases a FF should be 'true' by default.
 * Making a flag default to 'true' can lead to confusing and unexpected scenarios.
 * If you must set a flag default = true, whenever you remove that flag
 * that change should be released as a MAJOR, because it's a breaking change.
 */
export var defaultMediaFeatureFlags = {
  mediaInline: false
};

/**
 * Public accessor from components to fallback to defaults if flags not passed,
 * otherwise whatever product has set will be returned.
 *
 * To override locally for testing:
 * - `localStorage[flagName] = true` to enable locally,
 * - `delete localStorage[flagName]` to remove.
 *
 * (you will see a warning in console if override used)
 * */
export function getMediaFeatureFlag(flagName, featureFlags) {
  return getGenericFeatureFlag(flagName, defaultMediaFeatureFlags, featureFlags);
}