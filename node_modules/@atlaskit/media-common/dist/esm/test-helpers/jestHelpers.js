import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
/// <reference types="jest" />

export var asMock = function asMock(fn) {
  return fn;
};
export var asMockFunction = function asMockFunction(fn) {
  return fn;
};
export var asMockReturnValue = function asMockReturnValue(fn, returnValue) {
  return asMock(fn).mockReturnValue(returnValue);
};
export var asMockFunctionReturnValue = function asMockFunctionReturnValue(fn, returnValue) {
  return asMockFunction(fn).mockReturnValue(returnValue);
};
export var asMockFunctionResolvedValue = function asMockFunctionResolvedValue(fn, resolveValue) {
  return asMockFunction(fn).mockResolvedValue(resolveValue);
};
export var expectToEqual = function expectToEqual(actual, expected) {
  return expect(actual).toEqual(expected);
};
export var expectConstructorToHaveBeenCalledWith = function expectConstructorToHaveBeenCalledWith(func, expectedArgs) {
  var _expect;
  return (_expect = expect(func)).toHaveBeenCalledWith.apply(_expect, _toConsumableArray(expectedArgs));
};
export var expectFunctionToHaveBeenCalledWith = function expectFunctionToHaveBeenCalledWith(func, expectedArgs) {
  var _expect2;
  return (_expect2 = expect(func)).toHaveBeenCalledWith.apply(_expect2, _toConsumableArray(expectedArgs));
};