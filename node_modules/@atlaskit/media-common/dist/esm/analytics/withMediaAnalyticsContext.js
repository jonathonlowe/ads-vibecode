import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { forwardRef, useMemo } from 'react';
import { AnalyticsContext } from '@atlaskit/analytics-next';
import { MEDIA_CONTEXT } from '@atlaskit/analytics-namespaced-context/MediaAnalyticsContext';
/**
 * HOC for attaching MediaAnalyticsContext to a top-level React Component.
 *
 * Similar than "packages/analytics/analytics-next/src/hocs/withAnalyticsContext.tsx",
 * except that we restrict attributes put in this context using ContextPublicAttributes and ContextPrivateAttributes.
 *
 * As a constraint, the wrapped React Component's props must extend ContextStaticProps.
 *
 * @param {ContextPublicAttributes} attributes public attributes to put in context
 *
 * @see packages/analytics/analytics-next/src/hocs/withAnalyticsContext.tsx
 */
export var withMediaAnalyticsContext = function withMediaAnalyticsContext(contextPublicAttributes) {
  return function (WrappedComponent) {
    // forwardRef() allows passing React refs to the wrapped component WithMediaAnalyticsContext
    var WithMediaAnalyticsContext = /*#__PURE__*/forwardRef(function (props, ref) {
      var featureFlags = props.featureFlags;
      var contextData = useMemo(function () {
        var contextPrivateAttributes = {
          featureFlags: featureFlags
        };
        return _objectSpread(_objectSpread({}, contextPublicAttributes), {}, _defineProperty({}, MEDIA_CONTEXT, _objectSpread({}, contextPrivateAttributes)));
      }, [featureFlags]);
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: contextData
      }, /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, {
        ref: ref
      })));
    });
    WithMediaAnalyticsContext.displayName = "WithMediaAnalyticsContext(".concat(
    // @ts-ignore displayName doesn't exist on type
    WrappedComponent.displayName || WrappedComponent.name, ")");
    return WithMediaAnalyticsContext;
  };
};