"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMediaTypeFromMimeType = void 0;
Object.defineProperty(exports, "isAudioMimeTypeSupportedByBrowser", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByBrowser.isAudioMimeTypeSupportedByBrowser;
  }
});
Object.defineProperty(exports, "isAudioMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isAudioMimeTypeSupportedByServer;
  }
});
Object.defineProperty(exports, "isDocumentMimeTypeSupportedByBrowser", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByBrowser.isDocumentMimeTypeSupportedByBrowser;
  }
});
Object.defineProperty(exports, "isDocumentMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isDocumentMimeTypeSupportedByServer;
  }
});
Object.defineProperty(exports, "isImageMimeTypeSupportedByBrowser", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByBrowser.isImageMimeTypeSupportedByBrowser;
  }
});
Object.defineProperty(exports, "isImageMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isImageMimeTypeSupportedByServer;
  }
});
Object.defineProperty(exports, "isMimeTypeSupportedByBrowser", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByBrowser.isMimeTypeSupportedByBrowser;
  }
});
Object.defineProperty(exports, "isMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isMimeTypeSupportedByServer;
  }
});
Object.defineProperty(exports, "isUnknownMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isUnknownMimeTypeSupportedByServer;
  }
});
Object.defineProperty(exports, "isVideoMimeTypeSupportedByBrowser", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByBrowser.isVideoMimeTypeSupportedByBrowser;
  }
});
Object.defineProperty(exports, "isVideoMimeTypeSupportedByServer", {
  enumerable: true,
  get: function get() {
    return _isMimeTypeSupportedByServer.isVideoMimeTypeSupportedByServer;
  }
});
var _isArchive = require("./isArchive");
var _isMimeTypeSupportedByBrowser = require("./isMimeTypeSupportedByBrowser");
var _isMimeTypeSupportedByServer = require("./isMimeTypeSupportedByServer");
var getMediaTypeFromMimeType = exports.getMediaTypeFromMimeType = function getMediaTypeFromMimeType(mimeType) {
  if ((0, _isArchive.isArchive)(mimeType)) {
    return 'archive';
  }
  if ((0, _isMimeTypeSupportedByBrowser.isImageMimeTypeSupportedByBrowser)(mimeType) || (0, _isMimeTypeSupportedByServer.isImageMimeTypeSupportedByServer)(mimeType)) {
    return 'image';
  }
  if ((0, _isMimeTypeSupportedByBrowser.isDocumentMimeTypeSupportedByBrowser)(mimeType) || (0, _isMimeTypeSupportedByServer.isDocumentMimeTypeSupportedByServer)(mimeType)) {
    return 'doc';
  }
  if ((0, _isMimeTypeSupportedByBrowser.isAudioMimeTypeSupportedByBrowser)(mimeType) || (0, _isMimeTypeSupportedByServer.isAudioMimeTypeSupportedByServer)(mimeType)) {
    return 'audio';
  }
  if ((0, _isMimeTypeSupportedByBrowser.isVideoMimeTypeSupportedByBrowser)(mimeType) || (0, _isMimeTypeSupportedByServer.isVideoMimeTypeSupportedByServer)(mimeType)) {
    return 'video';
  }
  return 'unknown';
};