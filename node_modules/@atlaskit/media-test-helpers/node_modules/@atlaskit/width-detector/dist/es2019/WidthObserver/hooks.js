import React from 'react';
import { browser } from './utils';
export function useInView(options = {}) {
    const ref = React.useRef();
    const observerInstance = React.useRef();
    const [state, setState] = React.useState({
        inView: false,
        entry: undefined,
        target: undefined,
    });
    const { threshold, root, rootMargin } = options;
    const setRef = React.useCallback(node => {
        const { supportsIntersectionObserver } = browser;
        if (!supportsIntersectionObserver) {
            setState({
                inView: true,
                entry: undefined,
                target: node,
            });
            return null;
        }
        observerInstance.current = new IntersectionObserver((entries) => {
            if (entries && entries.length) {
                const intersection = entries[0];
                const { isIntersecting, intersectionRatio } = intersection;
                if (intersectionRatio >= 0) {
                    let inView = intersectionRatio >= (threshold || 0);
                    if (isIntersecting !== undefined) {
                        inView = inView && isIntersecting;
                    }
                    setState({
                        inView,
                        entry: intersection,
                        target: node,
                    });
                }
            }
        }, {
            threshold,
            root,
            rootMargin,
        });
        if (ref.current) {
            observerInstance.current.unobserve(ref.current);
        }
        if (node) {
            observerInstance.current.observe(node);
        }
        // Store a reference to the node
        ref.current = node;
    }, [threshold, root, rootMargin]);
    /**
     * Unsubscribe IntersectionObserver before unmounting a component.
     */
    React.useEffect(() => {
        return () => {
            if (observerInstance.current && ref.current) {
                observerInstance.current.unobserve(ref.current);
            }
        };
    }, []);
    return [setRef, state.inView, state.target, state.entry];
}
//# sourceMappingURL=hooks.js.map