import React, { useRef, useState, useEffect } from 'react';
import { useInView } from './hooks';
import { browser, getIEVersion } from './utils';
const emptySubscribe = () => () => { };
const { Consumer: IframeWrapperConsumer, Provider: IframeWrapperProvider, } = React.createContext({
    subscribe: null,
});
function ObjectIframe(props) {
    const { onResize } = props;
    const ref = useRef(null);
    useEffect(() => {
        if (!ref || !ref.current) {
            return;
        }
        const { current: iframe } = ref;
        if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
            return;
        }
        const iframeWindow = iframe.contentDocument.defaultView;
        iframeWindow.addEventListener('resize', onResize);
        return () => {
            iframeWindow.removeEventListener('resize', onResize);
        };
    }, [ref, onResize]);
    return (React.createElement("object", { ref: ref, data: "about:blank", type: "text/html", style: { position: 'absolute', height: '0', width: '100%' }, "aria-hidden": true, tabIndex: -1 }));
}
/**
 * IE11 requires IFrame with src to avoid Access Denied error.
 *
 * https://stackoverflow.com/questions/1886547/access-is-denied-javascript-error-when-trying-to-access-the-document-object-of
 **/
function NativeIframe(props) {
    const { onResize } = props;
    const ref = useRef(null);
    const onLoad = React.useCallback(() => {
        if (!ref || !ref.current) {
            return;
        }
        const { current: iframe } = ref;
        if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
            return;
        }
        const iframeWindow = iframe.contentDocument.defaultView;
        iframeWindow.addEventListener('resize', onResize);
    }, [onResize]);
    return (React.createElement("iframe", { ref: ref, src: "about:blank", frameBorder: "0", style: { position: 'absolute', height: '0', width: '100%' }, onLoad: onLoad, "aria-hidden": true, tabIndex: -1 }));
}
function Iframe(props) {
    if (getIEVersion() === 11) {
        return React.createElement(NativeIframe, Object.assign({}, props));
    }
    return React.createElement(ObjectIframe, Object.assign({}, props));
}
const IframeWrapper = ({ children }) => (React.createElement("div", { style: {
        position: 'absolute',
        height: '0',
        width: '100%',
    } }, children));
const emptySubscription = () => () => { };
const SubscribeIframeResize = React.memo(({ subscribe, setWidth }) => {
    const ref = React.useRef(null);
    useEffect(() => {
        if (ref && ref.current) {
            const { current: target } = ref;
            const width = target.offsetWidth;
            setWidth(width);
        }
        const unsubscribe = subscribe(() => {
            if (ref && ref.current) {
                const { current: target } = ref;
                const width = target.offsetWidth;
                setWidth(width);
            }
        });
        return unsubscribe;
    }, [ref, subscribe, setWidth]);
    return React.createElement("div", { ref: ref });
});
const SubscribeIframeResizeWhenVisible = React.memo(({ subscribe, setWidth }) => {
    const [inViewRef, inView, target, entry] = useInView({
        /* Optional options */
        threshold: 0,
    });
    useEffect(() => {
        if (inView && entry && entry.target instanceof HTMLElement) {
            const { boundingClientRect } = entry;
            const width = boundingClientRect.width;
            setWidth(width);
        }
        const unsubscribe = subscribe(() => {
            // The first time the component is mounted will need to
            // get this information from the HTMLElement
            if (inView && target instanceof HTMLElement) {
                const width = target.offsetWidth;
                setWidth(width);
            }
        });
        return unsubscribe;
    }, [inView, entry, setWidth, subscribe, target]);
    return (React.createElement("div", { style: {
            position: 'absolute',
            height: '0',
            width: '100%',
        }, ref: inViewRef }));
});
function getSubscribeIframe(useIntersectionObserver) {
    if (useIntersectionObserver) {
        return SubscribeIframeResizeWhenVisible;
    }
    return SubscribeIframeResize;
}
/**
 * This component is responsible for creating an iframe using HTMLObjectElement.
 * It will provide a context object with a `subscribe` function as a callback,
 * so other components can subscribe to know when the iframe was resized.
 */
const IframeWidthObserverFallback = React.memo((props) => {
    const [listeners] = useState(new Map());
    const subscribe = React.useCallback(cb => {
        listeners.set(cb, null);
        return () => {
            listeners.delete(cb);
        };
    }, [listeners]);
    const onResize = React.useCallback(() => {
        listeners.forEach((_, cb) => cb());
    }, [listeners]);
    return (React.createElement(React.Fragment, null,
        React.createElement(IframeWrapper, null,
            React.createElement(Iframe, { onResize: onResize })),
        React.createElement(IframeWrapperProvider, { value: { subscribe } }, props.children)));
});
const NonIframeWidthObserverFallback = React.memo((props) => {
    return (React.createElement(IframeWrapperProvider, { value: { subscribe: emptySubscribe } }, props.children));
});
export { IframeWrapperConsumer, IframeWrapperProvider, IframeWidthObserverFallback, SubscribeIframeResizeWhenVisible, SubscribeIframeResize, };
export const IframeWidthObserver = React.memo(({ setWidth, useIntersectionObserver }) => {
    const Component = getSubscribeIframe(useIntersectionObserver);
    return (React.createElement(IframeWrapperConsumer, null, ({ subscribe }) => (React.createElement(Component, { setWidth: setWidth, subscribe: subscribe || emptySubscription }))));
});
export const IframeWidthObserverFallbackWrapper = React.memo((props) => {
    const { supportsResizeObserver, supportsIntersectionObserver } = browser;
    if (supportsResizeObserver && supportsIntersectionObserver) {
        return (React.createElement(NonIframeWidthObserverFallback, null, props.children));
    }
    return (React.createElement(IframeWidthObserverFallback, null, props.children));
});
//# sourceMappingURL=iframe-fallbacks.js.map