"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var utils_1 = require("./utils");
var iframe_fallbacks_1 = require("./iframe-fallbacks");
exports.IframeWidthObserverFallbackWrapper = iframe_fallbacks_1.IframeWidthObserverFallbackWrapper;
exports.IframeWrapperConsumer = iframe_fallbacks_1.IframeWrapperConsumer;
var width_detector_observer_1 = require("./width-detector-observer");
/**
 * This component will observer the current width,
 * and it will call the `setWidth` callback every time this changes.
 *
 * The only required is the parent HTMLElement should have `position: relative`
 * because this is an absolute element.
 *
 *
 * FALLBACKS:
 * This component relies on ResizerObserver API, but some browsers do not support it,
 * for example, IE11 and Edge 18.
 *
 * For those browsers, we are using an iframe to listening when a component was resized.
 * However, we should not create an iframe for every call, so you need to use the `IframeWidthObserverFallbackWrapper`
 * as parent for all `WidthObserver`.
 *
 * This Wrapper will not create a iframe when the browser support ResizeObserverAPI.
 * ```
 *  <IframeWidthObserverFallbackWrapper>
 *    <BigComponent>
 *      <div>
 *        <WidthObserver />
 *      <div>
 *
 *      {anyArrayofElements.map(elem => {
 *         return (
 *           <div>
 *             <WidthObserver />
 *           </div>
 *         );
 *      }))}
 *    </BigComponent>
 *  </IframeWidthObserverFallbackWrapper>
 * ```
 */
exports.WidthObserver = react_1.default.memo(function (props) {
    var supportsResizeObserver = utils_1.browser.supportsResizeObserver, supportsIntersectionObserver = utils_1.browser.supportsIntersectionObserver;
    if (!supportsResizeObserver) {
        return (react_1.default.createElement(iframe_fallbacks_1.IframeWidthObserver, { setWidth: props.setWidth, useIntersectionObserver: supportsIntersectionObserver }));
    }
    return (react_1.default.createElement(width_detector_observer_1.WidthDetectorObserver, { setWidth: props.setWidth, offscreen: props.offscreen }));
});
//# sourceMappingURL=index.js.map