"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_dom_1 = tslib_1.__importDefault(require("react-dom"));
var analytics_next_1 = require("@atlaskit/analytics-next");
var download_1 = tslib_1.__importDefault(require("@atlaskit/icon/glyph/download"));
var media_client_1 = require("@atlaskit/media-client");
var media_viewer_1 = require("@atlaskit/media-viewer");
var react_intl_1 = require("react-intl");
var cardView_1 = require("../cardView");
var lazyContent_1 = require("../../utils/lazyContent");
var getDataURIDimension_1 = require("../../utils/getDataURIDimension");
var getFilePreviewFromFileState_1 = require("../../utils/getFilePreviewFromFileState");
var metadata_1 = require("../../utils/metadata");
var dimensionComparer_1 = require("../../utils/dimensionComparer");
var getCardStatus_1 = require("./getCardStatus");
var inlinePlayer_1 = require("../inlinePlayer");
var analytics_1 = require("../../utils/analytics");
var analytics_namespaced_context_1 = require("@atlaskit/analytics-namespaced-context");
var CardBase = /** @class */ (function (_super) {
    tslib_1.__extends(CardBase, _super);
    function CardBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasBeenMounted = false;
        _this.lastAction = undefined;
        _this.lastErrorState = {};
        _this.cardRef = react_1.default.createRef();
        _this.state = {
            status: 'loading',
            isCardVisible: !_this.props.isLazy,
            previewOrientation: 1,
            isPlayingFile: false,
        };
        // we add a listener for each of the cards on the page
        // and then check if the triggered listener is from the card
        // that contains a div in current window.getSelection()
        // won't work in IE11
        _this.onCopyListener = function () {
            if (typeof window.getSelection === 'function') {
                var selection = window.getSelection();
                if (_this.cardRef.current &&
                    _this.cardRef.current.divRef.current instanceof Node &&
                    selection &&
                    selection.containsNode &&
                    selection.containsNode(_this.cardRef.current.divRef.current, true)) {
                    _this.fireFileCopiedAnalytics();
                }
            }
        };
        _this.shouldRefetchImage = function (current, next) {
            if (!current || !next) {
                return false;
            }
            return dimensionComparer_1.isBigger(current, next);
        };
        _this.releaseStateDataURI = function () {
            var identifier = _this.props.identifier;
            var dataURI = _this.state.dataURI;
            // we don't want to release external previews, since it might be reused later on
            if (dataURI && identifier.mediaItemType !== 'external-image') {
                URL.revokeObjectURL(dataURI);
            }
        };
        _this.shouldFireLoadingStatusAnalyticsEvent = function (action, errorState) {
            var previousFailReason = _this.lastErrorState && _this.lastErrorState.failReason;
            var previousErrorMessage = _this.lastErrorState && _this.lastErrorState.error;
            var isDifferentErrorState = errorState.failReason !== previousFailReason ||
                errorState.error !== previousErrorMessage;
            var isDifferentAction = action !== _this.lastAction;
            return isDifferentAction || isDifferentErrorState;
        };
        _this.fireLoadingStatusAnalyticsEvent = function (_a) {
            var resolvedId = _a.resolvedId, status = _a.status, metadata = _a.metadata, error = _a.error;
            var createAnalyticsEvent = _this.props.createAnalyticsEvent;
            var previewable = analytics_1.fileIsPreviewable(metadata);
            var hasMinimalData = analytics_1.hasFilenameAndFilesize(metadata);
            var action = analytics_1.getAnalyticsStatus(previewable, hasMinimalData, status);
            var errorState = analytics_1.getAnalyticsErrorStateAttributes(previewable, hasMinimalData, _this.lastFileState, error);
            if (action &&
                _this.shouldFireLoadingStatusAnalyticsEvent(action, errorState)) {
                _this.lastAction = action;
                _this.lastErrorState = errorState;
                var fileAttributes = analytics_1.getFileAttributes(metadata, _this.lastFileState && _this.lastFileState.status);
                analytics_1.createAndFireCustomMediaEvent(analytics_1.getLoadingStatusAnalyticsPayload(action, resolvedId, fileAttributes, errorState), createAnalyticsEvent);
            }
        };
        _this.fireFileCopiedAnalytics = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, createAnalyticsEvent, identifier, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.props, createAnalyticsEvent = _a.createAnalyticsEvent, identifier = _a.identifier;
                        _b = analytics_1.createAndFireCustomMediaEvent;
                        return [4 /*yield*/, analytics_1.getCopiedFileAnalyticsPayload(identifier)];
                    case 1:
                        _b.apply(void 0, [_c.sent(),
                            createAnalyticsEvent]);
                        return [2 /*return*/];
                }
            });
        }); };
        _this.safeSetState = function (state) {
            if (_this.hasBeenMounted) {
                _this.setState(state);
            }
        };
        _this.unsubscribe = function () {
            if (_this.subscription) {
                _this.subscription.unsubscribe();
            }
            if (_this.hasBeenMounted) {
                _this.setState({ dataURI: undefined });
            }
            _this.lastAction = undefined;
            _this.lastErrorState = {};
        };
        // This method is called when card fails and user press 'Retry'
        _this.onRetry = function () {
            _this.lastAction = undefined;
            _this.lastErrorState = {};
            _this.fireCardCommencedAnalytics();
            _this.updateStateForIdentifier();
        };
        _this.onCardViewClick = function (event, analyticsEvent) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, identifier, useInlinePlayer, shouldOpenMediaViewer, metadata, isVideo, mediaViewerSelectedItem, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.props, identifier = _a.identifier, useInlinePlayer = _a.useInlinePlayer, shouldOpenMediaViewer = _a.shouldOpenMediaViewer;
                        metadata = this.state.metadata;
                        this.onClick(event, analyticsEvent);
                        if (!metadata) {
                            return [2 /*return*/];
                        }
                        isVideo = metadata && metadata.mediaType === 'video';
                        if (!(useInlinePlayer && isVideo)) return [3 /*break*/, 1];
                        this.setState({
                            isPlayingFile: true,
                        });
                        return [3 /*break*/, 5];
                    case 1:
                        if (!shouldOpenMediaViewer) return [3 /*break*/, 5];
                        mediaViewerSelectedItem = void 0;
                        if (!media_client_1.isFileIdentifier(identifier)) return [3 /*break*/, 3];
                        _b = {};
                        return [4 /*yield*/, identifier.id];
                    case 2:
                        mediaViewerSelectedItem = (_b.id = _c.sent(),
                            _b.mediaItemType = 'file',
                            _b.collectionName = identifier.collectionName,
                            _b.occurrenceKey = identifier.occurrenceKey,
                            _b);
                        return [3 /*break*/, 4];
                    case 3:
                        mediaViewerSelectedItem = {
                            mediaItemType: 'external-image',
                            dataURI: identifier.dataURI,
                            name: identifier.name,
                        };
                        _c.label = 4;
                    case 4:
                        this.setState({
                            mediaViewerSelectedItem: mediaViewerSelectedItem,
                        });
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        _this.onInlinePlayerError = function () {
            _this.setState({
                isPlayingFile: false,
            });
        };
        _this.renderInlinePlayer = function () {
            var _a = _this.props, identifier = _a.identifier, mediaClient = _a.mediaClient, dimensions = _a.dimensions, selected = _a.selected, testId = _a.testId;
            return (react_1.default.createElement(inlinePlayer_1.InlinePlayer, { mediaClient: mediaClient, dimensions: dimensions || {}, identifier: identifier, onError: _this.onInlinePlayerError, onClick: _this.onClick, selected: selected, ref: _this.cardRef, testId: testId }));
        };
        _this.onMediaViewerClose = function () {
            _this.setState({
                mediaViewerSelectedItem: undefined,
            });
        };
        _this.onDisplayImage = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var identifier, payloadPart, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        identifier = this.props.identifier;
                        if (!media_client_1.isFileIdentifier(identifier)) return [3 /*break*/, 2];
                        _a = {};
                        return [4 /*yield*/, identifier.id];
                    case 1:
                        payloadPart = (_a.fileId = _b.sent(),
                            _a.isUserCollection = identifier.collectionName === media_client_1.RECENTS_COLLECTION,
                            _a);
                        return [3 /*break*/, 3];
                    case 2:
                        payloadPart = {
                            fileId: identifier.dataURI,
                            isUserCollection: false,
                        };
                        _b.label = 3;
                    case 3:
                        media_client_1.globalMediaEventEmitter.emit('media-viewed', tslib_1.__assign({ viewingLevel: 'minimal' }, payloadPart));
                        return [2 /*return*/];
                }
            });
        }); };
        _this.renderMediaViewer = function () {
            var mediaViewerSelectedItem = _this.state.mediaViewerSelectedItem;
            var _a = _this.props, mediaClient = _a.mediaClient, identifier = _a.identifier, mediaViewerDataSource = _a.mediaViewerDataSource, contextId = _a.contextId;
            if (!mediaViewerSelectedItem) {
                return;
            }
            var collectionName = media_client_1.isFileIdentifier(identifier)
                ? identifier.collectionName || ''
                : '';
            var dataSource = mediaViewerDataSource || {
                list: [],
            };
            return react_dom_1.default.createPortal(react_1.default.createElement(media_viewer_1.MediaViewer, { collectionName: collectionName, dataSource: dataSource, mediaClientConfig: mediaClient.config, selectedItem: mediaViewerSelectedItem, onClose: _this.onMediaViewerClose, contextId: contextId }), document.body);
        };
        _this.renderCard = function () {
            var _a = _this.props, isLazy = _a.isLazy, appearance = _a.appearance, resizeMode = _a.resizeMode, dimensions = _a.dimensions, selectable = _a.selectable, selected = _a.selected, disableOverlay = _a.disableOverlay, alt = _a.alt, testId = _a.testId;
            var _b = _this.state, progress = _b.progress, metadata = _b.metadata, dataURI = _b.dataURI, previewOrientation = _b.previewOrientation;
            var _c = _this, onRetry = _c.onRetry, onCardViewClick = _c.onCardViewClick, onDisplayImage = _c.onDisplayImage, actions = _c.actions, onMouseEnter = _c.onMouseEnter;
            var status = getCardStatus_1.getCardStatus(_this.state, _this.props);
            var card = (react_1.default.createElement(cardView_1.CardView, { status: status, metadata: metadata, dataURI: dataURI, alt: alt, appearance: appearance, resizeMode: resizeMode, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected, onClick: onCardViewClick, onMouseEnter: onMouseEnter, disableOverlay: disableOverlay, progress: progress, onRetry: onRetry, onDisplayImage: onDisplayImage, previewOrientation: previewOrientation, ref: _this.cardRef, testId: testId }));
            return isLazy ? (react_1.default.createElement(lazyContent_1.LazyContent, { placeholder: card, onRender: _this.onCardInViewport }, card)) : (card);
        };
        _this.onCardInViewport = function () {
            _this.setState({ isCardVisible: true });
        };
        _this.onClick = function (event, analyticsEvent) {
            var onClick = _this.props.onClick;
            var metadata = _this.state.metadata;
            if (onClick) {
                var cardEvent = {
                    event: event,
                    mediaItemDetails: metadata,
                };
                onClick(cardEvent, analyticsEvent);
            }
        };
        _this.onMouseEnter = function (event) {
            var onMouseEnter = _this.props.onMouseEnter;
            var metadata = _this.state.metadata;
            if (onMouseEnter) {
                var cardEvent = {
                    event: event,
                    mediaItemDetails: metadata,
                };
                onMouseEnter(cardEvent);
            }
        };
        return _this;
    }
    CardBase.prototype.componentDidMount = function () {
        this.hasBeenMounted = true;
        this.fireCardCommencedAnalytics();
        this.updateStateForIdentifier();
        document.addEventListener('copy', this.onCopyListener);
    };
    CardBase.prototype.componentDidUpdate = function (prevProps, prevState) {
        var prevMediaClient = prevProps.mediaClient, prevIdentifier = prevProps.identifier, prevDimensions = prevProps.dimensions;
        var prevIsCardVisible = prevState.isCardVisible;
        var _a = this.props, mediaClient = _a.mediaClient, identifier = _a.identifier, dimensions = _a.dimensions;
        var isCardVisible = this.state.isCardVisible;
        var isDifferent = media_client_1.isDifferentIdentifier(prevIdentifier, identifier);
        if ((prevIsCardVisible !== isCardVisible && isCardVisible) ||
            prevMediaClient !== mediaClient ||
            isDifferent ||
            this.shouldRefetchImage(prevDimensions, dimensions)) {
            this.fireCardCommencedAnalytics();
            this.updateStateForIdentifier();
        }
    };
    CardBase.prototype.componentWillUnmount = function () {
        this.hasBeenMounted = false;
        this.unsubscribe();
        this.releaseStateDataURI();
        document.removeEventListener('copy', this.onCopyListener);
    };
    CardBase.prototype.getResolvedId = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var identifier;
            return tslib_1.__generator(this, function (_a) {
                identifier = this.props.identifier;
                if (identifier.mediaItemType === 'external-image') {
                    return [2 /*return*/, identifier.mediaItemType];
                }
                else {
                    return [2 /*return*/, identifier.id];
                }
                return [2 /*return*/];
            });
        });
    };
    CardBase.prototype.updateStateForIdentifier = function () {
        var _a = this.props, mediaClient = _a.mediaClient, identifier = _a.identifier;
        var isCardVisible = this.state.isCardVisible;
        if (!isCardVisible) {
            return;
        }
        if (identifier.mediaItemType === 'file') {
            this.unsubscribe();
            this.subscribeInternalFile(identifier, mediaClient);
        }
    };
    CardBase.prototype.getDataURIOriginalDimensions = function () {
        var _a = this.props, appearance = _a.appearance, dimensions = _a.dimensions;
        var options = {
            appearance: appearance,
            dimensions: dimensions,
            component: this,
        };
        var width = getDataURIDimension_1.getDataURIDimension('width', options);
        var height = getDataURIDimension_1.getDataURIDimension('height', options);
        return {
            width: width,
            height: height,
        };
    };
    CardBase.prototype.addContextToDataURI = function (dataURI, fileId, metadata, dimensions, collectionName) {
        var _a = this.props, contextId = _a.contextId, alt = _a.alt;
        if (!contextId) {
            return dataURI;
        }
        var _b = dimensions || this.getDataURIOriginalDimensions(), width = _b.width, height = _b.height;
        return media_client_1.addFileAttrsToUrl(dataURI, {
            id: fileId,
            collection: collectionName,
            contextId: contextId,
            mimeType: metadata.mimeType,
            name: metadata.name,
            size: metadata.size,
            width: width,
            height: height,
            alt: alt,
        });
    };
    CardBase.prototype.getObjectUrlFromBackendImageBlob = function (mediaClient, resolvedId, _a, collectionName) {
        var width = _a.width, height = _a.height;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var resizeMode, mode, blob, e_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resizeMode = this.props.resizeMode;
                        mode = resizeMode === 'stretchy-fit' ? 'full-fit' : resizeMode;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, mediaClient.getImage(resolvedId, {
                                collection: collectionName,
                                mode: mode,
                                height: height,
                                width: width,
                                allowAnimated: true,
                            })];
                    case 2:
                        blob = _b.sent();
                        return [2 /*return*/, URL.createObjectURL(blob)];
                    case 3:
                        e_1 = _b.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CardBase.prototype.subscribeInternalFile = function (identifier, mediaClient) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var collectionName, occurrenceKey, resolvedId;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        collectionName = identifier.collectionName, occurrenceKey = identifier.occurrenceKey;
                        return [4 /*yield*/, identifier.id];
                    case 1:
                        resolvedId = _a.sent();
                        this.subscription = mediaClient.file
                            .getFileState(resolvedId, { collectionName: collectionName, occurrenceKey: occurrenceKey })
                            .subscribe({
                            next: function (fileState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var dataURI, thisCardStatusUpdateTimestamp, metadata, shouldFetchRemotePreview, _a, src, _b, orientation_1, originalDimensions, status, progress;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            dataURI = this.state.dataURI;
                                            this.lastFileState = fileState;
                                            thisCardStatusUpdateTimestamp = (performance || Date).now();
                                            metadata = metadata_1.extendMetadata(fileState, this.state.metadata);
                                            this.safeSetState({ metadata: metadata });
                                            shouldFetchRemotePreview = media_client_1.isImageRepresentationReady(fileState) &&
                                                metadata.mediaType &&
                                                media_client_1.isPreviewableType(metadata.mediaType);
                                            if (!!dataURI) return [3 /*break*/, 5];
                                            return [4 /*yield*/, getFilePreviewFromFileState_1.getFilePreviewFromFileState(fileState)];
                                        case 1:
                                            _a = _c.sent(), src = _a.src, _b = _a.orientation, orientation_1 = _b === void 0 ? 1 : _b;
                                            originalDimensions = this.props.originalDimensions;
                                            if (!src) return [3 /*break*/, 2];
                                            dataURI = src;
                                            this.safeSetState({
                                                previewOrientation: orientation_1,
                                            });
                                            return [3 /*break*/, 4];
                                        case 2:
                                            if (!shouldFetchRemotePreview) return [3 /*break*/, 4];
                                            originalDimensions =
                                                originalDimensions || this.getDataURIOriginalDimensions();
                                            return [4 /*yield*/, this.getObjectUrlFromBackendImageBlob(mediaClient, resolvedId, originalDimensions, collectionName)];
                                        case 3:
                                            dataURI = _c.sent();
                                            _c.label = 4;
                                        case 4:
                                            if (dataURI) {
                                                // In case we've retrieved dataURI using one of the two methods above,
                                                // we want to embed some meta context into this URL for Copy/Paste to work.
                                                dataURI = this.addContextToDataURI(dataURI, resolvedId, metadata, originalDimensions, collectionName);
                                                // Finally we store new dataURI into state
                                                this.releaseStateDataURI();
                                                this.safeSetState({
                                                    dataURI: dataURI,
                                                });
                                            }
                                            _c.label = 5;
                                        case 5:
                                            status = getCardStatus_1.getCardStatusFromFileState(fileState, dataURI);
                                            this.fireLoadingStatusAnalyticsEvent({
                                                resolvedId: resolvedId,
                                                status: status,
                                                metadata: metadata,
                                            });
                                            if (!this.lastCardStatusUpdateTimestamp ||
                                                this.lastCardStatusUpdateTimestamp <= thisCardStatusUpdateTimestamp) {
                                                progress = getCardStatus_1.getCardProgressFromFileState(fileState, dataURI);
                                                // These status and progress must not override values representing more recent FileState
                                                /* next() start        some await() delay in next()        status & progress update
                                                 * -------                    ------------------           ------------------------
                                                 *   |----[1]FileState:uploading------>|                                 |
                                                 *   |                                 |                                 |
                                                 *   |----[2]FileState:uploading------>|                                 |
                                                 *   |                                 |                                 |
                                                 *   |                                 |----[2]FileState:uploading------>| Update status to `uploading`
                                                 *   |----[3]FileState:processing----->|                                 |
                                                 *   |                                 |----[3]FileState:processing----->| Update status to `complete`
                                                 *   |                                 |                                 |
                                                 *   |                                 |----[1]FileState:uploading------>| We do not want to update status to `uploading` again!
                                                 *
                                                 */
                                                this.safeSetState({
                                                    status: status,
                                                    progress: progress,
                                                });
                                                this.lastCardStatusUpdateTimestamp = thisCardStatusUpdateTimestamp;
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); },
                            error: function (error) {
                                _this.fireLoadingStatusAnalyticsEvent({
                                    resolvedId: resolvedId,
                                    status: 'error',
                                    error: error,
                                });
                                _this.safeSetState({ error: error, status: 'error' });
                            },
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    CardBase.prototype.fireCardCommencedAnalytics = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var createAnalyticsEvent, isCardVisible, id;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        createAnalyticsEvent = this.props.createAnalyticsEvent;
                        isCardVisible = this.state.isCardVisible;
                        if (!isCardVisible) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.getResolvedId()];
                    case 1:
                        id = _a.sent();
                        analytics_1.createAndFireCustomMediaEvent(analytics_1.getMediaCardCommencedAnalyticsPayload(id), createAnalyticsEvent);
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(CardBase.prototype, "actions", {
        get: function () {
            var _this = this;
            var _a = this.props, _b = _a.actions, actions = _b === void 0 ? [] : _b, identifier = _a.identifier;
            var _c = this.state, status = _c.status, metadata = _c.metadata;
            if (media_client_1.isFileIdentifier(identifier) && status === 'failed-processing') {
                var downloadAction = {
                    label: 'Download',
                    icon: react_1.default.createElement(download_1.default, { label: "Download" }),
                    handler: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var _a, _b;
                        return tslib_1.__generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _b = (_a = this.props.mediaClient.file).downloadBinary;
                                    return [4 /*yield*/, identifier.id];
                                case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(),
                                        metadata.name,
                                        identifier.collectionName])];
                            }
                        });
                    }); },
                };
                return tslib_1.__spread([downloadAction], actions);
            }
            else {
                return actions;
            }
        },
        enumerable: true,
        configurable: true
    });
    CardBase.prototype.renderContent = function () {
        var _a = this.state, isPlayingFile = _a.isPlayingFile, mediaViewerSelectedItem = _a.mediaViewerSelectedItem;
        var innerContent = isPlayingFile
            ? this.renderInlinePlayer()
            : this.renderCard();
        return this.context.intl ? (innerContent) : (react_1.default.createElement(react_intl_1.IntlProvider, { locale: "en" },
            react_1.default.createElement(react_1.default.Fragment, null,
                innerContent,
                mediaViewerSelectedItem ? this.renderMediaViewer() : null)));
    };
    CardBase.prototype.render = function () {
        var metadata = this.state.metadata;
        return (react_1.default.createElement(analytics_namespaced_context_1.MediaAnalyticsContext, { data: analytics_1.getMediaCardAnalyticsContext(metadata, this.lastFileState) }, this.renderContent()));
    };
    CardBase.defaultProps = {
        appearance: 'auto',
        resizeMode: 'crop',
        isLazy: true,
        disableOverlay: false,
    };
    CardBase.getDerivedStateFromProps = function (props) {
        var identifier = props.identifier;
        if (identifier.mediaItemType === 'external-image') {
            var dataURI = identifier.dataURI, name_1 = identifier.name, mediaItemType = identifier.mediaItemType;
            return {
                status: 'complete',
                dataURI: dataURI,
                metadata: {
                    id: mediaItemType,
                    name: name_1 || dataURI,
                    mediaType: 'image',
                },
            };
        }
        return null;
    };
    return CardBase;
}(react_1.Component));
exports.CardBase = CardBase;
exports.Card = analytics_next_1.withAnalyticsContext(analytics_1.getBaseAnalyticsContext())(analytics_next_1.withAnalyticsEvents()(CardBase));
//# sourceMappingURL=index.js.map