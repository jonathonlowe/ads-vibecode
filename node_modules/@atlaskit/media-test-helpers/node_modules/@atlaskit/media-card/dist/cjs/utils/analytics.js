"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var media_client_1 = require("@atlaskit/media-client");
var version_json_1 = require("../version.json");
var analytics_next_1 = require("@atlaskit/analytics-next");
var media_card_analytics_error_boundary_1 = require("../root/media-card-analytics-error-boundary");
function getBaseAnalyticsContext(componentName) {
    if (componentName === void 0) { componentName = 'mediaCard'; }
    /*
      This Context provides data needed to build packageHierarchy in Atlaskit Analytics Listener and Media Analytics Listener
    */
    return {
        packageVersion: version_json_1.version,
        packageName: version_json_1.name,
        componentName: componentName,
        component: componentName,
    };
}
exports.getBaseAnalyticsContext = getBaseAnalyticsContext;
exports.getFileAttributes = function (metadata, fileStatus) { return ({
    fileSource: 'mediaCard',
    fileMediatype: metadata && metadata.mediaType,
    fileMimetype: metadata && metadata.mimeType,
    fileId: metadata && metadata.id,
    fileSize: metadata && metadata.size,
    fileStatus: fileStatus,
}); };
function getMediaCardAnalyticsContext(metadata, fileStatus) {
    return {
        fileAttributes: exports.getFileAttributes(metadata, fileStatus && fileStatus.status),
    };
}
exports.getMediaCardAnalyticsContext = getMediaCardAnalyticsContext;
function createAndFireCustomMediaEvent(payload, createAnalyticsEvent) {
    if (createAnalyticsEvent) {
        var event_1 = createAnalyticsEvent(payload);
        event_1.fire(media_card_analytics_error_boundary_1.ANALYTICS_MEDIA_CHANNEL);
    }
}
exports.createAndFireCustomMediaEvent = createAndFireCustomMediaEvent;
exports.createAndFireMediaEvent = function (payload) {
    return analytics_next_1.createAndFireEvent(media_card_analytics_error_boundary_1.ANALYTICS_MEDIA_CHANNEL)(payload);
};
exports.getAnalyticsStatusFromCardStatus = function (cardStatus) {
    switch (cardStatus) {
        case 'error':
        case 'failed-processing':
            return 'failed';
        default:
            return;
    }
};
exports.getAnalyticsErrorStateAttributes = function (previewable, hasMinimalData, fileState, error) {
    var unknownError = 'unknown error';
    var errorMessage = error instanceof Error ? error.message : error;
    var errorMessageInFileState = fileState && 'message' in fileState && fileState.message;
    if (!fileState && !errorMessage) {
        return {};
    }
    if (!fileState) {
        return {
            failReason: 'media-client-error',
            error: errorMessage,
        };
    }
    if (!previewable) {
        if (hasMinimalData) {
            return {};
        }
        if (!errorMessageInFileState) {
            return {
                failReason: 'file-status-error',
                error: 'Does not have minimal metadata (filename and filesize) OR metadata/media-type is undefined',
            };
        }
    }
    if (fileState && ['error', 'failed-processing'].includes(fileState.status)) {
        return {
            failReason: 'file-status-error',
            error: errorMessageInFileState || unknownError,
        };
    }
    return {};
};
exports.getCopiedFileAnalyticsPayload = function (identifier) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var _a, _b;
    return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = {
                    eventType: 'ui',
                    action: 'copied',
                    actionSubject: 'file'
                };
                if (!(identifier.mediaItemType === 'file')) return [3 /*break*/, 2];
                return [4 /*yield*/, identifier.id];
            case 1:
                _b = _c.sent();
                return [3 /*break*/, 3];
            case 2:
                _b = identifier.mediaItemType;
                _c.label = 3;
            case 3: return [2 /*return*/, (_a.actionSubjectId = _b,
                    _a)];
        }
    });
}); };
exports.getMediaCardCommencedAnalyticsPayload = function (actionSubjectId) {
    return {
        eventType: 'operational',
        action: 'commenced',
        actionSubject: 'mediaCardRender',
        actionSubjectId: actionSubjectId,
    };
};
exports.getAnalyticsStatus = function (previewable, hasMinimalData, status) {
    if (!previewable && hasMinimalData) {
        return;
    }
    return exports.getAnalyticsStatusFromCardStatus(status);
};
exports.hasFilenameAndFilesize = function (metadata) {
    return !!metadata && !!metadata.name && !!metadata.size;
};
exports.fileIsPreviewable = function (metadata) {
    return !!metadata && !!metadata.mediaType && media_client_1.isPreviewableType(metadata.mediaType);
};
exports.getLoadingStatusAnalyticsPayload = function (action, actionSubjectId, fileAttributes, errorState) {
    var payload = {
        eventType: 'operational',
        action: action,
        actionSubject: 'mediaCardRender',
        actionSubjectId: actionSubjectId,
    };
    if (!payload.attributes)
        payload.attributes = {};
    if (fileAttributes) {
        payload.attributes = tslib_1.__assign(tslib_1.__assign({}, payload.attributes), { fileAttributes: fileAttributes });
    }
    if (errorState) {
        payload.attributes.failReason = errorState.failReason;
        payload.attributes.error = errorState.error;
    }
    return payload;
};
//# sourceMappingURL=analytics.js.map