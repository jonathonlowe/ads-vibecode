import React, { Component } from 'react';
import { getDisplayName } from './getDisplayName';
export default function withPseudoState(WrappedComponent) {
    var _a;
    return _a = class ComponentWithPseudoState extends Component {
            constructor() {
                super(...arguments);
                this.component = null;
                this.actionKeys = [];
                this.state = {
                    isActive: Boolean(this.props.isActive),
                    isFocus: Boolean(this.props.isActive),
                    isHover: Boolean(this.props.isActive),
                    isInteractive: Boolean(this.props.href || this.props.isInteractive || this.props.onClick),
                };
                this.blur = () => {
                    // @ts-ignore reaching into the instance
                    if (this.component && this.component.blur)
                        this.component.blur();
                };
                this.focus = () => {
                    // @ts-ignore reaching into the instance
                    if (this.component && this.component.focus)
                        this.component.focus();
                };
                this.setComponent = (component) => {
                    this.component = component;
                };
                this.onBlur = (...args) => {
                    this.setState({ isActive: false, isFocus: false });
                    if (this.props.onBlur) {
                        this.props.onBlur(...args);
                    }
                };
                this.onFocus = (...args) => {
                    this.setState({ isFocus: true });
                    if (this.props.onFocus) {
                        this.props.onFocus(...args);
                    }
                };
                this.onMouseLeave = (...args) => {
                    this.setState({ isActive: false, isHover: false });
                    if (this.props.onMouseLeave) {
                        this.props.onMouseLeave(...args);
                    }
                };
                this.onMouseEnter = (...args) => {
                    this.setState({ isHover: true });
                    if (this.props.onMouseEnter) {
                        this.props.onMouseEnter(...args);
                    }
                };
                this.onMouseUp = (...args) => {
                    this.setState({ isActive: false });
                    if (this.props.onMouseUp) {
                        this.props.onMouseUp(...args);
                    }
                };
                this.onMouseDown = (...args) => {
                    this.setState({ isActive: true });
                    if (this.props.onMouseDown) {
                        this.props.onMouseDown(...args);
                    }
                };
                this.onKeyDown = (event, ...rest) => {
                    if (this.actionKeys.indexOf(event.key) > -1) {
                        this.setState({ isActive: true });
                    }
                    if (this.props.onKeyDown) {
                        this.props.onKeyDown(event, ...rest);
                    }
                };
                this.onKeyUp = (event, ...rest) => {
                    if (this.actionKeys.indexOf(event.key) > -1) {
                        this.setState({ isActive: false });
                    }
                    if (this.props.onKeyUp) {
                        this.props.onKeyUp(event, ...rest);
                    }
                };
            }
            UNSAFE_componentWillMount() {
                const { href, isInteractive, onClick } = this.props;
                if (href || isInteractive || onClick) {
                    this.actionKeys = onClick || isInteractive ? ['Enter', ' '] : ['Enter'];
                }
            }
            render() {
                return (React.createElement(WrappedComponent, Object.assign({ ref: this.setComponent }, this.state, this.props, (this.state.isInteractive && {
                    onBlur: this.onBlur,
                    onFocus: this.onFocus,
                    onMouseLeave: this.onMouseLeave,
                    onMouseEnter: this.onMouseEnter,
                    onMouseUp: this.onMouseUp,
                    onMouseDown: this.onMouseDown,
                    onKeyDown: this.onKeyDown,
                    onKeyUp: this.onKeyUp,
                }))));
            }
        },
        _a.displayName = getDisplayName('withPseudoState', WrappedComponent),
        _a;
}
//# sourceMappingURL=withPseudoState.js.map