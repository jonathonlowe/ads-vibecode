"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var media_client_1 = require("../client/media-client");
var mediaClientsMap = new Map();
exports.getMediaClient = function (mediaClientConfig) {
    var mediaClient = mediaClientsMap.get(mediaClientConfig);
    if (!mediaClient) {
        mediaClient = new media_client_1.MediaClient(mediaClientConfig);
        mediaClientsMap.set(mediaClientConfig, mediaClient);
    }
    return mediaClient;
};
var createEmptyMediaClient = function () {
    var emptyConfig = {
        authProvider: function () {
            return Promise.resolve({
                clientId: '',
                token: '',
                baseUrl: '',
            });
        },
    };
    return new media_client_1.MediaClient(emptyConfig);
};
exports.withMediaClient = function (Component) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.render = function () {
            // TODO MPT-315: clean up after we move mediaClientConfig into FileIdentifier
            var _a = this.props, mediaClientConfig = _a.mediaClientConfig, otherProps = tslib_1.__rest(_a, ["mediaClientConfig"]);
            var mediaClient = !mediaClientConfig
                ? createEmptyMediaClient()
                : exports.getMediaClient(mediaClientConfig);
            return react_1.default.createElement(Component, tslib_1.__assign({}, otherProps, { mediaClient: mediaClient }));
        };
        return class_1;
    }(react_1.default.Component));
};
//# sourceMappingURL=with-media-client-hoc.js.map