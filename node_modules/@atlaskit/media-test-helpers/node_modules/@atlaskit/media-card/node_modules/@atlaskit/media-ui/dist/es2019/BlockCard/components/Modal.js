import React, { useState } from 'react';
import ModalDialog, { ModalTransition, } from '@atlaskit/modal-dialog';
import { Header } from './ModalHeader';
import { gs } from '../utils';
const iframeStyles = {
    width: `100%`,
    height: `calc(100% - ${gs(3)})`,
};
class ModalWithErrorBoundary extends React.Component {
    componentDidCatch(error, errorInfo) {
        if (this.props.onOpenFailed) {
            this.props.onOpenFailed(error, errorInfo);
        }
    }
    render() {
        return React.createElement(Modal, Object.assign({}, this.props));
    }
}
const Modal = ({ onClose, onOpen, src, testId, showModal, providerName, metadata, icon, closeLabel, iframeName, title, url, download, byline, onViewActionClick, onDownloadActionClick, }) => {
    let [isOpen, setIsOpen] = useState(showModal);
    return (React.createElement(ModalTransition, null, isOpen && (React.createElement(ModalDialog, { height: "100%", width: "large", testId: testId, onOpenComplete: onOpen, components: {
            // TODO modal body wants to be original modal with height 100% - find out how to add
            Header: (props) => (React.createElement(Header, Object.assign({}, props, { providerName: providerName, icon: icon, metadata: metadata, url: url, title: title, label: closeLabel, download: download, byline: byline, onViewActionClick: onViewActionClick, onDownloadActionClick: onDownloadActionClick }))),
        }, onClose: () => {
            setIsOpen(false);
        }, onCloseComplete: onClose }, src ? (React.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0, src: src })) : (React.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0 }))))));
};
export default ModalWithErrorBoundary;
//# sourceMappingURL=Modal.js.map