import React from 'react';
import { Component } from 'react';
import { TimeLine, CurrentTimeLine, Thumb, BufferedTime, CurrentTimeTooltip, TimeRangeWrapper, } from './styled';
import { formatDuration } from '../formatDuration';
export class TimeRange extends Component {
    constructor() {
        super(...arguments);
        this.wrapperElementWidth = 0;
        this.state = {
            isDragging: false,
            dragStartClientX: 0,
        };
        this.setWrapperWidth = () => {
            if (!this.wrapperElement) {
                return;
            }
            this.wrapperElementWidth = this.wrapperElement.getBoundingClientRect().width;
        };
        this.onMouseMove = (e) => {
            const { isDragging, dragStartClientX } = this.state;
            if (!isDragging) {
                return;
            }
            e.stopPropagation();
            const { onChange, duration, currentTime } = this.props;
            const { clientX } = e;
            let absolutePosition = clientX - dragStartClientX;
            const isOutsideToRight = absolutePosition > this.wrapperElementWidth;
            const isOutsideToLeft = absolutePosition < 0;
            // Next to conditions take care of situation where user moves mouse very quickly out to the side
            // left or right. It's very easy to leave thumb not at the end/beginning of a timeline.
            // This will guarantee that in this case thumb will move to appropriate extreme.
            if (isOutsideToRight) {
                absolutePosition = this.wrapperElementWidth;
            }
            if (isOutsideToLeft) {
                absolutePosition = 0;
            }
            const newTimeWithBoundaries = (absolutePosition * duration) / this.wrapperElementWidth;
            if (currentTime !== newTimeWithBoundaries) {
                // If value hasn't changed we don't want to call "change"
                onChange(newTimeWithBoundaries);
            }
        };
        this.onMouseUp = () => {
            // As soon as user finished dragging, we should clean up events.
            document.removeEventListener('mouseup', this.onMouseUp);
            document.removeEventListener('mousemove', this.onMouseMove);
            this.setState({
                isDragging: false,
            });
        };
        this.onThumbMouseDown = (e) => {
            e.preventDefault();
            // We need to recalculate every time, because width can change (thanks, editor ;-)
            this.setWrapperWidth();
            // We are implementing drag and drop here. There is no reason to start listening for mouseUp or move
            // before that. Also if we start listening for mouseup before that we could pick up someone else's event
            // For example editors resizing of a inline video player.
            document.addEventListener('mouseup', this.onMouseUp);
            document.addEventListener('mousemove', this.onMouseMove);
            const { duration, onChange } = this.props;
            const event = e.nativeEvent;
            const x = event.offsetX;
            const currentTime = (x * duration) / this.wrapperElementWidth;
            this.setState({
                isDragging: true,
                dragStartClientX: event.clientX - x,
            });
            // As soon as user clicks timeline we want to move thumb over to that place.
            onChange(currentTime);
        };
        this.saveWrapperElement = (el) => {
            if (el) {
                this.wrapperElement = el;
                this.setWrapperWidth();
            }
        };
        this.saveThumbElement = (el) => {
            if (el) {
                this.thumbElement = el;
            }
        };
    }
    componentDidMount() {
        window.addEventListener('resize', this.setWrapperWidth);
    }
    componentWillUnmount() {
        document.removeEventListener('mousemove', this.onMouseMove);
        document.removeEventListener('mouseup', this.onMouseUp);
        window.removeEventListener('resize', this.setWrapperWidth);
    }
    render() {
        const { isDragging } = this.state;
        const { currentTime, duration, bufferedTime, disableThumbTooltip, isAlwaysActive, } = this.props;
        const currentPosition = (currentTime * 100) / duration;
        const bufferedTimePercentage = (bufferedTime * 100) / duration;
        return (React.createElement(TimeRangeWrapper, { showAsActive: isAlwaysActive, onMouseDown: this.onThumbMouseDown },
            React.createElement(TimeLine, { innerRef: this.saveWrapperElement },
                React.createElement(BufferedTime, { style: { width: `${bufferedTimePercentage}%` } }),
                React.createElement(CurrentTimeLine, { style: { width: `${currentPosition}%` } },
                    React.createElement(Thumb, { innerRef: this.saveThumbElement }, disableThumbTooltip ? null : (React.createElement(CurrentTimeTooltip, { draggable: false, isDragging: isDragging, className: "current-time-tooltip" }, formatDuration(currentTime))))))));
    }
}
TimeRange.defaultProps = {
    disableThumbTooltip: false,
    isAlwaysActive: false,
};
//# sourceMappingURL=timeRange.js.map