import { __assign } from "tslib";
/** @jsx jsx */
import { jsx } from '@emotion/core';
import Lozenge from '@atlaskit/lozenge';
import { Frame } from '../components/Frame';
import { Thumbnail } from '../components/Thumbnail';
import { Provider } from '../components/Provider';
import { Name } from '../components/Name';
import { Byline } from '../components/Byline';
import { ActionList } from '../components/ActionList';
import { CollaboratorList } from '../components/CollaboratorList';
import { Icon } from '../components/Icon';
import { Content } from '../components/Content';
import { MetadataList } from '../components/MetadataList';
import { LozengeBlockWrapper } from '../../InlineCard/IconAndTitleLayout/styled';
import { ContentHeader } from '../components/ContentHeader';
import { ContentFooter } from '../components/ContentFooter';
import { gs } from '../utils';
import { handleClickCommon } from '../utils/handlers';
export var ResolvedView = function (_a) {
    var _b = _a.icon, icon = _b === void 0 ? {} : _b, _c = _a.actions, actions = _c === void 0 ? [] : _c, thumbnail = _a.thumbnail, _d = _a.context, context = _d === void 0 ? { text: '' } : _d, _e = _a.title, title = _e === void 0 ? '' : _e, _f = _a.isSelected, isSelected = _f === void 0 ? false : _f, _g = _a.users, users = _g === void 0 ? [] : _g, _h = _a.handleAvatarClick, handleAvatarClick = _h === void 0 ? function () { } : _h, _j = _a.handleMoreAvatarsClick, handleMoreAvatarsClick = _j === void 0 ? function () { } : _j, _k = _a.onClick, onClick = _k === void 0 ? function () { } : _k, _l = _a.link, link = _l === void 0 ? '' : _l, _m = _a.byline, byline = _m === void 0 ? '' : _m, lozenge = _a.lozenge, _o = _a.details, details = _o === void 0 ? [] : _o, _p = _a.testId, testId = _p === void 0 ? 'block-card-resolved-view' : _p, _q = _a.showActions, showActions = _q === void 0 ? true : _q;
    var resolvedMetadata = details.length > 0 ? (jsx(MetadataList, { testId: testId ? testId + "-meta" : undefined, items: details })) : (undefined);
    var resolvedByline = (jsx(Byline, { testId: testId ? testId + "-by" : undefined }, byline));
    var handleClick = function (event) { return handleClickCommon(event, onClick); };
    var hasActions = showActions && actions.length > 0;
    return (jsx(Frame, { isSelected: isSelected, testId: testId },
        jsx(Content, null,
            jsx("div", null,
                jsx("div", { css: {
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'flex-start',
                    } },
                    jsx(ContentHeader, { onClick: handleClick, link: link },
                        jsx(Icon, __assign({}, icon)),
                        jsx(Name, { name: title }),
                        lozenge && (jsx(LozengeBlockWrapper, { css: {
                                height: gs(2.5),
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                            } },
                            jsx(Lozenge, __assign({}, lozenge), lozenge.text)))),
                    jsx(CollaboratorList, { items: users, handleAvatarClick: handleAvatarClick, handleMoreAvatarsClick: handleMoreAvatarsClick })),
                resolvedByline,
                resolvedMetadata),
            jsx(ContentFooter, { hasSpaceBetween: hasActions },
                jsx(Provider, { name: context.text, icon: context.icon }),
                hasActions && jsx(ActionList, { items: actions }))),
        thumbnail ? (jsx(Thumbnail, { src: thumbnail, testId: testId ? testId + "-thumb" : undefined })) : null));
};
//# sourceMappingURL=ResolvedView.js.map