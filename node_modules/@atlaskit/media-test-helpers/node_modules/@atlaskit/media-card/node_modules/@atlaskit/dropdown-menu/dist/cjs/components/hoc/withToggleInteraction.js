"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var prop_types_1 = tslib_1.__importDefault(require("prop-types"));
var colors_1 = require("@atlaskit/theme/colors");
var contextNamespace_1 = require("../../util/contextNamespace");
var getDisplayName_1 = tslib_1.__importDefault(require("../../util/getDisplayName"));
var keys_1 = require("../../util/keys");
var safeContextCall_1 = tslib_1.__importDefault(require("../../util/safeContextCall"));
// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function (WrappedComponent, SelectionIcon, getAriaRole) {
    var _a;
    var _b;
    return _b = /** @class */ (function (_super) {
            tslib_1.__extends(WithToggleInteraction, _super);
            function WithToggleInteraction() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.getIconColors = function (isSelected) {
                    if (isSelected === void 0) { isSelected = false; }
                    if (isSelected) {
                        return { primary: colors_1.B400, secondary: colors_1.N40 };
                    }
                    return { primary: colors_1.N40, secondary: colors_1.N40 };
                };
                _this.warnIfUseControlledAndUncontrolledState = function () {
                    if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
                        if (_this.props.defaultSelected && _this.props.isSelected) {
                            // eslint-disable-next-line no-console
                            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
                        }
                    }
                };
                _this.callContextFn = safeContextCall_1.default(_this, contextNamespace_1.selectionManagerContext);
                _this.handleKeyboard = function (event) {
                    var key = event.key;
                    if (key === keys_1.KEY_ENTER || key === keys_1.KEY_SPACE) {
                        // We prevent default here to avoid page scroll
                        event.preventDefault();
                        _this.handleItemActivated(event);
                    }
                };
                _this.handleItemActivated = function (event) {
                    if (_this.props.onClick) {
                        _this.props.onClick(event);
                    }
                    _this.callContextFn('itemClicked', _this.props.id);
                };
                _this.isSelectedInDropdown = function () {
                    return _this.callContextFn('isItemSelected', _this.props.id);
                };
                return _this;
            }
            WithToggleInteraction.prototype.componentDidMount = function () {
                var _a = this.props, defaultSelected = _a.defaultSelected, isSelected = _a.isSelected, id = _a.id;
                this.warnIfUseControlledAndUncontrolledState();
                this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
            };
            WithToggleInteraction.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
                var id = nextProps.id, defaultSelected = nextProps.defaultSelected, isSelected = nextProps.isSelected;
                if (this.props.isSelected !== isSelected) {
                    this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
                }
            };
            WithToggleInteraction.prototype.render = function () {
                var _a = this.props, children = _a.children, otherProps = tslib_1.__rest(_a, ["children"]);
                var isSelected = this.isSelectedInDropdown();
                var iconColors = this.getIconColors(!!isSelected);
                var ariaRole = getAriaRole();
                var wrappedCompProps = tslib_1.__assign(tslib_1.__assign({}, otherProps), { role: ariaRole, 'aria-checked': isSelected, isSelected: isSelected, onClick: this.handleItemActivated, onKeyDown: this.handleKeyboard, elemBefore: (react_1.default.createElement(SelectionIcon, { primaryColor: iconColors.primary, secondaryColor: iconColors.secondary, size: "medium", label: "" })) });
                return (react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, wrappedCompProps), children));
            };
            return WithToggleInteraction;
        }(react_1.Component)),
        _b.displayName = "WithToggleInteraction(" + getDisplayName_1.default(WrappedComponent) + ")",
        _b.defaultProps = {
            onClick: function () { },
        },
        _b.contextTypes = (_a = {},
            _a[contextNamespace_1.selectionManagerContext] = prop_types_1.default.object.isRequired,
            _a),
        _b;
};
exports.default = withToggleInteraction;
//# sourceMappingURL=withToggleInteraction.js.map