export class StreamsCache {
    constructor(streams) {
        this.streams = streams;
    }
    has(id) {
        return !!this.streams.find(id);
    }
    set(id, stream) {
        this.streams.set(id, stream);
    }
    get(id) {
        return this.streams.get(id);
    }
    getOrInsert(id, callback) {
        if (!this.has(id)) {
            this.set(id, callback());
        }
        return this.get(id);
    }
    removeAll() {
        this.streams.removeAll();
    }
    remove(id) {
        this.streams.remove(id);
    }
    get size() {
        return this.streams.size;
    }
}
let streamCache;
export const getFileStreamsCache = () => {
    if (!streamCache) {
        // TODO: we can move this into a static import like
        // import {mediaState} from '@atlaskit/media-core'
        const mediaState = require('@atlaskit/media-core').mediaState;
        streamCache = new StreamsCache(mediaState.streams);
    }
    return streamCache;
};
//# sourceMappingURL=file-streams-cache.js.map