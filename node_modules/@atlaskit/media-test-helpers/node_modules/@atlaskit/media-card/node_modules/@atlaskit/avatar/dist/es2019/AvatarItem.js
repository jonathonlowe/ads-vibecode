import { css, jsx } from '@emotion/core';
import { B200, backgroundActive, backgroundHover, } from '@atlaskit/theme/colors';
import { borderRadius, gridSize } from '@atlaskit/theme/constants';
import Text from './Text';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
const AvatarItem = ({ avatar, backgroundColor = 'transparent', component, isTruncationDisabled, href, isDisabled, onClick, primaryText, secondaryText, target, testId, }) => {
    const Element = component || getCustomElement(href, onClick);
    return (jsx(Element, Object.assign({ onClick: (event) => {
            if (isDisabled || typeof onClick !== 'function')
                return;
            onClick(event);
        }, css: css `
        align-items: center;
        background-color: ${backgroundColor};
        border-radius: ${borderRadius()}px;
        border: 2px solid transparent;
        box-sizing: border-box;
        color: inherit;
        display: flex;
        font-size: inherit;
        font-style: normal;
        font-weight: normal;
        line-height: 1;
        outline: none;
        margin: 0;
        padding: ${gridSize() * 2}px;
        text-align: left;
        text-decoration: none;
        width: 100%;
        cursor: pointer;

        ${(onClick || href) &&
            `
          :hover {
            background-color: ${backgroundHover()};
          }

          :focus {
            border-color: ${B200};
          }

          :active {
            background-color: ${backgroundActive()};
          }
        `}

        ${isDisabled &&
            `
          cursor: not-allowed;
          opacity: 0.75;
          pointer-events: none;
        `}
      ` }, (href && target && getLinkProps(href, target)), (onClick && getButtonProps(isDisabled)), (!component
        ? { 'data-testid': testId && `${testId}--itemInner` }
        : { testId: testId && `${testId}--itemInner` })),
        avatar,
        jsx("div", { css: {
                maxWidth: '100%',
                minWidth: 0,
                flex: '1 1 100%',
                lineHeight: '1.4',
                paddingLeft: `${gridSize()}px`,
            } },
            jsx(Text, { truncate: !isTruncationDisabled }, primaryText),
            jsx(Text, { secondary: true, truncate: !isTruncationDisabled }, secondaryText))));
};
export default AvatarItem;
//# sourceMappingURL=AvatarItem.js.map