import React, { Component, KeyboardEvent, MouseEvent, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { FocusItem, ItemId } from '../../types';
interface Props {
    /** Causes first registered item to receive focus */
    autoFocus?: boolean;
    children?: ReactNode;
    close?: (args: {
        event: MouseEvent | KeyboardEvent;
        source?: 'click' | 'keydown';
    }) => void;
}
export default class DropdownItemFocusManager extends Component<Props> {
    static childContextTypes: {
        [x: string]: PropTypes.Requireable<any>;
    };
    getChildContext(): {
        [x: string]: {
            itemFocused: (itemId: string) => void;
            registerItem: (itemId: string, itemNode: HTMLElement) => void;
            deregisterItem: (itemId: string) => void;
            updateItem: (itemId: string, itemNode: HTMLElement) => void;
        };
    };
    registeredItems: Array<FocusItem>;
    focusedItemId?: ItemId;
    handleItemRegistered: (itemId: string, itemNode: HTMLElement) => void;
    handleItemDeregistered: (itemId: string) => void;
    handleItemFocused: (itemId: string) => void;
    handleItemUpdated: (itemId: string, itemNode: HTMLElement) => void;
    focusedItemIndex: () => number;
    handleKeyboard: (event: React.KeyboardEvent<Element>) => void;
    render(): JSX.Element;
}
export {};
