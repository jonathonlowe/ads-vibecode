import { __assign, __extends, __rest } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { B400, N40 } from '@atlaskit/theme/colors';
import { selectionManagerContext } from '../../util/contextNamespace';
import getDisplayName from '../../util/getDisplayName';
import { KEY_ENTER, KEY_SPACE } from '../../util/keys';
import safeContextCall from '../../util/safeContextCall';
// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function (WrappedComponent, SelectionIcon, getAriaRole) {
    var _a;
    var _b;
    return _b = /** @class */ (function (_super) {
            __extends(WithToggleInteraction, _super);
            function WithToggleInteraction() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.getIconColors = function (isSelected) {
                    if (isSelected === void 0) { isSelected = false; }
                    if (isSelected) {
                        return { primary: B400, secondary: N40 };
                    }
                    return { primary: N40, secondary: N40 };
                };
                _this.warnIfUseControlledAndUncontrolledState = function () {
                    if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
                        if (_this.props.defaultSelected && _this.props.isSelected) {
                            // eslint-disable-next-line no-console
                            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
                        }
                    }
                };
                _this.callContextFn = safeContextCall(_this, selectionManagerContext);
                _this.handleKeyboard = function (event) {
                    var key = event.key;
                    if (key === KEY_ENTER || key === KEY_SPACE) {
                        // We prevent default here to avoid page scroll
                        event.preventDefault();
                        _this.handleItemActivated(event);
                    }
                };
                _this.handleItemActivated = function (event) {
                    if (_this.props.onClick) {
                        _this.props.onClick(event);
                    }
                    _this.callContextFn('itemClicked', _this.props.id);
                };
                _this.isSelectedInDropdown = function () {
                    return _this.callContextFn('isItemSelected', _this.props.id);
                };
                return _this;
            }
            WithToggleInteraction.prototype.componentDidMount = function () {
                var _a = this.props, defaultSelected = _a.defaultSelected, isSelected = _a.isSelected, id = _a.id;
                this.warnIfUseControlledAndUncontrolledState();
                this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
            };
            WithToggleInteraction.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
                var id = nextProps.id, defaultSelected = nextProps.defaultSelected, isSelected = nextProps.isSelected;
                if (this.props.isSelected !== isSelected) {
                    this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
                }
            };
            WithToggleInteraction.prototype.render = function () {
                var _a = this.props, children = _a.children, otherProps = __rest(_a, ["children"]);
                var isSelected = this.isSelectedInDropdown();
                var iconColors = this.getIconColors(!!isSelected);
                var ariaRole = getAriaRole();
                var wrappedCompProps = __assign(__assign({}, otherProps), { role: ariaRole, 'aria-checked': isSelected, isSelected: isSelected, onClick: this.handleItemActivated, onKeyDown: this.handleKeyboard, elemBefore: (React.createElement(SelectionIcon, { primaryColor: iconColors.primary, secondaryColor: iconColors.secondary, size: "medium", label: "" })) });
                return (React.createElement(WrappedComponent, __assign({}, wrappedCompProps), children));
            };
            return WithToggleInteraction;
        }(Component)),
        _b.displayName = "WithToggleInteraction(" + getDisplayName(WrappedComponent) + ")",
        _b.defaultProps = {
            onClick: function () { },
        },
        _b.contextTypes = (_a = {},
            _a[selectionManagerContext] = PropTypes.object.isRequired,
            _a),
        _b;
};
export default withToggleInteraction;
//# sourceMappingURL=withToggleInteraction.js.map