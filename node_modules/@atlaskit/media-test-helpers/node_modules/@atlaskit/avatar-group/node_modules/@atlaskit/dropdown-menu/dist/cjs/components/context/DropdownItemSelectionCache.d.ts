import { Component, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { CachedItem } from '../../types';
interface Props {
    children?: ReactNode;
}
interface State {
    lastCacheUpdate: number;
}
export default class DropdownItemSelectionCache extends Component<Props, State> {
    static childContextTypes: {
        [x: string]: PropTypes.Requireable<any>;
    };
    state: {
        lastCacheUpdate: number;
    };
    selectedItems: Array<CachedItem>;
    alreadyDefaultedItems: Array<CachedItem>;
    getChildContext(): {
        [x: string]: {
            isItemSelected: (groupId: string, itemId: string) => boolean;
            itemsInGroup: (groupId: string) => CachedItem[];
            itemSelectionsChanged: (groupId: string, newGroupSelections: CachedItem[]) => void;
            hasItemAlreadyHadDefaultSelectedApplied: (groupId: string, itemId: string) => boolean;
            markItemAsDefaultApplied: (groupId: string, itemId: string) => void;
        };
    };
    handleItemSelectionsChanged: (groupId: string, newGroupSelections: CachedItem[]) => void;
    render(): JSX.Element;
}
export {};
