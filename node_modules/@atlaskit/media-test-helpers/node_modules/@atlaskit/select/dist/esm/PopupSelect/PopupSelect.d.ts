import React, { PureComponent, ReactNode } from 'react';
import Select from 'react-select';
import { FocusTrap } from 'focus-trap';
import { PopperProps } from 'react-popper';
import { OptionType, ValueType, ActionMeta, ReactSelectProps } from '../types';
declare type PopperPropsNoChildren = Omit<PopperProps, 'children'>;
export interface PopupSelectProps<Option = OptionType> extends ReactSelectProps<Option> {
    closeMenuOnSelect?: boolean;
    footer?: ReactNode;
    popperProps?: PopperPropsNoChildren;
    searchThreshold?: number;
    target?: (options: {
        ref: any;
        isOpen: boolean;
    }) => ReactNode;
}
interface State {
    isOpen: boolean;
    mergedComponents: Object;
    mergedPopperProps: PopperPropsNoChildren;
}
export default class PopupSelect<Option = OptionType> extends PureComponent<PopupSelectProps<Option>, State> {
    focusTrap: FocusTrap | null;
    menuRef: HTMLElement | null;
    selectRef: Select<Option> | null;
    targetRef: HTMLElement | null;
    state: {
        isOpen: boolean;
        mergedComponents: {
            Control: React.FunctionComponent<import("react-select").ControlProps<any>>;
            DropdownIndicator: () => JSX.Element;
            Menu: ({ children, innerProps, ...props }: import("react-select").MenuProps<any>) => JSX.Element;
        };
        mergedPopperProps: Pick<PopperProps, "innerRef" | "eventsEnabled" | "modifiers" | "placement" | "positionFixed" | "referenceElement">;
    };
    static defaultProps: {
        closeMenuOnSelect: boolean;
        components: {};
        maxMenuHeight: number;
        maxMenuWidth: number;
        minMenuWidth: number;
        popperProps: {};
        searchThreshold: number;
        styles: {};
        options: never[];
    };
    static getDerivedStateFromProps(props: PopupSelectProps<OptionType>, state: State): Partial<State> | null;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleKeyDown: (event: KeyboardEvent) => void;
    handleClick: ({ target }: MouseEvent) => void;
    handleSelectChange: (value: ValueType<Option>, actionMeta: ActionMeta) => void;
    open: () => void;
    initialiseFocusTrap: () => void;
    close: () => void;
    resolveTargetRef: (popperRef: React.Ref<HTMLElement>) => (ref: HTMLElement) => void;
    resolveMenuRef: (popperRef: React.Ref<HTMLElement>) => (ref: HTMLElement) => void;
    getSelectRef: (ref: Select<Option, import("react-select/src/Select").default<Option>>) => void;
    getItemCount: () => number;
    getMaxHeight: () => number | undefined;
    showSearchControl: () => boolean;
    renderSelect: () => JSX.Element | null;
    render(): JSX.Element;
}
export {};
