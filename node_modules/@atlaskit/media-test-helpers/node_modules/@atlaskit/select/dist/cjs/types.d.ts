/// <reference types="react" />
import { WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { Props as ReactSelectProps, FormatOptionLabelMeta, ValueType, ActionMeta, GroupType, OptionsType as RSOptionsType, SelectComponentsConfig, IndicatorComponentType, StylesConfig, IndicatorProps, ControlProps, GroupProps, InputProps, MenuProps, MenuListComponentProps, MultiValueProps, OptionProps as ReactSelectOptionProps, PlaceholderProps, SingleValueProps, ValueContainerProps } from 'react-select';
import { AsyncProps as ReactAsyncSelectProps } from 'react-select/async';
export declare type ValidationState = 'default' | 'error' | 'success';
export interface OptionType {
    [key: string]: any;
    label: string;
    value: string | number;
}
export declare type OptionsType<Option = OptionType> = RSOptionsType<Option>;
export interface OptionProps<Option = OptionType> extends ReactSelectOptionProps<Option> {
    [key: string]: any;
    Icon?: React.ComponentType<{
        label: string;
        size?: 'small' | 'medium' | 'large' | 'xlarge';
        onClick?: (e: MouseEvent) => void;
        primaryColor?: string;
        secondaryColor?: string;
    }>;
    isDisabled: boolean;
    isFocused: boolean;
    isSelected: boolean;
}
export interface SelectProps<OptionType> extends ReactSelectProps<OptionType>, WithAnalyticsEventsProps {
    spacing?: 'compact' | 'default';
    validationState?: ValidationState;
}
export { ActionMeta, ControlProps, FormatOptionLabelMeta, GroupProps, GroupType, IndicatorComponentType, IndicatorProps, InputProps, MenuListComponentProps, MenuProps, MultiValueProps, PlaceholderProps, ReactAsyncSelectProps, ReactSelectProps, SelectComponentsConfig, SingleValueProps, StylesConfig, ValueContainerProps, ValueType, };
