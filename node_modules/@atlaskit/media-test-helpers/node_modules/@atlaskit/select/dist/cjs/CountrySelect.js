"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/** @jsx jsx */
var core_1 = require("@emotion/core");
var countries_1 = require("./data/countries");
var Select_1 = tslib_1.__importDefault(require("./Select"));
// custom option renderer
var labelCSS = function () { return ({
    alignItems: 'center',
    display: 'flex',
    lineHeight: 1.2,
}); };
var flagCSS = function () { return ({
    fontSize: '18px',
    marginRight: '8px',
}); };
var Opt = function (_a) {
    var children = _a.children, icon = _a.icon;
    return (core_1.jsx("div", { css: labelCSS() },
        core_1.jsx("span", { css: flagCSS() }, icon),
        children));
};
// return the country name; used for searching
var getOptionLabel = function (opt) { return opt.name; };
// set the country's abbreviation for the option value, (also searchable)
var getOptionValue = function (opt) { return opt.abbr; };
// the text node of the control
var controlLabel = function (opt) { return (core_1.jsx(Opt, { icon: opt.icon }, opt.abbr.toUpperCase())); };
// the text node for an option
var optionLabel = function (_a) {
    var abbr = _a.abbr, code = _a.code, icon = _a.icon, name = _a.name;
    return (core_1.jsx(Opt, { icon: icon },
        name,
        " (",
        abbr.toUpperCase(),
        ") +",
        code));
};
// switch formatters based on render context (menu | value)
var formatOptionLabel = function (opt, _a) {
    var context = _a.context;
    return (context === 'value' ? controlLabel(opt) : optionLabel(opt));
};
// put it all together
var CountrySelect = function (props) { return (core_1.jsx(Select_1.default, tslib_1.__assign({ isClearable: false, formatOptionLabel: formatOptionLabel, getOptionLabel: getOptionLabel, getOptionValue: getOptionValue, isMulti: false, options: countries_1.groupedCountries, styles: {
        container: function (css) { return (tslib_1.__assign(tslib_1.__assign({}, css), { width: 105 })); },
        dropdownIndicator: function (css) { return (tslib_1.__assign(tslib_1.__assign({}, css), { paddingLeft: 0 })); },
        menu: function (css) { return (tslib_1.__assign(tslib_1.__assign({}, css), { width: 300 })); },
    } }, props))); };
exports.default = CountrySelect;
//# sourceMappingURL=CountrySelect.js.map