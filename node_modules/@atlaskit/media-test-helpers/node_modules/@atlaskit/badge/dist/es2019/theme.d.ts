/// <reference types="react" />
export declare type ThemeAppearance = 'added' | 'default' | 'important' | 'primary' | 'primaryInverted' | 'removed' | Record<string, any>;
export declare type ThemeMode = 'dark' | 'light';
export interface ThemeProps {
    appearance: ThemeAppearance;
    mode: ThemeMode;
}
export interface ThemeTokens {
    /**
     * The background color for the badge.
     * Please use a color from [@atlaskit/theme](/packages/design-system/theme).
     */
    backgroundColor: string;
    /**
     * The text color for the badge.
     * Please use a color from [@atlaskit/theme](/packages/design-system/theme).
     */
    textColor: string;
}
export declare const backgroundColors: {
    added: {
        light: string;
        dark: string;
    };
    default: {
        light: string;
        dark: string;
    };
    important: {
        light: string;
        dark: string;
    };
    primary: {
        light: string;
        dark: string;
    };
    primaryInverted: {
        light: string;
        dark: string;
    };
    removed: {
        light: string;
        dark: string;
    };
};
export declare const textColors: {
    added: {
        light: string;
        dark: string;
    };
    default: {
        light: string;
        dark: string;
    };
    important: {
        light: string;
        dark: string;
    };
    primary: {
        light: string;
        dark: string;
    };
    primaryInverted: {
        light: string;
        dark: string;
    };
    removed: {
        light: string;
        dark: string;
    };
};
export declare const Theme: {
    Consumer: import("react").ComponentType<ThemeProps & {
        children: (tokens: ThemeTokens) => import("react").ReactNode;
    }>;
    Provider: import("react").ComponentType<{
        children?: import("react").ReactNode;
        value?: import("@atlaskit/theme/dist/cjs/components").ThemeProp<ThemeTokens, ThemeProps> | undefined;
    }>;
};
