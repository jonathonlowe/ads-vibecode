import { asyncMap } from 'rxjs-async-map';
function arrayBufferToHex(buffer) {
    return Array.prototype.map
        .call(new Uint8Array(buffer), (x) => ('00' + x.toString(16)).slice(-2))
        .join('');
}
function blobToArrayBuffer(blob) {
    const fileReader = new FileReader();
    return new Promise((resolve, reject) => {
        fileReader.onload = function () {
            resolve(this.result);
        };
        fileReader.onerror = reject;
        fileReader.readAsArrayBuffer(blob);
    });
}
export const defaultHasher = blob => {
    return blobToArrayBuffer(blob)
        .then(arrayBuffer => crypto.subtle.digest('SHA-1', arrayBuffer))
        .then(arrayBufferToHex);
};
export const blobToHashedBlob = (hasher) => (blob) => hasher(blob).then(hash => ({ blob, hash: `${hash}-${blob.size}` }));
export const hashinator = (blobs$, { hasher, concurrency }) => asyncMap(blobToHashedBlob(hasher || defaultHasher), concurrency)(blobs$);
//# sourceMappingURL=hashinator.js.map