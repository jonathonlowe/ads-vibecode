"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@emotion/core");
var colors_1 = require("@atlaskit/theme/colors");
var constants_1 = require("@atlaskit/theme/constants");
var Text_1 = tslib_1.__importDefault(require("./Text"));
var utilities_1 = require("./utilities");
var AvatarItem = function (_a) {
    var avatar = _a.avatar, _b = _a.backgroundColor, backgroundColor = _b === void 0 ? 'transparent' : _b, component = _a.component, isTruncationDisabled = _a.isTruncationDisabled, href = _a.href, isDisabled = _a.isDisabled, onClick = _a.onClick, primaryText = _a.primaryText, secondaryText = _a.secondaryText, target = _a.target, testId = _a.testId;
    var Element = component || utilities_1.getCustomElement(href, onClick);
    return (core_1.jsx(Element, tslib_1.__assign({ onClick: function (event) {
            if (isDisabled || typeof onClick !== 'function')
                return;
            onClick(event);
        }, css: core_1.css(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n        align-items: center;\n        background-color: ", ";\n        border-radius: ", "px;\n        border: 2px solid transparent;\n        box-sizing: border-box;\n        color: inherit;\n        display: flex;\n        font-size: inherit;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 1;\n        outline: none;\n        margin: 0;\n        padding: ", "px;\n        text-align: left;\n        text-decoration: none;\n        width: 100%;\n        cursor: pointer;\n\n        ", "\n\n        ", "\n      "], ["\n        align-items: center;\n        background-color: ", ";\n        border-radius: ", "px;\n        border: 2px solid transparent;\n        box-sizing: border-box;\n        color: inherit;\n        display: flex;\n        font-size: inherit;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 1;\n        outline: none;\n        margin: 0;\n        padding: ", "px;\n        text-align: left;\n        text-decoration: none;\n        width: 100%;\n        cursor: pointer;\n\n        ",
            "\n\n        ",
            "\n      "])), backgroundColor, constants_1.borderRadius(), constants_1.gridSize() * 2, (onClick || href) &&
            "\n          :hover {\n            background-color: " + colors_1.backgroundHover() + ";\n          }\n\n          :focus {\n            border-color: " + colors_1.B200 + ";\n          }\n\n          :active {\n            background-color: " + colors_1.backgroundActive() + ";\n          }\n        ", isDisabled &&
            "\n          cursor: not-allowed;\n          opacity: 0.75;\n          pointer-events: none;\n        ") }, (href && target && utilities_1.getLinkProps(href, target)), (onClick && utilities_1.getButtonProps(isDisabled)), (!component
        ? { 'data-testid': testId && testId + "--itemInner" }
        : { testId: testId && testId + "--itemInner" })),
        avatar,
        core_1.jsx("div", { css: {
                maxWidth: '100%',
                minWidth: 0,
                flex: '1 1 100%',
                lineHeight: '1.4',
                paddingLeft: constants_1.gridSize() + "px",
            } },
            core_1.jsx(Text_1.default, { truncate: !isTruncationDisabled }, primaryText),
            core_1.jsx(Text_1.default, { secondary: true, truncate: !isTruncationDisabled }, secondaryText))));
};
exports.default = AvatarItem;
var templateObject_1;
//# sourceMappingURL=AvatarItem.js.map