import { __extends } from "tslib";
import { LRUCache } from 'lru-fast';
export var PREVIEW_CACHE_LRU_SIZE = 20;
var ExtendedLRUCache = /** @class */ (function (_super) {
    __extends(ExtendedLRUCache, _super);
    function ExtendedLRUCache() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendedLRUCache.prototype.shift = function () {
        var entry = _super.prototype.shift.call(this);
        if (entry) {
            URL.revokeObjectURL(entry.value);
        }
        return entry;
    };
    return ExtendedLRUCache;
}(LRUCache));
var ObjectURLCache = /** @class */ (function () {
    function ObjectURLCache(size) {
        this.cache = new ExtendedLRUCache(size);
    }
    ObjectURLCache.prototype.has = function (key) {
        return !!this.cache.get(key);
    };
    ObjectURLCache.prototype.get = function (key) {
        return this.cache.get(key);
    };
    ObjectURLCache.prototype.set = function (key, value) {
        this.cache.set(key, value);
    };
    ObjectURLCache.prototype.reset = function () {
        this.cache.removeAll();
    };
    return ObjectURLCache;
}());
export { ObjectURLCache };
export var objectURLCache = new ObjectURLCache(PREVIEW_CACHE_LRU_SIZE);
//# sourceMappingURL=objectURLCache.js.map