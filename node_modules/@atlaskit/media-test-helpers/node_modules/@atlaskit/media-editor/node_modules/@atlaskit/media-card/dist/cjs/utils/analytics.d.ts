import { FileDetails, MediaType, FileState, Identifier } from '@atlaskit/media-client';
import { MediaAnalyticsData } from '@atlaskit/analytics-namespaced-context';
import { CardStatus } from '../';
import { GasCorePayload } from '@atlaskit/analytics-gas-types';
import { CreateUIAnalyticsEvent, UIAnalyticsEvent } from '@atlaskit/analytics-next';
export interface MediaCardAnalyticsFileAttributes {
    fileSource: string;
    fileMediatype?: MediaType;
    fileMimetype?: string;
    fileId?: string;
    fileStatus?: FileState['status'];
    fileSize?: number;
}
export declare type MediaCardAnalyticsPayload = Partial<GasCorePayload> & {
    action?: string;
    attributes?: GasCorePayload['attributes'] & AnalyticsErrorStateAttributes & {
        fileAttributes?: MediaCardAnalyticsFileAttributes;
    };
};
export declare function getBaseAnalyticsContext(componentName?: string): GasCorePayload['attributes'];
export declare const getFileAttributes: (metadata?: FileDetails | undefined, fileStatus?: "uploading" | "processing" | "processed" | "error" | "failed-processing" | undefined) => MediaCardAnalyticsFileAttributes;
export declare function getMediaCardAnalyticsContext(metadata?: FileDetails, fileStatus?: FileState): MediaAnalyticsData;
export declare function createAndFireCustomMediaEvent(payload: MediaCardAnalyticsPayload, createAnalyticsEvent?: CreateUIAnalyticsEvent): void;
declare type CreateAndFireMediaEvent = (basePayload: MediaCardAnalyticsPayload) => (createAnalyticsEvent: CreateUIAnalyticsEvent) => UIAnalyticsEvent;
export declare const createAndFireMediaEvent: CreateAndFireMediaEvent;
export declare type AnalyticsLoadingAction = 'succeeded' | 'failed';
export declare const getAnalyticsStatusFromCardStatus: (cardStatus: CardStatus) => "succeeded" | "failed" | undefined;
export declare type AnalyticsErrorStateAttributes = {
    failReason?: 'media-client-error' | 'file-status-error' | 'file-uri-error';
    error?: string;
};
export declare const getAnalyticsErrorStateAttributes: (previewable: boolean, hasMinimalData: boolean, fileState?: import("@atlaskit/media-client").UploadingFileState | import("@atlaskit/media-client").ProcessingFileState | import("@atlaskit/media-client").ProcessedFileState | import("@atlaskit/media-client").ErrorFileState | import("@atlaskit/media-client").ProcessingFailedState | undefined, error?: string | Error | undefined) => AnalyticsErrorStateAttributes;
export declare const getCopiedFileAnalyticsPayload: (identifier: Identifier) => MediaCardAnalyticsPayload;
export declare const getMediaCardCommencedAnalyticsPayload: (actionSubjectId: string) => MediaCardAnalyticsPayload;
export declare const getAnalyticsStatus: (previewable: boolean, hasMinimalData: boolean, status: CardStatus) => "succeeded" | "failed" | undefined;
export declare const hasFilenameAndFilesize: (metadata?: FileDetails | undefined) => boolean;
export declare const fileIsPreviewable: (metadata?: FileDetails | undefined) => boolean;
export declare const getLoadingStatusAnalyticsPayload: (action: string, actionSubjectId?: string | undefined, fileAttributes?: MediaCardAnalyticsFileAttributes | undefined, errorState?: AnalyticsErrorStateAttributes | undefined) => MediaCardAnalyticsPayload;
export {};
