import React from 'react';
import { Component } from 'react';
import { FormattedMessage } from 'react-intl';
import cx from 'classnames';
import TickIcon from '@atlaskit/icon/glyph/check';
import { Ellipsify } from '@atlaskit/media-ui';
import { messages } from '@atlaskit/media-ui';
// We dont require things directly from "utils" to avoid circular dependencies
import { FileIcon } from '../../../utils/fileIcon';
import { ErrorIcon } from '../../../utils/errorIcon';
import CardActions from '../../../utils/cardActions';
import { createAndFireMediaEvent } from '../../../utils/analytics';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { TickBox, Overlay, ErrorLine, LeftColumn, TopRow, BottomRow, RightColumn, ErrorMessage, Retry, TitleWrapper, Subtitle, Metadata, ErrorWrapper, AltWrapper, } from './styled';
const RetryWithProps = (props) => (React.createElement(Retry, Object.assign({ "data-testid": "media-card-retry-button" }, props)));
const RetryWithAnalytics = withAnalyticsEvents({
    onClick: createAndFireMediaEvent({
        eventType: 'ui',
        action: 'clicked',
        actionSubject: 'button',
        actionSubjectId: 'mediaCardRetry',
    }),
})(RetryWithProps);
export class CardOverlay extends Component {
    constructor(props) {
        super(props);
        this.onMenuToggle = (attrs) => {
            this.setState({ isMenuExpanded: attrs.isOpen });
        };
        this.state = {
            isMenuExpanded: false,
        };
    }
    get wrapperClassNames() {
        const { error, noHover, selectable, selected, mediaType, persistent, } = this.props;
        const { isMenuExpanded } = this.state;
        return error
            ? cx('overlay', { error, active: isMenuExpanded })
            : cx('overlay', mediaType, {
                active: isMenuExpanded,
                selectable,
                selected,
                // Yes, you right. We put "persistent" class when it is NOT persistent. ðŸ¤¦
                persistent: !persistent,
                noHover,
            });
    }
    render() {
        const { error, noHover, mediaName, persistent, actions } = this.props;
        const titleText = error || !mediaName ? '' : mediaName;
        const menuTriggerColor = !persistent ? 'white' : undefined;
        return (React.createElement(Overlay, { hasError: !!error, noHover: noHover, className: this.wrapperClassNames },
            React.createElement(TopRow, { className: 'top-row' },
                this.errorLine(),
                React.createElement(TitleWrapper, { className: 'title' }, titleText ? (React.createElement(Ellipsify, { testId: "media-card-file-name", text: titleText, lines: 2 })) : null),
                this.tickBox()),
            React.createElement(BottomRow, { className: 'bottom-row' },
                React.createElement(LeftColumn, null, this.bottomLeftColumn()),
                React.createElement(RightColumn, null, actions ? (React.createElement(CardActions, { actions: actions, onToggle: this.onMenuToggle, triggerColor: menuTriggerColor })) : null))));
    }
    errorLine() {
        const { error, alt } = this.props;
        return (error && (React.createElement(React.Fragment, null,
            React.createElement(ErrorLine, null,
                React.createElement(ErrorMessage, null, error)),
            alt && (React.createElement(ErrorLine, null,
                React.createElement(AltWrapper, null, alt))))));
    }
    tickBox() {
        const { selected, selectable } = this.props;
        const tick = React.createElement(TickIcon, { label: "tick" });
        const className = cx('tickbox', { selected });
        return selectable && React.createElement(TickBox, { className: className },
            " ",
            tick,
            " ");
    }
    bottomLeftColumn() {
        const { error, onRetry } = this.props;
        if (error) {
            if (!onRetry) {
                return React.createElement(ErrorIcon, null);
            }
            return (React.createElement(ErrorWrapper, null,
                React.createElement(ErrorIcon, null),
                React.createElement(RetryWithAnalytics, { onClick: onRetry },
                    React.createElement(FormattedMessage, Object.assign({}, messages.retry)))));
        }
        else {
            const { mediaType, subtitle, icon } = this.props;
            const classNames = cx('metadata');
            const fileIcon = mediaType || icon ? (React.createElement(FileIcon, { mediaType: mediaType, iconUrl: icon })) : null;
            const subtitleEl = subtitle ? (React.createElement(Subtitle, { className: "file-size" }, subtitle)) : null;
            return (React.createElement("div", null,
                React.createElement(Metadata, { className: classNames },
                    fileIcon,
                    subtitleEl)));
        }
    }
    removeBtnClick(handler) {
        return (e) => {
            e.preventDefault();
            e.stopPropagation();
            handler();
        };
    }
}
CardOverlay.defaultProps = {
    actions: [],
    mediaName: '',
};
//# sourceMappingURL=index.js.map