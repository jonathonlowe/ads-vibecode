"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var analytics_next_1 = require("@atlaskit/analytics-next");
var files_1 = require("../files");
var breakpoint_1 = require("../utils/breakpoint");
var cardDimensions_1 = require("../utils/cardDimensions");
var isValidPercentageUnit_1 = require("../utils/isValidPercentageUnit");
var getCSSUnitValue_1 = require("../utils/getCSSUnitValue");
var getElementDimension_1 = require("../utils/getElementDimension");
var styled_1 = require("./styled");
var analytics_1 = require("../utils/analytics");
var actions_1 = require("../actions");
var getErrorMessage_1 = require("../utils/getErrorMessage");
var media_ui_1 = require("@atlaskit/media-ui");
/**
 * This is classic vanilla CardView class. To create an instance of class one would need to supply
 * `createAnalyticsEvent` prop to satisfy it's Analytics Events needs.
 */
var CardViewBase = /** @class */ (function (_super) {
    tslib_1.__extends(CardViewBase, _super);
    function CardViewBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.divRef = react_1.default.createRef();
        _this.renderFileNewExperience = function () {
            // Let's replace this with the new experience
            return null;
        };
        _this.renderFile = function () {
            var _a = _this.props, status = _a.status, metadata = _a.metadata, dataURI = _a.dataURI, progress = _a.progress, onRetry = _a.onRetry, resizeMode = _a.resizeMode, dimensions = _a.dimensions, selectable = _a.selectable, selected = _a.selected, disableOverlay = _a.disableOverlay, previewOrientation = _a.previewOrientation, alt = _a.alt, onDisplayImage = _a.onDisplayImage, actions = _a.actions;
            var _b = metadata || {}, name = _b.name, mediaType = _b.mediaType, size = _b.size;
            var actionsWithDetails = metadata && actions ? actions_1.attachDetailsToActions(actions, metadata) : [];
            var errorMessage = getErrorMessage_1.getErrorMessage(status);
            var fileSize = !size ? '' : media_ui_1.toHumanReadableMediaSize(size);
            return (react_1.default.createElement(files_1.FileCardImageView, { error: errorMessage, dimensions: dimensions, selectable: selectable, selected: selected, dataURI: dataURI, mediaName: name, mediaType: mediaType, fileSize: fileSize, status: status, progress: progress, resizeMode: resizeMode, onRetry: onRetry, onDisplayImage: onDisplayImage, actions: actionsWithDetails, disableOverlay: disableOverlay, previewOrientation: previewOrientation, alt: alt }));
        };
        return _this;
    }
    CardViewBase.prototype.componentDidMount = function () {
        this.saveElementWidth();
    };
    Object.defineProperty(CardViewBase.prototype, "width", {
        // This width is only used to calculate breakpoints, dimensions are passed down as
        // integrator pass it to the root component
        get: function () {
            var elementWidth = this.state.elementWidth;
            if (elementWidth) {
                return elementWidth;
            }
            var width = (this.props.dimensions || { width: undefined }).width;
            if (!width) {
                return cardDimensions_1.defaultImageCardDimensions.width;
            }
            return getCSSUnitValue_1.getCSSUnitValue(width);
        },
        enumerable: true,
        configurable: true
    });
    // If the dimensions.width is a percentage, we need to transform it
    // into a pixel value in order to get the right breakpoints applied.
    CardViewBase.prototype.saveElementWidth = function () {
        var dimensions = this.props.dimensions;
        if (!dimensions) {
            return;
        }
        var width = dimensions.width;
        if (width && isValidPercentageUnit_1.isValidPercentageUnit(width) && this.divRef.current) {
            var elementWidth = getElementDimension_1.getElementDimension(this.divRef.current, 'width');
            this.setState({ elementWidth: elementWidth });
        }
    };
    CardViewBase.prototype.render = function () {
        var _a = this.props, dimensions = _a.dimensions, appearance = _a.appearance, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, testId = _a.testId, featureFlags = _a.featureFlags;
        var wrapperDimensions = dimensions
            ? dimensions
            : cardDimensions_1.getDefaultCardDimensions(appearance);
        var isNewExpFeatureFlagOn = featureFlags
            ? featureFlags.enableNewExperience
            : false;
        return (react_1.default.createElement(styled_1.Wrapper, { "data-testid": testId || 'media-card-view', shouldUsePointerCursor: true, breakpointSize: breakpoint_1.breakpointSize(this.width), dimensions: wrapperDimensions, onClick: onClick, onMouseEnter: onMouseEnter, innerRef: this.divRef }, isNewExpFeatureFlagOn
            ? this.renderFileNewExperience()
            : this.renderFile()));
    };
    CardViewBase.defaultProps = {
        appearance: 'auto',
    };
    return CardViewBase;
}(react_1.default.Component));
exports.CardViewBase = CardViewBase;
exports.CardView = analytics_next_1.withAnalyticsEvents({
    onClick: analytics_1.createAndFireMediaEvent({
        eventType: 'ui',
        action: 'clicked',
        actionSubject: 'mediaCard',
    }),
})(CardViewBase);
//# sourceMappingURL=cardView.js.map