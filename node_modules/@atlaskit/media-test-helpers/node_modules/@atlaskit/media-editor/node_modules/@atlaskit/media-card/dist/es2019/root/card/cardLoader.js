import React from 'react';
import { CardLoading } from '../..';
export default class CardLoader extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            Card: CardLoader.Card,
            MediaCardErrorBoundary: CardLoader.MediaCardErrorBoundary,
        };
    }
    async componentDidMount() {
        if (!this.state.Card) {
            try {
                const [mediaClient, cardModule, mediaCardErrorBoundaryModule,] = await Promise.all([
                    import(
                    /* webpackChunkName:"@atlaskit-media-client" */ '@atlaskit/media-client'),
                    import(/* webpackChunkName:"@atlaskit-internal_Card" */ './index'),
                    import(
                    /* webpackChunkName:"@atlaskit-internal_MediaCardErrorBoundary" */ '../media-card-analytics-error-boundary'),
                ]);
                CardLoader.Card = mediaClient.withMediaClient(cardModule.Card);
                CardLoader.MediaCardErrorBoundary =
                    mediaCardErrorBoundaryModule.default;
                this.setState({
                    Card: CardLoader.Card,
                    MediaCardErrorBoundary: CardLoader.MediaCardErrorBoundary,
                });
            }
            catch (error) {
                // TODO [MS-2278]: Add operational error to catch async import error
            }
        }
    }
    render() {
        const { dimensions, testId } = this.props;
        const { Card, MediaCardErrorBoundary } = this.state;
        if (!Card || !MediaCardErrorBoundary) {
            return React.createElement(CardLoading, { testId: testId, dimensions: dimensions });
        }
        return (React.createElement(MediaCardErrorBoundary, null,
            React.createElement(Card, Object.assign({}, this.props))));
    }
}
CardLoader.displayName = 'AsyncCard';
//# sourceMappingURL=cardLoader.js.map