import { __assign } from "tslib";
/** @jsx jsx */
import { jsx } from '@emotion/core';
import { Fragment as F } from 'react';
import EditorCloseIcon from '@atlaskit/icon/glyph/editor/close';
import ShortcutIcon from '@atlaskit/icon/glyph/shortcut';
import Button from '@atlaskit/button';
import { N100, N30A } from '@atlaskit/theme/colors';
import { FormattedMessage } from 'react-intl';
import { gs } from '../utils';
import { Icon } from './Icon';
import { MetadataList } from './MetadataList';
import { Byline } from './Byline';
import { messages } from '../../messages';
export var Header = function (_a) {
    var onClose = _a.onClose, title = _a.title, label = _a.label, _b = _a.metadata, metadata = _b === void 0 ? { items: [] } : _b, icon = _a.icon, providerName = _a.providerName, url = _a.url, download = _a.download, byline = _a.byline, onViewActionClick = _a.onViewActionClick, onDownloadActionClick = _a.onDownloadActionClick;
    return (jsx("div", { style: {
            paddingLeft: gs(3),
            paddingRight: gs(3),
            paddingBottom: gs(2),
            paddingTop: gs(2),
        } },
        jsx("div", { style: {
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'baseline',
                borderBottom: "1px solid " + N30A,
            } },
            jsx("div", null,
                jsx("div", { css: { display: 'flex' } },
                    icon && jsx(Icon, __assign({}, icon)),
                    jsx("div", { css: { paddingLeft: gs(2), paddingBottom: gs(2) } },
                        jsx("h3", null, title),
                        jsx("div", { css: { color: N100 } }, (metadata.items.length && (jsx(MetadataList, { items: metadata.items }))) || jsx(Byline, null, byline))))),
            jsx("div", null,
                download && (jsx(Button, { appearance: "primary", href: download, onClick: onDownloadActionClick },
                    jsx(FormattedMessage, __assign({}, messages.download)))),
                url && (jsx(Button, { href: url, target: "_blank", appearance: "link", testId: "preview-view-action", iconAfter: jsx(ShortcutIcon, { size: "small", label: "go to source" }), onClick: onViewActionClick }, providerName ? (jsx(F, null,
                    jsx(FormattedMessage, __assign({}, messages.viewIn)),
                    " ",
                    providerName)) : (jsx(FormattedMessage, __assign({}, messages.viewOriginal))))),
                jsx(Button, { appearance: "subtle", iconBefore: jsx(EditorCloseIcon, { label: label }), onClick: onClose })))));
};
//# sourceMappingURL=ModalHeader.js.map