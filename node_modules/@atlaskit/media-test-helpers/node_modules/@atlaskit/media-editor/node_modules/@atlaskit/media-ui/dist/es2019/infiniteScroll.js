import React from 'react';
import { Component } from 'react';
import debounce from 'lodash.debounce';
export class InfiniteScroll extends Component {
    constructor(props) {
        super(props);
        this.scrollHeight = 0;
        this.checkThreshold = () => {
            const div = this.div.current;
            if (div === null) {
                return;
            }
            const threshold = this.props.threshold || 0;
            const position = div.scrollTop + div.offsetHeight;
            const thresholdModifier = 0.1;
            const adjustedThreshold = Math.min(threshold, div.scrollHeight * thresholdModifier);
            const thresholdReached = position > this.scrollHeight &&
                position > div.scrollHeight - adjustedThreshold;
            if (thresholdReached) {
                this.scrollHeight = div.scrollHeight;
                if (this.props.onThresholdReached) {
                    this.props.onThresholdReached();
                }
            }
        };
        this.checkThresholdDebounce = debounce(this.checkThreshold, this.props.delay, {
            leading: true,
            trailing: true,
        });
        this.div = React.createRef();
    }
    componentDidMount() {
        this.checkThresholdDebounce();
    }
    componentDidUpdate() {
        this.checkThresholdDebounce();
    }
    render() {
        const { width, height, children } = this.props;
        return (React.createElement("div", { ref: this.div, style: {
                width,
                height,
                overflowX: 'hidden',
                overflowY: 'auto',
                msOverflowStyle: 'scrollbar',
                display: 'inline-block',
            }, onScroll: this.checkThresholdDebounce }, children));
    }
}
InfiniteScroll.defaultProps = {
    width: '100%',
    delay: 500,
    threshold: 100,
};
//# sourceMappingURL=infiniteScroll.js.map