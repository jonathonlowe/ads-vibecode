"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var styled_1 = require("./styled");
var handlers_1 = require("../../BlockCard/utils/handlers");
exports.ExpandedFrame = function (_a) {
    var _b = _a.isPlaceholder, isPlaceholder = _b === void 0 ? false : _b, children = _a.children, onClick = _a.onClick, icon = _a.icon, text = _a.text, isSelected = _a.isSelected, isFrameVisible = _a.isFrameVisible, isVisible = _a.isVisible, href = _a.href, minWidth = _a.minWidth, maxWidth = _a.maxWidth, testId = _a.testId, inheritDimensions = _a.inheritDimensions;
    var isInteractive = function () {
        return !isPlaceholder && (Boolean(href) || Boolean(onClick));
    };
    var handleClick = function (event) { return handlers_1.handleClickCommon(event, onClick); };
    var renderHeader = function () { return (react_1.default.createElement(styled_1.Header, { className: "embed-header" },
        react_1.default.createElement(styled_1.IconWrapper, { isPlaceholder: isPlaceholder }, !isPlaceholder && icon),
        react_1.default.createElement(styled_1.TextWrapper, { isPlaceholder: isPlaceholder }, !isPlaceholder && (react_1.default.createElement("a", { href: href, onClick: handleClick }, text))))); };
    var renderContent = function () { return (react_1.default.createElement(styled_1.Content, { isInteractive: isInteractive() }, children)); };
    if (!isPlaceholder && href) {
        return (react_1.default.createElement(styled_1.LinkWrapper, { className: styled_1.className, isInteractive: isInteractive(), isSelected: isSelected, isFrameVisible: isFrameVisible, minWidth: minWidth, maxWidth: maxWidth, isVisible: isVisible, "data-testid": testId, inheritDimensions: inheritDimensions },
            renderHeader(),
            renderContent()));
    }
    else {
        return (react_1.default.createElement(styled_1.Wrapper, { className: styled_1.className, isInteractive: isInteractive(), isSelected: isSelected, minWidth: minWidth, maxWidth: maxWidth, isVisible: isVisible, "data-testid": testId },
            renderHeader(),
            renderContent()));
    }
};
//# sourceMappingURL=ExpandedFrame.js.map