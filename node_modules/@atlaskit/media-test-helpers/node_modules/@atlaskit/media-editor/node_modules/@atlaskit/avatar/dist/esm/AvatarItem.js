import { __assign, __makeTemplateObject } from "tslib";
import { css, jsx } from '@emotion/core';
import { B200, backgroundActive, backgroundHover, } from '@atlaskit/theme/colors';
import { borderRadius, gridSize } from '@atlaskit/theme/constants';
import Text from './Text';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
var AvatarItem = function (_a) {
    var avatar = _a.avatar, _b = _a.backgroundColor, backgroundColor = _b === void 0 ? 'transparent' : _b, component = _a.component, isTruncationDisabled = _a.isTruncationDisabled, href = _a.href, isDisabled = _a.isDisabled, onClick = _a.onClick, primaryText = _a.primaryText, secondaryText = _a.secondaryText, target = _a.target, testId = _a.testId;
    var Element = component || getCustomElement(href, onClick);
    return (jsx(Element, __assign({ onClick: function (event) {
            if (isDisabled || typeof onClick !== 'function')
                return;
            onClick(event);
        }, css: css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        align-items: center;\n        background-color: ", ";\n        border-radius: ", "px;\n        border: 2px solid transparent;\n        box-sizing: border-box;\n        color: inherit;\n        display: flex;\n        font-size: inherit;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 1;\n        outline: none;\n        margin: 0;\n        padding: ", "px;\n        text-align: left;\n        text-decoration: none;\n        width: 100%;\n        cursor: pointer;\n\n        ", "\n\n        ", "\n      "], ["\n        align-items: center;\n        background-color: ", ";\n        border-radius: ", "px;\n        border: 2px solid transparent;\n        box-sizing: border-box;\n        color: inherit;\n        display: flex;\n        font-size: inherit;\n        font-style: normal;\n        font-weight: normal;\n        line-height: 1;\n        outline: none;\n        margin: 0;\n        padding: ", "px;\n        text-align: left;\n        text-decoration: none;\n        width: 100%;\n        cursor: pointer;\n\n        ",
            "\n\n        ",
            "\n      "])), backgroundColor, borderRadius(), gridSize() * 2, (onClick || href) &&
            "\n          :hover {\n            background-color: " + backgroundHover() + ";\n          }\n\n          :focus {\n            border-color: " + B200 + ";\n          }\n\n          :active {\n            background-color: " + backgroundActive() + ";\n          }\n        ", isDisabled &&
            "\n          cursor: not-allowed;\n          opacity: 0.75;\n          pointer-events: none;\n        ") }, (href && target && getLinkProps(href, target)), (onClick && getButtonProps(isDisabled)), (!component
        ? { 'data-testid': testId && testId + "--itemInner" }
        : { testId: testId && testId + "--itemInner" })),
        avatar,
        jsx("div", { css: {
                maxWidth: '100%',
                minWidth: 0,
                flex: '1 1 100%',
                lineHeight: '1.4',
                paddingLeft: gridSize() + "px",
            } },
            jsx(Text, { truncate: !isTruncationDisabled }, primaryText),
            jsx(Text, { secondary: true, truncate: !isTruncationDisabled }, secondaryText))));
};
export default AvatarItem;
var templateObject_1;
//# sourceMappingURL=AvatarItem.js.map