import { __assign, __makeTemplateObject } from "tslib";
/** @jsx jsx */
import { useCallback, } from 'react';
import { css, jsx } from '@emotion/core';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { B200, background, N70A } from '@atlaskit/theme/colors';
import AvatarImage from './AvatarImage';
import { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';
import { PresenceWrapper } from './Presence';
import { StatusWrapper } from './Status';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
import { name as packageName, version as packageVersion } from './version.json';
var Avatar = function (_a) {
    var _b = _a.appearance, appearance = _b === void 0 ? 'circle' : _b, borderColor = _a.borderColor, component = _a.component, href = _a.href, isDisabled = _a.isDisabled, name = _a.name, onClick = _a.onClick, presence = _a.presence, _c = _a.size, size = _c === void 0 ? 'medium' : _c, src = _a.src, stackIndex = _a.stackIndex, status = _a.status, target = _a.target, testId = _a.testId;
    var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;
    var avatarSize = AVATAR_SIZES[size];
    var avatarRadius = AVATAR_RADIUS[size];
    var customPresenceNode = typeof presence === 'object' ? presence : null;
    var customStatusNode = typeof status === 'object' ? status : null;
    var isValidIconSize = size !== 'xxlarge' && size !== 'xsmall';
    var guardedClick = useCallback(function (event) {
        if (isDisabled || typeof onClick !== 'function')
            return;
        var analyticsEvent = createAnalyticsEvent({
            action: 'clicked',
            actionSubject: 'avatar',
            attributes: {
                componentName: 'avatar',
                packageName: packageName,
                packageVersion: packageVersion,
            },
        });
        onClick(event, analyticsEvent);
        analyticsEvent.fire('atlaskit');
    }, [createAnalyticsEvent, isDisabled, onClick]);
    var Element = component || getCustomElement(href, onClick);
    return (jsx("div", { "data-testid": testId, style: {
            display: 'inline-block',
            position: 'relative',
            outline: 0,
            zIndex: stackIndex,
            height: avatarSize + 4 + "px",
            width: avatarSize + 4 + "px",
        } },
        jsx(Element, __assign({ css: css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n            height: ", "px;\n            width: ", "px;\n            align-items: stretch;\n            background-color: ", ";\n            border: 0;\n            border-radius: ", ";\n            padding: ", "px;\n            box-sizing: content-box;\n            cursor: inherit;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            outline: none;\n            overflow: hidden;\n            position: static;\n            transform: translateZ(0);\n            transition: opacity 200ms, background-color 200ms ease-out;\n\n            &::-moz-focus-inner {\n              border: 0;\n              margin: 0;\n              padding: 0;\n            }\n\n            &::after {\n              background-color: transparent;\n              border-radius: ", ";\n              bottom: ", "px;\n              content: ' ';\n              left: ", "px;\n              opacity: 0;\n              pointer-events: none;\n              position: absolute;\n              right: ", "px;\n              top: ", "px;\n              transition: opacity 200ms;\n            }\n            ", "\n\n            ", "\n\n            ", "\n          "], ["\n            height: ", "px;\n            width: ", "px;\n            align-items: stretch;\n            background-color: ", ";\n            border: 0;\n            border-radius: ",
                ";\n            padding: ", "px;\n            box-sizing: content-box;\n            cursor: inherit;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            outline: none;\n            overflow: hidden;\n            position: static;\n            transform: translateZ(0);\n            transition: opacity 200ms, background-color 200ms ease-out;\n\n            &::-moz-focus-inner {\n              border: 0;\n              margin: 0;\n              padding: 0;\n            }\n\n            &::after {\n              background-color: transparent;\n              border-radius: ",
                ";\n              bottom: ", "px;\n              content: ' ';\n              left: ", "px;\n              opacity: 0;\n              pointer-events: none;\n              position: absolute;\n              right: ", "px;\n              top: ", "px;\n              transition: opacity 200ms;\n            }\n            ", "\n\n            ",
                "\n\n            ",
                "\n          "])), avatarSize, avatarSize, borderColor || background(), appearance === 'circle'
                ? '50%'
                : avatarRadius + BORDER_WIDTH + "px", BORDER_WIDTH, appearance === 'circle' ? '50%' : avatarRadius + "px", BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, stackIndex && "position: relative;", Boolean(href || onClick) &&
                "\n              cursor: pointer;\n\n              :focus {\n                outline: none;\n                background-color: " + B200 + ";\n              }\n\n              :active,\n              :hover {\n                &::after {\n                  background-color: " + N70A + ";\n                  opacity: 1;\n                }\n              }\n\n              :active {\n                transform: scale(0.9);\n              }\n            ", isDisabled &&
                "\n                cursor: not-allowed;\n\n                &::after {\n                  opacity: 1;\n                  pointer-events: none;\n                  background-color: rgba(255, 255, 255, 0.7);\n                }\n              ") }, (href && getLinkProps(href, target)), (!href && onClick && getButtonProps(isDisabled)), (!component
            ? { 'data-testid': testId && testId + "--inner" }
            : { testId: testId && testId + "--inner" }), { onClick: guardedClick }),
            jsx(AvatarImage, { alt: name, appearance: appearance, size: size, src: src })),
        isValidIconSize && presence && !status && (jsx(PresenceWrapper, { appearance: appearance, size: size, presence: !customPresenceNode && presence, testId: testId }, customPresenceNode)),
        isValidIconSize && status && (jsx(StatusWrapper, { appearance: appearance, size: size, borderColor: borderColor, status: !customStatusNode && status, testId: testId }, customStatusNode))));
};
export default Avatar;
var templateObject_1;
//# sourceMappingURL=Avatar.js.map