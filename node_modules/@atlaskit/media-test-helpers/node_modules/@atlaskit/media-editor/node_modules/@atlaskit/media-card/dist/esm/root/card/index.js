import { __assign, __awaiter, __extends, __generator, __read, __spread } from "tslib";
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import DownloadIcon from '@atlaskit/icon/glyph/download';
import { addFileAttrsToUrl, globalMediaEventEmitter, isDifferentIdentifier, isFileIdentifier, isImageRepresentationReady, isPreviewableType, RECENTS_COLLECTION, } from '@atlaskit/media-client';
import { MediaViewer } from '@atlaskit/media-viewer';
import { IntlProvider } from 'react-intl';
import { CardView } from '../cardView';
import { LazyContent } from '../../utils/lazyContent';
import { getDataURIDimension } from '../../utils/getDataURIDimension';
import { getFilePreviewFromFileState, } from '../../utils/getFilePreviewFromFileState';
import { extendMetadata } from '../../utils/metadata';
import { isBigger } from '../../utils/dimensionComparer';
import { getCardProgressFromFileState, getCardStatus, getCardStatusFromFileState, } from './getCardStatus';
import { InlinePlayer } from '../inlinePlayer';
import { createAndFireCustomMediaEvent, fileIsPreviewable, getAnalyticsErrorStateAttributes, getAnalyticsStatus, getBaseAnalyticsContext, getCopiedFileAnalyticsPayload, getFileAttributes, getLoadingStatusAnalyticsPayload, getMediaCardAnalyticsContext, getMediaCardCommencedAnalyticsPayload, hasFilenameAndFilesize, } from '../../utils/analytics';
import { MediaAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { objectURLCache } from './objectURLCache';
var CardBase = /** @class */ (function (_super) {
    __extends(CardBase, _super);
    function CardBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasBeenMounted = false;
        _this.lastAction = undefined;
        _this.lastErrorState = {};
        _this.cardRef = React.createRef();
        _this.state = {
            status: 'loading',
            isCardVisible: !_this.props.isLazy,
            previewOrientation: 1,
            isPlayingFile: false,
        };
        // we add a listener for each of the cards on the page
        // and then check if the triggered listener is from the card
        // that contains a div in current window.getSelection()
        // won't work in IE11
        _this.onCopyListener = function () {
            if (typeof window.getSelection === 'function') {
                var selection = window.getSelection();
                if (_this.cardRef.current &&
                    _this.cardRef.current.divRef.current instanceof Node &&
                    selection &&
                    selection.containsNode &&
                    selection.containsNode(_this.cardRef.current.divRef.current, true)) {
                    _this.fireFileCopiedAnalytics();
                }
            }
        };
        _this.shouldRefetchImage = function (current, next) {
            if (!current || !next) {
                return false;
            }
            return isBigger(current, next);
        };
        _this.shouldFireLoadingStatusAnalyticsEvent = function (action, errorState) {
            var previousFailReason = _this.lastErrorState && _this.lastErrorState.failReason;
            var previousErrorMessage = _this.lastErrorState && _this.lastErrorState.error;
            var isDifferentErrorState = errorState.failReason !== previousFailReason ||
                errorState.error !== previousErrorMessage;
            var isDifferentAction = action !== _this.lastAction;
            return isDifferentAction || isDifferentErrorState;
        };
        _this.fireLoadingStatusAnalyticsEvent = function (_a) {
            var id = _a.id, status = _a.status, metadata = _a.metadata, error = _a.error;
            var createAnalyticsEvent = _this.props.createAnalyticsEvent;
            var previewable = fileIsPreviewable(metadata);
            var hasMinimalData = hasFilenameAndFilesize(metadata);
            var action = getAnalyticsStatus(previewable, hasMinimalData, status);
            var errorState = getAnalyticsErrorStateAttributes(previewable, hasMinimalData, _this.lastFileState, error);
            if (action &&
                _this.shouldFireLoadingStatusAnalyticsEvent(action, errorState)) {
                _this.lastAction = action;
                _this.lastErrorState = errorState;
                var fileAttributes = getFileAttributes(metadata, _this.lastFileState && _this.lastFileState.status);
                createAndFireCustomMediaEvent(getLoadingStatusAnalyticsPayload(action, id, fileAttributes, errorState), createAnalyticsEvent);
            }
        };
        _this.fireFileCopiedAnalytics = function () {
            var _a = _this.props, createAnalyticsEvent = _a.createAnalyticsEvent, identifier = _a.identifier;
            createAndFireCustomMediaEvent(getCopiedFileAnalyticsPayload(identifier), createAnalyticsEvent);
        };
        _this.safeSetState = function (state) {
            if (_this.hasBeenMounted) {
                _this.setState(state);
            }
        };
        _this.unsubscribe = function () {
            if (_this.subscription) {
                _this.subscription.unsubscribe();
            }
            if (_this.hasBeenMounted) {
                _this.setState({ dataURI: undefined });
            }
            _this.lastAction = undefined;
            _this.lastErrorState = {};
        };
        // This method is called when card fails and user press 'Retry'
        _this.onRetry = function () {
            _this.lastAction = undefined;
            _this.lastErrorState = {};
            _this.fireCardCommencedAnalytics();
            _this.updateStateForIdentifier();
        };
        _this.onCardViewClick = function (event, analyticsEvent) {
            var _a = _this.props, identifier = _a.identifier, useInlinePlayer = _a.useInlinePlayer, shouldOpenMediaViewer = _a.shouldOpenMediaViewer;
            var metadata = _this.state.metadata;
            _this.onClick(event, analyticsEvent);
            if (!metadata) {
                return;
            }
            var isVideo = metadata && metadata.mediaType === 'video';
            if (useInlinePlayer && isVideo) {
                _this.setState({
                    isPlayingFile: true,
                });
            }
            else if (shouldOpenMediaViewer) {
                var mediaViewerSelectedItem = void 0;
                if (isFileIdentifier(identifier)) {
                    mediaViewerSelectedItem = {
                        id: identifier.id,
                        mediaItemType: 'file',
                        collectionName: identifier.collectionName,
                        occurrenceKey: identifier.occurrenceKey,
                    };
                }
                else {
                    mediaViewerSelectedItem = {
                        mediaItemType: 'external-image',
                        dataURI: identifier.dataURI,
                        name: identifier.name,
                    };
                }
                _this.setState({
                    mediaViewerSelectedItem: mediaViewerSelectedItem,
                });
            }
        };
        _this.onInlinePlayerError = function () {
            _this.setState({
                isPlayingFile: false,
            });
        };
        _this.renderInlinePlayer = function () {
            var _a = _this.props, identifier = _a.identifier, mediaClient = _a.mediaClient, dimensions = _a.dimensions, selected = _a.selected, testId = _a.testId;
            return (React.createElement(InlinePlayer, { mediaClient: mediaClient, dimensions: dimensions || {}, identifier: identifier, onError: _this.onInlinePlayerError, onClick: _this.onClick, selected: selected, ref: _this.cardRef, testId: testId }));
        };
        _this.onMediaViewerClose = function () {
            _this.setState({
                mediaViewerSelectedItem: undefined,
            });
        };
        _this.onDisplayImage = function () {
            var identifier = _this.props.identifier;
            var payloadPart;
            if (isFileIdentifier(identifier)) {
                payloadPart = {
                    fileId: identifier.id,
                    isUserCollection: identifier.collectionName === RECENTS_COLLECTION,
                };
            }
            else {
                payloadPart = {
                    fileId: identifier.dataURI,
                    isUserCollection: false,
                };
            }
            globalMediaEventEmitter.emit('media-viewed', __assign({ viewingLevel: 'minimal' }, payloadPart));
        };
        _this.renderMediaViewer = function () {
            var mediaViewerSelectedItem = _this.state.mediaViewerSelectedItem;
            var _a = _this.props, mediaClient = _a.mediaClient, identifier = _a.identifier, mediaViewerDataSource = _a.mediaViewerDataSource, contextId = _a.contextId;
            if (!mediaViewerSelectedItem) {
                return;
            }
            var collectionName = isFileIdentifier(identifier)
                ? identifier.collectionName || ''
                : '';
            var dataSource = mediaViewerDataSource || {
                list: [],
            };
            return ReactDOM.createPortal(React.createElement(MediaViewer, { collectionName: collectionName, dataSource: dataSource, mediaClientConfig: mediaClient.config, selectedItem: mediaViewerSelectedItem, onClose: _this.onMediaViewerClose, contextId: contextId }), document.body);
        };
        _this.renderCard = function () {
            var _a = _this.props, isLazy = _a.isLazy, appearance = _a.appearance, resizeMode = _a.resizeMode, dimensions = _a.dimensions, selectable = _a.selectable, selected = _a.selected, disableOverlay = _a.disableOverlay, alt = _a.alt, testId = _a.testId, featureFlags = _a.featureFlags;
            var _b = _this.state, progress = _b.progress, metadata = _b.metadata, dataURI = _b.dataURI, previewOrientation = _b.previewOrientation;
            var _c = _this, onRetry = _c.onRetry, onCardViewClick = _c.onCardViewClick, onDisplayImage = _c.onDisplayImage, actions = _c.actions, onMouseEnter = _c.onMouseEnter;
            var status = getCardStatus(_this.state, _this.props);
            var card = (React.createElement(CardView, { status: status, metadata: metadata, dataURI: dataURI, alt: alt, appearance: appearance, resizeMode: resizeMode, dimensions: dimensions, actions: actions, selectable: selectable, selected: selected, onClick: onCardViewClick, onMouseEnter: onMouseEnter, disableOverlay: disableOverlay, progress: progress, onRetry: onRetry, onDisplayImage: onDisplayImage, previewOrientation: previewOrientation, ref: _this.cardRef, testId: testId, featureFlags: featureFlags }));
            return isLazy ? (React.createElement(LazyContent, { placeholder: card, onRender: _this.onCardInViewport }, card)) : (card);
        };
        _this.onCardInViewport = function () {
            _this.setState({ isCardVisible: true });
        };
        _this.onClick = function (event, analyticsEvent) {
            var onClick = _this.props.onClick;
            var metadata = _this.state.metadata;
            if (onClick) {
                var cardEvent = {
                    event: event,
                    mediaItemDetails: metadata,
                };
                onClick(cardEvent, analyticsEvent);
            }
        };
        _this.onMouseEnter = function (event) {
            var onMouseEnter = _this.props.onMouseEnter;
            var metadata = _this.state.metadata;
            if (onMouseEnter) {
                var cardEvent = {
                    event: event,
                    mediaItemDetails: metadata,
                };
                onMouseEnter(cardEvent);
            }
        };
        return _this;
    }
    CardBase.prototype.componentDidMount = function () {
        this.hasBeenMounted = true;
        this.fireCardCommencedAnalytics();
        this.updateStateForIdentifier();
        document.addEventListener('copy', this.onCopyListener);
    };
    CardBase.prototype.componentDidUpdate = function (prevProps, prevState) {
        var prevMediaClient = prevProps.mediaClient, prevIdentifier = prevProps.identifier, prevDimensions = prevProps.dimensions;
        var prevIsCardVisible = prevState.isCardVisible;
        var _a = this.props, mediaClient = _a.mediaClient, identifier = _a.identifier, dimensions = _a.dimensions;
        var isCardVisible = this.state.isCardVisible;
        var isDifferent = isDifferentIdentifier(prevIdentifier, identifier);
        if ((prevIsCardVisible !== isCardVisible && isCardVisible) ||
            prevMediaClient !== mediaClient ||
            isDifferent ||
            this.shouldRefetchImage(prevDimensions, dimensions)) {
            this.fireCardCommencedAnalytics();
            this.updateStateForIdentifier();
        }
    };
    CardBase.prototype.componentWillUnmount = function () {
        this.hasBeenMounted = false;
        this.unsubscribe();
        document.removeEventListener('copy', this.onCopyListener);
    };
    CardBase.prototype.getId = function () {
        var identifier = this.props.identifier;
        if (identifier.mediaItemType === 'external-image') {
            return identifier.mediaItemType;
        }
        else {
            return identifier.id;
        }
    };
    CardBase.prototype.updateStateForIdentifier = function () {
        var _a = this.props, mediaClient = _a.mediaClient, identifier = _a.identifier;
        var isCardVisible = this.state.isCardVisible;
        if (!isCardVisible) {
            return;
        }
        if (identifier.mediaItemType === 'file') {
            this.unsubscribe();
            this.subscribeInternalFile(identifier, mediaClient);
        }
    };
    CardBase.prototype.getRequestedDimensions = function () {
        var dimensions = this.props.dimensions;
        var options = {
            dimensions: dimensions,
            element: this.cardRef.current && this.cardRef.current.divRef.current,
        };
        var width = getDataURIDimension('width', options);
        var height = getDataURIDimension('height', options);
        return {
            width: width,
            height: height,
        };
    };
    CardBase.prototype.addContextToDataURI = function (dataURI, fileId, metadata, _a, collectionName) {
        var width = _a.width, height = _a.height;
        var _b = this.props, contextId = _b.contextId, alt = _b.alt;
        if (!contextId) {
            return dataURI;
        }
        return addFileAttrsToUrl(dataURI, {
            id: fileId,
            collection: collectionName,
            contextId: contextId,
            mimeType: metadata.mimeType,
            name: metadata.name,
            size: metadata.size,
            width: width,
            height: height,
            alt: alt,
        });
    };
    CardBase.prototype.getObjectUrlFromBackendImageBlob = function (mediaClient, id, _a, collectionName) {
        var width = _a.width, height = _a.height;
        return __awaiter(this, void 0, void 0, function () {
            var resizeMode, mode, blob, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resizeMode = this.props.resizeMode;
                        mode = resizeMode === 'stretchy-fit' ? 'full-fit' : resizeMode;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, mediaClient.getImage(id, {
                                collection: collectionName,
                                mode: mode,
                                height: height,
                                width: width,
                                allowAnimated: true,
                            })];
                    case 2:
                        blob = _b.sent();
                        return [2 /*return*/, URL.createObjectURL(blob)];
                    case 3:
                        e_1 = _b.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CardBase.prototype.subscribeInternalFile = function (identifier, mediaClient) {
        var _this = this;
        var id = identifier.id, collectionName = identifier.collectionName, occurrenceKey = identifier.occurrenceKey;
        this.subscription = mediaClient.file
            .getFileState(id, { collectionName: collectionName, occurrenceKey: occurrenceKey })
            .subscribe({
            next: function (fileState) { return __awaiter(_this, void 0, void 0, function () {
                var dataURI, _a, dimensions, thisCardStatusUpdateTimestamp, metadata, shouldFetchRemotePreview, cacheKey, filePreview, err_1, originalDimensions, requestedDimensions, contextDimensions, status, progress;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            dataURI = this.state.dataURI;
                            _a = this.props.dimensions, dimensions = _a === void 0 ? {} : _a;
                            this.lastFileState = fileState;
                            thisCardStatusUpdateTimestamp = (performance || Date).now();
                            metadata = extendMetadata(fileState, this.state.metadata);
                            this.safeSetState({ metadata: metadata });
                            shouldFetchRemotePreview = isImageRepresentationReady(fileState) &&
                                metadata.mediaType &&
                                isPreviewableType(metadata.mediaType);
                            cacheKey = [id, dimensions.height, dimensions.width].join('-');
                            if (!dataURI && objectURLCache.has(cacheKey)) {
                                // No dataURI in state. Let's try and get one.
                                // First, we try to get one from the cache
                                dataURI = objectURLCache.get(cacheKey);
                            }
                            if (!!dataURI) return [3 /*break*/, 8];
                            filePreview = void 0;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, getFilePreviewFromFileState(fileState)];
                        case 2:
                            filePreview = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _b.sent();
                            // no preview could be fetched from FileState
                            filePreview = { orientation: 1 };
                            return [3 /*break*/, 4];
                        case 4:
                            originalDimensions = this.props.originalDimensions;
                            requestedDimensions = void 0;
                            if (!filePreview.src) return [3 /*break*/, 5];
                            dataURI = filePreview.src;
                            this.safeSetState({
                                previewOrientation: filePreview.orientation,
                            });
                            return [3 /*break*/, 7];
                        case 5:
                            if (!shouldFetchRemotePreview) return [3 /*break*/, 7];
                            requestedDimensions = this.getRequestedDimensions();
                            return [4 /*yield*/, this.getObjectUrlFromBackendImageBlob(mediaClient, id, requestedDimensions, collectionName)];
                        case 6:
                            dataURI = _b.sent();
                            _b.label = 7;
                        case 7:
                            if (dataURI) {
                                contextDimensions = originalDimensions ||
                                    requestedDimensions ||
                                    this.getRequestedDimensions();
                                dataURI = this.addContextToDataURI(dataURI, id, metadata, contextDimensions, collectionName);
                                // We store new dataURI into cache
                                objectURLCache.set(cacheKey, dataURI);
                            }
                            _b.label = 8;
                        case 8:
                            if (dataURI) {
                                // Finally we store retrieved dataURI into state
                                this.safeSetState({
                                    dataURI: dataURI,
                                });
                            }
                            status = getCardStatusFromFileState(fileState, dataURI);
                            this.fireLoadingStatusAnalyticsEvent({
                                id: id,
                                status: status,
                                metadata: metadata,
                            });
                            if (!this.lastCardStatusUpdateTimestamp ||
                                this.lastCardStatusUpdateTimestamp <= thisCardStatusUpdateTimestamp) {
                                progress = getCardProgressFromFileState(fileState, dataURI);
                                // These status and progress must not override values representing more recent FileState
                                /* next() start        some await() delay in next()        status & progress update
                                 * -------                    ------------------           ------------------------
                                 *   |----[1]FileState:uploading------>|                                 |
                                 *   |                                 |                                 |
                                 *   |----[2]FileState:uploading------>|                                 |
                                 *   |                                 |                                 |
                                 *   |                                 |----[2]FileState:uploading------>| Update status to `uploading`
                                 *   |----[3]FileState:processing----->|                                 |
                                 *   |                                 |----[3]FileState:processing----->| Update status to `complete`
                                 *   |                                 |                                 |
                                 *   |                                 |----[1]FileState:uploading------>| We do not want to update status to `uploading` again!
                                 *
                                 */
                                this.safeSetState({
                                    status: status,
                                    progress: progress,
                                });
                                this.lastCardStatusUpdateTimestamp = thisCardStatusUpdateTimestamp;
                            }
                            return [2 /*return*/];
                    }
                });
            }); },
            error: function (error) {
                _this.fireLoadingStatusAnalyticsEvent({
                    id: id,
                    status: 'error',
                    error: error,
                });
                _this.safeSetState({ error: error, status: 'error' });
            },
        });
    };
    CardBase.prototype.fireCardCommencedAnalytics = function () {
        var createAnalyticsEvent = this.props.createAnalyticsEvent;
        var isCardVisible = this.state.isCardVisible;
        if (!isCardVisible) {
            return;
        }
        var id = this.getId();
        createAndFireCustomMediaEvent(getMediaCardCommencedAnalyticsPayload(id), createAnalyticsEvent);
    };
    Object.defineProperty(CardBase.prototype, "actions", {
        get: function () {
            var _this = this;
            var _a = this.props, _b = _a.actions, actions = _b === void 0 ? [] : _b, identifier = _a.identifier;
            var _c = this.state, status = _c.status, metadata = _c.metadata;
            if (isFileIdentifier(identifier) && status === 'failed-processing') {
                var downloadAction = {
                    label: 'Download',
                    icon: React.createElement(DownloadIcon, { label: "Download" }),
                    handler: function () {
                        return _this.props.mediaClient.file.downloadBinary(identifier.id, metadata.name, identifier.collectionName);
                    },
                };
                return __spread([downloadAction], actions);
            }
            else {
                return actions;
            }
        },
        enumerable: true,
        configurable: true
    });
    CardBase.prototype.renderContent = function () {
        var _a = this.state, isPlayingFile = _a.isPlayingFile, mediaViewerSelectedItem = _a.mediaViewerSelectedItem;
        var innerContent = isPlayingFile
            ? this.renderInlinePlayer()
            : this.renderCard();
        return this.context.intl ? (innerContent) : (React.createElement(IntlProvider, { locale: "en" },
            React.createElement(React.Fragment, null,
                innerContent,
                mediaViewerSelectedItem ? this.renderMediaViewer() : null)));
    };
    CardBase.prototype.render = function () {
        var metadata = this.state.metadata;
        return (React.createElement(MediaAnalyticsContext, { data: getMediaCardAnalyticsContext(metadata, this.lastFileState) }, this.renderContent()));
    };
    CardBase.defaultProps = {
        appearance: 'auto',
        resizeMode: 'crop',
        isLazy: true,
        disableOverlay: false,
    };
    CardBase.getDerivedStateFromProps = function (props) {
        var identifier = props.identifier;
        if (identifier.mediaItemType === 'external-image') {
            var dataURI = identifier.dataURI, name_1 = identifier.name, mediaItemType = identifier.mediaItemType;
            return {
                status: 'complete',
                dataURI: dataURI,
                metadata: {
                    id: mediaItemType,
                    name: name_1 || dataURI,
                    mediaType: 'image',
                },
            };
        }
        return null;
    };
    return CardBase;
}(Component));
export { CardBase };
export var Card = withAnalyticsContext(getBaseAnalyticsContext())(withAnalyticsEvents()(CardBase));
//# sourceMappingURL=index.js.map