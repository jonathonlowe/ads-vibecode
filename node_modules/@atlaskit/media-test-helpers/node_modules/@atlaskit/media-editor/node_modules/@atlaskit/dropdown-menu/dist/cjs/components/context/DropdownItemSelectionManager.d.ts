import { Component, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { Behaviors, CachedItem } from '../../types';
interface Props {
    behavior: Behaviors;
    groupId: string;
    children?: ReactNode;
}
export default class DropdownItemSelectionManager extends Component<Props> {
    static childContextTypes: {
        [x: string]: PropTypes.Requireable<any>;
    };
    static contextTypes: {
        [x: string]: PropTypes.Validator<any>;
    };
    getChildContext(): {
        [x: string]: {
            isItemSelected: (itemId: string) => any;
            itemClicked: (clickedItemId: string) => void;
            setItemSelected: (itemId: string, isSelected?: boolean | undefined, defaultSelected?: boolean | undefined) => void;
        };
    };
    setItemSelected: (itemId: string, isSelected?: boolean | undefined, defaultSelected?: boolean | undefined) => void;
    setCheckboxItemSelected: (itemId: string, isSelected: boolean) => void;
    setRadioItemSelected: (itemId: string, isSelected: boolean) => void;
    isItemSelectedInCache: (itemId: string) => boolean;
    handleItemClicked: (clickedItemId: string) => void;
    hasAlreadyAppliedDefaultSelected: (itemId: string) => any;
    handleCheckboxItemClicked: (clickedItemId: string) => void;
    handleRadioItemClicked: (clickedItemId: string) => void;
    updateCacheContextWithSelections: (itemSelections: CachedItem[]) => void;
    render(): JSX.Element;
}
export {};
