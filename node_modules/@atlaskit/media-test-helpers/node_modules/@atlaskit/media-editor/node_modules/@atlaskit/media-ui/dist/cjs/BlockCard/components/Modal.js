"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var modal_dialog_1 = tslib_1.__importStar(require("@atlaskit/modal-dialog"));
var ModalHeader_1 = require("./ModalHeader");
var utils_1 = require("../utils");
var iframeStyles = {
    width: "100%",
    height: "calc(100% - " + utils_1.gs(3) + ")",
};
var ModalWithErrorBoundary = /** @class */ (function (_super) {
    tslib_1.__extends(ModalWithErrorBoundary, _super);
    function ModalWithErrorBoundary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModalWithErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        if (this.props.onOpenFailed) {
            this.props.onOpenFailed(error, errorInfo);
        }
    };
    ModalWithErrorBoundary.prototype.render = function () {
        return react_1.default.createElement(Modal, tslib_1.__assign({}, this.props));
    };
    return ModalWithErrorBoundary;
}(react_1.default.Component));
var Modal = function (_a) {
    var onClose = _a.onClose, onOpen = _a.onOpen, src = _a.src, testId = _a.testId, showModal = _a.showModal, providerName = _a.providerName, metadata = _a.metadata, icon = _a.icon, closeLabel = _a.closeLabel, iframeName = _a.iframeName, title = _a.title, url = _a.url, download = _a.download, byline = _a.byline, onViewActionClick = _a.onViewActionClick, onDownloadActionClick = _a.onDownloadActionClick;
    var _b = tslib_1.__read(react_1.useState(showModal), 2), isOpen = _b[0], setIsOpen = _b[1];
    return (react_1.default.createElement(modal_dialog_1.ModalTransition, null, isOpen && (react_1.default.createElement(modal_dialog_1.default, { height: "100%", width: "large", testId: testId, onOpenComplete: onOpen, components: {
            // TODO modal body wants to be original modal with height 100% - find out how to add
            Header: function (props) { return (react_1.default.createElement(ModalHeader_1.Header, tslib_1.__assign({}, props, { providerName: providerName, icon: icon, metadata: metadata, url: url, title: title, label: closeLabel, download: download, byline: byline, onViewActionClick: onViewActionClick, onDownloadActionClick: onDownloadActionClick }))); },
        }, onClose: function () {
            setIsOpen(false);
        }, onCloseComplete: onClose }, src ? (react_1.default.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0, src: src })) : (react_1.default.createElement("iframe", { style: iframeStyles, name: iframeName, frameBorder: 0 }))))));
};
exports.default = ModalWithErrorBoundary;
//# sourceMappingURL=Modal.js.map