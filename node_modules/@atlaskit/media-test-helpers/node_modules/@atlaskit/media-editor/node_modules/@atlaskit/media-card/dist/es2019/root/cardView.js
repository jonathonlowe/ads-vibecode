import React from 'react';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { FileCardImageView } from '../files';
import { breakpointSize } from '../utils/breakpoint';
import { defaultImageCardDimensions, getDefaultCardDimensions, } from '../utils/cardDimensions';
import { isValidPercentageUnit } from '../utils/isValidPercentageUnit';
import { getCSSUnitValue } from '../utils/getCSSUnitValue';
import { getElementDimension } from '../utils/getElementDimension';
import { Wrapper } from './styled';
import { createAndFireMediaEvent } from '../utils/analytics';
import { attachDetailsToActions } from '../actions';
import { getErrorMessage } from '../utils/getErrorMessage';
import { toHumanReadableMediaSize } from '@atlaskit/media-ui';
/**
 * This is classic vanilla CardView class. To create an instance of class one would need to supply
 * `createAnalyticsEvent` prop to satisfy it's Analytics Events needs.
 */
export class CardViewBase extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {};
        this.divRef = React.createRef();
        this.renderFileNewExperience = () => {
            // Let's replace this with the new experience
            return null;
        };
        this.renderFile = () => {
            const { status, metadata, dataURI, progress, onRetry, resizeMode, dimensions, selectable, selected, disableOverlay, previewOrientation, alt, onDisplayImage, actions, } = this.props;
            const { name, mediaType, size } = metadata || {};
            const actionsWithDetails = metadata && actions ? attachDetailsToActions(actions, metadata) : [];
            const errorMessage = getErrorMessage(status);
            const fileSize = !size ? '' : toHumanReadableMediaSize(size);
            return (React.createElement(FileCardImageView, { error: errorMessage, dimensions: dimensions, selectable: selectable, selected: selected, dataURI: dataURI, mediaName: name, mediaType: mediaType, fileSize: fileSize, status: status, progress: progress, resizeMode: resizeMode, onRetry: onRetry, onDisplayImage: onDisplayImage, actions: actionsWithDetails, disableOverlay: disableOverlay, previewOrientation: previewOrientation, alt: alt }));
        };
    }
    componentDidMount() {
        this.saveElementWidth();
    }
    // This width is only used to calculate breakpoints, dimensions are passed down as
    // integrator pass it to the root component
    get width() {
        const { elementWidth } = this.state;
        if (elementWidth) {
            return elementWidth;
        }
        const { width } = this.props.dimensions || { width: undefined };
        if (!width) {
            return defaultImageCardDimensions.width;
        }
        return getCSSUnitValue(width);
    }
    // If the dimensions.width is a percentage, we need to transform it
    // into a pixel value in order to get the right breakpoints applied.
    saveElementWidth() {
        const { dimensions } = this.props;
        if (!dimensions) {
            return;
        }
        const { width } = dimensions;
        if (width && isValidPercentageUnit(width) && this.divRef.current) {
            const elementWidth = getElementDimension(this.divRef.current, 'width');
            this.setState({ elementWidth });
        }
    }
    render() {
        const { dimensions, appearance, onClick, onMouseEnter, testId, featureFlags, } = this.props;
        const wrapperDimensions = dimensions
            ? dimensions
            : getDefaultCardDimensions(appearance);
        const isNewExpFeatureFlagOn = featureFlags
            ? featureFlags.enableNewExperience
            : false;
        return (React.createElement(Wrapper, { "data-testid": testId || 'media-card-view', shouldUsePointerCursor: true, breakpointSize: breakpointSize(this.width), dimensions: wrapperDimensions, onClick: onClick, onMouseEnter: onMouseEnter, innerRef: this.divRef }, isNewExpFeatureFlagOn
            ? this.renderFileNewExperience()
            : this.renderFile()));
    }
}
CardViewBase.defaultProps = {
    appearance: 'auto',
};
export const CardView = withAnalyticsEvents({
    onClick: createAndFireMediaEvent({
        eventType: 'ui',
        action: 'clicked',
        actionSubject: 'mediaCard',
    }),
})(CardViewBase);
//# sourceMappingURL=cardView.js.map