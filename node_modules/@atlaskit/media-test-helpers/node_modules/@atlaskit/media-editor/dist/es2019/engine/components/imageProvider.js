import { isImageRemote } from '@atlaskit/media-client';
export const urlImageLoader = (url) => {
    return new Promise((resolve, reject) => {
        const img = document.createElement('img');
        // For more details: https://webglfundamentals.org/webgl/lessons/webgl-cors-permission.html
        if (isImageRemote(url)) {
            img.crossOrigin = '';
        }
        img.onload = () => {
            resolve(img);
        };
        img.onerror = () => {
            reject(new Error(`Can't load image with url: ${url}`));
        };
        img.src = url;
    });
};
export class DefaultImageProvider {
    constructor(backImage, supplementaryCanvas) {
        this.backImage = backImage;
        this.supplementaryCanvas = supplementaryCanvas;
    }
    static create(imageLoader, supplementaryCanvas) {
        return imageLoader().then(img => new DefaultImageProvider(img, supplementaryCanvas));
    }
    get backImageUuid() {
        return 'default';
    }
    unload() { }
}
//# sourceMappingURL=imageProvider.js.map