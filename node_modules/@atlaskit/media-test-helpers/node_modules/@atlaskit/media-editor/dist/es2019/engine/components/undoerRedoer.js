import { Signal } from '../signal';
import { isMac, isWindows } from './platformDetector';
export class DefaultUndoerRedoer {
    constructor() {
        this.undo = new Signal();
        this.redo = new Signal();
        this.keyDownListener = (event) => this.keyDown(event);
        this.isUndoEnabled = false;
        this.isRedoEnabled = false;
        document.addEventListener('keydown', this.keyDownListener);
    }
    unload() {
        document.removeEventListener('keydown', this.keyDownListener);
    }
    undoEnabled() {
        this.isUndoEnabled = true;
    }
    undoDisabled() {
        this.isUndoEnabled = false;
    }
    redoEnabled() {
        this.isRedoEnabled = true;
    }
    redoDisabled() {
        this.isRedoEnabled = false;
    }
    keyDown(event) {
        const isModKeyPressed = isMac() ? event.metaKey : event.ctrlKey;
        const yKeyWithoutShift = event.key === 'y' && !event.shiftKey;
        const zKeyWithShift = event.key === 'z' && event.shiftKey;
        const zKeyWithoutShift = event.key === 'z' && !event.shiftKey;
        if (this.isUndoEnabled && isModKeyPressed && zKeyWithoutShift) {
            this.undo.emit({});
            event.preventDefault();
        }
        if (this.isRedoEnabled &&
            isModKeyPressed &&
            (isWindows() ? yKeyWithoutShift : zKeyWithShift)) {
            this.redo.emit({});
            event.preventDefault();
        }
    }
}
//# sourceMappingURL=undoerRedoer.js.map