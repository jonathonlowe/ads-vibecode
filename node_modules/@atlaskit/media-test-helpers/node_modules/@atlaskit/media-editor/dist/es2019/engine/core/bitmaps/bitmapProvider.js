import { Bitmap } from './bitmap';
const defaultFragmentPosition = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    uTopLeft: 0,
    vTopLeft: 0,
    uBottomRight: 0,
    vBottomRight: 0,
};
// Now this class supports only one image
export class BitmapProvider {
    constructor(imageProvider, gl) {
        this.imageProvider = imageProvider;
        this.gl = gl;
        this.bitmap = null;
        this.createBitmap();
        this.fragmentPosition = { ...defaultFragmentPosition };
    }
    unload() {
        this.destroyBitmap(false);
    }
    handleContextLost() {
        this.destroyBitmap(true);
    }
    handleContextRestored() {
        this.createBitmap();
    }
    createBitmap() {
        const { backImage, supplementaryCanvas } = this.imageProvider;
        this.bitmap = new Bitmap(backImage, this.gl, supplementaryCanvas);
    }
    destroyBitmap(contextLost) {
        if (this.bitmap) {
            this.bitmap.unload(contextLost);
        }
    }
    // Gets the index of the bitmap specified by its UUID. Later a bitmap will be referenced with its index.
    // Once an index assigned to the bitmap, it cannot change during the lifetime of the bitmap provider.
    // In case of failure returns -1, 0 is a valid value.
    getBitmapIndex(uuid) {
        if (uuid !== this.imageProvider.backImageUuid) {
            return -1;
        }
        return 0;
    }
    // Gets the bitmap dimensions
    getBitmapWidth() {
        return this.bitmap ? this.bitmap.size.width : 0;
    }
    getBitmapHeight() {
        return this.bitmap ? this.bitmap.size.height : 0;
    }
    getNumberOfFragments() {
        return this.bitmap ? this.bitmap.numberOfFragments : 0;
    }
    queryFragmentCoordinates(_, fragmentIndex) {
        if (!this.bitmap) {
            return false;
        }
        const position = this.bitmap.getFragmentPosition(fragmentIndex);
        if (position) {
            this.fragmentPosition = position;
            return true;
        }
        else {
            this.fragmentPosition = { ...defaultFragmentPosition };
            return false;
        }
    }
    getX() {
        return this.fragmentPosition.x;
    }
    getY() {
        return this.fragmentPosition.y;
    }
    getWidth() {
        return this.fragmentPosition.width;
    }
    getHeight() {
        return this.fragmentPosition.height;
    }
    getUTopLeft() {
        return this.fragmentPosition.uTopLeft;
    }
    getVTopLeft() {
        return this.fragmentPosition.vTopLeft;
    }
    getUBottomRight() {
        return this.fragmentPosition.uBottomRight;
    }
    getVBottomRight() {
        return this.fragmentPosition.vBottomRight;
    }
    bind(_, fragmentIndex) {
        if (!this.bitmap) {
            return false;
        }
        return this.bitmap.bindFragment(fragmentIndex);
    }
}
//# sourceMappingURL=bitmapProvider.js.map