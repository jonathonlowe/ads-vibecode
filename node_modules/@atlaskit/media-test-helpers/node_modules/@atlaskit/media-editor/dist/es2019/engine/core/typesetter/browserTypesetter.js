import { Typeset } from './typeset';
import { FontInfo } from './fontInfo';
// The core needs typesets to render text.
// This class is responsible for storing and providing typesets.
export class BrowserTypesetter {
    constructor(config) {
        this.config = config;
        this.typesets = [];
        this.fontInfo = new FontInfo(this.config.textHelperDiv);
    }
    unload() {
        this.typesets.forEach(typeset => typeset.unload());
    }
    // Creates a new typeset, returns its index.
    // The newly created typeset must exist until it is explicitly deleted with deleteTypeset() regardless context loss.
    createTypeset() {
        const typeset = new Typeset({
            ...this.config,
            fontInfo: this.fontInfo,
        });
        return this.typesets.push(typeset) - 1;
    }
    deleteTypeset(index) {
        this.typesets[index].unload();
    }
    getTypeset(index) {
        return this.typesets[index];
    }
    handleContextLost() {
        this.typesets.forEach(typeset => typeset.contextLost());
    }
    handleContextRestored() {
        this.typesets.forEach(typeset => typeset.contextRestored());
    }
}
//# sourceMappingURL=browserTypesetter.js.map