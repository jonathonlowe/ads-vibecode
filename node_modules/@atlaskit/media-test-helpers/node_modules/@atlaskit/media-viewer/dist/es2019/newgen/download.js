import React from 'react';
import { FormattedMessage } from 'react-intl';
import { messages } from '@atlaskit/media-ui';
import { isErrorFileState, isExternalImageIdentifier, } from '@atlaskit/media-client';
import { DownloadButtonWrapper } from './styled';
import { MediaButton } from '@atlaskit/media-ui';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { downloadButtonEvent, downloadErrorButtonEvent, } from './analytics/download';
import { channel } from './analytics';
import DownloadIcon from '@atlaskit/icon/glyph/download';
const downloadIcon = React.createElement(DownloadIcon, { label: "Download" });
// TODO: MS-1556
export const DownloadButton = withAnalyticsEvents({
    onClick: (createEvent, props) => {
        const ev = createEvent(props.analyticspayload);
        ev.fire(channel);
    },
})(MediaButton);
export const createItemDownloader = (file, mediaClient, collectionName) => () => {
    const id = file.id;
    const name = !isErrorFileState(file) ? file.name : undefined;
    return mediaClient.file.downloadBinary(id, name, collectionName);
};
export const ErrorViewDownloadButton = (props) => {
    const downloadEvent = downloadErrorButtonEvent(props.state, props.err);
    return (React.createElement(DownloadButtonWrapper, null,
        React.createElement(DownloadButton, { testId: "media-viewer-download-button", analyticspayload: downloadEvent, appearance: "primary", onClick: createItemDownloader(props.state, props.mediaClient, props.collectionName) },
            React.createElement(FormattedMessage, Object.assign({}, messages.download)))));
};
export const ToolbarDownloadButton = (props) => {
    const { state, mediaClient, identifier } = props;
    const downloadEvent = downloadButtonEvent(state);
    // TODO [MS-1731]: make it work for external files as well
    if (isExternalImageIdentifier(identifier)) {
        return null;
    }
    return (React.createElement(DownloadButton, { testId: "media-viewer-download-button", analyticspayload: downloadEvent, appearance: 'toolbar', onClick: createItemDownloader(state, mediaClient, identifier.collectionName), iconBefore: downloadIcon }));
};
export const DisabledToolbarDownloadButton = (React.createElement(MediaButton, { appearance: 'toolbar', isDisabled: true, iconBefore: downloadIcon }));
//# sourceMappingURL=download.js.map