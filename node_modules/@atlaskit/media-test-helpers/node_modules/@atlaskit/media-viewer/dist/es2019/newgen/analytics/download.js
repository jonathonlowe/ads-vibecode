import { packageAttributes, fileStateToFileGasPayload, } from './index';
const getBasePayload = (actionSubjectId) => ({
    eventType: 'ui',
    action: 'clicked',
    actionSubject: 'button',
    actionSubjectId,
});
const getBaseAttributes = (fileState) => ({
    ...fileStateToFileGasPayload(fileState),
    fileProcessingStatus: fileState.status,
    ...packageAttributes,
});
const downloadEvent = (fileState, actionSubjectId, failReason) => {
    const basePayload = getBasePayload(actionSubjectId);
    const baseAttributes = failReason
        ? {
            ...getBaseAttributes(fileState),
            failReason,
        }
        : getBaseAttributes(fileState);
    switch (fileState.status) {
        case 'processed':
        case 'uploading':
        case 'processing':
        case 'failed-processing':
            return {
                ...basePayload,
                attributes: {
                    ...baseAttributes,
                    fileSupported: fileState.mediaType !== 'unknown',
                },
            };
        case 'error':
            return {
                ...basePayload,
                attributes: {
                    ...baseAttributes,
                },
            };
    }
};
export function downloadErrorButtonEvent(state, err) {
    return downloadEvent(state, 'failedPreviewDownloadButton', err.errorName);
}
export function downloadButtonEvent(state) {
    return downloadEvent(state, 'downloadButton');
}
//# sourceMappingURL=download.js.map