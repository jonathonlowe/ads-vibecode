const BASE_ZOOM_LEVELS = [0.06, 0.12, 0.24, 0.48, 1, 1.5, 2, 4, 6, 8];
const sortNumbers = (nums) => nums.sort((a, b) => a - b); // default sorting is alphabetically
const deduplicated = (nums) => {
    return sortNumbers(nums).filter((num, pos) => pos === 0 || num !== nums[pos - 1]);
};
export class ZoomLevel {
    constructor(initialValue, selectedValue) {
        this.initialValue = initialValue;
        if (!selectedValue) {
            selectedValue = initialValue;
        }
        if (selectedValue < this.min) {
            this.value = this.min;
        }
        else if (selectedValue > this.max) {
            this.value = this.max;
        }
        else {
            this.value = selectedValue;
        }
    }
    get zoomLevels() {
        return deduplicated(sortNumbers(BASE_ZOOM_LEVELS.map(zoomLevel => zoomLevel * this.initialValue).concat(1))); // and that all levels are ordered
    }
    get min() {
        return this.zoomLevels[0];
    }
    get max() {
        return this.zoomLevels.slice(-1)[0];
    }
    get asPercentage() {
        return `${Math.round(this.value * 100)} %`;
    }
    zoomIn() {
        const index = this.zoomLevels.indexOf(this.value);
        const nextValue = this.zoomLevels[index + 1];
        return nextValue ? new ZoomLevel(this.initialValue, nextValue) : this;
    }
    zoomOut() {
        const index = this.zoomLevels.indexOf(this.value);
        const nextValue = this.zoomLevels[index - 1];
        return nextValue ? new ZoomLevel(this.initialValue, nextValue) : this;
    }
    fullyZoomIn() {
        return new ZoomLevel(this.initialValue, this.max);
    }
    fullyZoomOut() {
        return new ZoomLevel(this.initialValue, this.min);
    }
    get canZoomIn() {
        return this.value < this.max;
    }
    get canZoomOut() {
        return this.value > this.min;
    }
}
//# sourceMappingURL=zoomLevel.js.map