import React from 'react';
import { Component } from 'react';
import ArrowLeftCircleIcon from '@atlaskit/icon/glyph/chevron-left-circle';
import ArrowRightCircleIcon from '@atlaskit/icon/glyph/chevron-right-circle';
import { N800 } from '@atlaskit/theme/colors';
import { hideControlsClassName, MediaButton } from '@atlaskit/media-ui';
import { Shortcut } from '@atlaskit/media-ui';
import { withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { ArrowsWrapper, RightWrapper, LeftWrapper, Arrow } from './styled';
import { getSelectedIndex } from './utils';
import { channel } from './analytics';
import { createNavigationEvent, } from './analytics/navigation';
export class NavigationBase extends Component {
    constructor() {
        super(...arguments);
        this.fireAnalytics = (payload) => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                const ev = createAnalyticsEvent(payload);
                ev.fire(channel);
            }
        };
    }
    navigate(direction, source) {
        return () => {
            const { onChange, items } = this.props;
            const { selectedIndex } = this;
            const newItem = direction === 'next'
                ? items[selectedIndex + 1]
                : items[selectedIndex - 1];
            if (newItem) {
                this.fireAnalytics(createNavigationEvent(direction, source, newItem));
                onChange(newItem);
            }
        };
    }
    get selectedIndex() {
        const { items, selectedItem } = this.props;
        return getSelectedIndex(items, selectedItem);
    }
    render() {
        const { items } = this.props;
        const { selectedIndex } = this;
        if (selectedIndex === -1) {
            return null;
        }
        const isLeftVisible = selectedIndex > 0;
        const isRightVisible = selectedIndex < items.length - 1;
        const prev = (source) => this.navigate('prev', source);
        const next = (source) => this.navigate('next', source);
        return (React.createElement(ArrowsWrapper, null,
            React.createElement(LeftWrapper, null, isLeftVisible ? (React.createElement(Arrow, { className: hideControlsClassName },
                React.createElement(Shortcut, { keyCode: 37, handler: prev('keyboard') }),
                React.createElement(MediaButton, { testId: "media-viewer-navigation-prev", onClick: prev('mouse'), iconBefore: React.createElement(ArrowLeftCircleIcon, { primaryColor: N800, size: "xlarge", label: "Previous" }) }))) : null),
            React.createElement(RightWrapper, null, isRightVisible ? (React.createElement(Arrow, { className: hideControlsClassName },
                React.createElement(Shortcut, { keyCode: 39, handler: next('keyboard') }),
                React.createElement(MediaButton, { testId: "media-viewer-navigation-next", onClick: next('mouse'), iconBefore: React.createElement(ArrowRightCircleIcon, { primaryColor: N800, size: "xlarge", label: "Next" }) }))) : null)));
    }
}
export const Navigation = withAnalyticsEvents({})(NavigationBase);
//# sourceMappingURL=navigation.js.map