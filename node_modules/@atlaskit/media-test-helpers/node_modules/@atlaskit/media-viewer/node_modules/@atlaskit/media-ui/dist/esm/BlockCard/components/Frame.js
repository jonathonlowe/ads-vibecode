import { __assign } from "tslib";
/** @jsx jsx */
import { jsx } from '@emotion/core';
import { N20A, N30A, B200, N50A, N60A } from '@atlaskit/theme/colors';
import { gs, br, mq } from '../utils';
export var Frame = function (props) {
    if (props === void 0) { props = {
        isSelected: false,
        isHoverable: false,
    }; }
    return props.compact ? jsx(CompactFrame, __assign({}, props)) : jsx(ExpandedFrame, __assign({}, props));
};
var sharedFrameStyles = {
    maxWidth: gs(95),
    width: '100%',
    display: 'flex',
    backgroundColor: 'white',
};
export var ExpandedFrame = function (_a) {
    var children = _a.children, isSelected = _a.isSelected, isHoverable = _a.isHoverable, testId = _a.testId;
    return (jsx("div", { css: mq(__assign(__assign({}, sharedFrameStyles), { '&:hover': isHoverable
                ? {
                    backgroundColor: N20A,
                    cursor: 'pointer',
                }
                : undefined, minHeight: [gs(21), gs(15)], borderRadius: isSelected ? br() : br(0.5), border: "2px solid " + (isSelected ? B200 : 'transparent'), justifyContent: 'space-between', overflow: 'hidden', boxShadow: "0 1px 1px " + N50A + ", 0 0 1px 0 " + N60A + ";" })), "data-testid": testId }, children));
};
export var CompactFrame = function (_a) {
    var children = _a.children, isHoverable = _a.isHoverable, isSelected = _a.isSelected, testId = _a.testId, inheritDimensions = _a.inheritDimensions;
    return (jsx("div", { css: mq(__assign(__assign({}, sharedFrameStyles), { '&:hover': isHoverable
                ? {
                    backgroundColor: N30A,
                }
                : undefined, borderRadius: isSelected ? br() : br(0.5), border: isSelected ? "2px solid " + B200 : '', justifyContent: 'center', alignItems: 'center', height: inheritDimensions ? '100%' : gs(5), backgroundColor: N20A, width: ['calc(100% - 16px)', '100%'], padding: ["0px " + gs(1), '0'] })), "data-testid": testId }, children));
};
//# sourceMappingURL=Frame.js.map