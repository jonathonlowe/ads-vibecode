import React from 'react';
import { className, LinkWrapper, Wrapper, Header, IconWrapper, TextWrapper, Content, } from './styled';
import { handleClickCommon } from '../../BlockCard/utils/handlers';
export const ExpandedFrame = ({ isPlaceholder = false, children, onClick, icon, text, isSelected, isFrameVisible, isVisible, href, minWidth, maxWidth, testId, inheritDimensions, }) => {
    const isInteractive = () => !isPlaceholder && (Boolean(href) || Boolean(onClick));
    const handleClick = (event) => handleClickCommon(event, onClick);
    const renderHeader = () => (React.createElement(Header, { className: "embed-header" },
        React.createElement(IconWrapper, { isPlaceholder: isPlaceholder }, !isPlaceholder && icon),
        React.createElement(TextWrapper, { isPlaceholder: isPlaceholder }, !isPlaceholder && (React.createElement("a", { href: href, onClick: handleClick }, text)))));
    const renderContent = () => (React.createElement(Content, { isInteractive: isInteractive() }, children));
    if (!isPlaceholder && href) {
        return (React.createElement(LinkWrapper, { className: className, isInteractive: isInteractive(), isSelected: isSelected, isFrameVisible: isFrameVisible, minWidth: minWidth, maxWidth: maxWidth, isVisible: isVisible, "data-testid": testId, inheritDimensions: inheritDimensions },
            renderHeader(),
            renderContent()));
    }
    else {
        return (React.createElement(Wrapper, { className: className, isInteractive: isInteractive(), isSelected: isSelected, minWidth: minWidth, maxWidth: maxWidth, isVisible: isVisible, "data-testid": testId },
            renderHeader(),
            renderContent()));
    }
};
//# sourceMappingURL=ExpandedFrame.js.map