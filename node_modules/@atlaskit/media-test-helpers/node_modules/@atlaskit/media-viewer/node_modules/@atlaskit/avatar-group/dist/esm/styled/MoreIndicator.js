import { __makeTemplateObject } from "tslib";
import styled from 'styled-components';
import { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH, } from '@atlaskit/avatar';
import { B200, background, DN400, DN70, N40, N500, N70A, } from '@atlaskit/theme/colors';
import { themed, withTheme } from '@atlaskit/theme/components';
var EXCESS_INDICATOR_FONT_SIZE = {
    xsmall: 10,
    small: 10,
    medium: 11,
    large: 12,
    xlarge: 16,
    xxlarge: 16,
};
export var Outer = withTheme(styled.button(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  height: ", "px;\n  width: ", "px;\n  align-items: stretch;\n  background-color: ", ";\n  border: 0;\n  border-radius: ", ";\n  padding: ", "px;\n  box-sizing: content-box;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  outline: none;\n  overflow: hidden;\n  position: static;\n  transform: translateZ(0);\n  transition: background-color 0s ease-out;\n\n  &::-moz-focus-inner {\n    border: 0;\n    margin: 0;\n    padding: 0;\n  }\n\n  &::after {\n    background-color: transparent;\n    border-radius: ", ";\n    bottom: ", "px;\n    content: ' ';\n    left: ", "px;\n    opacity: 0;\n    pointer-events: none;\n    position: absolute;\n    right: ", "px;\n    top: ", "px;\n    transition: opacity 200ms, background-color 200ms ease-out;\n  }\n\n  :active,\n  :hover {\n    &::after {\n      background-color: ", ";\n      opacity: 1;\n    }\n  }\n\n  :focus {\n    outline: none;\n    background-color: ", ";\n  }\n\n  :active {\n    transform: scale(0.9);\n  }\n"], ["\n  height: ", "px;\n  width: ", "px;\n  align-items: stretch;\n  background-color: ", ";\n  border: 0;\n  border-radius: ",
    ";\n  padding: ", "px;\n  box-sizing: content-box;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  outline: none;\n  overflow: hidden;\n  position: static;\n  transform: translateZ(0);\n  transition: background-color 0s ease-out;\n\n  &::-moz-focus-inner {\n    border: 0;\n    margin: 0;\n    padding: 0;\n  }\n\n  &::after {\n    background-color: transparent;\n    border-radius: ",
    ";\n    bottom: ", "px;\n    content: ' ';\n    left: ", "px;\n    opacity: 0;\n    pointer-events: none;\n    position: absolute;\n    right: ", "px;\n    top: ", "px;\n    transition: opacity 200ms, background-color 200ms ease-out;\n  }\n\n  :active,\n  :hover {\n    &::after {\n      background-color: ", ";\n      opacity: 1;\n    }\n  }\n\n  :focus {\n    outline: none;\n    background-color: ", ";\n  }\n\n  :active {\n    transform: scale(0.9);\n  }\n"])), function (_a) {
    var size = _a.size;
    return AVATAR_SIZES[size];
}, function (_a) {
    var size = _a.size;
    return AVATAR_SIZES[size];
}, function (props) { return props.borderColor || background(); }, function (_a) {
    var appearance = _a.appearance, size = _a.size;
    return appearance === 'circle'
        ? '50%'
        : AVATAR_RADIUS[size] + BORDER_WIDTH + "px";
}, BORDER_WIDTH, function (_a) {
    var appearance = _a.appearance, size = _a.size;
    return appearance === 'circle' ? '50%' : AVATAR_RADIUS[size] + "px";
}, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, N70A, B200));
export var Inner = withTheme(styled.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  background-color: ", ";\n  border-radius: ", ";\n  align-items: center;\n  box-shadow: 0 0 0\n    ", "\n    ", ";\n  color: ", ";\n  cursor: pointer;\n  display: flex;\n  flex-basis: 100%;\n  flex-grow: 1;\n  font-size: ", "px;\n  justify-content: center;\n  transition: box-shadow 200ms;\n"], ["\n  background-color: ", ";\n  border-radius: ",
    ";\n  align-items: center;\n  box-shadow: 0 0 0\n    ", "\n    ", ";\n  color: ", ";\n  cursor: pointer;\n  display: flex;\n  flex-basis: 100%;\n  flex-grow: 1;\n  font-size: ", "px;\n  justify-content: center;\n  transition: box-shadow 200ms;\n"])), themed({ light: N40, dark: DN70 }), function (props) {
    return props.appearance === 'circle' ? '50%' : AVATAR_RADIUS[props.size] + "px";
}, function (props) { return (props.isFocus && !props.isActive ? BORDER_WIDTH + "px" : 0); }, B200, themed({ light: N500, dark: DN400 }), function (props) { return EXCESS_INDICATOR_FONT_SIZE[props.size || 'medium']; }));
var templateObject_1, templateObject_2;
//# sourceMappingURL=MoreIndicator.js.map