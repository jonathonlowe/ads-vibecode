import { EventEmitter2 } from 'eventemitter2';
import { MediaStore, } from './media-store';
import { CollectionFetcher } from './collection-fetcher';
import { FileFetcherImpl } from './file-fetcher';
import { StargateClient } from './stargate-client';
export class MediaClient {
    constructor(mediaClientConfig) {
        this.mediaClientConfig = mediaClientConfig;
        this.mediaStore = new MediaStore({
            authProvider: mediaClientConfig.authProvider,
        });
        this.config = mediaClientConfig;
        this.collection = new CollectionFetcher(this.mediaStore);
        this.file = new FileFetcherImpl(this.mediaStore);
        this.eventEmitter = new EventEmitter2();
        this.stargate = new StargateClient(mediaClientConfig.stargateBaseUrl);
    }
    getImage(id, params, controller, fetchMaxRes) {
        return this.mediaStore.getImage(id, params, controller, fetchMaxRes);
    }
    getImageUrl(id, params) {
        return this.mediaStore.getFileImageURL(id, params);
    }
    async getImageMetadata(id, params) {
        return (await this.mediaStore.getImageMetadata(id, params)).metadata;
    }
    on(event, listener) {
        this.eventEmitter.on(event, listener);
    }
    off(event, listener) {
        this.eventEmitter.off(event, listener);
    }
    emit(event, payload) {
        return this.eventEmitter.emit(event, payload);
    }
}
//# sourceMappingURL=media-client.js.map