"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaViewerContainer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _isType = require("../../pm-plugins/utils/is-type");
var _utils = require("../../ui/toolbar/utils");
var _PortalWrapper = require("./PortalWrapper");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var interactiveStyles = (0, _react2.css)({
  cursor: 'pointer'
});
var mediaViewerContainerTestID = 'media-viewer-container-test';
var MediaViewerContainer = exports.MediaViewerContainer = function MediaViewerContainer(_ref) {
  var _mediaNode$firstChild;
  var mediaNode = _ref.mediaNode,
    mediaPluginState = _ref.mediaPluginState,
    _ref$isEditorViewMode = _ref.isEditorViewMode,
    isEditorViewMode = _ref$isEditorViewMode === void 0 ? false : _ref$isEditorViewMode,
    _ref$isSelected = _ref.isSelected,
    isSelected = _ref$isSelected === void 0 ? true : _ref$isSelected,
    _ref$isInline = _ref.isInline,
    isInline = _ref$isInline === void 0 ? false : _ref$isInline,
    children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showViewer = _useState2[0],
    setShowMediaViewer = _useState2[1];
  (0, _react.useEffect)(function () {
    setShowMediaViewer(isSelected);
  }, [isSelected]);
  var selectedNodeAttrs = (0, _utils.getSelectedNearestMediaContainerNodeAttrs)(mediaPluginState);
  var mediaClientConfig = mediaPluginState.mediaClientConfig;
  var showMediaViewer = function showMediaViewer() {
    setShowMediaViewer(true);
  };
  var closeMediaViewer = function closeMediaViewer() {
    setShowMediaViewer(false);
  };
  var isVideoMedia = (0, _isType.isVideo)((_mediaNode$firstChild = mediaNode.firstChild) === null || _mediaNode$firstChild === void 0 ? void 0 : _mediaNode$firstChild.attrs.__fileMimeType);
  var shouldShowViewer = isEditorViewMode && showViewer && selectedNodeAttrs && mediaClientConfig && !isVideoMedia && (0, _experiments.editorExperiment)('platform_editor_controls', 'control');
  return (0, _react2.jsx)(_react.Fragment, null, isEditorViewMode ? (0, _react2.jsx)(_react.Fragment, null, isInline ?
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
  (0, _react2.jsx)("span", {
    onClick: showMediaViewer,
    css: interactiveStyles,
    "data-testid": mediaViewerContainerTestID
  }, children) :
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
  (0, _react2.jsx)("div", {
    onClick: showMediaViewer,
    css: interactiveStyles,
    "data-testid": mediaViewerContainerTestID
  }, children), shouldShowViewer && (0, _react2.jsx)(_PortalWrapper.RenderMediaViewer, {
    selectedNodeAttrs: selectedNodeAttrs,
    mediaClientConfig: mediaClientConfig,
    onClose: closeMediaViewer
  })) : children);
};