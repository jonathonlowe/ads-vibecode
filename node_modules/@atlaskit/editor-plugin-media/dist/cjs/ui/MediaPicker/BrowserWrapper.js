"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserWrapper = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _mediaPicker = require("@atlaskit/media-picker");
var _PickerFacadeProvider = _interopRequireDefault(require("./PickerFacadeProvider"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var BrowserWrapper = exports.BrowserWrapper = function BrowserWrapper(_ref) {
  var mediaState = _ref.mediaState,
    isOpen = _ref.isOpen,
    onBrowseFn = _ref.onBrowseFn,
    featureFlags = _ref.featureFlags;
  return /*#__PURE__*/_react.default.createElement(_PickerFacadeProvider.default, {
    mediaState: mediaState,
    analyticsName: "browser"
  }, function (_ref2) {
    var mediaClientConfig = _ref2.mediaClientConfig,
      config = _ref2.config,
      pickerFacadeInstance = _ref2.pickerFacadeInstance;
    var browserConfig = _objectSpread(_objectSpread({}, config), {}, {
      multiple: true
    });
    return /*#__PURE__*/_react.default.createElement(_mediaPicker.Browser, {
      onBrowseFn: onBrowseFn,
      isOpen: isOpen,
      config: browserConfig,
      mediaClientConfig: mediaClientConfig,
      onEnd: pickerFacadeInstance.handleReady,
      onError: pickerFacadeInstance.handleUploadError,
      onPreviewUpdate: pickerFacadeInstance.handleUploadPreviewUpdate,
      featureFlags: featureFlags
    });
  });
};