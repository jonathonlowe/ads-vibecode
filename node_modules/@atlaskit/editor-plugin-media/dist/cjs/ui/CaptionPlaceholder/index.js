"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CaptionPlaceholderButton = exports.CaptionPlaceholder = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _media = require("@atlaskit/editor-common/media");
var _mediaSingle = require("@atlaskit/editor-common/media-single");
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
var _templateObject;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var placeholder = (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\tcolor: ", ";\n\twidth: 100%;\n\ttext-align: center;\n\tmargin-top: ", " !important;\n\tdisplay: block;\n"])), "var(--ds-text-subtlest, ".concat(_colors.N200, ")"), "var(--ds-space-100, 8px)");
var placeholderButton = (0, _primitives.xcss)({
  width: '100%',
  marginTop: 'space.100'
});
// platform_editor_typography_ugc clean up
// Remove this component
var CaptionPlaceholder = exports.CaptionPlaceholder = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var onClick = _ref.onClick,
    placeholderMessage = _ref.placeholderMessage;
  var handlePointerDown = (0, _react.useCallback)(function (e) {
    e.preventDefault();
    onClick();
  }, [onClick]);
  var computedPlaceholderMessage = placeholderMessage ? placeholderMessage : _media.captionMessages.placeholder;

  // This issue is a temporary fix for users being able to edit captions on edge browsers. This will be removed
  // replaced with CaptionPlaceholderButton in the near future and this code can be removed.
  return (
    // eslint-disable-next-line @atlaskit/design-system/use-primitives-text, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    (0, _react2.jsx)("span", {
      ref: ref,
      css: placeholder,
      onPointerDown: handlePointerDown,
      "data-id": _mediaSingle.CAPTION_PLACEHOLDER_ID,
      "data-testid": "caption-placeholder"
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , computedPlaceholderMessage))
  );
});
var CaptionPlaceholderButton = exports.CaptionPlaceholderButton = /*#__PURE__*/_react.default.forwardRef(function (_ref2, ref) {
  var onClick = _ref2.onClick,
    placeholderMessage = _ref2.placeholderMessage;
  var handleMouseDown = (0, _react.useCallback)(function (e) {
    // In firefox, button is focused when mouse down, which make editor lose focus
    // Hence we want to disabled it so that user can type in caption directly after click
    e.preventDefault();
  }, []);
  var computedPlaceholderMessage = placeholderMessage ? placeholderMessage : _media.captionMessages.placeholder;
  return (0, _react2.jsx)(_primitives.Pressable, {
    ref: ref,
    backgroundColor: "color.background.neutral.subtle",
    onClick: onClick,
    onMouseDown: handleMouseDown,
    "data-id": _mediaSingle.CAPTION_PLACEHOLDER_ID,
    testId: "caption-placeholder",
    padding: "space.0",
    xcss: placeholderButton
  }, (0, _react2.jsx)(_primitives.Text, {
    color: "color.text.subtlest",
    size: "large"
  }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  , computedPlaceholderMessage)));
});