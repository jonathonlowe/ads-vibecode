"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkToolbarAppearance = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _adfSchema = require("@atlaskit/adf-schema");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _ui = require("@atlaskit/editor-common/ui");
var _linkExternal = _interopRequireDefault(require("@atlaskit/icon/core/link-external"));
var _link = _interopRequireDefault(require("@atlaskit/icon/core/migration/link"));
var _shortcut = _interopRequireDefault(require("@atlaskit/icon/glyph/shortcut"));
var _currentMediaNode = require("../../pm-plugins//utils/current-media-node");
var _pluginKey = require("../../pm-plugins/plugin-key");
var _checkMediaType = require("../../pm-plugins/utils/check-media-type");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var wrapperStyles = (0, _react2.css)({
  display: 'flex',
  alignItems: 'center'
});
var LinkToolbarAppearance = exports.LinkToolbarAppearance = function LinkToolbarAppearance(_ref) {
  var editorState = _ref.editorState,
    mediaLinkingState = _ref.mediaLinkingState,
    intl = _ref.intl,
    onAddLink = _ref.onAddLink,
    onEditLink = _ref.onEditLink,
    onOpenLink = _ref.onOpenLink,
    isInlineNode = _ref.isInlineNode,
    isViewOnly = _ref.isViewOnly;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showLinkingControls = _useState2[0],
    setShowLinkingControls = _useState2[1];
  (0, _react.useEffect)(function () {
    var _stateKey$getState;
    var mediaNode = isInlineNode ? (0, _currentMediaNode.currentMediaInlineNode)(editorState) : (0, _currentMediaNode.currentMediaNode)(editorState);
    if (!mediaNode) {
      setShowLinkingControls(false);
      return;
    }
    var mediaClientConfig = (_stateKey$getState = _pluginKey.stateKey.getState(editorState)) === null || _stateKey$getState === void 0 ? void 0 : _stateKey$getState.mediaClientConfig;
    if (!mediaClientConfig) {
      setShowLinkingControls(false);
      return;
    }
    (0, _checkMediaType.checkMediaType)(mediaNode, mediaClientConfig).then(function (mediaType) {
      setShowLinkingControls(mediaType === 'external' || mediaType === 'image');
    });
  }, [editorState, isInlineNode]);
  if (!showLinkingControls) {
    return null;
  }
  if (mediaLinkingState && mediaLinkingState.editable) {
    var isValidUrl = (0, _adfSchema.isSafeUrl)(mediaLinkingState.link);
    var title = intl.formatMessage(_messages.linkToolbarMessages.editLink);
    var linkTitle = intl.formatMessage(isValidUrl ? _messages.linkMessages.openLink : _messages.linkToolbarMessages.unableToOpenLink);
    return (0, _react2.jsx)(_react.Fragment, null, !isViewOnly && (0, _react2.jsx)("div", {
      css: wrapperStyles
    }, (0, _react2.jsx)(_ui.FloatingToolbarButton, {
      onClick: onEditLink,
      title: title,
      tooltipContent: (0, _react2.jsx)(_keymaps.ToolTipContent, {
        description: title,
        keymap: _keymaps.addLink
      }),
      testId: "edit-link-button"
    }, title)), (0, _react2.jsx)(_ui.FloatingToolbarButton, {
      target: "_blank",
      href: isValidUrl ? mediaLinkingState.link : undefined,
      disabled: !isValidUrl,
      onClick: onOpenLink,
      title: linkTitle,
      icon: (0, _react2.jsx)(_linkExternal.default, {
        color: "currentColor",
        spacing: "spacious",
        label: linkTitle,
        LEGACY_fallbackIcon: _shortcut.default
      })
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: "hyperlink-open-link"
    }), (0, _react2.jsx)(_ui.FloatingToolbarSeparator, null));
  } else {
    var _title = intl.formatMessage(_messages.linkToolbarMessages.addLink);
    return !isViewOnly ? (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_ui.FloatingToolbarButton, {
      testId: "add-link-button",
      onClick: onAddLink,
      title: _title,
      tooltipContent: (0, _react2.jsx)(_keymaps.ToolTipContent, {
        description: _title,
        keymap: _keymaps.addLink
      }),
      icon: (0, _react2.jsx)(_link.default, {
        color: "currentColor",
        label: _title,
        spacing: "spacious"
      })
    }), (0, _react2.jsx)(_ui.FloatingToolbarSeparator, null)) : null;
  }
};