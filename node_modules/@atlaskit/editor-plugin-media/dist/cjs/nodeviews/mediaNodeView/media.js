"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MediaNode = exports.MEDIA_HEIGHT = exports.FILE_WIDTH = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _bindEventListener = require("bind-event-listener");
var _analyticsNamespacedContext = require("@atlaskit/analytics-namespaced-context");
var _analyticsNext = require("@atlaskit/analytics-next");
var _utils = require("@atlaskit/editor-common/utils");
var _cellSelection = require("@atlaskit/editor-tables/cell-selection");
var _mediaCard = require("@atlaskit/media-card");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _pluginKey = require("../../pm-plugins/plugin-key");
var _styles = require("../styles");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
// This is being used by DropPlaceholder now
var MEDIA_HEIGHT = exports.MEDIA_HEIGHT = 125;
var FILE_WIDTH = exports.FILE_WIDTH = 156;
// eslint-disable-next-line @repo/internal/react/no-class-components
var MediaNode = exports.MediaNode = /*#__PURE__*/function (_Component) {
  function MediaNode(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, MediaNode);
    _this = _callSuper(this, MediaNode, [_props]);
    (0, _defineProperty2.default)(_this, "state", {});
    (0, _defineProperty2.default)(_this, "videoControlsWrapperRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(_this, "unbindKeyDown", null);
    (0, _defineProperty2.default)(_this, "setViewMediaClientConfig", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var mediaProvider, viewMediaClientConfig;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _this.props.mediaProvider;
          case 2:
            mediaProvider = _context.sent;
            if (mediaProvider) {
              viewMediaClientConfig = mediaProvider.viewMediaClientConfig;
              _this.setState({
                viewMediaClientConfig: viewMediaClientConfig
              });
            }
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    (0, _defineProperty2.default)(_this, "selectMediaSingleFromCard", function (_ref2) {
      var event = _ref2.event;
      _this.selectMediaSingle(event);

      // In edit mode (node content wrapper has contenteditable set to true), link redirection is disabled by default
      // We need to call "stopPropagation" here in order to prevent in editor view mode, the browser from navigating to
      // another URL if the media node is wrapped in a link mark.
      if (_this.props.isViewOnly && (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1')) {
        event.preventDefault();
      }
    });
    (0, _defineProperty2.default)(_this, "selectMediaSingle", function (event) {
      var propPos = _this.props.getPos();
      if (typeof propPos !== 'number') {
        return;
      }

      // NOTE: This does not prevent the link navigation in the editor view mode, .preventDefault is needed (see selectMediaSingleFromCard)
      // Hence it should be removed
      // We need to call "stopPropagation" here in order to prevent the browser from navigating to
      // another URL if the media node is wrapped in a link mark.
      if ((0, _experiments.editorExperiment)('platform_editor_controls', 'control')) {
        event.stopPropagation();
      }
      var state = _this.props.view.state;
      if (event.shiftKey) {
        // don't select text if there is current selection in a table (as this would override selected cells)
        if (state.selection instanceof _cellSelection.CellSelection) {
          return;
        }
        (0, _utils.setTextSelection)(_this.props.view, state.selection.from < propPos ? state.selection.from : propPos - 1,
        // + 3 needed for offset of the media inside mediaSingle and cursor to make whole mediaSingle selected
        state.selection.to > propPos ? state.selection.to : propPos + 2);
      } else {
        (0, _utils.setNodeSelection)(_this.props.view, propPos - 1);
      }
    });
    (0, _defineProperty2.default)(_this, "onFullscreenChange", function (fullscreen) {
      var _this$mediaPluginStat;
      (_this$mediaPluginStat = _this.mediaPluginState) === null || _this$mediaPluginStat === void 0 || _this$mediaPluginStat.updateAndDispatch({
        isFullscreen: fullscreen
      });
    });
    (0, _defineProperty2.default)(_this, "handleNewNode", function (props) {
      var _this$mediaPluginStat2;
      var node = props.node;
      (_this$mediaPluginStat2 = _this.mediaPluginState) === null || _this$mediaPluginStat2 === void 0 || _this$mediaPluginStat2.handleMediaNodeMount(node, function () {
        return _this.props.getPos();
      });
    });
    var view = _this.props.view;
    _this.mediaPluginState = _pluginKey.stateKey.getState(view.state);
    return _this;
  }
  (0, _inherits2.default)(MediaNode, _Component);
  return (0, _createClass2.default)(MediaNode, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var hasNewViewMediaClientConfig = !this.state.viewMediaClientConfig && nextState.viewMediaClientConfig;
      if (this.props.selected !== nextProps.selected || this.props.node.attrs.id !== nextProps.node.attrs.id || this.props.node.attrs.collection !== nextProps.node.attrs.collection || this.props.maxDimensions.height !== nextProps.maxDimensions.height || this.props.maxDimensions.width !== nextProps.maxDimensions.width || this.props.contextIdentifierProvider !== nextProps.contextIdentifierProvider || this.props.isLoading !== nextProps.isLoading || this.props.mediaProvider !== nextProps.mediaProvider || hasNewViewMediaClientConfig) {
        return true;
      }
      return false;
    }
  }, {
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var contextIdentifierProvider;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.handleNewNode(this.props);
              contextIdentifierProvider = this.props.contextIdentifierProvider;
              _context2.t0 = this;
              _context2.next = 5;
              return contextIdentifierProvider;
            case 5:
              _context2.t1 = _context2.sent;
              _context2.t2 = {
                contextIdentifierProvider: _context2.t1
              };
              _context2.t0.setState.call(_context2.t0, _context2.t2);
              _context2.next = 10;
              return this.setViewMediaClientConfig();
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$mediaPluginStat3;
      var node = this.props.node;
      (_this$mediaPluginStat3 = this.mediaPluginState) === null || _this$mediaPluginStat3 === void 0 || _this$mediaPluginStat3.handleMediaNodeUnmount(node);
      if (this.unbindKeyDown && typeof this.unbindKeyDown === 'function') {
        this.unbindKeyDown();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$mediaPluginStat5;
      if (prevProps.node.attrs.id !== this.props.node.attrs.id) {
        var _this$mediaPluginStat4;
        (_this$mediaPluginStat4 = this.mediaPluginState) === null || _this$mediaPluginStat4 === void 0 || _this$mediaPluginStat4.handleMediaNodeUnmount(prevProps.node);
        this.handleNewNode(this.props);
      }
      (_this$mediaPluginStat5 = this.mediaPluginState) === null || _this$mediaPluginStat5 === void 0 || _this$mediaPluginStat5.updateElement();
      this.setViewMediaClientConfig();
      // this.videoControlsWrapperRef is null on componentDidMount. We need to wait until it has value
      if (this.videoControlsWrapperRef && this.videoControlsWrapperRef.current) {
        var _this$mediaPluginStat6;
        if (!((_this$mediaPluginStat6 = this.mediaPluginState) !== null && _this$mediaPluginStat6 !== void 0 && _this$mediaPluginStat6.videoControlsWrapperRef)) {
          var _this$mediaPluginStat7;
          this.bindKeydown();
          (_this$mediaPluginStat7 = this.mediaPluginState) === null || _this$mediaPluginStat7 === void 0 || _this$mediaPluginStat7.updateAndDispatch({
            videoControlsWrapperRef: this.videoControlsWrapperRef.current
          });
        }
      }
    }
  }, {
    key: "bindKeydown",
    value: function bindKeydown() {
      var _this2 = this,
        _this$videoControlsWr;
      var onKeydown = function onKeydown(event) {
        if (event.key === 'Tab') {
          var _this2$videoControlsW;
          // Add focus trap for controls panel
          var firstElement;
          var lastElement;
          var focusableElements = (_this2$videoControlsW = _this2.videoControlsWrapperRef) === null || _this2$videoControlsW === void 0 || (_this2$videoControlsW = _this2$videoControlsW.current) === null || _this2$videoControlsW === void 0 ? void 0 : _this2$videoControlsW.querySelectorAll('button, input, [tabindex]:not([tabindex="-1"])');
          if (focusableElements && focusableElements.length) {
            // Ignored via go/ees005
            // eslint-disable-next-line @atlaskit/editor/no-as-casting
            firstElement = focusableElements[0];
            // Ignored via go/ees005
            // eslint-disable-next-line @atlaskit/editor/no-as-casting
            lastElement = focusableElements[focusableElements.length - 1];
            if (event.shiftKey && document.activeElement === firstElement) {
              event.preventDefault();
              lastElement.focus();
            } else if (!event.shiftKey && document.activeElement === lastElement) {
              var _firstElement;
              event.preventDefault();
              (_firstElement = firstElement) === null || _firstElement === void 0 || _firstElement.focus();
            }
          }
        }
      };
      if ((_this$videoControlsWr = this.videoControlsWrapperRef) !== null && _this$videoControlsWr !== void 0 && _this$videoControlsWr.current) {
        this.unbindKeyDown = (0, _bindEventListener.bind)(this.videoControlsWrapperRef.current, {
          type: 'keydown',
          listener: onKeydown,
          options: {
            capture: true,
            passive: false
          }
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        node = _this$props.node,
        selected = _this$props.selected,
        originalDimensions = _this$props.originalDimensions,
        isLoading = _this$props.isLoading,
        maxDimensions = _this$props.maxDimensions,
        mediaOptions = _this$props.mediaOptions;
      var borderMark = node.marks.find(function (m) {
        return m.type.name === 'border';
      });
      var _this$state = this.state,
        viewMediaClientConfig = _this$state.viewMediaClientConfig,
        contextIdentifierProvider = _this$state.contextIdentifierProvider;
      var _node$attrs = node.attrs,
        id = _node$attrs.id,
        type = _node$attrs.type,
        collection = _node$attrs.collection,
        url = _node$attrs.url,
        alt = _node$attrs.alt;
      if (isLoading || type !== 'external' && !viewMediaClientConfig) {
        return /*#__PURE__*/_react.default.createElement(_styles.MediaCardWrapper, {
          dimensions: originalDimensions
        }, /*#__PURE__*/_react.default.createElement(_mediaCard.CardLoading, {
          interactionName: "editor-media-card-loading"
        }));
      }
      var contextId = contextIdentifierProvider && contextIdentifierProvider.objectId;
      var identifier = type === 'external' ? {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        dataURI: url,
        name: url,
        mediaItemType: 'external-image'
      } : {
        id: id,
        mediaItemType: 'file',
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        collectionName: collection
      };

      // mediaClientConfig is not needed for "external" case. So we have to cheat here.
      // there is a possibility mediaClientConfig will be part of a identifier,
      // so this might be not an issue
      var mediaClientConfig = viewMediaClientConfig || {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        authProvider: function authProvider() {
          return {};
        }
      };
      var ssr;
      if ((0, _platformFeatureFlags.fg)('platform_editor_ssr_media')) {
        ssr = process.env.REACT_SSR ? 'server' : 'client';
      }
      return /*#__PURE__*/_react.default.createElement(_styles.MediaCardWrapper, {
        dimensions: originalDimensions,
        onContextMenu: this.selectMediaSingle,
        borderWidth: borderMark === null || borderMark === void 0 ? void 0 : borderMark.attrs.size,
        selected: selected
      }, /*#__PURE__*/_react.default.createElement(_analyticsNext.AnalyticsContext, {
        data: (0, _defineProperty2.default)({}, _analyticsNamespacedContext.MEDIA_CONTEXT, {
          border: !!borderMark
        })
      }, /*#__PURE__*/_react.default.createElement(_mediaCard.Card, {
        mediaClientConfig: mediaClientConfig,
        resizeMode: "stretchy-fit",
        dimensions: maxDimensions,
        originalDimensions: originalDimensions,
        identifier: identifier,
        selectable: true,
        selected: selected,
        disableOverlay: true,
        onFullscreenChange: this.onFullscreenChange,
        onClick: this.selectMediaSingleFromCard,
        useInlinePlayer: mediaOptions && mediaOptions.allowLazyLoading,
        isLazy: mediaOptions && mediaOptions.allowLazyLoading,
        featureFlags: mediaOptions && mediaOptions.featureFlags,
        contextId: contextId,
        alt: alt,
        videoControlsWrapperRef: this.videoControlsWrapperRef,
        ssr: ssr
      })));
    }
  }]);
}(_react.Component);
var _default = exports.default = (0, _utils.withImageLoader)(MediaNode);