"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _media = require("@atlaskit/editor-common/media");
var _mediaSingle = require("@atlaskit/editor-common/media-single");
var _selection = require("@atlaskit/editor-common/selection");
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _state = require("@atlaskit/editor-prosemirror/state");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _captions = require("../pm-plugins/commands/captions");
var _pluginKey = require("../pm-plugins/plugin-key");
var _commands = require("../ui/toolbar/commands");
var _utils = require("../ui/toolbar/utils");
function keymapPlugin(options, editorAnalyticsAPI, editorSelectionAPI, widthPlugin, getIntl) {
  var list = {};

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)(_keymaps.undo.common, ignoreLinksInSteps, list);
  if (options !== null && options !== void 0 && options.allowCaptions) {
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    (0, _keymaps.bindKeymapWithCommand)(_keymaps.moveDown.common, insertAndSelectCaption(editorAnalyticsAPI), list);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    (0, _keymaps.bindKeymapWithCommand)(_keymaps.tab.common, insertAndSelectCaption(editorAnalyticsAPI), list);

    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    (0, _keymaps.bindKeymapWithCommand)(_keymaps.moveLeft.common, arrowLeftFromMediaSingle(editorSelectionAPI), list);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    (0, _keymaps.bindKeymapWithCommand)(_keymaps.moveRight.common, arrowRightFromMediaSingle(editorSelectionAPI), list);
  }

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)(_keymaps.insertNewLine.common, splitMediaGroup, list);
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)(_keymaps.enter.common, splitMediaGroup, list);
  if (options !== null && options !== void 0 && options.allowPixelResizing) {
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.increaseMediaSize.common, handleMediaIncrease(editorAnalyticsAPI, widthPlugin, options, getIntl), list);
    (0, _keymaps.bindKeymapWithCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.decreaseMediaSize.common, handleMediaDecrease(editorAnalyticsAPI, widthPlugin, options, getIntl), list);
  }

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)(_keymaps.activateVideoControls.common, focusPlayButton, list);
  return (0, _keymap.keymap)(list);
}
var ignoreLinksInSteps = function ignoreLinksInSteps(state) {
  var mediaPluginState = _pluginKey.stateKey.getState(state);
  mediaPluginState.ignoreLinks = true;
  return false;
};
var splitMediaGroup = function splitMediaGroup(state) {
  var mediaPluginState = _pluginKey.stateKey.getState(state);
  return mediaPluginState.splitMediaGroup();
};
var focusPlayButton = function focusPlayButton(state) {
  var _stateKey$getState;
  var videoControlsWrapperRef = (_stateKey$getState = _pluginKey.stateKey.getState(state)) === null || _stateKey$getState === void 0 ? void 0 : _stateKey$getState.element;
  if (videoControlsWrapperRef) {
    var firstButton = videoControlsWrapperRef === null || videoControlsWrapperRef === void 0 ? void 0 : videoControlsWrapperRef.querySelector('button, [tabindex]:not([tabindex="-1"])');
    firstButton === null || firstButton === void 0 || firstButton.focus();
  }
  return true;
};
var validationMaxMin = function validationMaxMin(newWidth, maxWidth, minWidth, validation) {
  var newWidthValidated;
  if (newWidth > maxWidth) {
    newWidthValidated = maxWidth;
    validation = 'greater-than-max';
  } else if (newWidth < minWidth) {
    newWidthValidated = minWidth;
    validation = 'less-than-min';
  } else {
    newWidthValidated = newWidth;
    validation = 'valid';
  }
  return {
    newWidthValidated: newWidthValidated,
    validation: validation
  };
};
var createAnnouncer = function createAnnouncer(action, mediaWidth, changeAmount, validation, getIntl) {
  var announcerContainer = document.getElementById('media-announcer') || document.createElement('div');
  var intl = getIntl();
  if (!announcerContainer.id) {
    announcerContainer.id = 'media-announcer';
    announcerContainer.setAttribute('role', 'status');
    announcerContainer.setAttribute('aria-live', 'polite');
    announcerContainer.setAttribute('aria-atomic', 'true');
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var style = announcerContainer.style;
    style.position = 'absolute';
    style.width = '1px';
    style.height = '1px';
    style.marginTop = '-1px';
    style.opacity = '0';
    style.overflow = 'hidden';
    document.body.appendChild(announcerContainer);
  } else {
    var newMediaWidth = mediaWidth + changeAmount;
    if (validation === 'greater-than-max') {
      announcerContainer.textContent = intl.formatMessage(_media.mediaResizeAnnouncerMessMessages.MediaWidthIsMax);
    } else if (validation === 'less-than-min') {
      announcerContainer.textContent = intl.formatMessage(_media.mediaResizeAnnouncerMessMessages.MediaWidthIsMin);
    } else {
      announcerContainer.textContent = intl.formatMessage(action === 'increased' ? _media.mediaResizeAnnouncerMessMessages.DefaultMediaWidthIncreased : _media.mediaResizeAnnouncerMessMessages.DefaultMediaWidthDecreased, {
        newMediaWidth: newMediaWidth
      });
    }
  }
};
var handleMediaSizeChange = function handleMediaSizeChange(editorAnalyticsAPI, widthPlugin, options, changeAmount, action, getIntl) {
  return function (state, dispatch) {
    var _getSelectedMediaSing, _widthPlugin$sharedSt, _widthPlugin$sharedSt2, _getSelectedMediaSing2;
    var selection = state.selection;
    if (!(selection instanceof _state.NodeSelection && selection.node.type.name === 'mediaSingle')) {
      return false;
    }
    var mediaWidth = (_getSelectedMediaSing = (0, _utils.getSelectedMediaSingle)(state)) === null || _getSelectedMediaSing === void 0 || (_getSelectedMediaSing = _getSelectedMediaSing.node) === null || _getSelectedMediaSing === void 0 || (_getSelectedMediaSing = _getSelectedMediaSing.attrs) === null || _getSelectedMediaSing === void 0 ? void 0 : _getSelectedMediaSing.width;
    var contentWidth = (widthPlugin === null || widthPlugin === void 0 || (_widthPlugin$sharedSt = widthPlugin.sharedState.currentState()) === null || _widthPlugin$sharedSt === void 0 ? void 0 : _widthPlugin$sharedSt.lineLength) || _editorSharedStyles.akEditorDefaultLayoutWidth;
    var mediaPluginState = _pluginKey.stateKey.getState(state);
    var maxWidthForNestedNode = mediaPluginState.currentMaxWidth;
    var minWidth = _mediaSingle.MEDIA_SINGLE_DEFAULT_MIN_PIXEL_WIDTH;
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var maxWidth = maxWidthForNestedNode;
    var currentMaxWidth = (widthPlugin === null || widthPlugin === void 0 || (_widthPlugin$sharedSt2 = widthPlugin.sharedState.currentState()) === null || _widthPlugin$sharedSt2 === void 0 ? void 0 : _widthPlugin$sharedSt2.width) || maxWidth;
    if (maxWidth === undefined && maxWidthForNestedNode === undefined) {
      var _widthPlugin$sharedSt3;
      maxWidth = options !== null && options !== void 0 && options.fullWidthEnabled ? widthPlugin === null || widthPlugin === void 0 || (_widthPlugin$sharedSt3 = widthPlugin.sharedState.currentState()) === null || _widthPlugin$sharedSt3 === void 0 ? void 0 : _widthPlugin$sharedSt3.lineLength : (0, _mediaSingle.calcMediaSingleMaxWidth)(currentMaxWidth, options === null || options === void 0 ? void 0 : options.editorAppearance);
    }
    var validation = 'valid';
    var newWidth = mediaWidth + changeAmount;
    if (options !== null && options !== void 0 && options.fullWidthEnabled) {
      var _widthPlugin$sharedSt4;
      maxWidth = widthPlugin === null || widthPlugin === void 0 || (_widthPlugin$sharedSt4 = widthPlugin.sharedState.currentState()) === null || _widthPlugin$sharedSt4 === void 0 ? void 0 : _widthPlugin$sharedSt4.lineLength;
    } else if (maxWidthForNestedNode === undefined) {
      maxWidth = (0, _mediaSingle.calcMediaSingleMaxWidth)(currentMaxWidth, options === null || options === void 0 ? void 0 : options.editorAppearance);
    }
    var _validationMaxMin = validationMaxMin(newWidth, maxWidth, minWidth, validation),
      newWidthValidated = _validationMaxMin.newWidthValidated,
      validationResult = _validationMaxMin.validation;
    var newLayout = (0, _utils.calcNewLayout)(newWidthValidated, (_getSelectedMediaSing2 = (0, _utils.getSelectedMediaSingle)(state)) === null || _getSelectedMediaSing2 === void 0 || (_getSelectedMediaSing2 = _getSelectedMediaSing2.node) === null || _getSelectedMediaSing2 === void 0 || (_getSelectedMediaSing2 = _getSelectedMediaSing2.attrs) === null || _getSelectedMediaSing2 === void 0 ? void 0 : _getSelectedMediaSing2.layout, contentWidth, options === null || options === void 0 ? void 0 : options.fullWidthEnabled);
    (0, _commands.updateMediaSingleWidth)(editorAnalyticsAPI)(newWidthValidated, validationResult, 'keyboard', newLayout)(state, dispatch);
    createAnnouncer(action, mediaWidth, changeAmount, validationResult, getIntl);
    return true;
  };
};
var handleMediaIncrease = function handleMediaIncrease(editorAnalyticsAPI, widthPlugin, options, getIntl) {
  return handleMediaSizeChange(editorAnalyticsAPI, widthPlugin, options, 1, 'increased', getIntl);
};
var handleMediaDecrease = function handleMediaDecrease(editorAnalyticsAPI, widthPlugin, options, getIntl) {
  return handleMediaSizeChange(editorAnalyticsAPI, widthPlugin, options, -1, 'decreased', getIntl);
};
var insertAndSelectCaption = function insertAndSelectCaption(editorAnalyticsAPI) {
  return function (state, dispatch) {
    var selection = state.selection,
      schema = state.schema;
    if (selection instanceof _state.NodeSelection && selection.node.type === schema.nodes.mediaSingle && schema.nodes.caption) {
      if (dispatch) {
        var from = selection.from,
          node = selection.node;
        if (!(0, _captions.insertAndSelectCaptionFromMediaSinglePos)(editorAnalyticsAPI)(from, node)(state, dispatch)) {
          (0, _captions.selectCaptionFromMediaSinglePos)(from, node)(state, dispatch);
        }
      }
      return true;
    }
    return false;
  };
};
var arrowLeftFromMediaSingle = function arrowLeftFromMediaSingle(editorSelectionAPI) {
  return function (state, dispatch) {
    var selection = state.selection;
    if (editorSelectionAPI && selection instanceof _state.NodeSelection && selection.node.type.name === 'mediaSingle') {
      var tr = editorSelectionAPI.selectNearNode({
        selectionRelativeToNode: undefined,
        selection: new _selection.GapCursorSelection(state.doc.resolve(selection.from), _selection.Side.LEFT)
      })(state);
      if (dispatch) {
        dispatch(tr);
      }
      return true;
    }
    return false;
  };
};
var arrowRightFromMediaSingle = function arrowRightFromMediaSingle(editorSelectionAPI) {
  return function (state, dispatch) {
    var selection = state.selection;
    if (editorSelectionAPI && selection instanceof _state.NodeSelection && selection.node.type.name === 'mediaSingle') {
      var tr = editorSelectionAPI.selectNearNode({
        selectionRelativeToNode: undefined,
        selection: new _selection.GapCursorSelection(state.doc.resolve(selection.to), _selection.Side.RIGHT)
      })(state);
      if (dispatch) {
        dispatch(tr);
      }
      return true;
    }
    return false;
  };
};
var _default = exports.default = keymapPlugin;