import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { BrowserWrapper } from './BrowserWrapper';
import { ClipboardWrapper } from './ClipboardWrapper';
import { DropzoneWrapper } from './DropzoneWrapper';
const MediaPicker = ({
  api,
  isPopupOpened,
  appearance,
  mediaState,
  onBrowseFn,
  editorDomElement
}) => {
  var _editorDom$parentElem;
  const {
    focusState,
    connectivityState
  } = useSharedPluginState(api, ['focus', 'connectivity']);
  const featureFlags = mediaState.mediaOptions && mediaState.mediaOptions.featureFlags;

  // Ignored via go/ees005
  // eslint-disable-next-line @atlaskit/editor/no-as-casting
  const editorDom = editorDomElement;
  const editorParent = (_editorDom$parentElem = editorDom.parentElement) !== null && _editorDom$parentElem !== void 0 ? _editorDom$parentElem : undefined;

  /**
   * https://product-fabric.atlassian.net/browse/ED-21993
   * Avoid attach paste event to same dom element,
   * so editor-paste-plugin can use stopPropagation,
   * as stopImmediatePropagation could cause race condition issues
   */
  const container = editorParent;
  const clipboard = focusState !== null && focusState !== void 0 && focusState.hasFocus ? /*#__PURE__*/React.createElement(ClipboardWrapper, {
    mediaState: mediaState,
    featureFlags: featureFlags,
    container: container
  }) : null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, clipboard, /*#__PURE__*/React.createElement(DropzoneWrapper, {
    mediaState: mediaState,
    isActive: !isPopupOpened &&
    // If we're offline don't show the dropzone
    (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) !== 'offline',
    featureFlags: featureFlags,
    editorDomElement: editorDomElement,
    appearance: appearance
  }), /*#__PURE__*/React.createElement(BrowserWrapper, {
    onBrowseFn: onBrowseFn,
    mediaState: mediaState,
    featureFlags: featureFlags
  }));
};

// eslint-disable-next-line @repo/internal/react/no-class-components
export class MediaPickerComponents extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isPopupOpened: false
    });
    _defineProperty(this, "onBrowseFn", nativeBrowseFn => {
      const {
        mediaState
      } = this.props;
      mediaState && mediaState.setBrowseFn(nativeBrowseFn);
    });
  }
  componentDidMount() {
    const {
      mediaState
    } = this.props;
    mediaState.onPopupToggle(isPopupOpened => {
      this.setState({
        isPopupOpened
      });
    });
  }
  render() {
    const {
      api,
      mediaState,
      editorDomElement,
      appearance
    } = this.props;
    const {
      isPopupOpened
    } = this.state;
    return /*#__PURE__*/React.createElement(MediaPicker, {
      mediaState: mediaState,
      editorDomElement: editorDomElement,
      appearance: appearance,
      isPopupOpened: isPopupOpened,
      onBrowseFn: this.onBrowseFn,
      api: api
    });
  }
}
_defineProperty(MediaPickerComponents, "displayName", 'MediaPickerComponents');