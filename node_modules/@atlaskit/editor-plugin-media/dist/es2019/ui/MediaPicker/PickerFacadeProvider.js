import { useCallback, useEffect, useMemo, useState } from 'react';
import { flushSync } from 'react-dom';
import { ErrorReporter } from '@atlaskit/editor-common/utils';
import PickerFacade from '../../pm-plugins/picker-facade';
const dummyMediaPickerObject = {
  on: () => {},
  removeAllListeners: () => {},
  emit: () => {},
  destroy: () => {},
  setUploadParams: () => {}
};
export default function PickerFacadeProvider({
  mediaState,
  analyticsName,
  children
}) {
  const [state, setState] = useState({
    pickerFacadeInstance: undefined,
    config: undefined,
    mediaClientConfig: undefined
  });
  const mediaProvider = useMemo(() => mediaState === null || mediaState === void 0 ? void 0 : mediaState.mediaProvider, [mediaState === null || mediaState === void 0 ? void 0 : mediaState.mediaProvider]);
  const handleMediaProvider = useCallback(async (_name, provider) => {
    const mediaProvider = await provider;
    if (!mediaProvider || !mediaProvider.uploadParams) {
      return;
    }
    const resolvedMediaClientConfig = (await mediaProvider.uploadMediaClientConfig) || (await mediaProvider.viewMediaClientConfig);
    if (!resolvedMediaClientConfig) {
      return;
    }
    const pickerFacadeConfig = {
      mediaClientConfig: resolvedMediaClientConfig,
      errorReporter: mediaState.options.errorReporter || new ErrorReporter(),
      featureFlags: mediaState.mediaOptions && mediaState.mediaOptions.featureFlags
    };
    const pickerFacadeInstance = await new PickerFacade('customMediaPicker', pickerFacadeConfig, dummyMediaPickerObject, analyticsName).init();
    pickerFacadeInstance.onNewMedia(mediaState.insertFile);
    pickerFacadeInstance.setUploadParams(mediaProvider.uploadParams);
    const config = {
      uploadParams: mediaProvider.uploadParams
    };
    flushSync(() => {
      setState({
        pickerFacadeInstance,
        config,
        mediaClientConfig: resolvedMediaClientConfig
      });
    });
  }, [analyticsName, mediaState.insertFile, mediaState.mediaOptions, mediaState.options.errorReporter]);
  useEffect(() => {
    if (mediaProvider) {
      handleMediaProvider('mediaProvider', Promise.resolve(mediaProvider));
    }
  }, [mediaProvider, handleMediaProvider]);
  const {
    mediaClientConfig,
    config,
    pickerFacadeInstance
  } = state;
  if (!mediaClientConfig || !config || !pickerFacadeInstance) {
    return null;
  }
  return children({
    mediaClientConfig,
    config,
    pickerFacadeInstance
  });
}