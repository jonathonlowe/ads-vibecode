/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment, useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { isVideo } from '../../pm-plugins/utils/is-type';
import { getSelectedNearestMediaContainerNodeAttrs } from '../../ui/toolbar/utils';
import { RenderMediaViewer } from './PortalWrapper';
const interactiveStyles = css({
  cursor: 'pointer'
});
const mediaViewerContainerTestID = 'media-viewer-container-test';
export const MediaViewerContainer = ({
  mediaNode,
  mediaPluginState,
  isEditorViewMode = false,
  isSelected = true,
  isInline = false,
  children
}) => {
  var _mediaNode$firstChild;
  const [showViewer, setShowMediaViewer] = useState(false);
  useEffect(() => {
    setShowMediaViewer(isSelected);
  }, [isSelected]);
  const selectedNodeAttrs = getSelectedNearestMediaContainerNodeAttrs(mediaPluginState);
  const mediaClientConfig = mediaPluginState.mediaClientConfig;
  const showMediaViewer = () => {
    setShowMediaViewer(true);
  };
  const closeMediaViewer = () => {
    setShowMediaViewer(false);
  };
  const isVideoMedia = isVideo((_mediaNode$firstChild = mediaNode.firstChild) === null || _mediaNode$firstChild === void 0 ? void 0 : _mediaNode$firstChild.attrs.__fileMimeType);
  const shouldShowViewer = isEditorViewMode && showViewer && selectedNodeAttrs && mediaClientConfig && !isVideoMedia && editorExperiment('platform_editor_controls', 'control');
  return jsx(Fragment, null, isEditorViewMode ? jsx(Fragment, null, isInline ?
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
  jsx("span", {
    onClick: showMediaViewer,
    css: interactiveStyles,
    "data-testid": mediaViewerContainerTestID
  }, children) :
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
  jsx("div", {
    onClick: showMediaViewer,
    css: interactiveStyles,
    "data-testid": mediaViewerContainerTestID
  }, children), shouldShowViewer && jsx(RenderMediaViewer, {
    selectedNodeAttrs: selectedNodeAttrs,
    mediaClientConfig: mediaClientConfig,
    onClose: closeMediaViewer
  })) : children);
};