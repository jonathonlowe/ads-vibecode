import { type MediaAttributes } from '@atlaskit/adf-schema';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
type MediaId = string;
type Props = {
    id: MediaId;
    nextAttributes: Partial<MediaAttributes>;
};
export type MediaAttributesMap = Record<MediaId, Partial<MediaAttributes>>;
type MediaAttributesCachePerView = MediaAttributesMap;
export type MediaAttributesCache = WeakMap<EditorView, MediaAttributesCachePerView>;
export declare const containsSameAttributes: (a: MediaAttributes, b: Partial<MediaAttributes>) => boolean;
/**
 * Updates media node attributes in the editor view based on the provided cache.
 *
 * @param {EditorView} editorView - The editor view instance where the updates will be applied.
 * @param {MediaAttributesCache} cache - The cache containing media attributes to be updated.
 *
 * This function performs the following steps:
 * 1. Retrieves the media attributes to update from the cache for the given editor view.
 * 2. Clears the media attributes cache for the editor view.
 * 3. Searches for media nodes in the document and collects their positions and new attributes.
 * 4. If there are any media nodes to update, it applies the updates in a batch.
 */
export declare const runUpdate: (editorView: EditorView, cache: MediaAttributesCache) => void;
/**
 * Creates a debounced version of the `runUpdate` function to update media node attributes in the editor view.
 *
 * @constant
 * @type {Function}
 * @param {Function} runUpdate - The function to be debounced.
 * @param {number} debouncedTime - The debounce delay in milliseconds.
 * @param {Object} [options] - The debounce options. Defaults to {leading: false, trailing: true}.
 * @param {Function} keyResolver - A function that returns the key to be used for memoization. In this case, it returns the editor view instance.
 *
 * This function performs the following steps:
 * 1. Debounces the `runUpdate` function with the specified delay and options.
 * 2. Uses the editor view instance as the key for memoization to ensure that updates are applied correctly.
 */
export declare const runUpdateDebounced: (editorView: EditorView, cache: MediaAttributesCache) => void | undefined;
/**
 * Updates the media node attributes cache for the given editor view and triggers a debounced update.
 *
 * @param {EditorView} editorView - The editor view instance where the updates will be applied.
 * @param {Props} props - The properties containing the media node ID and the next attributes to be updated.
 *
 * This function performs the following steps:
 * 1. Retrieves the media attributes cache for the given editor view.
 * 2. If no cache exists, initializes a new cache.
 * 3. Updates the cache with the new attributes for the specified media node ID.
 * 4. Sets the updated cache back to the media attributes cache.
 * 5. Triggers a debounced update to apply the changes in the editor view.
 */
export declare const batchMediaNodeAttrsUpdate: (editorView: EditorView, props: Props) => void;
export {};
