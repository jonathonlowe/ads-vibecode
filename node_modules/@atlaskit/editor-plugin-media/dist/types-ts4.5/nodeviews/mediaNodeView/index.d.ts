import React from 'react';
import type { MediaADFAttrs } from '@atlaskit/adf-schema';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { ContextIdentifierProvider, MediaProvider, ProviderFactory, Providers } from '@atlaskit/editor-common/provider-factory';
import { SelectionBasedNodeView } from '@atlaskit/editor-common/selection-based-node-view';
import type { ExtractInjectionAPI, EditorContainerWidth as WidthPluginState } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { Decoration, EditorView } from '@atlaskit/editor-prosemirror/view';
import type { MediaNextEditorPluginType } from '../../mediaPluginType';
import type { getPosHandler } from '../../types';
import type { MediaNodeViewProps } from '../types';
interface MediaNodeWithPluginStateComponentProps {
    width?: WidthPluginState;
    mediaProvider?: Promise<MediaProvider>;
}
declare class MediaNodeView extends SelectionBasedNodeView<MediaNodeViewProps> {
    private isSelected;
    createDomRef(): HTMLElement;
    viewShouldUpdate(nextNode: PMNode, decorations: Decoration[]): boolean;
    stopEvent(event: Event): boolean;
    getAttrs(): MediaADFAttrs;
    isMediaBlobUrl(): boolean;
    onExternalImageLoaded: (dimensions: {
        width: number;
        height: number;
    }) => void;
    renderMediaNodeWithState: (contextIdentifierProvider?: Promise<ContextIdentifierProvider>) => ({ width: editorWidth, mediaProvider }: MediaNodeWithPluginStateComponentProps) => React.JSX.Element;
    renderMediaNodeWithProviders: ({ contextIdentifierProvider }: Providers) => React.JSX.Element;
    render(): React.JSX.Element;
}
export declare const ReactMediaNode: (portalProviderAPI: PortalProviderAPI, eventDispatcher: EventDispatcher, providerFactory: ProviderFactory, mediaOptions: import("../../types").MediaPluginOptions | undefined, pluginInjectionApi: ExtractInjectionAPI<MediaNextEditorPluginType> | undefined) => (node: PMNode, view: EditorView, getPos: getPosHandler) => MediaNodeView;
export {};
