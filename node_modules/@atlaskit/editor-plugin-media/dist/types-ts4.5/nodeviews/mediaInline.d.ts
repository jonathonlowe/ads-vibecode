import { jsx } from '@emotion/react';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { ContextIdentifierProvider, MediaProvider, ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import { SelectionBasedNodeView } from '@atlaskit/editor-common/selection-based-node-view';
import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorView, NodeView } from '@atlaskit/editor-prosemirror/view';
import type { FileIdentifier } from '@atlaskit/media-client';
import type { MediaNextEditorPluginType } from '../mediaPluginType';
import type { MediaPluginState } from '../pm-plugins/types';
import type { getPosHandler, getPosHandler as ProsemirrorGetPosHandler } from '../types';
export interface MediaInlineProps {
    mediaProvider: Promise<MediaProvider>;
    identifier: FileIdentifier;
    node: PMNode;
    isSelected: boolean;
    view: EditorView;
    getPos: ProsemirrorGetPosHandler;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
    contextIdentifierProvider?: Promise<ContextIdentifierProvider>;
    mediaPluginState: MediaPluginState;
    editorViewMode?: boolean;
}
export declare const handleNewNode: (props: MediaInlineProps) => void;
export declare const MediaInline: (props: MediaInlineProps) => jsx.JSX.Element;
interface MediaInlineNodeViewProps {
    providerFactory: ProviderFactory;
    api: ExtractInjectionAPI<MediaNextEditorPluginType> | undefined;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
}
export declare class MediaInlineNodeView extends SelectionBasedNodeView<MediaInlineNodeViewProps> {
    createDomRef(): HTMLSpanElement;
    ignoreMutation(): boolean;
    viewShouldUpdate(nextNode: PMNode): boolean;
    render(props: MediaInlineNodeViewProps): jsx.JSX.Element;
}
export declare const ReactMediaInlineNode: (portalProviderAPI: PortalProviderAPI, eventDispatcher: EventDispatcher, providerFactory: ProviderFactory, api: ExtractInjectionAPI<MediaNextEditorPluginType> | undefined, dispatchAnalyticsEvent?: DispatchAnalyticsEvent) => (node: PMNode, view: EditorView, getPos: getPosHandler) => NodeView;
export {};
