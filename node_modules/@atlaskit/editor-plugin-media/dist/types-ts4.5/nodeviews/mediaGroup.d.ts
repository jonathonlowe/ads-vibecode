import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { ContextIdentifierProvider, MediaProvider, ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorView, NodeView } from '@atlaskit/editor-prosemirror/view';
import type { MediaNextEditorPluginType } from '../mediaPluginType';
import type { getPosHandler, MediaOptions } from '../types';
type MediaGroupProps = {
    forwardRef?: (ref: HTMLElement) => void;
    node: PMNode;
    view: EditorView;
    getPos: () => number | undefined;
    disabled?: boolean;
    editorViewMode?: boolean;
    allowLazyLoading?: boolean;
    mediaProvider: Promise<MediaProvider>;
    contextIdentifierProvider?: Promise<ContextIdentifierProvider>;
    isCopyPasteEnabled?: boolean;
    anchorPos: number;
    headPos: number;
    mediaOptions: MediaOptions;
} & WrappedComponentProps;
declare const IntlMediaGroup: React.FC<import("react-intl-next").WithIntlProps<MediaGroupProps>> & {
    WrappedComponent: React.ComponentType<MediaGroupProps>;
};
export default IntlMediaGroup;
export declare const ReactMediaGroupNode: (portalProviderAPI: PortalProviderAPI, eventDispatcher: EventDispatcher, providerFactory: ProviderFactory, mediaOptions: import("../types").MediaPluginOptions | undefined, pluginInjectionApi: ExtractInjectionAPI<MediaNextEditorPluginType> | undefined) => (node: PMNode, view: EditorView, getPos: getPosHandler) => NodeView;
