import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback, useEffect, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { BorderIcon as LegacyBorderIcon } from '@atlaskit/editor-common/icons';
import { imageBorderMessages as messages } from '@atlaskit/editor-common/media';
import { DropdownMenuSharedCssClassName } from '@atlaskit/editor-common/styles';
import { Popup } from '@atlaskit/editor-common/ui';
import { borderColorPalette, borderPaletteTooltipMessages, ColorPalette } from '@atlaskit/editor-common/ui-color';
import { ArrowKeyNavigationProvider, ArrowKeyNavigationType, DropdownMenu, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorBorderPaletteColor } from '@atlaskit/editor-palette';
import BorderIcon from '@atlaskit/icon/core/border';
import StrokeWeightLargeIcon from '@atlaskit/icon/core/stroke-weight-large';
import StrokeWeightMediumIcon from '@atlaskit/icon/core/stroke-weight-medium';
import StrokeWeightSmallIcon from '@atlaskit/icon/core/stroke-weight-small';
import ExpandIcon from '@atlaskit/icon/glyph/chevron-down';
import ChevronDownIcon from '@atlaskit/icon/utility/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Text } from '@atlaskit/primitives/compiled';
import Tooltip from '@atlaskit/tooltip';
import { buttonStyle, buttonWrapperStyle, contextualMenuArrow, contextualMenuColorIcon, contextualSubMenu, dropdownOptionButton, dropdownWrapper, itemSpacing, line, menuItemDimensions, toolbarButtonWrapper } from './styles';
var ImageBorder = function ImageBorder(_ref) {
  var formatMessage = _ref.intl.formatMessage,
    toggleBorder = _ref.toggleBorder,
    borderMark = _ref.borderMark,
    setBorder = _ref.setBorder;
  var popupTarget = useRef(null);
  var dropDownColorOptionButton = useRef(null);
  var dropDownSizeOptionButton = useRef(null);
  var colorSubmenuRef = useRef(null);
  var sizeSubmenuRef = useRef(null);
  var openDropdownButtonRef = useRef(null);
  var enabled = !!borderMark;
  var color = borderMark === null || borderMark === void 0 ? void 0 : borderMark.color;
  var size = borderMark === null || borderMark === void 0 ? void 0 : borderMark.size;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isOpenByKeyboard = _useState4[0],
    setIsOpenedByKeyboard = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isColorSubmenuOpen = _useState6[0],
    setIsColorSubmenuOpen = _useState6[1];
  var _useState7 = useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    isSizeSubmenuOpen = _useState8[0],
    setIsSizeSubmenuOpen = _useState8[1];
  var handleColorSubmenuEsc = useCallback(function () {
    var _dropDownColorOptionB;
    setIsOpenedByKeyboard(false);
    setIsColorSubmenuOpen(false);
    dropDownColorOptionButton === null || dropDownColorOptionButton === void 0 || (_dropDownColorOptionB = dropDownColorOptionButton.current) === null || _dropDownColorOptionB === void 0 || _dropDownColorOptionB.focus();
  }, []);
  var handleSizeSubmenuEsc = useCallback(function () {
    var _dropDownSizeOptionBu;
    setIsOpenedByKeyboard(false);
    setIsSizeSubmenuOpen(false);
    dropDownSizeOptionButton === null || dropDownSizeOptionButton === void 0 || (_dropDownSizeOptionBu = dropDownSizeOptionButton.current) === null || _dropDownSizeOptionBu === void 0 || _dropDownSizeOptionBu.focus();
  }, []);
  var handleSubMenuRef = function handleSubMenuRef(ref) {
    if (!ref) {
      return;
    }
    var rect = ref.getBoundingClientRect();
    if (rect.left + rect.width > window.innerWidth) {
      ref.style.left = "-".concat(rect.width, "px");
    }
  };
  var handleTriggerByKeyboard = function handleTriggerByKeyboard(event, callback) {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      callback();
      setIsOpenedByKeyboard(true);
    }
  };
  useEffect(function () {
    var focusFirstOption = function focusFirstOption(submenuRef, isOpen) {
      if (!isOpenByKeyboard) {
        return;
      }
      if (isOpen && submenuRef.current) {
        var firstOption = submenuRef.current.querySelector('button');
        if (!firstOption) {
          return;
        }
        firstOption.focus();
        var keyboardEvent = new KeyboardEvent('keydown', {
          key: 'ArrowDown',
          bubbles: true
        });
        firstOption.dispatchEvent(keyboardEvent);
      }
    };
    focusFirstOption(colorSubmenuRef, isColorSubmenuOpen);
    focusFirstOption(sizeSubmenuRef, isSizeSubmenuOpen);
  }, [isColorSubmenuOpen, isSizeSubmenuOpen, isOpenByKeyboard]);
  var borderSizeOptions = [{
    name: formatMessage(messages.borderSizeSubtle),
    value: 1,
    icon: StrokeWeightSmallIcon
  }, {
    name: formatMessage(messages.borderSizeMedium),
    value: 2,
    icon: StrokeWeightMediumIcon
  }, {
    name: formatMessage(messages.borderSizeBold),
    value: 3,
    icon: StrokeWeightLargeIcon
  }];
  var borderColorSelectStyles = function borderColorSelectStyles() {
    return !fg('platform-visual-refresh-icons') ? contextualMenuColorIcon(color && hexToEditorBorderPaletteColor(color)) : contextualMenuArrow;
  };
  var items = [{
    content: jsx("div", null, jsx("button", {
      ref: dropDownColorOptionButton,
      type: "button",
      "aria-label": formatMessage(messages.borderColorDropdownAriaLabel),
      "data-testid": "image-border-dropdown-button-color"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: [dropdownOptionButton],
      "aria-expanded": isColorSubmenuOpen,
      onKeyDown: function onKeyDown(e) {
        return handleTriggerByKeyboard(e, function () {
          return setIsColorSubmenuOpen(!isColorSubmenuOpen);
        });
      }
    }, jsx(Text, null, formatMessage(messages.borderColor)), jsx("div", {
      css: borderColorSelectStyles
    })), jsx("div", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: DropdownMenuSharedCssClassName.SUBMENU,
      ref: colorSubmenuRef
    }, isColorSubmenuOpen &&
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("div", {
      css: contextualSubMenu(0),
      ref: handleSubMenuRef
    }, jsx(ArrowKeyNavigationProvider, {
      type: ArrowKeyNavigationType.MENU,
      handleClose: function handleClose(e) {
        e.preventDefault();
        e.stopPropagation();
        handleColorSubmenuEsc();
      },
      disableCloseOnArrowClick: true
    }, jsx(ColorPalette, {
      onClick: function onClick(color) {
        setBorder({
          color: color
        });
        setIsOpen(!isOpen);
      },
      onKeyDown: function onKeyDown(color, _, event) {
        if (event.key === 'Enter' || event.key === ' ') {
          var _openDropdownButtonRe;
          setBorder({
            color: color
          });
          setIsOpen(!isOpen);
          setIsColorSubmenuOpen(false);
          setIsSizeSubmenuOpen(false);
          (_openDropdownButtonRe = openDropdownButtonRef.current) === null || _openDropdownButtonRe === void 0 || _openDropdownButtonRe.focus();
        }
      },
      selectedColor: color !== null && color !== void 0 ? color : null,
      paletteOptions: {
        palette: borderColorPalette,
        paletteColorTooltipMessages: borderPaletteTooltipMessages,
        hexToPaletteColor: hexToEditorBorderPaletteColor
      }
    }))))),
    'data-testid': 'dropdown-item__Color',
    key: 'dropdown-menu-image-border-color-button',
    value: {
      name: 'color'
    },
    'aria-label': '',
    wrapperTabIndex: null
  }, {
    content: jsx("div", null, jsx("button", {
      type: "button",
      "aria-label": formatMessage(messages.borderSizeDropdownAriaLabel),
      "data-testid": "image-border-dropdown-button-size"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: [dropdownOptionButton],
      "aria-expanded": isSizeSubmenuOpen,
      ref: dropDownSizeOptionButton,
      onKeyDown: function onKeyDown(e) {
        return handleTriggerByKeyboard(e, function () {
          return setIsSizeSubmenuOpen(!isSizeSubmenuOpen);
        });
      }
    }, jsx(Text, null, formatMessage(messages.borderSize)), jsx("div", {
      css: contextualMenuArrow
    })), jsx("div", {
      //eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: DropdownMenuSharedCssClassName.SUBMENU,
      ref: sizeSubmenuRef
    }, isSizeSubmenuOpen && jsx(ArrowKeyNavigationProvider, {
      type: ArrowKeyNavigationType.MENU,
      handleClose: function handleClose(e) {
        e.preventDefault();
        handleSizeSubmenuEsc();
      },
      disableCloseOnArrowClick: true
    }, jsx("div", {
      css: contextualSubMenu(1),
      ref: handleSubMenuRef
    }, borderSizeOptions.map(function (_ref2, idx) {
      var name = _ref2.name,
        value = _ref2.value,
        icon = _ref2.icon;
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var ButtonIcon = icon;
      return (
        // Ignored via go/ees005
        // eslint-disable-next-line react/no-array-index-key
        jsx(Tooltip, {
          key: idx,
          content: name
        }, jsx("span", {
          css: buttonWrapperStyle
        }, jsx("button", {
          type: "button"
          /* eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766 */,
          css: buttonStyle(value === size),
          "aria-label": name,
          role: "radio",
          "aria-checked": value === size,
          onClick: function onClick() {
            setBorder({
              size: value
            });
            setIsOpen(false);
          },
          onKeyDown: function onKeyDown(event) {
            if (event.key === 'Enter' || event.key === ' ') {
              var _openDropdownButtonRe2;
              setBorder({
                size: value
              });
              setIsOpen(false);
              setIsColorSubmenuOpen(false);
              setIsSizeSubmenuOpen(false);
              (_openDropdownButtonRe2 = openDropdownButtonRef.current) === null || _openDropdownButtonRe2 === void 0 || _openDropdownButtonRe2.focus();
            }
          },
          onMouseDown: function onMouseDown(e) {
            e.preventDefault();
          }
        }, !fg('platform-visual-refresh-icons') ?
        //eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        jsx("div", {
          css: line(value, value === size),
          role: "presentation"
        }) : jsx(ButtonIcon, {
          color: value === size ? "var(--ds-icon-inverse, #FFFFFF)" : 'currentColor',
          spacing: "spacious",
          label: name
        }))))
      );
    }))))),
    'data-testid': 'dropdown-item__Size',
    key: 'dropdown-menu-image-border-size-button',
    value: {
      name: 'size'
    },
    'aria-label': '',
    wrapperTabIndex: null
  }];

  /**
   * We want to change direction of our dropdowns a bit early,
   * not exactly when it hits the boundary.
   */
  var fitTolerance = 10;
  var fitWidth = menuItemDimensions.width;
  var fitHeight = items.length * (menuItemDimensions.height + itemSpacing);
  var isAnySubMenuOpen = isSizeSubmenuOpen || isColorSubmenuOpen;
  return jsx("div", null, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: toolbarButtonWrapper({
      enabled: enabled,
      isOpen: isOpen
    })
  }, jsx(ToolbarButton
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: "image-border-toolbar-btn",
    selected: enabled,
    onClick: toggleBorder,
    spacing: "compact",
    "aria-label": enabled ? formatMessage(messages.removeBorder) : formatMessage(messages.addBorder),
    iconBefore: jsx(BorderIcon, {
      color: "currentColor",
      label: "",
      spacing: "spacious",
      LEGACY_fallbackIcon: LegacyBorderIcon
    }),
    title: enabled ? formatMessage(messages.removeBorder) : formatMessage(messages.addBorder)
  }), jsx("div", {
    ref: popupTarget
  }, jsx(ToolbarButton
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: "image-border-toolbar-dropdown",
    ref: openDropdownButtonRef,
    selected: enabled || isOpen,
    "aria-expanded": isOpen,
    "aria-label": formatMessage(messages.borderOptions),
    title: formatMessage(messages.borderOptions),
    spacing: "compact",
    iconBefore: jsx(ChevronDownIcon, {
      color: "currentColor",
      spacing: "spacious",
      label: "",
      LEGACY_fallbackIcon: ExpandIcon
    }),
    onClick: function onClick() {
      setIsOpen(!isOpen);
      setIsOpenedByKeyboard(false);
    },
    onKeyDown: function onKeyDown(e) {
      return handleTriggerByKeyboard(e, function () {
        return setIsOpen(!isOpen);
      });
    }
  }))), jsx(Popup, {
    target: popupTarget.current ? popupTarget.current : undefined,
    fitWidth: fitWidth + fitTolerance,
    fitHeight: fitHeight + fitTolerance,
    forcePlacement: true,
    stick: true
  }, jsx("div", {
    onMouseLeave: function onMouseLeave() {
      setIsColorSubmenuOpen(false);
      setIsSizeSubmenuOpen(false);
    }
    /* eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766 */,
    css: dropdownWrapper
  }, jsx(DropdownMenu
  //This needs be removed when the a11y is completely handled
  //Disabling key navigation now as it works only partially
  //Same with packages/editor/editor-plugin-table/src/plugins/table/ui/FloatingContextualMenu/ContextualMenu.tsx
  , {
    arrowKeyNavigationProviderOptions: {
      type: ArrowKeyNavigationType.MENU,
      disableArrowKeyNavigation: isAnySubMenuOpen
    },
    allowEnterDefaultBehavior: isAnySubMenuOpen,
    handleEscapeKeydown: isAnySubMenuOpen ? function () {
      return;
    } : function () {
      var _openDropdownButtonRe3;
      (_openDropdownButtonRe3 = openDropdownButtonRef.current) === null || _openDropdownButtonRe3 === void 0 || _openDropdownButtonRe3.focus();
    },
    items: [{
      items: items
    }],
    isOpen: isOpen,
    shouldFocusFirstItem: function shouldFocusFirstItem() {
      return isOpenByKeyboard;
    },
    onOpenChange: function onOpenChange() {
      setIsOpen(false);
      setIsColorSubmenuOpen(false);
      setIsSizeSubmenuOpen(false);
      setIsOpenedByKeyboard(false);
    },
    onItemActivated: function onItemActivated(_ref3) {
      var item = _ref3.item;
      if (item.value.name === 'color') {
        setIsColorSubmenuOpen(!isColorSubmenuOpen);
      }
      if (item.value.name === 'size') {
        setIsSizeSubmenuOpen(!isSizeSubmenuOpen);
      }
    },
    onMouseEnter: function onMouseEnter(_ref4) {
      var item = _ref4.item;
      if (item.value.name === 'color') {
        setIsColorSubmenuOpen(true);
        setIsOpenedByKeyboard(false);
      }
      if (item.value.name === 'size') {
        setIsSizeSubmenuOpen(true);
        setIsOpenedByKeyboard(false);
      }
    },
    onMouseLeave: function onMouseLeave(_ref5) {
      var item = _ref5.item;
      if (item.value.name === 'color') {
        setIsColorSubmenuOpen(false);
      }
      if (item.value.name === 'size') {
        setIsSizeSubmenuOpen(false);
      }
    },
    fitWidth: fitWidth + fitTolerance,
    fitHeight: fitHeight + fitTolerance
  }))));
};
export default ImageBorder;