import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { findOverflowScrollParent } from '@atlaskit/editor-common/ui';
import { Dropzone } from '@atlaskit/media-picker';
import PickerFacadeProvider from './PickerFacadeProvider';
export var DropzoneWrapper = function DropzoneWrapper(_ref) {
  var mediaState = _ref.mediaState,
    isActive = _ref.isActive,
    featureFlags = _ref.featureFlags,
    editorDomElement = _ref.editorDomElement,
    appearance = _ref.appearance;
  return /*#__PURE__*/React.createElement(PickerFacadeProvider, {
    mediaState: mediaState,
    analyticsName: "dropzone"
  }, function (_ref2) {
    var mediaClientConfig = _ref2.mediaClientConfig,
      config = _ref2.config,
      pickerFacadeInstance = _ref2.pickerFacadeInstance;
    var customDropzoneContainer = mediaState.options.customDropzoneContainer,
      handleDrag = mediaState.handleDrag;
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    var editorHtmlElement = editorDomElement;
    var scrollParent = appearance === 'full-page' && findOverflowScrollParent(editorHtmlElement);
    var container = customDropzoneContainer || (scrollParent ? scrollParent : editorHtmlElement);
    var dropzoneConfig = _objectSpread(_objectSpread({}, config), {}, {
      container: container
    });
    return isActive ? /*#__PURE__*/React.createElement(Dropzone, {
      mediaClientConfig: mediaClientConfig,
      config: dropzoneConfig,
      onError: pickerFacadeInstance.handleUploadError,
      onPreviewUpdate: pickerFacadeInstance.handleUploadPreviewUpdate,
      onEnd: pickerFacadeInstance.handleReady,
      onDragEnter: function onDragEnter() {
        return handleDrag('enter');
      },
      onDragLeave: function onDragLeave() {
        return handleDrag('leave');
      },
      featureFlags: featureFlags
    }) : null;
  });
};