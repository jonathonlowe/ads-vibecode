import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { pixelEntryMessages as messages } from '@atlaskit/editor-common/media';
import { hasParentNodeOfType } from '@atlaskit/editor-prosemirror/utils';
import GrowHorizontalIcon from '@atlaskit/icon/core/grow-horizontal';
import { openPixelEditor } from '../../pm-plugins/pixel-resizing/commands';
import { PixelEntry } from '../../pm-plugins/pixel-resizing/ui';
import { PIXEL_RESIZING_TOOLBAR_WIDTH } from '../../pm-plugins/pixel-resizing/ui/constants';
import { getSelectedMediaSingle } from './utils';
export var getPixelResizingToolbar = function getPixelResizingToolbar(toolbarBaseConfig, _ref) {
  var pluginInjectionApi = _ref.pluginInjectionApi,
    intl = _ref.intl,
    pluginState = _ref.pluginState,
    hoverDecoration = _ref.hoverDecoration,
    isEditorFullWidthEnabled = _ref.isEditorFullWidthEnabled;
  return _objectSpread(_objectSpread({}, toolbarBaseConfig), {}, {
    width: PIXEL_RESIZING_TOOLBAR_WIDTH,
    scrollable: true,
    items: [{
      type: 'custom',
      fallback: [],
      render: function render(editorView) {
        if (!editorView) {
          return null;
        }
        var selectedMediaSingleNode = getSelectedMediaSingle(editorView.state);
        if (!editorView || !selectedMediaSingleNode) {
          return null;
        }
        return /*#__PURE__*/React.createElement(PixelEntry, {
          editorView: editorView,
          intl: intl,
          selectedMediaSingleNode: selectedMediaSingleNode,
          pluginInjectionApi: pluginInjectionApi,
          pluginState: pluginState,
          hoverDecoration: hoverDecoration,
          isEditorFullWidthEnabled: isEditorFullWidthEnabled
        });
      }
    }]
  });
};
export var getResizeDropdownOption = function getResizeDropdownOption(mediaOptions, state, formatMessage, selectedNodeType) {
  if ((selectedNodeType === null || selectedNodeType === void 0 ? void 0 : selectedNodeType.name) !== 'mediaSingle') {
    return [];
  }
  var allowResizing = mediaOptions.allowResizing,
    allowResizingInTables = mediaOptions.allowResizingInTables,
    allowAdvancedToolBarOptions = mediaOptions.allowAdvancedToolBarOptions,
    allowPixelResizing = mediaOptions.allowPixelResizing;
  var isWithinTable = hasParentNodeOfType(state.schema.nodes.table)(state.selection);
  if (allowAdvancedToolBarOptions && allowResizing && (!isWithinTable || allowResizingInTables === true) && allowPixelResizing) {
    return [{
      title: formatMessage(messages.resizeOption),
      onClick: openPixelEditor(),
      icon: /*#__PURE__*/React.createElement(GrowHorizontalIcon, {
        label: ""
      }),
      testId: 'media-pixel-resizing-dropdown-option'
    }];
  }
  return [];
};