import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { NodeSelection, PluginKey } from '@atlaskit/editor-prosemirror/state';
import reducer from './reducer';
export var mediaLinkingPluginKey = new PluginKey('mediaLinking');
var initialState = {
  visible: false,
  editable: false,
  mediaPos: null,
  link: ''
};
function mapping(tr, pluginState) {
  if (pluginState && pluginState.mediaPos !== null) {
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      mediaPos: tr.mapping.map(pluginState.mediaPos)
    });
  }
  return pluginState;
}
function onSelectionChanged(tr) {
  var isNodeSelection = tr.selection instanceof NodeSelection;
  if (!isNodeSelection) {
    return initialState;
  }
  var pos = tr.selection.$from.pos;
  var mediaPos = tr.selection.node.type.name === 'mediaInline' ? pos : pos + 1;
  var node = tr.doc.nodeAt(mediaPos);
  if (!node || !['media', 'mediaInline'].includes(node.type.name)) {
    return initialState;
  }
  var mark = node.marks.find(function (mark) {
    return mark.type.name === 'link';
  });
  if (mark) {
    return _objectSpread(_objectSpread({}, initialState), {}, {
      mediaPos: mediaPos,
      editable: true,
      link: mark.attrs.href
    });
  }
  return _objectSpread(_objectSpread({}, initialState), {}, {
    mediaPos: mediaPos
  });
}
var mediaLinkingPluginFactory = pluginFactory(mediaLinkingPluginKey, reducer, {
  mapping: mapping,
  onSelectionChanged: onSelectionChanged
});
var createMediaLinkingCommand = mediaLinkingPluginFactory.createCommand,
  getMediaLinkingState = mediaLinkingPluginFactory.getPluginState;
export { createMediaLinkingCommand, getMediaLinkingState };
export default (function (dispatch) {
  return new SafePlugin({
    key: mediaLinkingPluginKey,
    state: mediaLinkingPluginFactory.createPluginState(dispatch, initialState)
  });
});