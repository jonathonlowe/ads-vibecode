import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SetAttrsStep } from '@atlaskit/adf-schema/steps';
import { tintDirtyTransaction } from '@atlaskit/editor-common/collab';
import { stateKey as mediaPluginKey } from '../plugin-key';
/**
 * Note that Media Inline is inserted like a media single node into the media plugin state.
 * Though it is not of type mediaSingle, it shares the same `findMediaSingleNode` method
 *
 */
export var findMediaNode = function findMediaNode(mediaPluginState, id) {
  var mediaNodes = mediaPluginState.mediaNodes;

  // Array#find... no IE support
  return mediaNodes.reduce(function (memo, nodeWithPos) {
    if (memo) {
      return memo;
    }
    var node = nodeWithPos.node;
    if (node.attrs.id === id) {
      return nodeWithPos;
    }
    return memo;
  }, null);
};
export var findAllMediaNodes = function findAllMediaNodes(mediaPluginState, id) {
  var mediaNodes = mediaPluginState.mediaNodes;
  return mediaNodes.filter(function (nodeWithHandler) {
    return nodeWithHandler.node.attrs.id === id;
  });
};
export var isMediaNode = function isMediaNode(pos, state) {
  var node = state.doc.nodeAt(pos);
  return node && ['media', 'mediaInline'].includes(node.type.name);
};
export var updateAllMediaNodesAttrs = function updateAllMediaNodesAttrs(id, attrs) {
  return function (state, dispatch) {
    var mediaPluginState = mediaPluginKey.getState(state);
    if (!mediaPluginState) {
      return false;
    }
    var mediaNodes = findAllMediaNodes(mediaPluginState, id);
    var validMediaNodePositions = mediaNodes.reduce(function (acc, _ref) {
      var getPos = _ref.getPos;
      var pos = getPos();
      if (typeof pos !== 'number' || isNaN(pos) || typeof pos === 'number' && !isMediaNode(pos, state)) {
        return acc;
      }
      acc.push(pos);
      return acc;
    }, []);
    if (validMediaNodePositions.length === 0) {
      return false;
    }
    var tr = state.tr;
    validMediaNodePositions.forEach(function (pos) {
      return tr.step(new SetAttrsStep(pos, attrs));
    });
    tr.setMeta('addToHistory', false);
    tintDirtyTransaction(tr);
    if (dispatch) {
      dispatch(tr);
    }
    return true;
  };
};
export var updateCurrentMediaNodeAttrs = function updateCurrentMediaNodeAttrs(attrs, mediaNode, tintDirtyTr) {
  return function (state, dispatch) {
    var pos = mediaNode.getPos();
    if (typeof pos !== 'number' || isNaN(pos) || typeof pos === 'number' && !isMediaNode(pos, state)) {
      return false;
    }
    var tr = state.tr;
    tr.step(new SetAttrsStep(pos, attrs));
    tr.setMeta('addToHistory', false);
    if (tintDirtyTr) {
      tintDirtyTransaction(tr);
    }
    if (dispatch) {
      dispatch(tr);
    }
    return true;
  };
};
export var updateMediaNodeAttrs = function updateMediaNodeAttrs(id, attrs) {
  return function (state, dispatch) {
    var mediaPluginState = mediaPluginKey.getState(state);
    if (!mediaPluginState) {
      return false;
    }
    var mediaNodeWithPos = findMediaNode(mediaPluginState, id);
    if (!mediaNodeWithPos) {
      return false;
    }
    var tr = state.tr;
    var pos = mediaNodeWithPos.getPos();
    if (typeof pos !== 'number' || !isMediaNode(pos, state)) {
      return false;
    }
    tr.step(new SetAttrsStep(pos, attrs)).setMeta('addToHistory', false);
    if (dispatch) {
      dispatch(tr);
    }
    return true;
  };
};
export var replaceExternalMedia = function replaceExternalMedia(pos, attrs) {
  return function (state, dispatch) {
    var tr = state.tr;
    var node = tr.doc.nodeAt(pos);
    if (!node || node.type.name !== 'media') {
      return false;
    }
    tr.step(new SetAttrsStep(pos, _objectSpread({
      type: 'file',
      url: null
    }, attrs))).setMeta('addToHistory', false);
    if (dispatch) {
      dispatch(tr);
    }
    return true;
  };
};