/**
 * This takes an adf hex color and returns a matching background palette
 * color.
 *
 * By providing a design token, this enables ADF content to be rendered in new themes such as dark mode.
 *
 * Example usage
 * ```tsx
 * const cssValue = hexToBackgroundPaletteColor('#FFFFFF');
 * //     ^? const cssValue: string
 * <div style={{backgroundColor: cssValue}} />
 * ```
 *
 * The names of tokens can change over time, and the values of tokens will differ between themes.
 * The exact output of this function is an implementation detail and should only be used when rendering
 * content to the user, on a client with a matching major version of `@atlaskit/tokens`.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color.
 */
export declare function hexToEditorBackgroundPaletteColor<HexColor extends string>(hexColor: HexColor): HexColor extends EditorBackgroundPaletteKey ? EditorBackgroundPalette[HexColor]['token'] : string | undefined;
/**
 * Takes an ADF hex color and returns the rendered hex code for the associated background palette design token using getTokenValue.
 * If the provided color does not exist in the Editor color palette, this function returns undefined.
 *
 * This should only be used when rendering content where CSS variables are not feasible, such as a non-CSS environment
 * or to enable cross-app copy/paste.
 *
 * WARNING: If the rendered theme changes (such as from light -> dark mode) the value returned here will no longer match
 * the surrounding UI and will need to be re-fetched.
 * In addition, the values of tokens will differ between themes and the value for a given theme can and will change.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color.
 */
export declare function hexToEditorBackgroundPaletteRawValue<HexColor extends string>(hexColor: HexColor): HexColor extends EditorBackgroundPaletteKey ? string : undefined;
type EditorBackgroundPalette = typeof editorBackgroundPalette;
export type EditorBackgroundPaletteKey = keyof EditorBackgroundPalette;
/**
 * Values are asserted to improve generated type declarations
 * Using object structure as getValue() function needed for table values, and other
 * properties may be needed in the future.
 */
export declare const editorBackgroundPalette: {
    /** blue - light */
    "#DEEBFF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-blue-subtlest, #DEEBFF)";
    };
    /** blue - medium */
    "#B3D4FF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-blue-subtler, #B3D4FF)";
    };
    /** blue - strong */
    "#4C9AFF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-blue-subtle, #4C9AFF)";
    };
    /** teal - light */
    "#E6FCFF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-teal-subtlest, #E6FCFF)";
    };
    /** teal - medium */
    "#B3F5FF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-teal-subtler, #B3F5FF)";
    };
    /** teal - strong */
    "#79E2F2": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-teal-subtle, #79E2F2)";
    };
    /** green - light */
    "#E3FCEF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-green-subtlest, #E3FCEF)";
    };
    /** green - medium */
    "#ABF5D1": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-green-subtler, #ABF5D1)";
    };
    /** green - strong */
    "#57D9A3": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-green-subtle, #57D9A3)";
    };
    /** yellowOrange - light */
    "#FFFAE6": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-yellow-subtlest, #FFFAE6)";
    };
    /** yellowOrange - medium */
    "#FFF0B3": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-yellow-subtler, #FFF0B3)";
    };
    /** yellowOrange - strong */
    "#FFC400": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-orange-subtle, #FFC400)";
    };
    /** red - light */
    "#FFEBE6": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-red-subtlest, #FFEBE6)";
    };
    /** red - medium */
    "#FFBDAD": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-red-subtler, #FFBDAD)";
    };
    /** red - strong */
    "#FF8F73": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-red-subtle, #FF8F73)";
    };
    /** purple - light */
    "#EAE6FF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-purple-subtlest, #EAE6FF)";
    };
    /** purple - medium */
    "#C0B6F2": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-purple-subtler, #C0B6F2)";
    };
    /** purple - strong */
    "#998DD9": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-purple-subtle, #998DD9)";
    };
    /** whiteGray - light */
    "#FFFFFF": {
        getValue: (fallback: string) => string;
        token: "var(--ds-surface, #FFFFFF)";
    };
    /** whiteGray - medium */
    "#F4F5F7": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-gray-subtlest, #F4F5F7)";
    };
    /** whiteGray - strong */
    "#B3BAC5": {
        getValue: (fallback: string) => string;
        token: "var(--ds-background-accent-gray-subtle, #B3BAC5)";
    };
};
export {};
