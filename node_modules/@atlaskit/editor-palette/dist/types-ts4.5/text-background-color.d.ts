export declare const textBackgroundColorPalette: {
    /** Gray - light */
    "#DCDFE4": "var(--ds-background-accent-gray-subtler, #DCDFE4)";
    /** Teal - light */
    "#C6EDFB": "var(--ds-background-accent-teal-subtler, #C6EDFB)";
    /** Lime - light */
    "#D3F1A7": "var(--ds-background-accent-lime-subtler, #D3F1A7)";
    /** Orange - light */
    "#FEDEC8": "var(--ds-background-accent-orange-subtler, #FEDEC8)";
    /** Magenta - light */
    "#FDD0EC": "var(--ds-background-accent-magenta-subtler, #FDD0EC)";
    /** Purple - light */
    "#DFD8FD": "var(--ds-background-accent-purple-subtler, #DFD8FD)";
};
type TextBackgroundColorPalette = typeof textBackgroundColorPalette;
export type TextBackgroundColorPaletteKey = keyof TextBackgroundColorPalette;
/**
 * This takes an ADF hex color and returns a matching text background palette color.
 *
 * By providing a design token, this enables ADF content to be rendered in new themes such as dark mode.
 *
 * Example usage
 * ```tsx
 * const cssValue = hexToEditorTextBackgroundPaletteColor('#D3F1A7');
 *
 * <span style={{backgroundColor: cssValue}} />
 * ```
 * The names of tokens can change over time, and the values of tokens will differ between themes.
 * The exact output of this function is an implementation detail and should only be used when rendering
 * content to the user, on a client with a matching major version of `@atlaskit/tokens`.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color
 */
export declare function hexToEditorTextBackgroundPaletteColor<HexColor extends string>(hexColor: HexColor): HexColor extends TextBackgroundColorPaletteKey ? TextBackgroundColorPalette[HexColor] : string | undefined;
export {};
