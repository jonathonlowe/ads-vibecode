import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _editorTableChartsPal;
// This import will be stripped on build
import { getTokenValue } from '@atlaskit/tokens';

/**
 * This takes an adf hex color and returns a matching chart palette
 * color.
 *
 * By providing a design token, this enables ADF content to be rendered in new themes such as dark mode.
 *
 * Example usage
 * ```tsx
 * const cssValue = hexToEditorTableChartsPaletteColor('#FFFFFF');
 * //     ^? const cssValue: string
 * <div style={{backgroundColor: cssValue}} />
 * ```
 *
 * The names of tokens can change over time, and the values of tokens will differ between themes.
 * The exact output of this function is an implementation detail and should only be used when rendering
 * content to the user, on a client with a matching major version of `@atlaskit/tokens`.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color
 */
export function hexToEditorTableChartsPaletteColor(hexColor) {
  // Ts ignore used to allow use of conditional return type
  // (preferencing better type on consumption over safety in implementation)
  // @ts-ignore
  var tokenData = editorTableChartsPalette[hexColor.toUpperCase()];
  return tokenData ? tokenData.token : undefined;
}

/**
 * Takes an ADF hex color and returns the rendered hex code for the associated chart palette design token using getTokenValue.
 * If the provided color does not exist in the Editor color palette, this function returns undefined.
 *
 * This should only be used when rendering content where CSS variables are not feasible, such as a non-CSS environment
 * or to enable cross-app copy/paste.
 *
 * WARNING: If the rendered theme changes (such as from light -> dark mode) the value returned here will no longer match
 * the surrounding UI and will need to be re-fetched.
 * In addition, the values of tokens will differ between themes and the value for a given theme can and will change.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color.
 */
export function hexToEditorTableChartsPaletteRawValue(hexColor) {
  // Ts ignore used to allow use of conditional return type
  // (preferencing better type on consumption over safety in implementation)
  // @ts-ignore
  var tokenData = editorTableChartsPalette[hexColor.toUpperCase()];
  return tokenData ? tokenData.getValue(hexColor) : undefined;
}
// Colors taken from
// https://hello.atlassian.net/wiki/spaces/DST/pages/1790979421/DSTRFC-002+-+Shifting+Editor+s+color+palette+to+design+tokens
// values are asserted to improve generated type declarations

/**
 * Tokenize hex codes into DST chart colors or
 *  into DST background.accent colors.
 *
 * The hex codes do not match the DST tokens, they are
 *  constants that are saved in the ADF that will be rendered
 *  as the mapped DST token.
 *
 * https://product-fabric.atlassian.net/browse/ED-17042
 */
var editorTableChartsPalette = (_editorTableChartsPal = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_editorTableChartsPal, '#7AB2FF', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.blue.subtle', fallback);
  },
  token: "var(--ds-background-accent-blue-subtle, #7AB2FF)"
}), '#60C6D2', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.teal.subtle', fallback);
  },
  token: "var(--ds-background-accent-teal-subtle, #60C6D2)"
}), '#6BE1B0', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.green.subtle', fallback);
  },
  token: "var(--ds-background-accent-green-subtle, #6BE1B0)"
}), '#FFDB57', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.yellow.subtle', fallback);
  },
  token: "var(--ds-background-accent-yellow-subtle, #FFDB57)"
}), '#FAA53D', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.orange.subtle', fallback);
  },
  token: "var(--ds-background-accent-orange-subtle, #FAA53D)"
}), '#FF8F73', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.red.subtle', fallback);
  },
  token: "var(--ds-background-accent-red-subtle, #FF8F73)"
}), '#E774BB', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.magenta.subtle', fallback);
  },
  token: "var(--ds-background-accent-magenta-subtle, #E774BB)"
}), '#B5A7FB', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.purple.subtle', fallback);
  },
  token: "var(--ds-background-accent-purple-subtle, #B5A7FB)"
}), '#8993A5', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.background.accent.gray.subtler', fallback);
  },
  token: "var(--ds-background-accent-gray-subtler, #8993A5)"
}), '#247FFF', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.blue.bold', fallback);
  },
  token: "var(--ds-chart-blue-bold, #247FFF)"
}), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_editorTableChartsPal, '#1D9AAA', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.teal.bold', fallback);
  },
  token: "var(--ds-chart-teal-bold, #1D9AAA)"
}), '#23A971', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.green.bold', fallback);
  },
  token: "var(--ds-chart-green-bold, #23A971)"
}), '#FFBE33', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.yellow.bold', fallback);
  },
  token: "var(--ds-chart-yellow-bold, #FFBE33)"
}), '#D97008', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.orange.bold', fallback);
  },
  token: "var(--ds-chart-orange-bold, #D97008)"
}), '#FC552C', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.red.bold', fallback);
  },
  token: "var(--ds-chart-red-bold, #FC552C)"
}), '#DA62AC', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.magenta.bold', fallback);
  },
  token: "var(--ds-chart-magenta-bold, #DA62AC)"
}), '#8B77EE', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.purple.bold', fallback);
  },
  token: "var(--ds-chart-purple-bold, #8B77EE)"
}), '#8590A2', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.gray.bold', fallback);
  },
  token: "var(--ds-chart-gray-bold, #8590A2)"
}), '#0055CC', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.blue.bolder', fallback);
  },
  token: "var(--ds-chart-blue-bolder, #0055CC)"
}), '#1D7F8C', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.teal.bolder', fallback);
  },
  token: "var(--ds-chart-teal-bolder, #1D7F8C)"
}), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_editorTableChartsPal, '#177D52', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.green.bolder', fallback);
  },
  token: "var(--ds-chart-green-bolder, #177D52)"
}), '#FF9D00', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.yellow.bolder', fallback);
  },
  token: "var(--ds-chart-yellow-bolder, #FF9D00)"
}), '#B65C02', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.orange.bolder', fallback);
  },
  token: "var(--ds-chart-orange-bolder, #B65C02)"
}), '#D32D03', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.red.bolder', fallback);
  },
  token: "var(--ds-chart-red-bolder, #D32D03)"
}), '#CD519D', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.magenta.bolder', fallback);
  },
  token: "var(--ds-chart-magenta-bolder, #CD519D)"
}), '#5A43D0', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.purple.bolder', fallback);
  },
  token: "var(--ds-chart-purple-bolder, #5A43D0)"
}), '#758195', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.gray.bolder', fallback);
  },
  token: "var(--ds-chart-gray-bolder, #758195)"
}), '#003884', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.blue.boldest', fallback);
  },
  token: "var(--ds-chart-blue-boldest, #003884)"
}), '#206B74', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.teal.boldest', fallback);
  },
  token: "var(--ds-chart-teal-boldest, #206B74)"
}), '#055C3F', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.green.boldest', fallback);
  },
  token: "var(--ds-chart-green-boldest, #055C3F)"
}), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_editorTableChartsPal, '#946104', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.yellow.boldest', fallback);
  },
  token: "var(--ds-chart-yellow-boldest, #946104)"
}), '#974F0C', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.orange.boldest', fallback);
  },
  token: "var(--ds-chart-orange-boldest, #974F0C)"
}), '#A32000', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.red.boldest', fallback);
  },
  token: "var(--ds-chart-red-boldest, #A32000)"
}), '#943D73', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.magenta.boldest', fallback);
  },
  token: "var(--ds-chart-magenta-boldest, #943D73)"
}), '#44368B', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.purple.boldest', fallback);
  },
  token: "var(--ds-chart-purple-boldest, #44368B)"
}), '#44546F', {
  getValue: function getValue(fallback) {
    return getTokenValue('color.chart.gray.boldest', fallback);
  },
  token: "var(--ds-chart-gray-boldest, #44546F)"
}));