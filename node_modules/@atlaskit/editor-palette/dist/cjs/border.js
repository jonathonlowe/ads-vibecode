"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editorBorderPalette = void 0;
exports.hexToEditorBorderPaletteColor = hexToEditorBorderPaletteColor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
// This import will be stripped on build

/**
 * This takes an adf hex color and returns a matching border palette color.
 *
 * By providing a design token, this enables ADF content to be rendered in new themes such as dark mode.
 *
 * Example usage
 * ```tsx
 * const cssValue = hexToEditorBorderPaletteColor('#091E4224');
 * //     ^? const cssValue: string
 * <div style={{borderColor: cssValue}} />
 * ```
 * The names of tokens can change over time, and the values of tokens will differ between themes.
 * The exact output of this function is an implementation detail and should only be used when rendering
 * content to the user, on a client with a matching major version of `@atlaskit/tokens`.
 * - **DO NOT**: store the output of these functions in any user-generated content or back-end.
 * - **DO**: store the ADF hex color, and use these utilities at render time to display the themed version of the color
 */

function hexToEditorBorderPaletteColor(hexColor) {
  // Ts ignore used to allow use of conditional return type
  // (preferencing better type on consumption over safety in implementation)
  // @ts-ignore
  return editorBorderPalette[hexColor.toUpperCase()];
}
var editorBorderPalette = exports.editorBorderPalette = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, '#091E4224', "var(--ds-border, #091E4224)"), '#758195', "var(--ds-border-bold, #758195)"), '#172B4D', "var(--ds-text, #172B4D)");