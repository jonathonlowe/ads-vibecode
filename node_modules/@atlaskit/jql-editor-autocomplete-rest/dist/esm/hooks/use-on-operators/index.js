import { useCallback } from 'react';
import escapeRegExp from 'lodash/escapeRegExp';
import { empty } from 'rxjs/observable/empty';
import { concatMap } from 'rxjs/operators/concatMap';
import { filter } from 'rxjs/operators/filter';
import { map } from 'rxjs/operators/map';
import { toArray } from 'rxjs/operators/toArray';
import findField$ from '../../utils/find-field-observable';
var useOnOperators = function useOnOperators(jqlSearchableFields$) {
  return useCallback(function (query, field) {
    if (typeof field !== 'string' || field === '') {
      return empty();
    }
    var filterRegex = typeof query === 'string' && query !== '' ? new RegExp("^".concat(escapeRegExp(query), "[^$]"), 'i') : undefined;

    // Find operators for matching field
    return findField$(jqlSearchableFields$, field).pipe(concatMap(function (_ref) {
      var operators = _ref.operators;
      return operators;
    }),
    // Filter operators that match query
    filter(function (operator) {
      return !filterRegex || operator.match(filterRegex) !== null;
    }), map(function (operator) {
      var value = operator.toUpperCase();
      return {
        name: value,
        value: value
      };
    }), toArray(),
    // We can filter out empty arrays as there is nothing to consume
    filter(function (operators) {
      return operators.length > 0;
    }));
  }, [jqlSearchableFields$]);
};
export default useOnOperators;