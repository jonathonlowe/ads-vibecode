import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback } from 'react';
import { EventType } from '@atlaskit/jql-editor-common';
import { Action, ActionSubject } from '../../analytics';
export var getAutocompleteSuggestionsUrl = function getAutocompleteSuggestionsUrl(field, query) {
  return "/rest/api/latest/jql/autocompletedata/suggestions?fieldName=".concat(field, "&fieldValue=").concat(query !== null && query !== void 0 ? query : '');
};
export var useFetchFieldValues = function useFetchFieldValues(getSuggestions, createAndFireAnalyticsEvent) {
  return useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(field, query) {
      var data, div, results;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return getSuggestions(getAutocompleteSuggestionsUrl(field, query));
          case 3:
            data = _context.sent;
            div = document.createElement('div');
            results = data.results.map(function (operand) {
              var _div$textContent;
              // The displayName from the API includes HTML tags to bold matching text e.g. `<b>o</b>pen`
              // We set this as innerHTML so we can get the raw textContent
              div.innerHTML = operand.displayName;
              return {
                name: (_div$textContent = div.textContent) !== null && _div$textContent !== void 0 ? _div$textContent : '',
                value: operand.value
              };
            });
            createAndFireAnalyticsEvent({
              action: Action.SUCCESS,
              actionSubject: ActionSubject.AUTOCOMPLETE_SUGGESTIONS,
              eventType: EventType.OPERATIONAL
            });
            return _context.abrupt("return", results);
          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);
            createAndFireAnalyticsEvent({
              action: Action.FAILED,
              actionSubject: ActionSubject.AUTOCOMPLETE_SUGGESTIONS,
              eventType: EventType.OPERATIONAL
            });
            throw _context.t0;
          case 14:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 10]]);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), [createAndFireAnalyticsEvent, getSuggestions]);
};