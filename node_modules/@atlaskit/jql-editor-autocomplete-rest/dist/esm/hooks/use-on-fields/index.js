import { useCallback } from 'react';
import unescape from 'lodash/unescape';
import { empty } from 'rxjs/observable/empty';
import { filter } from 'rxjs/operators/filter';
import { map } from 'rxjs/operators/map';
import { take } from 'rxjs/operators/take';
import { toArray } from 'rxjs/operators/toArray';
import { filterJqlValue } from '../../utils/filter-jql-value';
import { normalize } from '../../utils/strings';
// Hard coded limit to prevent excessive number of options being rendered in the autocomplete dropdown.
export var MAX_VISIBLE_OPTIONS = 20;
var CF_ID_PATTERN = /^"?cf\[\d+]"?$/;
var COLLAPSED_FIELD_PATTERN = /^"?.+\[(.+)]"?$/;
var isCollapsedField = function isCollapsedField(_ref) {
  var value = _ref.value;
  return COLLAPSED_FIELD_PATTERN.test(value) && !CF_ID_PATTERN.test(value);
};
export var getFieldType = function getFieldType(field) {
  if (!isCollapsedField(field)) {
    return null;
  }
  var matches = COLLAPSED_FIELD_PATTERN.exec(field.value);
  if (!matches || matches.length < 2) {
    return null;
  }
  return matches[1];
};
var useOnFields = function useOnFields(jqlSearchableFields$, jqlOrderableFields$) {
  // Returns an Observable of the fields to render for the provided query string
  return useCallback(function (query, clause) {
    if (clause === undefined) {
      return empty();
    }
    var jqlFields$ = clause === 'orderBy' ? jqlOrderableFields$ : jqlSearchableFields$;
    return jqlFields$.pipe(filter(function (field) {
      return filterJqlValue(field, query);
    }),
    // Limit the result to MAX_VISIBLE_OPTIONS
    take(MAX_VISIBLE_OPTIONS), map(function (field) {
      var fieldType = getFieldType(field);
      if (fieldType !== null) {
        var name = unescape(field.displayName).replace(" - ".concat(normalize(field.value)), '');
        return {
          name: name,
          value: field.value,
          fieldType: fieldType,
          isDeprecated: field.deprecated === 'true',
          deprecatedSearcherKey: field.deprecatedSearcherKey
        };
      }
      return {
        name: unescape(field.displayName),
        value: field.value,
        isDeprecated: field.deprecated === 'true',
        deprecatedSearcherKey: field.deprecatedSearcherKey
      };
    }), toArray(),
    // We can filter out empty arrays as there is nothing to consume
    filter(function (fields) {
      return fields.length > 0;
    }));
  }, [jqlSearchableFields$, jqlOrderableFields$]);
};
export default useOnFields;