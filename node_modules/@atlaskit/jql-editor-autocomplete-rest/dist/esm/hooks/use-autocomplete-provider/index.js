import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useEffect, useMemo } from 'react';
import { useJqlEditorAutocompleteAnalytics } from '../../analytics';
import { useJqlAutocompleteActions, useJqlFunctionsObservable, useJqlOrderableFieldsObservable, useJqlSearchableFieldsObservable } from '../../state';
import useOnFields from '../use-on-fields';
import useOnFunctions from '../use-on-functions';
import useOnOperators from '../use-on-operators';
import useOnValues from '../use-on-values';
export var useAutocompleteProvider = function useAutocompleteProvider(analyticsSource, getInitialData, getSuggestions) {
  var _useJqlEditorAutocomp = useJqlEditorAutocompleteAnalytics(analyticsSource),
    createAndFireAnalyticsEvent = _useJqlEditorAutocomp.createAndFireAnalyticsEvent;
  var _useJqlAutocompleteAc = useJqlAutocompleteActions(),
    _useJqlAutocompleteAc2 = _slicedToArray(_useJqlAutocompleteAc, 2),
    load = _useJqlAutocompleteAc2[1].load;
  var _useJqlSearchableFiel = useJqlSearchableFieldsObservable(),
    _useJqlSearchableFiel2 = _slicedToArray(_useJqlSearchableFiel, 1),
    jqlSearchableFields$ = _useJqlSearchableFiel2[0];
  var _useJqlOrderableField = useJqlOrderableFieldsObservable(),
    _useJqlOrderableField2 = _slicedToArray(_useJqlOrderableField, 1),
    jqlOrderableFields$ = _useJqlOrderableField2[0];
  var _useJqlFunctionsObser = useJqlFunctionsObservable(),
    _useJqlFunctionsObser2 = _slicedToArray(_useJqlFunctionsObser, 1),
    jqlFunctions$ = _useJqlFunctionsObser2[0];
  var onFields = useOnFields(jqlSearchableFields$, jqlOrderableFields$);
  var onOperators = useOnOperators(jqlSearchableFields$);
  var onFunctions = useOnFunctions(jqlSearchableFields$, jqlFunctions$);
  var onValues = useOnValues(jqlSearchableFields$, getSuggestions, createAndFireAnalyticsEvent);
  useEffect(function () {
    // Load autocomplete data on mount
    load(getInitialData, createAndFireAnalyticsEvent);
  }, [createAndFireAnalyticsEvent, getInitialData, load]);
  return useMemo(function () {
    return {
      onFields: onFields,
      onOperators: onOperators,
      onFunctions: onFunctions,
      onValues: onValues
    };
  }, [onFields, onOperators, onFunctions, onValues]);
};