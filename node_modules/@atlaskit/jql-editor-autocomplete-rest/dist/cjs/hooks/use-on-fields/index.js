"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldType = exports.default = exports.MAX_VISIBLE_OPTIONS = void 0;
var _react = require("react");
var _unescape = _interopRequireDefault(require("lodash/unescape"));
var _empty = require("rxjs/observable/empty");
var _filter = require("rxjs/operators/filter");
var _map = require("rxjs/operators/map");
var _take = require("rxjs/operators/take");
var _toArray = require("rxjs/operators/toArray");
var _filterJqlValue = require("../../utils/filter-jql-value");
var _strings = require("../../utils/strings");
// Hard coded limit to prevent excessive number of options being rendered in the autocomplete dropdown.
var MAX_VISIBLE_OPTIONS = exports.MAX_VISIBLE_OPTIONS = 20;
var CF_ID_PATTERN = /^"?cf\[\d+]"?$/;
var COLLAPSED_FIELD_PATTERN = /^"?.+\[(.+)]"?$/;
var isCollapsedField = function isCollapsedField(_ref) {
  var value = _ref.value;
  return COLLAPSED_FIELD_PATTERN.test(value) && !CF_ID_PATTERN.test(value);
};
var getFieldType = exports.getFieldType = function getFieldType(field) {
  if (!isCollapsedField(field)) {
    return null;
  }
  var matches = COLLAPSED_FIELD_PATTERN.exec(field.value);
  if (!matches || matches.length < 2) {
    return null;
  }
  return matches[1];
};
var useOnFields = function useOnFields(jqlSearchableFields$, jqlOrderableFields$) {
  // Returns an Observable of the fields to render for the provided query string
  return (0, _react.useCallback)(function (query, clause) {
    if (clause === undefined) {
      return (0, _empty.empty)();
    }
    var jqlFields$ = clause === 'orderBy' ? jqlOrderableFields$ : jqlSearchableFields$;
    return jqlFields$.pipe((0, _filter.filter)(function (field) {
      return (0, _filterJqlValue.filterJqlValue)(field, query);
    }),
    // Limit the result to MAX_VISIBLE_OPTIONS
    (0, _take.take)(MAX_VISIBLE_OPTIONS), (0, _map.map)(function (field) {
      var fieldType = getFieldType(field);
      if (fieldType !== null) {
        var name = (0, _unescape.default)(field.displayName).replace(" - ".concat((0, _strings.normalize)(field.value)), '');
        return {
          name: name,
          value: field.value,
          fieldType: fieldType,
          isDeprecated: field.deprecated === 'true',
          deprecatedSearcherKey: field.deprecatedSearcherKey
        };
      }
      return {
        name: (0, _unescape.default)(field.displayName),
        value: field.value,
        isDeprecated: field.deprecated === 'true',
        deprecatedSearcherKey: field.deprecatedSearcherKey
      };
    }), (0, _toArray.toArray)(),
    // We can filter out empty arrays as there is nothing to consume
    (0, _filter.filter)(function (fields) {
      return fields.length > 0;
    }));
  }, [jqlSearchableFields$, jqlOrderableFields$]);
};
var _default = exports.default = useOnFields;