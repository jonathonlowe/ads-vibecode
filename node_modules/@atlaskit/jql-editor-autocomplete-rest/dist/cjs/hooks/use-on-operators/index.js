"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _escapeRegExp = _interopRequireDefault(require("lodash/escapeRegExp"));
var _empty = require("rxjs/observable/empty");
var _concatMap = require("rxjs/operators/concatMap");
var _filter = require("rxjs/operators/filter");
var _map = require("rxjs/operators/map");
var _toArray = require("rxjs/operators/toArray");
var _findFieldObservable = _interopRequireDefault(require("../../utils/find-field-observable"));
var useOnOperators = function useOnOperators(jqlSearchableFields$) {
  return (0, _react.useCallback)(function (query, field) {
    if (typeof field !== 'string' || field === '') {
      return (0, _empty.empty)();
    }
    var filterRegex = typeof query === 'string' && query !== '' ? new RegExp("^".concat((0, _escapeRegExp.default)(query), "[^$]"), 'i') : undefined;

    // Find operators for matching field
    return (0, _findFieldObservable.default)(jqlSearchableFields$, field).pipe((0, _concatMap.concatMap)(function (_ref) {
      var operators = _ref.operators;
      return operators;
    }),
    // Filter operators that match query
    (0, _filter.filter)(function (operator) {
      return !filterRegex || operator.match(filterRegex) !== null;
    }), (0, _map.map)(function (operator) {
      var value = operator.toUpperCase();
      return {
        name: value,
        value: value
      };
    }), (0, _toArray.toArray)(),
    // We can filter out empty arrays as there is nothing to consume
    (0, _filter.filter)(function (operators) {
      return operators.length > 0;
    }));
  }, [jqlSearchableFields$]);
};
var _default = exports.default = useOnOperators;