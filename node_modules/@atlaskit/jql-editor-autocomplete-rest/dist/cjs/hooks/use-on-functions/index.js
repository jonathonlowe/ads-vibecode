"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _escapeRegExp = _interopRequireDefault(require("lodash/escapeRegExp"));
var _empty = require("rxjs/observable/empty");
var _concatMap = require("rxjs/operators/concatMap");
var _filter = require("rxjs/operators/filter");
var _map = require("rxjs/operators/map");
var _toArray = require("rxjs/operators/toArray");
var _findFieldObservable = _interopRequireDefault(require("../../utils/find-field-observable"));
var useOnFunctions = function useOnFunctions(jqlSearchableFields$, jqlFunctions$) {
  return (0, _react.useCallback)(function (query, field, isListOperator) {
    if (typeof field !== 'string' || field === '') {
      return (0, _empty.empty)();
    }
    var filterRegex = typeof query === 'string' && query !== '' ? new RegExp("^".concat((0, _escapeRegExp.default)(query), "[^$]"), 'i') : undefined;
    var field$ = (0, _findFieldObservable.default)(jqlSearchableFields$, field);

    // Find all functions that match our query with a type that intersects our field types
    return field$.pipe((0, _concatMap.concatMap)(function (matchingField) {
      return jqlFunctions$.pipe((0, _filter.filter)(function (func) {
        return !filterRegex || func.displayName.match(filterRegex) !== null;
      }), (0, _filter.filter)(function (func) {
        return (
          // Do not include functions that return a list unless we are using a list operator
          !!isListOperator || func.isList !== 'true'
        );
      }), (0, _filter.filter)(function (func) {
        return (
          // Include functions with a type that intersects our field types
          func.types.filter(function (type) {
            return matchingField.types.includes(type);
          }).length > 0
        );
      }), (0, _map.map)(function (func) {
        return {
          name: func.displayName,
          value: func.value,
          isListFunction: func.isList === 'true' || func.supportsListAndSingleValueOperators === 'true'
        };
      }), (0, _toArray.toArray)());
    }),
    // We can filter out empty arrays as there is nothing to consume
    (0, _filter.filter)(function (operands) {
      return operands.length > 0;
    }));
  }, [jqlSearchableFields$, jqlFunctions$]);
};
var _default = exports.default = useOnFunctions;