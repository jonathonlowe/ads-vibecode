import { type ContainerComponent } from 'react-sweet-state';
import type { Observable } from 'rxjs/Observable';
import { type JQLFieldResponse, type JQLFunctionResponse } from '../common/types';
import { type Actions, type Store } from './types';
export declare const actions: Actions;
export declare const store: import("react-sweet-state").Store<Store, Actions>;
/**
 * Exported to allow consumers to have multiple store instances with initial JQL data. Typically this is unnecessary as
 * initial autocomplete data can be shared across all JQL editor instances but this can be useful for storybook testing
 * if you want to mock different responses for each story.
 */
export declare const JQLAutocompleteContainer: ContainerComponent<{}>;
export declare const useJqlAutocompleteActions: import("react-sweet-state").HookFunction<void, import("react-sweet-state").BoundActions<Store, Actions>, void>;
export declare const useJqlSearchableFieldsObservable: import("react-sweet-state").HookFunction<Observable<JQLFieldResponse>, import("react-sweet-state").BoundActions<Store, Actions>, void>;
export declare const useJqlOrderableFieldsObservable: import("react-sweet-state").HookFunction<Observable<JQLFieldResponse>, import("react-sweet-state").BoundActions<Store, Actions>, void>;
export declare const useJqlFunctionsObservable: import("react-sweet-state").HookFunction<Observable<JQLFunctionResponse>, import("react-sweet-state").BoundActions<Store, Actions>, void>;
