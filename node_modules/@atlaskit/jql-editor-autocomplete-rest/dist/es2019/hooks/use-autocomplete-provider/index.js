import { useEffect, useMemo } from 'react';
import { useJqlEditorAutocompleteAnalytics } from '../../analytics';
import { useJqlAutocompleteActions, useJqlFunctionsObservable, useJqlOrderableFieldsObservable, useJqlSearchableFieldsObservable } from '../../state';
import useOnFields from '../use-on-fields';
import useOnFunctions from '../use-on-functions';
import useOnOperators from '../use-on-operators';
import useOnValues from '../use-on-values';
export const useAutocompleteProvider = (analyticsSource, getInitialData, getSuggestions) => {
  const {
    createAndFireAnalyticsEvent
  } = useJqlEditorAutocompleteAnalytics(analyticsSource);
  const [, {
    load
  }] = useJqlAutocompleteActions();
  const [jqlSearchableFields$] = useJqlSearchableFieldsObservable();
  const [jqlOrderableFields$] = useJqlOrderableFieldsObservable();
  const [jqlFunctions$] = useJqlFunctionsObservable();
  const onFields = useOnFields(jqlSearchableFields$, jqlOrderableFields$);
  const onOperators = useOnOperators(jqlSearchableFields$);
  const onFunctions = useOnFunctions(jqlSearchableFields$, jqlFunctions$);
  const onValues = useOnValues(jqlSearchableFields$, getSuggestions, createAndFireAnalyticsEvent);
  useEffect(() => {
    // Load autocomplete data on mount
    load(getInitialData, createAndFireAnalyticsEvent);
  }, [createAndFireAnalyticsEvent, getInitialData, load]);
  return useMemo(() => ({
    onFields,
    onOperators,
    onFunctions,
    onValues
  }), [onFields, onOperators, onFunctions, onValues]);
};