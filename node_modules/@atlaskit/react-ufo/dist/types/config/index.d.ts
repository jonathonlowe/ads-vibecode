import type { AssetsClassification, InteractionMetrics, InteractionType } from '../common';
export interface AdditionalData {
    [key: string]: null | string | number | boolean | undefined | AdditionalData | Record<string, AdditionalData> | Array<AdditionalData>;
}
export interface SSRTiming {
    label: string;
    data: {
        startTime: number;
        duration: number;
    };
}
type Capability = 'feature_flag_access' | 'react_profiler';
type InteractionKind = 'page_load' | 'transition' | 'press' | 'typing' | 'legacy' | 'hover';
type UFONameOverride = {
    readonly [ufoName: string]: {
        readonly [metricKey: string]: string;
    };
};
type ResourceType = 'script' | 'link' | 'fetch' | 'xmlhttprequest';
type SelectorConfig = {
    id: boolean;
    testId: boolean;
    role: boolean;
    className: boolean;
    dataVC?: boolean;
};
type Rates = {
    readonly [key: string]: number;
};
export type Config = {
    readonly enabled?: boolean;
    readonly doNotAbortActivePressInteraction?: string[];
    readonly doNotAbortActivePressInteractionOnTransition?: string[];
    readonly awaitBM3TTI?: string[];
    readonly ufoNameOverrides?: UFONameOverride;
    readonly namePrefix?: string;
    readonly segmentPrefix?: string;
    readonly rates?: Rates;
    readonly rules?: readonly {
        readonly test?: string;
        readonly rate?: number;
    }[];
    readonly killswitch?: readonly string[];
    readonly killswitchNestedSegments?: boolean;
    readonly typingMethod?: string;
    readonly capability?: Record<Capability, number>;
    readonly kind?: Record<InteractionKind, number>;
    readonly allowedResources?: Array<ResourceType>;
    readonly allowedResourcesParams?: Array<string>;
    readonly autoGeneratedRate?: number;
    readonly removePageSegmentsUFOPrefixes?: boolean;
    readonly removeInteractionsUFOPrefixes?: boolean;
    readonly product: string;
    readonly region: string;
    readonly additionalPayloadData?: (interaction: InteractionMetrics) => AdditionalData;
    readonly ssr?: {
        readonly getSSRTimings?: () => SSRTiming[];
        readonly getSSRDoneTime?: () => number | undefined;
    };
    /**
     * @private
     * @deprecated remove me with next major release
     */
    readonly assetsClassification?: AssetsClassification;
    readonly assetsConfig?: AssetsClassification;
    readonly enableBetterPageVisibilityApi?: boolean;
    readonly vc?: {
        readonly enabled?: boolean;
        readonly heatmapSize?: number;
        readonly oldDomUpdates?: boolean;
        readonly devToolsEnabled?: boolean;
        readonly selectorConfig?: SelectorConfig;
        readonly ssr?: boolean;
        readonly ssrWhitelist?: string[];
        readonly stopVCAtInteractionFinish?: boolean;
        readonly enableVCObserverNew?: boolean;
    };
    readonly postInteractionLog?: {
        readonly enabled?: boolean;
        readonly rates?: Rates;
        readonly kind?: Record<InteractionType, number>;
    };
    readonly experimentalInteractionMetrics?: {
        readonly enabled?: boolean;
        readonly rates?: Rates;
        readonly kind?: Record<InteractionType, number>;
    };
    readonly enableSegmentHighlighting?: boolean;
    readonly enableAdditionalPerformanceMarks?: boolean;
    readonly shouldCalculateLighthouseMetricsFromTTAI?: boolean;
    readonly timeWindowForLateMutationsInMilliseconds?: number;
    readonly manuallyTrackReactProfilerMounts?: boolean;
    readonly enableEditorLnvHandler?: boolean;
    /**
     * @private
     * @deprecated setting this will do nothing now
     */
    readonly enableCompleteUsingDoubleRAF?: boolean;
};
export declare const setUFOConfig: (newConfig: Config) => void;
export declare const getConfig: () => Config | undefined;
export declare const getInteractionRate: (name: string, interactionKind: InteractionKind) => number;
export declare const getExperimentalInteractionRate: (name: string, interactionType: InteractionType) => number;
export declare const getPostInteractionRate: (name: string, interactionType: InteractionType) => number;
export declare const getCapabilityRate: (capability: Capability) => number;
export declare const getTypingPerformanceTracingMethod: () => "timeout" | "timeoutNoAlloc" | "mutationObserver";
export declare const getAwaitBM3TTIList: () => string[];
export declare const getRemovePageSegmentsUFOPrefixes: () => boolean;
export declare const getRemoveInteractionsUFOPrefixes: () => boolean;
export declare const getUfoNameOverrides: () => UFONameOverride | undefined;
export declare const getDoNotAbortActivePressInteraction: () => string[] | undefined;
export declare const getDoNotAbortActivePressInteractionOnTransition: () => string[] | undefined;
export declare const shouldHandleEditorLnv: () => boolean;
export {};
