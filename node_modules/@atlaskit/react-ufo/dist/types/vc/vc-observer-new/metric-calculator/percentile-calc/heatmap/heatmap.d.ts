import type { VCObserverEntry } from '../../../types';
import { HeatmapCheckpointMetrics, HeatmapEntry, HeatmapOptions } from './types';
export default class Heatmap {
    private viewport;
    /**
     * Heatmap Width
     */
    private width;
    /**
     * Heatmap Height
     */
    private height;
    /**
     * Heatmap Area (width * height)
     */
    private heatmapAreaSize;
    private scaleX;
    private scaleY;
    private map;
    constructor({ viewport, heatmapSize }: HeatmapOptions);
    getHeatmap(): HeatmapEntry[][];
    private getCell;
    /**
     * Map Dom Rect to Heatmap Rect, rounded up to occupy full cell.
     * @param rect DOM Rect
     * @returns
     */
    private mapDOMRectToHeatmap;
    /**
     * Calculate the ratio of a HeatmapRect compared to the full heatmap
     *
     * This function determines what fraction of the heatmap is covered by the given heatmap rectangle.
     *
     * @param rect
     */
    private getRatio;
    applyEntriesToHeatmap(entries: ReadonlyArray<VCObserverEntry>): Promise<void>;
    getVCPercentMetrics(vcPercentCheckpoint: number[]): Promise<HeatmapCheckpointMetrics>;
}
