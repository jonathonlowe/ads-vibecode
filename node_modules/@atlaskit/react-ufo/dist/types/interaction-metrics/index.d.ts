import type { AbortReasonType, ApdexType, BM3Event, CustomData, CustomTiming, InteractionError, InteractionMetrics, InteractionType, LifecycleMarkType, LoadProfilerEventInfo, Mark, MarkType, PostInteractionLogOutput, ReactProfilerTiming, RequestInfo, Span, SpanType } from '../common';
import { type TraceIdContext } from '../experience-trace-id-context';
import { type FeatureFlagValue } from '../feature-flags-accessed';
import type { LabelStack } from '../interaction-context';
import PostInteractionLog from './post-interaction-log';
export type { InteractionMetrics, LifecycleMarkType, Span, Mark, MarkType, InteractionType, AbortReasonType, ReactProfilerTiming, RequestInfo, ApdexType, CustomData, CustomTiming, InteractionError, };
export declare const postInteractionLog: PostInteractionLog;
export declare const getActiveInteraction: () => InteractionMetrics | undefined;
export declare const remove: (interactionId: string) => void;
export declare const updatePageLoadInteractionName: (ufoName: string, routeName?: string | null | undefined) => void;
export declare const addMetadata: (interactionId: string, data: Record<string, unknown>) => void;
export declare const addCustomData: (interactionId: string, labelStack: LabelStack, data: CustomData) => void;
export declare const addCustomTiming: (interactionId: string, labelStack: LabelStack, data: CustomTiming) => void;
export declare const addMark: (interactionId: string, type: MarkType, name: string, labelStack: LabelStack | null, time?: number | undefined) => void;
export declare const addMarkToAll: (type: MarkType, name: string, labelStack: LabelStack | null, time?: number | undefined) => void;
export declare const addSpan: (interactionId: string, type: SpanType, name: string, labelStack: LabelStack | null, start: number, end?: number | undefined, size?: number | undefined) => void;
export declare const addSpanToAll: (type: SpanType, name: string, labelStack: LabelStack | null, start: number, end?: number | undefined, size?: any) => void;
export declare const addPreload: (moduleId: string, timestamp: number) => void;
export declare const addLoad: (identifier: string, start: number, end: number) => void;
export declare const extractModuleName: (input: string) => string;
export declare const addHold: (interactionId: string, labelStack: LabelStack, name: string, experimental: boolean) => () => void;
export declare const addHoldByID: (interactionId: string, labelStack: LabelStack, name: string, id: string, ignoreOnSubmit?: boolean | undefined) => () => void;
export declare const removeHoldByID: (interactionId: string, id: string) => void;
export declare const getCurrentInteractionType: (interactionId: string) => InteractionType | null;
export declare const ModuleLoadingProfiler: {
    onPreload: (moduleId: string, _priority?: number | undefined) => void;
    onLoadStart: (info: LoadProfilerEventInfo) => void;
    onLoadComplete: (info: LoadProfilerEventInfo) => void;
    placeholderFallBackMounted: (id: string, moduleId: string) => void;
    placeholderFallBackUnmounted: (id: string) => void;
};
export declare const addError: (interactionId: string, name: string, labelStack: LabelStack | null, errorType: string, errorMessage: string, errorStack?: string | undefined, forcedError?: boolean | undefined) => void;
export declare const addErrorToAll: (name: string, labelStack: LabelStack | null, errorType: string, errorMessage: string, errorStack?: string | undefined) => void;
export declare const addProfilerTimings: (interactionId: string, labelStack: LabelStack, type: "mount" | "update" | "nested-update", actualDuration: number, baseDuration: number, startTime: number, commitTime: number) => void;
export declare const sinkInteractionHandler: (sinkFn: (id: string, data: InteractionMetrics) => void) => void;
export declare const sinkPostInteractionLogHandler: (sinkFn: (output: PostInteractionLogOutput) => void | Promise<void>) => void;
export declare const tryComplete: (interactionId: string, endTime?: number | undefined) => void;
export declare const abort: (interactionId: string, abortReason: AbortReasonType) => void;
export declare const abortByNewInteraction: (interactionId: string, interactionName: string) => void;
export declare const abortAll: (abortReason: AbortReasonType, abortedByInteractionName?: string | undefined) => void;
export declare const addOnCancelCallback: (id: string, cancelCallback: () => void) => void;
export declare const addNewInteraction: (interactionId: string, ufoName: string, type: InteractionType, startTime: number, rate: number, labelStack: LabelStack | null, routeName?: string | null | undefined, trace?: TraceIdContext | null | undefined) => void;
export declare const addBrowserMetricEvent: (event: BM3Event) => void;
export declare const addApdexToAll: (apdex: ApdexType) => void;
export declare const addApdex: (interactionId: string, apdexInfo: {
    key: string;
    stopTime: number;
    startTime?: number | undefined;
    labelStack?: LabelStack | undefined;
}) => void;
export declare const addRequestInfo: (interactionId: string, labelStack: LabelStack, requestInfo: RequestInfo) => void;
export declare const addSegment: (labelStack: LabelStack) => void;
export declare const removeSegment: (labelStack: LabelStack) => void;
export declare const addRedirect: (interactionId: string, fromUfoName: string, nextUfoName: string, nextRouteName: string, time: number) => void;
declare global {
    interface Window {
        __REACT_UFO_ENABLE_PERF_TRACING?: boolean;
        __UFO_COMPACT_PAYLOAD__?: boolean;
        __CRITERION__?: {
            addFeatureFlagAccessed?: (flagName: string, flagValue: FeatureFlagValue) => void;
            addUFOHold?: (id: string, name: string, labelStack: string, startTime: number) => void;
            removeUFOHold?: (id: string) => void;
            getFeatureFlagOverride?: (flagName: string) => boolean | undefined;
            getExperimentValueOverride?: <T>(experimentName: string, parameterName: string) => T;
        };
    }
}
export declare const interactionSpans: Span[];
export declare const addCustomSpans: (name: string, start: number, end?: number | undefined, size?: any, labelStack?: LabelStack | undefined) => void;
