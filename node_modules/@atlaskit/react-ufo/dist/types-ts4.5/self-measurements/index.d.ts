interface RuntimeSelfMeasurement {
    __internalState: {
        /**
         * Stack to maintain whether there is already an existing timing that has started
         * This is so we don't "double-count" the timing of functions, e.g.
         *
         * const foo = withProfiling(function foo() {
         *   // do some work...
         * })
         * const bar = withProfiling(function bar() {
         *   foo();
         *   // do some more additional work...
         * });
         *
         * Here since bar invokes foo, and bar already has profiling, then we don't need to profile foo.
         * However, if foo is invoked somewhere else by a function that doesn't have profiling,
         * then we should profile foo's timings
         */
        functionStack: string[];
    };
    runtime: {
        total: number;
        async: number;
        error: number;
        byFunction: Record<string, number>;
        custom: Record<string, number>;
    };
}
declare global {
    var __ufo_self_measurements: RuntimeSelfMeasurement;
}
export declare function resetProfilerMeasurements(): void;
type AsyncFunction<T, Args extends any[]> = (...args: Args) => Promise<T>;
type SyncFunction<T, Args extends any[]> = (...args: Args) => T;
export declare function withProfiling<ReturnType, Args extends any[]>(fn: AsyncFunction<ReturnType, Args>, tags?: string[]): (...args: Args) => Promise<ReturnType>;
export declare function withProfiling<ReturnType, Args extends any[]>(fn: SyncFunction<ReturnType, Args>, tags?: string[]): (...args: Args) => ReturnType;
export declare function markProfilingStart(name: string): {
    name: string;
    startTime: number;
};
export declare function markProfilingEnd({ name, startTime }: ReturnType<typeof markProfilingStart>, { isAsync, isError, tags }?: {
    isAsync?: boolean;
    isError?: boolean;
    tags?: string[];
}): void;
export declare function getProfilerData(): {
    total: number;
    async: number;
    error: number;
    byFunction: Record<string, number>;
    custom: Record<string, number>;
};
export declare function getProfilerTotalRuntime(): number | null;
export declare function getProfilerAsyncRuntime(): number | null;
export declare function getProfilerRuntimeByFunction(functionName: string): number | null;
export declare function getProfilerRuntimeByTag(tag: string): number | null;
export {};
