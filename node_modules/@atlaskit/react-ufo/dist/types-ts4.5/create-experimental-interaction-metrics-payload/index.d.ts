import type { InteractionMetrics } from '../common';
import type { VCObserverOptions } from '../vc/types';
import { VCObserver } from '../vc/vc-observer';
type InteractionMetricsHandler = (interactionId: string, interaction: InteractionMetrics) => void | Promise<void>;
export declare const installInteractionSink: (handler: InteractionMetricsHandler) => void;
export declare const sinkExperimentalHandler: (sinkFn: (interactionId: string, interaction: InteractionMetrics) => void | Promise<void>) => void;
export declare const onExperimentalInteractionComplete: (interactionId: string, data: InteractionMetrics, endTime?: any) => void;
export declare class ExperimentalVCMetrics {
    vcObserver: VCObserver | null;
    constructor();
    initialize(options: VCObserverOptions): this;
    start({ startTime }: {
        startTime: number;
    }): void;
}
export declare const experimentalVC: ExperimentalVCMetrics;
export declare const getExperimentalVCMetrics: (interaction: InteractionMetrics) => Promise<import("../common/vc/types").VCResult | null>;
export {};
