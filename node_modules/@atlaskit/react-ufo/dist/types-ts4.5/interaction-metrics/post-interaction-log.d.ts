import { type LastInteractionFinishInfo, type PostInteractionLogOutput, type ReactProfilerTiming } from '../common/common/types';
import type { VCResult } from '../common/vc/types';
import type { LabelStack } from '../interaction-context';
import type { VCObserverOptions } from '../vc/types';
import { VCObserver } from '../vc/vc-observer';
export default class PostInteractionLog {
    /**
     * Basic info about interaction that has just finished
     */
    lastInteractionFinish: LastInteractionFinishInfo | null;
    /**
     * Array of observed react render timings
     */
    reactProfilerTimings: ReactProfilerTiming[];
    /**
     * Store the scheduled sink timeout Id so that it can be cancelled when needed
     */
    sinkTimeoutId: number | null;
    /**
     * independent VC observer, that observes until `custom.post-interaction-logs` event is sent
     */
    vcObserver: VCObserver | null;
    vcObserverSSRConfig: {
        ssr: number | undefined;
    } | null;
    lastInteractionFinishVCResult?: VCResult;
    constructor();
    initializeVCObserver(options: VCObserverOptions): void;
    startVCObserver({ startTime }: {
        startTime: number;
    }): void;
    setVCObserverSSRConfig(vcObserverSSRConfig: {
        ssr: number | undefined;
    } | null): void;
    /**
     * Set the VC result as per the last interaction
     * Used to compare diffs of VC updates vs post interaction VC observer
     * @param result - VC result as calculated by UFO create payload
     */
    setLastInteractionFinishVCResult(result: VCResult): void;
    /**
     * Handler function to process / send the observation data
     */
    sinkHandlerFn: (output: PostInteractionLogOutput) => void | Promise<void>;
    /**
     * Set the fn that would be invoked to process / send the observation data
     */
    sinkHandler(sinkHandlerFn: (output: PostInteractionLogOutput) => void | Promise<void>): void;
    /**
     * Reset state of the log
     */
    reset(): void;
    /**
     * Check if there is data in the log
     */
    hasData(): boolean;
    /**
     * Send the log if there is data
     */
    sendPostInteractionLog(): Promise<void>;
    /**
     * This fn should be invoked when an interaction has finished
     * Basic details about the finished interaction will be recorded
     * A timeout will be setup to send the post interaction observation after some time.
     */
    onInteractionComplete({ ufoName, start, end, id, abortReason, abortedByInteractionName, routeName, type, experimentalTTAI, experimentalVC90, }: LastInteractionFinishInfo): void;
    /**
     * This fn should be invoked when a React render happens after interaction has finished
     */
    addProfilerTimings(labelStack: LabelStack, type: 'mount' | 'update' | 'nested-update', actualDuration: number, baseDuration: number, startTime: number, commitTime: number): void;
}
