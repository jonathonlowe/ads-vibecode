import { InteractionMetrics } from '../../common/common/types';
import type { MultiRevisionHeatmap } from './heatmap/heatmap';
type CalculatedVC = {
    VC: {
        [key: string]: number | null;
    };
    VCBox: {
        [key: string]: string[] | null;
    };
};
export declare const getVCRevisionsData: (args_0: {
    fullPrefix?: string | undefined;
    interaction: Pick<InteractionMetrics, 'start' | 'end'>;
    isVCClean: boolean;
    isEventAborted: boolean;
    multiHeatmap: MultiRevisionHeatmap | null;
    calculatedVC: CalculatedVC;
    calculatedVCNext: CalculatedVC;
    ssr?: number | undefined;
}) => {
    [x: string]: import("../../common").RevisionPayload;
} | {
    [x: string]: {
        revision: string;
        clean: boolean;
        'metric:vc90': number | null;
        vcDetails: {
            [key: string]: {
                t: number | undefined | null;
                e: string[];
            };
        };
    }[];
} | null;
export {};
