import type { BrowserObservers, Callback } from './types';
export type { ObservedMutationType } from './types';
export type SelectorConfig = {
    id: boolean;
    testId: boolean;
    role: boolean;
    className: boolean;
    dataVC?: boolean;
};
type ConstructorOptions = {
    selectorConfig: SelectorConfig;
};
export declare class Observers implements BrowserObservers {
    private intersectionObserver;
    private mutationObserver;
    private observedMutations;
    private elementsInView;
    private callbacks;
    private totalTime;
    private _startMeasureTimestamp;
    private ssrPlaceholderHandler;
    private editorLnvHandler;
    private ssr;
    private selectorConfig;
    constructor(opts: ConstructorOptions);
    isBrowserSupported(): boolean;
    observe(): void;
    disconnect(): void;
    subscribeResults: (cb: Callback) => void;
    getTotalTime(): number;
    setReactRootElement(element: HTMLElement): void;
    setReactRootRenderStart(startTime?: number): void;
    setReactRootRenderStop(stopTime?: number): void;
    private observeElement;
    private getMutationObserver;
    private getElementName;
    private getIntersectionObserver;
    private measureStart;
    private measureStop;
}
