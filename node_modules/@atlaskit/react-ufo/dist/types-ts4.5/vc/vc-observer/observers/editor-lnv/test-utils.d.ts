import type { EditorLnvHandler } from './index';
type MockIntersectionObserverEntry = {
    target: HTMLElement;
    boundingClientRect: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
};
export type MockIntersectionObserverCallback = (entries: MockIntersectionObserverEntry[]) => void;
export type MockIntersectionObserverCallbackRef = {
    current: MockIntersectionObserverCallback | null;
};
export declare function createPlaceholderElement(id: string): HTMLDivElement;
export declare function createReplaceElement(id: string): HTMLDivElement;
export declare function handleElements(elements: {
    element: HTMLElement;
    rect: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
}[], handler: EditorLnvHandler, observerCallback: MockIntersectionObserverCallback, callback: (result: {
    shouldIgnore: boolean;
}) => void): void;
export declare function createMockIntersectionObserver(cbRef: MockIntersectionObserverCallbackRef): {
    new (fn: MockIntersectionObserverCallback): {
        observe(): void;
        unobserve(): void;
        disconnect(): void;
    };
};
export {};
