import type { VCObserverEntryType } from '../../types';
import type { MutationData } from '../types';
type TagCallback = (props: {
    target: HTMLElement;
    rect: DOMRectReadOnly;
}) => VCObserverEntryType | undefined | null | {
    type: VCObserverEntryType;
    mutationData: MutationData;
};
type ObserveArg_TagOrCallback = VCObserverEntryType | TagCallback;
export interface VCIntersectionObserver {
    disconnect(): void;
    unobserve(target: Element): void;
    watchAndTag: (target: Element, tagOrCallback: ObserveArg_TagOrCallback) => void;
}
export type IntersectionObserverArgs = {
    onEntry: (entry: {
        time: DOMHighResTimeStamp;
        type: VCObserverEntryType;
        target: HTMLElement;
        rect: DOMRectReadOnly;
        mutationData: MutationData | null | undefined;
    }) => void;
    onObserved?: (props: {
        time: DOMHighResTimeStamp;
        elements: ReadonlyArray<WeakRef<HTMLElement>>;
    }) => void;
};
export declare function createIntersectionObserver(args: IntersectionObserverArgs): VCIntersectionObserver | null;
export {};
