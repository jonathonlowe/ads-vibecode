import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useContext, useMemo } from 'react';
import InteractionContext from '@atlaskit/interaction-context';

/**
 * Prevent a subtree from holding up an interaction
 * Use this when you have a component which loads in late, but
 * isn't considered to be a breach of SLO
 *
 * ```js
 * <App>
 *   <Main />
 *   <Sidebar>
 *     <UFOInteractionIgnore>
 *       <InsightsButton />
 *     </UFOInteractionIgnore>
 *   </Sidebar>
 * </App>
 * ```
 *
 * Has an `ignore` prop, to allow you to use it conditionally
 */
export default function UFOInteractionIgnore(_ref) {
  var children = _ref.children,
    _ref$ignore = _ref.ignore,
    ignore = _ref$ignore === void 0 ? true : _ref$ignore;
  var parentContext = useContext(InteractionContext);
  var ignoredInteractionContext = useMemo(function () {
    if (!parentContext) {
      return null;
    }
    return _objectSpread(_objectSpread({}, parentContext), {}, {
      hold: function hold() {
        if (!ignore) {
          return parentContext.hold.apply(parentContext, arguments);
        }
      }
    });
  }, [parentContext, ignore]);

  // react-18: Use children directly
  var kids = children != null ? children : null;
  if (!ignoredInteractionContext) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, kids);
  }
  return /*#__PURE__*/React.createElement(InteractionContext.Provider, {
    value: ignoredInteractionContext
  }, kids);
}