import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { createContext, Fragment, Suspense, useLayoutEffect, useMemo, useRef, useState } from 'react';
var isNodeEnvironment = function isNodeEnvironment() {
  return typeof window === 'undefined' || window.name === 'nodejs';
};
var LazySuspenseContext = /*#__PURE__*/createContext({
  fallback: /*#__PURE__*/React.createElement(Fragment, null),
  setFallback: function setFallback() {
    // eslint-disable-next-line no-console
    console.warn('Missing <LooselySuspense /> boundary');
  },
  name: ''
});
var DynamicFallback = function DynamicFallback(_ref) {
  var children = _ref.children,
    outsideSuspense = _ref.outsideSuspense;
  var _React$useContext = React.useContext(LazySuspenseContext),
    fallback = _React$useContext.fallback,
    setFallback = _React$useContext.setFallback;
  useLayoutEffect(function () {
    return function () {
      if (!outsideSuspense) {
        setFallback(null);
      }
    };
  }, [outsideSuspense, setFallback]);
  return children(outsideSuspense ? null : fallback);
};
DynamicFallback.displayName = 'DynamicFallback';
export var LazySuspense = function LazySuspense(_ref2) {
  var fallback = _ref2.fallback,
    children = _ref2.children,
    name = _ref2.name;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    hydrationFallback = _useState2[0],
    setHydrationFallback = _useState2[1];
  var mountedRef = useRef(false);
  useLayoutEffect(function () {
    mountedRef.current = true;
    return function () {
      mountedRef.current = false;
    };
  }, []);
  var contextValue = useMemo(function () {
    return {
      fallback: fallback,
      setFallback: function setFallback(newFallback) {
        if (hydrationFallback === newFallback) {
          return;
        }
        setHydrationFallback(newFallback);
      },
      name: name
    };
  }, [fallback, hydrationFallback, name]);
  var renderFallback = function renderFallback(outsideSuspense) {
    return /*#__PURE__*/React.createElement(DynamicFallback, {
      outsideSuspense: outsideSuspense
    }, function (resolvedFallback) {
      return outsideSuspense && hydrationFallback ? hydrationFallback : resolvedFallback;
    });
  };
  return /*#__PURE__*/React.createElement(LazySuspenseContext.Provider, {
    value: contextValue
  }, isNodeEnvironment() ? children : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Suspense, {
    fallback: renderFallback(false)
  }, children), (!mountedRef.current || hydrationFallback) && renderFallback(true)));
};
LazySuspense.displayName = 'LazySuspense';