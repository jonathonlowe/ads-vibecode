import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { lazy, Profiler, Suspense, useCallback, useContext, useEffect, useMemo, useRef } from 'react';
import { unstable_NormalPriority as NormalPriority, unstable_scheduleCallback as scheduleCallback } from 'scheduler';
import { v4 as createUUID } from 'uuid';
import { fg } from '@atlaskit/platform-feature-flags';
import coinflip from '../coinflip';
import { getConfig, getInteractionRate } from '../config';
import { getActiveTrace, setInteractionActiveTrace } from '../experience-trace-id-context';
import UFOInteractionContext from '../interaction-context';
import UFOInteractionIDContext from '../interaction-id-context';
import { abortByNewInteraction, addApdex as _addApdex, addCustomData as _addCustomData, addCustomTiming, addHold, addHoldByID, addMark as _addMark, addNewInteraction, addProfilerTimings, addRequestInfo, addSegment, addSpan, removeHoldByID, removeSegment, tryComplete } from '../interaction-metrics';
import UFORouteName from '../route-name-context';
import { withProfiling } from '../self-measurements';
import generateId from '../short-id';
import scheduleOnPaint from './schedule-on-paint';
var tryCompleteHandle;
var AsyncSegmentHighlight = /*#__PURE__*/lazy(function () {
  return import( /* webpackChunkName: "@atlaskit-internal_ufo-segment-highlight" */'./segment-highlight').then(function (module) {
    return {
      default: module.SegmentHighlight
    };
  });
});
var noopIdMap = new Map();

// KARL TODO: finish self profiling
/** A portion of the page we apply measurement to */
export default function UFOSegment(_ref) {
  var _getConfig2;
  var segmentName = _ref.name,
    children = _ref.children,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'single' : _ref$mode;
  var parentContext = useContext(UFOInteractionContext);
  var segmentIdMap = useMemo(function () {
    if (!fg('platform_ufo_segment_list_mode')) {
      // just in case we cause rerender issues, use noop map
      return noopIdMap;
    }
    if (!(parentContext !== null && parentContext !== void 0 && parentContext.segmentIdMap)) {
      return new Map();
    }
    return parentContext.segmentIdMap;
  }, [parentContext]);
  var segmentId = useMemo(function () {
    if (!fg('platform_ufo_segment_list_mode')) {
      return generateId();
    }
    if (mode === 'single') {
      return generateId();
    }
    if (segmentIdMap.has(segmentName)) {
      return segmentIdMap.get(segmentName);
    }
    var newSegmentId = generateId();
    segmentIdMap.set(segmentName, newSegmentId);
    return newSegmentId;
  }, [mode, segmentName, segmentIdMap]);
  var labelStack = useMemo(function () {
    return parentContext !== null && parentContext !== void 0 && parentContext.labelStack ? [].concat(_toConsumableArray(parentContext.labelStack), [{
      name: segmentName,
      segmentId: segmentId
    }]) : [{
      name: segmentName,
      segmentId: segmentId
    }];
  }, [parentContext, segmentName, segmentId]);
  var interactionId = useContext(UFOInteractionIDContext);
  var interactionContext = useMemo(function () {
    var lastCompleteEndTime = 0;
    var complete = withProfiling(function complete() {
      var endTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();
      if (interactionId.current) {
        if (parentContext) {
          parentContext.complete();
        } else {
          var capturedInteractionId = interactionId.current;
          if (endTime > lastCompleteEndTime) {
            lastCompleteEndTime = endTime;
          }
          if (tryCompleteHandle) {
            var _cancelAnimationFrame;
            (_cancelAnimationFrame = cancelAnimationFrame) === null || _cancelAnimationFrame === void 0 || _cancelAnimationFrame(tryCompleteHandle);
          }
          var onComplete = withProfiling(function onComplete() {
            if (capturedInteractionId === interactionId.current) {
              var _globalThis$document;
              var isPageVisible = (globalThis === null || globalThis === void 0 || (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.visibilityState) === 'visible';
              var canDoRAF = typeof requestAnimationFrame !== 'undefined';
              if (isPageVisible && canDoRAF) {
                tryCompleteHandle = requestAnimationFrame(function () {
                  tryCompleteHandle = requestAnimationFrame(function () {
                    if (capturedInteractionId === interactionId.current) {
                      tryComplete(interactionId.current, lastCompleteEndTime);
                    }
                  });
                });
              } else {
                tryComplete(interactionId.current, lastCompleteEndTime);
              }
            }
          });
          scheduleCallback(NormalPriority, onComplete);
        }
      }
    });
    function _internalHold(labelStack, name) {
      var experimental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (interactionId.current != null) {
        if (parentContext) {
          return parentContext._internalHold(labelStack, name, experimental);
        } else {
          var capturedInteractionId = interactionId.current;
          var disposeHold = addHold(interactionId.current, labelStack, name, experimental);
          return function () {
            if (capturedInteractionId === interactionId.current) {
              disposeHold();
            }
          };
        }
      }
    }
    function _internalHoldByID(labelStack, id, name, remove) {
      if (interactionId.current != null) {
        if (parentContext) {
          parentContext._internalHoldByID(labelStack, name, id, remove);
          return;
        }
        if (!remove) {
          addHoldByID(interactionId.current, labelStack, name, id);
        } else {
          removeHoldByID(interactionId.current, id);
        }
      }
    }
    if (parentContext) {
      return _objectSpread(_objectSpread({}, parentContext), {}, {
        labelStack: labelStack,
        complete: complete
      });
    }
    return {
      labelStack: labelStack,
      segmentIdMap: segmentIdMap,
      hold: function hold() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown';
        return this._internalHold(this.labelStack, name);
      },
      holdExperimental: function holdExperimental() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown';
        return this._internalHold(this.labelStack, name, true);
      },
      addHoldByID: function addHoldByID(labelStack, id) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
        this._internalHoldByID(labelStack, id, name, false);
      },
      removeHoldByID: function removeHoldByID(labelStack, id) {
        var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
        this._internalHoldByID(labelStack, id, name, true);
      },
      tracePress: function tracePress() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown';
        var timestamp = arguments.length > 1 ? arguments[1] : undefined;
        if (interactionId.current != null) {
          abortByNewInteraction(interactionId.current, name);
        }
        var rate = getInteractionRate(name, 'press');
        if (coinflip(rate)) {
          var startTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : performance.now();
          var newId = createUUID();
          interactionId.current = newId;
          // covered experiences with tracing instrumentation:
          // inline-result.global-issue.create-modal.submit
          // inline-result.global-issue.create-modal-subsequent
          setInteractionActiveTrace(newId, 'press');
          addNewInteraction(newId, name, 'press', startTimestamp, rate, this.labelStack, UFORouteName.current, getActiveTrace());
        }
      },
      retainQuery: function retainQuery(info) {
        if (interactionId.current != null) {
          addRequestInfo(interactionId.current, this.labelStack, info);
        }
      },
      addPreload: function addPreload(moduleId, timestamp) {
        if (interactionId.current != null) {
          _addMark(interactionId.current, 'bundle_preload', moduleId, this.labelStack, timestamp);
        }
      },
      addLoad: function addLoad(identifier, start, end) {
        if (interactionId.current != null) {
          var _this$labelStack = this.labelStack,
            _labelStack = _this$labelStack === void 0 ? [] : _this$labelStack;
          addSpan(interactionId.current, 'bundle_load', identifier, _labelStack, start, end);
        }
      },
      addMark: function addMark(name, timestamp
      // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
      ) {
        if (interactionId.current != null) {
          var time = timestamp !== null && timestamp !== void 0 ? timestamp : performance.now();
          _addMark(interactionId.current, 'custom', name, this.labelStack, time);
        }
      },
      addCustomData: function addCustomData(customData) {
        if (interactionId.current != null) {
          _addCustomData(interactionId.current, this.labelStack, customData);
        }
      },
      addCustomTimings: function addCustomTimings(customTimings) {
        if (interactionId.current != null) {
          addCustomTiming(interactionId.current, this.labelStack, customTimings);
        }
      },
      addApdex: function addApdex(apdexInfo) {
        if (interactionId.current != null) {
          var key = apdexInfo.key,
            stopTime = apdexInfo.stopTime,
            startTime = apdexInfo.startTime;
          _addApdex(interactionId.current, {
            key: key,
            stopTime: stopTime,
            startTime: startTime,
            labelStack: this.labelStack
          });
        }
      },
      onRender: function onRender(phase, actualDuration, baseDuration, startTime, commitTime) {
        var _this = this;
        if (interactionId.current !== null) {
          addProfilerTimings(interactionId.current, this.labelStack, phase, actualDuration, baseDuration, startTime, commitTime);
          if (fg('platform_ufo_vc_ttai_on_paint')) {
            scheduleOnPaint(function () {
              var paintedTime = performance.now();
              _this.complete(paintedTime);
            });
          } else {
            this.complete(commitTime);
          }
        }
      },
      _internalHold: _internalHold,
      _internalHoldByID: _internalHoldByID,
      complete: complete
    };
  }, [parentContext, labelStack, segmentIdMap, interactionId]);
  var hasMounted = useRef(false);
  var onRender = useCallback(function (_id, phase, actualDuration, baseDuration, startTime, commitTime) {
    var _getConfig;
    // Manually keep track of mount-phase, and ensure that every segment is always mounted at least once
    if ((_getConfig = getConfig()) !== null && _getConfig !== void 0 && _getConfig.manuallyTrackReactProfilerMounts && !hasMounted.current) {
      interactionContext.onRender('mount', actualDuration, baseDuration, startTime, commitTime);
      hasMounted.current = true;
    } else {
      interactionContext.onRender(phase, actualDuration, baseDuration, startTime, commitTime);
    }
  }, [interactionContext]);
  useEffect(function () {
    addSegment(labelStack);
    return function () {
      removeSegment(labelStack);
    };
  }, [interactionId, parentContext, interactionContext, labelStack]);
  var reactProfilerId = useMemo(function () {
    return labelStack.map(function (l) {
      return l.name;
    }).join('/');
  }, [labelStack]);
  var enableSegmentHighlighting = (_getConfig2 = getConfig()) === null || _getConfig2 === void 0 ? void 0 : _getConfig2.enableSegmentHighlighting;
  return /*#__PURE__*/React.createElement(UFOInteractionContext.Provider, {
    value: interactionContext
  }, /*#__PURE__*/React.createElement(Profiler, {
    id: reactProfilerId,
    onRender: onRender
  }, children, enableSegmentHighlighting && /*#__PURE__*/React.createElement(Suspense, {
    fallback: null
  }, /*#__PURE__*/React.createElement(AsyncSegmentHighlight, {
    segmentName: segmentName
  }))));
}