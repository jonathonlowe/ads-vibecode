import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _CHRSummary;
import { fg } from '@atlaskit/platform-feature-flags';
import { withProfiling } from '../self-measurements';
import { calculateTransferType, checkIfTimingsAvailable, DISK_KEY, getTypeOfRequest, MEMORY_KEY, NETWORK_KEY, round } from './utils';
export var CHRSummary = /*#__PURE__*/function () {
  function CHRSummary() {
    _classCallCheck(this, CHRSummary);
    _defineProperty(this, "bundles", _defineProperty(_defineProperty(_defineProperty({}, MEMORY_KEY, 0), DISK_KEY, 0), NETWORK_KEY, 0));
    _defineProperty(this, "bundlesCount", 0);
    _defineProperty(this, "size", _defineProperty(_defineProperty(_defineProperty({}, MEMORY_KEY, 0), DISK_KEY, 0), NETWORK_KEY, 0));
    _defineProperty(this, "sizeTotal", 0);
    this.add = withProfiling(this.add.bind(this));
  }
  return _createClass(CHRSummary, [{
    key: "add",
    value: function add(asset) {
      var encodedSize = asset.encodedSize || 0;
      var type = calculateTransferType(asset.name, asset.initiatorType, asset.duration, asset.transferSize);
      if (type === null) {
        return;
      }
      this.bundles[type] += 1;
      this.bundlesCount += 1;
      this.size[type] += encodedSize;
      this.sizeTotal += encodedSize;
    }
  }]);
}();
_CHRSummary = CHRSummary;
_defineProperty(CHRSummary, "makePayload", withProfiling(function makePayload(summary) {
  var size = summary.size,
    bundlesCount = summary.bundlesCount,
    sizeTotal = summary.sizeTotal;
  var cachedSize = size[MEMORY_KEY] + size[DISK_KEY];
  var sizeRatio = round(cachedSize / summary.sizeTotal);
  return {
    size: sizeTotal,
    chr: sizeRatio,
    count: bundlesCount
  };
}));
export var CHRReporter = /*#__PURE__*/function () {
  function CHRReporter() {
    _classCallCheck(this, CHRReporter);
    _defineProperty(this, "all", new CHRSummary());
    _defineProperty(this, "allAtlassian", new CHRSummary());
    _defineProperty(this, "preloaded", new CHRSummary());
    _defineProperty(this, "defaultAllowedTypes", ['js']);
    this.get = withProfiling(this.get.bind(this));
  }
  return _createClass(CHRReporter, [{
    key: "get",
    value: function get(resourceTimings, assetsConfig, SSRDoneTime) {
      var _this = this;
      try {
        if (resourceTimings === null) {
          return null;
        }
        resourceTimings.forEach(function (entry) {
          if (!checkIfTimingsAvailable(entry)) {
            return;
          }
          var hasNanValues = fg('platform_ufo_assets_check_for_nan') ? entry.encodedSize === undefined || entry.encodedSize === null : false;
          if (entry.encodedSize === entry.decodedSize || hasNanValues) {
            // incorrectly reported or lack of size
            return;
          }
          var type = getTypeOfRequest(entry);
          if (!(assetsConfig.allowedTypes || _this.defaultAllowedTypes).includes(type)) {
            return;
          }
          if (assetsConfig.classification.all) {
            _this.all.add(entry);
          }
          if (assetsConfig.classification.allAtlassian({
            entry: entry
          })) {
            _this.allAtlassian.add(entry);
          }
          if (assetsConfig.classification.preloaded({
            entry: entry,
            SSRDoneTime: SSRDoneTime
          })) {
            _this.preloaded.add(entry);
          }
        });
        if (this.all.bundlesCount === 0) {
          return null;
        }
        var CHRData = {
          all: CHRSummary.makePayload(this.all),
          allAtlassian: CHRSummary.makePayload(this.allAtlassian),
          preloaded: CHRSummary.makePayload(this.preloaded)
        };
        return CHRData;
      } catch (error) {
        return null;
      }
    }
  }]);
}();