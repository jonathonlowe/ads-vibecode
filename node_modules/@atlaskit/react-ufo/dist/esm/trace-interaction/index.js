import { v4 as createUUID } from 'uuid';
import coinflip from '../coinflip';
import { getDoNotAbortActivePressInteraction, getInteractionRate } from '../config';
import { DefaultInteractionID } from '../interaction-id-context';
import { abortAll, addNewInteraction, getActiveInteraction } from '../interaction-metrics';
import UFORouteName from '../route-name-context';
import { withProfiling } from '../self-measurements';
var mapToInteractionType = withProfiling(function mapToInteractionType(eventType) {
  if (eventType === 'click' || eventType === 'dblclick' || eventType === 'mousedown') {
    return 'press';
  }
  if (eventType === 'mouseenter' || eventType === 'mouseover') {
    return 'hover';
  }
  return undefined;
});
var traceUFOInteraction = withProfiling(function traceUFOInteraction(name, event) {
  if (!event || !event.isTrusted) {
    return;
  }
  var interactionType = mapToInteractionType(event.type);
  if (!interactionType) {
    // when interactionType is falsy we do not yet support this type of event. should we blow up with throwing error instead?
    return;
  }
  var rate = getInteractionRate(name, interactionType);
  var pressInteractionsList = getDoNotAbortActivePressInteraction();
  if (pressInteractionsList !== null && pressInteractionsList !== void 0 && pressInteractionsList.includes(name)) {
    var interaction = getActiveInteraction();
    if ((interaction === null || interaction === void 0 ? void 0 : interaction.ufoName) !== 'unknown' && (interaction === null || interaction === void 0 ? void 0 : interaction.type) === 'press') {
      return;
    }
  }
  if (coinflip(rate)) {
    var _event$timeStamp;
    abortAll('new_interaction', name);
    var startTimestamp = (_event$timeStamp = event.timeStamp) !== null && _event$timeStamp !== void 0 ? _event$timeStamp : performance.now();
    var newId = createUUID();
    DefaultInteractionID.current = newId;
    addNewInteraction(newId, name, 'press', startTimestamp, rate, [], UFORouteName.current);
  }
});
export default traceUFOInteraction;