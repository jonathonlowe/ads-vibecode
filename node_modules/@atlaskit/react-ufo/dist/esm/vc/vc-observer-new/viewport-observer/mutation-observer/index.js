function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { withProfiling } from '../../../../self-measurements';
var createMutationObserver = withProfiling(function createMutationObserver(props) {
  if (!window || typeof window.IntersectionObserver !== 'function') {
    return null;
  }
  var onAttributeMutation = withProfiling(props.onAttributeMutation, ['vc']);
  var onChildListMutation = withProfiling(props.onChildListMutation, ['vc']);
  var onMutationFinished = typeof props.onMutationFinished === 'function' ? withProfiling(props.onMutationFinished, ['vc']) : undefined;
  var mutationObserverCallback = withProfiling(function mutationObserverCallback(mutations) {
    var addedNodes = [];
    var removedNodes = [];
    var targets = [];
    var _iterator = _createForOfIteratorHelper(mutations),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mut = _step.value;
        if (!(mut.target instanceof HTMLElement)) {
          continue;
        }
        if (mut.type === 'attributes') {
          var _mut$oldValue;
          /*
          	"MutationObserver was explicitly designed to work that way, but I can't now recall the reasoning.
          	I think it might have been something along the lines that for consistency every setAttribute call should create a record.
          	Conceptually there is after all a mutation: there is an old value replaced with a new one,
          	and whether or not they are the same doesn't really matter.
          	And Custom elements should work the same way as MutationObserver."
          	https://github.com/whatwg/dom/issues/520#issuecomment-336574796
          */
          var oldValue = (_mut$oldValue = mut.oldValue) !== null && _mut$oldValue !== void 0 ? _mut$oldValue : undefined;
          var newValue = mut.attributeName ? mut.target.getAttribute(mut.attributeName) : undefined;
          if (oldValue !== newValue) {
            var _mut$attributeName;
            onAttributeMutation({
              target: mut.target,
              attributeName: (_mut$attributeName = mut.attributeName) !== null && _mut$attributeName !== void 0 ? _mut$attributeName : 'unknown'
            });
          }
          continue;
        } else if (mut.type === 'childList') {
          var _mut$addedNodes, _mut$removedNodes;
          ((_mut$addedNodes = mut.addedNodes) !== null && _mut$addedNodes !== void 0 ? _mut$addedNodes : []).forEach(function (node) {
            if (node instanceof HTMLElement) {
              addedNodes.push(node);
            }
          });
          ((_mut$removedNodes = mut.removedNodes) !== null && _mut$removedNodes !== void 0 ? _mut$removedNodes : []).forEach(function (node) {
            if (node instanceof HTMLElement) {
              removedNodes.push(node);
            }
          });
        }
        targets.push(mut.target);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    onChildListMutation({
      addedNodes: addedNodes,
      removedNodes: removedNodes
    });
    onMutationFinished === null || onMutationFinished === void 0 || onMutationFinished({
      targets: targets
    });
  });
  var observer = new MutationObserver(mutationObserverCallback);
  return observer;
}, ['vc']);
export default createMutationObserver;