import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { markProfilingEnd, markProfilingStart, withProfiling } from '../../../self-measurements';
var EntriesTimeline = /*#__PURE__*/function () {
  function EntriesTimeline() {
    _classCallCheck(this, EntriesTimeline);
    _defineProperty(this, "unorderedEntries", []);
    _defineProperty(this, "sortedEntriesCache", new Map());
    var operationTimer = markProfilingStart('EntriesTimeline constructor');
    this.unorderedEntries = [];
    this.push = withProfiling(this.push.bind(this), ['vc']);
    this.getCacheKey = withProfiling(this.getCacheKey.bind(this), ['vc']);
    this.getOrderedEntries = withProfiling(this.getOrderedEntries.bind(this), ['vc']);
    this.clear = withProfiling(this.clear.bind(this), ['vc']);
    markProfilingEnd(operationTimer, {
      tags: ['vc']
    });
  }
  return _createClass(EntriesTimeline, [{
    key: "push",
    value: function push(entry) {
      this.unorderedEntries.push(entry);
      this.sortedEntriesCache.clear();
    }
  }, {
    key: "getCacheKey",
    value: function getCacheKey(start, stop) {
      return "".concat(start !== null && start !== void 0 ? start : 'null', "_").concat(stop !== null && stop !== void 0 ? stop : 'null');
    }
  }, {
    key: "getOrderedEntries",
    value: function getOrderedEntries(_ref) {
      var _this$sortedEntriesCa;
      var start = _ref.start,
        stop = _ref.stop;
      var cacheKey = this.getCacheKey(start, stop);
      var cachedSortedEntries = (_this$sortedEntriesCa = this.sortedEntriesCache.get(cacheKey)) === null || _this$sortedEntriesCa === void 0 ? void 0 : _this$sortedEntriesCa.deref();
      if (cachedSortedEntries) {
        return cachedSortedEntries;
      }
      var filteredEntries = this.unorderedEntries.filter(function (e) {
        return e.time >= (start !== null && start !== void 0 ? start : 0) && e.time <= (stop !== null && stop !== void 0 ? stop : performance.now());
      });
      var sortedEntries = filteredEntries.sort(function (a, b) {
        return a.time - b.time;
      });
      this.sortedEntriesCache.set(cacheKey, new WeakRef(sortedEntries));
      return sortedEntries;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.unorderedEntries = [];
      this.sortedEntriesCache.clear();
    }
  }]);
}();
export { EntriesTimeline as default };