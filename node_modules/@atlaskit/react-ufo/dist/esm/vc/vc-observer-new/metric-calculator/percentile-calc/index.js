import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { withProfiling } from '../../../../self-measurements';
import calcUsingCanvas from './canvas-heatmap';
import caclUsingOldHeatmap from './heatmap';
import calcUsingRectSweepingLine from './rect-sweeping-line';
var calculateTTVCPercentiles = withProfiling( /*#__PURE__*/function () {
  var _calculateTTVCPercentiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arg) {
    var algo, vcDetails, _vcDetails, _vcDetails2;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          algo = 'canvas_heatmap';
          if (!(algo === 'canvas_heatmap')) {
            _context.next = 6;
            break;
          }
          _context.next = 4;
          return calcUsingCanvas(arg);
        case 4:
          vcDetails = _context.sent;
          return _context.abrupt("return", vcDetails);
        case 6:
          if (!(algo === 'rect_sweeping')) {
            _context.next = 11;
            break;
          }
          _context.next = 9;
          return calcUsingRectSweepingLine(arg);
        case 9:
          _vcDetails = _context.sent;
          return _context.abrupt("return", _vcDetails);
        case 11:
          if (!(algo === 'old_heatmap')) {
            _context.next = 16;
            break;
          }
          _context.next = 14;
          return caclUsingOldHeatmap(arg);
        case 14:
          _vcDetails2 = _context.sent;
          return _context.abrupt("return", _vcDetails2);
        case 16:
          throw new Error('unexpected Error algo not chosen correctly');
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  function calculateTTVCPercentiles(_x) {
    return _calculateTTVCPercentiles.apply(this, arguments);
  }
  return calculateTTVCPercentiles;
}(), ['vc']);
export default calculateTTVCPercentiles;