import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { withProfiling } from '../../../self-measurements';
import calculateTTVCPercentiles from './percentile-calc';
import getViewportHeight from './utils/get-viewport-height';
import getViewportWidth from './utils/get-viewport-width';
var AbstractVCCalculatorBase = /*#__PURE__*/function () {
  function AbstractVCCalculatorBase(revisionNo) {
    _classCallCheck(this, AbstractVCCalculatorBase);
    this.revisionNo = revisionNo;
    this.calculate = withProfiling(this.calculate.bind(this), ['vc']);
  }
  return _createClass(AbstractVCCalculatorBase, [{
    key: "calculate",
    value: function () {
      var _calculate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var _this = this,
          _vcDetails$90$t,
          _vcDetails$;
        var startTime, stopTime, orderedEntries, filteredEntries, isVCClean, vcDetails;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              startTime = _ref.startTime, stopTime = _ref.stopTime, orderedEntries = _ref.orderedEntries;
              filteredEntries = orderedEntries.filter(function (entry) {
                return _this.isEntryIncluded(entry);
              });
              isVCClean = this.isVCClean(filteredEntries);
              if (isVCClean) {
                _context.next = 5;
                break;
              }
              return _context.abrupt("return", {
                revision: this.revisionNo,
                'metric:vc90': null,
                clean: false
              });
            case 5:
              _context.next = 7;
              return calculateTTVCPercentiles({
                viewport: {
                  width: getViewportWidth(),
                  height: getViewportHeight()
                },
                startTime: startTime,
                stopTime: stopTime,
                orderedEntries: filteredEntries,
                percentiles: [25, 50, 75, 80, 85, 90, 95, 98, 99]
              });
            case 7:
              vcDetails = _context.sent;
              return _context.abrupt("return", {
                revision: this.revisionNo,
                vcDetails: vcDetails !== null && vcDetails !== void 0 ? vcDetails : undefined,
                clean: isVCClean,
                'metric:vc90': (_vcDetails$90$t = vcDetails === null || vcDetails === void 0 || (_vcDetails$ = vcDetails['90']) === null || _vcDetails$ === void 0 ? void 0 : _vcDetails$.t) !== null && _vcDetails$90$t !== void 0 ? _vcDetails$90$t : null
              });
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function calculate(_x) {
        return _calculate.apply(this, arguments);
      }
      return calculate;
    }()
  }]);
}();
export { AbstractVCCalculatorBase as default };