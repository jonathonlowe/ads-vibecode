import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { withProfiling } from '../../../../../self-measurements';
import isViewportEntryData from '../../utils/is-viewport-entry-data';
import taskYield from '../../utils/task-yield';
import calculateUnionArea from './calc-union-area';
var calculateTTVCPercentiles = withProfiling( /*#__PURE__*/function () {
  var _calculateTTVCPercentiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var orderedEntries, viewport, percentiles, startTime, sortedPercentiles, viewportArea, checkpoints, activeRects, removeActiveRect, domElementsBuffer, i, iEntry, iEntryData, rect, elementName, exclusionArea, currentArea, currVCPercent, matchesAnyCheckpoints, _checkpoint, domElements;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          orderedEntries = _ref.orderedEntries, viewport = _ref.viewport, percentiles = _ref.percentiles, startTime = _ref.startTime;
          sortedPercentiles = _toConsumableArray(percentiles).sort(function (a, b) {
            return a - b;
          });
          viewportArea = viewport.width * viewport.height;
          checkpoints = {};
          activeRects = orderedEntries.filter(function (e) {
            return isViewportEntryData(e.data);
          }).map(function (e) {
            return e.data.rect;
          });
          removeActiveRect = function removeActiveRect(rectToRemove) {
            var index = activeRects.indexOf(rectToRemove);
            // Check if the element exists in the array
            if (index !== -1) {
              // Remove the element at the found index
              activeRects.splice(index, 1);
            }
          };
          domElementsBuffer = new Set();
          i = 0;
        case 8:
          if (!(i < orderedEntries.length)) {
            _context.next = 36;
            break;
          }
          iEntry = orderedEntries[i];
          iEntryData = iEntry.data;
          if (isViewportEntryData(iEntryData)) {
            _context.next = 13;
            break;
          }
          return _context.abrupt("continue", 33);
        case 13:
          rect = iEntryData.rect, elementName = iEntryData.elementName;
          domElementsBuffer.add(elementName);
          removeActiveRect(rect);
          exclusionArea = calculateUnionArea(activeRects);
          currentArea = viewportArea - exclusionArea;
          currVCPercent = Math.round(currentArea / viewportArea * 100);
          matchesAnyCheckpoints = false;
        case 20:
          if (!(sortedPercentiles.length > 0 && currVCPercent >= sortedPercentiles[0])) {
            _context.next = 29;
            break;
          }
          _checkpoint = sortedPercentiles.shift();
          domElements = _toConsumableArray(domElementsBuffer);
          if (_checkpoint) {
            _context.next = 25;
            break;
          }
          return _context.abrupt("break", 29);
        case 25:
          matchesAnyCheckpoints = true;
          checkpoints[_checkpoint.toString()] = {
            t: Math.round(iEntry.time - startTime),
            e: domElements
          };
          _context.next = 20;
          break;
        case 29:
          if (matchesAnyCheckpoints) {
            domElementsBuffer.clear();
          }
          if (!(i % 500 === 0)) {
            _context.next = 33;
            break;
          }
          _context.next = 33;
          return taskYield();
        case 33:
          i++;
          _context.next = 8;
          break;
        case 36:
          return _context.abrupt("return", checkpoints);
        case 37:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  function calculateTTVCPercentiles(_x) {
    return _calculateTTVCPercentiles.apply(this, arguments);
  }
  return calculateTTVCPercentiles;
}(), ['vc']);
export default calculateTTVCPercentiles;