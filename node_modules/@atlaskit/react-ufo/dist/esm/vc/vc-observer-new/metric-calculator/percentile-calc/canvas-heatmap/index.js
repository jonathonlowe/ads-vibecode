import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { fg } from '@atlaskit/platform-feature-flags';
import { withProfiling } from '../../../../../self-measurements';
import { ViewportCanvas } from './canvas-pixel';
var calculateTTVCPercentiles = withProfiling( /*#__PURE__*/function () {
  var _calculateTTVCPercentiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var viewport, orderedEntries, percentiles, startTime, canvas, elementMap, _iterator, _step, entry, rect, elementName, timePixelCounts, canvasDimenstions, totalPixels;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          viewport = _ref.viewport, orderedEntries = _ref.orderedEntries, percentiles = _ref.percentiles, startTime = _ref.startTime;
          canvas = new ViewportCanvas(viewport, fg('platform_ufo_canvas_heatmap_full_precision') ? 1 : 0.25);
          elementMap = new Map();
          _iterator = _createForOfIteratorHelper(orderedEntries);
          _context.prev = 4;
          _iterator.s();
        case 6:
          if ((_step = _iterator.n()).done) {
            _context.next = 17;
            break;
          }
          entry = _step.value;
          if ('rect' in entry.data) {
            _context.next = 10;
            break;
          }
          return _context.abrupt("continue", 15);
        case 10:
          rect = entry.data.rect;
          elementName = entry.data.elementName;
          canvas.drawRect(rect, entry.time);
          if (!elementMap.has(entry.time)) {
            elementMap.set(entry.time, new Set());
          }
          elementMap.get(entry.time).add(elementName);
        case 15:
          _context.next = 6;
          break;
        case 17:
          _context.next = 22;
          break;
        case 19:
          _context.prev = 19;
          _context.t0 = _context["catch"](4);
          _iterator.e(_context.t0);
        case 22:
          _context.prev = 22;
          _iterator.f();
          return _context.finish(22);
        case 25:
          _context.next = 27;
          return canvas.getPixelCounts();
        case 27:
          timePixelCounts = _context.sent;
          canvasDimenstions = canvas.getScaledDimensions();
          totalPixels = canvasDimenstions.width * canvasDimenstions.height;
          return _context.abrupt("return", calculatePercentiles(timePixelCounts, elementMap, percentiles, totalPixels, startTime));
        case 31:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 19, 22, 25]]);
  }));
  function calculateTTVCPercentiles(_x) {
    return _calculateTTVCPercentiles.apply(this, arguments);
  }
  return calculateTTVCPercentiles;
}(), ['vc']);
export default calculateTTVCPercentiles;
export var calculatePercentiles = withProfiling(function calculatePercentiles(timePixelCounts, elementMap, unorderedPercentiles, totalPixels, startTime) {
  var results = {};
  var cumulativePixels = 0;
  var percentiles = unorderedPercentiles.sort(function (a, b) {
    return a - b;
  });

  // Sort entries by timestamp for consistent processing
  var sortedEntries = Array.from(timePixelCounts.entries()).sort(function (_ref2, _ref3) {
    var _ref4 = _slicedToArray(_ref2, 1),
      timeA = _ref4[0];
    var _ref5 = _slicedToArray(_ref3, 1),
      timeB = _ref5[0];
    return Number(timeA) - Number(timeB);
  });
  var percentileIndex = 0;
  var domElementsBuffer = new Set();
  var _iterator2 = _createForOfIteratorHelper(sortedEntries),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
        time = _step2$value[0],
        pixelCount = _step2$value[1];
      cumulativePixels += pixelCount;
      var percentCovered = cumulativePixels / totalPixels * 100;
      var elementNames = elementMap.get(time) || new Set();
      elementNames.forEach(function (elName) {
        return domElementsBuffer.add(elName);
      });
      var matchesAnyCheckpoints = false;
      while (percentileIndex < percentiles.length && percentCovered >= percentiles[percentileIndex]) {
        results["".concat(percentiles[percentileIndex])] = {
          t: Math.round(Number(time - startTime)),
          e: Array.from(domElementsBuffer)
        };
        percentileIndex++;
        matchesAnyCheckpoints = true;
      }
      if (matchesAnyCheckpoints) {
        domElementsBuffer.clear();
      }
      if (percentileIndex >= percentiles.length) {
        break;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var previousResult = {
    t: 0,
    e: []
  };
  for (var i = 0; i < percentiles.length; i++) {
    var percentile = percentiles[i];
    if (!(percentile in results)) {
      results["".concat(percentile)] = previousResult;
    }
    previousResult = results["".concat(percentile)];
  }
  return results;
}, ['vc']);