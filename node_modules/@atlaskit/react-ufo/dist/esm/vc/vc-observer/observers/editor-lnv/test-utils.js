import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _toArray from "@babel/runtime/helpers/toArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
export function createPlaceholderElement(id) {
  var el = document.createElement('div');
  el.dataset.editorLnvPlaceholder = id;
  return el;
}
export function createReplaceElement(id) {
  var el = document.createElement('div');
  el.dataset.editorLnvPlaceholderReplace = id;
  return el;
}
export function handleElements(elements, handler, observerCallback, callback) {
  var _elements = _toArray(elements),
    first = _elements[0],
    rest = _elements.slice(1);
  handler.handleAddedNode(first.element).then(function (result) {
    if (!rest.length) {
      // Recursion terminating condition
      callback(result);
    } else {
      // Recursively handle the rest of the elements
      handleElements(rest, handler, observerCallback, callback);
    }
  });
  observerCallback([{
    target: first.element,
    boundingClientRect: first.rect
  }]);
}
export function createMockIntersectionObserver(cbRef) {
  return /*#__PURE__*/function () {
    function _class(fn) {
      _classCallCheck(this, _class);
      cbRef.current = function (entries) {
        return fn(entries.map(function (entry) {
          return _objectSpread(_objectSpread({}, entry), {}, {
            intersectionRatio: 1
          });
        }));
      };
    }
    return _createClass(_class, [{
      key: "observe",
      value: function observe() {}
    }, {
      key: "unobserve",
      value: function unobserve() {}
    }, {
      key: "disconnect",
      value: function disconnect() {}
    }]);
  }();
}