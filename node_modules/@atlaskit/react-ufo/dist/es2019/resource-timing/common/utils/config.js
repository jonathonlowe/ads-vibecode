import { getConfig as getConfigUFO } from '../../../config';
import { withProfiling } from '../../../self-measurements';
const defaultAllowedParams = ['operationName', 'operation', 'q'];
const getAllowedParams = withProfiling(function getAllowedParams() {
  const config = getConfigUFO();
  return (config === null || config === void 0 ? void 0 : config.allowedResourcesParams) || defaultAllowedParams;
});
const handleQueryParams = withProfiling(function handleQueryParams(urlString) {
  try {
    if (typeof urlString !== 'string') {
      return urlString;
    }
    const url = new URL(urlString);
    const params = new URLSearchParams(url.search);
    const allowedParams = getAllowedParams();
    for (const [key] of params) {
      if (!allowedParams.includes(key)) {
        url.searchParams.delete(key);
      }
    }
    return url.toString();
  } catch (e) {
    return urlString;
  }
});
let config = {
  mapResources: url => url,
  sanitiseEndpoints: url => {
    return handleQueryParams(url);
  }
};
export const configure = withProfiling(function configure(resourceTimingConfig) {
  const newConfig = {
    mapResources: resourceTimingConfig.mapResources,
    sanitiseEndpoints: url => {
      const sanitised = resourceTimingConfig.sanitiseEndpoints(url);
      if (sanitised) {
        return handleQueryParams(sanitised);
      }
      return sanitised;
    }
  };
  config = newConfig;
});
export const getConfig = withProfiling(function getConfig() {
  return config;
});