import { useContext, useMemo } from 'react';
import UFOInteractionContext from '../interaction-context';
import { getInteractionId } from '../interaction-id-context';
import { addCustomTiming, getCurrentInteractionType } from '../interaction-metrics';
import { withProfiling } from '../self-measurements';
export const getBm3Timings = withProfiling(function getBm3Timings(marks, timingConfigs) {
  const bm3Timings = {};
  if (!marks || !timingConfigs) {
    return bm3Timings;
  }
  timingConfigs.forEach(item => {
    if (!item.startMark || !item.endMark) {
      return;
    }
    const startTime = marks[item.startMark];
    if (!startTime) {
      return;
    }
    const endTime = marks[item.endMark];
    if (!endTime) {
      return;
    }
    bm3Timings[item.key] = {
      startTime,
      endTime
    };
  });
  return bm3Timings;
});
export function UFOBM3TimingsToUFO({
  marks,
  timings
}) {
  const interactionContext = useContext(UFOInteractionContext);
  const interactionId = getInteractionId().current;
  useMemo(() => {
    if (interactionContext != null && interactionId != null && marks != null && timings != null) {
      const interactionType = getCurrentInteractionType(interactionId);
      if (interactionType === 'press') {
        return;
      }
      const bm3Timings = getBm3Timings(marks, timings);
      interactionContext.addCustomTimings(bm3Timings);
    }
  }, [interactionContext, interactionId, marks, timings]);
  return null;
}
export const addBM3TimingsToUFO = withProfiling(function addBM3TimingsToUFO(marks, timingsConfig) {
  const interactionId = getInteractionId().current;
  if (interactionId) {
    const interactionType = getCurrentInteractionType(interactionId);
    if (interactionType === 'press') {
      return;
    }
    const bm3Timings = getBm3Timings(marks, timingsConfig);
    addCustomTiming(interactionId, [], bm3Timings);
  }
});