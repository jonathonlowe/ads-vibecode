import React, { useContext, useMemo } from 'react';
import InteractionContext from '@atlaskit/interaction-context';

/**
 * Prevent a subtree from holding up an interaction
 * Use this when you have a component which loads in late, but
 * isn't considered to be a breach of SLO
 *
 * ```js
 * <App>
 *   <Main />
 *   <Sidebar>
 *     <UFOInteractionIgnore>
 *       <InsightsButton />
 *     </UFOInteractionIgnore>
 *   </Sidebar>
 * </App>
 * ```
 *
 * Has an `ignore` prop, to allow you to use it conditionally
 */
export default function UFOInteractionIgnore({
  children,
  ignore = true
}) {
  const parentContext = useContext(InteractionContext);
  const ignoredInteractionContext = useMemo(() => {
    if (!parentContext) {
      return null;
    }
    return {
      ...parentContext,
      hold(...args) {
        if (!ignore) {
          return parentContext.hold(...args);
        }
      }
    };
  }, [parentContext, ignore]);

  // react-18: Use children directly
  const kids = children != null ? children : null;
  if (!ignoredInteractionContext) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, kids);
  }
  return /*#__PURE__*/React.createElement(InteractionContext.Provider, {
    value: ignoredInteractionContext
  }, kids);
}