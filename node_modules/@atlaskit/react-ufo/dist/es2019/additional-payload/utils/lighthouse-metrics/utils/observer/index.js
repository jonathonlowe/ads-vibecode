import { withProfiling } from '../../../../../self-measurements';
import { PerformanceObserverEntryTypes } from '../../const';
import { EntriesBuffer } from '../buffer';
let pe = null;
const getObserver = withProfiling(function getObserver() {
  if (typeof PerformanceObserver !== 'function') {
    // Only instantiate the IntersectionObserver if it's supported
    return null;
  }
  if (pe !== null) {
    return pe;
  }
  const performanceObserverCallback = withProfiling(function performanceObserverCallback(list) {
    list.getEntries().forEach(entry => {
      if (entry.entryType === PerformanceObserverEntryTypes.LayoutShift) {
        EntriesBuffer[PerformanceObserverEntryTypes.LayoutShift].push(entry);
      }
      if (entry.entryType === PerformanceObserverEntryTypes.LongTask) {
        EntriesBuffer[PerformanceObserverEntryTypes.LongTask].push(entry);
      }
    });
  });
  pe = new PerformanceObserver(performanceObserverCallback);
  return pe;
});
export const startLSObserver = withProfiling(function startLSObserver() {
  var _getObserver;
  (_getObserver = getObserver()) === null || _getObserver === void 0 ? void 0 : _getObserver.observe({
    type: PerformanceObserverEntryTypes.LayoutShift,
    buffered: true
  });
});
export const startLTObserver = withProfiling(function startLTObserver() {
  var _getObserver2;
  (_getObserver2 = getObserver()) === null || _getObserver2 === void 0 ? void 0 : _getObserver2.observe({
    type: PerformanceObserverEntryTypes.LongTask,
    buffered: true
  });
});