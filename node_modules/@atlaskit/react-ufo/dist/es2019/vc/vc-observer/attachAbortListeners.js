import { bind } from 'bind-event-listener';
import { AbortEvent } from '../../common/vc/types';
import { withProfiling } from '../../self-measurements';
import { getViewportHeight, getViewportWidth } from './getViewport';
export const attachAbortListeners = withProfiling(function attachAbortListeners(window, initialViewPort, callback) {
  const unbindWheel = bind(window, {
    type: AbortEvent.wheel,
    listener: e => {
      callback(AbortEvent.wheel, e.timeStamp);
    },
    options: {
      passive: true,
      once: true
    }
  });
  const unbindKeydown = bind(window, {
    type: AbortEvent.keydown,
    listener: e => {
      callback(AbortEvent.keydown, e.timeStamp);
    },
    options: {
      once: true
    }
  });
  const unbindResize = bind(window, {
    type: AbortEvent.resize,
    listener: e => {
      if (getViewportWidth() !== initialViewPort.w || getViewportHeight() !== initialViewPort.h) {
        callback(AbortEvent.resize, e.timeStamp);
        unbindResize();
      }
    }
  });
  return [unbindWheel, unbindKeydown, unbindResize];
}, ['vc']);