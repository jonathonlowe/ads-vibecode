export function createPlaceholderElement(id) {
  const el = document.createElement('div');
  el.dataset.editorLnvPlaceholder = id;
  return el;
}
export function createReplaceElement(id) {
  const el = document.createElement('div');
  el.dataset.editorLnvPlaceholderReplace = id;
  return el;
}
export function handleElements(elements, handler, observerCallback, callback) {
  const [first, ...rest] = elements;
  handler.handleAddedNode(first.element).then(result => {
    if (!rest.length) {
      // Recursion terminating condition
      callback(result);
    } else {
      // Recursively handle the rest of the elements
      handleElements(rest, handler, observerCallback, callback);
    }
  });
  observerCallback([{
    target: first.element,
    boundingClientRect: first.rect
  }]);
}
export function createMockIntersectionObserver(cbRef) {
  return class {
    constructor(fn) {
      cbRef.current = entries => fn(entries.map(entry => {
        return {
          ...entry,
          intersectionRatio: 1
        };
      }));
    }
    observe() {}
    unobserve() {}
    disconnect() {}
  };
}