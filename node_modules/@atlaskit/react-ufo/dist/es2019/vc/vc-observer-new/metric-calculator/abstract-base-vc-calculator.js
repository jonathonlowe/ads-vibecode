import { withProfiling } from '../../../self-measurements';
import calculateTTVCPercentiles from './percentile-calc';
import getViewportHeight from './utils/get-viewport-height';
import getViewportWidth from './utils/get-viewport-width';
export default class AbstractVCCalculatorBase {
  constructor(revisionNo) {
    this.revisionNo = revisionNo;
    this.calculate = withProfiling(this.calculate.bind(this), ['vc']);
  }
  async calculate({
    startTime,
    stopTime,
    orderedEntries
  }) {
    var _vcDetails$90$t, _vcDetails$;
    const filteredEntries = orderedEntries.filter(entry => {
      return this.isEntryIncluded(entry);
    });
    const isVCClean = this.isVCClean(filteredEntries);
    if (!isVCClean) {
      return {
        revision: this.revisionNo,
        'metric:vc90': null,
        clean: false
      };
    }
    const vcDetails = await calculateTTVCPercentiles({
      viewport: {
        width: getViewportWidth(),
        height: getViewportHeight()
      },
      startTime,
      stopTime,
      orderedEntries: filteredEntries,
      percentiles: [25, 50, 75, 80, 85, 90, 95, 98, 99]
    });
    return {
      revision: this.revisionNo,
      vcDetails: vcDetails !== null && vcDetails !== void 0 ? vcDetails : undefined,
      clean: isVCClean,
      'metric:vc90': (_vcDetails$90$t = vcDetails === null || vcDetails === void 0 ? void 0 : (_vcDetails$ = vcDetails['90']) === null || _vcDetails$ === void 0 ? void 0 : _vcDetails$.t) !== null && _vcDetails$90$t !== void 0 ? _vcDetails$90$t : null
    };
  }
}