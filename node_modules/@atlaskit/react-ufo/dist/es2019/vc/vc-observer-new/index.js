import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { markProfilingEnd, markProfilingStart, withProfiling } from '../../self-measurements';
import EntriesTimeline from './entries-timeline';
import getElementName from './get-element-name';
import VCCalculator_FY25_03 from './metric-calculator/fy25_03';
import ViewportObserver from './viewport-observer';
import WindowEventObserver from './window-event-observer';
const DEFAULT_SELECTOR_CONFIG = {
  id: false,
  testId: true,
  role: false,
  className: false,
  dataVC: true
};
export default class VCObserverNew {
  constructor(config) {
    var _config$selectorConfi;
    _defineProperty(this, "viewportObserver", null);
    _defineProperty(this, "windowEventObserver", null);
    const operationTimer = markProfilingStart('VCObserverNew constructor');
    this.entriesTimeline = new EntriesTimeline();
    this.selectorConfig = (_config$selectorConfi = config.selectorConfig) !== null && _config$selectorConfi !== void 0 ? _config$selectorConfi : DEFAULT_SELECTOR_CONFIG;
    this.viewportObserver = new ViewportObserver({
      onChange: onChangeArg => {
        const {
          time,
          type,
          elementRef,
          visible,
          rect,
          previousRect,
          mutationData
        } = onChangeArg;
        let elementName = 'unknown';
        const element = elementRef.deref();
        if (element) {
          elementName = this.getElementName(element);
        }
        this.entriesTimeline.push({
          time,
          type,
          data: {
            elementName,
            rect,
            previousRect,
            visible,
            attributeName: mutationData === null || mutationData === void 0 ? void 0 : mutationData.attributeName
          }
        });
      }
    });
    this.windowEventObserver = new WindowEventObserver({
      onEvent: ({
        time,
        type
      }) => {
        this.entriesTimeline.push({
          time,
          type: 'window:event',
          data: {
            eventType: type
          }
        });
      }
    });
    this.start = withProfiling(this.start.bind(this), ['vc']);
    this.stop = withProfiling(this.stop.bind(this), ['vc']);
    this.getVCResult = withProfiling(this.getVCResult.bind(this), ['vc']);
    this.getElementName = withProfiling(this.getElementName.bind(this), ['vc']);
    markProfilingEnd(operationTimer, {
      tags: ['vc']
    });
  }
  start({
    startTime
  }) {
    var _this$viewportObserve, _this$windowEventObse;
    (_this$viewportObserve = this.viewportObserver) === null || _this$viewportObserve === void 0 ? void 0 : _this$viewportObserve.start();
    (_this$windowEventObse = this.windowEventObserver) === null || _this$windowEventObse === void 0 ? void 0 : _this$windowEventObse.start();
    this.entriesTimeline.clear();
  }
  stop() {
    var _this$viewportObserve2, _this$windowEventObse2;
    (_this$viewportObserve2 = this.viewportObserver) === null || _this$viewportObserve2 === void 0 ? void 0 : _this$viewportObserve2.stop();
    (_this$windowEventObse2 = this.windowEventObserver) === null || _this$windowEventObse2 === void 0 ? void 0 : _this$windowEventObse2.stop();
  }
  async getVCResult(param) {
    const {
      start,
      stop
    } = param;
    const results = [];
    const calculator_fy25_03 = new VCCalculator_FY25_03();
    const orderedEntries = this.entriesTimeline.getOrderedEntries({
      start,
      stop
    });
    const fy25_03 = await calculator_fy25_03.calculate({
      orderedEntries,
      startTime: start,
      stopTime: stop
    });
    if (fy25_03) {
      results.push(fy25_03);
    }
    return results;
  }
  getElementName(element) {
    return getElementName(this.selectorConfig, element);
  }
}