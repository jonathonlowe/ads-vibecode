import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { markProfilingEnd, markProfilingStart, withProfiling } from '../../../self-measurements';
export default class EntriesTimeline {
  constructor() {
    _defineProperty(this, "unorderedEntries", []);
    _defineProperty(this, "sortedEntriesCache", new Map());
    const operationTimer = markProfilingStart('EntriesTimeline constructor');
    this.unorderedEntries = [];
    this.push = withProfiling(this.push.bind(this), ['vc']);
    this.getCacheKey = withProfiling(this.getCacheKey.bind(this), ['vc']);
    this.getOrderedEntries = withProfiling(this.getOrderedEntries.bind(this), ['vc']);
    this.clear = withProfiling(this.clear.bind(this), ['vc']);
    markProfilingEnd(operationTimer, {
      tags: ['vc']
    });
  }
  push(entry) {
    this.unorderedEntries.push(entry);
    this.sortedEntriesCache.clear();
  }
  getCacheKey(start, stop) {
    return `${start !== null && start !== void 0 ? start : 'null'}_${stop !== null && stop !== void 0 ? stop : 'null'}`;
  }
  getOrderedEntries({
    start,
    stop
  }) {
    var _this$sortedEntriesCa;
    const cacheKey = this.getCacheKey(start, stop);
    const cachedSortedEntries = (_this$sortedEntriesCa = this.sortedEntriesCache.get(cacheKey)) === null || _this$sortedEntriesCa === void 0 ? void 0 : _this$sortedEntriesCa.deref();
    if (cachedSortedEntries) {
      return cachedSortedEntries;
    }
    const filteredEntries = this.unorderedEntries.filter(e => e.time >= (start !== null && start !== void 0 ? start : 0) && e.time <= (stop !== null && stop !== void 0 ? stop : performance.now()));
    const sortedEntries = filteredEntries.sort((a, b) => a.time - b.time);
    this.sortedEntriesCache.set(cacheKey, new WeakRef(sortedEntries));
    return sortedEntries;
  }
  clear() {
    this.unorderedEntries = [];
    this.sortedEntriesCache.clear();
  }
}