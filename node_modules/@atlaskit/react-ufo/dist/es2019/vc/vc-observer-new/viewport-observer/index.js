import { markProfilingEnd, markProfilingStart, withProfiling } from '../../../self-measurements';
import { isContainedWithinMediaWrapper } from '../../vc-observer/media-wrapper/vc-utils';
import isNonVisualStyleMutation from '../../vc-observer/observers/non-visual-styles/is-non-visual-style-mutation';
import { createIntersectionObserver } from './intersection-observer';
import createMutationObserver from './mutation-observer';
import createPerformanceObserver from './performance-observer';
const isElementVisible = withProfiling(function isElementVisible(element) {
  if (!(element instanceof HTMLElement)) {
    return true;
  }
  try {
    const visible = element.checkVisibility({
      // @ts-expect-error
      visibilityProperty: true,
      contentVisibilityAuto: true,
      opacityProperty: true
    });
    return visible;
  } catch (e) {
    // there is no support for checkVisibility
    return true;
  }
}, ['vc']);
const sameRectSize = withProfiling(function sameRectSize(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height;
}, ['vc']);
const sameRectDimensions = withProfiling(function sameRectDimensions(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height && a.x === b.x && a.y === b.y;
}, ['vc']);
export default class ViewportObserver {
  constructor({
    onChange: _onChange
  }) {
    const onChange = withProfiling(_onChange, ['vc']);
    const operationTimer = markProfilingStart('ViewportObserver constructor');
    this.mapVisibleNodeRects = new WeakMap();
    this.intersectionObserver = createIntersectionObserver({
      onEntry: ({
        target,
        rect,
        time,
        type,
        mutationData
      }) => {
        if (!target) {
          return;
        }
        const visible = isElementVisible(target);
        const lastElementRect = this.mapVisibleNodeRects.get(target);
        this.mapVisibleNodeRects.set(target, rect);
        onChange({
          time,
          type,
          elementRef: new WeakRef(target),
          visible,
          rect,
          previousRect: lastElementRect,
          mutationData
        });
      }
    });
    this.mutationObserver = createMutationObserver({
      onChildListMutation: ({
        addedNodes,
        removedNodes
      }) => {
        var _removedNodes$map;
        const removedNodeRects = (_removedNodes$map = removedNodes === null || removedNodes === void 0 ? void 0 : removedNodes.map(n => this.mapVisibleNodeRects.get(n))) !== null && _removedNodes$map !== void 0 ? _removedNodes$map : [];
        addedNodes.forEach(addedNode => {
          var _this$intersectionObs3;
          // for (const elem of addedNode.querySelectorAll('*')) {
          // 	this.intersectionObserver?.watchAndTag(elem, 'mutation:child-element');
          // }

          const sameDeletedNode = removedNodes.find(n => n.isEqualNode(addedNode));
          if (sameDeletedNode) {
            var _this$intersectionObs;
            (_this$intersectionObs = this.intersectionObserver) === null || _this$intersectionObs === void 0 ? void 0 : _this$intersectionObs.watchAndTag(addedNode, 'mutation:remount');
            return;
          }
          if (isContainedWithinMediaWrapper(addedNode)) {
            var _this$intersectionObs2;
            (_this$intersectionObs2 = this.intersectionObserver) === null || _this$intersectionObs2 === void 0 ? void 0 : _this$intersectionObs2.watchAndTag(addedNode, 'mutation:media');
            return;
          }
          (_this$intersectionObs3 = this.intersectionObserver) === null || _this$intersectionObs3 === void 0 ? void 0 : _this$intersectionObs3.watchAndTag(addedNode, ({
            rect
          }) => {
            const wasDeleted = removedNodeRects.some(nr => sameRectDimensions(nr, rect));
            if (wasDeleted) {
              return 'mutation:element-replacement';
            }
            return 'mutation:element';
          });
        });
      },
      onAttributeMutation: ({
        target,
        attributeName
      }) => {
        var _this$intersectionObs4;
        (_this$intersectionObs4 = this.intersectionObserver) === null || _this$intersectionObs4 === void 0 ? void 0 : _this$intersectionObs4.watchAndTag(target, ({
          target,
          rect
        }) => {
          if (isContainedWithinMediaWrapper(target)) {
            return {
              type: 'mutation:media',
              mutationData: {
                attributeName
              }
            };
          }
          if (isNonVisualStyleMutation({
            target,
            attributeName,
            type: 'attributes'
          })) {
            return {
              type: 'mutation:attribute:non-visual-style',
              mutationData: {
                attributeName
              }
            };
          }
          const lastElementRect = this.mapVisibleNodeRects.get(target);
          if (lastElementRect && sameRectSize(rect, lastElementRect)) {
            return {
              type: 'mutation:attribute:no-layout-shift',
              mutationData: {
                attributeName
              }
            };
          }
          return {
            type: 'mutation:attribute',
            mutationData: {
              attributeName
            }
          };
        });
      }
    });
    this.performanceObserver = createPerformanceObserver({
      onLayoutShift: ({
        time,
        changedRects
      }) => {
        for (const changedRect of changedRects) {
          const target = changedRect.node;
          if (target) {
            onChange({
              time,
              elementRef: new WeakRef(target),
              visible: true,
              rect: changedRect.rect,
              previousRect: changedRect.previousRect,
              type: 'layout-shift'
            });
          }
        }
      }
    });
    this.start = withProfiling(this.start.bind(this), ['vc']);
    this.stop = withProfiling(this.stop.bind(this), ['vc']);
    markProfilingEnd(operationTimer, {
      tags: ['vc']
    });
  }
  start() {
    var _this$mutationObserve, _this$performanceObse;
    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 ? void 0 : _this$mutationObserve.observe(document.body, {
      attributeOldValue: true,
      attributes: true,
      childList: true,
      subtree: true
    });
    (_this$performanceObse = this.performanceObserver) === null || _this$performanceObse === void 0 ? void 0 : _this$performanceObse.observe({
      type: 'layout-shift',
      buffered: true,
      // @ts-ignore-error
      durationThreshold: 30
    });
  }
  stop() {
    var _this$mutationObserve2, _this$intersectionObs5, _this$performanceObse2;
    (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.disconnect();
    (_this$intersectionObs5 = this.intersectionObserver) === null || _this$intersectionObs5 === void 0 ? void 0 : _this$intersectionObs5.disconnect();
    (_this$performanceObse2 = this.performanceObserver) === null || _this$performanceObse2 === void 0 ? void 0 : _this$performanceObse2.disconnect();
  }
}