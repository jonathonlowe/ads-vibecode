var _process, _process$env;
import { fg } from '@atlaskit/platform-feature-flags';
import { getConfig } from '../config';
import { markProfilingEnd, markProfilingStart, withProfiling } from '../self-measurements';
import { VCObserverNOOP } from './no-op-vc-observer';
import { VCObserver } from './vc-observer';
import VCObserverNew from './vc-observer-new';
class VCObserverWrapper {
  constructor(opts = {}) {
    var _getConfig, _getConfig$vc;
    const operationTimer = markProfilingStart('VCObserverWrapper constructor');
    this.newVCObserver = null;
    const isNewVCObserverEnabled = fg('platform_ufo_vc_observer_new') || ((_getConfig = getConfig()) === null || _getConfig === void 0 ? void 0 : (_getConfig$vc = _getConfig.vc) === null || _getConfig$vc === void 0 ? void 0 : _getConfig$vc.enableVCObserverNew);
    if (isNewVCObserverEnabled) {
      this.newVCObserver = new VCObserverNew({
        selectorConfig: opts.selectorConfig
      });
    }
    this.oldVCObserver = new VCObserver(opts);
    this.start = withProfiling(this.start.bind(this), ['vc']);
    this.stop = withProfiling(this.stop.bind(this), ['vc']);
    this.getVCRawData = withProfiling(this.getVCRawData.bind(this), ['vc']);
    this.getVCResult = withProfiling(this.getVCResult.bind(this), ['vc']);
    this.setSSRElement = withProfiling(this.setSSRElement.bind(this), ['vc']);
    this.setReactRootRenderStart = withProfiling(this.setReactRootRenderStart.bind(this), ['vc']);
    this.setReactRootRenderStop = withProfiling(this.setReactRootRenderStop.bind(this), ['vc']);
    markProfilingEnd(operationTimer, {
      tags: ['vc']
    });
  }
  start(startArg) {
    var _this$oldVCObserver, _this$newVCObserver;
    (_this$oldVCObserver = this.oldVCObserver) === null || _this$oldVCObserver === void 0 ? void 0 : _this$oldVCObserver.start(startArg);
    (_this$newVCObserver = this.newVCObserver) === null || _this$newVCObserver === void 0 ? void 0 : _this$newVCObserver.start({
      startTime: startArg.startTime
    });
  }
  stop() {
    var _this$oldVCObserver2, _this$newVCObserver2;
    (_this$oldVCObserver2 = this.oldVCObserver) === null || _this$oldVCObserver2 === void 0 ? void 0 : _this$oldVCObserver2.stop();
    (_this$newVCObserver2 = this.newVCObserver) === null || _this$newVCObserver2 === void 0 ? void 0 : _this$newVCObserver2.stop();
  }
  getVCRawData() {
    var _this$oldVCObserver$g, _this$oldVCObserver3;
    return (_this$oldVCObserver$g = (_this$oldVCObserver3 = this.oldVCObserver) === null || _this$oldVCObserver3 === void 0 ? void 0 : _this$oldVCObserver3.getVCRawData()) !== null && _this$oldVCObserver$g !== void 0 ? _this$oldVCObserver$g : null;
  }
  async getVCResult(param) {
    var _this$oldVCObserver4, _this$newVCObserver3, _ref;
    const oldResult = await ((_this$oldVCObserver4 = this.oldVCObserver) === null || _this$oldVCObserver4 === void 0 ? void 0 : _this$oldVCObserver4.getVCResult(param));
    const newResult = await ((_this$newVCObserver3 = this.newVCObserver) === null || _this$newVCObserver3 === void 0 ? void 0 : _this$newVCObserver3.getVCResult({
      start: param.start,
      stop: fg('platform_ufo_vc_ttai_on_paint') ? param.stop : performance.now()
    }));
    if (oldResult && !newResult) {
      return oldResult;
    }
    return {
      ...(oldResult !== null && oldResult !== void 0 ? oldResult : {}),
      'ufo:vc:rev': [...((_ref = oldResult === null || oldResult === void 0 ? void 0 : oldResult['ufo:vc:rev']) !== null && _ref !== void 0 ? _ref : []), ...(newResult !== null && newResult !== void 0 ? newResult : [])]
    };
  }
  setSSRElement(element) {
    var _this$oldVCObserver5;
    (_this$oldVCObserver5 = this.oldVCObserver) === null || _this$oldVCObserver5 === void 0 ? void 0 : _this$oldVCObserver5.setSSRElement(element);
  }
  setReactRootRenderStart(startTime) {
    var _this$oldVCObserver6;
    (_this$oldVCObserver6 = this.oldVCObserver) === null || _this$oldVCObserver6 === void 0 ? void 0 : _this$oldVCObserver6.setReactRootRenderStart(startTime || performance.now());
  }
  setReactRootRenderStop(stopTime) {
    var _this$oldVCObserver7;
    (_this$oldVCObserver7 = this.oldVCObserver) === null || _this$oldVCObserver7 === void 0 ? void 0 : _this$oldVCObserver7.setReactRootRenderStop(stopTime || performance.now());
  }
}

// Some products set this variable to indicate it is running in SSR
let isServer = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__SERVER__);
// Other products set this other variable to indicate it is running in SSR
let isReactSSR = typeof process !== 'undefined' && Boolean(((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.REACT_SSR) || false);
export const isEnvironmentSupported = withProfiling(function isEnvironmentSupported() {
  // SSR environment aren't supported
  if (isReactSSR || isServer) {
    return false;
  }

  // Legacy browsers that doesn't support WeakRef
  // aren't valid
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.WeakRef) !== 'function') {
    return false;
  }
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.MutationObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.IntersectionObserver) !== 'function' || typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.PerformanceObserver) !== 'function') {
    return false;
  }
  return true;
}, ['vc']);
export const getVCObserver = withProfiling(function getVCObserver(opts = {}) {
  if (!globalThis.__vcObserver) {
    const shouldMockVCObserver = !isEnvironmentSupported();
    globalThis.__vcObserver = shouldMockVCObserver ? new VCObserverNOOP() : new VCObserverWrapper(opts);
  }
  return globalThis.__vcObserver;
}, ['vc']);