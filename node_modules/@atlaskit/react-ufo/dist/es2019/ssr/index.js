import { withProfiling } from '../self-measurements';
const NESTED_METRIC_SEPARATOR = '/';
const filterEntry = withProfiling(function filterEntry(entry) {
  return !(!entry || typeof entry !== 'object' || entry.startTime < 0 || entry.duration < 0);
});
const mapEntry = withProfiling(function mapEntry(entry) {
  return {
    startTime: Math.round(entry.startTime),
    duration: Math.round(entry.duration)
  };
});
const SSR_PREFIX = 'ssr';
const mapKey = withProfiling(function mapKey(key) {
  if (key === 'total') {
    return SSR_PREFIX;
  }
  return `${SSR_PREFIX}${NESTED_METRIC_SEPARATOR}${key}`;
});
let config;
export const configure = withProfiling(function configure(ssrConfig) {
  config = ssrConfig;
});
export const getSSRTimings = withProfiling(function getSSRTimings() {
  var _config;
  if (!((_config = config) !== null && _config !== void 0 && _config.getTimings)) {
    return {};
  }
  const timings = config.getTimings();
  if (!timings) {
    return {};
  }
  const ssrTimings = Object.entries(timings).reduce((acc, entry) => {
    if (filterEntry(entry[1])) {
      acc[mapKey(entry[0])] = mapEntry(entry[1]);
    }
    return acc;
  }, {});
  return ssrTimings;
});
export const getSSRSuccess = withProfiling(function getSSRSuccess() {
  var _config2;
  return !!((_config2 = config) !== null && _config2 !== void 0 && _config2.getDoneMark());
});
export const getSSRDoneTime = withProfiling(function getSSRDoneTime() {
  var _config$getDoneMark, _config3;
  return (_config$getDoneMark = (_config3 = config) === null || _config3 === void 0 ? void 0 : _config3.getDoneMark()) !== null && _config$getDoneMark !== void 0 ? _config$getDoneMark : undefined;
});
export const getSSRFeatureFlags = withProfiling(function getSSRFeatureFlags() {
  var _config4;
  if (!((_config4 = config) !== null && _config4 !== void 0 && _config4.getFeatureFlags)) {
    return undefined;
  }
  try {
    var _config$getFeatureFla;
    return (_config$getFeatureFla = config.getFeatureFlags()) !== null && _config$getFeatureFla !== void 0 ? _config$getFeatureFla : undefined;
    // eslint-disable-next-line no-empty
  } catch (e) {}
  return undefined;
});