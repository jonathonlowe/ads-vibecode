import { withProfiling } from '../self-measurements';
let config;

// Defensively typed, since this is directly user-editable
// and they could delete empty members

export const setUFOConfig = withProfiling(function setUFOConfig(newConfig) {
  config = newConfig;
});
export const getConfig = withProfiling(function getConfig() {
  return config;
});
export const getInteractionRate = withProfiling(function getInteractionRate(name, interactionKind) {
  try {
    if (!config) {
      return 0;
    }
    const {
      killswitch,
      rates,
      rules,
      kind,
      autoGeneratedRate
    } = config;
    if (killswitch != null) {
      // Specifically kill certain events
      if (killswitch.includes(name)) {
        return 0;
      }
    }
    if (rates != null) {
      // Decide the rate explicitly
      if (rates[name] != null) {
        return rates[name];
      }
    }
    if (rules != null) {
      for (let i = 0; i < rules.length; i++) {
        const rule = rules[i];
        const {
          test,
          rate
        } = rule;
        if (test != null && rate != null) {
          const regexp = new RegExp(test, 'ig');
          if (regexp.test(name)) {
            return rate;
          }
        }
      }
    }
    const isAutogenerated = name === null || name === void 0 ? void 0 : name.startsWith('auto-generated');
    if (isAutogenerated) {
      const rate = autoGeneratedRate;
      if (rate != null) {
        return rate;
      }
    }
    if (kind != null) {
      const rate = kind[interactionKind];
      if (rate != null) {
        return rate;
      }
    }
    return 0;
  } catch (e) {
    // Fallback
    return 0;
  }
});
export const getExperimentalInteractionRate = withProfiling(function getExperimentalInteractionRate(name, interactionType) {
  try {
    if (!config) {
      return 0;
    }
    const {
      experimentalInteractionMetrics
    } = config;
    if (!(experimentalInteractionMetrics !== null && experimentalInteractionMetrics !== void 0 && experimentalInteractionMetrics.enabled)) {
      return 0;
    }
    if (experimentalInteractionMetrics.rates && typeof experimentalInteractionMetrics.rates[name] === 'number') {
      return experimentalInteractionMetrics.rates[name];
    }
    if (experimentalInteractionMetrics.kind && typeof experimentalInteractionMetrics.kind[interactionType] === 'number') {
      return experimentalInteractionMetrics.kind[interactionType];
    }
    return 0;
  } catch (e) {
    return 0;
  }
});
export const getPostInteractionRate = withProfiling(function getPostInteractionRate(name, interactionType) {
  try {
    if (!config) {
      return 0;
    }
    const {
      postInteractionLog
    } = config;
    if (!(postInteractionLog !== null && postInteractionLog !== void 0 && postInteractionLog.enabled)) {
      return 0;
    }
    if (postInteractionLog.rates && typeof postInteractionLog.rates[name] === 'number') {
      return postInteractionLog.rates[name];
    }
    if (postInteractionLog.kind && typeof postInteractionLog.kind[interactionType] === 'number') {
      return postInteractionLog.kind[interactionType];
    }
    return 0;
  } catch (e) {
    return 0;
  }
});
export const getCapabilityRate = withProfiling(function getCapabilityRate(capability) {
  try {
    if (!config) {
      return 0;
    }
    const {
      capability: capabilityRate
    } = config;
    if (capabilityRate != null) {
      const rate = capabilityRate[capability];
      if (rate != null) {
        return rate;
      }
    }
    return 0;
  } catch {
    return 0;
  }
});
const validTypingMethods = ['timeout', 'timeoutNoAlloc', 'mutationObserver'];
export const getTypingPerformanceTracingMethod = withProfiling(function getTypingPerformanceTracingMethod() {
  const defaultMethod = 'timeout';
  try {
    if (!config) {
      return defaultMethod;
    }
    const {
      typingMethod
    } = config;
    if (typingMethod != null && validTypingMethods.find(m => m === typingMethod)) {
      return typingMethod;
    } else {
      return defaultMethod;
    }
  } catch (e) {
    return defaultMethod;
  }
});

// Will ask UFO to wait for BM3 TTI for all events on this list
export const getAwaitBM3TTIList = withProfiling(function getAwaitBM3TTIList() {
  try {
    if (!config) {
      return [];
    }
    const {
      awaitBM3TTI
    } = config;
    if (awaitBM3TTI != null) {
      return awaitBM3TTI;
    } else {
      return [];
    }
  } catch (e) {
    return [];
  }
});

// Flag to remove ufo segments prefixes
export const getRemovePageSegmentsUFOPrefixes = withProfiling(function getRemovePageSegmentsUFOPrefixes() {
  try {
    if (!config) {
      return false;
    }
    const {
      removePageSegmentsUFOPrefixes
    } = config;
    if (removePageSegmentsUFOPrefixes != null) {
      return removePageSegmentsUFOPrefixes;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
});

// Flag to remove ufo segments prefixes
export const getRemoveInteractionsUFOPrefixes = withProfiling(function getRemoveInteractionsUFOPrefixes() {
  try {
    if (!config) {
      return false;
    }
    const {
      removeInteractionsUFOPrefixes
    } = config;
    if (removeInteractionsUFOPrefixes != null) {
      return removeInteractionsUFOPrefixes;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
});

// Will ask UFO to override ufoName => experienceKey to the apdex key
// This is to cover use cases where one rUFO route is split into multiple BM3 keys (1:N)
// This workaround should only be used as last resource,
// when we find router limitations preventing teams from splliting these routes
export const getUfoNameOverrides = withProfiling(function getUfoNameOverrides() {
  try {
    if (!config) {
      return undefined;
    }
    const {
      ufoNameOverrides
    } = config;
    if (ufoNameOverrides != null) {
      return ufoNameOverrides;
    }
    return undefined;
  } catch (e) {
    return undefined;
  }
});

// Contains the list of interactions that do not abort existing known interactions
export const getDoNotAbortActivePressInteraction = withProfiling(function getDoNotAbortActivePressInteraction() {
  try {
    if (!config) {
      return undefined;
    }
    const {
      doNotAbortActivePressInteraction
    } = config;
    return doNotAbortActivePressInteraction;
  } catch (e) {
    return undefined;
  }
});

// Contains the list of interactions that do not abort on transitions
export const getDoNotAbortActivePressInteractionOnTransition = withProfiling(function getDoNotAbortActivePressInteractionOnTransition() {
  try {
    if (!config) {
      return undefined;
    }
    const {
      doNotAbortActivePressInteractionOnTransition
    } = config;
    return doNotAbortActivePressInteractionOnTransition;
  } catch (e) {
    return undefined;
  }
});
export const shouldHandleEditorLnv = withProfiling(function shouldHandleEditorLnv() {
  try {
    var _config$enableEditorL, _config;
    return (_config$enableEditorL = (_config = config) === null || _config === void 0 ? void 0 : _config.enableEditorLnvHandler) !== null && _config$enableEditorL !== void 0 ? _config$enableEditorL : false;
  } catch (e) {
    return false;
  }
});