import { fg } from '@atlaskit/platform-feature-flags';
globalThis.__ufo_self_measurements = globalThis.__ufo_self_measurements || {
  __internalState: {
    functionStack: []
  },
  runtime: {
    total: 0,
    async: 0,
    error: 0,
    byFunction: {},
    custom: {}
  }
};
export function resetProfilerMeasurements() {
  globalThis.__ufo_self_measurements = {
    __internalState: {
      functionStack: []
    },
    runtime: {
      total: 0,
      async: 0,
      error: 0,
      byFunction: {},
      custom: {}
    }
  };
}
function trackFunctionTimingStart(fnName) {
  var _globalThis$__ufo_sel, _globalThis$__ufo_sel2, _globalThis$__ufo_sel3;
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.__ufo_self_measurements)) {
    resetProfilerMeasurements();
  }
  globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$__ufo_sel = globalThis.__ufo_self_measurements) === null || _globalThis$__ufo_sel === void 0 ? void 0 : (_globalThis$__ufo_sel2 = _globalThis$__ufo_sel.__internalState) === null || _globalThis$__ufo_sel2 === void 0 ? void 0 : (_globalThis$__ufo_sel3 = _globalThis$__ufo_sel2.functionStack) === null || _globalThis$__ufo_sel3 === void 0 ? void 0 : _globalThis$__ufo_sel3.push(fnName);
}
function trackFunctionTimingEnd() {
  var _globalThis$__ufo_sel4, _globalThis$__ufo_sel5, _globalThis$__ufo_sel6;
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.__ufo_self_measurements)) {
    resetProfilerMeasurements();
  }
  globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$__ufo_sel4 = globalThis.__ufo_self_measurements) === null || _globalThis$__ufo_sel4 === void 0 ? void 0 : (_globalThis$__ufo_sel5 = _globalThis$__ufo_sel4.__internalState) === null || _globalThis$__ufo_sel5 === void 0 ? void 0 : (_globalThis$__ufo_sel6 = _globalThis$__ufo_sel5.functionStack) === null || _globalThis$__ufo_sel6 === void 0 ? void 0 : _globalThis$__ufo_sel6.pop();
}
function shouldRecordProfilerMeasurement() {
  var _globalThis$__ufo_sel7, _globalThis$__ufo_sel8, _globalThis$__ufo_sel9;
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.__ufo_self_measurements)) {
    resetProfilerMeasurements();
  }
  return (globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$__ufo_sel7 = globalThis.__ufo_self_measurements) === null || _globalThis$__ufo_sel7 === void 0 ? void 0 : (_globalThis$__ufo_sel8 = _globalThis$__ufo_sel7.__internalState) === null || _globalThis$__ufo_sel8 === void 0 ? void 0 : (_globalThis$__ufo_sel9 = _globalThis$__ufo_sel8.functionStack) === null || _globalThis$__ufo_sel9 === void 0 ? void 0 : _globalThis$__ufo_sel9.length) === 0;
}
function recordProfilerMeasurement(functionName, duration, isAsync, isError, tags = []) {
  // discard measurements that are not significant
  if (duration <= 0) {
    return;
  }
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.__ufo_self_measurements)) {
    resetProfilerMeasurements();
  }
  globalThis.__ufo_self_measurements.runtime.total += duration;
  if (isAsync) {
    globalThis.__ufo_self_measurements.runtime.async += duration;
  }
  if (isError) {
    globalThis.__ufo_self_measurements.runtime.error += duration;
  }
  if (functionName in globalThis.__ufo_self_measurements.runtime.byFunction) {
    globalThis.__ufo_self_measurements.runtime.byFunction[functionName] += duration;
  } else {
    globalThis.__ufo_self_measurements.runtime.byFunction[functionName] = duration;
  }
  for (const tag of tags) {
    if (tag in globalThis.__ufo_self_measurements.runtime.custom) {
      globalThis.__ufo_self_measurements.runtime.custom[tag] += duration;
    } else {
      globalThis.__ufo_self_measurements.runtime.custom[tag] = duration;
    }
  }
}
function isPromise(value) {
  return value && typeof value.then === 'function';
}
export function withProfiling(fn, tags = []) {
  try {
    if (!fg('platform_ufo_self_timings')) {
      return fn; // this is a NOOP wrapper if feature gate is disabled
    }
  } catch {
    return fn;
  }
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.performance)) {
    return fn;
  }
  if (fn.constructor.name === 'AsyncFunction') {
    return async function (...args) {
      var _fn$name;
      const startTime = performance.now();
      trackFunctionTimingStart((_fn$name = fn.name) !== null && _fn$name !== void 0 ? _fn$name : 'anonymous');
      try {
        const result = await fn(...args);
        const endTime = performance.now();
        trackFunctionTimingEnd();
        if (shouldRecordProfilerMeasurement()) {
          recordProfilerMeasurement(fn.name, endTime - startTime, true, false, tags);
        }
        return result;
      } catch (error) {
        const endTime = performance.now();
        trackFunctionTimingEnd();
        if (shouldRecordProfilerMeasurement()) {
          recordProfilerMeasurement(fn.name, endTime - startTime, true, true, tags);
        }
        throw error;
      }
    };
  }
  return function (...args) {
    var _fn$name2;
    const startTime = performance.now();
    trackFunctionTimingStart((_fn$name2 = fn.name) !== null && _fn$name2 !== void 0 ? _fn$name2 : 'anonymous');
    try {
      const result = fn(...args);
      if (isPromise(result)) {
        result.then(value => {
          const endTime = performance.now();
          trackFunctionTimingEnd();
          if (shouldRecordProfilerMeasurement()) {
            recordProfilerMeasurement(fn.name, endTime - startTime, true, false, tags);
          }
          return value;
        }).catch(value => {
          const endTime = performance.now();
          trackFunctionTimingEnd();
          if (shouldRecordProfilerMeasurement()) {
            recordProfilerMeasurement(fn.name, endTime - startTime, true, true, tags);
          }
          return value;
        });
      } else {
        const endTime = performance.now();
        trackFunctionTimingEnd();
        if (shouldRecordProfilerMeasurement()) {
          recordProfilerMeasurement(fn.name, endTime - startTime, false, false, tags);
        }
      }
      return result;
    } catch (error) {
      const endTime = performance.now();
      trackFunctionTimingEnd();
      if (shouldRecordProfilerMeasurement()) {
        recordProfilerMeasurement(fn.name, endTime - startTime, false, true, tags);
      }
      throw error;
    }
  };
}
export function markProfilingStart(name) {
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.performance)) {
    return {
      name,
      startTime: -1
    };
  }
  trackFunctionTimingStart(name);
  return {
    name,
    startTime: performance.now()
  };
}
export function markProfilingEnd({
  name,
  startTime
}, {
  isAsync,
  isError,
  tags
} = {}) {
  if (!(globalThis !== null && globalThis !== void 0 && globalThis.performance)) {
    return;
  }
  trackFunctionTimingEnd();
  if (!fg('platform_ufo_self_timings')) {
    return;
  }
  const endTime = performance.now();
  recordProfilerMeasurement(name, endTime - startTime, isAsync, isError, tags);
}
export function getProfilerData() {
  return {
    ...(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime)
  };
}
export function getProfilerTotalRuntime() {
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.total) === 'number') {
    return Math.round(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.total);
  }
  return null;
}
export function getProfilerAsyncRuntime() {
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.async) === 'number') {
    return Math.round(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.async);
  }
  return null;
}
export function getProfilerRuntimeByFunction(functionName) {
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.byFunction[functionName]) === 'number') {
    return Math.round(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.byFunction[functionName]);
  }
  return null;
}
export function getProfilerRuntimeByTag(tag) {
  if (typeof (globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.custom[tag]) === 'number') {
    return Math.round(globalThis === null || globalThis === void 0 ? void 0 : globalThis.__ufo_self_measurements.runtime.custom[tag]);
  }
  return null;
}