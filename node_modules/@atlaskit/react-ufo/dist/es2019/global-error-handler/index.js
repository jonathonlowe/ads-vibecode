import { bind } from 'bind-event-listener';
import { withProfiling } from '../self-measurements';
let shouldInitilizeGlobalErrorHandler = true;
let globalCount = 0;
const errors = [];
let push = withProfiling(function push(name, labelStack, errorType, errorMessage, errorStack) {
  errors.push({
    name,
    labelStack,
    errorType,
    errorMessage,
    errorStack
  });
});
export const sinkErrorHandler = withProfiling(function sinkErrorHandler(sinkFunc) {
  push = withProfiling(sinkFunc);
  errors.forEach(e => {
    sinkFunc(e.name, e.labelStack, e.errorType, e.errorMessage, e.errorStack);
  });
  errors.length = 0;
});
export const getGlobalErrorCount = withProfiling(function getGlobalErrorCount() {
  return globalCount;
});
const handleError = withProfiling(function handleError(e) {
  var _e$error;
  globalCount++;
  if (((_e$error = e.error) === null || _e$error === void 0 ? void 0 : _e$error.UFOhasCaught) === undefined) {
    try {
      if (e.error instanceof Error) {
        push('GlobalErrorHandler', null, e.error.name, e.error.message, e.error.stack);
      } else if (e.error) {
        const hint = JSON.stringify(e.error).slice(0, 50);
        push('GlobalErrorHandler', null, '', `Non error object thrown: ${hint}`, undefined);
      } else if (e.message !== undefined) {
        const hint = e.message.slice(0, 50);
        push('GlobalErrorHandler', null, '', `Non error object thrown: ${hint}`, undefined);
      }
      if (e.error && typeof e.error === 'object') {
        e.error.UFOhasCaught = true;
      }
      // eslint-disable-next-line no-empty
    } catch (e) {}
  }
});
const handlePromiseRejection = withProfiling(function handlePromiseRejection(e) {
  globalCount++;
  if (e.reason instanceof Error) {
    push('GlobalErrorHandler', null, e.reason.name, e.reason.message, e.reason.stack);
  } else if (e.reason) {
    try {
      const hint = JSON.stringify(e.reason).slice(0, 50);
      push('GlobalErrorHandler', null, '', `Non error object thrown: ${hint}`, undefined);
      // eslint-disable-next-line no-empty
    } catch (e) {}
  }
});
const setupUFOGlobalErrorHandler = withProfiling(function setupUFOGlobalErrorHandler() {
  if (shouldInitilizeGlobalErrorHandler) {
    bind(window, {
      type: 'error',
      listener: e => handleError(e)
    });
    bind(window, {
      type: 'unhandledrejection',
      listener: handlePromiseRejection
    });
    shouldInitilizeGlobalErrorHandler = false;
  }
});
export default setupUFOGlobalErrorHandler;