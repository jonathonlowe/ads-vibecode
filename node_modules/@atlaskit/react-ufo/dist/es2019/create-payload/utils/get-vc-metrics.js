import { fg } from '@atlaskit/platform-feature-flags';
import { getConfig } from '../../config';
import { postInteractionLog } from '../../interaction-metrics';
import { withProfiling } from '../../self-measurements';
import { getVCObserver } from '../../vc';
import getInteractionStatus from './get-interaction-status';
import getPageVisibilityUpToTTAI from './get-page-visibility-up-to-ttai';
import getSSRDoneTimeValue from './get-ssr-done-time-value';
const getVCMetrics = withProfiling(async function getVCMetrics(interaction) {
  var _config$vc, _config$vc$ssrWhiteli, _interaction$apdex, _interaction$apdex$, _config$experimentalI;
  const config = getConfig();
  if (!(config !== null && config !== void 0 && (_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled)) {
    return {};
  }
  if (interaction.type !== 'page_load' && interaction.type !== 'transition') {
    return {};
  }
  const interactionStatus = getInteractionStatus(interaction);
  const pageVisibilityUpToTTAI = getPageVisibilityUpToTTAI(interaction);
  if ((interactionStatus.originalInteractionStatus !== 'SUCCEEDED' || pageVisibilityUpToTTAI !== 'visible') && fg('platform_ufo_no_vc_on_aborted')) {
    return {};
  }
  const isSSREnabled = (config === null || config === void 0 ? void 0 : config.ssr) || (config === null || config === void 0 ? void 0 : (_config$vc$ssrWhiteli = config.vc.ssrWhitelist) === null || _config$vc$ssrWhiteli === void 0 ? void 0 : _config$vc$ssrWhiteli.includes(interaction.ufoName));
  const ssr = interaction.type === 'page_load' && isSSREnabled ? {
    ssr: getSSRDoneTimeValue(config)
  } : null;
  postInteractionLog.setVCObserverSSRConfig(ssr);
  const tti = (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 ? void 0 : (_interaction$apdex$ = _interaction$apdex[0]) === null || _interaction$apdex$ === void 0 ? void 0 : _interaction$apdex$.stopTime;
  const prefix = 'ufo';
  const result = await getVCObserver().getVCResult({
    start: interaction.start,
    stop: interaction.end,
    tti,
    prefix,
    vc: interaction.vc,
    isEventAborted: interactionStatus.originalInteractionStatus !== 'SUCCEEDED',
    ...ssr
  });
  if ((_config$experimentalI = config.experimentalInteractionMetrics) !== null && _config$experimentalI !== void 0 && _config$experimentalI.enabled) {
    getVCObserver().stop();
  }
  postInteractionLog.setLastInteractionFinishVCResult(result);
  if (fg('platform_ufo_disable_ttvc_v1')) {
    var _result$ufoVcRev;
    const ttvcV2Revision = result === null || result === void 0 ? void 0 : (_result$ufoVcRev = result['ufo:vc:rev']) === null || _result$ufoVcRev === void 0 ? void 0 : _result$ufoVcRev.find(({
      revision
    }) => revision === 'fy25.02');
    if (!(ttvcV2Revision !== null && ttvcV2Revision !== void 0 && ttvcV2Revision.clean)) {
      return result;
    }
    return {
      ...result,
      'metric:vc90': ttvcV2Revision['metric:vc90']
    };
  } else {
    const VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
    if (!VC || !(result !== null && result !== void 0 && result[`${prefix}:vc:clean`])) {
      return result;
    }
    if (interactionStatus.originalInteractionStatus !== 'SUCCEEDED' || pageVisibilityUpToTTAI !== 'visible') {
      return result;
    }
    return {
      ...result,
      'metric:vc90': VC['90']
    };
  }
});
export default getVCMetrics;