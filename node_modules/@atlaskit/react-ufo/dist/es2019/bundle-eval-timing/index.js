import { roundEpsilon } from '../round-number';
import { withProfiling } from '../self-measurements';
let config = null;
export const configure = withProfiling(function configure(bundleEvalTimingConfiguration) {
  config = bundleEvalTimingConfiguration;
});
const getPerformanceObject = withProfiling(function getPerformanceObject() {
  var _window;
  return ((_window = window) !== null && _window !== void 0 ? _window : {}).performance;
});
export const getBundleEvalTimings = withProfiling(function getBundleEvalTimings(interactionStartTime) {
  if (config == null) {
    return {};
  }
  const started = {};
  const timings = {};
  const cachedConfig = config;
  const performance = getPerformanceObject();
  performance === null || performance === void 0 ? void 0 : performance.getEntriesByType('mark').forEach(mark => {
    const result = cachedConfig.mapPerformanceMark(mark.name);
    if (!result) {
      return;
    }
    const {
      type,
      name
    } = result;
    if (type === 'start' && mark.startTime >= interactionStartTime) {
      started[name] = mark;
      return;
    }
    if (type === 'end' && started[name]) {
      timings[name] = {
        startTime: roundEpsilon(started[name].startTime - interactionStartTime),
        duration: roundEpsilon(mark.startTime - started[name].startTime)
      };
      delete started[name];
    }
  });
  if (Object.keys(timings).length === 0) {
    return {};
  }
  return timings;
});