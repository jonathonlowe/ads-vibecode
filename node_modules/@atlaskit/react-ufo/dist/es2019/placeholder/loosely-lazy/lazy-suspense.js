import React, { createContext, Fragment, Suspense, useLayoutEffect, useMemo, useRef, useState } from 'react';
const isNodeEnvironment = () => {
  return typeof window === 'undefined' || window.name === 'nodejs';
};
const LazySuspenseContext = /*#__PURE__*/createContext({
  fallback: /*#__PURE__*/React.createElement(Fragment, null),
  setFallback: () => {
    // eslint-disable-next-line no-console
    console.warn('Missing <LooselySuspense /> boundary');
  },
  name: ''
});
const DynamicFallback = ({
  children,
  outsideSuspense
}) => {
  const {
    fallback,
    setFallback
  } = React.useContext(LazySuspenseContext);
  useLayoutEffect(() => {
    return () => {
      if (!outsideSuspense) {
        setFallback(null);
      }
    };
  }, [outsideSuspense, setFallback]);
  return children(outsideSuspense ? null : fallback);
};
DynamicFallback.displayName = 'DynamicFallback';
export const LazySuspense = ({
  fallback,
  children,
  name
}) => {
  const [hydrationFallback, setHydrationFallback] = useState(null);
  const mountedRef = useRef(false);
  useLayoutEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);
  const contextValue = useMemo(() => ({
    fallback,
    setFallback: newFallback => {
      if (hydrationFallback === newFallback) {
        return;
      }
      setHydrationFallback(newFallback);
    },
    name
  }), [fallback, hydrationFallback, name]);
  const renderFallback = outsideSuspense => /*#__PURE__*/React.createElement(DynamicFallback, {
    outsideSuspense: outsideSuspense
  }, resolvedFallback => outsideSuspense && hydrationFallback ? hydrationFallback : resolvedFallback);
  return /*#__PURE__*/React.createElement(LazySuspenseContext.Provider, {
    value: contextValue
  }, isNodeEnvironment() ? children : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Suspense, {
    fallback: renderFallback(false)
  }, children), (!mountedRef.current || hydrationFallback) && renderFallback(true)));
};
LazySuspense.displayName = 'LazySuspense';