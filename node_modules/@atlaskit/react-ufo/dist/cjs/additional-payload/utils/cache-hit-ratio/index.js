"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCacheHitRatio = void 0;
var _selfMeasurements = require("../../../self-measurements");
/* Borrowed from https://bitbucket.org/atlassian/atlassian-frontend/src/master/packages/performance/browser-metrics/src/plugins/timings/resource.ts */
var cacheableTypes = ['script', 'link'];
var CACHE_NETWORK = 'network';
var CACHE_MEMORY = 'memory';
var CACHE_DISK = 'disk';
var calculateTransferType = (0, _selfMeasurements.withProfiling)(function calculateTransferType(type, duration, size) {
  if (!cacheableTypes.includes(type)) {
    return CACHE_NETWORK;
  }
  if ((size === undefined || size === 0) && duration === 0) {
    return CACHE_MEMORY;
  }
  if (size === 0 && duration > 0) {
    return CACHE_DISK;
  }
  if (size === undefined) {
    return null;
  }
  return CACHE_NETWORK;
});
var getCacheHitRatio = exports.getCacheHitRatio = (0, _selfMeasurements.withProfiling)(function getCacheHitRatio(_ref) {
  var start = _ref.start;
  var fromCache = 0;
  var preloadFromCache = 0;
  var total = 0;
  var totalPreload = 0;

  // initial load only
  if (start !== 0) {
    return {};
  }
  try {
    for (var _i = 0, _arr = performance.getEntriesByType('resource'); _i < _arr.length; _i++) {
      var entry = _arr[_i];
      // The BM3 resource timing collector checks for whether the timing information is available,
      // but we can make the assumption that it is for this Jira specific collector.
      var transferType = calculateTransferType(entry.initiatorType, entry.duration, entry.transferSize);
      var isPreload = entry.initiatorType === 'link';
      if (transferType === 'disk' || transferType === 'memory') {
        fromCache += 1;
        if (isPreload) {
          preloadFromCache += 1;
        }
      }
      if (transferType !== null) {
        total += 1;
        if (isPreload) {
          totalPreload += 1;
        }
      }
    }
    var result = {};
    if (total > 0) {
      result.cacheHitRatio = fromCache / total;
    }
    if (totalPreload > 0) {
      result.preloadCacheHitRatio = preloadFromCache / totalPreload;
    }
    return result;
  } catch (e) {
    return {};
  }
});