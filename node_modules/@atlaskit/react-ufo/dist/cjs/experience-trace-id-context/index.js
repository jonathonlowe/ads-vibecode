"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInteractionActiveTrace = exports.setActiveTrace = exports.getActiveTraceHttpRequestHeaders = exports.getActiveTraceAsQueryParams = exports.getActiveTrace = exports.generateSpanId = exports.clearActiveTrace = void 0;
var _selfMeasurements = require("../self-measurements");
var _makeTraceHttpRequestHeaders = require("./utils/make-trace-http-request-headers");
var state = {
  context: null
};
var generateSpanId = exports.generateSpanId = (0, _selfMeasurements.withProfiling)(function generateSpanId() {
  return Array.from(new Array(16), function () {
    return Math.floor(Math.random() * 16).toString(16);
  }).join('');
});
var setInteractionActiveTrace = exports.setInteractionActiveTrace = (0, _selfMeasurements.withProfiling)(function setInteractionActiveTrace(interactionId, experienceType) {
  setActiveTrace(interactionId.replace(/-/g, ''), generateSpanId(), experienceType);
});
var setActiveTrace = exports.setActiveTrace = (0, _selfMeasurements.withProfiling)(function setActiveTrace(traceId, spanId, type) {
  state.context = {
    traceId: traceId,
    spanId: spanId,
    type: type
  };
});
var getActiveTrace = exports.getActiveTrace = (0, _selfMeasurements.withProfiling)(function getActiveTrace() {
  return state.context || undefined;
});
var clearActiveTrace = exports.clearActiveTrace = (0, _selfMeasurements.withProfiling)(function clearActiveTrace() {
  state.context = null;
});
var getActiveTraceHttpRequestHeaders = exports.getActiveTraceHttpRequestHeaders = (0, _selfMeasurements.withProfiling)(function getActiveTraceHttpRequestHeaders(_url) {
  if (state.context === null) {
    return null;
  }
  var _state$context = state.context,
    traceId = _state$context.traceId,
    spanId = _state$context.spanId;
  return (0, _makeTraceHttpRequestHeaders.makeTraceHttpRequestHeaders)(traceId, spanId);
});
var getActiveTraceAsQueryParams = exports.getActiveTraceAsQueryParams = (0, _selfMeasurements.withProfiling)(function getActiveTraceAsQueryParams(_url) {
  var traceHeaders = getActiveTraceHttpRequestHeaders(_url);
  return traceHeaders ? new URLSearchParams(traceHeaders).toString().toLowerCase() : null;
});