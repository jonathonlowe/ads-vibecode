"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinkExperimentalHandler = exports.onExperimentalInteractionComplete = exports.installInteractionSink = exports.getExperimentalVCMetrics = exports.experimentalVC = exports.ExperimentalVCMetrics = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _hiddenTiming = require("../hidden-timing");
var _selfMeasurements = require("../self-measurements");
var _vcObserver = require("../vc/vc-observer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var interactionBuffer = [];
var bufferInteractionData = (0, _selfMeasurements.withProfiling)(function bufferInteractionData(interactionId, data) {
  interactionBuffer.push({
    interactionId: interactionId,
    data: data
  });
});
var clearInteractionBuffer = (0, _selfMeasurements.withProfiling)(function clearInteractionBuffer() {
  interactionBuffer.length = 0;
});
var appendInteractionData = (0, _selfMeasurements.withProfiling)(function appendInteractionData(interactionId, data) {
  bufferInteractionData(interactionId, data);
});
var installInteractionSink = exports.installInteractionSink = (0, _selfMeasurements.withProfiling)(function installInteractionSink(handler) {
  for (var _i = 0, _interactionBuffer = interactionBuffer; _i < _interactionBuffer.length; _i++) {
    var _interactionBuffer$_i = _interactionBuffer[_i],
      _interactionId = _interactionBuffer$_i.interactionId,
      data = _interactionBuffer$_i.data;
    handler(_interactionId, data);
  }
  clearInteractionBuffer();
  bufferInteractionData = (0, _selfMeasurements.withProfiling)(handler);
});
var sinkExperimentalHandler = exports.sinkExperimentalHandler = (0, _selfMeasurements.withProfiling)(function sinkExperimentalHandler(sinkFn) {
  installInteractionSink(sinkFn);
});
var onExperimentalInteractionComplete = exports.onExperimentalInteractionComplete = (0, _selfMeasurements.withProfiling)(function onExperimentalInteractionComplete(interactionId, data) {
  var endTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : performance.now();
  if (data.ufoName) {
    data.end = endTime;
    appendInteractionData(interactionId, data);
    clearInteractionBuffer();
  }
});
var ExperimentalVCMetrics = exports.ExperimentalVCMetrics = /*#__PURE__*/function () {
  function ExperimentalVCMetrics() {
    (0, _classCallCheck2.default)(this, ExperimentalVCMetrics);
    (0, _defineProperty2.default)(this, "vcObserver", null);
    this.initialize = (0, _selfMeasurements.withProfiling)(this.initialize.bind(this));
    this.start = (0, _selfMeasurements.withProfiling)(this.start.bind(this));
  }
  return (0, _createClass2.default)(ExperimentalVCMetrics, [{
    key: "initialize",
    value: function initialize(options) {
      if (this.vcObserver === null) {
        this.vcObserver = new _vcObserver.VCObserver(_objectSpread(_objectSpread({}, options), {}, {
          isPostInteraction: true
        }));
      }
      return this;
    }
  }, {
    key: "start",
    value: function start(_ref) {
      var _this$vcObserver;
      var startTime = _ref.startTime;
      (_this$vcObserver = this.vcObserver) === null || _this$vcObserver === void 0 || _this$vcObserver.start({
        startTime: startTime
      });
    }
  }]);
}();
var experimentalVC = exports.experimentalVC = new ExperimentalVCMetrics();
var getExperimentalVCMetrics = exports.getExperimentalVCMetrics = (0, _selfMeasurements.withProfiling)( /*#__PURE__*/function () {
  var _getExperimentalVCMetrics = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(interaction) {
    var _interaction$apdex, prefix, result, VC, pageVisibilityUpToTTAI;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!experimentalVC.vcObserver) {
            _context.next = 12;
            break;
          }
          prefix = 'ufo-experimental';
          _context.next = 4;
          return experimentalVC.vcObserver.getVCResult({
            start: interaction.start,
            stop: interaction.end,
            tti: (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 || (_interaction$apdex = _interaction$apdex[0]) === null || _interaction$apdex === void 0 ? void 0 : _interaction$apdex.stopTime,
            isEventAborted: !!interaction.abortReason,
            prefix: prefix,
            vc: interaction.vc
          });
        case 4:
          result = _context.sent;
          VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
          if (!(!VC || !(result !== null && result !== void 0 && result["".concat(prefix, ":vc:clean")]))) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", result);
        case 8:
          pageVisibilityUpToTTAI = (0, _hiddenTiming.getPageVisibilityState)(interaction.start, interaction.end);
          if (!(interaction.abortReason || pageVisibilityUpToTTAI !== 'visible')) {
            _context.next = 11;
            break;
          }
          return _context.abrupt("return", result);
        case 11:
          return _context.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
            'metric:experimental:vc90': VC['90']
          }));
        case 12:
          return _context.abrupt("return", null);
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  function getExperimentalVCMetrics(_x) {
    return _getExperimentalVCMetrics.apply(this, arguments);
  }
  return getExperimentalVCMetrics;
}());