"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePageloadName = exports.default = void 0;
var _uuid = require("uuid");
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _config = require("../config");
var _experienceTraceIdContext = require("../experience-trace-id-context");
var _interactionIdContext = require("../interaction-id-context");
var _interactionMetrics = require("../interaction-metrics");
var _routeNameContext = _interopRequireDefault(require("../route-name-context"));
var _selfMeasurements = require("../self-measurements");
var AWAITING_PAGELOAD_NAME = 'awaiting_pageload_name';
var traceUFOPageLoad = (0, _selfMeasurements.withProfiling)(function traceUFOPageLoad(ufoName) {
  var routeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ufoName;
  var activeInteraction = (0, _interactionMetrics.getActiveInteraction)();
  if (activeInteraction && !ufoName) {
    return;
  }
  _routeNameContext.default.current = routeName || null;
  var rate = ufoName ? (0, _config.getInteractionRate)(ufoName, 'page_load') : 1;
  var enabledBySamplingRate = (0, _coinflip.default)(rate);
  if (enabledBySamplingRate && !activeInteraction) {
    var newId = (0, _uuid.v4)();
    _interactionIdContext.DefaultInteractionID.current = newId;
    (0, _interactionMetrics.addNewInteraction)(newId, ufoName || '', 'page_load', 0, rate, null, routeName, (0, _experienceTraceIdContext.getActiveTrace)());
    if (!ufoName) {
      // if no name is provided we add a hold to the interaction, it is removed if the name is provided while the interaction is holding
      (0, _interactionMetrics.addHoldByID)(newId, [], AWAITING_PAGELOAD_NAME, AWAITING_PAGELOAD_NAME, true);
    }
  } else if (!enabledBySamplingRate && activeInteraction && activeInteraction.type === 'page_load') {
    // if there is an active interaction it will be aborted without initialising a new one because the coinflip returned false
    (0, _interactionMetrics.abort)(activeInteraction.id, 'excluded_by_sampling');
  } else if (ufoName && activeInteraction && !activeInteraction.ufoName && activeInteraction.type === 'page_load') {
    (0, _interactionMetrics.updatePageLoadInteractionName)(ufoName, routeName);
    (0, _interactionMetrics.removeHoldByID)(activeInteraction.id, AWAITING_PAGELOAD_NAME);
  }
});
var _default = exports.default = traceUFOPageLoad;
var updatePageloadName = exports.updatePageloadName = (0, _selfMeasurements.withProfiling)(function updatePageloadName(ufoName) {
  var routeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ufoName;
  var interaction = (0, _interactionMetrics.getActiveInteraction)();
  if (!interaction || interaction.type !== 'page_load' && interaction.type !== 'transition') {
    return;
  }
  if (ufoName) {
    var rate = (0, _config.getInteractionRate)(ufoName, 'page_load');
    (0, _interactionMetrics.updatePageLoadInteractionName)(ufoName, routeName);
    if ((0, _coinflip.default)(rate)) {
      _routeNameContext.default.current = ufoName;
    } else {
      (0, _interactionMetrics.abort)(interaction.id, 'excluded_by_sampling');
    }
  }
  (0, _interactionMetrics.removeHoldByID)(interaction.id, AWAITING_PAGELOAD_NAME);
});