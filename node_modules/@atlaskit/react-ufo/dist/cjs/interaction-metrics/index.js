"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePageLoadInteractionName = exports.tryComplete = exports.sinkPostInteractionLogHandler = exports.sinkInteractionHandler = exports.removeSegment = exports.removeHoldByID = exports.remove = exports.postInteractionLog = exports.interactionSpans = exports.getCurrentInteractionType = exports.getActiveInteraction = exports.extractModuleName = exports.addSpanToAll = exports.addSpan = exports.addSegment = exports.addRequestInfo = exports.addRedirect = exports.addProfilerTimings = exports.addPreload = exports.addOnCancelCallback = exports.addNewInteraction = exports.addMetadata = exports.addMarkToAll = exports.addMark = exports.addLoad = exports.addHoldByID = exports.addHold = exports.addErrorToAll = exports.addError = exports.addCustomTiming = exports.addCustomSpans = exports.addCustomData = exports.addBrowserMetricEvent = exports.addApdexToAll = exports.addApdex = exports.abortByNewInteraction = exports.abortAll = exports.abort = exports.ModuleLoadingProfiler = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _uuid = require("uuid");
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _config = require("../config");
var _createExperimentalInteractionMetricsPayload = require("../create-experimental-interaction-metrics-payload");
var _experienceTraceIdContext = require("../experience-trace-id-context");
var _featureFlagsAccessed = require("../feature-flags-accessed");
var _interactionIdContext = require("../interaction-id-context");
var _selfMeasurements = require("../self-measurements");
var _vc = require("../vc");
var _constants = require("./common/constants");
var _postInteractionLog = _interopRequireDefault(require("./post-interaction-log"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var PreviousInteractionLog = {
  name: undefined,
  isAborted: undefined
};
var postInteractionLog = exports.postInteractionLog = new _postInteractionLog.default();
var interactionQueue = [];
var segmentCache = new Map();
var CLEANUP_TIMEOUT = 60 * 1000;
var CLEANUP_TIMEOUT_AFTER_APDEX = 15 * 1000;
var segmentObservers = [];
var getActiveInteraction = exports.getActiveInteraction = (0, _selfMeasurements.withProfiling)(function getActiveInteraction() {
  var interactionId = (0, _interactionIdContext.getInteractionId)();
  if (!interactionId.current) {
    return;
  }
  return _constants.interactions.get(interactionId.current);
});
var isPerformanceTracingEnabled = (0, _selfMeasurements.withProfiling)(function isPerformanceTracingEnabled() {
  var _getConfig;
  return ((_getConfig = (0, _config.getConfig)()) === null || _getConfig === void 0 ? void 0 : _getConfig.enableAdditionalPerformanceMarks) || window.__REACT_UFO_ENABLE_PERF_TRACING || process.env.NODE_ENV !== 'production';
});
var labelStackToString = (0, _selfMeasurements.withProfiling)(function labelStackToString(labelStack, name) {
  var _stack$map;
  var stack = (0, _toConsumableArray2.default)(labelStack !== null && labelStack !== void 0 ? labelStack : []);
  if (name) {
    stack.push({
      name: name
    });
  }
  return (_stack$map = stack.map(function (l) {
    return l.name;
  })) === null || _stack$map === void 0 ? void 0 : _stack$map.join('/');
});
var labelStackToIdString = (0, _selfMeasurements.withProfiling)(function labelStackToIdString(labelStack) {
  var _labelStack$map;
  return labelStack === null || labelStack === void 0 || (_labelStack$map = labelStack.map(function (l) {
    return 'segmentId' in l ? "".concat(l.name, ":").concat(l.segmentId) : "".concat(l.name);
  })) === null || _labelStack$map === void 0 ? void 0 : _labelStack$map.join('/');
});
var addSegmentObserver = (0, _selfMeasurements.withProfiling)(function addSegmentObserver(observer) {
  segmentObservers.push(observer);
  var _iterator = _createForOfIteratorHelper(segmentCache.values()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var segmentInfo = _step.value;
      observer.onAdd(segmentInfo);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
});
var removeSegmentObserver = (0, _selfMeasurements.withProfiling)(function removeSegmentObserver(observer) {
  var index = segmentObservers.findIndex(function (obs) {
    return obs === observer;
  });
  if (index !== -1) {
    segmentObservers.splice(index, 1);
  }
});
var remove = exports.remove = (0, _selfMeasurements.withProfiling)(function remove(interactionId) {
  _constants.interactions.delete(interactionId);
});
var updatePageLoadInteractionName = exports.updatePageLoadInteractionName = (0, _selfMeasurements.withProfiling)(function updatePageLoadInteractionName(ufoName) {
  var routeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ufoName;
  var interaction = getActiveInteraction();
  if (!interaction || interaction.type !== 'page_load' && interaction.type !== 'transition') {
    return;
  }
  interaction.ufoName = ufoName;
  interaction.routeName = routeName;
});
var addMetadata = exports.addMetadata = (0, _selfMeasurements.withProfiling)(function addMetadata(interactionId, data) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    Object.keys(data).forEach(function (key) {
      interaction.metaData[key] = data[key];
    });
  }
});
var addCustomData = exports.addCustomData = (0, _selfMeasurements.withProfiling)(function addCustomData(interactionId, labelStack, data) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    Object.keys(data).forEach(function (i) {
      interaction.customData.push({
        labelStack: labelStack,
        data: (0, _defineProperty2.default)({}, i, data[i])
      });
    });
  }
});
var addCustomTiming = exports.addCustomTiming = (0, _selfMeasurements.withProfiling)(function addCustomTiming(interactionId, labelStack, data) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.customTimings.push({
      labelStack: labelStack,
      data: data
    });
    if (isPerformanceTracingEnabled()) {
      for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          timingData = _Object$entries$_i[1];
        var startTime = timingData.startTime,
          endTime = timingData.endTime;
        try {
          // for Firefox 102 and older
          performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, key), " [custom_timing]"), {
            start: startTime,
            end: endTime
          });
        } catch (e) {
          // do nothing
        }
      }
    }
  }
});
var addMark = exports.addMark = (0, _selfMeasurements.withProfiling)(function addMark(interactionId, type, name, labelStack) {
  var time = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : performance.now();
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.marks.push({
      type: type,
      name: name,
      labelStack: labelStack,
      time: time
    });
  }
  if (isPerformanceTracingEnabled()) {
    performance.mark("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, name), " [").concat(type, "]"), {
      startTime: time
    });
  }
});
var addMarkToAll = exports.addMarkToAll = (0, _selfMeasurements.withProfiling)(function addMarkToAll(type, name, labelStack) {
  var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : performance.now();
  _constants.interactions.forEach(function (interaction) {
    interaction.marks.push({
      type: type,
      name: name,
      labelStack: labelStack,
      time: time
    });
  });
  if (isPerformanceTracingEnabled()) {
    performance.mark("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, name), " [").concat(type, "]"), {
      startTime: time
    });
  }
});
var addSpan = exports.addSpan = (0, _selfMeasurements.withProfiling)(function addSpan(interactionId, type, name, labelStack, start) {
  var end = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : performance.now();
  var size = arguments.length > 6 ? arguments[6] : undefined;
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.spans.push({
      type: type,
      name: name,
      labelStack: labelStack,
      start: start,
      end: end,
      size: size
    });
    if (isPerformanceTracingEnabled()) {
      try {
        // for Firefox 102 and older
        performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, name), " [").concat(type, "]"), {
          start: start,
          end: end
        });
      } catch (e) {
        // do nothing
      }
    }
  }
});
var addSpanToAll = exports.addSpanToAll = (0, _selfMeasurements.withProfiling)(function addSpanToAll(type, name, labelStack, start) {
  var end = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : performance.now();
  var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  _constants.interactions.forEach(function (interaction) {
    interaction.spans.push({
      type: type,
      name: name,
      labelStack: labelStack,
      start: start,
      end: end,
      size: size
    });
  });
  if (isPerformanceTracingEnabled()) {
    try {
      // for Firefox 102 and older
      performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, name), " [").concat(type, "]"), {
        start: start,
        end: end
      });
    } catch (e) {
      // do nothing
    }
  }
});
var addPreload = exports.addPreload = (0, _selfMeasurements.withProfiling)(function addPreload(moduleId, timestamp) {
  addMarkToAll('bundle_preload', moduleId, null, timestamp);
});
var addLoad = exports.addLoad = (0, _selfMeasurements.withProfiling)(function addLoad(identifier, start, end) {
  addSpanToAll('bundle_load', identifier, null, start, end - start);
});
var moduleLoadingRequests = {};
var extractModuleName = exports.extractModuleName = (0, _selfMeasurements.withProfiling)(function extractModuleName(input) {
  var result = input !== null && input !== void 0 ? input : '';
  result = result.replace(/^\.\/src\/packages\//, '');
  result = result.replace(/^\.\/node_modules\//, '');
  result = result.replace(/(\/src)?\/(index|main)\.(tsx|ts|js|jsx)$/, '');
  return result;
});
var addHoldCriterion = (0, _selfMeasurements.withProfiling)(function addHoldCriterion(id, labelStack, name, startTime) {
  var _window$__CRITERION__;
  if (!((_window$__CRITERION__ = window.__CRITERION__) !== null && _window$__CRITERION__ !== void 0 && _window$__CRITERION__.addUFOHold)) {
    return;
  }
  window.__CRITERION__.addUFOHold(id, labelStackToString(labelStack), name, startTime);
});
var removeHoldCriterion = (0, _selfMeasurements.withProfiling)(function removeHoldCriterion(id) {
  var _window$__CRITERION__2;
  if (!((_window$__CRITERION__2 = window.__CRITERION__) !== null && _window$__CRITERION__2 !== void 0 && _window$__CRITERION__2.removeUFOHold)) {
    return;
  }
  window.__CRITERION__.removeUFOHold(id);
});
var addHold = exports.addHold = (0, _selfMeasurements.withProfiling)(function addHold(interactionId, labelStack, name, experimental) {
  var interaction = _constants.interactions.get(interactionId);
  var id = (0, _uuid.v4)();
  if (interaction != null) {
    var _getConfig2;
    var start = performance.now();
    var holdActive = {
      labelStack: labelStack,
      name: name,
      start: start
    };
    if ((_getConfig2 = (0, _config.getConfig)()) !== null && _getConfig2 !== void 0 && (_getConfig2 = _getConfig2.experimentalInteractionMetrics) !== null && _getConfig2 !== void 0 && _getConfig2.enabled && experimental) {
      interaction.holdExpActive.set(id, _objectSpread(_objectSpread({}, holdActive), {}, {
        start: start
      }));
    }
    if (!experimental) {
      interaction.holdActive.set(id, _objectSpread(_objectSpread({}, holdActive), {}, {
        start: start
      }));
    }
    addHoldCriterion(id, labelStack, name, start);
    return function () {
      var end = performance.now();
      if (isPerformanceTracingEnabled()) {
        try {
          // for Firefox 102 and older
          performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack, name), " [hold]"), {
            start: start,
            end: end
          });
        } catch (e) {
          // do nothing
        }
      }
      removeHoldCriterion(id);
      var currentInteraction = _constants.interactions.get(interactionId);
      var currentHold = interaction.holdActive.get(id);
      var expHold = interaction.holdExpActive.get(id);
      if (currentInteraction != null) {
        if (currentHold != null) {
          currentInteraction.holdInfo.push(_objectSpread(_objectSpread({}, currentHold), {}, {
            end: end
          }));
          interaction.holdActive.delete(id);
        }
        if (expHold != null) {
          currentInteraction.holdExpInfo.push(_objectSpread(_objectSpread({}, expHold), {}, {
            end: end
          }));
          interaction.holdExpActive.delete(id);
        }
      }
    };
  }
  return function () {};
});
var addHoldByID = exports.addHoldByID = (0, _selfMeasurements.withProfiling)(function addHoldByID(interactionId, labelStack, name, id, ignoreOnSubmit) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    var start = performance.now();
    interaction.holdActive.set(id, {
      labelStack: labelStack,
      name: name,
      start: start,
      ignoreOnSubmit: ignoreOnSubmit
    });
    addHoldCriterion(id, labelStack, name, start);
  }
  return function () {};
});
var removeHoldByID = exports.removeHoldByID = (0, _selfMeasurements.withProfiling)(function removeHoldByID(interactionId, id) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    var end = performance.now();
    var currentInteraction = _constants.interactions.get(interactionId);
    var currentHold = interaction.holdActive.get(id);
    if (currentInteraction != null && currentHold != null) {
      currentInteraction.holdInfo.push(_objectSpread(_objectSpread({}, currentHold), {}, {
        end: end
      }));
      interaction.holdActive.delete(id);
      removeHoldCriterion(id);
    }
  }
});
var getCurrentInteractionType = exports.getCurrentInteractionType = (0, _selfMeasurements.withProfiling)(function getCurrentInteractionType(interactionId) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction) {
    return interaction.type;
  }
  return null;
});
var ModuleLoadingProfiler = exports.ModuleLoadingProfiler = {
  onPreload: (0, _selfMeasurements.withProfiling)(function onPreload(moduleId, _priority) {
    addPreload(extractModuleName(moduleId), performance.now());
  }),
  onLoadStart: (0, _selfMeasurements.withProfiling)(function onLoadStart(info) {
    var timeoutId = setTimeout(function () {
      delete moduleLoadingRequests[info.identifier];
    }, 30000);
    var request = {
      start: performance.now(),
      timeoutId: timeoutId
    };
    moduleLoadingRequests[info.identifier] = request;
  }),
  onLoadComplete: (0, _selfMeasurements.withProfiling)(function onLoadComplete(info) {
    var request = moduleLoadingRequests[info.identifier];
    if (request) {
      clearTimeout(request.timeoutId);
      delete moduleLoadingRequests[info.identifier];
      addLoad(extractModuleName(info.identifier), request.start, performance.now());
    }
  }),
  placeholderFallBackMounted: (0, _selfMeasurements.withProfiling)(function placeholderFallBackMounted(id, moduleId) {
    var interactionId = (0, _interactionIdContext.getInteractionId)();
    var currentInteractionId = interactionId.current;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    addHoldByID(currentInteractionId, [], moduleId, id);
  }),
  placeholderFallBackUnmounted: (0, _selfMeasurements.withProfiling)(function placeholderFallBackUnmounted(id) {
    var interactionId = (0, _interactionIdContext.getInteractionId)();
    var currentInteractionId = interactionId.current;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    removeHoldByID(currentInteractionId, id);
  })
};
var addError = exports.addError = (0, _selfMeasurements.withProfiling)(function addError(interactionId, name, labelStack, errorType, errorMessage, errorStack, forcedError) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.errors.push({
      name: name,
      labelStack: labelStack,
      errorType: errorType,
      errorMessage: errorMessage,
      errorStack: errorStack,
      forcedError: forcedError
    });
  }
});
var addErrorToAll = exports.addErrorToAll = (0, _selfMeasurements.withProfiling)(function addErrorToAll(name, labelStack, errorType, errorMessage, errorStack) {
  _constants.interactions.forEach(function (interaction) {
    interaction.errors.push({
      name: name,
      labelStack: labelStack,
      errorType: errorType,
      errorMessage: errorMessage,
      errorStack: errorStack
    });
  });
});
var addProfilerTimings = exports.addProfilerTimings = (0, _selfMeasurements.withProfiling)(function addProfilerTimings(interactionId, labelStack, type, actualDuration, baseDuration, startTime, commitTime) {
  var _getConfig3;
  if (isPerformanceTracingEnabled()) {
    try {
      // for Firefox 102 and older
      performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack), " [react-profiler] ").concat(type), {
        start: startTime,
        duration: actualDuration
      });
    } catch (e) {
      // do nothing
    }
  }
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.reactProfilerTimings.push({
      labelStack: labelStack,
      type: type,
      actualDuration: actualDuration,
      baseDuration: baseDuration,
      startTime: startTime,
      commitTime: commitTime
    });
  } else if ((_getConfig3 = (0, _config.getConfig)()) !== null && _getConfig3 !== void 0 && (_getConfig3 = _getConfig3.postInteractionLog) !== null && _getConfig3 !== void 0 && _getConfig3.enabled) {
    postInteractionLog.addProfilerTimings(labelStack, type, actualDuration, baseDuration, startTime, commitTime);
  }
});
var pushToQueue = (0, _selfMeasurements.withProfiling)(function pushToQueue(id, data) {
  interactionQueue.push({
    id: id,
    data: data
  });
});
var handleInteraction = pushToQueue;
var callCleanUpCallbacks = (0, _selfMeasurements.withProfiling)(function callCleanUpCallbacks(interaction) {
  interaction.cleanupCallbacks.reverse().forEach(function (cleanUpCallback) {
    cleanUpCallback();
  });
});
var finishInteraction = (0, _selfMeasurements.withProfiling)(function finishInteraction(id, data) {
  var _getConfig4, _getConfig5;
  var endTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : performance.now();
  data.end = endTime;
  try {
    // for Firefox 102 and older
    performance.measure("\uD83D\uDEF8 [".concat(data.type, "] ").concat(data.ufoName, " [ttai]"), {
      start: data.start,
      end: data.end
    });
  } catch (e) {
    // do nothing
  }
  if (data.featureFlags) {
    data.featureFlags.during = Object.fromEntries(_featureFlagsAccessed.currentFeatureFlagsAccessed);
  }
  (0, _experienceTraceIdContext.clearActiveTrace)();
  callCleanUpCallbacks(data);
  if ((_getConfig4 = (0, _config.getConfig)()) !== null && _getConfig4 !== void 0 && (_getConfig4 = _getConfig4.vc) !== null && _getConfig4 !== void 0 && _getConfig4.stopVCAtInteractionFinish) {
    data.vc = (0, _vc.getVCObserver)().getVCRawData();
  }
  if (!((_getConfig5 = (0, _config.getConfig)()) !== null && _getConfig5 !== void 0 && (_getConfig5 = _getConfig5.experimentalInteractionMetrics) !== null && _getConfig5 !== void 0 && _getConfig5.enabled)) {
    remove(id);
  }
  PreviousInteractionLog.name = data.ufoName || 'unknown';
  PreviousInteractionLog.isAborted = data.abortReason != null;
  if (data.ufoName) {
    handleInteraction(id, data);
  }
  if (isPerformanceTracingEnabled()) {
    var profilerTimingMap = new Map();
    data.reactProfilerTimings.forEach(function (profilerTiming) {
      var labelStackId = labelStackToIdString(profilerTiming.labelStack);
      if (labelStackId) {
        var _profilerTimingMap$ge, _timing$start, _timing$end;
        var timing = (_profilerTimingMap$ge = profilerTimingMap.get(labelStackId)) !== null && _profilerTimingMap$ge !== void 0 ? _profilerTimingMap$ge : {
          labelStack: profilerTiming.labelStack
        };
        timing.start = profilerTiming.startTime < ((_timing$start = timing.start) !== null && _timing$start !== void 0 ? _timing$start : Number.MAX_SAFE_INTEGER) ? profilerTiming.startTime : timing.start;
        timing.end = profilerTiming.commitTime > ((_timing$end = timing.end) !== null && _timing$end !== void 0 ? _timing$end : Number.MIN_SAFE_INTEGER) ? profilerTiming.commitTime : timing.end;
        profilerTimingMap.set(labelStackId, timing);
      }
    });
    try {
      // for Firefox 102 and older
      var _iterator2 = _createForOfIteratorHelper(profilerTimingMap.entries()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
            _step2$value$ = _step2$value[1],
            labelStack = _step2$value$.labelStack,
            start = _step2$value$.start,
            end = _step2$value$.end;
          performance.measure("\uD83D\uDEF8 ".concat(labelStackToString(labelStack), " [segment_ttai]"), {
            start: start,
            end: end
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } catch (e) {
      // do nothing
    }
  }
  try {
    // dispatch a global window event to notify the measure is completed
    window.dispatchEvent(new CustomEvent('UFO_FINISH_INTERACTION', {
      detail: data
    }));
  } catch (error) {
    // do nothing
  }
});
var sinkInteractionHandler = exports.sinkInteractionHandler = (0, _selfMeasurements.withProfiling)(function sinkInteractionHandler(sinkFn) {
  if (handleInteraction === pushToQueue) {
    handleInteraction = sinkFn;
    interactionQueue.forEach(function (interaction) {
      sinkFn(interaction.id, interaction.data);
    });
    interactionQueue.length = 0;
  }
});
var sinkPostInteractionLogHandler = exports.sinkPostInteractionLogHandler = (0, _selfMeasurements.withProfiling)(function sinkPostInteractionLogHandler(sinkFn) {
  postInteractionLog.sinkHandler(sinkFn);
});

// a flag to prevent multiple submitting
var activeSubmitted = false;
var tryComplete = exports.tryComplete = (0, _selfMeasurements.withProfiling)(function tryComplete(interactionId, endTime) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    var noMoreActiveHolds = interaction.holdActive.size === 0;
    var noMoreExpHolds = interaction.holdExpActive.size === 0;
    var postInteraction = /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _getConfig6, _getConfig8;
        var _getConfig7, experimentalVC90, experimentalTTAI, _yield$getExperimenta, start, end;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!((_getConfig6 = (0, _config.getConfig)()) !== null && _getConfig6 !== void 0 && (_getConfig6 = _getConfig6.postInteractionLog) !== null && _getConfig6 !== void 0 && _getConfig6.enabled)) {
                _context.next = 17;
                break;
              }
              if (!((_getConfig7 = (0, _config.getConfig)()) !== null && _getConfig7 !== void 0 && (_getConfig7 = _getConfig7.experimentalInteractionMetrics) !== null && _getConfig7 !== void 0 && _getConfig7.enabled)) {
                _context.next = 16;
                break;
              }
              _context.next = 4;
              return (0, _createExperimentalInteractionMetricsPayload.getExperimentalVCMetrics)(interaction);
            case 4:
              _context.t1 = _yield$getExperimenta = _context.sent;
              _context.t0 = _context.t1 === null;
              if (_context.t0) {
                _context.next = 8;
                break;
              }
              _context.t0 = _yield$getExperimenta === void 0;
            case 8:
              if (!_context.t0) {
                _context.next = 12;
                break;
              }
              _context.t2 = void 0;
              _context.next = 13;
              break;
            case 12:
              _context.t2 = _yield$getExperimenta['metric:experimental:vc90'];
            case 13:
              experimentalVC90 = _context.t2;
              start = interaction.start, end = interaction.end;
              experimentalTTAI = !interaction.abortReason ? Math.round(end - start) : undefined;
            case 16:
              postInteractionLog.onInteractionComplete(_objectSpread(_objectSpread({}, interaction), {}, {
                experimentalTTAI: experimentalTTAI,
                experimentalVC90: experimentalVC90
              }));
            case 17:
              if ((_getConfig8 = (0, _config.getConfig)()) !== null && _getConfig8 !== void 0 && (_getConfig8 = _getConfig8.experimentalInteractionMetrics) !== null && _getConfig8 !== void 0 && _getConfig8.enabled) {
                remove(interactionId);
              }
              activeSubmitted = false;
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function postInteraction() {
        return _ref.apply(this, arguments);
      };
    }();
    if (noMoreActiveHolds) {
      if (!activeSubmitted) {
        finishInteraction(interactionId, interaction, endTime);
        activeSubmitted = true;
      }
      if (noMoreExpHolds) {
        var _getConfig9;
        if ((_getConfig9 = (0, _config.getConfig)()) !== null && _getConfig9 !== void 0 && (_getConfig9 = _getConfig9.experimentalInteractionMetrics) !== null && _getConfig9 !== void 0 && _getConfig9.enabled) {
          (0, _createExperimentalInteractionMetricsPayload.onExperimentalInteractionComplete)(interactionId, interaction, endTime);
        }
        postInteraction();
      }
    }
  }
});
var callCancelCallbacks = (0, _selfMeasurements.withProfiling)(function callCancelCallbacks(interaction) {
  interaction.cancelCallbacks.reverse().forEach(function (cancelCallback) {
    cancelCallback();
  });
});
var abort = exports.abort = (0, _selfMeasurements.withProfiling)(function abort(interactionId, abortReason) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    var _getConfig10;
    callCancelCallbacks(interaction);
    interaction.abortReason = abortReason;
    finishInteraction(interactionId, interaction);
    if ((_getConfig10 = (0, _config.getConfig)()) !== null && _getConfig10 !== void 0 && (_getConfig10 = _getConfig10.experimentalInteractionMetrics) !== null && _getConfig10 !== void 0 && _getConfig10.enabled) {
      (0, _createExperimentalInteractionMetricsPayload.onExperimentalInteractionComplete)(interactionId, interaction);
      remove(interactionId);
    }
  }
});
var abortByNewInteraction = exports.abortByNewInteraction = (0, _selfMeasurements.withProfiling)(function abortByNewInteraction(interactionId, interactionName) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    var _getConfig11;
    callCancelCallbacks(interaction);
    interaction.abortReason = 'new_interaction';
    interaction.abortedByInteractionName = interactionName;
    finishInteraction(interactionId, interaction);
    if ((_getConfig11 = (0, _config.getConfig)()) !== null && _getConfig11 !== void 0 && (_getConfig11 = _getConfig11.experimentalInteractionMetrics) !== null && _getConfig11 !== void 0 && _getConfig11.enabled) {
      (0, _createExperimentalInteractionMetricsPayload.onExperimentalInteractionComplete)(interactionId, interaction);
      remove(interactionId);
    }
  }
});
var abortAll = exports.abortAll = (0, _selfMeasurements.withProfiling)(function abortAll(abortReason, abortedByInteractionName) {
  _constants.interactions.forEach(function (interaction, interactionId) {
    var _getConfig12;
    var noMoreHolds = interaction.holdActive.size === 0;
    if (!noMoreHolds) {
      callCancelCallbacks(interaction);
      interaction.abortReason = abortReason;
      if (abortedByInteractionName != null) {
        interaction.abortedByInteractionName = abortedByInteractionName;
      }
    }
    finishInteraction(interactionId, interaction);
    if ((_getConfig12 = (0, _config.getConfig)()) !== null && _getConfig12 !== void 0 && (_getConfig12 = _getConfig12.experimentalInteractionMetrics) !== null && _getConfig12 !== void 0 && _getConfig12.enabled) {
      (0, _createExperimentalInteractionMetricsPayload.onExperimentalInteractionComplete)(interactionId, interaction);
      remove(interactionId);
    }
  });
});
var addOnCancelCallback = exports.addOnCancelCallback = (0, _selfMeasurements.withProfiling)(function addOnCancelCallback(id, cancelCallback) {
  var interaction = _constants.interactions.get(id);
  interaction === null || interaction === void 0 || interaction.cancelCallbacks.push(cancelCallback);
});
var addNewInteraction = exports.addNewInteraction = (0, _selfMeasurements.withProfiling)(function addNewInteraction(interactionId, ufoName, type, startTime, rate, labelStack, routeName) {
  var _getConfig13;
  var trace = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
  if ((_getConfig13 = (0, _config.getConfig)()) !== null && _getConfig13 !== void 0 && (_getConfig13 = _getConfig13.postInteractionLog) !== null && _getConfig13 !== void 0 && _getConfig13.enabled) {
    postInteractionLog.reset();
  }
  var previousTime = startTime;
  var timeoutTime = CLEANUP_TIMEOUT;
  var timerID = setTimeout(function () {
    abort(interactionId, 'timeout');
  }, CLEANUP_TIMEOUT);
  function changeTimeout(newTime) {
    // we compare if the time left is lower than the new time to no
    // extend the timeout beyond the initial waiting time
    var currentTime = performance.now();
    var timeLeft = timeoutTime - (currentTime - previousTime);
    if (timeLeft < newTime) {
      return;
    }
    clearTimeout(this.timerID);
    var newTimerID = setTimeout(function () {
      abort(interactionId, 'timeout');
    }, newTime);
    timeoutTime = newTime;
    previousTime = currentTime;
    this.timerID = newTimerID;
  }
  var addFeatureFlagsToInteraction = (0, _coinflip.default)((0, _config.getCapabilityRate)('feature_flag_access'));
  var metrics = {
    id: interactionId,
    start: startTime,
    end: 0,
    ufoName: ufoName,
    type: type,
    previousInteractionName: PreviousInteractionLog.name,
    isPreviousInteractionAborted: PreviousInteractionLog.isAborted === true,
    marks: [],
    customData: [],
    customTimings: [],
    spans: [],
    requestInfo: [],
    reactProfilerTimings: [],
    holdInfo: [],
    holdExpInfo: [],
    holdActive: new Map(),
    holdExpActive: new Map(),
    // measure when we execute this code
    // from this, we can measure the input delay -
    // how long the browser took to hand execution back to JS)
    measureStart: performance.now(),
    rate: rate,
    cancelCallbacks: [],
    metaData: {},
    errors: [],
    apdex: [],
    labelStack: labelStack,
    routeName: routeName !== null && routeName !== void 0 ? routeName : ufoName,
    featureFlags: addFeatureFlagsToInteraction ? {
      prior: Object.fromEntries(_featureFlagsAccessed.allFeatureFlagsAccessed),
      during: {}
    } : undefined,
    knownSegments: [],
    cleanupCallbacks: [],
    awaitReactProfilerCount: 0,
    redirects: [],
    timerID: timerID,
    changeTimeout: changeTimeout,
    trace: trace
  };
  if (addFeatureFlagsToInteraction) {
    _featureFlagsAccessed.currentFeatureFlagsAccessed.clear();
  }
  _constants.interactions.set(interactionId, metrics);
  var segmentObserver = {
    onAdd: function onAdd(segment) {
      metrics.knownSegments.push(segment);
    },
    onRemove: function onRemove() {}
  };
  addSegmentObserver(segmentObserver);
  metrics.cleanupCallbacks.push(function () {
    removeSegmentObserver(segmentObserver);
  });
  metrics.cleanupCallbacks.push(function () {
    clearTimeout(metrics.timerID);
  });
  var awaitBM3TTIList = (0, _config.getAwaitBM3TTIList)();
  if (awaitBM3TTIList.includes(ufoName)) {
    addHoldByID(interactionId, [], ufoName, ufoName, true);
  }
  if (type === 'transition') {
    var _getConfig14;
    (0, _vc.getVCObserver)().start({
      startTime: startTime
    });
    postInteractionLog.startVCObserver({
      startTime: startTime
    });
    if ((_getConfig14 = (0, _config.getConfig)()) !== null && _getConfig14 !== void 0 && (_getConfig14 = _getConfig14.experimentalInteractionMetrics) !== null && _getConfig14 !== void 0 && _getConfig14.enabled) {
      _createExperimentalInteractionMetricsPayload.experimentalVC.start({
        startTime: startTime
      });
    }
  }
});
var addBrowserMetricEvent = exports.addBrowserMetricEvent = (0, _selfMeasurements.withProfiling)(function addBrowserMetricEvent(event) {
  var interaction = getActiveInteraction();
  if (interaction) {
    var _event$config;
    interaction.legacyMetrics = interaction.legacyMetrics || [];
    interaction.legacyMetrics.push(event);
    if ((interaction.type === 'page_load' || interaction.type === 'transition') && ((_event$config = event.config) === null || _event$config === void 0 ? void 0 : _event$config.type) === 'PAGE_LOAD') {
      interaction.changeTimeout(CLEANUP_TIMEOUT_AFTER_APDEX);
      removeHoldByID(interaction.id, interaction.ufoName);
    }
  }
});
var addApdexToAll = exports.addApdexToAll = (0, _selfMeasurements.withProfiling)(function addApdexToAll(apdex) {
  _constants.interactions.forEach(function (interaction, key) {
    interaction.apdex.push(apdex);
    try {
      var _apdex$startTime;
      // for Firefox 102 and older
      performance.measure("\uD83D\uDEF8 ".concat(apdex.key, " [bm3_tti]"), {
        start: (_apdex$startTime = apdex.startTime) !== null && _apdex$startTime !== void 0 ? _apdex$startTime : interaction.start,
        end: apdex.stopTime
      });
    } catch (e) {
      // do nothing
    }
    if (interaction.type === 'page_load' || interaction.type === 'transition') {
      interaction.changeTimeout(CLEANUP_TIMEOUT_AFTER_APDEX);
      removeHoldByID(key, interaction.ufoName);
    }
  });
});
var addApdex = exports.addApdex = (0, _selfMeasurements.withProfiling)(function addApdex(interactionId, apdexInfo) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.apdex.push(apdexInfo);
    try {
      var _apdexInfo$startTime;
      // for Firefox 102 and older
      performance.measure("\uD83D\uDEF8 ".concat(apdexInfo.key, " [bm3_tti]"), {
        start: (_apdexInfo$startTime = apdexInfo.startTime) !== null && _apdexInfo$startTime !== void 0 ? _apdexInfo$startTime : interaction.start,
        end: apdexInfo.stopTime
      });
    } catch (e) {
      // do nothing
    }
    if (interaction.type === 'page_load' || interaction.type === 'transition') {
      interaction.changeTimeout(CLEANUP_TIMEOUT_AFTER_APDEX);
      removeHoldByID(interactionId, interaction.ufoName);
    }
  }
});
var addRequestInfo = exports.addRequestInfo = (0, _selfMeasurements.withProfiling)(function addRequestInfo(interactionId, labelStack, requestInfo) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.requestInfo.push(_objectSpread({
      labelStack: labelStack
    }, requestInfo));
  }
});
var isSegmentLabel = (0, _selfMeasurements.withProfiling)(function isSegmentLabel(obj) {
  return obj && typeof obj.name === 'string' && typeof obj.segmentId === 'string';
});
var getSegmentCacheKey = (0, _selfMeasurements.withProfiling)(function getSegmentCacheKey(labelStack) {
  return labelStack.map(function (l) {
    if (isSegmentLabel(l)) {
      return "".concat(l.name, "_").concat(l.segmentId);
    }
    return l.name;
  }).join('|');
});
var addSegment = exports.addSegment = (0, _selfMeasurements.withProfiling)(function addSegment(labelStack) {
  var key = getSegmentCacheKey(labelStack);
  var existingSegment = segmentCache.get(key);
  if (!existingSegment) {
    var segmentInfo = {
      labelStack: labelStack
    };
    segmentCache.set(key, segmentInfo);
    segmentObservers.forEach(function (observer) {
      observer.onAdd(segmentInfo);
    });
  }
});
var removeSegment = exports.removeSegment = (0, _selfMeasurements.withProfiling)(function removeSegment(labelStack) {
  var key = getSegmentCacheKey(labelStack);
  var segmentInfo = segmentCache.get(key);
  if (segmentInfo) {
    segmentCache.delete(JSON.stringify(labelStack));
    segmentObservers.forEach(function (observer) {
      observer.onRemove(segmentInfo);
    });
  }
});
var addRedirect = exports.addRedirect = (0, _selfMeasurements.withProfiling)(function addRedirect(interactionId, fromUfoName, nextUfoName, nextRouteName, time) {
  var interaction = _constants.interactions.get(interactionId);
  if (interaction != null) {
    interaction.ufoName = nextUfoName;
    interaction.routeName = nextRouteName;
    interaction.redirects.push({
      fromInteractionName: fromUfoName,
      time: time
    });
    if (isPerformanceTracingEnabled()) {
      var prevRedirect = interaction.redirects.at(-2);
      try {
        var _prevRedirect$time;
        // for Firefox 102 and older
        performance.measure("\uD83D\uDEF8 ".concat(nextUfoName, " [redirect]"), {
          start: (_prevRedirect$time = prevRedirect === null || prevRedirect === void 0 ? void 0 : prevRedirect.time) !== null && _prevRedirect$time !== void 0 ? _prevRedirect$time : interaction.start,
          end: time
        });
      } catch (e) {
        // do nothing
      }
    }
  }
});
var interactionSpans = exports.interactionSpans = [];
var defaultLabelStack = [{
  name: 'custom'
}];
var addCustomSpans = exports.addCustomSpans = (0, _selfMeasurements.withProfiling)(function addCustomSpans(name, start) {
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : performance.now();
  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var labelStack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultLabelStack;
  var customSpan = {
    type: 'custom',
    name: name,
    start: start,
    end: end,
    labelStack: labelStack,
    size: size
  };
  interactionSpans.push(customSpan);
});