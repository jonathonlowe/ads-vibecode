"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UFOLoadHold;
var _react = _interopRequireWildcard(require("react"));
var _interactionContext = _interopRequireDefault(require("../interaction-context"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var useLayoutEffectSAFE = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;

/**
 * Render this whenever you're loading.
 *
 * Wrap loading elements
 * ```js
 * if (isLoading){
 *   return (
 *     <UFOLoadHold name="card">
 *       <Skeleton />
 *     </UFOLoadHold>
 *   )
 * }
 * ```
 *
 * Or render it as a sibling
 * ```
 * if (isLoading){
 *   return (
 *     <>
 *       <Skeleton />
 *       <UFOLoadHold name="card" />
 *   )
 * }
 * ```
 *
 * Or wrap your content conditionally
 * ```
 * return (
 *   <UFOLoadHold name="card" hold={isLoading}>
 *     <Card />
 *   </UFOLoadHold>
 * )
 * ```
 *
 * Or render as a sibling conditionally
 * ```
 * return (
 *   <>
 *     <Card />
 *     <UFOLoadHold name="card" hold={isLoading} />
 *   </>
 * )
 * ```
 */

function UFOLoadHold(_ref) {
  var children = _ref.children,
    name = _ref.name,
    _ref$hold = _ref.hold,
    hold = _ref$hold === void 0 ? true : _ref$hold,
    _ref$experimental = _ref.experimental,
    experimental = _ref$experimental === void 0 ? false : _ref$experimental;
  // react-18: useId instead
  var context = (0, _react.useContext)(_interactionContext.default);
  useLayoutEffectSAFE(function () {
    if (hold && context != null) {
      if (experimental && context.holdExperimental) {
        return context.holdExperimental(name);
      }
      return context.hold(name);
    }
  }, [hold, context, name]);

  // react-18: can return children directly
  return children != null ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children) : null;
}