"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinkErrorHandler = exports.getGlobalErrorCount = exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _bindEventListener = require("bind-event-listener");
var _selfMeasurements = require("../self-measurements");
var shouldInitilizeGlobalErrorHandler = true;
var globalCount = 0;
var errors = [];
var push = (0, _selfMeasurements.withProfiling)(function push(name, labelStack, errorType, errorMessage, errorStack) {
  errors.push({
    name: name,
    labelStack: labelStack,
    errorType: errorType,
    errorMessage: errorMessage,
    errorStack: errorStack
  });
});
var sinkErrorHandler = exports.sinkErrorHandler = (0, _selfMeasurements.withProfiling)(function sinkErrorHandler(sinkFunc) {
  push = (0, _selfMeasurements.withProfiling)(sinkFunc);
  errors.forEach(function (e) {
    sinkFunc(e.name, e.labelStack, e.errorType, e.errorMessage, e.errorStack);
  });
  errors.length = 0;
});
var getGlobalErrorCount = exports.getGlobalErrorCount = (0, _selfMeasurements.withProfiling)(function getGlobalErrorCount() {
  return globalCount;
});
var handleError = (0, _selfMeasurements.withProfiling)(function handleError(e) {
  var _e$error;
  globalCount++;
  if (((_e$error = e.error) === null || _e$error === void 0 ? void 0 : _e$error.UFOhasCaught) === undefined) {
    try {
      if (e.error instanceof Error) {
        push('GlobalErrorHandler', null, e.error.name, e.error.message, e.error.stack);
      } else if (e.error) {
        var hint = JSON.stringify(e.error).slice(0, 50);
        push('GlobalErrorHandler', null, '', "Non error object thrown: ".concat(hint), undefined);
      } else if (e.message !== undefined) {
        var _hint = e.message.slice(0, 50);
        push('GlobalErrorHandler', null, '', "Non error object thrown: ".concat(_hint), undefined);
      }
      if (e.error && (0, _typeof2.default)(e.error) === 'object') {
        e.error.UFOhasCaught = true;
      }
      // eslint-disable-next-line no-empty
    } catch (e) {}
  }
});
var handlePromiseRejection = (0, _selfMeasurements.withProfiling)(function handlePromiseRejection(e) {
  globalCount++;
  if (e.reason instanceof Error) {
    push('GlobalErrorHandler', null, e.reason.name, e.reason.message, e.reason.stack);
  } else if (e.reason) {
    try {
      var hint = JSON.stringify(e.reason).slice(0, 50);
      push('GlobalErrorHandler', null, '', "Non error object thrown: ".concat(hint), undefined);
      // eslint-disable-next-line no-empty
    } catch (e) {}
  }
});
var setupUFOGlobalErrorHandler = (0, _selfMeasurements.withProfiling)(function setupUFOGlobalErrorHandler() {
  if (shouldInitilizeGlobalErrorHandler) {
    (0, _bindEventListener.bind)(window, {
      type: 'error',
      listener: function listener(e) {
        return handleError(e);
      }
    });
    (0, _bindEventListener.bind)(window, {
      type: 'unhandledrejection',
      listener: handlePromiseRejection
    });
    shouldInitilizeGlobalErrorHandler = false;
  }
});
var _default = exports.default = setupUFOGlobalErrorHandler;