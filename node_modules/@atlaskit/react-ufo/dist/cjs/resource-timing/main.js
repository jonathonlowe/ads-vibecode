"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getResourceTimings = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _config = require("../config");
var _roundNumber = require("../round-number");
var _selfMeasurements = require("../self-measurements");
var _config2 = require("./common/utils/config");
var _resourceTimingBuffer = require("./common/utils/resource-timing-buffer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var alwaysCacheableTypes = ['script', 'link'];
var resourceTypes = ['fetch', 'xmlhttprequest'];
var CACHE_NETWORK = 'network';
var CACHE_MEMORY = 'memory';
var CACHE_DISK = 'disk';
var isCacheableType = (0, _selfMeasurements.withProfiling)(function isCacheableType(url, type) {
  if (alwaysCacheableTypes.includes(type)) {
    return true;
  }

  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  if (type === 'other' && url.includes('.js') && (0, _platformFeatureFlags.fg)('ufo_support_other_resource_type_js')) {
    return true;
  }
  return false;
});

// eslint-disable-next-line @typescript-eslint/no-invalid-void-type
var calculateTransferType = (0, _selfMeasurements.withProfiling)(function calculateTransferType(name, type, duration, size) {
  if (!isCacheableType(name, type)) {
    return CACHE_NETWORK;
  }
  if ((size === undefined || size === 0) && duration === 0) {
    return CACHE_MEMORY;
  }
  if (size === 0 && duration > 0) {
    return CACHE_DISK;
  }
  if (size === undefined) {
    return null;
  }
  return CACHE_NETWORK;
});
var getWindowObject = (0, _selfMeasurements.withProfiling)(function getWindowObject() {
  return typeof window !== 'undefined' && !!window ? window : undefined;
});
var hasAccessToResourceSize = (0, _selfMeasurements.withProfiling)(function hasAccessToResourceSize(url, type, entry, hasTimingHeaders) {
  return !isCacheableType(url, type) || url.includes('localhost') || !!getWindowObject() && url.includes(window.location.hostname) || hasTimingHeaders(url, entry);
});
var getReportedInitiatorTypes = (0, _selfMeasurements.withProfiling)(function getReportedInitiatorTypes(xhrEnabled) {
  var ufoConfig = (0, _config.getConfig)();
  if (!(ufoConfig !== null && ufoConfig !== void 0 && ufoConfig.allowedResources)) {
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    if ((0, _platformFeatureFlags.fg)('ufo_support_other_resource_type_js')) {
      if (xhrEnabled) {
        return ['script', 'link', 'fetch', 'other', 'xmlhttprequest'];
      }
      return ['script', 'link', 'fetch', 'other'];
    } else {
      if (xhrEnabled) {
        return ['script', 'link', 'fetch', 'xmlhttprequest'];
      }
      return ['script', 'link', 'fetch'];
    }
  }
  return ufoConfig.allowedResources;
});
var evaluateAccessToResourceTimings = (0, _selfMeasurements.withProfiling)(function evaluateAccessToResourceTimings(url, entry) {
  return !(entry.responseStart === 0 && entry.startTime > entry.responseStart);
});

// eslint-disable-next-line @typescript-eslint/no-invalid-void-type
var getSizeObject = (0, _selfMeasurements.withProfiling)(function getSizeObject(size) {
  return size !== undefined ? {
    size: size
  } : null;
});
var getNetworkData = (0, _selfMeasurements.withProfiling)(function getNetworkData(item, eventStart) {
  var hasTimingHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : evaluateAccessToResourceTimings;
  var name = item.name,
    duration = item.duration,
    transferSize = item.transferSize,
    initiatorType = item.initiatorType,
    responseStart = item.responseStart,
    requestStart = item.requestStart,
    serverTime = item.serverTime,
    networkTime = item.networkTime,
    encodedSize = item.encodedSize,
    decodedSize = item.decodedSize;
  var ttfb = (0, _roundNumber.roundEpsilon)(responseStart - eventStart);
  var requestStartRelative = (0, _roundNumber.roundEpsilon)(requestStart - eventStart);
  if (!hasAccessToResourceSize(name, initiatorType, item, hasTimingHeaders)) {
    return {};
  }
  if (isCacheableType(name, initiatorType)) {
    var transferType = calculateTransferType(name, initiatorType, duration, transferSize);
    return _objectSpread({
      ttfb: ttfb,
      transferType: transferType,
      serverTime: serverTime,
      networkTime: networkTime,
      encodedSize: encodedSize,
      decodedSize: decodedSize
    }, getSizeObject(transferSize));
  }
  return _objectSpread({
    ttfb: ttfb,
    serverTime: serverTime,
    networkTime: networkTime,
    requestStart: (0, _platformFeatureFlags.fg)('ufo_return_relative_request_start') ? requestStartRelative : requestStart
  }, getSizeObject(transferSize));
});
var getResourceTimings = exports.getResourceTimings = (0, _selfMeasurements.withProfiling)(function getResourceTimings(interactionStart, interactionEnd) {
  var resourceTiming = {};
  if (interactionStart === null) {
    return resourceTiming;
  }
  var resources = (0, _resourceTimingBuffer.filterResourceTimings)(interactionStart, interactionEnd);
  if (!(resources !== null && resources !== void 0 && resources.length)) {
    return resourceTiming;
  }
  var _getConfig = (0, _config2.getConfig)(),
    xhrFilter = _getConfig.xhrFilter,
    sanitiseEndpoints = _getConfig.sanitiseEndpoints,
    mapResources = _getConfig.mapResources,
    hasTimingHeaders = _getConfig.hasTimingHeaders;
  var reportedInitiatorTypes = getReportedInitiatorTypes(!!xhrFilter);
  resources.forEach(function (item) {
    if (!reportedInitiatorTypes.includes(item.initiatorType)) {
      return;
    }
    var name = item.name,
      startTime = item.startTime,
      duration = item.duration,
      workerStart = item.workerStart,
      fetchStart = item.fetchStart,
      initiatorType = item.initiatorType;
    if (!name) {
      return;
    }
    if (initiatorType === 'xmlhttprequest' && (xhrFilter === undefined || xhrFilter(name) === false)) {
      return;
    }
    if (initiatorType === 'other' && !name.includes('.js') &&
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    (0, _platformFeatureFlags.fg)('ufo_support_other_resource_type_js')) {
      return;
    }
    var url = resourceTypes.includes(initiatorType) ? sanitiseEndpoints(name) : mapResources(name);
    if (!url) {
      return;
    }
    if (resourceTiming[url]) {
      resourceTiming[url].count = (resourceTiming[url].count || 1) + 1;
      return;
    }
    resourceTiming[url] = _objectSpread({
      startTime: (0, _roundNumber.roundEpsilon)(startTime - interactionStart),
      duration: (0, _roundNumber.roundEpsilon)(duration),
      workerStart: Math.max((0, _roundNumber.roundEpsilon)(workerStart - interactionStart), 0),
      fetchStart: Math.max((0, _roundNumber.roundEpsilon)(fetchStart - interactionStart), 0),
      type: initiatorType
    }, getNetworkData(item, interactionStart, hasTimingHeaders));
  });
  return resourceTiming;
});