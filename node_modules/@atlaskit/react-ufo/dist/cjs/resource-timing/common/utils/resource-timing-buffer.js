"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resourceTimingBuffer = exports.filterResourceTimings = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _roundNumber = require("../../../round-number");
var _selfMeasurements = require("../../../self-measurements");
var getPerformanceObject = function getPerformanceObject() {
  var _window;
  return ((_window = window) !== null && _window !== void 0 ? _window : {}).performance;
};
var getPerformanceObserverObject = function getPerformanceObserverObject() {
  var _window2;
  return ((_window2 = window) !== null && _window2 !== void 0 ? _window2 : {}).PerformanceObserver;
};
var resourceTimingBuffer = exports.resourceTimingBuffer = {
  timings: [],
  maxSize: 1000,
  observer: null,
  transformResource: (0, _selfMeasurements.withProfiling)(function transformResource(entry) {
    var _entry$serverTiming, _entry$serverTiming2;
    var duration = (0, _roundNumber.roundEpsilon)(entry.duration);

    // prioritising atl-edge
    var totalBackendTimeEntry = ((_entry$serverTiming = entry.serverTiming) === null || _entry$serverTiming === void 0 ? void 0 : _entry$serverTiming.find(function (timing) {
      return timing.name === 'atl-edge';
    })) || ((_entry$serverTiming2 = entry.serverTiming) === null || _entry$serverTiming2 === void 0 ? void 0 : _entry$serverTiming2.find(
    // timing name should come from per-product config in the future
    function (timing) {
      return timing.name === 'total' || timing.name === 'filter-request-papi';
    }));
    var serverTime = totalBackendTimeEntry ? (0, _roundNumber.roundEpsilon)(totalBackendTimeEntry.duration) : undefined;
    var networkTime = serverTime ? duration - serverTime : undefined;
    return {
      name: entry.name,
      initiatorType: entry.initiatorType,
      transferSize: entry.transferSize,
      startTime: (0, _roundNumber.roundEpsilon)(entry.startTime),
      duration: (0, _roundNumber.roundEpsilon)(entry.duration),
      fetchStart: (0, _roundNumber.roundEpsilon)(entry.fetchStart || 0),
      workerStart: (0, _roundNumber.roundEpsilon)(entry.workerStart || 0),
      responseStart: (0, _roundNumber.roundEpsilon)(entry.responseStart || 0),
      requestStart: (0, _roundNumber.roundEpsilon)(entry.requestStart || 0),
      serverTime: serverTime,
      networkTime: networkTime,
      encodedSize: (0, _roundNumber.roundEpsilon)(entry.encodedBodySize),
      decodedSize: (0, _roundNumber.roundEpsilon)(entry.decodedBodySize)
    };
  }),
  start: (0, _selfMeasurements.withProfiling)(function start() {
    var _performance$getEntri;
    var performance = getPerformanceObject();
    var PerformanceObserver = getPerformanceObserverObject();
    if (!PerformanceObserver || !performance || typeof PerformanceObserver === 'undefined') {
      return;
    }
    if (resourceTimingBuffer.observer) {
      return;
    }
    var resources = (_performance$getEntri = performance.getEntriesByType) === null || _performance$getEntri === void 0 ? void 0 : _performance$getEntri.call(performance, 'resource');
    if (resources) {
      resourceTimingBuffer.timings = resources.map(function (resource) {
        return resourceTimingBuffer.transformResource(resource);
      });
    }
    resourceTimingBuffer.observer = new PerformanceObserver(resourceTimingBuffer.addTimings);
    resourceTimingBuffer.observer.observe({
      entryTypes: ['resource']
    });
  }),
  stop: (0, _selfMeasurements.withProfiling)(function stop() {
    if (resourceTimingBuffer.observer) {
      resourceTimingBuffer.observer.disconnect();
      resourceTimingBuffer.observer = null;
    }
    resourceTimingBuffer.timings = [];
  }),
  addTimings: (0, _selfMeasurements.withProfiling)(function addTimings(list) {
    var _resourceTimingBuffer;
    var entries = list.getEntries().map(function (entry) {
      return resourceTimingBuffer.transformResource(entry);
    });
    var overflow = resourceTimingBuffer.timings.length + entries.length;
    if (overflow > resourceTimingBuffer.maxSize) {
      var fieldsToRemove = overflow - resourceTimingBuffer.maxSize;
      resourceTimingBuffer.timings.splice(0, fieldsToRemove);
    }
    (_resourceTimingBuffer = resourceTimingBuffer.timings).push.apply(_resourceTimingBuffer, (0, _toConsumableArray2.default)(entries));
  })
};
var isValidTiming = (0, _selfMeasurements.withProfiling)(function isValidTiming(timing, startTime, endTime) {
  return timing.startTime >= startTime && timing.startTime + timing.duration <= endTime;
});
var filterResourceTimings = exports.filterResourceTimings = (0, _selfMeasurements.withProfiling)(function filterResourceTimings(startTime, endTime) {
  var performance = getPerformanceObject();
  var PerformanceObserver = getPerformanceObserverObject();
  if (!PerformanceObserver || !resourceTimingBuffer.observer) {
    var resources = performance === null || performance === void 0 ? void 0 : performance.getEntriesByType('resource');
    if (resources) {
      return resources.filter(function (timing) {
        return isValidTiming(timing, startTime, endTime);
      });
    }
    return null;
  }
  return resourceTimingBuffer.timings.filter(function (timing) {
    return isValidTiming(timing, startTime, endTime);
  });
});