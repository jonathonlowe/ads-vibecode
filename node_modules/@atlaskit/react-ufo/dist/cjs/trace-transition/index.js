"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useUFOTransitionCompleter = useUFOTransitionCompleter;
var _react = require("react");
var _uuid = require("uuid");
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _config = require("../config");
var _experienceTraceIdContext = require("../experience-trace-id-context");
var _interactionIdContext = _interopRequireWildcard(require("../interaction-id-context"));
var _interactionMetrics = require("../interaction-metrics");
var _routeNameContext = _interopRequireDefault(require("../route-name-context"));
var _selfMeasurements = require("../self-measurements");
var _setInteractionActiveTrace = require("./utils/set-interaction-active-trace");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var traceUFOTransition = (0, _selfMeasurements.withProfiling)(function traceUFOTransition(ufoName) {
  var routeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ufoName;
  var pressInteractionsList = (0, _config.getDoNotAbortActivePressInteractionOnTransition)();
  var interaction = (0, _interactionMetrics.getActiveInteraction)();
  if (pressInteractionsList && interaction) {
    if (pressInteractionsList.includes(interaction.ufoName)) {
      return;
    }
  }
  (0, _interactionMetrics.abortAll)('transition', ufoName !== null && ufoName !== void 0 ? ufoName : undefined);
  if (ufoName) {
    _routeNameContext.default.current = ufoName;
    var rate = (0, _config.getInteractionRate)(ufoName, 'transition');
    if ((0, _coinflip.default)(rate)) {
      var newId = (0, _uuid.v4)();
      (0, _setInteractionActiveTrace.setInteractionActiveTrace)(newId);
      _interactionIdContext.DefaultInteractionID.current = newId;
      (0, _interactionMetrics.addNewInteraction)(newId, ufoName, 'transition', performance.now(), rate, null, routeName, (0, _experienceTraceIdContext.getActiveTrace)());
    }
  }
});
function useUFOTransitionCompleter() {
  var interactionId = (0, _react.useContext)(_interactionIdContext.default);
  var capturedInteractionId = interactionId.current;
  (0, _react.useEffect)(function () {
    // If we have a current interaction set...
    if (capturedInteractionId != null) {
      var cancel = requestAnimationFrame(function () {
        cancel = requestAnimationFrame(function () {
          if (capturedInteractionId === interactionId.current) {
            (0, _interactionMetrics.tryComplete)(capturedInteractionId);
          }
        });
      });
      (0, _interactionMetrics.addOnCancelCallback)(capturedInteractionId, function () {
        cancelAnimationFrame(cancel);
      });
    }
  }, [capturedInteractionId, interactionId]);
}
var _default = exports.default = traceUFOTransition;