"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazySuspense = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var isNodeEnvironment = function isNodeEnvironment() {
  return typeof window === 'undefined' || window.name === 'nodejs';
};
var LazySuspenseContext = /*#__PURE__*/(0, _react.createContext)({
  fallback: /*#__PURE__*/_react.default.createElement(_react.Fragment, null),
  setFallback: function setFallback() {
    // eslint-disable-next-line no-console
    console.warn('Missing <LooselySuspense /> boundary');
  },
  name: ''
});
var DynamicFallback = function DynamicFallback(_ref) {
  var children = _ref.children,
    outsideSuspense = _ref.outsideSuspense;
  var _React$useContext = _react.default.useContext(LazySuspenseContext),
    fallback = _React$useContext.fallback,
    setFallback = _React$useContext.setFallback;
  (0, _react.useLayoutEffect)(function () {
    return function () {
      if (!outsideSuspense) {
        setFallback(null);
      }
    };
  }, [outsideSuspense, setFallback]);
  return children(outsideSuspense ? null : fallback);
};
DynamicFallback.displayName = 'DynamicFallback';
var LazySuspense = exports.LazySuspense = function LazySuspense(_ref2) {
  var fallback = _ref2.fallback,
    children = _ref2.children,
    name = _ref2.name;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hydrationFallback = _useState2[0],
    setHydrationFallback = _useState2[1];
  var mountedRef = (0, _react.useRef)(false);
  (0, _react.useLayoutEffect)(function () {
    mountedRef.current = true;
    return function () {
      mountedRef.current = false;
    };
  }, []);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      fallback: fallback,
      setFallback: function setFallback(newFallback) {
        if (hydrationFallback === newFallback) {
          return;
        }
        setHydrationFallback(newFallback);
      },
      name: name
    };
  }, [fallback, hydrationFallback, name]);
  var renderFallback = function renderFallback(outsideSuspense) {
    return /*#__PURE__*/_react.default.createElement(DynamicFallback, {
      outsideSuspense: outsideSuspense
    }, function (resolvedFallback) {
      return outsideSuspense && hydrationFallback ? hydrationFallback : resolvedFallback;
    });
  };
  return /*#__PURE__*/_react.default.createElement(LazySuspenseContext.Provider, {
    value: contextValue
  }, isNodeEnvironment() ? children : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: renderFallback(false)
  }, children), (!mountedRef.current || hydrationFallback) && renderFallback(true)));
};
LazySuspense.displayName = 'LazySuspense';