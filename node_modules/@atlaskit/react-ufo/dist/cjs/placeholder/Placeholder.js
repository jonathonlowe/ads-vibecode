"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Placeholder;
var _react = _interopRequireWildcard(require("react"));
var _loadHold = _interopRequireDefault(require("../load-hold"));
var _looselyLazy = require("./loosely-lazy");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Provides a placeholder for lazily loaded content, improving perceived performance.
 *
 * Named placeholders are especially useful for analyzing page load breakdowns
 * in performance monitoring tools like Performance Portal.
 */
function Placeholder(_ref) {
  var name = _ref.name,
    children = _ref.children,
    _ref$fallback = _ref.fallback,
    fallback = _ref$fallback === void 0 ? null : _ref$fallback;
  var waitContext = (0, _react.useContext)(_looselyLazy.WaitContext);
  var shouldHold = !waitContext || !!waitContext.currentValue();
  return /*#__PURE__*/_react.default.createElement(_looselyLazy.LazySuspense, {
    fallback: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, fallback, /*#__PURE__*/_react.default.createElement(_loadHold.default, {
      name: name,
      hold: shouldHold
    })),
    name: name
  }, children);
}