"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTimings = exports.addTimingFromPerformanceMark = void 0;
var _selfMeasurements = require("../self-measurements");
var timings = [];
var addTimingFromPerformanceMark = exports.addTimingFromPerformanceMark = (0, _selfMeasurements.withProfiling)(function addTimingFromPerformanceMark(name, startMark, stopMark) {
  var cleanStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var cleanStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  timings.push({
    name: name,
    startMark: startMark,
    stopMark: stopMark,
    cleanStart: cleanStart,
    cleanStop: cleanStop
  });
});
var getTimings = exports.getTimings = (0, _selfMeasurements.withProfiling)(function getTimings() {
  var reportedTimingsObj = {};
  timings.forEach(function (_ref) {
    var name = _ref.name,
      startMark = _ref.startMark,
      stopMark = _ref.stopMark,
      cleanStart = _ref.cleanStart,
      cleanStop = _ref.cleanStop;
    var startEntryList = performance.getEntriesByName(startMark);
    var stopEntryList = performance.getEntriesByName(stopMark);
    if ((startEntryList === null || startEntryList === void 0 ? void 0 : startEntryList.length) > 0 && (stopEntryList === null || stopEntryList === void 0 ? void 0 : stopEntryList.length) > 0) {
      var startEntry = startEntryList[startEntryList.length - 1];
      var stopEntry = stopEntryList[stopEntryList.length - 1];
      var startTime = startEntry.startTime;
      var duration = stopEntry.startTime - startTime;
      var timing = {
        startTime: Math.round(startTime),
        duration: Math.round(duration)
      };
      reportedTimingsObj[name] = timing;
    }
    if (cleanStart) {
      performance.clearMarks(startMark);
    }
    if (cleanStop) {
      performance.clearMarks(stopMark);
    }
  });
  return reportedTimingsObj;
});