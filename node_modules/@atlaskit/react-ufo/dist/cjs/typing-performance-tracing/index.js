"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useUFOTypingPerformanceTracing;
var _react = require("react");
var _scheduler = require("scheduler");
var _uuid = require("uuid");
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _config = require("../config");
var _interactionMetrics = require("../interaction-metrics");
var getTypingMetadata = function getTypingMetadata(times, computeStartTime, typingPerformanceTracingMethod) {
  var min = 0;
  var max = 0;
  var avg = 0;
  var index = 0;
  var below50count = 0;
  times.forEach(function (time) {
    if (time !== 0) {
      avg = (avg * index + time) / ++index;
      if (time > max) {
        max = time;
      }
      if (min === 0 || time < min) {
        min = time;
      }
      if (time < 50) {
        below50count++;
      }
    }
  });
  return {
    typing: {
      min: min,
      max: max,
      avg: avg,
      count: index,
      below50count: below50count,
      compute: performance.now() - computeStartTime,
      typeTracingMethod: typingPerformanceTracingMethod
    }
  };
};
function typingPerformanceTracingTimeout(element, name, rate) {
  var tsubmit;
  var times = [];
  var isInteractionInitialised = false;
  var id;
  var start = function start() {
    id = (0, _uuid.v4)();
    (0, _interactionMetrics.addNewInteraction)(id, name, 'typing', performance.now(), rate, null, null);
    isInteractionInitialised = true;
  };
  var end = function end() {
    isInteractionInitialised = false;
    var timesCopy = times;
    times = [];
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      var computeStartTime = performance.now();
      var data = getTypingMetadata(timesCopy, computeStartTime, 'timeout');
      (0, _interactionMetrics.addMetadata)(id, data);
      (0, _interactionMetrics.tryComplete)(id);
    });
  };
  var onKeyPressHandler = function onKeyPressHandler(event) {
    if (!isInteractionInitialised) {
      start();
    }
    var startTime = event.timeStamp;
    setTimeout(function () {
      var endTime = performance.now();
      var time = endTime - startTime;
      times.push(time);
      clearTimeout(tsubmit);
      tsubmit = setTimeout(end, 2000); // debounce
    }, 0);
  };

  // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
  element.addEventListener('keypress', onKeyPressHandler);
  return function () {
    // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
    element.removeEventListener('keypress', onKeyPressHandler);
  };
}
function typingPerformanceTracingTimeoutNoAlloc(element, name, rate) {
  var tsubmit;
  var isInteractionInitialised = false;
  var min = 0;
  var max = 0;
  var below50count = 0;
  var avg = 0;
  var count = 0;
  var id;
  var resetStats = function resetStats() {
    min = 0;
    max = 0;
    below50count = 0;
    avg = 0;
    count = 0;
  };
  var start = function start() {
    id = (0, _uuid.v4)();
    (0, _interactionMetrics.addNewInteraction)(id, name, 'typing', performance.now(), rate, null, null);
    isInteractionInitialised = true;
  };
  var end = function end() {
    isInteractionInitialised = false;
    var typingMetaData = {
      typing: {
        min: min,
        max: max,
        avg: avg,
        count: count,
        below50count: below50count,
        typeTracingMethod: 'timeoutNoAlloc'
      }
    };
    resetStats();
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      (0, _interactionMetrics.addMetadata)(id, typingMetaData);
      (0, _interactionMetrics.tryComplete)(id);
    });
  };
  var onKeyPressHandler = function onKeyPressHandler(event) {
    if (!isInteractionInitialised) {
      start();
    }
    var startTime = event.timeStamp;
    setTimeout(function () {
      var endTime = performance.now();
      var time = endTime - startTime;
      if (time !== 0) {
        avg = (avg * count + time) / ++count;
        if (time > max) {
          max = time;
        }
        if (min === 0 || time < min) {
          min = time;
        }
        if (time < 50) {
          below50count++;
        }
      }
      clearTimeout(tsubmit);
      tsubmit = setTimeout(end, 2000); // debounce
    }, 0);
  };

  // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
  element.addEventListener('keypress', onKeyPressHandler);
  return function () {
    // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
    element.removeEventListener('keypress', onKeyPressHandler);
  };
}
function typingPerformanceTracingMutationObserver(element, name, rate) {
  var eventTime = -1;
  var isInteractionInitialised = false;
  var count = 0;
  var id;
  var tsubmit;
  var keyLimit = 20;
  var times = new Float64Array(keyLimit);
  var resetTimesArray = function resetTimesArray() {
    times.fill(0);
  };
  var resetEventTime = function resetEventTime() {
    eventTime = -1;
  };
  var start = function start() {
    id = (0, _uuid.v4)();
    (0, _interactionMetrics.addNewInteraction)(id, name, 'typing', performance.now(), rate, null, null);
    isInteractionInitialised = true;
  };
  var end = function end() {
    isInteractionInitialised = false;
    if (count === 0) {
      return;
    }
    var timesCopy = new Float64Array(times);
    var countCopy = count;
    resetTimesArray();
    resetEventTime();
    count = 0;
    (0, _scheduler.unstable_scheduleCallback)(_scheduler.unstable_IdlePriority, function () {
      var computeStartTime = performance.now();
      var timesSubarray = timesCopy.subarray(0, countCopy);
      var data = getTypingMetadata(timesSubarray, computeStartTime, 'mutationObserver');
      (0, _interactionMetrics.addMetadata)(id, data);
      (0, _interactionMetrics.tryComplete)(id);
    });
  };
  var onKeyPressHandler = function onKeyPressHandler(event) {
    if (!isInteractionInitialised) {
      start();
    }
    eventTime = event.timeStamp;
    setTimeout(function () {
      clearTimeout(tsubmit);
      tsubmit = setTimeout(end, 2000); // debounce
    }, 0);
  };
  var mo = new MutationObserver(function (events) {
    var moTime = performance.now();
    if (eventTime === -1) {
      return;
    }
    if (count > keyLimit - 1) {
      end();
      return;
    }
    var startTime = eventTime;
    resetEventTime();
    events.forEach(function () {
      requestAnimationFrame(function (firstFrameTime) {
        if (firstFrameTime < moTime) {
          requestAnimationFrame(function (secondFrameTime) {
            times[count] = secondFrameTime - startTime;
            count++;
          });
        } else {
          times[count] = firstFrameTime - startTime;
          count++;
        }
      });
    });
  });
  mo.observe(element, {
    attributeFilter: ['value'],
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true
  });

  // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
  element.addEventListener('keypress', onKeyPressHandler);
  return function () {
    // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
    element.removeEventListener('keypress', onKeyPressHandler);
    mo.disconnect();
  };
}
var typingPerformanceTracingMethods = {
  timeout: typingPerformanceTracingTimeout,
  timeoutNoAlloc: typingPerformanceTracingTimeoutNoAlloc,
  mutationObserver: typingPerformanceTracingMutationObserver
};
function useUFOTypingPerformanceTracing(name) {
  var ref = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var rate = (0, _config.getInteractionRate)(name, 'typing');
    if ((0, _coinflip.default)(rate) && ref.current != null) {
      var method = (0, _config.getTypingPerformanceTracingMethod)();
      return typingPerformanceTracingMethods[method](ref.current, name, rate);
    }
  }, [name]);
  return ref;
}