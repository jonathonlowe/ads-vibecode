"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _config = require("../../config");
var _interactionMetrics = require("../../interaction-metrics");
var _selfMeasurements = require("../../self-measurements");
var _vc = require("../../vc");
var _getInteractionStatus = _interopRequireDefault(require("./get-interaction-status"));
var _getPageVisibilityUpToTtai = _interopRequireDefault(require("./get-page-visibility-up-to-ttai"));
var _getSsrDoneTimeValue = _interopRequireDefault(require("./get-ssr-done-time-value"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getVCMetrics = (0, _selfMeasurements.withProfiling)( /*#__PURE__*/function () {
  var _getVCMetrics = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(interaction) {
    var _config$vc, _config$vc$ssrWhiteli, _interaction$apdex, _config$experimentalI;
    var config, interactionStatus, pageVisibilityUpToTTAI, isSSREnabled, ssr, tti, prefix, result, _result$ufoVcRev, ttvcV2Revision, VC;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          config = (0, _config.getConfig)();
          if (config !== null && config !== void 0 && (_config$vc = config.vc) !== null && _config$vc !== void 0 && _config$vc.enabled) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return", {});
        case 3:
          if (!(interaction.type !== 'page_load' && interaction.type !== 'transition')) {
            _context.next = 5;
            break;
          }
          return _context.abrupt("return", {});
        case 5:
          interactionStatus = (0, _getInteractionStatus.default)(interaction);
          pageVisibilityUpToTTAI = (0, _getPageVisibilityUpToTtai.default)(interaction);
          if (!((interactionStatus.originalInteractionStatus !== 'SUCCEEDED' || pageVisibilityUpToTTAI !== 'visible') && (0, _platformFeatureFlags.fg)('platform_ufo_no_vc_on_aborted'))) {
            _context.next = 9;
            break;
          }
          return _context.abrupt("return", {});
        case 9:
          isSSREnabled = (config === null || config === void 0 ? void 0 : config.ssr) || (config === null || config === void 0 || (_config$vc$ssrWhiteli = config.vc.ssrWhitelist) === null || _config$vc$ssrWhiteli === void 0 ? void 0 : _config$vc$ssrWhiteli.includes(interaction.ufoName));
          ssr = interaction.type === 'page_load' && isSSREnabled ? {
            ssr: (0, _getSsrDoneTimeValue.default)(config)
          } : null;
          _interactionMetrics.postInteractionLog.setVCObserverSSRConfig(ssr);
          tti = (_interaction$apdex = interaction.apdex) === null || _interaction$apdex === void 0 || (_interaction$apdex = _interaction$apdex[0]) === null || _interaction$apdex === void 0 ? void 0 : _interaction$apdex.stopTime;
          prefix = 'ufo';
          _context.next = 16;
          return (0, _vc.getVCObserver)().getVCResult(_objectSpread({
            start: interaction.start,
            stop: interaction.end,
            tti: tti,
            prefix: prefix,
            vc: interaction.vc,
            isEventAborted: interactionStatus.originalInteractionStatus !== 'SUCCEEDED'
          }, ssr));
        case 16:
          result = _context.sent;
          if ((_config$experimentalI = config.experimentalInteractionMetrics) !== null && _config$experimentalI !== void 0 && _config$experimentalI.enabled) {
            (0, _vc.getVCObserver)().stop();
          }
          _interactionMetrics.postInteractionLog.setLastInteractionFinishVCResult(result);
          if (!(0, _platformFeatureFlags.fg)('platform_ufo_disable_ttvc_v1')) {
            _context.next = 26;
            break;
          }
          ttvcV2Revision = result === null || result === void 0 || (_result$ufoVcRev = result['ufo:vc:rev']) === null || _result$ufoVcRev === void 0 ? void 0 : _result$ufoVcRev.find(function (_ref) {
            var revision = _ref.revision;
            return revision === 'fy25.02';
          });
          if (ttvcV2Revision !== null && ttvcV2Revision !== void 0 && ttvcV2Revision.clean) {
            _context.next = 23;
            break;
          }
          return _context.abrupt("return", result);
        case 23:
          return _context.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
            'metric:vc90': ttvcV2Revision['metric:vc90']
          }));
        case 26:
          VC = result === null || result === void 0 ? void 0 : result['metrics:vc'];
          if (!(!VC || !(result !== null && result !== void 0 && result["".concat(prefix, ":vc:clean")]))) {
            _context.next = 29;
            break;
          }
          return _context.abrupt("return", result);
        case 29:
          if (!(interactionStatus.originalInteractionStatus !== 'SUCCEEDED' || pageVisibilityUpToTTAI !== 'visible')) {
            _context.next = 31;
            break;
          }
          return _context.abrupt("return", result);
        case 31:
          return _context.abrupt("return", _objectSpread(_objectSpread({}, result), {}, {
            'metric:vc90': VC['90']
          }));
        case 32:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  function getVCMetrics(_x) {
    return _getVCMetrics.apply(this, arguments);
  }
  return getVCMetrics;
}());
var _default = exports.default = getVCMetrics;