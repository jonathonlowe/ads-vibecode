"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _coinflip = _interopRequireDefault(require("../coinflip"));
var _config = require("../config");
var _utils = require("../create-payload/common/utils");
var _getReactUfoPayloadVersion = require("../create-payload/utils/get-react-ufo-payload-version");
var _hiddenTiming = require("../hidden-timing");
var _selfMeasurements = require("../self-measurements");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getParentStack = (0, _selfMeasurements.withProfiling)(function getParentStack(labelStack) {
  if (!labelStack || labelStack.length <= 1) {
    return null;
  }
  return labelStack.slice(0, labelStack.length - 1);
});
var getSegmentId = (0, _selfMeasurements.withProfiling)(function getSegmentId(labelStack) {
  if (!labelStack) {
    return null;
  }
  var leafLabelStack = labelStack[labelStack.length - 1];
  if ((0, _utils.isSegmentLabel)(leafLabelStack)) {
    return leafLabelStack.segmentId;
  }
  var parentStack = getParentStack(labelStack);
  if (!parentStack) {
    return null;
  }
  return getSegmentId(parentStack);
});
var getParentSegmentId = (0, _selfMeasurements.withProfiling)(function getParentSegmentId(labelStack) {
  return getSegmentId(getParentStack(labelStack));
});

/**
 * Whenever a render happen, all parent segment have timing reported
 * This method tries to reduce that noise
 */
var removeCascadingParentTimingReport = (0, _selfMeasurements.withProfiling)(function removeCascadingParentTimingReport(reactProfilerTimings) {
  var timingIndex = new Map();
  reactProfilerTimings.forEach(function (timing) {
    var segmentId = getSegmentId(timing.labelStack);
    if (segmentId) {
      var _timingIndex$get;
      var timingArray = (_timingIndex$get = timingIndex.get(segmentId)) !== null && _timingIndex$get !== void 0 ? _timingIndex$get : [];
      timingIndex.set(segmentId, timingArray);
      timingArray.push(timing);
    }
  });
  reactProfilerTimings.forEach(function (timing) {
    var parentSegmentId = getParentSegmentId(timing.labelStack);
    if (parentSegmentId) {
      var parentTimings = timingIndex.get(parentSegmentId);
      var filteredParentTimings = parentTimings === null || parentTimings === void 0 ? void 0 : parentTimings.filter(function (parentTiming) {
        return !(parentTiming.startTime === timing.startTime && parentTiming.actualDuration === timing.actualDuration);
      });
      if (filteredParentTimings) {
        timingIndex.set(parentSegmentId, filteredParentTimings);
      } else {
        timingIndex.delete(parentSegmentId);
      }
    }
  });
  return (0, _toConsumableArray2.default)(timingIndex.values()).flatMap(function (v) {
    return v;
  });
});
var transformReactProfilerTimings = (0, _selfMeasurements.withProfiling)(function transformReactProfilerTimings(reactProfilerTimings) {
  var filtered = removeCascadingParentTimingReport(reactProfilerTimings !== null && reactProfilerTimings !== void 0 ? reactProfilerTimings : []);
  var reactProfilerTimingsMap = filtered.reduce(function (result, _ref) {
    var labelStack = _ref.labelStack,
      startTime = _ref.startTime,
      commitTime = _ref.commitTime,
      actualDuration = _ref.actualDuration,
      type = _ref.type;
    if (labelStack && type !== 'nested-update') {
      var label = labelStack.map(function (ls) {
        return ls.name;
      }).join('/');
      var start = Math.round(startTime);
      var end = Math.round(commitTime);
      var timing = result.get(label) || {
        labelStack: label,
        startTime: start,
        endTime: end,
        mountCount: 0,
        rerenderCount: 1,
        renderDuration: 0
      };
      if (start < timing.startTime) {
        timing.startTime = Math.round(start);
      }
      if (end > timing.endTime) {
        timing.endTime = Math.round(end);
      }
      if (type === 'mount') {
        timing.mountCount += 1;
      }
      if (type === 'update') {
        timing.rerenderCount += 1;
      }
      timing.renderDuration += Math.round(actualDuration);
      result.set(label, timing);
    }
    return result;
  }, new Map());
  return (0, _toConsumableArray2.default)(reactProfilerTimingsMap.values());
});
var createPostInteractionLogPayload = (0, _selfMeasurements.withProfiling)(function createPostInteractionLogPayload(_ref2) {
  var _window$location;
  var lastInteractionFinish = _ref2.lastInteractionFinish,
    reactProfilerTimings = _ref2.reactProfilerTimings,
    lastInteractionFinishVCResult = _ref2.lastInteractionFinishVCResult,
    postInteractionFinishVCResult = _ref2.postInteractionFinishVCResult;
  var config = (0, _config.getConfig)();
  if (!config) {
    throw Error('UFO Configuration not provided');
  }
  var ufoName = (0, _utils.sanitizeUfoName)(lastInteractionFinish.ufoName);
  var rate = (0, _config.getPostInteractionRate)(ufoName, lastInteractionFinish.type);
  if (!(0, _coinflip.default)(rate)) {
    return null;
  }
  var pageVisibilityState = (0, _hiddenTiming.getPageVisibilityState)(lastInteractionFinish.start, lastInteractionFinish.end);
  if (pageVisibilityState !== 'visible') {
    return null;
  }
  var maxEndTimeFromProfiler = reactProfilerTimings ? Math.max.apply(Math, (0, _toConsumableArray2.default)(reactProfilerTimings.map(function (t) {
    return t.commitTime;
  }))) : lastInteractionFinish.end;
  var revisedEndTime = Math.round(maxEndTimeFromProfiler);
  var revisedTtai = Math.round(maxEndTimeFromProfiler - lastInteractionFinish.start);
  var lastInteractionFinishStart = Math.round(lastInteractionFinish.start);
  var lastInteractionFinishEnd = Math.round(lastInteractionFinish.end);
  var lastInteractionFinishTTAI = Math.round(lastInteractionFinish.end - lastInteractionFinish.start);
  var lastInteractionFinishVC90 = null;
  var lastInteractionFinishVCClean = false;
  if (lastInteractionFinishVCResult !== null && lastInteractionFinishVCResult !== void 0 && lastInteractionFinishVCResult['ufo:vc:state']) {
    var _lastInteractionFinis;
    lastInteractionFinishVCClean = true;
    var lastInteractionFinishVCMetrics = lastInteractionFinishVCResult === null || lastInteractionFinishVCResult === void 0 ? void 0 : lastInteractionFinishVCResult['metrics:vc'];
    lastInteractionFinishVC90 = (_lastInteractionFinis = lastInteractionFinishVCMetrics[90]) !== null && _lastInteractionFinis !== void 0 ? _lastInteractionFinis : null;
  }
  var postInteractionFinishVCRatios = {};
  var revisedVC90 = null;
  var postInteractionFinishVCUpdates = [];
  var postInteractionFinishVCClean = false;
  if (postInteractionFinishVCResult !== null && postInteractionFinishVCResult !== void 0 && postInteractionFinishVCResult['ufo:vc:state']) {
    postInteractionFinishVCClean = true;
    postInteractionFinishVCRatios = postInteractionFinishVCResult === null || postInteractionFinishVCResult === void 0 ? void 0 : postInteractionFinishVCResult['ufo:vc:ratios'];
    postInteractionFinishVCUpdates = postInteractionFinishVCResult === null || postInteractionFinishVCResult === void 0 ? void 0 : postInteractionFinishVCResult['ufo:vc:updates'];
    var postInteractionFinishVCMetrics = postInteractionFinishVCResult === null || postInteractionFinishVCResult === void 0 ? void 0 : postInteractionFinishVCResult['metrics:vc'];
    if (typeof lastInteractionFinishVC90 === 'number') {
      var _postInteractionFinis;
      revisedVC90 = (_postInteractionFinis = postInteractionFinishVCMetrics[90]) !== null && _postInteractionFinis !== void 0 ? _postInteractionFinis : null;
    }
  }
  var lateMutations = postInteractionFinishVCUpdates ? postInteractionFinishVCUpdates.filter(function (entry) {
    return entry.time > lastInteractionFinish.end;
  }).flatMap(function (_ref3) {
    var time = _ref3.time,
      elements = _ref3.elements;
    return Array.from(new Set(elements)).map(function (element) {
      return {
        time: time,
        element: element,
        viewportHeatmapPercentage: postInteractionFinishVCRatios[element]
      };
    });
  }) : [];
  return {
    actionSubject: 'experience',
    action: 'measured',
    eventType: 'operational',
    source: 'measured',
    tags: ['observability'],
    attributes: {
      properties: {
        // basic
        'event:hostname': ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || 'unknown',
        'event:product': config.product,
        'event:schema': '1.0.0',
        'event:source': {
          name: 'react-ufo/web',
          version: (0, _getReactUfoPayloadVersion.getReactUFOPayloadVersion)(lastInteractionFinish.type)
        },
        'event:region': config.region || 'unknown',
        'experience:key': 'custom.post-interaction-logs',
        postInteractionLog: {
          lastInteractionFinish: _objectSpread(_objectSpread({}, lastInteractionFinish), {}, {
            ufoName: ufoName,
            start: lastInteractionFinishStart,
            end: lastInteractionFinishEnd,
            ttai: lastInteractionFinishTTAI,
            vc90: lastInteractionFinishVC90,
            vcClean: lastInteractionFinishVCClean
          }),
          revisedEndTime: revisedEndTime,
          revisedTtai: revisedTtai,
          revisedVC90: revisedVC90,
          vcClean: postInteractionFinishVCClean,
          lateMutations: lateMutations,
          reactProfilerTimings: transformReactProfilerTimings(reactProfilerTimings)
        }
      }
    }
  };
});
var _default = exports.default = createPostInteractionLogPayload;