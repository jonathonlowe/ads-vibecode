"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.revFY25_01Classifier = exports.FY25_01Classifier = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _selfMeasurements = require("../../../self-measurements");
var _ViewportUpdateClassifier = require("./ViewportUpdateClassifier");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var legacyIgnoreReasons = ['image', 'ssr-hydration', 'editor-lazy-node-view'];
var FY25_01Classifier = exports.FY25_01Classifier = /*#__PURE__*/function (_ViewportUpdateClassi) {
  function FY25_01Classifier() {
    var _this;
    (0, _classCallCheck2.default)(this, FY25_01Classifier);
    _this = _callSuper(this, FY25_01Classifier);
    (0, _defineProperty2.default)(_this, "revision", 'fy25.01');
    (0, _defineProperty2.default)(_this, "types", ['html', 'text']);
    (0, _defineProperty2.default)(_this, "filters", [{
      name: 'default-ignore-reasons',
      filter: function filter(_ref) {
        var type = _ref.type,
          ignoreReason = _ref.ignoreReason;
        return !ignoreReason || !legacyIgnoreReasons.includes(ignoreReason);
      }
    }]);
    _this.mergeConfig();
    _this.VCCalculationMethod = (0, _selfMeasurements.withProfiling)(_this.VCCalculationMethod.bind(_this), ['vc']);
    return _this;
  }
  (0, _inherits2.default)(FY25_01Classifier, _ViewportUpdateClassi);
  return (0, _createClass2.default)(FY25_01Classifier, [{
    key: "VCCalculationMethod",
    value: function VCCalculationMethod(_ref2) {
      var VCParts = _ref2.VCParts,
        entries = _ref2.entries,
        totalPainted = _ref2.totalPainted,
        componentsLog = _ref2.componentsLog;
      var VC = {};
      var VCBox = {};
      entries.reduce(function () {
        var acc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var v = arguments.length > 1 ? arguments[1] : undefined;
        var VCRatio = v[1] / totalPainted + acc;
        var time = v[0];

        // @todo apply fix to include small changes into accumulator
        var preciseCurrRatio = Math.round(100 * (v[1] / totalPainted));
        var preciseAccRatio = Math.round(acc * 100);
        VCRatio = (preciseCurrRatio + preciseAccRatio) / 100;
        VCParts.forEach(function (value) {
          if ((VC[value] === null || VC[value] === undefined) && VCRatio >= value / 100) {
            var _componentsLog$time;
            VC[value] = time;
            VCBox[value] = new Set();
            (_componentsLog$time = componentsLog[time]) === null || _componentsLog$time === void 0 || _componentsLog$time.forEach(function (v) {
              var _VCBox$value;
              return (_VCBox$value = VCBox[value]) === null || _VCBox$value === void 0 ? void 0 : _VCBox$value.add(v.targetName);
            });
          }
        });
        return VCRatio;
      }, 0);
      return {
        VC: VC,
        VCBox: VCBox
      };
    }
  }]);
}(_ViewportUpdateClassifier.ViewportUpdateClassifier);
var revFY25_01Classifier = exports.revFY25_01Classifier = new FY25_01Classifier();