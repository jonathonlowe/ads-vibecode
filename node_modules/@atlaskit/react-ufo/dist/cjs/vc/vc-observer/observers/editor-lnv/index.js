"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorLnvHandler = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _selfMeasurements = require("../../../../self-measurements");
var placeholderDataKey = 'editorLnvPlaceholder'; // data-editor-lnv-placeholder
var replaceDataKey = 'editorLnvPlaceholderReplace'; // data-editor-lnv-placeholder-replace
var EditorLnvHandler = exports.EditorLnvHandler = /*#__PURE__*/function () {
  function EditorLnvHandler() {
    var _this = this;
    (0, _classCallCheck2.default)(this, EditorLnvHandler);
    (0, _defineProperty2.default)(this, "placeholders", new Map());
    (0, _defineProperty2.default)(this, "getSizeCallbacks", new Map());
    (0, _defineProperty2.default)(this, "isAddedPlaceholderMatchingSizeCallbacks", new Map());
    (0, _defineProperty2.default)(this, "isAddedReplaceMatchingSizeCallbacks", new Map());
    (0, _defineProperty2.default)(this, "intersectionObserverCallback", function (_ref) {
      var _target$dataset, _target$dataset2;
      var target = _ref.target,
        boundingClientRect = _ref.boundingClientRect;
      _this.intersectionObserver.unobserve(target);
      if (!(target instanceof HTMLElement)) {
        return;
      }
      var placeholderId = (_target$dataset = target.dataset) === null || _target$dataset === void 0 ? void 0 : _target$dataset[placeholderDataKey];
      if (placeholderId && _this.getSizeCallbacks.has(placeholderId)) {
        var _resolve = _this.getSizeCallbacks.get(placeholderId);
        _this.getSizeCallbacks.delete(placeholderId);
        if (!_resolve) {
          return;
        }
        _resolve({
          x: boundingClientRect.x,
          y: boundingClientRect.y,
          width: boundingClientRect.width,
          height: boundingClientRect.height
        });
        return;
      }
      if (placeholderId && _this.isAddedPlaceholderMatchingSizeCallbacks.has(placeholderId)) {
        var _resolve2 = _this.isAddedPlaceholderMatchingSizeCallbacks.get(placeholderId);
        _this.isAddedPlaceholderMatchingSizeCallbacks.delete(placeholderId);
        if (!_resolve2) {
          return;
        }
        var placeholder = _this.placeholders.get(placeholderId);
        if (!placeholder) {
          _resolve2(false);
          return;
        }
        _resolve2(_this.areRectsSameSize(placeholder, boundingClientRect));
        return;
      }
      var replaceId = (_target$dataset2 = target.dataset) === null || _target$dataset2 === void 0 ? void 0 : _target$dataset2[replaceDataKey];
      if (replaceId && _this.isAddedReplaceMatchingSizeCallbacks.has(replaceId)) {
        var _resolve3 = _this.isAddedReplaceMatchingSizeCallbacks.get(replaceId);
        _this.isAddedReplaceMatchingSizeCallbacks.delete(replaceId);
        if (!_resolve3) {
          return;
        }
        var _placeholder = _this.placeholders.get(replaceId);
        if (!_placeholder) {
          _resolve3(false);
          return;
        }
        _this.placeholders.delete(replaceId);
        _resolve3(_this.areRectsSameSize(_placeholder, boundingClientRect));
        return;
      }
    });
    var operationTimer = (0, _selfMeasurements.markProfilingStart)('EditorLnvHandler constructor');
    this.intersectionObserver = new IntersectionObserver(function (entries) {
      return entries.filter(function (entry) {
        return entry.intersectionRatio > 0;
      }).forEach(_this.intersectionObserverCallback);
    });
    this.shouldHandleAddedNode = (0, _selfMeasurements.withProfiling)(this.shouldHandleAddedNode.bind(this), ['vc']);
    this.handleAddedNode = (0, _selfMeasurements.withProfiling)(this.handleAddedNode.bind(this), ['vc']);
    this.clear = (0, _selfMeasurements.withProfiling)(this.clear.bind(this), ['vc']);
    this.handleAddedPlaceholderNode = (0, _selfMeasurements.withProfiling)(this.handleAddedPlaceholderNode.bind(this), ['vc']);
    this.handleAddedReplaceNode = (0, _selfMeasurements.withProfiling)(this.handleAddedReplaceNode.bind(this), ['vc']);
    this.isExistingPlaceholder = (0, _selfMeasurements.withProfiling)(this.isExistingPlaceholder.bind(this), ['vc']);
    this.registerPlaceholder = (0, _selfMeasurements.withProfiling)(this.registerPlaceholder.bind(this), ['vc']);
    this.getSize = (0, _selfMeasurements.withProfiling)(this.getSize.bind(this), ['vc']);
    this.isAddedPlaceholderMatchingSize = (0, _selfMeasurements.withProfiling)(this.isAddedPlaceholderMatchingSize.bind(this), ['vc']);
    this.isAddedReplaceMatchingSize = (0, _selfMeasurements.withProfiling)(this.isAddedReplaceMatchingSize.bind(this), ['vc']);
    this.areRectsSameSize = (0, _selfMeasurements.withProfiling)(this.areRectsSameSize.bind(this), ['vc']);
    this.intersectionObserverCallback = (0, _selfMeasurements.withProfiling)(this.intersectionObserverCallback.bind(this), ['vc']);
    (0, _selfMeasurements.markProfilingEnd)(operationTimer, {
      tags: ['vc']
    });
  }
  return (0, _createClass2.default)(EditorLnvHandler, [{
    key: "shouldHandleAddedNode",
    value: function shouldHandleAddedNode(el) {
      var _el$dataset, _el$dataset2;
      return ((_el$dataset = el.dataset) === null || _el$dataset === void 0 ? void 0 : _el$dataset[placeholderDataKey]) || ((_el$dataset2 = el.dataset) === null || _el$dataset2 === void 0 ? void 0 : _el$dataset2[replaceDataKey]);
    }
  }, {
    key: "handleAddedNode",
    value: function handleAddedNode(el) {
      var _el$dataset3, _el$dataset4;
      // If it placeholder does not already exist, add it to the map
      var placeholderId = (_el$dataset3 = el.dataset) === null || _el$dataset3 === void 0 ? void 0 : _el$dataset3[placeholderDataKey];
      if (placeholderId) {
        return this.handleAddedPlaceholderNode(el, placeholderId);
      }
      var replaceId = (_el$dataset4 = el.dataset) === null || _el$dataset4 === void 0 ? void 0 : _el$dataset4[replaceDataKey];
      if (replaceId) {
        return this.handleAddedReplaceNode(el, replaceId);
      }
      return Promise.resolve({
        shouldIgnore: false
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      this.placeholders.clear();
      this.intersectionObserver.disconnect();
    }
  }, {
    key: "handleAddedPlaceholderNode",
    value: function handleAddedPlaceholderNode(el, placeholderId) {
      if (this.isExistingPlaceholder(placeholderId)) {
        return this.isAddedPlaceholderMatchingSize(el, placeholderId).then(function (isMatching) {
          return {
            shouldIgnore: isMatching
          };
        });
      }
      return this.registerPlaceholder(el, placeholderId).then(function () {
        return {
          shouldIgnore: false
        };
      });
    }
  }, {
    key: "handleAddedReplaceNode",
    value: function handleAddedReplaceNode(el, placeholderId) {
      if (this.isExistingPlaceholder(placeholderId)) {
        return this.isAddedReplaceMatchingSize(el, placeholderId).then(function (isMatching) {
          return {
            shouldIgnore: isMatching
          };
        });
      }
      return Promise.resolve({
        shouldIgnore: false
      });
    }
  }, {
    key: "isExistingPlaceholder",
    value: function isExistingPlaceholder(placeholderId) {
      return this.placeholders.has(placeholderId);
    }
  }, {
    key: "registerPlaceholder",
    value: function registerPlaceholder(el, placeholderId) {
      var _this2 = this;
      return this.getSize(el, placeholderId).then(function (size) {
        _this2.placeholders.set(placeholderId, size);
      });
    }
  }, {
    key: "getSize",
    value: function getSize(el, placeholderId) {
      var _this3 = this;
      return new Promise(function (resolve) {
        _this3.getSizeCallbacks.set(placeholderId, resolve);
        _this3.intersectionObserver.observe(el);
      });
    }
  }, {
    key: "isAddedPlaceholderMatchingSize",
    value: function isAddedPlaceholderMatchingSize(el, placeholderId) {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4.isAddedPlaceholderMatchingSizeCallbacks.set(placeholderId, resolve);
        _this4.intersectionObserver.observe(el);
      });
    }
  }, {
    key: "isAddedReplaceMatchingSize",
    value: function isAddedReplaceMatchingSize(el, placeholderId) {
      var _this5 = this;
      return new Promise(function (resolve) {
        _this5.isAddedReplaceMatchingSizeCallbacks.set(placeholderId, resolve);
        _this5.intersectionObserver.observe(el);
      });
    }
  }, {
    key: "areRectsSameSize",
    value: function areRectsSameSize(a, b) {
      return Math.abs(a.width - b.width) < 1 && Math.abs(a.height - b.height) < 1;
    }
  }]);
}();