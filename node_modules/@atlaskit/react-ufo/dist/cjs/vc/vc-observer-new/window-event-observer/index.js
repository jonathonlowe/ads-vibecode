"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _bindEventListener = require("bind-event-listener");
var _selfMeasurements = require("../../../self-measurements");
var WindowEventObserver = exports.default = /*#__PURE__*/function () {
  function WindowEventObserver(opts) {
    (0, _classCallCheck2.default)(this, WindowEventObserver);
    (0, _defineProperty2.default)(this, "unbindFns", []);
    var operationTimer = (0, _selfMeasurements.markProfilingStart)('WindowEventObserver constructor');
    this.onEvent = (0, _selfMeasurements.withProfiling)(opts.onEvent, ['vc']);
    this.bindEvent = (0, _selfMeasurements.withProfiling)(this.bindEvent.bind(this), ['vc']);
    this.start = (0, _selfMeasurements.withProfiling)(this.start.bind(this), ['vc']);
    this.stop = (0, _selfMeasurements.withProfiling)(this.stop.bind(this), ['vc']);
    (0, _selfMeasurements.markProfilingEnd)(operationTimer);
  }
  return (0, _createClass2.default)(WindowEventObserver, [{
    key: "bindEvent",
    value: function bindEvent(type) {
      var _this = this;
      var unbindCallback = (0, _bindEventListener.bind)(window, {
        type: type,
        listener: function listener(event) {
          if (!event.isTrusted) {
            return;
          }
          _this.onEvent({
            time: event.timeStamp,
            type: type,
            event: event
          });
        },
        options: {
          passive: true,
          once: true
        }
      });
      this.unbindFns.push(unbindCallback);
    }
  }, {
    key: "start",
    value: function start() {
      this.bindEvent('wheel');
      this.bindEvent('scroll');
      this.bindEvent('keydown');
      this.bindEvent('resize');
    }
  }, {
    key: "stop",
    value: function stop() {
      this.unbindFns.forEach(function (cb) {
        cb();
      });
      this.unbindFns = [];
    }
  }]);
}();