"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _selfMeasurements = require("../../self-measurements");
var _entriesTimeline = _interopRequireDefault(require("./entries-timeline"));
var _getElementName2 = _interopRequireDefault(require("./get-element-name"));
var _fy25_ = _interopRequireDefault(require("./metric-calculator/fy25_03"));
var _viewportObserver = _interopRequireDefault(require("./viewport-observer"));
var _windowEventObserver = _interopRequireDefault(require("./window-event-observer"));
var DEFAULT_SELECTOR_CONFIG = {
  id: false,
  testId: true,
  role: false,
  className: false,
  dataVC: true
};
var VCObserverNew = exports.default = /*#__PURE__*/function () {
  function VCObserverNew(config) {
    var _config$selectorConfi,
      _this = this;
    (0, _classCallCheck2.default)(this, VCObserverNew);
    (0, _defineProperty2.default)(this, "viewportObserver", null);
    (0, _defineProperty2.default)(this, "windowEventObserver", null);
    var operationTimer = (0, _selfMeasurements.markProfilingStart)('VCObserverNew constructor');
    this.entriesTimeline = new _entriesTimeline.default();
    this.selectorConfig = (_config$selectorConfi = config.selectorConfig) !== null && _config$selectorConfi !== void 0 ? _config$selectorConfi : DEFAULT_SELECTOR_CONFIG;
    this.viewportObserver = new _viewportObserver.default({
      onChange: function onChange(onChangeArg) {
        var time = onChangeArg.time,
          type = onChangeArg.type,
          elementRef = onChangeArg.elementRef,
          visible = onChangeArg.visible,
          rect = onChangeArg.rect,
          previousRect = onChangeArg.previousRect,
          mutationData = onChangeArg.mutationData;
        var elementName = 'unknown';
        var element = elementRef.deref();
        if (element) {
          elementName = _this.getElementName(element);
        }
        _this.entriesTimeline.push({
          time: time,
          type: type,
          data: {
            elementName: elementName,
            rect: rect,
            previousRect: previousRect,
            visible: visible,
            attributeName: mutationData === null || mutationData === void 0 ? void 0 : mutationData.attributeName
          }
        });
      }
    });
    this.windowEventObserver = new _windowEventObserver.default({
      onEvent: function onEvent(_ref) {
        var time = _ref.time,
          type = _ref.type;
        _this.entriesTimeline.push({
          time: time,
          type: 'window:event',
          data: {
            eventType: type
          }
        });
      }
    });
    this.start = (0, _selfMeasurements.withProfiling)(this.start.bind(this), ['vc']);
    this.stop = (0, _selfMeasurements.withProfiling)(this.stop.bind(this), ['vc']);
    this.getVCResult = (0, _selfMeasurements.withProfiling)(this.getVCResult.bind(this), ['vc']);
    this.getElementName = (0, _selfMeasurements.withProfiling)(this.getElementName.bind(this), ['vc']);
    (0, _selfMeasurements.markProfilingEnd)(operationTimer, {
      tags: ['vc']
    });
  }
  return (0, _createClass2.default)(VCObserverNew, [{
    key: "start",
    value: function start(_ref2) {
      var _this$viewportObserve, _this$windowEventObse;
      var startTime = _ref2.startTime;
      (_this$viewportObserve = this.viewportObserver) === null || _this$viewportObserve === void 0 || _this$viewportObserve.start();
      (_this$windowEventObse = this.windowEventObserver) === null || _this$windowEventObse === void 0 || _this$windowEventObse.start();
      this.entriesTimeline.clear();
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this$viewportObserve2, _this$windowEventObse2;
      (_this$viewportObserve2 = this.viewportObserver) === null || _this$viewportObserve2 === void 0 || _this$viewportObserve2.stop();
      (_this$windowEventObse2 = this.windowEventObserver) === null || _this$windowEventObse2 === void 0 || _this$windowEventObse2.stop();
    }
  }, {
    key: "getVCResult",
    value: function () {
      var _getVCResult = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(param) {
        var start, stop, results, calculator_fy25_03, orderedEntries, fy25_03;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              start = param.start, stop = param.stop;
              results = [];
              calculator_fy25_03 = new _fy25_.default();
              orderedEntries = this.entriesTimeline.getOrderedEntries({
                start: start,
                stop: stop
              });
              _context.next = 6;
              return calculator_fy25_03.calculate({
                orderedEntries: orderedEntries,
                startTime: start,
                stopTime: stop
              });
            case 6:
              fy25_03 = _context.sent;
              if (fy25_03) {
                results.push(fy25_03);
              }
              return _context.abrupt("return", results);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getVCResult(_x) {
        return _getVCResult.apply(this, arguments);
      }
      return getVCResult;
    }()
  }, {
    key: "getElementName",
    value: function getElementName(element) {
      return (0, _getElementName2.default)(this.selectorConfig, element);
    }
  }]);
}();