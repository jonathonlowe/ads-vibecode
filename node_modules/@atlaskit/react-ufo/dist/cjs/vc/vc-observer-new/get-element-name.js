"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _selfMeasurements = require("../../self-measurements");
var nameCache = new WeakMap();
var getElementName = (0, _selfMeasurements.withProfiling)(function getElementName(selectorConfig, element) {
  if (!(element instanceof HTMLElement)) {
    return 'error';
  }
  var cachedName = nameCache.get(element);
  if (cachedName) {
    return cachedName;
  }
  // Get the tag name of the element.
  var tagName = element.localName;
  var encodeValue = function encodeValue(s) {
    if (typeof encodeURIComponent !== 'function') {
      return '';
    }
    try {
      return encodeURIComponent(s);
    } catch (e) {
      return 'malformed_value';
    }
  };

  // Helper function to construct attribute selectors.
  var getAttributeSelector = function getAttributeSelector(attributeName) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (element && typeof element.getAttribute !== 'function') {
      return '';
    }
    var attrValue = element.getAttribute(attributeName);
    if (!attrValue) {
      return '';
    }
    var encondedAttrValue = encodeValue(attrValue);
    return "".concat(prefix, "[").concat(attributeName, "=\"").concat(encondedAttrValue, "\"]");
  };

  // Construct the data-vc attribute selector if specified in the config.
  var dataVC = selectorConfig.dataVC !== false ? getAttributeSelector('data-vc') : '';

  // Construct the ID selector if specified in the config and the element has an ID.
  var id = selectorConfig.id && element.id ? "#".concat(encodeValue(element.id)) : '';

  // Construct the test ID selector if specified in the config.
  var testId = selectorConfig.testId ? getAttributeSelector('data-testid') || getAttributeSelector('data-test-id') : '';

  // Construct the role selector if specified in the config.
  var role = selectorConfig.role ? getAttributeSelector('role') : '';
  var classNames = Array.from(element.classList).map(encodeValue).join('.');
  // Construct the class list selector if specified in the config.
  var classList = selectorConfig.className && classNames ? ".".concat(classNames) : '';

  // Combine primary attribute selectors (id, testId, role) into a single string.
  var primaryAttributes = [id, testId, role].filter(Boolean).join('');

  // Use dataVC if available, otherwise use the primary attributes.
  var attributes = dataVC || primaryAttributes;

  // If no attributes or class list, recursively get the parent's name.
  if (!attributes && !classList) {
    var parentName = element.parentElement ? getElementName(selectorConfig, element.parentElement) : 'unknown';
    return "".concat(parentName, " > ").concat(tagName);
  }

  // Return the final constructed name: tagName + attributes or classList.
  var name = "".concat(tagName).concat(attributes || classList);
  nameCache.set(element, name);
  return name;
}, ['vc']);
var _default = exports.default = getElementName;