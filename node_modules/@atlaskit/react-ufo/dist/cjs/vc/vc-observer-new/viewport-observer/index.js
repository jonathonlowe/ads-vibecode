"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _selfMeasurements = require("../../../self-measurements");
var _vcUtils = require("../../vc-observer/media-wrapper/vc-utils");
var _isNonVisualStyleMutation = _interopRequireDefault(require("../../vc-observer/observers/non-visual-styles/is-non-visual-style-mutation"));
var _intersectionObserver = require("./intersection-observer");
var _mutationObserver = _interopRequireDefault(require("./mutation-observer"));
var _performanceObserver = _interopRequireDefault(require("./performance-observer"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var isElementVisible = (0, _selfMeasurements.withProfiling)(function isElementVisible(element) {
  if (!(element instanceof HTMLElement)) {
    return true;
  }
  try {
    var visible = element.checkVisibility({
      // @ts-expect-error
      visibilityProperty: true,
      contentVisibilityAuto: true,
      opacityProperty: true
    });
    return visible;
  } catch (e) {
    // there is no support for checkVisibility
    return true;
  }
}, ['vc']);
var sameRectSize = (0, _selfMeasurements.withProfiling)(function sameRectSize(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height;
}, ['vc']);
var sameRectDimensions = (0, _selfMeasurements.withProfiling)(function sameRectDimensions(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height && a.x === b.x && a.y === b.y;
}, ['vc']);
var ViewportObserver = exports.default = /*#__PURE__*/function () {
  function ViewportObserver(_ref) {
    var _this = this;
    var _onChange = _ref.onChange;
    (0, _classCallCheck2.default)(this, ViewportObserver);
    var onChange = (0, _selfMeasurements.withProfiling)(_onChange, ['vc']);
    var operationTimer = (0, _selfMeasurements.markProfilingStart)('ViewportObserver constructor');
    this.mapVisibleNodeRects = new WeakMap();
    this.intersectionObserver = (0, _intersectionObserver.createIntersectionObserver)({
      onEntry: function onEntry(_ref2) {
        var target = _ref2.target,
          rect = _ref2.rect,
          time = _ref2.time,
          type = _ref2.type,
          mutationData = _ref2.mutationData;
        if (!target) {
          return;
        }
        var visible = isElementVisible(target);
        var lastElementRect = _this.mapVisibleNodeRects.get(target);
        _this.mapVisibleNodeRects.set(target, rect);
        onChange({
          time: time,
          type: type,
          elementRef: new WeakRef(target),
          visible: visible,
          rect: rect,
          previousRect: lastElementRect,
          mutationData: mutationData
        });
      }
    });
    this.mutationObserver = (0, _mutationObserver.default)({
      onChildListMutation: function onChildListMutation(_ref3) {
        var _removedNodes$map;
        var addedNodes = _ref3.addedNodes,
          removedNodes = _ref3.removedNodes;
        var removedNodeRects = (_removedNodes$map = removedNodes === null || removedNodes === void 0 ? void 0 : removedNodes.map(function (n) {
          return _this.mapVisibleNodeRects.get(n);
        })) !== null && _removedNodes$map !== void 0 ? _removedNodes$map : [];
        addedNodes.forEach(function (addedNode) {
          var _this$intersectionObs3;
          // for (const elem of addedNode.querySelectorAll('*')) {
          // 	this.intersectionObserver?.watchAndTag(elem, 'mutation:child-element');
          // }

          var sameDeletedNode = removedNodes.find(function (n) {
            return n.isEqualNode(addedNode);
          });
          if (sameDeletedNode) {
            var _this$intersectionObs;
            (_this$intersectionObs = _this.intersectionObserver) === null || _this$intersectionObs === void 0 || _this$intersectionObs.watchAndTag(addedNode, 'mutation:remount');
            return;
          }
          if ((0, _vcUtils.isContainedWithinMediaWrapper)(addedNode)) {
            var _this$intersectionObs2;
            (_this$intersectionObs2 = _this.intersectionObserver) === null || _this$intersectionObs2 === void 0 || _this$intersectionObs2.watchAndTag(addedNode, 'mutation:media');
            return;
          }
          (_this$intersectionObs3 = _this.intersectionObserver) === null || _this$intersectionObs3 === void 0 || _this$intersectionObs3.watchAndTag(addedNode, function (_ref4) {
            var rect = _ref4.rect;
            var wasDeleted = removedNodeRects.some(function (nr) {
              return sameRectDimensions(nr, rect);
            });
            if (wasDeleted) {
              return 'mutation:element-replacement';
            }
            return 'mutation:element';
          });
        });
      },
      onAttributeMutation: function onAttributeMutation(_ref5) {
        var _this$intersectionObs4;
        var target = _ref5.target,
          attributeName = _ref5.attributeName;
        (_this$intersectionObs4 = _this.intersectionObserver) === null || _this$intersectionObs4 === void 0 || _this$intersectionObs4.watchAndTag(target, function (_ref6) {
          var target = _ref6.target,
            rect = _ref6.rect;
          if ((0, _vcUtils.isContainedWithinMediaWrapper)(target)) {
            return {
              type: 'mutation:media',
              mutationData: {
                attributeName: attributeName
              }
            };
          }
          if ((0, _isNonVisualStyleMutation.default)({
            target: target,
            attributeName: attributeName,
            type: 'attributes'
          })) {
            return {
              type: 'mutation:attribute:non-visual-style',
              mutationData: {
                attributeName: attributeName
              }
            };
          }
          var lastElementRect = _this.mapVisibleNodeRects.get(target);
          if (lastElementRect && sameRectSize(rect, lastElementRect)) {
            return {
              type: 'mutation:attribute:no-layout-shift',
              mutationData: {
                attributeName: attributeName
              }
            };
          }
          return {
            type: 'mutation:attribute',
            mutationData: {
              attributeName: attributeName
            }
          };
        });
      }
    });
    this.performanceObserver = (0, _performanceObserver.default)({
      onLayoutShift: function onLayoutShift(_ref7) {
        var time = _ref7.time,
          changedRects = _ref7.changedRects;
        var _iterator = _createForOfIteratorHelper(changedRects),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var changedRect = _step.value;
            var target = changedRect.node;
            if (target) {
              onChange({
                time: time,
                elementRef: new WeakRef(target),
                visible: true,
                rect: changedRect.rect,
                previousRect: changedRect.previousRect,
                type: 'layout-shift'
              });
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    });
    this.start = (0, _selfMeasurements.withProfiling)(this.start.bind(this), ['vc']);
    this.stop = (0, _selfMeasurements.withProfiling)(this.stop.bind(this), ['vc']);
    (0, _selfMeasurements.markProfilingEnd)(operationTimer, {
      tags: ['vc']
    });
  }
  return (0, _createClass2.default)(ViewportObserver, [{
    key: "start",
    value: function start() {
      var _this$mutationObserve, _this$performanceObse;
      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(document.body, {
        attributeOldValue: true,
        attributes: true,
        childList: true,
        subtree: true
      });
      (_this$performanceObse = this.performanceObserver) === null || _this$performanceObse === void 0 || _this$performanceObse.observe({
        type: 'layout-shift',
        buffered: true,
        // @ts-ignore-error
        durationThreshold: 30
      });
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this$mutationObserve2, _this$intersectionObs5, _this$performanceObse2;
      (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 || _this$mutationObserve2.disconnect();
      (_this$intersectionObs5 = this.intersectionObserver) === null || _this$intersectionObs5 === void 0 || _this$intersectionObs5.disconnect();
      (_this$performanceObse2 = this.performanceObserver) === null || _this$performanceObse2 === void 0 || _this$performanceObse2.disconnect();
    }
  }]);
}();