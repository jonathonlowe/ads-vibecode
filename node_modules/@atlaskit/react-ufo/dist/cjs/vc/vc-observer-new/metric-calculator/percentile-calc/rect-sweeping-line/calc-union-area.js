"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _selfMeasurements = require("../../../../../self-measurements");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * Calculate the union areas of all rectangles using Sweep Line Algorithm
 *
 * Reference:
 * 	https://en.wikipedia.org/wiki/Sweep_line_algorithm
 *  https://www.hackerearth.com/practice/math/geometry/line-sweep-technique/tutorial/#:~:text=A%20sweep%20line%20is%20an,order%20to%20discretize%20the%20sweep.
 *
 * @param rectangles
 * @returns
 */
var calculateUnionArea = (0, _selfMeasurements.withProfiling)(function calculateUnionArea(rectangles) {
  // Step 1: Create sweep line events
  var events = createSweepLineEvents(rectangles);

  // Step 2: Process events to calculate total area
  var activeIntervals = new Map();
  var totalArea = 0;
  var previousX = 0;
  var _iterator = _createForOfIteratorHelper(events),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var event = _step.value;
      // Calculate height at current x-position
      var currentHeight = calculateActiveHeight(activeIntervals);
      // Add area since last x-position
      totalArea += currentHeight * (event.x - previousX);
      // Update x-position
      previousX = event.x;
      // Update active intervals
      updateActiveIntervals(activeIntervals, event);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return totalArea;
}, ['vc']);
var _default = exports.default = calculateUnionArea;
var createSweepLineEvents = (0, _selfMeasurements.withProfiling)(function createSweepLineEvents(rectangles) {
  var events = [];
  var _iterator2 = _createForOfIteratorHelper(rectangles),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var rect = _step2.value;
      // Create start and end events for each rectangle
      events.push({
        x: rect.left,
        type: 'start',
        top: rect.top,
        bottom: rect.bottom
      });
      events.push({
        x: rect.right,
        type: 'end',
        top: rect.top,
        bottom: rect.bottom
      });
    }
    // Sort events by x-coordinate (and type as tiebreaker)
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return events.sort(function (a, b) {
    return a.x === b.x ? a.type === 'end' ? 1 : -1 : a.x - b.x;
  });
}, ['vc']);
var calculateActiveHeight = (0, _selfMeasurements.withProfiling)(function calculateActiveHeight(intervals) {
  if (intervals.size === 0) {
    return 0;
  }
  // Get all unique y-coordinates
  var coordinates = [];
  var _iterator3 = _createForOfIteratorHelper(intervals),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _step3$value = (0, _slicedToArray2.default)(_step3.value, 1),
        _key = _step3$value[0];
      var _key$split$map3 = _key.split(',').map(Number),
        _key$split$map4 = (0, _slicedToArray2.default)(_key$split$map3, 2),
        _start = _key$split$map4[0],
        _end = _key$split$map4[1];
      coordinates.push(_start, _end);
    }
    // Sort coordinates
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var sortedCoords = (0, _toConsumableArray2.default)(new Set(coordinates)).sort(function (a, b) {
    return a - b;
  });
  var totalHeight = 0;
  // Check each segment between consecutive coordinates
  for (var i = 0; i < sortedCoords.length; i++) {
    var y1 = sortedCoords[i];
    var y2 = sortedCoords[i + 1];
    // Check if this segment is covered by any active interval
    var covered = false;
    var _iterator4 = _createForOfIteratorHelper(intervals),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
          key = _step4$value[0],
          count = _step4$value[1];
        if (count <= 0) {
          continue;
        }
        var _key$split$map = key.split(',').map(Number),
          _key$split$map2 = (0, _slicedToArray2.default)(_key$split$map, 2),
          start = _key$split$map2[0],
          end = _key$split$map2[1];
        if (start <= y1 && end >= y2) {
          covered = true;
          break;
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    if (covered) {
      totalHeight += y2 - y1;
    }
  }
  return totalHeight;
}, ['vc']);
var updateActiveIntervals = (0, _selfMeasurements.withProfiling)(function updateActiveIntervals(intervals, event) {
  var key = "".concat(event.top, ",").concat(event.bottom);
  if (event.type === 'start') {
    intervals.set(key, (intervals.get(key) || 0) + 1);
  } else {
    var count = intervals.get(key) || 0;
    if (count > 1) {
      intervals.set(key, count - 1);
    } else {
      intervals.delete(key);
    }
  }
}, ['vc']);