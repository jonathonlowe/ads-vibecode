"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _selfMeasurements = require("../../self-measurements");
var nameCache = new WeakMap();
var getAttributeSelector = (0, _selfMeasurements.withProfiling)(function getAttributeSelector(element, attributeName) {
  var attrValue = element.getAttribute(attributeName);
  if (!attrValue) {
    return '';
  }
  return "[".concat(attributeName, "=\"").concat(attrValue, "\"]");
}, ['vc']);
var isValidSelector = (0, _selfMeasurements.withProfiling)(function isValidSelector(selector) {
  try {
    document.querySelector(selector);
    return true;
  } catch (err) {
    return false;
  }
}, ['vc']);
var isSelectorUnique = (0, _selfMeasurements.withProfiling)(function isSelectorUnique(selector) {
  return document.querySelectorAll(selector).length === 1;
}, ['vc']);
var getUniqueSelector = (0, _selfMeasurements.withProfiling)(function getUniqueSelector(selectorConfig, element) {
  var currentElement = element;
  var parts = [];
  var MAX_DEPTH = 3;
  var currentDepth = 0;
  while (currentElement && currentElement.localName !== 'body' && currentDepth <= MAX_DEPTH) {
    var tagName = currentElement.localName;
    var selectorPart = tagName;
    if (selectorConfig.id && currentElement.id && isValidSelector("#".concat(currentElement.id))) {
      selectorPart += "#".concat(currentElement.id);
    } else if (selectorConfig.dataVC) {
      selectorPart += getAttributeSelector(currentElement, 'data-vc');
    } else if (selectorConfig.testId) {
      selectorPart += getAttributeSelector(currentElement, 'data-testid') || getAttributeSelector(currentElement, 'data-test-id');
    } else if (selectorConfig.role) {
      selectorPart += getAttributeSelector(currentElement, 'role');
    } else if (selectorConfig.className && currentElement.className) {
      var classNames = Array.from(currentElement.classList).join('.');
      if (classNames) {
        if (isValidSelector(".".concat(classNames))) {
          selectorPart += ".".concat(classNames);
        }
      }
    }
    parts.unshift(selectorPart);
    var _potentialSelector = parts.join(' > ').trim();
    if (_potentialSelector && isSelectorUnique(_potentialSelector)) {
      return _potentialSelector;
    }
    currentElement = currentElement.parentElement;
    currentDepth++;
  }
  var potentialSelector = parts.join(' > ').trim();
  if (!potentialSelector) {
    return 'unknown';
  } else if (!isSelectorUnique(potentialSelector)) {
    var parentElement = element.parentElement;
    if (parentElement) {
      return "".concat(potentialSelector, ":nth-child"); // NOTE: invalid DOM selector, but enough information for VC
    }
  }
  return potentialSelector;
}, ['vc']);
var getElementName = (0, _selfMeasurements.withProfiling)(function getElementName(selectorConfig, element) {
  if (!(element instanceof HTMLElement)) {
    return 'error';
  }
  var cachedName = nameCache.get(element);
  if (cachedName) {
    return cachedName;
  }
  var uniqueSelector = getUniqueSelector(selectorConfig, element);
  nameCache.set(element, uniqueSelector);
  return uniqueSelector;
}, ['vc']);
var _default = exports.default = getElementName;