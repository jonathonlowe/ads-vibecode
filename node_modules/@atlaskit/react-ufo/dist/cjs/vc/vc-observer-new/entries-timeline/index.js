"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _selfMeasurements = require("../../../self-measurements");
var EntriesTimeline = exports.default = /*#__PURE__*/function () {
  function EntriesTimeline() {
    (0, _classCallCheck2.default)(this, EntriesTimeline);
    (0, _defineProperty2.default)(this, "unorderedEntries", []);
    (0, _defineProperty2.default)(this, "sortedEntriesCache", new Map());
    var operationTimer = (0, _selfMeasurements.markProfilingStart)('EntriesTimeline constructor');
    this.unorderedEntries = [];
    this.push = (0, _selfMeasurements.withProfiling)(this.push.bind(this), ['vc']);
    this.getCacheKey = (0, _selfMeasurements.withProfiling)(this.getCacheKey.bind(this), ['vc']);
    this.getOrderedEntries = (0, _selfMeasurements.withProfiling)(this.getOrderedEntries.bind(this), ['vc']);
    this.clear = (0, _selfMeasurements.withProfiling)(this.clear.bind(this), ['vc']);
    (0, _selfMeasurements.markProfilingEnd)(operationTimer, {
      tags: ['vc']
    });
  }
  return (0, _createClass2.default)(EntriesTimeline, [{
    key: "push",
    value: function push(entry) {
      this.unorderedEntries.push(entry);
      this.sortedEntriesCache.clear();
    }
  }, {
    key: "getCacheKey",
    value: function getCacheKey(start, stop) {
      return "".concat(start !== null && start !== void 0 ? start : 'null', "_").concat(stop !== null && stop !== void 0 ? stop : 'null');
    }
  }, {
    key: "getOrderedEntries",
    value: function getOrderedEntries(_ref) {
      var _this$sortedEntriesCa;
      var start = _ref.start,
        stop = _ref.stop;
      var cacheKey = this.getCacheKey(start, stop);
      var cachedSortedEntries = (_this$sortedEntriesCa = this.sortedEntriesCache.get(cacheKey)) === null || _this$sortedEntriesCa === void 0 ? void 0 : _this$sortedEntriesCa.deref();
      if (cachedSortedEntries) {
        return cachedSortedEntries;
      }
      var filteredEntries = this.unorderedEntries.filter(function (e) {
        return e.time >= (start !== null && start !== void 0 ? start : 0) && e.time <= (stop !== null && stop !== void 0 ? stop : performance.now());
      });
      var sortedEntries = filteredEntries.sort(function (a, b) {
        return a.time - b.time;
      });
      this.sortedEntriesCache.set(cacheKey, new WeakRef(sortedEntries));
      return sortedEntries;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.unorderedEntries = [];
      this.sortedEntriesCache.clear();
    }
  }]);
}();