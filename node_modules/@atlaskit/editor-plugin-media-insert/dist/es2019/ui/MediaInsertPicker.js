import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { useIntl } from 'react-intl-next';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { mediaInsertMessages } from '@atlaskit/editor-common/messages';
import { PlainOutsideClickTargetRefContext, Popup, withOuterListeners } from '@atlaskit/editor-common/ui';
import { findDomRefAtPos } from '@atlaskit/editor-prosemirror/utils';
import { akEditorFloatingDialogZIndex } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Tabs, { Tab, TabList, useTabPanel } from '@atlaskit/tabs';
import { useFocusEditor } from './hooks/use-focus-editor';
import { useUnholyAutofocus } from './hooks/use-unholy-autofocus';
import { LocalMedia } from './LocalMedia';
import { MediaFromURL } from './MediaFromURL';
import { MediaFromURLWithForm } from './MediaFromURLWithForm';
import { MediaInsertWrapper } from './MediaInsertWrapper';
const PopupWithListeners = withOuterListeners(Popup);
const getDomRefFromSelection = (view, dispatchAnalyticsEvent) => {
  try {
    const domRef = findDomRefAtPos(view.state.selection.from, view.domAtPos.bind(view));
    if (domRef instanceof HTMLElement) {
      // If element is not a paragraph, we need to find the closest paragraph parent
      if (domRef.nodeName !== 'P') {
        const paragraphRef = domRef.closest('p');
        if (paragraphRef) {
          return paragraphRef;
        }
      }
      return domRef;
    } else {
      throw new Error('Invalid DOM reference');
    }
  } catch (error) {
    if (dispatchAnalyticsEvent) {
      const payload = {
        action: ACTION.ERRORED,
        actionSubject: ACTION_SUBJECT.PICKER,
        actionSubjectId: ACTION_SUBJECT_ID.PICKER_MEDIA,
        eventType: EVENT_TYPE.OPERATIONAL,
        attributes: {
          error: 'Error getting DOM reference from selection'
        }
      };
      dispatchAnalyticsEvent(payload);
    }
  }
};

/**
 * A custom TabPanel that is non-focusable.
 */
const CustomTabPanel = ({
  children
}) => {
  const tabPanelAttributes = useTabPanel();
  return (
    /*#__PURE__*/
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    React.createElement(Box, _extends({
      paddingBlockEnd: "space.150"
    }, tabPanelAttributes, {
      tabIndex: -1
    }), children)
  );
};
export const MediaInsertPicker = ({
  api,
  editorView,
  dispatchAnalyticsEvent,
  popupsMountPoint,
  popupsBoundariesElement,
  popupsScrollableElement,
  closeMediaInsertPicker,
  insertMediaSingle,
  insertExternalMediaSingle,
  insertFile
}) => {
  var _useSharedPluginState, _useSharedPluginState2, _useSharedPluginState3, _useSharedPluginState4;
  const {
    isOpen,
    mountInfo
  } = (_useSharedPluginState = (_useSharedPluginState2 = useSharedPluginState(api, ['mediaInsert'])) === null || _useSharedPluginState2 === void 0 ? void 0 : _useSharedPluginState2.mediaInsertState) !== null && _useSharedPluginState !== void 0 ? _useSharedPluginState : {};
  let targetRef;
  let mountPoint;
  if (mountInfo) {
    targetRef = mountInfo.ref;
    mountPoint = mountInfo.mountPoint;
  } else {
    // If targetRef is undefined, target the selection in the editor
    targetRef = getDomRefFromSelection(editorView, dispatchAnalyticsEvent);
    mountPoint = popupsMountPoint;
  }
  const mediaProvider = (_useSharedPluginState3 = useSharedPluginState(api, ['media'])) === null || _useSharedPluginState3 === void 0 ? void 0 : (_useSharedPluginState4 = _useSharedPluginState3.mediaState) === null || _useSharedPluginState4 === void 0 ? void 0 : _useSharedPluginState4.mediaProvider;
  const intl = useIntl();
  const focusEditor = useFocusEditor({
    editorView
  });
  const {
    autofocusRef,
    onPositionCalculated
  } = useUnholyAutofocus();
  if (!isOpen || !mediaProvider) {
    return null;
  }
  const handleClose = exitMethod => event => {
    event.preventDefault();
    if (dispatchAnalyticsEvent) {
      const payload = {
        action: ACTION.CLOSED,
        actionSubject: ACTION_SUBJECT.PICKER,
        actionSubjectId: ACTION_SUBJECT_ID.PICKER_MEDIA,
        eventType: EVENT_TYPE.UI,
        attributes: {
          exitMethod
        }
      };
      dispatchAnalyticsEvent(payload);
    }
    closeMediaInsertPicker();
    focusEditor();
  };
  return /*#__PURE__*/React.createElement(PopupWithListeners, {
    ariaLabel: intl.formatMessage(mediaInsertMessages.mediaPickerPopupAriaLabel),
    offset: [0, 12],
    target: targetRef,
    zIndex: akEditorFloatingDialogZIndex,
    fitHeight: 390,
    fitWidth: 340,
    mountTo: mountPoint,
    boundariesElement: popupsBoundariesElement,
    handleClickOutside: handleClose(INPUT_METHOD.MOUSE),
    handleEscapeKeydown: handleClose(INPUT_METHOD.KEYBOARD),
    scrollableElement: popupsScrollableElement,
    preventOverflow: true,
    onPositionCalculated: onPositionCalculated,
    focusTrap: true
  }, /*#__PURE__*/React.createElement(PlainOutsideClickTargetRefContext.Consumer, null, setOutsideClickTargetRef => /*#__PURE__*/React.createElement(MediaInsertWrapper, {
    ref: setOutsideClickTargetRef
  }, /*#__PURE__*/React.createElement(Tabs, {
    id: "media-insert-tab-navigation"
  }, /*#__PURE__*/React.createElement(Box, {
    paddingBlockEnd: "space.150"
  }, /*#__PURE__*/React.createElement(TabList, null, /*#__PURE__*/React.createElement(Tab, null, intl.formatMessage(mediaInsertMessages.fileTabTitle)), /*#__PURE__*/React.createElement(Tab, null, intl.formatMessage(mediaInsertMessages.linkTabTitle)))), /*#__PURE__*/React.createElement(CustomTabPanel, null, /*#__PURE__*/React.createElement(LocalMedia, {
    ref: autofocusRef,
    mediaProvider: mediaProvider,
    closeMediaInsertPicker: () => {
      closeMediaInsertPicker();
      focusEditor();
    },
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    insertFile: insertFile
  })), /*#__PURE__*/React.createElement(CustomTabPanel, null, fg('platform_editor_media_from_url_remove_form') ? /*#__PURE__*/React.createElement(MediaFromURL, {
    mediaProvider: mediaProvider,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    closeMediaInsertPicker: () => {
      closeMediaInsertPicker();
      focusEditor();
    },
    insertMediaSingle: insertMediaSingle,
    insertExternalMediaSingle: insertExternalMediaSingle
  }) : /*#__PURE__*/React.createElement(MediaFromURLWithForm, {
    mediaProvider: mediaProvider,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    closeMediaInsertPicker: () => {
      closeMediaInsertPicker();
      focusEditor();
    },
    insertMediaSingle: insertMediaSingle,
    insertExternalMediaSingle: insertExternalMediaSingle
  }))))));
};