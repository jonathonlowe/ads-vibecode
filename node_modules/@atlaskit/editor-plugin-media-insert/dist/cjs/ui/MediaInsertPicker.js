"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaInsertPicker = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _hooks = require("@atlaskit/editor-common/hooks");
var _messages = require("@atlaskit/editor-common/messages");
var _ui = require("@atlaskit/editor-common/ui");
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _tabs = _interopRequireWildcard(require("@atlaskit/tabs"));
var _useFocusEditor = require("./hooks/use-focus-editor");
var _useUnholyAutofocus2 = require("./hooks/use-unholy-autofocus");
var _LocalMedia = require("./LocalMedia");
var _MediaFromURL = require("./MediaFromURL");
var _MediaFromURLWithForm = require("./MediaFromURLWithForm");
var _MediaInsertWrapper = require("./MediaInsertWrapper");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var PopupWithListeners = (0, _ui.withOuterListeners)(_ui.Popup);
var getDomRefFromSelection = function getDomRefFromSelection(view, dispatchAnalyticsEvent) {
  try {
    var domRef = (0, _utils.findDomRefAtPos)(view.state.selection.from, view.domAtPos.bind(view));
    if (domRef instanceof HTMLElement) {
      // If element is not a paragraph, we need to find the closest paragraph parent
      if (domRef.nodeName !== 'P') {
        var paragraphRef = domRef.closest('p');
        if (paragraphRef) {
          return paragraphRef;
        }
      }
      return domRef;
    } else {
      throw new Error('Invalid DOM reference');
    }
  } catch (error) {
    if (dispatchAnalyticsEvent) {
      var payload = {
        action: _analytics.ACTION.ERRORED,
        actionSubject: _analytics.ACTION_SUBJECT.PICKER,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.PICKER_MEDIA,
        eventType: _analytics.EVENT_TYPE.OPERATIONAL,
        attributes: {
          error: 'Error getting DOM reference from selection'
        }
      };
      dispatchAnalyticsEvent(payload);
    }
  }
};

/**
 * A custom TabPanel that is non-focusable.
 */
var CustomTabPanel = function CustomTabPanel(_ref) {
  var children = _ref.children;
  var tabPanelAttributes = (0, _tabs.useTabPanel)();
  return (
    /*#__PURE__*/
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    _react.default.createElement(_compiled.Box, (0, _extends2.default)({
      paddingBlockEnd: "space.150"
    }, tabPanelAttributes, {
      tabIndex: -1
    }), children)
  );
};
var MediaInsertPicker = exports.MediaInsertPicker = function MediaInsertPicker(_ref2) {
  var _useSharedPluginState, _useSharedPluginState2, _useSharedPluginState3;
  var api = _ref2.api,
    editorView = _ref2.editorView,
    dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
    popupsMountPoint = _ref2.popupsMountPoint,
    popupsBoundariesElement = _ref2.popupsBoundariesElement,
    popupsScrollableElement = _ref2.popupsScrollableElement,
    _closeMediaInsertPicker = _ref2.closeMediaInsertPicker,
    insertMediaSingle = _ref2.insertMediaSingle,
    insertExternalMediaSingle = _ref2.insertExternalMediaSingle,
    insertFile = _ref2.insertFile;
  var _ref3 = (_useSharedPluginState = (_useSharedPluginState2 = (0, _hooks.useSharedPluginState)(api, ['mediaInsert'])) === null || _useSharedPluginState2 === void 0 ? void 0 : _useSharedPluginState2.mediaInsertState) !== null && _useSharedPluginState !== void 0 ? _useSharedPluginState : {},
    isOpen = _ref3.isOpen,
    mountInfo = _ref3.mountInfo;
  var targetRef;
  var mountPoint;
  if (mountInfo) {
    targetRef = mountInfo.ref;
    mountPoint = mountInfo.mountPoint;
  } else {
    // If targetRef is undefined, target the selection in the editor
    targetRef = getDomRefFromSelection(editorView, dispatchAnalyticsEvent);
    mountPoint = popupsMountPoint;
  }
  var mediaProvider = (_useSharedPluginState3 = (0, _hooks.useSharedPluginState)(api, ['media'])) === null || _useSharedPluginState3 === void 0 || (_useSharedPluginState3 = _useSharedPluginState3.mediaState) === null || _useSharedPluginState3 === void 0 ? void 0 : _useSharedPluginState3.mediaProvider;
  var intl = (0, _reactIntlNext.useIntl)();
  var focusEditor = (0, _useFocusEditor.useFocusEditor)({
    editorView: editorView
  });
  var _useUnholyAutofocus = (0, _useUnholyAutofocus2.useUnholyAutofocus)(),
    autofocusRef = _useUnholyAutofocus.autofocusRef,
    onPositionCalculated = _useUnholyAutofocus.onPositionCalculated;
  if (!isOpen || !mediaProvider) {
    return null;
  }
  var handleClose = function handleClose(exitMethod) {
    return function (event) {
      event.preventDefault();
      if (dispatchAnalyticsEvent) {
        var payload = {
          action: _analytics.ACTION.CLOSED,
          actionSubject: _analytics.ACTION_SUBJECT.PICKER,
          actionSubjectId: _analytics.ACTION_SUBJECT_ID.PICKER_MEDIA,
          eventType: _analytics.EVENT_TYPE.UI,
          attributes: {
            exitMethod: exitMethod
          }
        };
        dispatchAnalyticsEvent(payload);
      }
      _closeMediaInsertPicker();
      focusEditor();
    };
  };
  return /*#__PURE__*/_react.default.createElement(PopupWithListeners, {
    ariaLabel: intl.formatMessage(_messages.mediaInsertMessages.mediaPickerPopupAriaLabel),
    offset: [0, 12],
    target: targetRef,
    zIndex: _editorSharedStyles.akEditorFloatingDialogZIndex,
    fitHeight: 390,
    fitWidth: 340,
    mountTo: mountPoint,
    boundariesElement: popupsBoundariesElement,
    handleClickOutside: handleClose(_analytics.INPUT_METHOD.MOUSE),
    handleEscapeKeydown: handleClose(_analytics.INPUT_METHOD.KEYBOARD),
    scrollableElement: popupsScrollableElement,
    preventOverflow: true,
    onPositionCalculated: onPositionCalculated,
    focusTrap: true
  }, /*#__PURE__*/_react.default.createElement(_ui.PlainOutsideClickTargetRefContext.Consumer, null, function (setOutsideClickTargetRef) {
    return /*#__PURE__*/_react.default.createElement(_MediaInsertWrapper.MediaInsertWrapper, {
      ref: setOutsideClickTargetRef
    }, /*#__PURE__*/_react.default.createElement(_tabs.default, {
      id: "media-insert-tab-navigation"
    }, /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      paddingBlockEnd: "space.150"
    }, /*#__PURE__*/_react.default.createElement(_tabs.TabList, null, /*#__PURE__*/_react.default.createElement(_tabs.Tab, null, intl.formatMessage(_messages.mediaInsertMessages.fileTabTitle)), /*#__PURE__*/_react.default.createElement(_tabs.Tab, null, intl.formatMessage(_messages.mediaInsertMessages.linkTabTitle)))), /*#__PURE__*/_react.default.createElement(CustomTabPanel, null, /*#__PURE__*/_react.default.createElement(_LocalMedia.LocalMedia, {
      ref: autofocusRef,
      mediaProvider: mediaProvider,
      closeMediaInsertPicker: function closeMediaInsertPicker() {
        _closeMediaInsertPicker();
        focusEditor();
      },
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      insertFile: insertFile
    })), /*#__PURE__*/_react.default.createElement(CustomTabPanel, null, (0, _platformFeatureFlags.fg)('platform_editor_media_from_url_remove_form') ? /*#__PURE__*/_react.default.createElement(_MediaFromURL.MediaFromURL, {
      mediaProvider: mediaProvider,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      closeMediaInsertPicker: function closeMediaInsertPicker() {
        _closeMediaInsertPicker();
        focusEditor();
      },
      insertMediaSingle: insertMediaSingle,
      insertExternalMediaSingle: insertExternalMediaSingle
    }) : /*#__PURE__*/_react.default.createElement(_MediaFromURLWithForm.MediaFromURLWithForm, {
      mediaProvider: mediaProvider,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      closeMediaInsertPicker: function closeMediaInsertPicker() {
        _closeMediaInsertPicker();
        focusEditor();
      },
      insertMediaSingle: insertMediaSingle,
      insertExternalMediaSingle: insertExternalMediaSingle
    }))));
  }));
};