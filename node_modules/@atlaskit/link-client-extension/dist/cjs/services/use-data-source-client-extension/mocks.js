"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockExecuteActionResponseFailure = exports.mockExecuteActionResponse = exports.mockDatasourceDetailsResponse = exports.mockDatasourceDataResponseWithSchema = exports.mockDatasourceDataResponse = exports.mockDatasourceDataNoActionsResponse = exports.mockActionsDiscoveryResponse = exports.mockActionsDiscoveryEmptyResponse = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _linkingTypes = require("@atlaskit/linking-types");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var mockDatasourceDataResponse = exports.mockDatasourceDataResponse = {
  meta: {
    key: 'jira-object-provider',
    access: 'granted',
    auth: [],
    definitionId: 'object-resolver-service',
    product: 'jira',
    visibility: 'restricted',
    extensionKey: 'jira-object-provider',
    providerName: 'Jira',
    destinationObjectTypes: ['issue'],
    objectTypesEntity: 'work-item'
  },
  data: {
    totalCount: 1234,
    items: [{
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10025'
      },
      id: {
        data: 'EDM-12'
      },
      description: {
        data: 'Design datasource feature'
      },
      createdAt: {
        data: '2023-01-22T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Sasha'
        }
      },
      status: {
        data: {
          text: 'In Progress',
          style: {
            appearance: 'inprogress'
          }
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10026'
      },
      id: {
        data: 'EDM-14'
      },
      description: {
        data: 'Implement datasource feature'
      },
      createdAt: {
        data: '2023-03-01T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Hana'
        }
      },
      status: {
        data: {
          text: 'To Do',
          style: {
            appearance: 'new'
          }
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10027'
      },
      id: {
        data: 'EDM-15'
      },
      description: {
        data: 'Add Jira Provider'
      },
      createdAt: {
        data: '2023-03-31T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Princey'
        }
      },
      status: {
        data: {
          text: 'To Do'
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10028'
      },
      id: {
        data: 'EDM-16'
      },
      description: {
        data: 'Plan team party'
      },
      createdAt: {
        data: '2023-05-01T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Nidhin'
        }
      },
      status: {
        data: {
          text: 'Done',
          style: {
            appearance: 'success'
          }
        }
      }
    }],
    nextPageCursor: 'c3RhcnRBdD01'
  }
};
var mockDatasourceDataNoActionsResponse = exports.mockDatasourceDataNoActionsResponse = {
  meta: {
    key: 'jira-object-provider',
    access: 'granted',
    auth: [],
    definitionId: 'object-resolver-service',
    product: 'jira',
    visibility: 'restricted',
    extensionKey: 'jira-object-provider',
    providerName: 'Jira',
    destinationObjectTypes: ['issue']
  },
  data: {
    totalCount: 1234,
    items: [{
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10025'
      },
      id: {
        data: 'EDM-12'
      },
      description: {
        data: 'Design datasource feature'
      },
      createdAt: {
        data: '2023-01-22T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Sasha'
        }
      },
      status: {
        data: {
          text: 'In Progress',
          style: {
            appearance: 'inprogress'
          }
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10026'
      },
      id: {
        data: 'EDM-14'
      },
      description: {
        data: 'Implement datasource feature'
      },
      createdAt: {
        data: '2023-03-01T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Hana'
        }
      },
      status: {
        data: {
          text: 'To Do',
          style: {
            appearance: 'new'
          }
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10027'
      },
      id: {
        data: 'EDM-15'
      },
      description: {
        data: 'Add Jira Provider'
      },
      createdAt: {
        data: '2023-03-31T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Princey'
        }
      },
      status: {
        data: {
          text: 'To Do'
        }
      }
    }, {
      ari: {
        data: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10028'
      },
      id: {
        data: 'EDM-16'
      },
      description: {
        data: 'Plan team party'
      },
      createdAt: {
        data: '2023-05-01T01:30:00.000-05:00'
      },
      assigned: {
        data: {
          displayName: 'Nidhin'
        }
      },
      status: {
        data: {
          text: 'Done',
          style: {
            appearance: 'success'
          }
        }
      }
    }],
    nextPageCursor: 'c3RhcnRBdD01'
  }
};
var mockDatasourceDetailsResponse = exports.mockDatasourceDetailsResponse = {
  meta: {
    key: 'jira-object-provider',
    access: 'granted',
    auth: [],
    definitionId: 'object-resolver-service',
    product: 'jira',
    visibility: 'restricted',
    extensionKey: 'jira-object-provider',
    providerName: 'Jira',
    destinationObjectTypes: ['issue']
  },
  data: {
    ari: 'ari:cloud:linking-platform:datasource/12e74246-a3f1-46c1-9fd9-8d952aa9f12f',
    id: '12e74246-a3f1-46c1-9fd9-8d952aa9f12f',
    name: 'JQL Datasource',
    description: 'Fetches Issues using JQL',
    parameters: [{
      key: 'cloudId',
      type: 'string',
      description: 'Cloud Id'
    }, {
      key: 'jql',
      type: 'string',
      description: 'JQL query to retrieve list of issues'
    }],
    schema: {
      properties: [{
        key: 'id',
        title: '',
        type: 'string'
      }, {
        key: 'issue',
        title: 'Key',
        type: 'link'
      }, {
        key: 'type',
        type: 'icon',
        title: 'Type'
      }, {
        key: 'summary',
        title: 'Summary',
        type: 'link'
      }, {
        key: 'assignee',
        title: 'Assignee',
        type: 'user'
      }, {
        key: 'priority',
        title: 'P',
        type: 'icon'
      }, {
        key: 'labels',
        title: 'Labels',
        type: 'tag',
        isList: true
      }, {
        key: 'status',
        title: 'Status',
        type: 'status'
      }, {
        key: 'created',
        title: 'Created',
        type: 'string'
      }, {
        key: 'due',
        title: 'Due Date',
        type: 'string'
      }],
      defaultProperties: ['type', 'issue', 'summary', 'assignee', 'priority', 'labels', 'status', 'created']
    }
  }
};
var mockDatasourceDataResponseWithSchema = exports.mockDatasourceDataResponseWithSchema = _objectSpread(_objectSpread({}, mockDatasourceDataResponse), {}, {
  data: _objectSpread(_objectSpread({}, mockDatasourceDataResponse.data), {}, {
    schema: {
      properties: mockDatasourceDetailsResponse.data.schema.properties
    }
  })
});
var mockActionsDiscoveryResponse = exports.mockActionsDiscoveryResponse = {
  actions: [{
    actionKey: 'atlassian:work-item:update:summary',
    description: 'Updates issue summary',
    fieldKey: 'summary',
    integrationKey: 'jira',
    type: 'string'
  }, {
    integrationKey: 'jira',
    actionKey: 'atlassian:work-item:update:priority',
    fieldKey: 'priority',
    type: 'number',
    inputs: {
      priority: {
        type: 'string',
        fetchAction: {
          actionKey: 'atlassian:work-item:get:priorities',
          integrationKey: 'jira',
          fieldKey: 'priority',
          type: 'string',
          inputs: {
            issueId: {
              type: 'string'
            }
          }
        }
      }
    }
  }, {
    integrationKey: 'jira',
    actionKey: 'atlassian:work-item:update:status',
    type: 'string',
    fieldKey: 'status',
    inputs: {
      status: {
        type: 'string',
        fetchAction: {
          actionKey: 'atlassian:work-item:get:statuses',
          integrationKey: 'jira',
          fieldKey: 'status',
          type: 'string',
          inputs: {
            issueId: {
              type: 'string'
            }
          }
        }
      }
    }
  }],
  permissions: {
    data: [{
      ari: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10025',
      fieldKey: 'summary',
      isEditable: true
    }, {
      ari: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10030',
      fieldKey: 'summary',
      isEditable: true
    }, {
      ari: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10025',
      fieldKey: 'status',
      isEditable: true
    }, {
      ari: 'ari:cloud:jira:3ac63b37-9bca-435e-9840-eff6f8739dba:issue/10030',
      fieldKey: 'status',
      isEditable: true
    }]
  }
};
var mockActionsDiscoveryEmptyResponse = exports.mockActionsDiscoveryEmptyResponse = {
  actions: [],
  permissions: {
    data: []
  }
};
var mockExecuteActionResponse = exports.mockExecuteActionResponse = {
  operationStatus: _linkingTypes.ActionOperationStatus.SUCCESS,
  errors: []
};
var mockExecuteActionResponseFailure = exports.mockExecuteActionResponseFailure = {
  operationStatus: _linkingTypes.ActionOperationStatus.FAILURE,
  errors: [{
    message: 'summary: You must specify a summary of the issue.',
    code: 400
  }]
};