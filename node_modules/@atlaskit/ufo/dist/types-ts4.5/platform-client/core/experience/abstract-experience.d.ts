import { type CustomData, type ExperienceData, type ExperienceMetrics, type PerformanceConfig, type ReportedTimings, type SubscribeCallback, type Timing } from '../../../types';
import { type UFOExperienceStateType } from './experience-state';
import { ExperiencePerformanceTypes, type ExperienceTypes } from './experience-types';
export declare const perfNowOrTimestamp: (timestamp?: number) => number;
export type AbstractExperienceConfig = {
    category?: string | null;
    until?: Function | null;
    type: ExperienceTypes;
    performanceType: ExperiencePerformanceTypes;
    platform?: {
        component: string;
    };
    featureFlags?: string[];
    isSSROutputAsFMP?: boolean;
    timings?: Timing[];
    performanceConfig?: PerformanceConfig;
};
export type EndStateConfig = {
    force?: boolean;
    metadata?: CustomData;
};
export declare class UFOAbstractExperience {
    state: UFOExperienceStateType;
    id: string;
    instanceId: null | string;
    parent: null | UFOAbstractExperience;
    category: null | string;
    type: ExperienceTypes;
    performanceType: ExperiencePerformanceTypes;
    metadata: CustomData;
    onDoneCallbacks: never[];
    childExperiences: never[];
    featureFlags: string[];
    timings: Timing[];
    explicitTimings: ReportedTimings;
    isSSROutputAsFMP: boolean;
    handleDoneBind: SubscribeCallback;
    uuid: string | null;
    until: Function | null;
    private _until;
    private pageVisibleState;
    metrics: ExperienceMetrics;
    performanceConfig: PerformanceConfig;
    config: AbstractExperienceConfig;
    constructor(id: string, config: AbstractExperienceConfig, instanceId?: null | string);
    transition(newState: UFOExperienceStateType, timestamp?: number): Promise<boolean>;
    start(startTime?: number): Promise<void>;
    mark(name: string, timestamp?: number): void;
    private _mark;
    markFMP(timestamp?: number): void;
    markInlineResponse(timestamp?: number): void;
    private setPageVisibleStateToMixed;
    private _isManualStateEnabled;
    private _validateManualState;
    private switchToEndState;
    success(config?: EndStateConfig): Promise<boolean | null>;
    failure(config?: EndStateConfig): Promise<boolean | null>;
    abort(config?: EndStateConfig): Promise<boolean | null>;
    addMetadata(data: CustomData): void;
    private _handleDoneExperience;
    getId(): Promise<string>;
    exportData(): Promise<ExperienceData>;
    private _reset;
}
