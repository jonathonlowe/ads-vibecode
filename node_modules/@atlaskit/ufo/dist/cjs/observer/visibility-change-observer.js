"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visibilityChangeObserver = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _windowHelper = require("../platform-client/utils/window-helper");
var VisibilityChangeObserver = /*#__PURE__*/function () {
  function VisibilityChangeObserver() {
    var _this = this;
    (0, _classCallCheck2.default)(this, VisibilityChangeObserver);
    (0, _defineProperty2.default)(this, "started", false);
    (0, _defineProperty2.default)(this, "observers", []);
    (0, _defineProperty2.default)(this, "broadcast", function () {
      _this.observers.forEach(function (fn) {
        return fn();
      });
      _this.observers = [];
    });
  }
  return (0, _createClass2.default)(VisibilityChangeObserver, [{
    key: "start",
    value: function start() {
      if (this.started) {
        return;
      }
      this.started = true;
      document.addEventListener('visibilitychange', this.broadcast);
      /**
       * According to https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event
       * Safari doesnâ€™t fire visibilitychange as expected when the value of the visibilityState property transitions to hidden;
       * so for that case, you need to also include code to listen for the pagehide event.
       */
      if ((0, _windowHelper.isWindowObjectAvailable)()) {
        window.addEventListener('pagehide', this.broadcast);
      }
    }
  }, {
    key: "subscribe",
    value: function subscribe(callback) {
      this.observers.push(callback);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(callback) {
      this.observers = this.observers.filter(function (fn) {
        return fn !== callback;
      });
    }
  }]);
}();
var visibilityChangeObserver = exports.visibilityChangeObserver = new VisibilityChangeObserver();