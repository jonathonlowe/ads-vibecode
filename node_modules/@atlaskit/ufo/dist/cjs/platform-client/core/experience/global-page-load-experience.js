"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalPageLoadExperience = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _untilHelpers = require("../../utils/until-helpers");
var _abstractExperience = require("./abstract-experience");
var _experienceTypes = require("./experience-types");
var _pageSegmentExperienceTypes = require("./page-segment-experience-types");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var UFOGlobalPageLoadExperience = /*#__PURE__*/function (_UFOAbstractExperienc) {
  function UFOGlobalPageLoadExperience() {
    var _this;
    (0, _classCallCheck2.default)(this, UFOGlobalPageLoadExperience);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, UFOGlobalPageLoadExperience, [].concat(args));
    (0, _defineProperty2.default)(_this, "loadingPageLoadId", 'UNKNOWN');
    (0, _defineProperty2.default)(_this, "type", _experienceTypes.ExperienceTypes.Load);
    (0, _defineProperty2.default)(_this, "performanceType", _experienceTypes.ExperiencePerformanceTypes.PageLoad);
    (0, _defineProperty2.default)(_this, "initial", true);
    return _this;
  }
  (0, _inherits2.default)(UFOGlobalPageLoadExperience, _UFOAbstractExperienc);
  return (0, _createClass2.default)(UFOGlobalPageLoadExperience, [{
    key: "startPageLoad",
    value: function startPageLoad(id) {
      var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var startTime = arguments.length > 2 ? arguments[2] : undefined;
      var result = _superPropGet(UFOGlobalPageLoadExperience, "start", this, 3)([initial ? 0 : (0, _abstractExperience.perfNowOrTimestamp)(startTime)]);
      this.setPageLoadId(id);
      this.initial = initial;
      return result;
    }
  }, {
    key: "updateConfig",
    value: function updateConfig(config) {
      Object.assign(this.config, config);
    }
  }, {
    key: "setPageLoadId",
    value: function setPageLoadId(id) {
      this.loadingPageLoadId = id;
    }
  }, {
    key: "getId",
    value: function () {
      var _getId = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.loadingPageLoadId);
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getId() {
        return _getId.apply(this, arguments);
      }
      return getId;
    }()
  }, {
    key: "exportData",
    value: function () {
      var _exportData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var data;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _superPropGet(UFOGlobalPageLoadExperience, "exportData", this, 3)([]);
            case 2:
              data = _context2.sent;
              return _context2.abrupt("return", _objectSpread(_objectSpread({}, data), {}, {
                initial: this.initial
              }));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function exportData() {
        return _exportData.apply(this, arguments);
      }
      return exportData;
    }()
  }]);
}(_abstractExperience.UFOAbstractExperience);
var GlobalPageLoadExperience = exports.GlobalPageLoadExperience = new UFOGlobalPageLoadExperience('UFO_GLOBAL_PAGE_LOAD', {
  type: _experienceTypes.ExperienceTypes.Load,
  performanceType: _experienceTypes.ExperiencePerformanceTypes.PageLoad,
  // this should come from global config
  until: (0, _untilHelpers.untilAll)([{
    category: _pageSegmentExperienceTypes.PageSegmentExperienceTypes.PRODUCT
  }])
});