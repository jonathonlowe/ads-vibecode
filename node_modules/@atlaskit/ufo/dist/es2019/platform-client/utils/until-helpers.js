import { ufolog } from '../../logger';
import { UFOExperienceState } from '../core';
const isUntilExperience = until => {
  return until.experience !== undefined;
};
const isUntilCategory = until => {
  return until.category !== undefined;
};
export const untilAll = deps => () => {
  const notMet = [...deps];
  return data => {
    if (notMet.length > 0) {
      const doneIndexes = notMet.reduce((acc, dep, i) => {
        // validation logic
        if (isUntilExperience(dep) && dep.experience.uuid === data.uuid) {
          acc.push(i);
        } else if (isUntilCategory(dep) && dep.category === data.category) {
          acc.push(i);
        }
        return acc;
      }, []);
      const priorityStateFound = data.state === UFOExperienceState.ABORTED || data.state === UFOExperienceState.FAILED;
      if (priorityStateFound) {
        notMet.length = 0;
        return {
          done: true,
          state: data.state
        };
      }
      doneIndexes.reverse().forEach(i => {
        notMet.splice(i, 1);
      });
      ufolog('untilAll deps left:', notMet.length, notMet);
      if (notMet.length === 0) {
        return {
          done: true,
          state: UFOExperienceState.SUCCEEDED
        };
      }
    }
    return {
      done: false
    };
  };
};