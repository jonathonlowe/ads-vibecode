import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { untilAll } from '../../utils/until-helpers';
import { perfNowOrTimestamp, UFOAbstractExperience } from './abstract-experience';
import { ExperiencePerformanceTypes, ExperienceTypes } from './experience-types';
import { PageSegmentExperienceTypes } from './page-segment-experience-types';
class UFOGlobalPageLoadExperience extends UFOAbstractExperience {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "loadingPageLoadId", 'UNKNOWN');
    _defineProperty(this, "type", ExperienceTypes.Load);
    _defineProperty(this, "performanceType", ExperiencePerformanceTypes.PageLoad);
    _defineProperty(this, "initial", true);
  }
  startPageLoad(id, initial = false, startTime) {
    const result = super.start(initial ? 0 : perfNowOrTimestamp(startTime));
    this.setPageLoadId(id);
    this.initial = initial;
    return result;
  }
  updateConfig(config) {
    Object.assign(this.config, config);
  }
  setPageLoadId(id) {
    this.loadingPageLoadId = id;
  }
  async getId() {
    return this.loadingPageLoadId;
  }
  async exportData() {
    const data = await super.exportData();
    return {
      ...data,
      initial: this.initial
    };
  }
}
export const GlobalPageLoadExperience = new UFOGlobalPageLoadExperience('UFO_GLOBAL_PAGE_LOAD', {
  type: ExperienceTypes.Load,
  performanceType: ExperiencePerformanceTypes.PageLoad,
  // this should come from global config
  until: untilAll([{
    category: PageSegmentExperienceTypes.PRODUCT
  }])
});