import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { v4 as uuidv4 } from 'uuid';
import { UFO_EXPERIMENTAL_BUILD_VERSION } from '../../../buildVersion';
import { experiencePayloadEvent, getGlobalEventStream, subscribeEvent, unsubscribeEvent } from '../../../global-stream-buffer';
import { ufolog, ufowarn } from '../../../logger';
import { visibilityChangeObserver } from '../../../observer/visibility-change-observer';
import { FMP_MARK, INLINE_RESPONSE_MARK, PageVisibleState, SUBSCRIBE_ALL } from '../../../types';
import { roundPerfNow } from '../../utils/round-perf-now';
import { isWindowObjectAvailable } from '../../utils/window-helper';
import { UFOExperienceState } from './experience-state';
import { canTransition } from './experience-state-transitions';
import { ExperiencePerformanceTypes } from './experience-types';
var getPageVisibleState = function getPageVisibleState() {
  return !isWindowObjectAvailable() || !window.document || window.document.visibilityState === 'visible' ? PageVisibleState.VISIBLE : PageVisibleState.HIDDEN;
};
export var perfNowOrTimestamp = function perfNowOrTimestamp(timestamp) {
  if (timestamp !== undefined) {
    return ~~timestamp;
  }
  return roundPerfNow();
};
export var UFOAbstractExperience = /*#__PURE__*/function () {
  function UFOAbstractExperience(id, config) {
    var _this = this;
    var instanceId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    _classCallCheck(this, UFOAbstractExperience);
    _defineProperty(this, "state", UFOExperienceState.NOT_STARTED);
    _defineProperty(this, "instanceId", null);
    // for concurrent
    _defineProperty(this, "parent", null);
    _defineProperty(this, "category", null);
    _defineProperty(this, "metadata", {});
    _defineProperty(this, "onDoneCallbacks", []);
    _defineProperty(this, "childExperiences", []);
    _defineProperty(this, "explicitTimings", {});
    // @todo move to page load experience when proper classes/inheritance prepared
    _defineProperty(this, "isSSROutputAsFMP", false);
    _defineProperty(this, "uuid", null);
    _defineProperty(this, "_until", null);
    _defineProperty(this, "metrics", {
      startTime: null,
      endTime: null,
      marks: []
    });
    _defineProperty(this, "performanceConfig", {});
    _defineProperty(this, "setPageVisibleStateToMixed", function () {
      _this.pageVisibleState = PageVisibleState.MIXED;
      visibilityChangeObserver.unsubscribe(_this.setPageVisibleStateToMixed);
    });
    this.id = id;
    this.category = (config === null || config === void 0 ? void 0 : config.category) || null;
    this.until = (config === null || config === void 0 ? void 0 : config.until) || null;
    this.instanceId = instanceId;
    this.handleDoneBind = this._handleDoneExperience.bind(this);
    this.type = config.type;
    this.performanceType = config.performanceType;
    this.performanceConfig = config.performanceConfig || {};
    this.config = config;
    this.pageVisibleState = getPageVisibleState();
    this.featureFlags = config.featureFlags || [];
    this.timings = config.timings || [];
    if (config.performanceType === ExperiencePerformanceTypes.PageLoad || config.performanceType === ExperiencePerformanceTypes.PageSegmentLoad) {
      this.isSSROutputAsFMP = config.isSSROutputAsFMP || false;
    }
  }
  return _createClass(UFOAbstractExperience, [{
    key: "transition",
    value: function () {
      var _transition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newState, timestamp) {
        var data;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              ufolog('async transition', this.id, this.state.id, newState.id);
              if (!canTransition(this.state, newState)) {
                _context.next = 15;
                break;
              }
              ufolog("TRANSITION: ".concat(this.id, " from ").concat(this.state.id, " to ").concat(newState.id, " successful"), this.state.final, !newState.final);
              if (newState === UFOExperienceState.STARTED) {
                this._reset();
              }
              if (this.state.final && !newState.final) {
                this.metrics.startTime = perfNowOrTimestamp(timestamp);
                this.uuid = uuidv4();
              }
              this.state = newState;
              if (!newState.final) {
                _context.next = 14;
                break;
              }
              this.metrics.endTime = perfNowOrTimestamp(timestamp);
              if (!this._isManualStateEnabled()) {
                getGlobalEventStream().push(unsubscribeEvent(SUBSCRIBE_ALL, this.handleDoneBind));
              }
              _context.next = 11;
              return this.exportData();
            case 11:
              data = _context.sent;
              ufolog('this.parent', this.parent);
              getGlobalEventStream().push(experiencePayloadEvent(data));
            case 14:
              return _context.abrupt("return", true);
            case 15:
              ufolog("TRANSITION: ".concat(this.id, " from ").concat(this.state.id, " to ").concat(newState.id, " unsuccessful"));
              ufowarn("transition of ".concat(this.id, " from ").concat(this.state, " to ").concat(newState, " is not possible"));
              return _context.abrupt("return", false);
            case 18:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function transition(_x, _x2) {
        return _transition.apply(this, arguments);
      }
      return transition;
    }()
  }, {
    key: "start",
    value: function () {
      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(startTime) {
        var transitionSuccessful;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.transition(UFOExperienceState.STARTED, startTime);
            case 2:
              transitionSuccessful = _context2.sent;
              if (transitionSuccessful) {
                this.pageVisibleState = getPageVisibleState();
                visibilityChangeObserver.subscribe(this.setPageVisibleStateToMixed);
                if (!this._isManualStateEnabled()) {
                  ufolog('subscribed', this.id);
                  getGlobalEventStream().push(subscribeEvent(SUBSCRIBE_ALL, this.handleDoneBind));
                }
              }
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function start(_x3) {
        return _start.apply(this, arguments);
      }
      return start;
    }()
  }, {
    key: "mark",
    value: function mark(name, timestamp) {
      if (name !== FMP_MARK && name !== INLINE_RESPONSE_MARK) {
        this._mark(name, timestamp);
      } else {
        ufowarn('please use markFMP or markInlineResponse for specialised marks');
      }
    }
  }, {
    key: "_mark",
    value: function _mark(name, timestamp) {
      this.metrics.marks.push({
        name: name,
        time: perfNowOrTimestamp(timestamp)
      });
      this.transition(UFOExperienceState.IN_PROGRESS);
    }
  }, {
    key: "markFMP",
    value: function markFMP(timestamp) {
      this._mark(FMP_MARK, timestamp);
    }
  }, {
    key: "markInlineResponse",
    value: function markInlineResponse(timestamp) {
      this._mark(INLINE_RESPONSE_MARK, timestamp);
    }
  }, {
    key: "_isManualStateEnabled",
    value: function _isManualStateEnabled() {
      return this.until === null;
    }
  }, {
    key: "_validateManualState",
    value: function _validateManualState() {
      if (!this._isManualStateEnabled()) {
        ufowarn('manual change of state not allowed as "until" is defined');
        return false;
      }
      return true;
    }
  }, {
    key: "switchToEndState",
    value: function switchToEndState(state, config) {
      if (!(config !== null && config !== void 0 && config.force) && !this._validateManualState()) {
        return null;
      }
      if (config !== null && config !== void 0 && config.metadata) {
        this.addMetadata(config.metadata);
      }
      visibilityChangeObserver.unsubscribe(this.setPageVisibleStateToMixed);
      return this.transition(state);
    }
  }, {
    key: "success",
    value: function () {
      var _success = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(config) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.switchToEndState(UFOExperienceState.SUCCEEDED, config));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function success(_x4) {
        return _success.apply(this, arguments);
      }
      return success;
    }()
  }, {
    key: "failure",
    value: function () {
      var _failure = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(config) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.switchToEndState(UFOExperienceState.FAILED, config));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function failure(_x5) {
        return _failure.apply(this, arguments);
      }
      return failure;
    }()
  }, {
    key: "abort",
    value: function () {
      var _abort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(config) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.switchToEndState(UFOExperienceState.ABORTED, config));
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function abort(_x6) {
        return _abort.apply(this, arguments);
      }
      return abort;
    }()
  }, {
    key: "addMetadata",
    value: function addMetadata(data) {
      Object.assign(this.metadata, data);
    }
  }, {
    key: "_handleDoneExperience",
    value: function _handleDoneExperience(data) {
      ufolog('_handleDoneExperience in', this.id, data.state, data, this._until);
      if (data.state.final) {
        if (this._until !== null) {
          var _this$_until = this._until(data),
            done = _this$_until.done,
            state = _this$_until.state;
          if (done && !this.state.final) {
            this.transition(state);
          }
        }
      }
    }
  }, {
    key: "getId",
    value: function () {
      var _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", this.id);
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function getId() {
        return _getId.apply(this, arguments);
      }
      return getId;
    }()
  }, {
    key: "exportData",
    value: function () {
      var _exportData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getId();
            case 2:
              _context7.t0 = _context7.sent;
              _context7.t1 = this.uuid;
              _context7.t2 = this.type;
              _context7.t3 = UFO_EXPERIMENTAL_BUILD_VERSION || 'unknown';
              _context7.t4 = this.performanceType;
              _context7.t5 = this.category;
              _context7.t6 = this.state;
              _context7.t7 = _objectSpread({}, this.metadata);
              _context7.t8 = _objectSpread({}, this.metrics);
              _context7.t9 = _toConsumableArray(this.childExperiences);
              _context7.t10 = {
                success: !!this.state.success,
                startTime: this.metrics.startTime,
                duration: (this.metrics.endTime || 0) - (this.metrics.startTime || 0)
              };
              _context7.t11 = this.config.platform || null;
              _context7.t12 = this.pageVisibleState;
              _context7.t13 = this.featureFlags;
              _context7.t14 = this.isSSROutputAsFMP;
              _context7.t15 = this.timings;
              _context7.t16 = this.explicitTimings;
              _context7.t17 = this.performanceConfig;
              return _context7.abrupt("return", {
                id: _context7.t0,
                uuid: _context7.t1,
                type: _context7.t2,
                schemaVersion: _context7.t3,
                performanceType: _context7.t4,
                category: _context7.t5,
                state: _context7.t6,
                metadata: _context7.t7,
                metrics: _context7.t8,
                children: _context7.t9,
                result: _context7.t10,
                platform: _context7.t11,
                pageVisibleState: _context7.t12,
                featureFlags: _context7.t13,
                isSSROutputAsFMP: _context7.t14,
                timings: _context7.t15,
                explicitTimings: _context7.t16,
                performanceConfig: _context7.t17
              });
            case 21:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function exportData() {
        return _exportData.apply(this, arguments);
      }
      return exportData;
    }()
  }, {
    key: "_reset",
    value: function _reset() {
      this.parent = null;
      this.metadata = {};
      this.onDoneCallbacks = [];
      this.childExperiences = [];
      this.metrics = {
        startTime: null,
        endTime: null,
        marks: []
      };
      this._until = this.until ? this.until() : null;
    }
  }]);
}();