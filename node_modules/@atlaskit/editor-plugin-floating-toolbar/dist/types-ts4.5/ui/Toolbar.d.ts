/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import type { ExtensionProvider } from '@atlaskit/editor-common/extensions';
import type { Item } from '@atlaskit/editor-common/floating-toolbar';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { Node } from '@atlaskit/editor-prosemirror/model';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { FloatingToolbarPlugin } from '../floatingToolbarPluginType';
export interface Props {
    items: Array<Item>;
    dispatchCommand: (command?: Function) => void;
    popupsMountPoint?: HTMLElement;
    popupsBoundariesElement?: HTMLElement;
    popupsScrollableElement?: HTMLElement;
    providerFactory?: ProviderFactory;
    className?: string;
    groupLabel?: string;
    focusEditor?: () => void;
    editorView?: EditorView;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
    target?: HTMLElement;
    node: Node;
    extensionsProvider?: Promise<ExtensionProvider>;
    scrollable?: boolean;
    api: ExtractInjectionAPI<FloatingToolbarPlugin> | undefined;
    mediaAssistiveMessage?: string;
    shouldFitContainer?: boolean;
}
type GroupedItems = (Item | Item[])[];
export declare function groupItems(items: Item[]): GroupedItems;
export interface State {
    scrollDisabled: boolean;
    mounted: boolean;
}
declare const _default: React.FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<Props & WrappedComponentProps>;
};
export default _default;
