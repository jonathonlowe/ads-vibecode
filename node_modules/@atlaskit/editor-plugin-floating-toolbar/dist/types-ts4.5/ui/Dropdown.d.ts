/**
 * @jsxRuntime classic
 * @jsx jsx
 * @jsxFrag
 */
import type { ReactElement } from 'react';
import React, { Component } from 'react';
import { jsx } from '@emotion/react';
import type { CommandDispatch, DropdownOptions, ExtensionDropdownOptions, FloatingToolbarButtonSpotlightConfig, FloatingToolbarOverflowDropdownOptions } from '@atlaskit/editor-common/types';
import type { EditorState } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
export interface Props {
    title: string;
    icon?: ReactElement<any>;
    iconBefore?: ReactElement<any>;
    hideExpandIcon?: boolean;
    options: DropdownOptions<Function> | FloatingToolbarOverflowDropdownOptions<Function> | ExtensionDropdownOptions;
    dispatchCommand: (command: Function) => void;
    mountPoint?: HTMLElement;
    boundariesElement?: HTMLElement;
    scrollableElement?: HTMLElement;
    disabled?: boolean;
    tooltip?: string;
    buttonTestId?: string;
    dropdownWidth?: number;
    showSelected?: boolean;
    setDisableParentScroll?: (disable: boolean) => void;
    editorView?: EditorView;
    dropdownListId?: string;
    alignDropdownWithToolbar?: boolean;
    onToggle?: (state: EditorState, dispatch: CommandDispatch | undefined) => boolean;
    onMount?: () => void;
    onClick?: () => void;
    footer?: React.ReactNode;
    /** If true, the component will have pulse onboarding effect around it. */
    pulse?: boolean;
    spotlightConfig?: FloatingToolbarButtonSpotlightConfig;
    shouldFitContainer?: boolean;
}
export interface State {
    isOpen: boolean;
    isOpenedByKeyboard: boolean;
}
export default class Dropdown extends Component<Props, State> {
    state: State;
    triggerRef: React.RefObject<HTMLDivElement>;
    render(): jsx.JSX.Element;
    private makeArrayOptionsFromCallback;
    private renderArrayOptions;
    private toggleOpen;
    private toggleOpenByKeyboard;
    private hide;
    private hideOnEsc;
    private onOpenChanged;
    componentDidUpdate(prevProps: Props, prevState: State): void;
}
