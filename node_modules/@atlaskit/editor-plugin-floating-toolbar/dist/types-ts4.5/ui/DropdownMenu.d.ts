/// <reference types="react" />
import type { WrappedComponentProps } from 'react-intl-next';
import type { ExtensionAPI, ExtensionProvider } from '@atlaskit/editor-common/extensions';
import type { DropdownOptionT, FloatingToolbarOverflowDropdownOptions } from '@atlaskit/editor-common/types';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { ButtonItemProps } from '@atlaskit/menu';
export declare const menuItemDimensions: {
    width: number;
    height: number;
};
export declare const itemSpacing: number;
export interface Props {
    hide: Function;
    dispatchCommand: Function;
    items: Array<DropdownOptionT<Function>> | FloatingToolbarOverflowDropdownOptions<Function>;
    showSelected?: boolean;
    editorView?: EditorView;
}
export type ExtensionProps = {
    extensionApi?: ExtensionAPI;
    extensionProvider?: Promise<ExtensionProvider>;
};
export interface DropdownButtonItemProps extends ButtonItemProps {
    onMouseEnter?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseOver?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseLeave?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseOut?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onFocus?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onBlur?: (event: React.MouseEvent | React.KeyboardEvent) => void;
}
declare const _default: import("react").FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: import("react").ComponentType<Props & WrappedComponentProps>;
};
export default _default;
