/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useContext } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { IconButton } from '@atlaskit/button/new';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { OutsideClickTargetRefContext, withReactEditorViewOuterListeners } from '@atlaskit/editor-common/ui-react';
import { EmojiPicker } from '@atlaskit/emoji';
import EmojiAddIcon from '@atlaskit/icon/core/emoji-add';
import { fg } from '@atlaskit/platform-feature-flags';
import Tooltip from '@atlaskit/tooltip';
import EditorEmojiAddIcon from './EditorEmojiAddIcon';

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
const emojiPickerButtonWrapper = css({
  position: 'relative',
  // helps adjusts position of popup
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors
  button: {
    top: '-1px',
    // adjust position of emoji icon when using the IconButtom component
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
    '&:not([disabled])::after': {
      border: 'none' // remove blue border when picker has been selected
    }
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors
  svg: {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors
    path: {
      // adjust size of emoji icon when using the IconButtom component, otherwise it's too small
      transformOrigin: '50% 50%',
      transform: 'scale(1.14)'
    }
  }
});

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
const emojiPickerButtonWrapperVisualRefresh = css({
  position: 'relative',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors
  button: {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
    '&:not([disabled])::after': {
      border: 'none' // remove blue border when picker has been selected
    }
  }
});
const EmojiPickerWithProvider = props => {
  const {
    emojiState
  } = useSharedPluginState(props.pluginInjectionApi, ['emoji']);
  const setOutsideClickTargetRef = useContext(OutsideClickTargetRefContext);
  const emojiProvider = emojiState !== null && emojiState !== void 0 && emojiState.emojiProvider ? Promise.resolve(emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider) : undefined;
  if (!emojiProvider) {
    return null;
  }
  return jsx(EmojiPicker, {
    emojiProvider: emojiProvider,
    onSelection: props.updateEmoji,
    onPickerRef: setOutsideClickTargetRef
  });
};
const EmojiPickerWithListener = withReactEditorViewOuterListeners(EmojiPickerWithProvider);
export const EmojiPickerButton = props => {
  const buttonRef = React.useRef(null);
  const [isPopupOpen, setIsPopupOpen] = React.useState(false);
  React.useEffect(() => {
    if (props.setDisableParentScroll) {
      props.setDisableParentScroll(isPopupOpen);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isPopupOpen]);
  const togglePopup = useCallback(() => {
    setIsPopupOpen(!isPopupOpen);
  }, [setIsPopupOpen, isPopupOpen]);
  const updateEmoji = emoji => {
    setIsPopupOpen(false);
    props.onChange && props.onChange(emoji);
    requestAnimationFrame(() => {
      var _props$editorView;
      (_props$editorView = props.editorView) === null || _props$editorView === void 0 ? void 0 : _props$editorView.focus();
    });
  };
  const isDetachedElement = useCallback(el => !document.body.contains(el), []);
  const handleEmojiClickOutside = useCallback(e => {
    // Ignore click events for detached elements.
    // Workaround for CETI-240 - where two onClicks fire - one when the upload button is
    // still in the document, and one once it's detached. Does not always occur, and
    // may be a side effect of a react render optimisation
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    if (e && e.target && !isDetachedElement(e.target)) {
      togglePopup();
    }
  }, [isDetachedElement, togglePopup]);
  const handleEmojiPressEscape = useCallback(() => {
    var _buttonRef$current;
    setIsPopupOpen(false);
    (_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.focus();
  }, [setIsPopupOpen, buttonRef]);
  const renderPopup = () => {
    if (!buttonRef.current || !isPopupOpen) {
      return;
    }
    return jsx(Popup, {
      target: buttonRef.current
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      mountTo: props.setDisableParentScroll ? props.mountPoint : buttonRef.current.parentElement,
      fitHeight: 350,
      fitWidth: 350,
      offset: [0, 10]
      // Confluence inline comment editor has z-index: 500
      // if the toolbar is scrollable, this will be mounted in the root editor
      // we need an index of > 500 to display over it
      ,
      zIndex: props.setDisableParentScroll ? 600 : undefined,
      focusTrap: true
    }, jsx(EmojiPickerWithListener, {
      handleEscapeKeydown: handleEmojiPressEscape,
      handleClickOutside: handleEmojiClickOutside,
      pluginInjectionApi: props.pluginInjectionApi,
      updateEmoji: updateEmoji
    }));
  };
  const title = props.title || '';
  return jsx("div", {
    css:
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg('platform-visual-refresh-icons') ? emojiPickerButtonWrapperVisualRefresh : emojiPickerButtonWrapper
  }, jsx(Tooltip, {
    content: title,
    position: "top"
  }, jsx(IconButton, {
    appearance: "subtle",
    key: props.idx,
    onClick: togglePopup,
    ref: buttonRef,
    isSelected: props.isSelected,
    label: title,
    spacing: "compact",
    icon: () => jsx(EmojiAddIcon, {
      color: "currentColor",
      LEGACY_fallbackIcon: EditorEmojiAddIcon,
      label: "emoji-picker-button",
      spacing: "spacious"
    })
  })), renderPopup());
};