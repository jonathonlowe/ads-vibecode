"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTypeAheadConfig = void 0;
exports.memoize = memoize;
exports.mentionToTypeaheadItem = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _uuid = _interopRequireDefault(require("uuid"));
var _typeAhead = require("@atlaskit/editor-common/type-ahead");
var _utils = require("@atlaskit/editor-common/utils");
var _model = require("@atlaskit/editor-prosemirror/model");
var _utils2 = require("@atlaskit/editor-prosemirror/utils");
var _item = require("@atlaskit/mention/item");
var _resource = require("@atlaskit/mention/resource");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _utils3 = require("../../pm-plugins/utils");
var _InviteItem = _interopRequireWildcard(require("../InviteItem"));
var _analytics = require("./analytics");
var _utils4 = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var createInviteItem = function createInviteItem(_ref) {
  var mentionProvider = _ref.mentionProvider,
    onInviteItemMount = _ref.onInviteItemMount;
  return {
    title: _InviteItem.INVITE_ITEM_DESCRIPTION.id,
    render: function render(_ref2) {
      var isSelected = _ref2.isSelected,
        onClick = _ref2.onClick,
        onHover = _ref2.onHover;
      return /*#__PURE__*/_react.default.createElement(_InviteItem.default, {
        productName: mentionProvider ? mentionProvider.productName : undefined,
        selected: isSelected,
        onMount: onInviteItemMount,
        onMouseEnter: onHover,
        onSelection: onClick,
        userRole: mentionProvider.userRole
      });
    },
    mention: _InviteItem.INVITE_ITEM_DESCRIPTION
  };
};
var withInviteItem = function withInviteItem(_ref3) {
  var mentionProvider = _ref3.mentionProvider,
    firstQueryWithoutResults = _ref3.firstQueryWithoutResults,
    currentQuery = _ref3.currentQuery,
    onInviteItemMount = _ref3.onInviteItemMount;
  return function (mentionItems) {
    var inviteItem = createInviteItem({
      mentionProvider: mentionProvider,
      onInviteItemMount: onInviteItemMount
    });
    var keepInviteItem = (0, _utils4.shouldKeepInviteItem)(currentQuery, firstQueryWithoutResults);
    if (mentionItems.length === 0) {
      return keepInviteItem ? [inviteItem] : [];
    }
    return [].concat((0, _toConsumableArray2.default)(mentionItems), [
    // invite item should be shown at the bottom
    inviteItem]);
  };
};
var mentionToTypeaheadItem = exports.mentionToTypeaheadItem = function mentionToTypeaheadItem(mention) {
  return {
    title: mention.id,
    render: function render(_ref4) {
      var isSelected = _ref4.isSelected,
        onClick = _ref4.onClick,
        onHover = _ref4.onHover;
      return /*#__PURE__*/_react.default.createElement(_item.MentionItem, {
        mention: mention,
        selected: isSelected,
        onMouseEnter: onHover,
        onSelection: onClick
      });
    },
    getCustomComponentHeight: function getCustomComponentHeight() {
      return _item.MENTION_ITEM_HEIGHT;
    },
    mention: mention
  };
};
function memoize(fn) {
  // Cache results here
  var seen = new Map();
  function memoized(mention) {
    // Check cache for hits
    var hit = seen.get(mention.id);
    if (hit) {
      return hit;
    }

    // Generate new result and cache it
    var result = fn(mention);
    seen.set(mention.id, result);
    return result;
  }
  return {
    call: memoized,
    clear: seen.clear.bind(seen)
  };
}
var memoizedToItem = memoize(mentionToTypeaheadItem);
var buildAndSendElementsTypeAheadAnalytics = function buildAndSendElementsTypeAheadAnalytics(fireEvent) {
  return function (_ref5) {
    var query = _ref5.query,
      mentions = _ref5.mentions,
      stats = _ref5.stats;
    var duration = 0;
    var userOrTeamIds = null;
    var teams = null;
    var xProductMentionsLength = 0;
    if (!(0, _utils4.isTeamStats)(stats)) {
      // is from primary mention endpoint which could be just user mentions or user/team mentions
      duration = stats && stats.duration;
      teams = null;
      userOrTeamIds = mentions.map(function (mention) {
        return mention.id;
      });
      xProductMentionsLength = mentions.filter(function (mention) {
        return mention.isXProductUser;
      }).length;
    } else {
      // is from dedicated team-only mention endpoint
      duration = stats && stats.teamMentionDuration;
      userOrTeamIds = null;
      teams = mentions.map(function (mention) {
        return (0, _utils4.isTeamType)(mention.userType) ? {
          teamId: mention.id,
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          includesYou: mention.context.includesYou,
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          memberCount: mention.context.memberCount
        } : null;
      }).filter(function (m) {
        return !!m;
      });
    }
    var payload = (0, _analytics.buildTypeAheadRenderedPayload)(duration, userOrTeamIds, query, teams, xProductMentionsLength);
    fireEvent(payload, 'fabric-elements');
  };
};

/**
 * When a team mention is selected, we render a team link and list of member/user mentions
 * in editor content
 */
var buildNodesForTeamMention = function buildNodesForTeamMention(schema, selectedMention, mentionProvider, sanitizePrivateContent) {
  var nodes = schema.nodes,
    marks = schema.marks;
  var name = selectedMention.name,
    teamId = selectedMention.id,
    accessLevel = selectedMention.accessLevel,
    context = selectedMention.context;

  // build team link
  var defaultTeamLink = "".concat(window.location.origin, "/people/team/").concat(teamId);
  var teamLink = context && context.teamLink ? context.teamLink : defaultTeamLink;
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  var teamLinkNode = (0, _platformFeatureFlags.fg)('team-mention-inline-smartlink') ? schema.nodes.inlineCard.create({
    url: teamLink
  }) :
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  schema.text(name, [marks.link.create({
    href: teamLink
  })]);
  var openBracketText = schema.text('(');
  var closeBracketText = schema.text(')');
  var emptySpaceText = schema.text(' ');
  var inlineNodes = [teamLinkNode, emptySpaceText, openBracketText];
  var members = context && context.members ? context.members : [];
  members.forEach(function (member, index) {
    var name = member.name,
      id = member.id;
    var mentionName = "@".concat(name);
    var text = sanitizePrivateContent ? '' : mentionName;
    if (sanitizePrivateContent && (0, _resource.isResolvingMentionProvider)(mentionProvider)) {
      mentionProvider.cacheMentionName(id, name);
    }
    var userMentionNode = nodes.mention.createChecked({
      text: text,
      id: member.id,
      accessLevel: accessLevel,
      userType: 'DEFAULT',
      localId: (0, _uuid.default)()
    });
    inlineNodes.push(userMentionNode);
    // should not add empty space after the last user mention.
    if (index !== members.length - 1) {
      inlineNodes.push(emptySpaceText);
    }
  });
  inlineNodes.push(closeBracketText);
  return _model.Fragment.fromArray(inlineNodes);
};
var createTypeAheadConfig = exports.createTypeAheadConfig = function createTypeAheadConfig(_ref6) {
  var sanitizePrivateContent = _ref6.sanitizePrivateContent,
    mentionInsertDisplayName = _ref6.mentionInsertDisplayName,
    fireEvent = _ref6.fireEvent,
    HighlightComponent = _ref6.HighlightComponent,
    api = _ref6.api,
    handleMentionsChanged = _ref6.handleMentionsChanged;
  var sessionId = (0, _uuid.default)();
  var firstQueryWithoutResults = null;
  var subscriptionKeys = new Set();
  var typeAhead = {
    id: _typeAhead.TypeAheadAvailableNodes.MENTION,
    trigger: '@',
    // Custom regex must have a capture group around trigger
    // so it's possible to use it without needing to scan through all triggers again
    customRegex: '\\(?(@)',
    getHighlight: function getHighlight(state) {
      var CustomHighlightComponent = HighlightComponent;
      if (CustomHighlightComponent) {
        return /*#__PURE__*/_react.default.createElement(CustomHighlightComponent, null);
      }
      return null;
    },
    getItems: function getItems(_ref7) {
      var _api$contextIdentifie, _api$contextIdentifie2;
      var query = _ref7.query,
        editorState = _ref7.editorState;
      var pluginState = (0, _utils3.getMentionPluginState)(editorState);
      if (!(pluginState !== null && pluginState !== void 0 && pluginState.mentionProvider)) {
        return Promise.resolve([]);
      }
      var mentionProvider = pluginState.mentionProvider;
      var _ref8 = (_api$contextIdentifie = api === null || api === void 0 || (_api$contextIdentifie2 = api.contextIdentifier) === null || _api$contextIdentifie2 === void 0 ? void 0 : _api$contextIdentifie2.sharedState.currentState()) !== null && _api$contextIdentifie !== void 0 ? _api$contextIdentifie : {},
        contextIdentifierProvider = _ref8.contextIdentifierProvider;
      return new Promise(function (resolve, reject) {
        var key = "loadingMentionsForTypeAhead_".concat((0, _uuid.default)());
        var mentionsSubscribeCallback = function mentionsSubscribeCallback(mentions) {
          var resultQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var stats = arguments.length > 2 ? arguments[2] : undefined;
          if (query !== resultQuery) {
            return;
          }
          mentionProvider.unsubscribe(key);
          subscriptionKeys.delete(key);
          var mentionItems = mentions.map(function (mention) {
            return memoizedToItem.call(mention);
          });
          buildAndSendElementsTypeAheadAnalytics(fireEvent)({
            query: query,
            mentions: mentions,
            stats: stats
          });
          if (mentions.length === 0 && firstQueryWithoutResults === null) {
            firstQueryWithoutResults = query;
          }
          if (!mentionProvider.shouldEnableInvite || mentionItems.length > 2) {
            resolve(mentionItems);
          } else {
            var items = withInviteItem({
              mentionProvider: mentionProvider,
              firstQueryWithoutResults: firstQueryWithoutResults || '',
              currentQuery: query,
              onInviteItemMount: function onInviteItemMount() {
                fireEvent((0, _analytics.buildTypeAheadInviteItemViewedPayload)(sessionId, contextIdentifierProvider, mentionProvider.userRole));
              }
            })(mentionItems);
            resolve(items);
          }
        };
        subscriptionKeys.add(key);
        mentionProvider.subscribe(key, mentionsSubscribeCallback, function () {
          if ((0, _experiments.editorExperiment)('platform_editor_offline_editing_web', true)) {
            mentionProvider.unsubscribe(key);
            subscriptionKeys.delete(key);
            reject('FETCH_ERROR');
          }
        });
        mentionProvider.filter(query || '', _objectSpread(_objectSpread({}, contextIdentifierProvider), {}, {
          sessionId: sessionId
        }));
      });
    },
    onOpen: function onOpen() {
      firstQueryWithoutResults = null;
    },
    selectItem: function selectItem(state, item, insert, _ref9) {
      var _api$contextIdentifie3, _api$contextIdentifie4;
      var mode = _ref9.mode,
        stats = _ref9.stats,
        query = _ref9.query,
        sourceListItem = _ref9.sourceListItem;
      var schema = state.schema;
      var pluginState = (0, _utils3.getMentionPluginState)(state);
      var mentionProvider = pluginState.mentionProvider;
      var _item$mention = item.mention,
        id = _item$mention.id,
        name = _item$mention.name,
        nickname = _item$mention.nickname,
        accessLevel = _item$mention.accessLevel,
        userType = _item$mention.userType,
        isXProductUser = _item$mention.isXProductUser;
      var trimmedNickname = nickname && nickname.startsWith('@') ? nickname.slice(1) : nickname;
      var renderName = mentionInsertDisplayName || !trimmedNickname ? name : trimmedNickname;
      var _ref10 = (_api$contextIdentifie3 = api === null || api === void 0 || (_api$contextIdentifie4 = api.contextIdentifier) === null || _api$contextIdentifie4 === void 0 ? void 0 : _api$contextIdentifie4.sharedState.currentState()) !== null && _api$contextIdentifie3 !== void 0 ? _api$contextIdentifie3 : {},
        contextIdentifierProvider = _ref10.contextIdentifierProvider;
      var mentionContext = _objectSpread(_objectSpread({}, contextIdentifierProvider), {}, {
        sessionId: sessionId
      });
      if (mentionProvider && !(0, _utils4.isInviteItem)(item.mention)) {
        mentionProvider.recordMentionSelection(item.mention, mentionContext);
      }

      // use same timer as StatsModifier
      var pickerElapsedTime = stats.startedAt ? performance.now() - stats.startedAt : 0;
      if (mentionProvider && mentionProvider.shouldEnableInvite && (0, _utils4.isInviteItem)(item.mention)) {
        // Don't fire event and the callback with selection by space press
        if (mode !== 'space') {
          fireEvent((0, _analytics.buildTypeAheadInviteItemClickedPayload)(pickerElapsedTime, stats.keyCount.arrowUp, stats.keyCount.arrowDown, sessionId, mode, query, contextIdentifierProvider, mentionProvider.userRole));
          if (mentionProvider.onInviteItemClick) {
            mentionProvider.onInviteItemClick('mention');
          }
        }
        return state.tr;
      }
      var taskListId, taskItemId;
      var taskList = (0, _utils2.findParentNodeOfType)(state.schema.nodes.taskList)(state.selection);
      if (taskList) {
        taskListId = taskList.node.attrs.localId;
        var taskItem = (0, _utils2.findParentNodeOfType)(state.schema.nodes.taskItem)(state.selection);
        if (taskItem) {
          taskItemId = taskItem.node.attrs.localId;
        }
      }
      var mentionLocalId = (0, _uuid.default)();
      if (handleMentionsChanged) {
        if (taskItemId) {
          handleMentionsChanged([{
            type: 'added',
            localId: mentionLocalId,
            id: id,
            taskLocalId: taskItemId
          }]);
        } else {
          handleMentionsChanged([{
            type: 'added',
            localId: mentionLocalId,
            id: id
          }]);
        }
      }
      fireEvent((0, _analytics.buildTypeAheadInsertedPayload)(pickerElapsedTime, stats.keyCount.arrowUp, stats.keyCount.arrowDown, sessionId, mode, item.mention, mentionLocalId, sourceListItem.map(function (x) {
        return x.mention;
      }), query, contextIdentifierProvider, taskListId, taskItemId));
      sessionId = (0, _uuid.default)();
      if (mentionProvider && (0, _utils4.isTeamType)(userType)) {
        return insert(buildNodesForTeamMention(schema, item.mention, mentionProvider, sanitizePrivateContent));
      }
      if (isXProductUser && mentionProvider && mentionProvider.inviteXProductUser) {
        mentionProvider.inviteXProductUser(id, name);
      }

      // Don't insert into document if document data is sanitized.
      var text = sanitizePrivateContent ? '' : "@".concat(renderName);
      if (sanitizePrivateContent && (0, _resource.isResolvingMentionProvider)(mentionProvider)) {
        // Cache (locally) for later rendering
        mentionProvider.cacheMentionName(id, renderName);
      }
      var annotationMarksForPos = (0, _platformFeatureFlags.fg)(
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      'editor_inline_comments_paste_insert_nodes') ? (0, _utils.getAnnotationMarksForPos)(state.tr.selection.$head) : undefined;
      var mentionNode = schema.nodes.mention.createChecked({
        text: text,
        id: id,
        accessLevel: accessLevel,
        userType: userType === 'DEFAULT' ? null : userType,
        localId: mentionLocalId
      }, null,
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      (0, _platformFeatureFlags.fg)('editor_inline_comments_paste_insert_nodes') ? annotationMarksForPos : undefined);
      var space = schema.text(' ',
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      (0, _platformFeatureFlags.fg)('editor_inline_comments_paste_insert_nodes') ? annotationMarksForPos : undefined);
      return insert(_model.Fragment.from([mentionNode, space]));
    },
    dismiss: function dismiss(_ref11) {
      var editorState = _ref11.editorState,
        query = _ref11.query,
        stats = _ref11.stats,
        wasItemInserted = _ref11.wasItemInserted;
      firstQueryWithoutResults = null;
      var pickerElapsedTime = stats.startedAt ? performance.now() - stats.startedAt : 0;
      if (!wasItemInserted) {
        fireEvent((0, _analytics.buildTypeAheadCancelPayload)(pickerElapsedTime, stats.keyCount.arrowUp, stats.keyCount.arrowDown, sessionId, query || ''), 'fabric-elements');
      }
      var pluginState = (0, _utils3.getMentionPluginState)(editorState);
      if (pluginState !== null && pluginState !== void 0 && pluginState.mentionProvider) {
        var mentionProvider = pluginState.mentionProvider;
        var _iterator = _createForOfIteratorHelper(subscriptionKeys),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;
            mentionProvider.unsubscribe(key);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      subscriptionKeys.clear();
      sessionId = (0, _uuid.default)();
    }
  };
  return typeAhead;
};