import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { getInlineNodeViewProducer } from '@atlaskit/editor-common/react-node-view';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { findChildrenByType } from '@atlaskit/editor-prosemirror/utils';
import { SLI_EVENT_TYPE, SMART_EVENT_TYPE } from '@atlaskit/mention/resource';
import { ComponentNames } from '@atlaskit/mention/types';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { MentionNodeView } from '../nodeviews/mention';
import { MentionNodeView as VanillaMentionNodeView } from '../nodeviews/mentionNodeView';
import { MENTION_PROVIDER_REJECTED, MENTION_PROVIDER_UNDEFINED } from '../types';
import { mentionPluginKey } from './key';
import { canMentionBeCreatedInRange } from './utils';
export var ACTIONS = {
  SET_PROVIDER: 'SET_PROVIDER'
};
var PACKAGE_NAME = "@atlaskit/editor-plugin-mentions";
var PACKAGE_VERSION = "4.4.2";
var setProvider = function setProvider(provider) {
  return function (state, dispatch) {
    if (dispatch) {
      dispatch(state.tr.setMeta(mentionPluginKey, {
        action: ACTIONS.SET_PROVIDER,
        params: {
          provider: provider
        }
      }));
    }
    return true;
  };
};
export function createMentionPlugin(_ref) {
  var pmPluginFactoryParams = _ref.pmPluginFactoryParams,
    fireEvent = _ref.fireEvent,
    options = _ref.options,
    api = _ref.api;
  var mentionProvider;
  var sendAnalytics = function sendAnalytics(event, actionSubject, action, attributes) {
    if (event === SLI_EVENT_TYPE || event === SMART_EVENT_TYPE) {
      fireEvent({
        action: action,
        actionSubject: actionSubject,
        eventType: EVENT_TYPE.OPERATIONAL,
        attributes: _objectSpread({
          packageName: PACKAGE_NAME,
          packageVersion: PACKAGE_VERSION,
          componentName: ComponentNames.MENTION
        }, attributes)
      }, 'fabricElements');
    }
  };
  return new SafePlugin({
    key: mentionPluginKey,
    state: {
      init: function init(_, state) {
        var canInsertMention = canMentionBeCreatedInRange(state.selection.from, state.selection.to)(state);
        return {
          canInsertMention: canInsertMention
        };
      },
      apply: function apply(tr, pluginState, oldState, newState) {
        var _ref2 = tr.getMeta(mentionPluginKey) || {
            action: null,
            params: null
          },
          action = _ref2.action,
          params = _ref2.params;
        var hasNewPluginState = false;
        var newPluginState = pluginState;
        var hasPositionChanged = oldState.selection.from !== newState.selection.from || oldState.selection.to !== newState.selection.to;
        if (tr.docChanged || tr.selectionSet && hasPositionChanged) {
          newPluginState = _objectSpread(_objectSpread({}, pluginState), {}, {
            canInsertMention: canMentionBeCreatedInRange(newState.selection.from, newState.selection.to)(newState)
          });
          hasNewPluginState = true;
        }
        switch (action) {
          case ACTIONS.SET_PROVIDER:
            newPluginState = _objectSpread(_objectSpread({}, newPluginState), {}, {
              mentionProvider: params.provider
            });
            hasNewPluginState = true;
            break;
        }
        if (hasNewPluginState) {
          pmPluginFactoryParams.dispatch(mentionPluginKey, newPluginState);
        }
        return newPluginState;
      }
    },
    props: {
      nodeViews: {
        mention: function mention(node, view, getPos, decorations, innerDecorations) {
          return editorExperiment('platform_editor_vanilla_dom', true, {
            exposure: true
          }) ? new VanillaMentionNodeView(node, {
            options: options,
            api: api,
            portalProviderAPI: pmPluginFactoryParams.portalProviderAPI
          }) : getInlineNodeViewProducer({
            pmPluginFactoryParams: pmPluginFactoryParams,
            Component: MentionNodeView,
            extraComponentProps: {
              providerFactory: pmPluginFactoryParams.providerFactory,
              pluginInjectionApi: api,
              options: options
            }
          })(node, view, getPos, decorations);
        }
      }
    },
    view: function view(editorView) {
      var providerHandler = function providerHandler(name, providerPromise) {
        switch (name) {
          case 'mentionProvider':
            if (!providerPromise) {
              fireEvent({
                action: ACTION.ERRORED,
                actionSubject: ACTION_SUBJECT.MENTION,
                actionSubjectId: ACTION_SUBJECT_ID.MENTION_PROVIDER,
                eventType: EVENT_TYPE.OPERATIONAL,
                attributes: {
                  reason: MENTION_PROVIDER_UNDEFINED
                }
              });
              return setProvider(undefined)(editorView.state, editorView.dispatch);
            }
            providerPromise.then(function (provider) {
              if (mentionProvider) {
                mentionProvider.unsubscribe('mentionPlugin');
              }
              mentionProvider = provider;
              setProvider(provider)(editorView.state, editorView.dispatch);
              provider.subscribe('mentionPlugin', undefined, undefined, undefined, undefined, sendAnalytics);
            }).catch(function () {
              fireEvent({
                action: ACTION.ERRORED,
                actionSubject: ACTION_SUBJECT.MENTION,
                actionSubjectId: ACTION_SUBJECT_ID.MENTION_PROVIDER,
                eventType: EVENT_TYPE.OPERATIONAL,
                attributes: {
                  reason: MENTION_PROVIDER_REJECTED
                }
              });
              return setProvider(undefined)(editorView.state, editorView.dispatch);
            });
            break;
        }
        return;
      };
      var providerViaConfig = fg('platform_editor_mention_provider_via_plugin_config');
      if (providerViaConfig && options !== null && options !== void 0 && options.mentionProvider) {
        providerHandler('mentionProvider', options === null || options === void 0 ? void 0 : options.mentionProvider);
      } else {
        pmPluginFactoryParams.providerFactory.subscribe('mentionProvider', providerHandler);
      }
      return {
        destroy: function destroy() {
          if (pmPluginFactoryParams.providerFactory) {
            pmPluginFactoryParams.providerFactory.unsubscribe('mentionProvider', providerHandler);
          }
          if (mentionProvider) {
            mentionProvider.unsubscribe('mentionPlugin');
          }
        },
        update: function update(view, prevState) {
          var newState = view.state;
          if (options !== null && options !== void 0 && options.handleMentionsChanged) {
            var mentionSchema = newState.schema.nodes.mention;
            var mentionNodesBefore = findChildrenByType(prevState.doc, mentionSchema);
            var mentionLocalIdsAfter = new Set(findChildrenByType(newState.doc, mentionSchema).map(function (_ref3) {
              var node = _ref3.node;
              return node.attrs.localId;
            }));
            if (mentionNodesBefore.length > mentionLocalIdsAfter.size) {
              var deletedMentions = mentionNodesBefore.filter(function (_ref4) {
                var node = _ref4.node;
                return !mentionLocalIdsAfter.has(node.attrs.localId);
              }).map(function (_ref5) {
                var node = _ref5.node;
                return {
                  type: 'deleted',
                  id: node.attrs.id,
                  localId: node.attrs.localId
                };
              });
              if (deletedMentions.length > 0) {
                options.handleMentionsChanged(deletedMentions);
              }
            }
          }
        }
      };
    }
  });
}