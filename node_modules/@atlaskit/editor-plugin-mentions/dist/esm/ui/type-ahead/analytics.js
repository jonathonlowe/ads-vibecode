import { ACTION, ACTION_SUBJECT, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { isSpecialMention } from '@atlaskit/mention/resource';
import { isTeamType } from './utils';
var componentName = 'mention';
var emptyQueryResponse = {
  queryLength: 0,
  spaceInQuery: false
};
var extractAttributesFromQuery = function extractAttributesFromQuery(query) {
  if (query) {
    return {
      queryLength: query.length,
      spaceInQuery: query.indexOf(' ') !== -1
    };
  }
  return emptyQueryResponse;
};
export var buildTypeAheadCancelPayload = function buildTypeAheadCancelPayload(duration, upKeyCount, downKeyCount, sessionId, query) {
  var _extractAttributesFro = extractAttributesFromQuery(query),
    queryLength = _extractAttributesFro.queryLength,
    spaceInQuery = _extractAttributesFro.spaceInQuery;
  return {
    action: ACTION.CANCELLED,
    actionSubject: ACTION_SUBJECT.MENTION_TYPEAHEAD,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName: componentName,
      duration: duration,
      queryLength: queryLength,
      spaceInQuery: spaceInQuery,
      upKeyCount: upKeyCount,
      downKeyCount: downKeyCount,
      sessionId: sessionId
    }
  };
};
var getPosition = function getPosition(mentionList, selectedMention) {
  if (mentionList) {
    var index = mentionList.findIndex(function (mention) {
      return mention.id === selectedMention.id;
    });
    return index === -1 ? undefined : index;
  }
  return;
};
var isClicked = function isClicked(insertType) {
  return insertType === 'selected';
};
export var buildTypeAheadInviteItemViewedPayload = function buildTypeAheadInviteItemViewedPayload(sessionId, contextIdentifierProvider, userRole) {
  var _ref = contextIdentifierProvider || {},
    containerId = _ref.containerId,
    objectId = _ref.objectId,
    childObjectId = _ref.childObjectId;
  return {
    action: ACTION.RENDERED,
    actionSubject: ACTION_SUBJECT.INVITE_ITEM,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName: componentName,
      containerId: containerId,
      objectId: objectId,
      childObjectId: childObjectId,
      userRole: userRole,
      sessionId: sessionId
    }
  };
};
export var buildTypeAheadInviteItemClickedPayload = function buildTypeAheadInviteItemClickedPayload(duration, upKeyCount, downKeyCount, sessionId, insertType, query, contextIdentifierProvider, userRole) {
  var _extractAttributesFro2 = extractAttributesFromQuery(query),
    queryLength = _extractAttributesFro2.queryLength,
    spaceInQuery = _extractAttributesFro2.spaceInQuery;
  var _ref2 = contextIdentifierProvider || {},
    containerId = _ref2.containerId,
    objectId = _ref2.objectId,
    childObjectId = _ref2.childObjectId;
  return {
    action: isClicked(insertType) ? ACTION.CLICKED : ACTION.PRESSED,
    actionSubject: ACTION_SUBJECT.INVITE_ITEM,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName: componentName,
      duration: duration,
      queryLength: queryLength,
      spaceInQuery: spaceInQuery,
      upKeyCount: upKeyCount,
      downKeyCount: downKeyCount,
      containerId: containerId,
      objectId: objectId,
      childObjectId: childObjectId,
      userRole: userRole,
      sessionId: sessionId,
      keyboardKey: isClicked(insertType) ? undefined : insertType
    }
  };
};
export var buildTypeAheadInsertedPayload = function buildTypeAheadInsertedPayload(duration, upKeyCount, downKeyCount, sessionId, insertType, mention, mentionLocalId, mentionList, query, contextIdentifierProvider, taskListId, taskItemId) {
  var _extractAttributesFro3 = extractAttributesFromQuery(query),
    queryLength = _extractAttributesFro3.queryLength,
    spaceInQuery = _extractAttributesFro3.spaceInQuery;
  var containerId;
  var objectId;
  var childObjectId;
  if (contextIdentifierProvider) {
    containerId = contextIdentifierProvider.containerId || undefined;
    objectId = contextIdentifierProvider.objectId || undefined;
    childObjectId = contextIdentifierProvider.childObjectId || undefined;
  }
  return {
    action: isClicked(insertType) ? ACTION.CLICKED : ACTION.PRESSED,
    actionSubject: ACTION_SUBJECT.MENTION_TYPEAHEAD,
    eventType: EVENT_TYPE.UI,
    containerId: containerId,
    objectId: objectId,
    childObjectId: childObjectId,
    attributes: {
      sessionId: sessionId,
      duration: duration,
      position: getPosition(mentionList, mention),
      keyboardKey: isClicked(insertType) ? undefined : insertType,
      source: mention.source,
      queryLength: queryLength,
      spaceInQuery: spaceInQuery,
      isSpecial: isSpecialMention(mention),
      accessLevel: mention.accessLevel || '',
      userType: mention.userType,
      userId: mention.id,
      upKeyCount: upKeyCount,
      downKeyCount: downKeyCount,
      memberCount: isTeamType(mention.userType) && mention.context ? mention.context.memberCount : null,
      includesYou: isTeamType(mention.userType) && mention.context ? mention.context.includesYou : null,
      taskListId: taskListId,
      taskItemId: taskItemId,
      localId: mentionLocalId,
      containerId: containerId,
      objectId: objectId,
      childObjectId: childObjectId
    }
  };
};
export var buildTypeAheadRenderedPayload = function buildTypeAheadRenderedPayload(duration, userIds, query, teams, xProductMentionsLength) {
  var _extractAttributesFro4 = extractAttributesFromQuery(query),
    queryLength = _extractAttributesFro4.queryLength,
    spaceInQuery = _extractAttributesFro4.spaceInQuery;
  var actionSubject = userIds ? ACTION_SUBJECT.MENTION_TYPEAHEAD : ACTION_SUBJECT.TEAM_MENTION_TYPEAHEAD;
  return {
    action: ACTION.RENDERED,
    actionSubject: actionSubject,
    eventType: EVENT_TYPE.OPERATIONAL,
    attributes: {
      componentName: componentName,
      duration: duration,
      userIds: userIds,
      teams: teams,
      queryLength: queryLength,
      spaceInQuery: spaceInQuery,
      xProductMentionsLength: xProductMentionsLength
    }
  };
};