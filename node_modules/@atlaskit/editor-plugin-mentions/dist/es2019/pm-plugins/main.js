import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { getInlineNodeViewProducer } from '@atlaskit/editor-common/react-node-view';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { findChildrenByType } from '@atlaskit/editor-prosemirror/utils';
import { SLI_EVENT_TYPE, SMART_EVENT_TYPE } from '@atlaskit/mention/resource';
import { ComponentNames } from '@atlaskit/mention/types';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { MentionNodeView } from '../nodeviews/mention';
import { MentionNodeView as VanillaMentionNodeView } from '../nodeviews/mentionNodeView';
import { MENTION_PROVIDER_REJECTED, MENTION_PROVIDER_UNDEFINED } from '../types';
import { mentionPluginKey } from './key';
import { canMentionBeCreatedInRange } from './utils';
export const ACTIONS = {
  SET_PROVIDER: 'SET_PROVIDER'
};
const PACKAGE_NAME = "@atlaskit/editor-plugin-mentions";
const PACKAGE_VERSION = "4.4.2";
const setProvider = provider => (state, dispatch) => {
  if (dispatch) {
    dispatch(state.tr.setMeta(mentionPluginKey, {
      action: ACTIONS.SET_PROVIDER,
      params: {
        provider
      }
    }));
  }
  return true;
};
export function createMentionPlugin({
  pmPluginFactoryParams,
  fireEvent,
  options,
  api
}) {
  let mentionProvider;
  const sendAnalytics = (event, actionSubject, action, attributes) => {
    if (event === SLI_EVENT_TYPE || event === SMART_EVENT_TYPE) {
      fireEvent({
        action: action,
        actionSubject: actionSubject,
        eventType: EVENT_TYPE.OPERATIONAL,
        attributes: {
          packageName: PACKAGE_NAME,
          packageVersion: PACKAGE_VERSION,
          componentName: ComponentNames.MENTION,
          ...attributes
        }
      }, 'fabricElements');
    }
  };
  return new SafePlugin({
    key: mentionPluginKey,
    state: {
      init(_, state) {
        const canInsertMention = canMentionBeCreatedInRange(state.selection.from, state.selection.to)(state);
        return {
          canInsertMention
        };
      },
      apply(tr, pluginState, oldState, newState) {
        const {
          action,
          params
        } = tr.getMeta(mentionPluginKey) || {
          action: null,
          params: null
        };
        let hasNewPluginState = false;
        let newPluginState = pluginState;
        const hasPositionChanged = oldState.selection.from !== newState.selection.from || oldState.selection.to !== newState.selection.to;
        if (tr.docChanged || tr.selectionSet && hasPositionChanged) {
          newPluginState = {
            ...pluginState,
            canInsertMention: canMentionBeCreatedInRange(newState.selection.from, newState.selection.to)(newState)
          };
          hasNewPluginState = true;
        }
        switch (action) {
          case ACTIONS.SET_PROVIDER:
            newPluginState = {
              ...newPluginState,
              mentionProvider: params.provider
            };
            hasNewPluginState = true;
            break;
        }
        if (hasNewPluginState) {
          pmPluginFactoryParams.dispatch(mentionPluginKey, newPluginState);
        }
        return newPluginState;
      }
    },
    props: {
      nodeViews: {
        mention: (node, view, getPos, decorations, innerDecorations) => {
          return editorExperiment('platform_editor_vanilla_dom', true, {
            exposure: true
          }) ? new VanillaMentionNodeView(node, {
            options,
            api,
            portalProviderAPI: pmPluginFactoryParams.portalProviderAPI
          }) : getInlineNodeViewProducer({
            pmPluginFactoryParams,
            Component: MentionNodeView,
            extraComponentProps: {
              providerFactory: pmPluginFactoryParams.providerFactory,
              pluginInjectionApi: api,
              options
            }
          })(node, view, getPos, decorations);
        }
      }
    },
    view(editorView) {
      const providerHandler = (name, providerPromise) => {
        switch (name) {
          case 'mentionProvider':
            if (!providerPromise) {
              fireEvent({
                action: ACTION.ERRORED,
                actionSubject: ACTION_SUBJECT.MENTION,
                actionSubjectId: ACTION_SUBJECT_ID.MENTION_PROVIDER,
                eventType: EVENT_TYPE.OPERATIONAL,
                attributes: {
                  reason: MENTION_PROVIDER_UNDEFINED
                }
              });
              return setProvider(undefined)(editorView.state, editorView.dispatch);
            }
            providerPromise.then(provider => {
              if (mentionProvider) {
                mentionProvider.unsubscribe('mentionPlugin');
              }
              mentionProvider = provider;
              setProvider(provider)(editorView.state, editorView.dispatch);
              provider.subscribe('mentionPlugin', undefined, undefined, undefined, undefined, sendAnalytics);
            }).catch(() => {
              fireEvent({
                action: ACTION.ERRORED,
                actionSubject: ACTION_SUBJECT.MENTION,
                actionSubjectId: ACTION_SUBJECT_ID.MENTION_PROVIDER,
                eventType: EVENT_TYPE.OPERATIONAL,
                attributes: {
                  reason: MENTION_PROVIDER_REJECTED
                }
              });
              return setProvider(undefined)(editorView.state, editorView.dispatch);
            });
            break;
        }
        return;
      };
      const providerViaConfig = fg('platform_editor_mention_provider_via_plugin_config');
      if (providerViaConfig && options !== null && options !== void 0 && options.mentionProvider) {
        providerHandler('mentionProvider', options === null || options === void 0 ? void 0 : options.mentionProvider);
      } else {
        pmPluginFactoryParams.providerFactory.subscribe('mentionProvider', providerHandler);
      }
      return {
        destroy() {
          if (pmPluginFactoryParams.providerFactory) {
            pmPluginFactoryParams.providerFactory.unsubscribe('mentionProvider', providerHandler);
          }
          if (mentionProvider) {
            mentionProvider.unsubscribe('mentionPlugin');
          }
        },
        update(view, prevState) {
          const newState = view.state;
          if (options !== null && options !== void 0 && options.handleMentionsChanged) {
            const mentionSchema = newState.schema.nodes.mention;
            const mentionNodesBefore = findChildrenByType(prevState.doc, mentionSchema);
            const mentionLocalIdsAfter = new Set(findChildrenByType(newState.doc, mentionSchema).map(({
              node
            }) => node.attrs.localId));
            if (mentionNodesBefore.length > mentionLocalIdsAfter.size) {
              const deletedMentions = mentionNodesBefore.filter(({
                node
              }) => !mentionLocalIdsAfter.has(node.attrs.localId)).map(({
                node
              }) => ({
                type: 'deleted',
                id: node.attrs.id,
                localId: node.attrs.localId
              }));
              if (deletedMentions.length > 0) {
                options.handleMentionsChanged(deletedMentions);
              }
            }
          }
        }
      };
    }
  });
}