import { ACTION, ACTION_SUBJECT, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { isSpecialMention } from '@atlaskit/mention/resource';
import { isTeamType } from './utils';
const componentName = 'mention';
const emptyQueryResponse = {
  queryLength: 0,
  spaceInQuery: false
};
const extractAttributesFromQuery = query => {
  if (query) {
    return {
      queryLength: query.length,
      spaceInQuery: query.indexOf(' ') !== -1
    };
  }
  return emptyQueryResponse;
};
export const buildTypeAheadCancelPayload = (duration, upKeyCount, downKeyCount, sessionId, query) => {
  const {
    queryLength,
    spaceInQuery
  } = extractAttributesFromQuery(query);
  return {
    action: ACTION.CANCELLED,
    actionSubject: ACTION_SUBJECT.MENTION_TYPEAHEAD,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName,
      duration,
      queryLength,
      spaceInQuery,
      upKeyCount,
      downKeyCount,
      sessionId
    }
  };
};
const getPosition = (mentionList, selectedMention) => {
  if (mentionList) {
    const index = mentionList.findIndex(mention => mention.id === selectedMention.id);
    return index === -1 ? undefined : index;
  }
  return;
};
const isClicked = insertType => insertType === 'selected';
export const buildTypeAheadInviteItemViewedPayload = (sessionId, contextIdentifierProvider, userRole) => {
  const {
    containerId,
    objectId,
    childObjectId
  } = contextIdentifierProvider || {};
  return {
    action: ACTION.RENDERED,
    actionSubject: ACTION_SUBJECT.INVITE_ITEM,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName,
      containerId,
      objectId,
      childObjectId,
      userRole,
      sessionId
    }
  };
};
export const buildTypeAheadInviteItemClickedPayload = (duration, upKeyCount, downKeyCount, sessionId, insertType, query, contextIdentifierProvider, userRole) => {
  const {
    queryLength,
    spaceInQuery
  } = extractAttributesFromQuery(query);
  const {
    containerId,
    objectId,
    childObjectId
  } = contextIdentifierProvider || {};
  return {
    action: isClicked(insertType) ? ACTION.CLICKED : ACTION.PRESSED,
    actionSubject: ACTION_SUBJECT.INVITE_ITEM,
    eventType: EVENT_TYPE.UI,
    attributes: {
      componentName,
      duration,
      queryLength,
      spaceInQuery,
      upKeyCount,
      downKeyCount,
      containerId,
      objectId,
      childObjectId,
      userRole,
      sessionId,
      keyboardKey: isClicked(insertType) ? undefined : insertType
    }
  };
};
export const buildTypeAheadInsertedPayload = (duration, upKeyCount, downKeyCount, sessionId, insertType, mention, mentionLocalId, mentionList, query, contextIdentifierProvider, taskListId, taskItemId) => {
  const {
    queryLength,
    spaceInQuery
  } = extractAttributesFromQuery(query);
  let containerId;
  let objectId;
  let childObjectId;
  if (contextIdentifierProvider) {
    containerId = contextIdentifierProvider.containerId || undefined;
    objectId = contextIdentifierProvider.objectId || undefined;
    childObjectId = contextIdentifierProvider.childObjectId || undefined;
  }
  return {
    action: isClicked(insertType) ? ACTION.CLICKED : ACTION.PRESSED,
    actionSubject: ACTION_SUBJECT.MENTION_TYPEAHEAD,
    eventType: EVENT_TYPE.UI,
    containerId,
    objectId,
    childObjectId,
    attributes: {
      sessionId,
      duration,
      position: getPosition(mentionList, mention),
      keyboardKey: isClicked(insertType) ? undefined : insertType,
      source: mention.source,
      queryLength,
      spaceInQuery,
      isSpecial: isSpecialMention(mention),
      accessLevel: mention.accessLevel || '',
      userType: mention.userType,
      userId: mention.id,
      upKeyCount,
      downKeyCount,
      memberCount: isTeamType(mention.userType) && mention.context ? mention.context.memberCount : null,
      includesYou: isTeamType(mention.userType) && mention.context ? mention.context.includesYou : null,
      taskListId,
      taskItemId,
      localId: mentionLocalId,
      containerId,
      objectId,
      childObjectId
    }
  };
};
export const buildTypeAheadRenderedPayload = (duration, userIds, query, teams, xProductMentionsLength) => {
  const {
    queryLength,
    spaceInQuery
  } = extractAttributesFromQuery(query);
  const actionSubject = userIds ? ACTION_SUBJECT.MENTION_TYPEAHEAD : ACTION_SUBJECT.TEAM_MENTION_TYPEAHEAD;
  return {
    action: ACTION.RENDERED,
    actionSubject,
    eventType: EVENT_TYPE.OPERATIONAL,
    attributes: {
      componentName,
      duration,
      userIds,
      teams,
      queryLength,
      spaceInQuery,
      xProductMentionsLength
    }
  };
};