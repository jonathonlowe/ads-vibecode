import React, { useCallback, useState } from 'react';
import { toolbarMessages } from '@atlaskit/editor-common/messages';
import { DropdownMenuWithKeyboardNavigation as DropdownMenu } from '@atlaskit/editor-common/ui-menu';
import { akEditorMenuZIndex } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { DropdownToolbarButton } from './dropdown-toolbar-button';
import { useMenuState } from './hooks/menu-state';
import { MoreButton } from './more-button';
export const FormattingTextDropdownMenu = /*#__PURE__*/React.memo(({
  editorView,
  moreButtonLabel,
  isReducedSpacing,
  items,
  hasFormattingActive,
  popupsBoundariesElement,
  popupsMountPoint,
  popupsScrollableElement,
  hasMoreButton,
  intl,
  toolbarType
}) => {
  var _items$0$items$;
  const [isMenuOpen, toggleMenu, closeMenu] = useMenuState();
  const [isOpenedByKeyboard, setIsOpenedByKeyboard] = useState(false);
  const onItemActivated = useCallback(({
    item,
    shouldCloseMenu = true
  }) => {
    if (item) {
      item.command(editorView.state, editorView.dispatch);
      if (shouldCloseMenu) {
        closeMenu();
      }
    }
  }, [editorView.state, editorView.dispatch, closeMenu]);
  const activeItem = items[0].items.find(item => item.isActive);
  const defaultIcon = editorExperiment('platform_editor_controls', 'variant1') && fg('platform_editor_controls_patch_4') ? (_items$0$items$ = items[0].items[0]) === null || _items$0$items$ === void 0 ? void 0 : _items$0$items$.elemBefore : undefined;
  return /*#__PURE__*/React.createElement(DropdownMenu, {
    mountTo: popupsMountPoint,
    onOpenChange: closeMenu,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    onItemActivated: onItemActivated,
    isOpen: isMenuOpen,
    items: items,
    zIndex: akEditorMenuZIndex,
    fitHeight: 188,
    fitWidth: editorExperiment('platform_editor_controls', 'control') ? 136 : 230,
    shouldUseDefaultRole: true,
    section: {
      hasSeparator: true
    },
    shouldFocusFirstItem: () => {
      if (isOpenedByKeyboard) {
        setIsOpenedByKeyboard(false);
      }
      return isOpenedByKeyboard;
    }
  }, hasMoreButton ? /*#__PURE__*/React.createElement(MoreButton, {
    isSelected: isMenuOpen || hasFormattingActive,
    label: moreButtonLabel,
    isReducedSpacing: isReducedSpacing,
    isDisabled: false,
    onClick: () => {
      toggleMenu();
      setIsOpenedByKeyboard(false);
    },
    onKeyDown: event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleMenu();
        setIsOpenedByKeyboard(true);
      }
    },
    "aria-expanded": isMenuOpen
  }) : /*#__PURE__*/React.createElement(DropdownToolbarButton, {
    isReducedSpacing: isReducedSpacing,
    isDisabled: false,
    isSelected: isMenuOpen,
    label: intl.formatMessage(toolbarMessages.textFormat),
    "aria-expanded": isMenuOpen,
    "aria-haspopup": true,
    onClick: () => {
      toggleMenu();
      setIsOpenedByKeyboard(false);
    },
    onKeyDown: event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleMenu();
        setIsOpenedByKeyboard(true);
      }
    },
    toolbarType: toolbarType,
    iconBefore: activeItem ? activeItem === null || activeItem === void 0 ? void 0 : activeItem.elemBefore : defaultIcon
  }));
});