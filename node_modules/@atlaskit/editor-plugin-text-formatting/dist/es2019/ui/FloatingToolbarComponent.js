/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { ToolbarSize } from '@atlaskit/editor-common/types';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { DefaultFloatingToolbarButtonsNext } from './Toolbar/constants';
import { FormattingTextDropdownMenu } from './Toolbar/dropdown-menu';
import { useClearIcon } from './Toolbar/hooks/clear-formatting-icon';
import { useFormattingIcons } from './Toolbar/hooks/formatting-icons';
import { useIconList } from './Toolbar/hooks/use-icon-list';
import { SingleToolbarButtons } from './Toolbar/single-toolbar-buttons';
import { ToolbarType } from './Toolbar/types';
const FloatingToolbarSettings = {
  disabled: false,
  isReducedSpacing: true,
  shouldUseResponsiveToolbar: false,
  toolbarSize: ToolbarSize.S,
  hasMoreButton: false,
  moreButtonLabel: '',
  toolbarType: ToolbarType.FLOATING
};
const FloatingToolbarTextFormat = ({
  api,
  editorAnalyticsAPI,
  editorView,
  intl
}) => {
  const {
    textFormattingState
  } = useSharedPluginState(api, ['textFormatting']);
  const defaultIcons = useFormattingIcons({
    schema: editorView.state.schema,
    intl,
    isToolbarDisabled: FloatingToolbarSettings.disabled,
    editorAnalyticsAPI,
    textFormattingState,
    toolbarType: FloatingToolbarSettings.toolbarType
  });
  const {
    dropdownItems,
    singleItems
  } = useIconList({
    icons: defaultIcons,
    iconTypeList: DefaultFloatingToolbarButtonsNext
  });
  const clearIcon = useClearIcon({
    textFormattingState,
    intl,
    editorAnalyticsAPI,
    toolbarType: FloatingToolbarSettings.toolbarType
  });
  const items = useMemo(() => {
    if (!clearIcon) {
      return [{
        items: dropdownItems
      }];
    }
    return [{
      items: dropdownItems
    }, {
      items: [clearIcon]
    }];
  }, [clearIcon, dropdownItems]);
  return jsx(React.Fragment, null, jsx(SingleToolbarButtons, {
    items: singleItems,
    editorView: editorView,
    isReducedSpacing: false
  }), jsx(FormattingTextDropdownMenu, {
    editorView: editorView,
    items: items,
    isReducedSpacing: editorExperiment('platform_editor_controls', 'variant1') ? false : FloatingToolbarSettings.isReducedSpacing,
    moreButtonLabel: FloatingToolbarSettings.moreButtonLabel,
    hasFormattingActive: FloatingToolbarSettings.hasMoreButton,
    hasMoreButton: FloatingToolbarSettings.hasMoreButton,
    intl: intl,
    toolbarType: FloatingToolbarSettings.toolbarType
  }));
};
export const FloatingToolbarTextFormalWithIntl = injectIntl(FloatingToolbarTextFormat);