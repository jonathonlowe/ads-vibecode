"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keymapPlugin;
var _analytics = require("@atlaskit/editor-common/analytics");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _commands = require("./commands");
function keymapPlugin(schema, editorAnalyticsAPI) {
  var list = {};
  if (schema.marks.strong) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleBold.common, (0, _commands.toggleStrongWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.em) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleItalic.common, (0, _commands.toggleEmWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.code) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleCode.common, (0, _commands.toggleCodeWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.strike) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleStrikethrough.common, (0, _commands.toggleStrikeWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.subsup) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleSubscript.common, (0, _commands.toggleSubscriptWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.subsup) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleSuperscript.common, (0, _commands.toggleSuperscriptWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  if (schema.marks.underline) {
    (0, _keymaps.bindKeymapWithEditorCommand)(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _keymaps.toggleUnderline.common, (0, _commands.toggleUnderlineWithAnalytics)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.SHORTCUT), list);
  }
  return new _safePlugin.SafePlugin({
    props: {
      handleKeyDown: function handleKeyDown(view, event) {
        var keyboardEvent = (0, _keymaps.isCapsLockOnAndModifyKeyboardEvent)(event);
        return (0, _keymap.keydownHandler)(list)(view, keyboardEvent);
      }
    }
  });
}