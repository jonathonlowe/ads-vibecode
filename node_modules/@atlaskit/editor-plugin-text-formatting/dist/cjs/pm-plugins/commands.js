"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleUnderlineWithAnalytics = exports.toggleUnderline = exports.toggleSuperscriptWithAnalytics = exports.toggleSuperscript = exports.toggleSubscriptWithAnalytics = exports.toggleSubscript = exports.toggleStrongWithAnalytics = exports.toggleStrong = exports.toggleStrikeWithAnalytics = exports.toggleStrike = exports.toggleEmWithAnalytics = exports.toggleEm = exports.toggleCodeWithAnalytics = exports.toggleCode = void 0;
var _analytics = require("@atlaskit/editor-common/analytics");
var _mark = require("@atlaskit/editor-common/mark");
var _marks = require("../editor-commands/utils/marks");
var toggleEm = exports.toggleEm = function toggleEm(_ref) {
  var tr = _ref.tr;
  var em = tr.doc.type.schema.marks.em;
  if (!em) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(em)({
    tr: tr
  });
};
var toggleEmWithAnalytics = exports.toggleEmWithAnalytics = function toggleEmWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref2) {
      var tr = _ref2.tr;
      var newTr = toggleEm({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_ITALIC,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleStrike = exports.toggleStrike = function toggleStrike(_ref3) {
  var tr = _ref3.tr;
  var strike = tr.doc.type.schema.marks.strike;
  if (!strike) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(strike)({
    tr: tr
  });
};
var toggleStrikeWithAnalytics = exports.toggleStrikeWithAnalytics = function toggleStrikeWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref4) {
      var tr = _ref4.tr;
      var newTr = toggleStrike({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_STRIKE,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleStrong = exports.toggleStrong = function toggleStrong(_ref5) {
  var tr = _ref5.tr;
  var strong = tr.doc.type.schema.marks.strong;
  if (!strong) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(strong)({
    tr: tr
  });
};
var toggleStrongWithAnalytics = exports.toggleStrongWithAnalytics = function toggleStrongWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref6) {
      var tr = _ref6.tr;
      var newTr = toggleStrong({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_STRONG,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleUnderline = exports.toggleUnderline = function toggleUnderline(_ref7) {
  var tr = _ref7.tr;
  var underline = tr.doc.type.schema.marks.underline;
  if (!underline) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(underline)({
    tr: tr
  });
};
var toggleUnderlineWithAnalytics = exports.toggleUnderlineWithAnalytics = function toggleUnderlineWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref8) {
      var tr = _ref8.tr;
      var newTr = toggleUnderline({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_UNDERLINE,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleSuperscript = exports.toggleSuperscript = function toggleSuperscript(_ref9) {
  var tr = _ref9.tr;
  var subsup = tr.doc.type.schema.marks.subsup;
  if (!subsup) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(subsup, {
    type: 'sup'
  })({
    tr: tr
  });
};
var toggleSuperscriptWithAnalytics = exports.toggleSuperscriptWithAnalytics = function toggleSuperscriptWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref10) {
      var tr = _ref10.tr;
      var newTr = toggleSuperscript({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_SUPER,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleSubscript = exports.toggleSubscript = function toggleSubscript(_ref11) {
  var tr = _ref11.tr;
  var subsup = tr.doc.type.schema.marks.subsup;
  if (!subsup) {
    // No transaction to apply
    return null;
  }
  return (0, _mark.toggleMark)(subsup, {
    type: 'sub'
  })({
    tr: tr
  });
};
var toggleSubscriptWithAnalytics = exports.toggleSubscriptWithAnalytics = function toggleSubscriptWithAnalytics(editorAnalyticsApi) {
  return function (inputMethod) {
    return function (_ref12) {
      var tr = _ref12.tr;
      var newTr = toggleSubscript({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_SUB,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};
var toggleCode = exports.toggleCode = function toggleCode(_ref13) {
  var api = _ref13.api;
  return function (_ref14) {
    var tr = _ref14.tr;
    var code = tr.doc.type.schema.marks.code;
    if (!code) {
      // No transaction to apply
      return null;
    }
    return (0, _marks.nextToggleMark)(code, api)({
      tr: tr
    });
  };
};
var toggleCodeWithAnalytics = exports.toggleCodeWithAnalytics = function toggleCodeWithAnalytics(editorAnalyticsApi, api) {
  return function (inputMethod) {
    return function (_ref15) {
      var tr = _ref15.tr;
      var newTr = toggleCode({
        api: api
      })({
        tr: tr
      });
      if (!newTr) {
        // No transaction to apply
        return null;
      }
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.FORMATTED,
        actionSubject: _analytics.ACTION_SUBJECT.TEXT,
        eventType: _analytics.EVENT_TYPE.TRACK,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_CODE,
        attributes: {
          inputMethod: inputMethod
        }
      })(newTr);
      return newTr;
    };
  };
};