"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormattingTextDropdownMenu = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _messages = require("@atlaskit/editor-common/messages");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _dropdownToolbarButton = require("./dropdown-toolbar-button");
var _menuState = require("./hooks/menu-state");
var _moreButton = require("./more-button");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var FormattingTextDropdownMenu = exports.FormattingTextDropdownMenu = /*#__PURE__*/_react.default.memo(function (_ref) {
  var _items$0$items$;
  var editorView = _ref.editorView,
    moreButtonLabel = _ref.moreButtonLabel,
    isReducedSpacing = _ref.isReducedSpacing,
    items = _ref.items,
    hasFormattingActive = _ref.hasFormattingActive,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsScrollableElement = _ref.popupsScrollableElement,
    hasMoreButton = _ref.hasMoreButton,
    intl = _ref.intl,
    toolbarType = _ref.toolbarType;
  var _useMenuState = (0, _menuState.useMenuState)(),
    _useMenuState2 = (0, _slicedToArray2.default)(_useMenuState, 3),
    isMenuOpen = _useMenuState2[0],
    toggleMenu = _useMenuState2[1],
    closeMenu = _useMenuState2[2];
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isOpenedByKeyboard = _useState2[0],
    setIsOpenedByKeyboard = _useState2[1];
  var onItemActivated = (0, _react.useCallback)(function (_ref2) {
    var item = _ref2.item,
      _ref2$shouldCloseMenu = _ref2.shouldCloseMenu,
      shouldCloseMenu = _ref2$shouldCloseMenu === void 0 ? true : _ref2$shouldCloseMenu;
    if (item) {
      item.command(editorView.state, editorView.dispatch);
      if (shouldCloseMenu) {
        closeMenu();
      }
    }
  }, [editorView.state, editorView.dispatch, closeMenu]);
  var activeItem = items[0].items.find(function (item) {
    return item.isActive;
  });
  var defaultIcon = (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_4') ? (_items$0$items$ = items[0].items[0]) === null || _items$0$items$ === void 0 ? void 0 : _items$0$items$.elemBefore : undefined;
  return /*#__PURE__*/_react.default.createElement(_uiMenu.DropdownMenuWithKeyboardNavigation, {
    mountTo: popupsMountPoint,
    onOpenChange: closeMenu,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    onItemActivated: onItemActivated,
    isOpen: isMenuOpen,
    items: items,
    zIndex: _editorSharedStyles.akEditorMenuZIndex,
    fitHeight: 188,
    fitWidth: (0, _experiments.editorExperiment)('platform_editor_controls', 'control') ? 136 : 230,
    shouldUseDefaultRole: true,
    section: {
      hasSeparator: true
    },
    shouldFocusFirstItem: function shouldFocusFirstItem() {
      if (isOpenedByKeyboard) {
        setIsOpenedByKeyboard(false);
      }
      return isOpenedByKeyboard;
    }
  }, hasMoreButton ? /*#__PURE__*/_react.default.createElement(_moreButton.MoreButton, {
    isSelected: isMenuOpen || hasFormattingActive,
    label: moreButtonLabel,
    isReducedSpacing: isReducedSpacing,
    isDisabled: false,
    onClick: function onClick() {
      toggleMenu();
      setIsOpenedByKeyboard(false);
    },
    onKeyDown: function onKeyDown(event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleMenu();
        setIsOpenedByKeyboard(true);
      }
    },
    "aria-expanded": isMenuOpen
  }) : /*#__PURE__*/_react.default.createElement(_dropdownToolbarButton.DropdownToolbarButton, {
    isReducedSpacing: isReducedSpacing,
    isDisabled: false,
    isSelected: isMenuOpen,
    label: intl.formatMessage(_messages.toolbarMessages.textFormat),
    "aria-expanded": isMenuOpen,
    "aria-haspopup": true,
    onClick: function onClick() {
      toggleMenu();
      setIsOpenedByKeyboard(false);
    },
    onKeyDown: function onKeyDown(event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleMenu();
        setIsOpenedByKeyboard(true);
      }
    },
    toolbarType: toolbarType,
    iconBefore: activeItem ? activeItem === null || activeItem === void 0 ? void 0 : activeItem.elemBefore : defaultIcon
  }));
});