"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatingToolbarTextFormalWithIntl = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _types = require("@atlaskit/editor-common/types");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _constants = require("./Toolbar/constants");
var _dropdownMenu = require("./Toolbar/dropdown-menu");
var _clearFormattingIcon = require("./Toolbar/hooks/clear-formatting-icon");
var _formattingIcons = require("./Toolbar/hooks/formatting-icons");
var _useIconList2 = require("./Toolbar/hooks/use-icon-list");
var _singleToolbarButtons = require("./Toolbar/single-toolbar-buttons");
var _types2 = require("./Toolbar/types");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var FloatingToolbarSettings = {
  disabled: false,
  isReducedSpacing: true,
  shouldUseResponsiveToolbar: false,
  toolbarSize: _types.ToolbarSize.S,
  hasMoreButton: false,
  moreButtonLabel: '',
  toolbarType: _types2.ToolbarType.FLOATING
};
var FloatingToolbarTextFormat = function FloatingToolbarTextFormat(_ref) {
  var api = _ref.api,
    editorAnalyticsAPI = _ref.editorAnalyticsAPI,
    editorView = _ref.editorView,
    intl = _ref.intl;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['textFormatting']),
    textFormattingState = _useSharedPluginState.textFormattingState;
  var defaultIcons = (0, _formattingIcons.useFormattingIcons)({
    schema: editorView.state.schema,
    intl: intl,
    isToolbarDisabled: FloatingToolbarSettings.disabled,
    editorAnalyticsAPI: editorAnalyticsAPI,
    textFormattingState: textFormattingState,
    toolbarType: FloatingToolbarSettings.toolbarType
  });
  var _useIconList = (0, _useIconList2.useIconList)({
      icons: defaultIcons,
      iconTypeList: _constants.DefaultFloatingToolbarButtonsNext
    }),
    dropdownItems = _useIconList.dropdownItems,
    singleItems = _useIconList.singleItems;
  var clearIcon = (0, _clearFormattingIcon.useClearIcon)({
    textFormattingState: textFormattingState,
    intl: intl,
    editorAnalyticsAPI: editorAnalyticsAPI,
    toolbarType: FloatingToolbarSettings.toolbarType
  });
  var items = (0, _react.useMemo)(function () {
    if (!clearIcon) {
      return [{
        items: dropdownItems
      }];
    }
    return [{
      items: dropdownItems
    }, {
      items: [clearIcon]
    }];
  }, [clearIcon, dropdownItems]);
  return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_singleToolbarButtons.SingleToolbarButtons, {
    items: singleItems,
    editorView: editorView,
    isReducedSpacing: false
  }), (0, _react2.jsx)(_dropdownMenu.FormattingTextDropdownMenu, {
    editorView: editorView,
    items: items,
    isReducedSpacing: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? false : FloatingToolbarSettings.isReducedSpacing,
    moreButtonLabel: FloatingToolbarSettings.moreButtonLabel,
    hasFormattingActive: FloatingToolbarSettings.hasMoreButton,
    hasMoreButton: FloatingToolbarSettings.hasMoreButton,
    intl: intl,
    toolbarType: FloatingToolbarSettings.toolbarType
  }));
};
var FloatingToolbarTextFormalWithIntl = exports.FloatingToolbarTextFormalWithIntl = (0, _reactIntlNext.injectIntl)(FloatingToolbarTextFormat);