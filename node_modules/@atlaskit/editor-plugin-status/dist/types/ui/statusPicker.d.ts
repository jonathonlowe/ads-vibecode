import React from 'react';
import { type WrappedComponentProps } from 'react-intl-next';
import type { CreateUIAnalyticsEvent } from '@atlaskit/analytics-next';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { ColorType as Color } from '@atlaskit/status/picker';
import type { ClosingPayload, StatusType } from '../types';
export declare enum InputMethod {
    blur = "blur",
    escKey = "escKey",
    enterKey = "enterKey"
}
export declare enum closingMethods {
    ArrowLeft = "arrowLeft",
    ArrowRight = "arrowRight"
}
export interface Props {
    target: HTMLElement | null;
    closeStatusPicker: (closingPayload?: ClosingPayload) => void;
    onSelect: (status: StatusType) => void;
    onTextChanged: (status: StatusType, isNew: boolean) => void;
    onEnter: (status: StatusType) => void;
    isNew?: boolean;
    focusStatusInput?: boolean;
    defaultText?: string;
    defaultColor?: Color;
    defaultLocalId?: string;
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
    mountTo?: HTMLElement;
    boundariesElement?: HTMLElement;
    scrollableElement?: HTMLElement;
    editorView: EditorView;
    intl: WrappedComponentProps['intl'];
}
export interface State {
    color: Color;
    text: string;
    localId?: string;
    isNew?: boolean;
}
export declare const StatusPickerWithoutAnalytcs: React.FC<import("react-intl-next").WithIntlProps<Props>> & {
    WrappedComponent: React.ComponentType<Props>;
};
declare const _default: React.ForwardRefExoticComponent<Omit<Omit<Props, "intl"> & {
    forwardedRef?: React.Ref<any> | undefined;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps> & React.RefAttributes<any>>;
export default _default;
