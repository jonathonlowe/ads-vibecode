import { createIntl } from 'react-intl-next';
import { status } from '@atlaskit/adf-schema';
import { convertToInlineCss } from '@atlaskit/editor-common/lazy-node-view';
import { ZERO_WIDTH_SPACE } from '@atlaskit/editor-common/whitespace';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
const isSSR = Boolean(process.env.REACT_SSR);
let intl;

// copied from packages/elements/status/src/components/Status.tsx
const colorToLozengeAppearanceMap = {
  neutral: 'default',
  purple: 'new',
  blue: 'inprogress',
  red: 'removed',
  yellow: 'moved',
  green: 'success'
};
const lozengeAppearanceToBgColorMap = {
  bold: {
    default: '#DDDEE1',
    inprogress: '#8FB8F6',
    moved: '#F9C84E',
    new: '#D8A0F7',
    removed: '#FD9891',
    success: '#B3DF72'
  },
  subtle: {
    default: "var(--ds-background-neutral-subtle, #00000000)",
    inprogress: "var(--ds-background-neutral-subtle, #00000000)",
    moved: "var(--ds-background-neutral-subtle, #00000000)",
    new: "var(--ds-background-neutral-subtle, #00000000)",
    removed: "var(--ds-background-neutral-subtle, #00000000)",
    success: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
const borderStyleMap = {
  subtle: {
    default: `1px solid #B7B9BE`,
    inprogress: `1px solid #669DF1`,
    moved: `1px solid #FCA700`,
    new: `1px solid #C97CF4`,
    removed: `1px solid #F87168`,
    success: `1px solid #94C748`
  }
};
const backgroundColorsOld = {
  bold: {
    default: "var(--ds-background-neutral-bold, #44546F)",
    inprogress: "var(--ds-background-information-bold, #0C66E4)",
    moved: "var(--ds-background-warning-bold, #F5CD47)",
    new: "var(--ds-background-discovery-bold, #6E5DC6)",
    removed: "var(--ds-background-danger-bold, #C9372C)",
    success: "var(--ds-background-success-bold, #1F845A)"
  },
  subtle: {
    default: "var(--ds-background-neutral, #091E420F)",
    inprogress: "var(--ds-background-information, #E9F2FF)",
    moved: "var(--ds-background-warning, #FFF7D6)",
    new: "var(--ds-background-discovery, #F3F0FF)",
    removed: "var(--ds-background-danger, #FFECEB)",
    success: "var(--ds-background-success, #DCFFF1)"
  }
};
const textColorsOld = {
  bold: {
    default: "var(--ds-text-inverse, #FFFFFF)",
    inprogress: "var(--ds-text-inverse, #FFFFFF)",
    moved: "var(--ds-text-warning-inverse, #172B4D)",
    new: "var(--ds-text-inverse, #FFFFFF)",
    removed: "var(--ds-text-inverse, #FFFFFF)",
    success: "var(--ds-text-inverse, #FFFFFF)"
  },
  subtle: {
    default: "var(--ds-text-subtle, #44546F)",
    inprogress: "var(--ds-text-information, #0055CC)",
    moved: "var(--ds-text-warning, #A54800)",
    new: "var(--ds-text-discovery, #5E4DB2)",
    removed: "var(--ds-text-danger, #AE2E24)",
    success: "var(--ds-text-success, #216E4E)"
  }
};
const DEFAULT_APPEARANCE = 'default';

// eg. Version/4.0 Chrome/95.0.4638.50
const isAndroidChromium = typeof window !== 'undefined' && /Version\/.* Chrome\/.*/u.test(window.navigator.userAgent);

/**
 * Wrapper for ADF status node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @returns
 */
export const statusNodeSpec = () => {
  if (isSSR || editorExperiment('platform_editor_inline_node_virtualization', 'off')) {
    return status;
  }
  return {
    ...status,
    toDOM: node => {
      var _style$backgroundColo;
      const {
        text,
        color,
        style
      } = node.attrs;
      intl = intl || createIntl({
        locale: document.documentElement.lang || 'en-US'
      });
      const isComponentVisualRefresh = fg('platform-component-visual-refresh');
      const maxWidth = 200;
      const maxWidthValue = typeof maxWidth === 'string' ? maxWidth : `${maxWidth}px`;
      const editorNodeWrapperAttrs = {
        'data-testid': 'statusContainerView',
        style: convertToInlineCss(text ? {
          opacity: 1
        } : {
          opacity: 0.5
        })
      };

      // packages/elements/status/src/components/Status.tsx
      const appearance = colorToLozengeAppearanceMap[color] || DEFAULT_APPEARANCE;
      const statusElementAttrs = {
        style: convertToInlineCss(isAndroidChromium ? {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
          display: 'inline-block !important',
          verticalAlign: 'middle'
        } : {}),
        class: 'status-lozenge-span',
        'aria-busy': 'true',
        'data-node-type': 'status',
        'data-color': color,
        'data-style': style
      };

      // packages/design-system/lozenge/src/Lozenge/index.tsx
      const appearanceStyle = isComponentVisualRefresh ? 'bold' : 'subtle';
      const appearanceType = appearance in lozengeAppearanceToBgColorMap[appearanceStyle] ? appearance : 'default';
      const lozengeWrapperAttrs = {
        style: convertToInlineCss({
          maxWidth: `calc(200px - ${"var(--ds-space-100, 8px)"})`,
          // container
          display: 'inline-flex',
          boxSizing: 'border-box',
          position: 'static',
          blockSize: 'min-content',
          borderRadius: '3px',
          overflow: 'hidden',
          paddingInline: "var(--ds-space-050, 4px)",
          // background
          backgroundColor: (_style$backgroundColo = style === null || style === void 0 ? void 0 : style.backgroundColor) !== null && _style$backgroundColo !== void 0 ? _style$backgroundColo : lozengeAppearanceToBgColorMap[appearanceStyle][appearanceType],
          // border
          ...(appearanceStyle === 'subtle' ? fg('visual-refresh_drop_5') ? {
            outline: borderStyleMap[appearanceStyle][appearanceType],
            outlineOffset: -1
          } : {
            border: borderStyleMap[appearanceStyle][appearanceType]
          } : {})
        })
      };
      const lozengeTextAttrs = {
        style: convertToInlineCss({
          color: appearanceStyle === 'subtle' ? "var(--ds-text, #172B4D)" : '#292A2E',
          maxWidth: `calc(${maxWidthValue} - ${"var(--ds-space-100, 8px)"})`,
          font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
          fontWeight: "var(--ds-font-weight-bold, 700)",
          fontSize: '11px',
          // can't use token - underlying DS lozenge is out by 1px which causes layout shift
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          textTransform: "var(--ds-UNSAFE-textTransformUppercase, uppercase)",
          whiteSpace: 'nowrap',
          ...(fg('platform-lozenge-custom-letterspacing') ? {
            // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
            letterSpacing: '0.165px'
          } : {})
        })
      };
      if (isComponentVisualRefresh) {
        return ['span', editorNodeWrapperAttrs, ['span', statusElementAttrs, ['span', lozengeWrapperAttrs, ['span', lozengeTextAttrs, text]]]];
      } else {
        var _style$color;
        // packages/design-system/lozenge/src/Lozenge/index.tsx
        const appearanceTypeOld = appearance in backgroundColorsOld[appearanceStyle] ? appearance : 'default';
        const legacyLozengeBoxAttrs = {
          style: convertToInlineCss({
            backgroundColor: backgroundColorsOld[appearanceStyle][appearanceTypeOld],
            maxWidth: '100%',
            paddingInline: "var(--ds-space-050, 4px)",
            display: 'inline-flex',
            borderRadius: "var(--ds-border-radius, 4px)",
            blockSize: 'min-content',
            position: 'static',
            overflow: 'hidden',
            boxSizing: 'border-box',
            appearance: 'none',
            border: 'none'
          })
        };
        const legacyLozengeTextAttrs = {
          style: convertToInlineCss({
            font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
            fontFamily: "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
            fontWeight: "var(--ds-font-weight-bold, 700)",
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            textTransform: "var(--ds-UNSAFE-textTransformUppercase, uppercase)",
            whiteSpace: 'nowrap',
            color: (_style$color = style === null || style === void 0 ? void 0 : style.color) !== null && _style$color !== void 0 ? _style$color : textColorsOld[appearanceStyle][appearanceTypeOld],
            maxWidth: '100%'
          })
        };
        return ['span', editorNodeWrapperAttrs, ['span', statusElementAttrs, ['span', legacyLozengeBoxAttrs, ['span', legacyLozengeTextAttrs, text]]]];
      }
    }
  };
};
export const statusToDOM = node => {
  const {
    text,
    color,
    style,
    localId
  } = node.attrs;
  const editorNodeWrapperAttrs = {
    class: 'statusView-content-wrap inlineNodeView',
    'data-testid': 'statusContainerView',
    'data-prosemirror-node-view-type': 'vanilla',
    'local-id': localId
  };
  const statusElementAttrs = {
    style: convertToInlineCss(isAndroidChromium ? {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
      display: 'inline-block !important',
      verticalAlign: 'middle'
    } : {}),
    class: 'status-lozenge-span',
    'data-node-type': 'status',
    'data-color': color,
    'data-style': style
  };
  const lozengeWrapperAttrs = {
    class: 'lozenge-wrapper'
  };
  const lozengeTextAttrs = {
    class: 'lozenge-text',
    style: convertToInlineCss({
      ...(fg('platform-lozenge-custom-letterspacing') ? {
        // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
        letterSpacing: '0.165px'
      } : {})
    })
  };
  return ['span', editorNodeWrapperAttrs, ['span', {
    class: 'zeroWidthSpaceContainer'
  }, ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, ZERO_WIDTH_SPACE]], ['span', statusElementAttrs, ['span', lozengeWrapperAttrs, ['span', lozengeTextAttrs, text]]], ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, ZERO_WIDTH_SPACE]];
};