/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { statusMessages as messages } from '@atlaskit/editor-common/messages';
import { fg } from '@atlaskit/platform-feature-flags';
import { Status } from '@atlaskit/status/element';
const styledStatusStyles = css({
  opacity: 1
});
const styledStatusPlaceholderStyles = css({
  opacity: 0.5
});
const StatusContainerView = props => {
  const {
    text,
    color,
    localId,
    style,
    intl: {
      formatMessage
    }
  } = props;
  const statusText = text ? text : formatMessage(messages.placeholder);
  const handleClick = event => {
    if (event.nativeEvent.stopImmediatePropagation) {
      event.nativeEvent.stopImmediatePropagation();
    }
    // handling of popup is done in plugin.apply on selection change.
  };
  return jsx("span", {
    css: text ? styledStatusStyles : styledStatusPlaceholderStyles,
    "data-testid": "statusContainerView"
  }, jsx(Status, {
    text: statusText,
    color: color,
    localId: localId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style,
    onClick: handleClick,
    isBold: fg('platform-component-visual-refresh')
  }));
};
export const IntlStatusContainerView = injectIntl(StatusContainerView);
export const StatusNodeView = props => {
  const {
    view
  } = props;
  const {
    text,
    color,
    localId,
    style
  } = props.node.attrs;
  return jsx(IntlStatusContainerView, {
    view: view,
    text: text,
    color: color
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style,
    localId: localId
  });
};