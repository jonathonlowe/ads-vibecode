"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusNodeView = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _messages = require("@atlaskit/editor-common/messages");
var _monitoring = require("@atlaskit/editor-common/monitoring");
var _model = require("@atlaskit/editor-prosemirror/model");
var _statusNodeSpec = require("./statusNodeSpec");
var StatusNodeView = exports.StatusNodeView = /*#__PURE__*/function () {
  function StatusNodeView(node, intl) {
    (0, _classCallCheck2.default)(this, StatusNodeView);
    (0, _defineProperty2.default)(this, "dom", document.createElement('div'));
    (0, _defineProperty2.default)(this, "box", null);
    (0, _defineProperty2.default)(this, "textContainer", null);
    this.node = node;
    this.intl = intl;
    try {
      var spec = (0, _statusNodeSpec.statusToDOM)(node);
      var _DOMSerializer$render = _model.DOMSerializer.renderSpec(document, spec),
        dom = _DOMSerializer$render.dom;
      if (!(dom instanceof HTMLElement)) {
        throw new Error('DOMSerializer.renderSpec() did not return HTMLElement');
      }
      this.dom = dom;
      this.box = this.dom.querySelector('.status-lozenge-span');
      this.textContainer = this.dom.querySelector('.lozenge-text');
      if (!node.attrs.text) {
        this.setPlaceholder();
      }
    } catch (error) {
      StatusNodeView.logError(error instanceof Error ? error : new Error('Unknown error on StatusNodeView constructor'));
      this.renderFallback();
    }
  }
  return (0, _createClass2.default)(StatusNodeView, [{
    key: "setPlaceholder",
    value: function setPlaceholder() {
      if (this.textContainer) {
        this.textContainer.textContent = this.intl.formatMessage(_messages.statusMessages.placeholder);
        this.dom.style.setProperty('opacity', '0.5');
      }
    }
  }, {
    key: "renderFallback",
    value: function renderFallback() {
      var fallbackElement = document.createElement('span');
      fallbackElement.innerText = this.node.attrs.text;
      this.dom.appendChild(fallbackElement);
    }
  }, {
    key: "update",
    value: function update(node) {
      if (node.type !== this.node.type) {
        return false;
      }
      if (this.textContainer && node.attrs.text !== this.node.attrs.text) {
        this.textContainer.textContent = node.attrs.text;
      }
      if (node.attrs.color !== this.node.attrs.color) {
        var _this$box;
        (_this$box = this.box) === null || _this$box === void 0 || _this$box.setAttribute('data-color', node.attrs.color);
      }
      if (!node.attrs.text) {
        this.setPlaceholder();
      }
      if (node.attrs.text) {
        this.dom.style.setProperty('opacity', '1');
      }
      this.node = node;
      return true;
    }
  }], [{
    key: "logError",
    value: function logError(error) {
      void (0, _monitoring.logException)(error, {
        location: 'editor-plugin-status/StatusNodeView'
      });
    }
  }]);
}();