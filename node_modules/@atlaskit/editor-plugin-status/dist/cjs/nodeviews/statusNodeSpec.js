"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statusToDOM = exports.statusNodeSpec = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactIntlNext = require("react-intl-next");
var _adfSchema = require("@atlaskit/adf-schema");
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _whitespace = require("@atlaskit/editor-common/whitespace");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isSSR = Boolean(process.env.REACT_SSR);
var intl;

// copied from packages/elements/status/src/components/Status.tsx
var colorToLozengeAppearanceMap = {
  neutral: 'default',
  purple: 'new',
  blue: 'inprogress',
  red: 'removed',
  yellow: 'moved',
  green: 'success'
};
var lozengeAppearanceToBgColorMap = {
  bold: {
    default: '#DDDEE1',
    inprogress: '#8FB8F6',
    moved: '#F9C84E',
    new: '#D8A0F7',
    removed: '#FD9891',
    success: '#B3DF72'
  },
  subtle: {
    default: "var(--ds-background-neutral-subtle, #00000000)",
    inprogress: "var(--ds-background-neutral-subtle, #00000000)",
    moved: "var(--ds-background-neutral-subtle, #00000000)",
    new: "var(--ds-background-neutral-subtle, #00000000)",
    removed: "var(--ds-background-neutral-subtle, #00000000)",
    success: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
var borderStyleMap = {
  subtle: {
    default: "1px solid #B7B9BE",
    inprogress: "1px solid #669DF1",
    moved: "1px solid #FCA700",
    new: "1px solid #C97CF4",
    removed: "1px solid #F87168",
    success: "1px solid #94C748"
  }
};
var backgroundColorsOld = {
  bold: {
    default: "var(--ds-background-neutral-bold, #44546F)",
    inprogress: "var(--ds-background-information-bold, #0C66E4)",
    moved: "var(--ds-background-warning-bold, #F5CD47)",
    new: "var(--ds-background-discovery-bold, #6E5DC6)",
    removed: "var(--ds-background-danger-bold, #C9372C)",
    success: "var(--ds-background-success-bold, #1F845A)"
  },
  subtle: {
    default: "var(--ds-background-neutral, #091E420F)",
    inprogress: "var(--ds-background-information, #E9F2FF)",
    moved: "var(--ds-background-warning, #FFF7D6)",
    new: "var(--ds-background-discovery, #F3F0FF)",
    removed: "var(--ds-background-danger, #FFECEB)",
    success: "var(--ds-background-success, #DCFFF1)"
  }
};
var textColorsOld = {
  bold: {
    default: "var(--ds-text-inverse, #FFFFFF)",
    inprogress: "var(--ds-text-inverse, #FFFFFF)",
    moved: "var(--ds-text-warning-inverse, #172B4D)",
    new: "var(--ds-text-inverse, #FFFFFF)",
    removed: "var(--ds-text-inverse, #FFFFFF)",
    success: "var(--ds-text-inverse, #FFFFFF)"
  },
  subtle: {
    default: "var(--ds-text-subtle, #44546F)",
    inprogress: "var(--ds-text-information, #0055CC)",
    moved: "var(--ds-text-warning, #A54800)",
    new: "var(--ds-text-discovery, #5E4DB2)",
    removed: "var(--ds-text-danger, #AE2E24)",
    success: "var(--ds-text-success, #216E4E)"
  }
};
var DEFAULT_APPEARANCE = 'default';

// eg. Version/4.0 Chrome/95.0.4638.50
var isAndroidChromium = typeof window !== 'undefined' && /Version\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])* Chrome\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*/.test(window.navigator.userAgent);

/**
 * Wrapper for ADF status node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @returns
 */
var statusNodeSpec = exports.statusNodeSpec = function statusNodeSpec() {
  if (isSSR || (0, _experiments.editorExperiment)('platform_editor_inline_node_virtualization', 'off')) {
    return _adfSchema.status;
  }
  return _objectSpread(_objectSpread({}, _adfSchema.status), {}, {
    toDOM: function toDOM(node) {
      var _style$backgroundColo;
      var _node$attrs = node.attrs,
        text = _node$attrs.text,
        color = _node$attrs.color,
        style = _node$attrs.style;
      intl = intl || (0, _reactIntlNext.createIntl)({
        locale: document.documentElement.lang || 'en-US'
      });
      var isComponentVisualRefresh = (0, _platformFeatureFlags.fg)('platform-component-visual-refresh');
      var maxWidth = 200;
      var maxWidthValue = typeof maxWidth === 'string' ? maxWidth : "".concat(maxWidth, "px");
      var editorNodeWrapperAttrs = {
        'data-testid': 'statusContainerView',
        style: (0, _lazyNodeView.convertToInlineCss)(text ? {
          opacity: 1
        } : {
          opacity: 0.5
        })
      };

      // packages/elements/status/src/components/Status.tsx
      var appearance = colorToLozengeAppearanceMap[color] || DEFAULT_APPEARANCE;
      var statusElementAttrs = {
        style: (0, _lazyNodeView.convertToInlineCss)(isAndroidChromium ? {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
          display: 'inline-block !important',
          verticalAlign: 'middle'
        } : {}),
        class: 'status-lozenge-span',
        'aria-busy': 'true',
        'data-node-type': 'status',
        'data-color': color,
        'data-style': style
      };

      // packages/design-system/lozenge/src/Lozenge/index.tsx
      var appearanceStyle = isComponentVisualRefresh ? 'bold' : 'subtle';
      var appearanceType = appearance in lozengeAppearanceToBgColorMap[appearanceStyle] ? appearance : 'default';
      var lozengeWrapperAttrs = {
        style: (0, _lazyNodeView.convertToInlineCss)(_objectSpread({
          maxWidth: "calc(200px - ".concat("var(--ds-space-100, 8px)", ")"),
          // container
          display: 'inline-flex',
          boxSizing: 'border-box',
          position: 'static',
          blockSize: 'min-content',
          borderRadius: '3px',
          overflow: 'hidden',
          paddingInline: "var(--ds-space-050, 4px)",
          // background
          backgroundColor: (_style$backgroundColo = style === null || style === void 0 ? void 0 : style.backgroundColor) !== null && _style$backgroundColo !== void 0 ? _style$backgroundColo : lozengeAppearanceToBgColorMap[appearanceStyle][appearanceType]
        }, appearanceStyle === 'subtle' ? (0, _platformFeatureFlags.fg)('visual-refresh_drop_5') ? {
          outline: borderStyleMap[appearanceStyle][appearanceType],
          outlineOffset: -1
        } : {
          border: borderStyleMap[appearanceStyle][appearanceType]
        } : {}))
      };
      var lozengeTextAttrs = {
        style: (0, _lazyNodeView.convertToInlineCss)(_objectSpread({
          color: appearanceStyle === 'subtle' ? "var(--ds-text, #172B4D)" : '#292A2E',
          maxWidth: "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")"),
          font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
          fontWeight: "var(--ds-font-weight-bold, 700)",
          fontSize: '11px',
          // can't use token - underlying DS lozenge is out by 1px which causes layout shift
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          textTransform: "var(--ds-UNSAFE-textTransformUppercase, uppercase)",
          whiteSpace: 'nowrap'
        }, (0, _platformFeatureFlags.fg)('platform-lozenge-custom-letterspacing') ? {
          // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
          letterSpacing: '0.165px'
        } : {}))
      };
      if (isComponentVisualRefresh) {
        return ['span', editorNodeWrapperAttrs, ['span', statusElementAttrs, ['span', lozengeWrapperAttrs, ['span', lozengeTextAttrs, text]]]];
      } else {
        var _style$color;
        // packages/design-system/lozenge/src/Lozenge/index.tsx
        var appearanceTypeOld = appearance in backgroundColorsOld[appearanceStyle] ? appearance : 'default';
        var legacyLozengeBoxAttrs = {
          style: (0, _lazyNodeView.convertToInlineCss)({
            backgroundColor: backgroundColorsOld[appearanceStyle][appearanceTypeOld],
            maxWidth: '100%',
            paddingInline: "var(--ds-space-050, 4px)",
            display: 'inline-flex',
            borderRadius: "var(--ds-border-radius, 4px)",
            blockSize: 'min-content',
            position: 'static',
            overflow: 'hidden',
            boxSizing: 'border-box',
            appearance: 'none',
            border: 'none'
          })
        };
        var legacyLozengeTextAttrs = {
          style: (0, _lazyNodeView.convertToInlineCss)({
            font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
            fontFamily: "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
            fontWeight: "var(--ds-font-weight-bold, 700)",
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            textTransform: "var(--ds-UNSAFE-textTransformUppercase, uppercase)",
            whiteSpace: 'nowrap',
            color: (_style$color = style === null || style === void 0 ? void 0 : style.color) !== null && _style$color !== void 0 ? _style$color : textColorsOld[appearanceStyle][appearanceTypeOld],
            maxWidth: '100%'
          })
        };
        return ['span', editorNodeWrapperAttrs, ['span', statusElementAttrs, ['span', legacyLozengeBoxAttrs, ['span', legacyLozengeTextAttrs, text]]]];
      }
    }
  });
};
var statusToDOM = exports.statusToDOM = function statusToDOM(node) {
  var _node$attrs2 = node.attrs,
    text = _node$attrs2.text,
    color = _node$attrs2.color,
    style = _node$attrs2.style,
    localId = _node$attrs2.localId;
  var editorNodeWrapperAttrs = {
    class: 'statusView-content-wrap inlineNodeView',
    'data-testid': 'statusContainerView',
    'data-prosemirror-node-view-type': 'vanilla',
    'local-id': localId
  };
  var statusElementAttrs = {
    style: (0, _lazyNodeView.convertToInlineCss)(isAndroidChromium ? {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
      display: 'inline-block !important',
      verticalAlign: 'middle'
    } : {}),
    class: 'status-lozenge-span',
    'data-node-type': 'status',
    'data-color': color,
    'data-style': style
  };
  var lozengeWrapperAttrs = {
    class: 'lozenge-wrapper'
  };
  var lozengeTextAttrs = {
    class: 'lozenge-text',
    style: (0, _lazyNodeView.convertToInlineCss)(_objectSpread({}, (0, _platformFeatureFlags.fg)('platform-lozenge-custom-letterspacing') ? {
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
      letterSpacing: '0.165px'
    } : {}))
  };
  return ['span', editorNodeWrapperAttrs, ['span', {
    class: 'zeroWidthSpaceContainer'
  }, ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, _whitespace.ZERO_WIDTH_SPACE]], ['span', statusElementAttrs, ['span', lozengeWrapperAttrs, ['span', lozengeTextAttrs, text]]], ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, _whitespace.ZERO_WIDTH_SPACE]];
};