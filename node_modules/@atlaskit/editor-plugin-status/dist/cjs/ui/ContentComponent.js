"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContentComponent = ContentComponent;
var _react = _interopRequireWildcard(require("react"));
var _hooks = require("@atlaskit/editor-common/hooks");
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _actions = require("../pm-plugins/actions");
var _statusPicker = _interopRequireDefault(require("./statusPicker"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ContentComponent(_ref) {
  var api = _ref.api,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsScrollableElement = _ref.popupsScrollableElement,
    editorView = _ref.editorView,
    domAtPos = _ref.domAtPos;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['status']),
    statusState = _useSharedPluginState.statusState;
  var _ref2 = statusState !== null && statusState !== void 0 ? statusState : {},
    showStatusPickerAt = _ref2.showStatusPickerAt;
  var target = (0, _react.useMemo)(function () {
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line @atlaskit/editor/no-as-casting
      showStatusPickerAt ? (0, _utils.findDomRefAtPos)(showStatusPickerAt, domAtPos) : null
    );
  }, [showStatusPickerAt, domAtPos]);
  var statusNode = (0, _react.useMemo)(function () {
    return showStatusPickerAt ? editorView.state.doc.nodeAt(showStatusPickerAt) : undefined;
  }, [showStatusPickerAt, editorView]);
  var onSelect = (0, _react.useCallback)(function (status) {
    (0, _actions.updateStatus)(status)(editorView.state, editorView.dispatch);
  }, [editorView]);
  var onTextChanged = (0, _react.useCallback)(function (status) {
    (0, _actions.updateStatus)(status)(editorView.state, editorView.dispatch);
  }, [editorView]);
  var closeStatusPicker = (0, _react.useCallback)(function (closingPayload) {
    (0, _actions.commitStatusPicker)(closingPayload)(editorView);
  }, [editorView]);
  var onEnter = (0, _react.useCallback)(function () {
    (0, _actions.commitStatusPicker)()(editorView);
  }, [editorView]);
  if (typeof showStatusPickerAt !== 'number') {
    return null;
  }
  if (!statusNode || statusNode.type.name !== 'status') {
    return null;
  }
  var _statusNode$attrs = statusNode.attrs,
    text = _statusNode$attrs.text,
    color = _statusNode$attrs.color,
    localId = _statusNode$attrs.localId;
  return /*#__PURE__*/_react.default.createElement(_statusPicker.default, {
    isNew: statusState === null || statusState === void 0 ? void 0 : statusState.isNew,
    focusStatusInput: statusState === null || statusState === void 0 ? void 0 : statusState.focusStatusInput,
    target: target,
    defaultText: text,
    defaultColor: color,
    defaultLocalId: localId,
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    onSelect: onSelect,
    onTextChanged: onTextChanged,
    closeStatusPicker: closeStatusPicker,
    onEnter: onEnter,
    editorView: editorView
  });
}