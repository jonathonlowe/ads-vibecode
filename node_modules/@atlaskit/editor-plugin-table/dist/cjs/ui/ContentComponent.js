"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContentComponent = void 0;
var _react = _interopRequireDefault(require("react"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _errorBoundary = require("@atlaskit/editor-common/error-boundary");
var _useSharedPluginStateSelector = require("@atlaskit/editor-common/use-shared-plugin-state-selector");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _FloatingContextualButton = _interopRequireDefault(require("./FloatingContextualButton"));
var _FloatingContextualMenu = _interopRequireDefault(require("./FloatingContextualMenu"));
var _FloatingDeleteButton = _interopRequireDefault(require("./FloatingDeleteButton"));
var _FloatingDragMenu = _interopRequireDefault(require("./FloatingDragMenu"));
var _FloatingInsertButton = _interopRequireDefault(require("./FloatingInsertButton"));
var _FloatingToolbarLabel = require("./FloatingToolbarLabel/FloatingToolbarLabel");
var _globalStyles = require("./global-styles");
var _TableFullWidthLabel = require("./TableFullWidthLabel");
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default

var useSharedTablePluginStateSelector = function useSharedTablePluginStateSelector(api, key) {
  var value = (0, _useSharedPluginStateSelector.useSharedPluginStateSelector)(api, "table.".concat(key));
  return value;
};
var ContentComponentInternal = function ContentComponentInternal(_ref) {
  var _api$analytics, _api$accessibilityUti;
  var api = _ref.api,
    editorView = _ref.editorView,
    dispatchAnalyticsEvent = _ref.dispatchAnalyticsEvent,
    options = _ref.options,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsScrollableElement = _ref.popupsScrollableElement,
    defaultGetEditorContainerWidth = _ref.defaultGetEditorContainerWidth,
    defaultGetEditorFeatureFlags = _ref.defaultGetEditorFeatureFlags;
  var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  var ariaNotifyPlugin = api === null || api === void 0 || (_api$accessibilityUti = api.accessibilityUtils) === null || _api$accessibilityUti === void 0 ? void 0 : _api$accessibilityUti.actions.ariaNotify;
  var resizingTableLocalId = useSharedTablePluginStateSelector(api, 'resizingTableLocalId');
  var resizingTableRef = useSharedTablePluginStateSelector(api, 'resizingTableRef');
  var isTableResizing = useSharedTablePluginStateSelector(api, 'isTableResizing');
  var isResizing = useSharedTablePluginStateSelector(api, 'isResizing');
  var widthToWidest = useSharedTablePluginStateSelector(api, 'widthToWidest');
  var tableNode = useSharedTablePluginStateSelector(api, 'tableNode');
  var targetCellPosition = useSharedTablePluginStateSelector(api, 'targetCellPosition');
  var isContextualMenuOpen = useSharedTablePluginStateSelector(api, 'isContextualMenuOpen');
  var tableRef = useSharedTablePluginStateSelector(api, 'tableRef');
  var pluginConfig = useSharedTablePluginStateSelector(api, 'pluginConfig');
  var insertColumnButtonIndex = useSharedTablePluginStateSelector(api, 'insertColumnButtonIndex');
  var insertRowButtonIndex = useSharedTablePluginStateSelector(api, 'insertRowButtonIndex');
  var isHeaderColumnEnabled = useSharedTablePluginStateSelector(api, 'isHeaderColumnEnabled');
  var isHeaderRowEnabled = useSharedTablePluginStateSelector(api, 'isHeaderRowEnabled');
  var isDragAndDropEnabled = useSharedTablePluginStateSelector(api, 'isDragAndDropEnabled');
  var tableWrapperTarget = useSharedTablePluginStateSelector(api, 'tableWrapperTarget');
  var isCellMenuOpenByKeyboard = useSharedTablePluginStateSelector(api, 'isCellMenuOpenByKeyboard');
  var allowControls = pluginConfig.allowControls;
  var stickyHeader = useSharedTablePluginStateSelector(api, 'stickyHeader');
  var dragMenuDirection = useSharedTablePluginStateSelector(api, 'dragMenuDirection');
  var dragMenuIndex = useSharedTablePluginStateSelector(api, 'dragMenuIndex');
  var isDragMenuOpen = useSharedTablePluginStateSelector(api, 'isDragMenuOpen');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, targetCellPosition && (tableRef || isCellMenuOpenByKeyboard) && !isResizing && options && options.allowContextualMenu && /*#__PURE__*/_react.default.createElement(_FloatingContextualButton.default, {
    isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
    editorView: editorView,
    tableNode: tableNode,
    mountPoint: popupsMountPoint,
    targetCellPosition: targetCellPosition,
    scrollableElement: popupsScrollableElement,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    isContextualMenuOpen: isContextualMenuOpen,
    stickyHeader: stickyHeader,
    tableWrapper: tableWrapperTarget,
    isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard
  }), allowControls && /*#__PURE__*/_react.default.createElement(_FloatingInsertButton.default, {
    tableNode: tableNode,
    tableRef: tableRef,
    insertColumnButtonIndex: insertColumnButtonIndex,
    insertRowButtonIndex: insertRowButtonIndex,
    isHeaderColumnEnabled: isHeaderColumnEnabled,
    isHeaderRowEnabled: isHeaderRowEnabled,
    isDragAndDropEnabled: isDragAndDropEnabled,
    isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    hasStickyHeaders: stickyHeader && stickyHeader.sticky,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    editorAnalyticsAPI: editorAnalyticsAPI,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
    api: api,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
  }), (options === null || options === void 0 ? void 0 : options.allowContextualMenu) && /*#__PURE__*/_react.default.createElement(_FloatingContextualMenu.default, {
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    targetCellPosition: targetCellPosition,
    isOpen: Boolean(isContextualMenuOpen) && !isResizing,
    pluginConfig: pluginConfig,
    editorAnalyticsAPI: editorAnalyticsAPI,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
    api: api
  }), isDragAndDropEnabled && /*#__PURE__*/_react.default.createElement(_FloatingDragMenu.default, {
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    tableRef: tableRef,
    tableNode: tableNode,
    targetCellPosition: targetCellPosition,
    direction: dragMenuDirection,
    index: dragMenuIndex,
    isOpen: !!isDragMenuOpen && !isResizing,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    editorAnalyticsAPI: editorAnalyticsAPI,
    stickyHeaders: stickyHeader,
    pluginConfig: pluginConfig,
    isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    ariaNotifyPlugin: ariaNotifyPlugin,
    api: api,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
  }), allowControls && !isDragAndDropEnabled && !isResizing && /*#__PURE__*/_react.default.createElement(_FloatingDeleteButton.default, {
    editorView: editorView,
    selection: editorView.state.selection,
    tableRef: tableRef,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    stickyHeaders: stickyHeader,
    isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
    editorAnalyticsAPI: editorAnalyticsAPI,
    api: api
  }), ((options === null || options === void 0 ? void 0 : options.isTableScalingEnabled) || (options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing) && options.isCommentEditor) && isTableResizing && widthToWidest && resizingTableLocalId && resizingTableRef && widthToWidest[resizingTableLocalId] && /*#__PURE__*/_react.default.createElement(_FloatingToolbarLabel.FloatingToolbarLabel, {
    target: resizingTableRef,
    content: /*#__PURE__*/_react.default.createElement(_TableFullWidthLabel.FullWidthDisplay, null),
    alignX: 'center',
    alignY: 'bottom',
    stick: true,
    forcePlacement: true,
    zIndex: _editorSharedStyles.akEditorFloatingPanelZIndex,
    offset: [0, 10]
  }));
};
var ContentComponent = exports.ContentComponent = function ContentComponent(_ref2) {
  var _api$featureFlags;
  var api = _ref2.api,
    editorView = _ref2.editorView,
    dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
    options = _ref2.options,
    popupsMountPoint = _ref2.popupsMountPoint,
    popupsBoundariesElement = _ref2.popupsBoundariesElement,
    popupsScrollableElement = _ref2.popupsScrollableElement,
    defaultGetEditorContainerWidth = _ref2.defaultGetEditorContainerWidth,
    defaultGetEditorFeatureFlags = _ref2.defaultGetEditorFeatureFlags;
  return /*#__PURE__*/_react.default.createElement(_errorBoundary.ErrorBoundary, {
    component: _analytics.ACTION_SUBJECT.TABLES_PLUGIN,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    fallbackComponent: null
  }, /*#__PURE__*/_react.default.createElement(_globalStyles.GlobalStylesWrapper, {
    featureFlags: api === null || api === void 0 || (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState(),
    isDragAndDropEnabledOption: options === null || options === void 0 ? void 0 : options.dragAndDropEnabled,
    api: api
  }), /*#__PURE__*/_react.default.createElement(ContentComponentInternal, {
    api: api,
    editorView: editorView,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    options: options,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    defaultGetEditorContainerWidth: defaultGetEditorContainerWidth,
    defaultGetEditorFeatureFlags: defaultGetEditorFeatureFlags
  }));
};