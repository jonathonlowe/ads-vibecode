"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragCornerControlsWithSelection = exports.DragCornerControls = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _messages = require("@atlaskit/editor-common/messages");
var _utils = require("@atlaskit/editor-tables/utils");
var _commands = require("../../../pm-plugins/commands");
var _types = require("../../../types");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DragCornerControlsComponent = function DragCornerControlsComponent(_ref) {
  var editorView = _ref.editorView,
    isInDanger = _ref.isInDanger,
    isResizing = _ref.isResizing,
    formatMessage = _ref.intl.formatMessage;
  var handleOnClick = function handleOnClick() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    dispatch((0, _utils.selectTable)(state.tr).setMeta('addToHistory', false));
  };
  var handleMouseOut = function handleMouseOut() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    (0, _commands.clearHoverSelection)()(state, dispatch);
  };
  var isActive = (0, _react.useMemo)(function () {
    var selection = editorView.state.selection;
    var table = (0, _utils.findTable)(selection);
    if (!table) {
      return false;
    }
    return (0, _utils.isTableSelected)(selection);
  }, [editorView.state]);
  if (isResizing) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("button", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: (0, _classnames.default)(_types.TableCssClassName.DRAG_CORNER_BUTTON, {
      active: isActive,
      danger: isActive && isInDanger
    }),
    "aria-label": formatMessage(_messages.tableMessages.cornerControl),
    type: "button",
    onClick: handleOnClick
    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
    ,
    onMouseOut: handleMouseOut,
    contentEditable: false
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _types.TableCssClassName.DRAG_CORNER_BUTTON_INNER
  }));
};
var DragCornerControlsComponentWithSelection = function DragCornerControlsComponentWithSelection(_ref2) {
  var editorView = _ref2.editorView,
    isInDanger = _ref2.isInDanger,
    isResizing = _ref2.isResizing,
    formatMessage = _ref2.intl.formatMessage,
    api = _ref2.api;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['selection']),
    selectionState = _useSharedPluginState.selectionState;
  var handleOnClick = function handleOnClick() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    dispatch((0, _utils.selectTable)(state.tr).setMeta('addToHistory', false));
  };
  var handleMouseOut = function handleMouseOut() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    (0, _commands.clearHoverSelection)()(state, dispatch);
  };
  var isActive = (0, _react.useMemo)(function () {
    if (!(selectionState !== null && selectionState !== void 0 && selectionState.selection)) {
      return;
    }
    var table = (0, _utils.findTable)(selectionState.selection);
    if (!table) {
      return false;
    }
    return (0, _utils.isTableSelected)(selectionState.selection);
  }, [selectionState]);
  if (isResizing) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("button", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: (0, _classnames.default)(_types.TableCssClassName.DRAG_CORNER_BUTTON, {
      active: isActive,
      danger: isActive && isInDanger
    }),
    "aria-label": formatMessage(_messages.tableMessages.cornerControl),
    type: "button",
    onClick: handleOnClick
    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
    ,
    onMouseOut: handleMouseOut,
    contentEditable: false
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _types.TableCssClassName.DRAG_CORNER_BUTTON_INNER
  }));
};
var DragCornerControlsWithSelection = exports.DragCornerControlsWithSelection = (0, _reactIntlNext.injectIntl)(DragCornerControlsComponentWithSelection);
var DragCornerControls = exports.DragCornerControls = (0, _reactIntlNext.injectIntl)(DragCornerControlsComponent);