"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExternalDropTargets = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _styles = require("@atlaskit/editor-common/styles");
var _adapter = require("@atlaskit/pragmatic-drag-and-drop/element/adapter");
var _columnControls = require("../pm-plugins/utils/column-controls");
var _consts = require("../ui/consts");
var _ColumnDropTarget = require("../ui/TableFloatingColumnControls/ColumnDropTargets/ColumnDropTarget");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ExternalDropTargets = exports.ExternalDropTargets = function ExternalDropTargets(_ref) {
  var editorView = _ref.editorView,
    node = _ref.node,
    getScrollOffset = _ref.getScrollOffset,
    getTableWrapperWidth = _ref.getTableWrapperWidth;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isDragging = _useState2[0],
    setIsDragging = _useState2[1];
  var currentNodeLocalId = node === null || node === void 0 ? void 0 : node.attrs.localId;
  (0, _react.useEffect)(function () {
    return (0, _adapter.monitorForElements)({
      canMonitor: function canMonitor(_ref2) {
        var source = _ref2.source;
        var _ref3 = source.data,
          type = _ref3.type,
          indexes = _ref3.indexes,
          localId = _ref3.localId;
        return type === 'table-column' && !!(indexes !== null && indexes !== void 0 && indexes.length) && localId === currentNodeLocalId;
      },
      onDragStart: function onDragStart() {
        setIsDragging(true);
      },
      onDrop: function onDrop() {
        setIsDragging(false);
      }
    });
  }, [currentNodeLocalId, editorView]);
  if (!isDragging) {
    return null;
  }
  var colWidths = (0, _columnControls.getColumnsWidths)(editorView);
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: getTableWrapperWidth(),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      overflow: 'hidden',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      position: 'absolute',
      // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      top: "-".concat(_consts.dropTargetExtendedWidth - _styles.tableMarginTop, "px"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      pointerEvents: 'auto',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      zIndex: "".concat(_consts.dropTargetsZIndex)
    },
    "data-testid": "table-floating-column-extended-drop-targets"
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      display: 'flex',
      // move drop targets based on table wrapper scroll
      // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
      marginLeft: "-".concat(getScrollOffset(), "px")
    }
  }, colWidths === null || colWidths === void 0 ? void 0 : colWidths.map(function (width, index) {
    return /*#__PURE__*/_react.default.createElement(_ColumnDropTarget.ColumnDropTarget
    // Ignored via go/ees005
    // eslint-disable-next-line react/no-array-index-key
    , {
      key: index,
      index: index,
      localId: currentNodeLocalId,
      width: width,
      height: _consts.dropTargetExtendedWidth,
      marginTop: 0
    });
  })));
};