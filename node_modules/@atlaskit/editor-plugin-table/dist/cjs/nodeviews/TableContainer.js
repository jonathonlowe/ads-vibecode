"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableContainer = exports.ResizableTableContainer = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _hooks = require("@atlaskit/editor-common/hooks");
var _nodeWidth = require("@atlaskit/editor-common/node-width");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _commandsWithAnalytics = require("../pm-plugins/commands/commands-with-analytics");
var _pluginFactory = require("../pm-plugins/plugin-factory");
var _consts = require("../pm-plugins/table-resizing/utils/consts");
var _alignment = require("../pm-plugins/utils/alignment");
var _types = require("../types");
var _tableContainerStyles = require("./table-container-styles");
var _TableResizer = require("./TableResizer");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var InnerContainer = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var className = _ref.className,
    style = _ref.style,
    node = _ref.node,
    children = _ref.children;
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    "data-number-column": node.attrs.isNumberColumnEnabled,
    "data-layout": node.attrs.layout,
    "data-testid": "table-container"
  }, children);
});
var AlignmentTableContainer = function AlignmentTableContainer(_ref2) {
  var node = _ref2.node,
    children = _ref2.children,
    pluginInjectionApi = _ref2.pluginInjectionApi,
    getPos = _ref2.getPos,
    editorView = _ref2.editorView;
  var alignment = node.attrs.layout !== _alignment.ALIGN_START ? _alignment.ALIGN_CENTER : _alignment.ALIGN_START;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['table']),
    tableState = _useSharedPluginState.tableState;
  (0, _react.useEffect)(function () {
    if (tableState && editorView && getPos) {
      var wasFullWidthModeEnabled = tableState.wasFullWidthModeEnabled,
        isFullWidthModeEnabled = tableState.isFullWidthModeEnabled;
      var state = editorView.state,
        dispatch = editorView.dispatch;
      if (wasFullWidthModeEnabled && isFullWidthModeEnabled !== undefined && !isFullWidthModeEnabled && alignment !== _alignment.ALIGN_CENTER && node.attrs.width > _editorSharedStyles.akEditorDefaultLayoutWidth) {
        var _pluginInjectionApi$a;
        var pos = getPos && getPos();
        if (typeof pos !== 'number') {
          return;
        }
        (0, _commandsWithAnalytics.setTableAlignmentWithTableContentWithPosWithAnalytics)(pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions)(_alignment.ALIGN_CENTER, alignment, {
          pos: pos,
          node: node
        }, _analytics.INPUT_METHOD.AUTO, _analytics.CHANGE_ALIGNMENT_REASON.EDITOR_APPEARANCE_CHANGED)(state, dispatch);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [editorView, tableState, node]);
  var style = (0, _react.useMemo)(function () {
    return (0, _tableContainerStyles.getAlignmentStyle)(alignment);
  }, [alignment]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    _react.default.createElement("div", {
      "data-testid": "table-alignment-container",
      style: style
    }, children)
  );
};
var AlignmentTableContainerWrapper = function AlignmentTableContainerWrapper(_ref3) {
  var isTableAlignmentEnabled = _ref3.isTableAlignmentEnabled,
    node = _ref3.node,
    children = _ref3.children,
    pluginInjectionApi = _ref3.pluginInjectionApi,
    getPos = _ref3.getPos,
    editorView = _ref3.editorView;
  if (!isTableAlignmentEnabled) {
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-testid": "table-alignment-container",
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        display: 'flex',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        justifyContent: 'center'
      }
    }, children);
  }
  return /*#__PURE__*/_react.default.createElement(AlignmentTableContainer, {
    node: node,
    pluginInjectionApi: pluginInjectionApi,
    getPos: getPos,
    editorView: editorView
  }, children);
};
var ResizableTableContainer = exports.ResizableTableContainer = /*#__PURE__*/_react.default.memo(function (_ref4) {
  var children = _ref4.children,
    className = _ref4.className,
    node = _ref4.node,
    containerWidth = _ref4.containerWidth,
    lineLength = _ref4.lineLength,
    editorView = _ref4.editorView,
    getPos = _ref4.getPos,
    tableRef = _ref4.tableRef,
    isResizing = _ref4.isResizing,
    pluginInjectionApi = _ref4.pluginInjectionApi,
    tableWrapperHeight = _ref4.tableWrapperHeight,
    isWholeTableInDanger = _ref4.isWholeTableInDanger,
    isTableScalingEnabled = _ref4.isTableScalingEnabled,
    isTableWithFixedColumnWidthsOptionEnabled = _ref4.isTableWithFixedColumnWidthsOptionEnabled,
    isTableAlignmentEnabled = _ref4.isTableAlignmentEnabled,
    shouldUseIncreasedScalingPercent = _ref4.shouldUseIncreasedScalingPercent,
    isCommentEditor = _ref4.isCommentEditor;
  var containerRef = (0, _react.useRef)(null);
  var tableWidthRef = (0, _react.useRef)(_editorSharedStyles.akEditorDefaultLayoutWidth);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    resizing = _useState2[0],
    setIsResizing = _useState2[1];
  var _useSharedPluginState2 = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['table']),
    tableState = _useSharedPluginState2.tableState;
  var _ref5 = tableState,
    isFullWidthModeEnabled = _ref5.isFullWidthModeEnabled;
  var updateContainerHeight = (0, _react.useCallback)(function (height) {
    var _containerRef$current;
    // current StickyHeader State is not stable to be fetch.
    // we need to update stickyHeader plugin to make sure state can be
    //    consistently fetch and refactor below
    var stickyHeaders = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getElementsByClassName('pm-table-sticky');
    if (!stickyHeaders || stickyHeaders.length < 1) {
      // when starting to drag, we need to keep the original space,
      // -- When sticky header not appear, margin top(24px) and margin bottom(16px), should be 40px,
      //    1px is border width but collapse make it 0.5.
      // -- When sticky header appear, we should add first row height but reduce
      //    collapsed border
      return typeof height === 'number' ? "".concat(height + 40.5, "px") : 'auto';
    } else {
      var _containerRef$current2;
      var stickyHeaderHeight = ((_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getElementsByTagName('th')[0].getBoundingClientRect().height) || 0;
      return typeof height === 'number' ? "".concat(height + stickyHeaderHeight + 39.5, "px") : 'auto';
    }
  }, []);
  var onResizeStart = (0, _react.useCallback)(function () {
    setIsResizing(true);
  }, []);
  var onResizeStop = (0, _react.useCallback)(function () {
    setIsResizing(false);
  }, []);
  var updateWidth = (0, _react.useCallback)(function (width) {
    if (!containerRef.current) {
      return;
    }

    // make sure during resizing
    // the pm-table-resizer-container width is the same as its child div resizer-item
    // otherwise when resize table from wider to narrower , pm-table-resizer-container stays wider
    // and cause the fabric-editor-popup-scroll-parent to overflow
    if (containerRef.current.style.width !== "".concat(width, "px")) {
      containerRef.current.style.width = "".concat(width, "px");
    }
  }, []);
  var displayGuideline = (0, _react.useCallback)(function (guidelines) {
    var _pluginInjectionApi$g, _pluginInjectionApi$g2;
    return (_pluginInjectionApi$g = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$g2 = pluginInjectionApi.guideline) === null || _pluginInjectionApi$g2 === void 0 || (_pluginInjectionApi$g2 = _pluginInjectionApi$g2.actions) === null || _pluginInjectionApi$g2 === void 0 ? void 0 : _pluginInjectionApi$g2.displayGuideline(editorView)({
      guidelines: guidelines
    })) !== null && _pluginInjectionApi$g !== void 0 ? _pluginInjectionApi$g : false;
  }, [pluginInjectionApi, editorView]);
  var attachAnalyticsEvent = (0, _react.useCallback)(function (payload) {
    var _pluginInjectionApi$a2;
    return pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a2 = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a2 === void 0 ? void 0 : _pluginInjectionApi$a2.actions.attachAnalyticsEvent(payload);
  }, [pluginInjectionApi]);
  var displayGapCursor = (0, _react.useCallback)(function (toggle) {
    var _pluginInjectionApi$c, _pluginInjectionApi$c2, _pluginInjectionApi$s;
    return (_pluginInjectionApi$c = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c2 = pluginInjectionApi.core) === null || _pluginInjectionApi$c2 === void 0 ? void 0 : _pluginInjectionApi$c2.actions.execute(pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$s = pluginInjectionApi.selection) === null || _pluginInjectionApi$s === void 0 ? void 0 : _pluginInjectionApi$s.commands.displayGapCursor(toggle))) !== null && _pluginInjectionApi$c !== void 0 ? _pluginInjectionApi$c : false;
  }, [pluginInjectionApi]);
  var tableWidth = (0, _nodeWidth.getTableContainerWidth)(node);
  var _useSharedPluginState3 = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['editorViewMode']),
    editorViewModeState = _useSharedPluginState3.editorViewModeState;
  var responsiveContainerWidth = 0;
  var resizeHandleSpacing = 12;
  // When Full width editor enabled, a Mac OS user can change "ak-editor-content-area" width by
  // updating Settings -> Appearance -> Show scroll bars from "When scrolling" to "Always". It causes
  // issues when viwport width is less than full width Editor's width. To detect avoid them
  // we need to use lineLength to defined responsiveWidth instead of containerWidth
  // (which does not get updated when Mac setting changes) in Full-width editor.
  if (isFullWidthModeEnabled) {
    // When: Show scroll bars -> containerWidth = akEditorGutterPadding * 2 + lineLength;
    // When: Always -> containerWidth = akEditorGutterPadding * 2 + lineLength + scrollbarWidth;
    // scrollbarWidth can vary. Values can be 14, 15, 16 and up to 20px;
    responsiveContainerWidth = isTableScalingEnabled ? lineLength : containerWidth - (0, _editorSharedStyles.akEditorGutterPaddingDynamic)() * 2 - resizeHandleSpacing;
  } else if (isCommentEditor) {
    responsiveContainerWidth = containerWidth - _consts.TABLE_OFFSET_IN_COMMENT_EDITOR;
  } else {
    // 76 is currently an accepted padding value considering the spacing for resizer handle
    // containerWidth = width of a DIV with test id="ak-editor-fp-content-area". It is a parent of
    // a DIV with className="ak-editor-content-area". This DIV has padding left and padding right.
    // padding left = padding right = akEditorGutterPadding = 32
    responsiveContainerWidth = isTableScalingEnabled ? containerWidth - (0, _editorSharedStyles.akEditorGutterPaddingDynamic)() * 2 : containerWidth - (0, _editorSharedStyles.akEditorGutterPaddingDynamic)() * 2 - resizeHandleSpacing;
  }
  var width = !node.attrs.width && isCommentEditor ? responsiveContainerWidth : Math.min(tableWidth, responsiveContainerWidth);
  if (!isResizing) {
    tableWidthRef.current = width;
  }
  var maxResizerWidth = isCommentEditor ? responsiveContainerWidth : Math.min(responsiveContainerWidth, _consts.TABLE_MAX_WIDTH);
  var tableResizerProps = {
    width: width,
    maxWidth: maxResizerWidth,
    containerWidth: containerWidth,
    lineLength: lineLength,
    updateWidth: updateWidth,
    editorView: editorView,
    getPos: getPos,
    node: node,
    tableRef: tableRef,
    displayGuideline: displayGuideline,
    attachAnalyticsEvent: attachAnalyticsEvent,
    displayGapCursor: displayGapCursor,
    isTableAlignmentEnabled: isTableAlignmentEnabled,
    isFullWidthModeEnabled: isFullWidthModeEnabled,
    isTableScalingEnabled: isTableScalingEnabled,
    isTableWithFixedColumnWidthsOptionEnabled: isTableWithFixedColumnWidthsOptionEnabled,
    isWholeTableInDanger: isWholeTableInDanger,
    shouldUseIncreasedScalingPercent: shouldUseIncreasedScalingPercent,
    pluginInjectionApi: pluginInjectionApi,
    onResizeStart: onResizeStart,
    onResizeStop: onResizeStop,
    isCommentEditor: isCommentEditor
  };
  var isLivePageViewMode = (editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode) === 'view';
  return /*#__PURE__*/_react.default.createElement(AlignmentTableContainerWrapper, {
    isTableAlignmentEnabled: isTableAlignmentEnabled,
    node: node,
    pluginInjectionApi: pluginInjectionApi,
    getPos: getPos,
    editorView: editorView
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: tableWidthRef.current,
      height: resizing ? updateContainerHeight(tableWrapperHeight !== null && tableWrapperHeight !== void 0 ? tableWrapperHeight : 'auto') : 'auto',
      position: isLivePageViewMode ? 'relative' : 'unset'
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: _types.TableCssClassName.TABLE_RESIZER_CONTAINER,
    ref: containerRef
  }, (0, _platformFeatureFlags.fg)('platform_editor_live_page_prevent_table_recreation') ? null : isLivePageViewMode ? /*#__PURE__*/_react.default.createElement(InnerContainer
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: className,
    node: node
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      width: 'inherit'
    }
  }, children) :
  /*#__PURE__*/
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  _react.default.createElement(_TableResizer.TableResizer, tableResizerProps, /*#__PURE__*/_react.default.createElement(InnerContainer, {
    className: className,
    node: node
  }, children)), (0, _platformFeatureFlags.fg)('platform_editor_live_page_prevent_table_recreation') ?
  /*#__PURE__*/
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  _react.default.createElement(_TableResizer.TableResizer, (0, _extends2.default)({}, tableResizerProps, {
    disabled: isLivePageViewMode
  }), /*#__PURE__*/_react.default.createElement(InnerContainer, {
    className: className,
    node: node
  }, children)) : null));
});
var TableContainer = exports.TableContainer = function TableContainer(_ref6) {
  var children = _ref6.children,
    node = _ref6.node,
    className = _ref6.className,
    _ref6$containerWidth = _ref6.containerWidth,
    editorWidth = _ref6$containerWidth.width,
    lineLength = _ref6$containerWidth.lineLength,
    editorView = _ref6.editorView,
    getPos = _ref6.getPos,
    tableRef = _ref6.tableRef,
    isNested = _ref6.isNested,
    tableWrapperHeight = _ref6.tableWrapperHeight,
    isResizing = _ref6.isResizing,
    pluginInjectionApi = _ref6.pluginInjectionApi,
    isWholeTableInDanger = _ref6.isWholeTableInDanger,
    isTableResizingEnabled = _ref6.isTableResizingEnabled,
    isTableScalingEnabled = _ref6.isTableScalingEnabled,
    isTableWithFixedColumnWidthsOptionEnabled = _ref6.isTableWithFixedColumnWidthsOptionEnabled,
    isTableAlignmentEnabled = _ref6.isTableAlignmentEnabled,
    shouldUseIncreasedScalingPercent = _ref6.shouldUseIncreasedScalingPercent,
    isCommentEditor = _ref6.isCommentEditor,
    isChromelessEditor = _ref6.isChromelessEditor;
  if (isTableResizingEnabled && !isNested) {
    return /*#__PURE__*/_react.default.createElement(ResizableTableContainer
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      node: node
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      containerWidth: editorWidth
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      lineLength: lineLength,
      editorView: editorView,
      getPos: getPos,
      tableRef: tableRef,
      tableWrapperHeight: tableWrapperHeight,
      isResizing: isResizing,
      pluginInjectionApi: pluginInjectionApi,
      isTableScalingEnabled: isTableScalingEnabled,
      isTableWithFixedColumnWidthsOptionEnabled: isTableWithFixedColumnWidthsOptionEnabled,
      isWholeTableInDanger: isWholeTableInDanger,
      isTableAlignmentEnabled: isTableAlignmentEnabled,
      shouldUseIncreasedScalingPercent: shouldUseIncreasedScalingPercent,
      isCommentEditor: isCommentEditor
    }, children);
  }
  var _getPluginState = (0, _pluginFactory.getPluginState)(editorView.state),
    isDragAndDropEnabled = _getPluginState.isDragAndDropEnabled;
  return /*#__PURE__*/_react.default.createElement(InnerContainer, {
    node: node
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: (0, _classnames.default)(className, {
      'less-padding': editorWidth < _editorSharedStyles.akEditorMobileBreakoutPoint && !isNested && !(isChromelessEditor && isDragAndDropEnabled)
    }),
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      width: 'inherit',
      marginLeft: isChromelessEditor ? 18 : undefined
    }
  }, children);
};