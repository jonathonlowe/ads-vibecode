"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyTableView = exports.lazyTableRowView = exports.lazyTableHeaderView = exports.lazyTableCellView = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _table = require("./table");
var _TableCell = _interopRequireDefault(require("./TableCell"));
var _TableRow = _interopRequireDefault(require("./TableRow"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != (0, _typeof2.default)(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } // TODO: ED-23976 - Clean up
var lazyTableView = exports.lazyTableView = function lazyTableView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false) || (0, _platformFeatureFlags.fg)('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      return (0, _table.createTableView)(node, view, getPos, options.portalProviderAPI, options.eventDispatcher, options.getEditorContainerWidth, options.getEditorFeatureFlags, options.dispatchAnalyticsEvent, options.pluginInjectionApi, options.isCommentEditor, options.isChromelessEditor);
    };
  }
  var loader = function loader() {
    var result = Promise.resolve().then(function () {
      return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
      './table'));
    }).then(function (_ref) {
      var createTableView = _ref.createTableView;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _getNodeViewOptions = getNodeViewOptions(),
          portalProviderAPI = _getNodeViewOptions.portalProviderAPI,
          eventDispatcher = _getNodeViewOptions.eventDispatcher,
          getEditorContainerWidth = _getNodeViewOptions.getEditorContainerWidth,
          getEditorFeatureFlags = _getNodeViewOptions.getEditorFeatureFlags,
          dispatchAnalyticsEvent = _getNodeViewOptions.dispatchAnalyticsEvent,
          pluginInjectionApi = _getNodeViewOptions.pluginInjectionApi,
          isCommentEditor = _getNodeViewOptions.isCommentEditor,
          isChromelessEditor = _getNodeViewOptions.isChromelessEditor;
        return createTableView(node, view, getPos, portalProviderAPI, eventDispatcher, getEditorContainerWidth, getEditorFeatureFlags, dispatchAnalyticsEvent, pluginInjectionApi, isCommentEditor, isChromelessEditor);
      };
    });
    return result;
  };
  return (0, _lazyNodeView.withLazyLoading)({
    nodeName: 'table',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
var lazyTableCellView = exports.lazyTableCellView = function lazyTableCellView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false) || (0, _platformFeatureFlags.fg)('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      var _options$pluginInject;
      return new _TableCell.default(node, view, getPos, options.eventDispatcher, (_options$pluginInject = options.pluginInjectionApi) === null || _options$pluginInject === void 0 || (_options$pluginInject = _options$pluginInject.analytics) === null || _options$pluginInject === void 0 ? void 0 : _options$pluginInject.actions);
    };
  }
  var loader = function loader() {
    var result = Promise.resolve().then(function () {
      return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
      './TableCell'));
    }).then(function (_ref2) {
      var TableCell = _ref2.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _pluginInjectionApi$a;
        var _getNodeViewOptions2 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions2.eventDispatcher,
          pluginInjectionApi = _getNodeViewOptions2.pluginInjectionApi;
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions);
      };
    });
    return result;
  };
  return (0, _lazyNodeView.withLazyLoading)({
    nodeName: 'tableCell',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
var lazyTableHeaderView = exports.lazyTableHeaderView = function lazyTableHeaderView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false) || (0, _platformFeatureFlags.fg)('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      var _options$pluginInject2;
      return new _TableCell.default(node, view, getPos, options.eventDispatcher, (_options$pluginInject2 = options.pluginInjectionApi) === null || _options$pluginInject2 === void 0 || (_options$pluginInject2 = _options$pluginInject2.analytics) === null || _options$pluginInject2 === void 0 ? void 0 : _options$pluginInject2.actions);
    };
  }
  var loader = function loader() {
    var result = Promise.resolve().then(function () {
      return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-cell_nodeview" */
      './TableCell'));
    }).then(function (_ref3) {
      var TableCell = _ref3.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _pluginInjectionApi$a2;
        var _getNodeViewOptions3 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions3.eventDispatcher,
          pluginInjectionApi = _getNodeViewOptions3.pluginInjectionApi;
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a2 = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a2 === void 0 ? void 0 : _pluginInjectionApi$a2.actions);
      };
    });
    return result;
  };
  return (0, _lazyNodeView.withLazyLoading)({
    nodeName: 'tableHeader',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
var lazyTableRowView = exports.lazyTableRowView = function lazyTableRowView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false) || (0, _platformFeatureFlags.fg)('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      return new _TableRow.default(node, view, getPos, options.eventDispatcher);
    };
  }
  var loader = function loader() {
    var result = Promise.resolve().then(function () {
      return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-row_nodeview" */
      './TableRow'));
    }).then(function (_ref4) {
      var TableRow = _ref4.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _getNodeViewOptions4 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions4.eventDispatcher;
        return new TableRow(node, view, getPos, eventDispatcher);
      };
    });
    return result;
  };
  return (0, _lazyNodeView.withLazyLoading)({
    nodeName: 'tableRow',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};