"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleTableLayout = exports.toggleNumberColumn = exports.toggleHeaderRow = exports.toggleHeaderColumn = exports.toggleContextualMenu = exports.getNextLayout = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _utils = require("@atlaskit/editor-tables/utils");
var _pluginFactory = require("../plugin-factory");
var _tableAnalytics = require("../table-analytics");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } //#region Imports
//#endregion

// #region Utils
/**
 * Table layout toggle logic
 * default -> wide -> full-width -> default
 */
var getNextLayout = exports.getNextLayout = function getNextLayout(currentLayout) {
  switch (currentLayout) {
    case 'default':
      return 'wide';
    case 'wide':
      return 'full-width';
    case 'full-width':
      return 'default';
    default:
      return 'default';
  }
};
// #endregion

// #region Actions
var toggleHeaderRow = exports.toggleHeaderRow = function toggleHeaderRow(state, dispatch) {
  return (0, _utils.toggleHeader)('row')(state, function (tr) {
    return (0, _pluginFactory.createCommand)({
      type: 'TOGGLE_HEADER_ROW'
    }, function () {
      return tr.setMeta('scrollIntoView', false);
    })(state, dispatch);
  });
};
var toggleHeaderColumn = exports.toggleHeaderColumn = function toggleHeaderColumn(state, dispatch) {
  return (0, _utils.toggleHeader)('column')(state, function (tr) {
    return (0, _pluginFactory.createCommand)({
      type: 'TOGGLE_HEADER_COLUMN'
    }, function () {
      return tr.setMeta('scrollIntoView', false);
    })(state, dispatch);
  });
};
var toggleNumberColumn = exports.toggleNumberColumn = function toggleNumberColumn(state, dispatch) {
  var tr = state.tr;
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var _ref = (0, _utils.findTable)(state.selection),
    node = _ref.node,
    pos = _ref.pos;
  var isNumberedColumnEnabled = node.attrs.isNumberColumnEnabled;
  tr.setNodeMarkup(pos, state.schema.nodes.table, _objectSpread(_objectSpread({}, node.attrs), {}, {
    isNumberColumnEnabled: !isNumberedColumnEnabled
  }));
  tr.setMeta('scrollIntoView', false);
  var tableOverflowChangeTriggerName = isNumberedColumnEnabled ? _analytics.TABLE_OVERFLOW_CHANGE_TRIGGER.DISABLED_NUMBERED_COLUMN : _analytics.TABLE_OVERFLOW_CHANGE_TRIGGER.ENABLED_NUMBERED_COLUMN;
  tr.setMeta(_tableAnalytics.META_KEYS.OVERFLOW_TRIGGER, {
    name: tableOverflowChangeTriggerName
  });
  if (dispatch) {
    dispatch(tr);
  }
  return true;
};
var toggleTableLayout = exports.toggleTableLayout = function toggleTableLayout(state, dispatch) {
  var table = (0, _utils.findTable)(state.selection);
  if (!table) {
    return false;
  }
  var layout = getNextLayout(table.node.attrs.layout);
  return (0, _pluginFactory.createCommand)({
    type: 'SET_TABLE_LAYOUT',
    data: {
      layout: layout
    }
  }, function (tr) {
    tr.setNodeMarkup(table.pos, state.schema.nodes.table, _objectSpread(_objectSpread({}, table.node.attrs), {}, {
      layout: layout
    }));
    tr.setMeta(_tableAnalytics.META_KEYS.OVERFLOW_TRIGGER, {
      name: _analytics.TABLE_OVERFLOW_CHANGE_TRIGGER.RESIZED
    });
    return tr.setMeta('scrollIntoView', false);
  })(state, dispatch);
};
var toggleContextualMenu = exports.toggleContextualMenu = function toggleContextualMenu() {
  return (0, _pluginFactory.createCommand)({
    type: 'TOGGLE_CONTEXTUAL_MENU'
  }, function (tr) {
    return tr.setMeta('addToHistory', false);
  });
};
// #endregion