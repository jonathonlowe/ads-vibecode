"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateRowOrColumnMovedTransform = exports.updateRowOrColumnMoved = exports.resetRowOrColumnMovedTransform = void 0;
var _actions = require("./actions");
var _pluginFactory = require("./plugin-factory");
var _pluginKey = require("./plugin-key");
var _movedEvent = require("./utils/moved-event");
var updateRowOrColumnMoved = exports.updateRowOrColumnMoved = function updateRowOrColumnMoved(nextState, nextAction) {
  return (0, _pluginFactory.createCommand)(function (state) {
    var _getPluginState = (0, _pluginFactory.getPluginState)(state),
      rowOrColumnMoved = _getPluginState.rowOrColumnMoved;
    var data = (0, _movedEvent.getMovedPayload)(nextState, nextAction, rowOrColumnMoved);
    return {
      type: _actions.AnalyticPluginTypes.UpdateRowOrColumnMovedAction,
      data: data
    };
  }, function (tr) {
    return tr.setMeta('addToHistory', false);
  });
};

// --- transforms, prefer these over commands to avoid an extra 'dispatch'
var resetRowOrColumnMovedTransform = exports.resetRowOrColumnMovedTransform = function resetRowOrColumnMovedTransform() {
  return function (tr) {
    var payload = {
      type: _actions.AnalyticPluginTypes.RemoveRowOrColumnMovedAction
    };
    return tr.setMeta(_pluginKey.pluginKey, payload);
  };
};
var updateRowOrColumnMovedTransform = exports.updateRowOrColumnMovedTransform = function updateRowOrColumnMovedTransform(nextState, nextAction) {
  return function (state, tr) {
    var _getPluginState2 = (0, _pluginFactory.getPluginState)(state),
      rowOrColumnMoved = _getPluginState2.rowOrColumnMoved;
    var data = (0, _movedEvent.getMovedPayload)(nextState, nextAction, rowOrColumnMoved);
    var payload = {
      type: _actions.AnalyticPluginTypes.UpdateRowOrColumnMovedAction,
      data: data
    };
    return tr.setMeta(_pluginKey.pluginKey, payload);
  };
};