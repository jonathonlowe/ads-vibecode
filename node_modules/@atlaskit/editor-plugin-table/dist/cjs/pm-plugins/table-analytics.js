"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = exports.META_KEYS = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * A plugin is created for collecting payload data for tableOverflowChanged analytics event
 */
var pluginKey = new _state.PluginKey('tableOverflowAnalyticsPlugin');
var META_KEYS = exports.META_KEYS = {
  OVERFLOW_TRIGGER: 'tableOverflowTrigger',
  OVERFLOW_STATE_CHANGED: 'tableOverflowStateChanged'
};
var createPlugin = exports.createPlugin = function createPlugin(dispatch, dispatchAnalyticsEvent, tableResizingEnabled) {
  return new _safePlugin.SafePlugin({
    key: pluginKey,
    state: {
      init: function init() {
        return {
          lastTrigger: undefined
        };
      },
      apply: function apply(tr, pluginState) {
        var meta = tr.getMeta(META_KEYS.OVERFLOW_TRIGGER);
        var newState = _objectSpread({}, pluginState);
        if (meta) {
          newState.lastTrigger = _objectSpread({}, meta);
          dispatch(pluginKey, newState);
          return newState;
        }
        return pluginState;
      }
    },
    appendTransaction: function appendTransaction(transactions, oldState, newState) {
      var _newPluginState$lastT;
      var newPluginState = pluginKey.getState(newState);
      var hasAnalyticsBeenDispatched = false;
      var lastTriggerName = (newPluginState === null || newPluginState === void 0 || (_newPluginState$lastT = newPluginState.lastTrigger) === null || _newPluginState$lastT === void 0 ? void 0 : _newPluginState$lastT.name) ||
      // NOTE: We assume that we know and can correctly differentiate
      // between all triggers of table overflow state change.
      // The only trigger we can't identify is viewport width change.
      // However, since there is still a chance that there are other triggers we didn't think of,
      // all these unknown triggers and viwport width change trigger are captured as EXTERNAL.
      _analytics.TABLE_OVERFLOW_CHANGE_TRIGGER.EXTERNAL;
      transactions.forEach(function (tr) {
        var payload = tr.getMeta(META_KEYS.OVERFLOW_STATE_CHANGED);
        if (payload) {
          dispatchAnalyticsEvent({
            action: _analytics.TABLE_ACTION.OVERFLOW_CHANGED,
            actionSubject: _analytics.ACTION_SUBJECT.TABLE,
            actionSubjectId: null,
            eventType: _analytics.EVENT_TYPE.TRACK,
            attributes: {
              editorWidth: payload.editorWidth,
              parentWidth: payload.parentWidth,
              isOverflowing: payload.isOverflowing,
              wasOverflowing: payload.wasOverflowing,
              width: payload.width,
              tableResizingEnabled: tableResizingEnabled,
              trigger: lastTriggerName
            }
          });
          hasAnalyticsBeenDispatched = true;
        }
      });
      if (hasAnalyticsBeenDispatched) {
        var tr = newState.tr;
        return tr.setMeta(META_KEYS.OVERFLOW_TRIGGER, {});
      }
      return undefined;
    }
  });
};