import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { handleDocOrSelectionChanged } from './handlers';
import { pluginKey } from './plugin-key';
import reducer from './reducer';
var _pluginFactory = pluginFactory(pluginKey, reducer, {
    mapping: function mapping(tr, pluginState) {
      if (tr.docChanged) {
        var updatedTargetCell = {};
        if (pluginState.targetCellPosition) {
          var _tr$mapping$mapResult = tr.mapping.mapResult(pluginState.targetCellPosition),
            pos = _tr$mapping$mapResult.pos,
            deleted = _tr$mapping$mapResult.deleted;
          updatedTargetCell = {
            targetCellPosition: deleted ? undefined : pos
          };
        }
        var updatedTablePos = {};
        if (pluginState.tablePos) {
          var _tr$mapping$mapResult2 = tr.mapping.mapResult(pluginState.tablePos, -1),
            _pos = _tr$mapping$mapResult2.pos,
            _deleted = _tr$mapping$mapResult2.deleted;
          updatedTablePos = {
            tablePos: _deleted ? undefined : _pos
          };
        }
        return _objectSpread(_objectSpread(_objectSpread({}, pluginState), updatedTargetCell), updatedTablePos);
      }
      return pluginState;
    },
    onDocChanged: handleDocOrSelectionChanged,
    onSelectionChanged: handleDocOrSelectionChanged
  }),
  createPluginState = _pluginFactory.createPluginState,
  createCommand = _pluginFactory.createCommand,
  getPluginState = _pluginFactory.getPluginState;
export { createPluginState, createCommand, getPluginState };