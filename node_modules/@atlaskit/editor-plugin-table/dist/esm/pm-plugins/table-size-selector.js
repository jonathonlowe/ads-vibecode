import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
export var pluginKey = new PluginKey('tableSizeSelectorPlugin');
export var createPlugin = function createPlugin(dispatch) {
  return new SafePlugin({
    key: pluginKey,
    state: {
      init: function init() {
        return {
          isSelectorOpen: false
        };
      },
      apply: function apply(tr, currentPluginState) {
        var meta = tr.getMeta(pluginKey);
        if (meta) {
          var keys = Object.keys(meta);
          var changed = keys.some(function (key) {
            return currentPluginState[key] !== meta[key];
          });
          if (changed) {
            var newState = _objectSpread(_objectSpread({}, currentPluginState), meta);
            dispatch(pluginKey, newState);
            return newState;
          }
        }
        return currentPluginState;
      }
    }
  });
};