import { AnalyticPluginTypes } from './actions';
import { createCommand, getPluginState } from './plugin-factory';
import { pluginKey } from './plugin-key';
import { getMovedPayload } from './utils/moved-event';
export var updateRowOrColumnMoved = function updateRowOrColumnMoved(nextState, nextAction) {
  return createCommand(function (state) {
    var _getPluginState = getPluginState(state),
      rowOrColumnMoved = _getPluginState.rowOrColumnMoved;
    var data = getMovedPayload(nextState, nextAction, rowOrColumnMoved);
    return {
      type: AnalyticPluginTypes.UpdateRowOrColumnMovedAction,
      data: data
    };
  }, function (tr) {
    return tr.setMeta('addToHistory', false);
  });
};

// --- transforms, prefer these over commands to avoid an extra 'dispatch'
export var resetRowOrColumnMovedTransform = function resetRowOrColumnMovedTransform() {
  return function (tr) {
    var payload = {
      type: AnalyticPluginTypes.RemoveRowOrColumnMovedAction
    };
    return tr.setMeta(pluginKey, payload);
  };
};
export var updateRowOrColumnMovedTransform = function updateRowOrColumnMovedTransform(nextState, nextAction) {
  return function (state, tr) {
    var _getPluginState2 = getPluginState(state),
      rowOrColumnMoved = _getPluginState2.rowOrColumnMoved;
    var data = getMovedPayload(nextState, nextAction, rowOrColumnMoved);
    var payload = {
      type: AnalyticPluginTypes.UpdateRowOrColumnMovedAction,
      data: data
    };
    return tr.setMeta(pluginKey, payload);
  };
};