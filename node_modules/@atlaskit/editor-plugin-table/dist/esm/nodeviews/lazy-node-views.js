import { withLazyLoading } from '@atlaskit/editor-common/lazy-node-view';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
// TODO: ED-23976 - Clean up
import { createTableView } from './table';
import TableCell from './TableCell';
import TableRow from './TableRow';
export var lazyTableView = function lazyTableView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      return createTableView(node, view, getPos, options.portalProviderAPI, options.eventDispatcher, options.getEditorContainerWidth, options.getEditorFeatureFlags, options.dispatchAnalyticsEvent, options.pluginInjectionApi, options.isCommentEditor, options.isChromelessEditor);
    };
  }
  var loader = function loader() {
    var result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
    './table').then(function (_ref) {
      var createTableView = _ref.createTableView;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _getNodeViewOptions = getNodeViewOptions(),
          portalProviderAPI = _getNodeViewOptions.portalProviderAPI,
          eventDispatcher = _getNodeViewOptions.eventDispatcher,
          getEditorContainerWidth = _getNodeViewOptions.getEditorContainerWidth,
          getEditorFeatureFlags = _getNodeViewOptions.getEditorFeatureFlags,
          dispatchAnalyticsEvent = _getNodeViewOptions.dispatchAnalyticsEvent,
          pluginInjectionApi = _getNodeViewOptions.pluginInjectionApi,
          isCommentEditor = _getNodeViewOptions.isCommentEditor,
          isChromelessEditor = _getNodeViewOptions.isChromelessEditor;
        return createTableView(node, view, getPos, portalProviderAPI, eventDispatcher, getEditorContainerWidth, getEditorFeatureFlags, dispatchAnalyticsEvent, pluginInjectionApi, isCommentEditor, isChromelessEditor);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'table',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
export var lazyTableCellView = function lazyTableCellView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      var _options$pluginInject;
      return new TableCell(node, view, getPos, options.eventDispatcher, (_options$pluginInject = options.pluginInjectionApi) === null || _options$pluginInject === void 0 || (_options$pluginInject = _options$pluginInject.analytics) === null || _options$pluginInject === void 0 ? void 0 : _options$pluginInject.actions);
    };
  }
  var loader = function loader() {
    var result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
    './TableCell').then(function (_ref2) {
      var TableCell = _ref2.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _pluginInjectionApi$a;
        var _getNodeViewOptions2 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions2.eventDispatcher,
          pluginInjectionApi = _getNodeViewOptions2.pluginInjectionApi;
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableCell',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
export var lazyTableHeaderView = function lazyTableHeaderView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      var _options$pluginInject2;
      return new TableCell(node, view, getPos, options.eventDispatcher, (_options$pluginInject2 = options.pluginInjectionApi) === null || _options$pluginInject2 === void 0 || (_options$pluginInject2 = _options$pluginInject2.analytics) === null || _options$pluginInject2 === void 0 ? void 0 : _options$pluginInject2.actions);
    };
  }
  var loader = function loader() {
    var result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-cell_nodeview" */
    './TableCell').then(function (_ref3) {
      var TableCell = _ref3.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _pluginInjectionApi$a2;
        var _getNodeViewOptions3 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions3.eventDispatcher,
          pluginInjectionApi = _getNodeViewOptions3.pluginInjectionApi;
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a2 = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a2 === void 0 ? void 0 : _pluginInjectionApi$a2.actions);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableHeader',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};
export var lazyTableRowView = function lazyTableRowView(options) {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return function (node, view, getPos) {
      return new TableRow(node, view, getPos, options.eventDispatcher);
    };
  }
  var loader = function loader() {
    var result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-row_nodeview" */
    './TableRow').then(function (_ref4) {
      var TableRow = _ref4.default;
      return function (node, view, getPos, decorations, getNodeViewOptions) {
        var _getNodeViewOptions4 = getNodeViewOptions(),
          eventDispatcher = _getNodeViewOptions4.eventDispatcher;
        return new TableRow(node, view, getPos, eventDispatcher);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableRow',
    getNodeViewOptions: function getNodeViewOptions() {
      return options;
    },
    loader: loader
  });
};