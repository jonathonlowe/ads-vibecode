import React, { useMemo } from 'react';
import classnames from 'classnames';
import { injectIntl } from 'react-intl-next';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { tableMessages as messages } from '@atlaskit/editor-common/messages';
import { findTable, isTableSelected, selectTable } from '@atlaskit/editor-tables/utils';
import { clearHoverSelection } from '../../../pm-plugins/commands';
import { TableCssClassName as ClassName } from '../../../types';
var DragCornerControlsComponent = function DragCornerControlsComponent(_ref) {
  var editorView = _ref.editorView,
    isInDanger = _ref.isInDanger,
    isResizing = _ref.isResizing,
    formatMessage = _ref.intl.formatMessage;
  var handleOnClick = function handleOnClick() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    dispatch(selectTable(state.tr).setMeta('addToHistory', false));
  };
  var handleMouseOut = function handleMouseOut() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    clearHoverSelection()(state, dispatch);
  };
  var isActive = useMemo(function () {
    var selection = editorView.state.selection;
    var table = findTable(selection);
    if (!table) {
      return false;
    }
    return isTableSelected(selection);
  }, [editorView.state]);
  if (isResizing) {
    return null;
  }
  return /*#__PURE__*/React.createElement("button", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: classnames(ClassName.DRAG_CORNER_BUTTON, {
      active: isActive,
      danger: isActive && isInDanger
    }),
    "aria-label": formatMessage(messages.cornerControl),
    type: "button",
    onClick: handleOnClick
    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
    ,
    onMouseOut: handleMouseOut,
    contentEditable: false
  }, /*#__PURE__*/React.createElement("div", {
    className: ClassName.DRAG_CORNER_BUTTON_INNER
  }));
};
var DragCornerControlsComponentWithSelection = function DragCornerControlsComponentWithSelection(_ref2) {
  var editorView = _ref2.editorView,
    isInDanger = _ref2.isInDanger,
    isResizing = _ref2.isResizing,
    formatMessage = _ref2.intl.formatMessage,
    api = _ref2.api;
  var _useSharedPluginState = useSharedPluginState(api, ['selection']),
    selectionState = _useSharedPluginState.selectionState;
  var handleOnClick = function handleOnClick() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    dispatch(selectTable(state.tr).setMeta('addToHistory', false));
  };
  var handleMouseOut = function handleMouseOut() {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    clearHoverSelection()(state, dispatch);
  };
  var isActive = useMemo(function () {
    if (!(selectionState !== null && selectionState !== void 0 && selectionState.selection)) {
      return;
    }
    var table = findTable(selectionState.selection);
    if (!table) {
      return false;
    }
    return isTableSelected(selectionState.selection);
  }, [selectionState]);
  if (isResizing) {
    return null;
  }
  return /*#__PURE__*/React.createElement("button", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: classnames(ClassName.DRAG_CORNER_BUTTON, {
      active: isActive,
      danger: isActive && isInDanger
    }),
    "aria-label": formatMessage(messages.cornerControl),
    type: "button",
    onClick: handleOnClick
    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
    ,
    onMouseOut: handleMouseOut,
    contentEditable: false
  }, /*#__PURE__*/React.createElement("div", {
    className: ClassName.DRAG_CORNER_BUTTON_INNER
  }));
};
export var DragCornerControlsWithSelection = injectIntl(DragCornerControlsComponentWithSelection);
export var DragCornerControls = injectIntl(DragCornerControlsComponent);