import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useEffect } from 'react';
import { tableCell, tableCellWithNestedTable, tableHeader, tableHeaderWithNestedTable, tableRow, tableRowWithNestedTable } from '@atlaskit/adf-schema';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD, TABLE_ACTION } from '@atlaskit/editor-common/analytics';
import { browser } from '@atlaskit/editor-common/browser';
import { ErrorBoundary } from '@atlaskit/editor-common/error-boundary';
import { getDomRefFromSelection } from '@atlaskit/editor-common/get-dom-ref-from-selection';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { IconTable } from '@atlaskit/editor-common/icons';
import { toggleTable, tooltip } from '@atlaskit/editor-common/keymaps';
import { toolbarInsertBlockMessages as messages } from '@atlaskit/editor-common/messages';
import { getParentOfTypeCount, getPositionAfterTopParentNodeOfType } from '@atlaskit/editor-common/nesting';
import { editorCommandToPMCommand } from '@atlaskit/editor-common/preset';
import { ResizerBreakoutModeLabel } from '@atlaskit/editor-common/resizer';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { WithPluginState } from '@atlaskit/editor-common/with-plugin-state';
import { hasParentNodeOfType, safeInsert } from '@atlaskit/editor-prosemirror/utils';
import { akEditorFloatingPanelZIndex } from '@atlaskit/editor-shared-styles';
import { tableEditing } from '@atlaskit/editor-tables/pm-plugins';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { tableNodeSpecWithFixedToDOM } from './nodeviews/toDOM';
import { createPlugin as createTableAnalyticsPlugin } from './pm-plugins/analytics/plugin';
import { pluginKey as tableAnalyticsPluginKey } from './pm-plugins/analytics/plugin-key';
import { insertTableWithNestingSupport, insertTableWithSize } from './pm-plugins/commands/insert';
import { pluginConfig } from './pm-plugins/create-plugin-config';
import { createPlugin as createDecorationsPlugin } from './pm-plugins/decorations/plugin';
import { createPlugin as createDragAndDropPlugin } from './pm-plugins/drag-and-drop/plugin';
import { pluginKey as dragAndDropPluginKey } from './pm-plugins/drag-and-drop/plugin-key';
import { keymapPlugin } from './pm-plugins/keymap';
import { createPlugin } from './pm-plugins/main';
import { pluginKey } from './pm-plugins/plugin-key';
import { createPlugin as createTableSafariDeleteCompositionTextIssueWorkaroundPlugin } from './pm-plugins/safari-delete-composition-text-issue-workaround';
import { createPlugin as createStickyHeadersPlugin } from './pm-plugins/sticky-headers/plugin';
import { pluginKey as stickyHeadersPluginKey } from './pm-plugins/sticky-headers/plugin-key';
import { findStickyHeaderForTable } from './pm-plugins/sticky-headers/util';
import { createPlugin as createTableOverflowAnalyticsPlugin } from './pm-plugins/table-analytics';
import { createPlugin as createTableLocalIdPlugin } from './pm-plugins/table-local-id';
import { createPlugin as createFlexiResizingPlugin } from './pm-plugins/table-resizing/plugin';
import { getPluginState as getFlexiResizingPlugin } from './pm-plugins/table-resizing/plugin-factory';
import { pluginKey as tableResizingPluginKey } from './pm-plugins/table-resizing/plugin-key';
import { tableSelectionKeymapPlugin } from './pm-plugins/table-selection-keymap';
import { createPlugin as createSizeSelectorPlugin, pluginKey as sizeSelectorPluginKey } from './pm-plugins/table-size-selector';
import { createPlugin as createTableWidthPlugin, pluginKey as tableWidthPluginKey } from './pm-plugins/table-width';
import { createPlugin as createTableWidthInCommentFixPlugin } from './pm-plugins/table-width-in-comment-fix';
import { createTableWithWidth } from './pm-plugins/utils/create';
import { createPlugin as createViewModeSortPlugin } from './pm-plugins/view-mode-sort';
import { ContentComponent } from './ui/ContentComponent';
import FloatingContextualButton from './ui/FloatingContextualButton';
import FloatingContextualMenu from './ui/FloatingContextualMenu';
import FloatingDeleteButton from './ui/FloatingDeleteButton';
import FloatingDragMenu from './ui/FloatingDragMenu';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import FloatingInsertButton from './ui/FloatingInsertButton';
import { FloatingToolbarLabel } from './ui/FloatingToolbarLabel/FloatingToolbarLabel';
import { GlobalStylesWrapper } from './ui/global-styles';
import { SizeSelector } from './ui/SizeSelector';
import { FullWidthDisplay } from './ui/TableFullWidthLabel';
import { getToolbarConfig } from './ui/toolbar';
var defaultGetEditorFeatureFlags = function defaultGetEditorFeatureFlags() {
  return {};
};

/**
 * Table plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
var tablePlugin = function tablePlugin(_ref) {
  var _api$analytics, _api$accessibilityUti, _options$getEditorFea, _options$getEditorFea2, _api$analytics2;
  var options = _ref.config,
    api = _ref.api;
  var editorViewRef = {
    current: null
  };
  var defaultGetEditorContainerWidth = function defaultGetEditorContainerWidth() {
    var _api$width$sharedStat, _api$width, _document$body$offset, _document;
    return (_api$width$sharedStat = api === null || api === void 0 || (_api$width = api.width) === null || _api$width === void 0 ? void 0 : _api$width.sharedState.currentState()) !== null && _api$width$sharedStat !== void 0 ? _api$width$sharedStat : {
      width: (_document$body$offset = (_document = document) === null || _document === void 0 || (_document = _document.body) === null || _document === void 0 ? void 0 : _document.offsetWidth) !== null && _document$body$offset !== void 0 ? _document$body$offset : 500
    };
  };
  var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  var ariaNotifyPlugin = api === null || api === void 0 || (_api$accessibilityUti = api.accessibilityUtils) === null || _api$accessibilityUti === void 0 ? void 0 : _api$accessibilityUti.actions.ariaNotify;
  var isTableFixedColumnWidthsOptionEnabled = (options === null || options === void 0 || (_options$getEditorFea = options.getEditorFeatureFlags) === null || _options$getEditorFea === void 0 ? void 0 : _options$getEditorFea.call(options).tableWithFixedColumnWidthsOption) || false;
  var shouldUseIncreasedScalingPercent = (options === null || options === void 0 ? void 0 : options.isTableScalingEnabled) && (isTableFixedColumnWidthsOptionEnabled || ( // When in comment editor, we need the scaling percent to be 40% while tableWithFixedColumnWidthsOption is not visible
  options === null || options === void 0 ? void 0 : options.isCommentEditor));
  var isTableSelectorEnabled =
  // eslint-disable-next-line @atlaskit/platform/no-preconditioning
  !(options !== null && options !== void 0 && options.isChromelessEditor) && !(options !== null && options !== void 0 && options.isCommentEditor) && (options === null || options === void 0 || (_options$getEditorFea2 = options.getEditorFeatureFlags) === null || _options$getEditorFea2 === void 0 ? void 0 : _options$getEditorFea2.call(options).tableSelector) && editorExperiment('platform_editor_controls', 'variant1') && fg('platform_editor_controls_table_picker');
  return {
    name: 'table',
    // Use getSharedState to store fullWidthEnabled and wasFullWidthModeEnabled to guarantee access
    // to most up to date values - passing to createPluginState will not re-initialise the state
    getSharedState: function getSharedState(editorState) {
      var _tablePluginState$tab, _tableWidthResizingPl;
      if (!editorState) {
        return undefined;
      }

      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var tablePluginState = pluginKey.getState(editorState);
      var tableResizingPluginState = getFlexiResizingPlugin(editorState);
      var tableWidthResizingPluginState = tableWidthPluginKey.getState(editorState);
      var stickyHeadersState = stickyHeadersPluginKey.getState(editorState);
      var stickyHeader = stickyHeadersState ? findStickyHeaderForTable(stickyHeadersState, tablePluginState === null || tablePluginState === void 0 ? void 0 : tablePluginState.tablePos) : undefined;
      var dragAndDropState = dragAndDropPluginKey.getState(editorState);
      var sharedStateInternal = {
        isFullWidthModeEnabled: !!(options !== null && options !== void 0 && options.fullWidthEnabled),
        wasFullWidthModeEnabled: !!(options !== null && options !== void 0 && options.wasFullWidthEnabled),
        isHeaderRowEnabled: tablePluginState.isHeaderRowEnabled,
        isHeaderColumnEnabled: tablePluginState.isHeaderColumnEnabled,
        ordering: tablePluginState.ordering,
        isResizing: !!(tableResizingPluginState !== null && tableResizingPluginState !== void 0 && tableResizingPluginState.dragging || tableWidthResizingPluginState !== null && tableWidthResizingPluginState !== void 0 && tableWidthResizingPluginState.resizing),
        isTableResizing: tableWidthResizingPluginState === null || tableWidthResizingPluginState === void 0 ? void 0 : tableWidthResizingPluginState.resizing,
        isInDanger: tablePluginState.isInDanger,
        hoveredRows: tablePluginState.hoveredRows,
        hoveredColumns: tablePluginState.hoveredColumns,
        hoveredCell: tablePluginState.hoveredCell,
        isTableHovered: tablePluginState.isTableHovered,
        isWholeTableInDanger: tablePluginState.isWholeTableInDanger,
        // IMPORTANT: Need to continue to pass tableNode to control re-renders
        // TableComponent listens for node attribute changes to update colgroups
        tableNode: tablePluginState.tableNode,
        widthToWidest: tablePluginState.widthToWidest,
        resizingTableLocalId: tableWidthResizingPluginState === null || tableWidthResizingPluginState === void 0 ? void 0 : tableWidthResizingPluginState.tableLocalId,
        tableRef: (_tablePluginState$tab = tablePluginState === null || tablePluginState === void 0 ? void 0 : tablePluginState.tableRef) !== null && _tablePluginState$tab !== void 0 ? _tablePluginState$tab : undefined,
        resizingTableRef: (_tableWidthResizingPl = tableWidthResizingPluginState === null || tableWidthResizingPluginState === void 0 ? void 0 : tableWidthResizingPluginState.tableRef) !== null && _tableWidthResizingPl !== void 0 ? _tableWidthResizingPl : undefined,
        tablePos: tablePluginState.tablePos,
        targetCellPosition: tablePluginState.targetCellPosition,
        isContextualMenuOpen: tablePluginState.isContextualMenuOpen,
        pluginConfig: tablePluginState.pluginConfig,
        insertColumnButtonIndex: tablePluginState.insertColumnButtonIndex,
        insertRowButtonIndex: tablePluginState.insertRowButtonIndex,
        isDragAndDropEnabled: tablePluginState.isDragAndDropEnabled,
        tableWrapperTarget: tablePluginState.tableWrapperTarget,
        isCellMenuOpenByKeyboard: tablePluginState.isCellMenuOpenByKeyboard,
        stickyHeader: stickyHeader,
        dragMenuDirection: dragAndDropState === null || dragAndDropState === void 0 ? void 0 : dragAndDropState.dragMenuDirection,
        dragMenuIndex: dragAndDropState === null || dragAndDropState === void 0 ? void 0 : dragAndDropState.dragMenuIndex,
        isDragMenuOpen: dragAndDropState === null || dragAndDropState === void 0 ? void 0 : dragAndDropState.isDragMenuOpen
      };
      return sharedStateInternal;
    },
    actions: {
      insertTable: function insertTable(analyticsPayload) {
        return function (state, dispatch) {
          var _options$tableOptions;
          if (options !== null && options !== void 0 && (_options$tableOptions = options.tableOptions) !== null && _options$tableOptions !== void 0 && _options$tableOptions.allowNestedTables && fg('platform_editor_use_nested_table_pm_nodes')) {
            return editorCommandToPMCommand(insertTableWithNestingSupport({
              isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
              isTableAlignmentEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableAlignment,
              isFullWidthModeEnabled: options === null || options === void 0 ? void 0 : options.fullWidthEnabled,
              isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
              isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
              isTableResizingEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing
            }, api, analyticsPayload))(state, dispatch);
          } else {
            var _api$contentInsertion, _api$contentInsertion2;
            var node = createTableWithWidth({
              isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
              isTableAlignmentEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableAlignment,
              isFullWidthModeEnabled: options === null || options === void 0 ? void 0 : options.fullWidthEnabled,
              isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
              isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
              isTableResizingEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing
            })(state.schema);
            return (_api$contentInsertion = api === null || api === void 0 || (_api$contentInsertion2 = api.contentInsertion) === null || _api$contentInsertion2 === void 0 || (_api$contentInsertion2 = _api$contentInsertion2.actions) === null || _api$contentInsertion2 === void 0 ? void 0 : _api$contentInsertion2.insert({
              state: state,
              dispatch: dispatch,
              node: node,
              options: {
                selectNodeInserted: false,
                analyticsPayload: _objectSpread(_objectSpread({}, analyticsPayload), {}, {
                  attributes: _objectSpread(_objectSpread({}, analyticsPayload.attributes), {}, {
                    localId: node.attrs.localId
                  })
                })
              }
            })) !== null && _api$contentInsertion !== void 0 ? _api$contentInsertion : false;
          }
        };
      }
    },
    commands: {
      insertTableWithSize: fg('platform_editor_use_nested_table_pm_nodes') ? function (rowsCount, colsCount, inputMethod) {
        return insertTableWithNestingSupport({
          isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
          isTableAlignmentEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableAlignment,
          isFullWidthModeEnabled: options === null || options === void 0 ? void 0 : options.fullWidthEnabled,
          isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
          isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
          isTableResizingEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing,
          createTableProps: {
            rowsCount: rowsCount,
            colsCount: colsCount
          }
        }, api, {
          action: ACTION.INSERTED,
          actionSubject: ACTION_SUBJECT.DOCUMENT,
          actionSubjectId: ACTION_SUBJECT_ID.TABLE,
          attributes: {
            inputMethod: inputMethod !== null && inputMethod !== void 0 ? inputMethod : INPUT_METHOD.PICKER,
            totalRowCount: rowsCount,
            totalColumnCount: colsCount
          },
          eventType: EVENT_TYPE.TRACK
        });
      } : insertTableWithSize(options === null || options === void 0 ? void 0 : options.fullWidthEnabled, options === null || options === void 0 ? void 0 : options.isTableScalingEnabled, options === null || options === void 0 ? void 0 : options.tableOptions.allowTableAlignment, api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions, options === null || options === void 0 ? void 0 : options.isCommentEditor)
    },
    nodes: function nodes() {
      var _options$tableOptions2;
      var _pluginConfig = pluginConfig(options === null || options === void 0 ? void 0 : options.tableOptions),
        allowColumnResizing = _pluginConfig.allowColumnResizing;
      // TODO: ED-25901 - We need to move this into a plugin config option so we don't accidentally enable nested nodes in Jira
      var isNestingSupported = Boolean(options === null || options === void 0 || (_options$tableOptions2 = options.tableOptions) === null || _options$tableOptions2 === void 0 ? void 0 : _options$tableOptions2.allowNestedTables);
      return isNestingSupported ? [{
        name: 'table',
        node: tableNodeSpecWithFixedToDOM({
          allowColumnResizing: Boolean(allowColumnResizing),
          tableResizingEnabled: Boolean(options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing),
          getEditorContainerWidth: defaultGetEditorContainerWidth,
          isNestingSupported: isNestingSupported
        })
      }, {
        name: 'tableHeader',
        node: tableHeaderWithNestedTable
      }, {
        name: 'tableRow',
        node: tableRowWithNestedTable
      }, {
        name: 'tableCell',
        node: tableCellWithNestedTable
      }] : [{
        name: 'table',
        node: tableNodeSpecWithFixedToDOM({
          allowColumnResizing: Boolean(allowColumnResizing),
          tableResizingEnabled: Boolean(options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing),
          getEditorContainerWidth: defaultGetEditorContainerWidth,
          isNestingSupported: isNestingSupported
        })
      }, {
        name: 'tableHeader',
        node: tableHeader
      }, {
        name: 'tableRow',
        node: tableRow
      }, {
        name: 'tableCell',
        node: tableCell
      }];
    },
    pmPlugins: function pmPlugins() {
      var plugins = [{
        name: 'table',
        plugin: function plugin(_ref2) {
          var dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
            dispatch = _ref2.dispatch,
            portalProviderAPI = _ref2.portalProviderAPI,
            nodeViewPortalProviderAPI = _ref2.nodeViewPortalProviderAPI,
            eventDispatcher = _ref2.eventDispatcher,
            getIntl = _ref2.getIntl;
          var _ref3 = options || {},
            fullWidthEnabled = _ref3.fullWidthEnabled,
            wasFullWidthEnabled = _ref3.wasFullWidthEnabled,
            tableOptions = _ref3.tableOptions,
            getEditorFeatureFlags = _ref3.getEditorFeatureFlags,
            dragAndDropEnabled = _ref3.dragAndDropEnabled,
            isTableScalingEnabled = _ref3.isTableScalingEnabled,
            isCommentEditor = _ref3.isCommentEditor,
            isChromelessEditor = _ref3.isChromelessEditor;
          return createPlugin(dispatchAnalyticsEvent, dispatch, portalProviderAPI, nodeViewPortalProviderAPI, eventDispatcher, pluginConfig(tableOptions), defaultGetEditorContainerWidth, getEditorFeatureFlags || defaultGetEditorFeatureFlags, getIntl, fullWidthEnabled, wasFullWidthEnabled, dragAndDropEnabled, editorAnalyticsAPI, api, isTableScalingEnabled, shouldUseIncreasedScalingPercent, isCommentEditor, isChromelessEditor);
        }
      }, {
        name: 'tablePMColResizing',
        plugin: function plugin(_ref4) {
          var dispatch = _ref4.dispatch,
            nodeViewPortalProviderAPI = _ref4.nodeViewPortalProviderAPI;
          var _ref5 = options || {},
            fullWidthEnabled = _ref5.fullWidthEnabled,
            tableOptions = _ref5.tableOptions,
            getEditorFeatureFlags = _ref5.getEditorFeatureFlags,
            isTableScalingEnabled = _ref5.isTableScalingEnabled;
          var _pluginConfig2 = pluginConfig(tableOptions),
            allowColumnResizing = _pluginConfig2.allowColumnResizing;
          return allowColumnResizing ? createFlexiResizingPlugin(dispatch, {
            lastColumnResizable: !fullWidthEnabled
          }, defaultGetEditorContainerWidth, getEditorFeatureFlags || defaultGetEditorFeatureFlags, api, nodeViewPortalProviderAPI, editorAnalyticsAPI, isTableScalingEnabled || false, !!(options !== null && options !== void 0 && options.isCommentEditor)) : undefined;
        }
      }, {
        name: 'tableEditing',
        plugin: function plugin() {
          return createDecorationsPlugin();
        }
      },
      // Needs to be lower priority than editor-tables.tableEditing
      // plugin as it is currently swallowing backspace events inside tables
      {
        name: 'tableKeymap',
        plugin: function plugin(_ref6) {
          var getIntl = _ref6.getIntl,
            nodeViewPortalProviderAPI = _ref6.nodeViewPortalProviderAPI;
          var _ref7 = options || {},
            dragAndDropEnabled = _ref7.dragAndDropEnabled,
            _ref7$isTableScalingE = _ref7.isTableScalingEnabled,
            isTableScalingEnabled = _ref7$isTableScalingE === void 0 ? false : _ref7$isTableScalingE,
            _ref7$fullWidthEnable = _ref7.fullWidthEnabled,
            fullWidthEnabled = _ref7$fullWidthEnable === void 0 ? false : _ref7$fullWidthEnable,
            _ref7$isCommentEditor = _ref7.isCommentEditor,
            isCommentEditor = _ref7$isCommentEditor === void 0 ? false : _ref7$isCommentEditor,
            _ref7$isChromelessEdi = _ref7.isChromelessEditor,
            isChromelessEditor = _ref7$isChromelessEdi === void 0 ? false : _ref7$isChromelessEdi,
            tableOptions = _ref7.tableOptions;
          return keymapPlugin(defaultGetEditorContainerWidth, api, nodeViewPortalProviderAPI, editorAnalyticsAPI, dragAndDropEnabled, isTableScalingEnabled, tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.allowTableAlignment, fullWidthEnabled, api, getIntl, isTableFixedColumnWidthsOptionEnabled, shouldUseIncreasedScalingPercent, isCommentEditor, isChromelessEditor, tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.allowTableResizing);
        }
      }, {
        name: 'tableSelectionKeymap',
        plugin: function plugin(_ref8) {
          var getIntl = _ref8.getIntl;
          return tableSelectionKeymapPlugin(api, getIntl);
        }
      }, {
        name: 'tableEditing',
        plugin: function plugin() {
          var _ref9 = options || {},
            dragAndDropEnabled = _ref9.dragAndDropEnabled;
          return tableEditing({
            reportFixedTable: function reportFixedTable(_ref10) {
              var tr = _ref10.tr,
                reason = _ref10.reason;
              editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
                action: TABLE_ACTION.FIXED,
                actionSubject: ACTION_SUBJECT.TABLE,
                actionSubjectId: null,
                attributes: {
                  reason: reason
                },
                eventType: EVENT_TYPE.TRACK
              })(tr);
            },
            dragAndDropEnabled: dragAndDropEnabled
          });
        }
      }, {
        name: 'tableStickyHeaders',
        plugin: function plugin(_ref11) {
          var dispatch = _ref11.dispatch,
            eventDispatcher = _ref11.eventDispatcher;
          return options && options.tableOptions.stickyHeaders ? createStickyHeadersPlugin(dispatch, function () {
            return [];
          }) : undefined;
        }
      }, {
        name: 'tableDragAndDrop',
        plugin: function plugin(_ref12) {
          var dispatch = _ref12.dispatch;
          return options !== null && options !== void 0 && options.dragAndDropEnabled ? createDragAndDropPlugin(dispatch, editorAnalyticsAPI, options === null || options === void 0 ? void 0 : options.isTableScalingEnabled, isTableFixedColumnWidthsOptionEnabled, options.isCommentEditor) : undefined;
        }
      }, {
        name: 'tableViewModeSort',
        plugin: function plugin(_ref13) {
          var nodeViewPortalProviderAPI = _ref13.nodeViewPortalProviderAPI;
          return api !== null && api !== void 0 && api.editorViewMode ? createViewModeSortPlugin(api, nodeViewPortalProviderAPI) : undefined;
        }
      }, {
        name: 'tableLocalId',
        plugin: function plugin(_ref14) {
          var dispatch = _ref14.dispatch;
          return createTableLocalIdPlugin(dispatch);
        }
      }, {
        name: 'tableWidth',
        plugin: function plugin(_ref15) {
          var _options$fullWidthEna, _options$isTableScali, _options$tableOptions3, _options$isCommentEdi;
          var dispatchAnalyticsEvent = _ref15.dispatchAnalyticsEvent,
            dispatch = _ref15.dispatch;
          return options !== null && options !== void 0 && options.tableOptions.allowTableResizing ? createTableWidthPlugin(dispatch, dispatchAnalyticsEvent, (_options$fullWidthEna = options.fullWidthEnabled) !== null && _options$fullWidthEna !== void 0 ? _options$fullWidthEna : false, (_options$isTableScali = options.isTableScalingEnabled) !== null && _options$isTableScali !== void 0 ? _options$isTableScali : false, (_options$tableOptions3 = options.tableOptions.allowTableResizing) !== null && _options$tableOptions3 !== void 0 ? _options$tableOptions3 : false, (_options$isCommentEdi = options.isCommentEditor) !== null && _options$isCommentEdi !== void 0 ? _options$isCommentEdi : false) : undefined;
        }
      }, {
        name: 'tableWidthInCommentFix',
        plugin: function plugin(_ref16) {
          var _options$tableOptions4;
          var dispatch = _ref16.dispatch;
          return options !== null && options !== void 0 && options.tableOptions.allowTableResizing && options !== null && options !== void 0 && options.isCommentEditor ? createTableWidthInCommentFixPlugin(dispatch, (_options$tableOptions4 = options.tableOptions.allowTableAlignment) !== null && _options$tableOptions4 !== void 0 ? _options$tableOptions4 : false) : undefined;
        }
      },
      // TODO: ED-26961 - should be deprecated and eventually replaced with 'tableAnalyticsPlugin'
      {
        name: 'tableOverflowAnalyticsPlugin',
        plugin: function plugin(_ref17) {
          var _options$tableOptions5;
          var dispatch = _ref17.dispatch,
            dispatchAnalyticsEvent = _ref17.dispatchAnalyticsEvent;
          return createTableOverflowAnalyticsPlugin(dispatch, dispatchAnalyticsEvent, (_options$tableOptions5 = options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing) !== null && _options$tableOptions5 !== void 0 ? _options$tableOptions5 : false);
        }
      }, {
        name: 'tableAnalyticsPlugin',
        plugin: function plugin(_ref18) {
          var dispatch = _ref18.dispatch,
            dispatchAnalyticsEvent = _ref18.dispatchAnalyticsEvent;
          return createTableAnalyticsPlugin(dispatch, dispatchAnalyticsEvent);
        }
      }, {
        name: 'tableGetEditorViewReferencePlugin',
        plugin: function plugin() {
          return new SafePlugin({
            view: function view(editorView) {
              editorViewRef.current = editorView;
              return {
                destroy: function destroy() {
                  editorViewRef.current = null;
                }
              };
            }
          });
        }
      }, {
        name: 'tableSizeSelectorPlugin',
        plugin: function plugin(_ref19) {
          var dispatch = _ref19.dispatch;
          return isTableSelectorEnabled ? createSizeSelectorPlugin(dispatch) : undefined;
        }
      }];

      // Workaround for table element breaking issue caused by composition event with an inputType of deleteCompositionText.
      // https://github.com/ProseMirror/prosemirror/issues/934
      if (browser.safari) {
        plugins.push({
          name: 'tableSafariDeleteCompositionTextIssueWorkaround',
          plugin: function plugin() {
            return createTableSafariDeleteCompositionTextIssueWorkaroundPlugin();
          }
        });
      }
      return plugins;
    },
    contentComponent: function contentComponent(_ref20) {
      var _api$featureFlags;
      var editorView = _ref20.editorView,
        popupsMountPoint = _ref20.popupsMountPoint,
        popupsBoundariesElement = _ref20.popupsBoundariesElement,
        popupsScrollableElement = _ref20.popupsScrollableElement,
        dispatchAnalyticsEvent = _ref20.dispatchAnalyticsEvent;
      if (editorExperiment('platform_editor_usesharedpluginstateselector', true)) {
        return /*#__PURE__*/React.createElement(ContentComponent, {
          api: api,
          editorView: editorView,
          dispatchAnalyticsEvent: dispatchAnalyticsEvent,
          options: options,
          popupsMountPoint: popupsMountPoint,
          popupsBoundariesElement: popupsBoundariesElement,
          popupsScrollableElement: popupsScrollableElement,
          defaultGetEditorContainerWidth: defaultGetEditorContainerWidth,
          defaultGetEditorFeatureFlags: defaultGetEditorFeatureFlags
        });
      }
      return /*#__PURE__*/React.createElement(ErrorBoundary, {
        component: ACTION_SUBJECT.TABLES_PLUGIN,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        fallbackComponent: null
      }, /*#__PURE__*/React.createElement(GlobalStylesWrapper, {
        featureFlags: api === null || api === void 0 || (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState(),
        isDragAndDropEnabledOption: options === null || options === void 0 ? void 0 : options.dragAndDropEnabled,
        api: api
      }), /*#__PURE__*/React.createElement(WithPluginState, {
        plugins: {
          tableAnalyticsPluginState: tableAnalyticsPluginKey,
          tablePluginState: pluginKey,
          tableWidthPluginState: tableWidthPluginKey,
          tableResizingPluginState: tableResizingPluginKey,
          stickyHeadersState: stickyHeadersPluginKey,
          dragAndDropState: dragAndDropPluginKey,
          sizeSelectorPluginState: sizeSelectorPluginKey
        },
        render: function render(_ref21) {
          var _sizeSelectorPluginSt, _api$analytics3;
          var resizingPluginState = _ref21.tableResizingPluginState,
            stickyHeadersState = _ref21.stickyHeadersState,
            tablePluginState = _ref21.tablePluginState,
            tableWidthPluginState = _ref21.tableWidthPluginState,
            dragAndDropState = _ref21.dragAndDropState,
            sizeSelectorPluginState = _ref21.sizeSelectorPluginState;
          var isColumnResizing = resizingPluginState === null || resizingPluginState === void 0 ? void 0 : resizingPluginState.dragging;
          var isTableResizing = tableWidthPluginState === null || tableWidthPluginState === void 0 ? void 0 : tableWidthPluginState.resizing;
          var resizingTableLocalId = tableWidthPluginState === null || tableWidthPluginState === void 0 ? void 0 : tableWidthPluginState.tableLocalId;
          var resizingTableRef = tableWidthPluginState === null || tableWidthPluginState === void 0 ? void 0 : tableWidthPluginState.tableRef;
          var isResizing = isColumnResizing || isTableResizing;
          var widthToWidest = tablePluginState === null || tablePluginState === void 0 ? void 0 : tablePluginState.widthToWidest;
          var isSizeSelectorOpen = sizeSelectorPluginState === null || sizeSelectorPluginState === void 0 ? void 0 : sizeSelectorPluginState.isSelectorOpen;
          var _ref22 = tablePluginState,
            tableNode = _ref22.tableNode,
            tablePos = _ref22.tablePos,
            targetCellPosition = _ref22.targetCellPosition,
            isContextualMenuOpen = _ref22.isContextualMenuOpen,
            tableRef = _ref22.tableRef,
            pluginConfig = _ref22.pluginConfig,
            insertColumnButtonIndex = _ref22.insertColumnButtonIndex,
            insertRowButtonIndex = _ref22.insertRowButtonIndex,
            isHeaderColumnEnabled = _ref22.isHeaderColumnEnabled,
            isHeaderRowEnabled = _ref22.isHeaderRowEnabled,
            isDragAndDropEnabled = _ref22.isDragAndDropEnabled,
            tableWrapperTarget = _ref22.tableWrapperTarget,
            isCellMenuOpenByKeyboard = _ref22.isCellMenuOpenByKeyboard;
          var allowControls = pluginConfig.allowControls;
          var stickyHeader = stickyHeadersState ? findStickyHeaderForTable(stickyHeadersState, tablePos) : undefined;
          return /*#__PURE__*/React.createElement(React.Fragment, null, targetCellPosition && (tableRef || isCellMenuOpenByKeyboard) && !isResizing && options && options.allowContextualMenu && /*#__PURE__*/React.createElement(FloatingContextualButton, {
            isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
            editorView: editorView,
            tableNode: tableNode,
            mountPoint: popupsMountPoint,
            targetCellPosition: targetCellPosition,
            scrollableElement: popupsScrollableElement,
            dispatchAnalyticsEvent: dispatchAnalyticsEvent,
            isContextualMenuOpen: isContextualMenuOpen,
            stickyHeader: stickyHeader,
            tableWrapper: tableWrapperTarget,
            isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard
          }), allowControls && /*#__PURE__*/React.createElement(FloatingInsertButton, {
            tableNode: tableNode,
            tableRef: tableRef,
            insertColumnButtonIndex: insertColumnButtonIndex,
            insertRowButtonIndex: insertRowButtonIndex,
            isHeaderColumnEnabled: isHeaderColumnEnabled,
            isHeaderRowEnabled: isHeaderRowEnabled,
            isDragAndDropEnabled: isDragAndDropEnabled,
            isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
            editorView: editorView,
            mountPoint: popupsMountPoint,
            boundariesElement: popupsBoundariesElement,
            scrollableElement: popupsScrollableElement,
            hasStickyHeaders: stickyHeader && stickyHeader.sticky,
            dispatchAnalyticsEvent: dispatchAnalyticsEvent,
            editorAnalyticsAPI: editorAnalyticsAPI,
            getEditorContainerWidth: defaultGetEditorContainerWidth,
            getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
            isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
            api: api,
            isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
          }), (options === null || options === void 0 ? void 0 : options.allowContextualMenu) && /*#__PURE__*/React.createElement(FloatingContextualMenu, {
            editorView: editorView,
            mountPoint: popupsMountPoint,
            boundariesElement: popupsBoundariesElement,
            targetCellPosition: targetCellPosition,
            isOpen: Boolean(isContextualMenuOpen) && !isResizing,
            pluginConfig: pluginConfig,
            editorAnalyticsAPI: editorAnalyticsAPI,
            getEditorContainerWidth: defaultGetEditorContainerWidth,
            getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
            isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard,
            isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
            api: api
          }), isDragAndDropEnabled && /*#__PURE__*/React.createElement(FloatingDragMenu, {
            editorView: editorView,
            mountPoint: popupsMountPoint,
            boundariesElement: popupsBoundariesElement,
            tableRef: tableRef,
            tableNode: tableNode,
            targetCellPosition: targetCellPosition,
            direction: dragAndDropState === null || dragAndDropState === void 0 ? void 0 : dragAndDropState.dragMenuDirection,
            index: dragAndDropState === null || dragAndDropState === void 0 ? void 0 : dragAndDropState.dragMenuIndex,
            isOpen: !!(dragAndDropState !== null && dragAndDropState !== void 0 && dragAndDropState.isDragMenuOpen) && !isResizing,
            getEditorContainerWidth: defaultGetEditorContainerWidth,
            editorAnalyticsAPI: editorAnalyticsAPI,
            stickyHeaders: stickyHeader,
            pluginConfig: pluginConfig,
            isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
            getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
            ariaNotifyPlugin: ariaNotifyPlugin,
            api: api,
            isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
          }), allowControls && !isDragAndDropEnabled && !isResizing && /*#__PURE__*/React.createElement(FloatingDeleteButton, {
            editorView: editorView,
            selection: editorView.state.selection,
            tableRef: tableRef,
            mountPoint: popupsMountPoint,
            boundariesElement: popupsBoundariesElement,
            scrollableElement: popupsScrollableElement,
            stickyHeaders: stickyHeader,
            isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
            editorAnalyticsAPI: editorAnalyticsAPI,
            api: api
          }), ((options === null || options === void 0 ? void 0 : options.isTableScalingEnabled) || (options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing) && options.isCommentEditor) && isTableResizing && widthToWidest && resizingTableLocalId && resizingTableRef && widthToWidest[resizingTableLocalId] && /*#__PURE__*/React.createElement(FloatingToolbarLabel, {
            target: resizingTableRef,
            content: editorExperiment('single_column_layouts', true) ? /*#__PURE__*/React.createElement(ResizerBreakoutModeLabel, {
              layout: "full-width"
            }) : /*#__PURE__*/React.createElement(FullWidthDisplay, null),
            alignX: 'center',
            alignY: 'bottom',
            stick: true,
            forcePlacement: true,
            zIndex: akEditorFloatingPanelZIndex,
            offset: [0, 10]
          }), isTableSelectorEnabled && isSizeSelectorOpen && /*#__PURE__*/React.createElement(SizeSelector, {
            api: api,
            isOpenedByKeyboard: false,
            popupsMountPoint: popupsMountPoint,
            target: (_sizeSelectorPluginSt = sizeSelectorPluginState === null || sizeSelectorPluginState === void 0 ? void 0 : sizeSelectorPluginState.targetRef) !== null && _sizeSelectorPluginSt !== void 0 ? _sizeSelectorPluginSt : getDomRefFromSelection(editorView, ACTION_SUBJECT_ID.PICKER_TABLE_SIZE, api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions.fireAnalyticsEvent),
            popupsBoundariesElement: popupsBoundariesElement,
            popupsScrollableElement: popupsScrollableElement
          }));
        }
      }));
    },
    pluginsOptions: {
      quickInsert: function quickInsert(_ref23) {
        var formatMessage = _ref23.formatMessage;
        return [{
          id: 'table',
          title: formatMessage(messages.table),
          description: formatMessage(messages.tableDescription),
          keywords: ['cell', 'table'],
          priority: 600,
          keyshortcut: tooltip(toggleTable),
          icon: function icon() {
            return /*#__PURE__*/React.createElement(IconTable, null);
          },
          action: function action(insert, state) {
            var _api$table, _options$tableOptions6;
            if (isTableSelectorEnabled) {
              var _tr = insert('');
              _tr.setMeta(sizeSelectorPluginKey, {
                isSelectorOpen: true
              });
              return _tr;
            }

            // see comment on tablesPlugin.getSharedState on usage
            var tableState = api === null || api === void 0 || (_api$table = api.table) === null || _api$table === void 0 ? void 0 : _api$table.sharedState.currentState();
            var tableNodeProps = {
              isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
              isTableAlignmentEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableAlignment,
              isFullWidthModeEnabled: tableState === null || tableState === void 0 ? void 0 : tableState.isFullWidthModeEnabled,
              isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
              isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
              isTableResizingEnabled: options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing
            };
            var tableNode = createTableWithWidth(tableNodeProps)(state.schema);
            var tr = state.tr;
            // If the cursor is inside a table
            if (hasParentNodeOfType(state.schema.nodes.table)(state.selection) && options !== null && options !== void 0 && (_options$tableOptions6 = options.tableOptions) !== null && _options$tableOptions6 !== void 0 && _options$tableOptions6.allowNestedTables && fg('platform_editor_use_nested_table_pm_nodes')) {
              // If the experiment is disabled, or we're trying to nest deeper than one level, we insert the table after the top table
              if (editorExperiment('nested-tables-in-tables', false, {
                exposure: true
              }) || getParentOfTypeCount(state.schema.nodes.table)(state.selection.$from) > 1) {
                // Nesting is too deep insert table after the top parent table
                var positionAfterTopTable = getPositionAfterTopParentNodeOfType(state.schema.nodes.table)(state.selection.$from);
                tr = safeInsert(tableNode, positionAfterTopTable)(tr);
                tr.scrollIntoView();
              } else {
                // Table can be nested in parent table
                tableNode = createTableWithWidth(_objectSpread(_objectSpread({}, tableNodeProps), {}, {
                  isNestedTable: true
                }))(state.schema);
                tr = insert(tableNode);
              }
            } else {
              tr = insert(tableNode);
            }
            editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
              action: ACTION.INSERTED,
              actionSubject: ACTION_SUBJECT.DOCUMENT,
              actionSubjectId: ACTION_SUBJECT_ID.TABLE,
              attributes: {
                inputMethod: INPUT_METHOD.QUICK_INSERT,
                localId: tableNode.attrs.localId
              },
              eventType: EVENT_TYPE.TRACK
            })(tr);
            return tr;
          }
        }];
      },
      floatingToolbar: getToolbarConfig(defaultGetEditorContainerWidth, api, editorAnalyticsAPI, function () {
        return editorViewRef.current;
      }, options, isTableFixedColumnWidthsOptionEnabled, shouldUseIncreasedScalingPercent)(pluginConfig(options === null || options === void 0 ? void 0 : options.tableOptions))
    },
    usePluginHook: function usePluginHook(_ref24) {
      var editorView = _ref24.editorView;
      var _useSharedPluginState = useSharedPluginState(api, ['editorViewMode']),
        editorViewModeState = _useSharedPluginState.editorViewModeState;
      var mode = editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode;
      useEffect(function () {
        var state = editorView.state,
          dispatch = editorView.dispatch;
        var tr = state.tr;
        tr.setMeta('viewModeState', mode);
        if (dispatch) {
          dispatch(tr);
        }
      }, [editorView, mode]);
    }
  };
};
export default tablePlugin;