import React from 'react';
import { ACTION_SUBJECT } from '@atlaskit/editor-common/analytics';
import { ErrorBoundary } from '@atlaskit/editor-common/error-boundary';
import { useSharedPluginStateSelector } from '@atlaskit/editor-common/use-shared-plugin-state-selector';
import { akEditorFloatingPanelZIndex } from '@atlaskit/editor-shared-styles';
import FloatingContextualButton from './FloatingContextualButton';
import FloatingContextualMenu from './FloatingContextualMenu';
import FloatingDeleteButton from './FloatingDeleteButton';
import FloatingDragMenu from './FloatingDragMenu';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import FloatingInsertButton from './FloatingInsertButton';
import { FloatingToolbarLabel } from './FloatingToolbarLabel/FloatingToolbarLabel';
import { GlobalStylesWrapper } from './global-styles';
import { FullWidthDisplay } from './TableFullWidthLabel';
const useSharedTablePluginStateSelector = (api, key) => {
  const value = useSharedPluginStateSelector(api, `table.${key}`);
  return value;
};
const ContentComponentInternal = ({
  api,
  editorView,
  dispatchAnalyticsEvent,
  options,
  popupsMountPoint,
  popupsBoundariesElement,
  popupsScrollableElement,
  defaultGetEditorContainerWidth,
  defaultGetEditorFeatureFlags
}) => {
  var _api$analytics, _api$accessibilityUti;
  const editorAnalyticsAPI = api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  const ariaNotifyPlugin = api === null || api === void 0 ? void 0 : (_api$accessibilityUti = api.accessibilityUtils) === null || _api$accessibilityUti === void 0 ? void 0 : _api$accessibilityUti.actions.ariaNotify;
  const resizingTableLocalId = useSharedTablePluginStateSelector(api, 'resizingTableLocalId');
  const resizingTableRef = useSharedTablePluginStateSelector(api, 'resizingTableRef');
  const isTableResizing = useSharedTablePluginStateSelector(api, 'isTableResizing');
  const isResizing = useSharedTablePluginStateSelector(api, 'isResizing');
  const widthToWidest = useSharedTablePluginStateSelector(api, 'widthToWidest');
  const tableNode = useSharedTablePluginStateSelector(api, 'tableNode');
  const targetCellPosition = useSharedTablePluginStateSelector(api, 'targetCellPosition');
  const isContextualMenuOpen = useSharedTablePluginStateSelector(api, 'isContextualMenuOpen');
  const tableRef = useSharedTablePluginStateSelector(api, 'tableRef');
  const pluginConfig = useSharedTablePluginStateSelector(api, 'pluginConfig');
  const insertColumnButtonIndex = useSharedTablePluginStateSelector(api, 'insertColumnButtonIndex');
  const insertRowButtonIndex = useSharedTablePluginStateSelector(api, 'insertRowButtonIndex');
  const isHeaderColumnEnabled = useSharedTablePluginStateSelector(api, 'isHeaderColumnEnabled');
  const isHeaderRowEnabled = useSharedTablePluginStateSelector(api, 'isHeaderRowEnabled');
  const isDragAndDropEnabled = useSharedTablePluginStateSelector(api, 'isDragAndDropEnabled');
  const tableWrapperTarget = useSharedTablePluginStateSelector(api, 'tableWrapperTarget');
  const isCellMenuOpenByKeyboard = useSharedTablePluginStateSelector(api, 'isCellMenuOpenByKeyboard');
  const {
    allowControls
  } = pluginConfig;
  const stickyHeader = useSharedTablePluginStateSelector(api, 'stickyHeader');
  const dragMenuDirection = useSharedTablePluginStateSelector(api, 'dragMenuDirection');
  const dragMenuIndex = useSharedTablePluginStateSelector(api, 'dragMenuIndex');
  const isDragMenuOpen = useSharedTablePluginStateSelector(api, 'isDragMenuOpen');
  return /*#__PURE__*/React.createElement(React.Fragment, null, targetCellPosition && (tableRef || isCellMenuOpenByKeyboard) && !isResizing && options && options.allowContextualMenu && /*#__PURE__*/React.createElement(FloatingContextualButton, {
    isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
    editorView: editorView,
    tableNode: tableNode,
    mountPoint: popupsMountPoint,
    targetCellPosition: targetCellPosition,
    scrollableElement: popupsScrollableElement,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    isContextualMenuOpen: isContextualMenuOpen,
    stickyHeader: stickyHeader,
    tableWrapper: tableWrapperTarget,
    isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard
  }), allowControls && /*#__PURE__*/React.createElement(FloatingInsertButton, {
    tableNode: tableNode,
    tableRef: tableRef,
    insertColumnButtonIndex: insertColumnButtonIndex,
    insertRowButtonIndex: insertRowButtonIndex,
    isHeaderColumnEnabled: isHeaderColumnEnabled,
    isHeaderRowEnabled: isHeaderRowEnabled,
    isDragAndDropEnabled: isDragAndDropEnabled,
    isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    hasStickyHeaders: stickyHeader && stickyHeader.sticky,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    editorAnalyticsAPI: editorAnalyticsAPI,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    isChromelessEditor: options === null || options === void 0 ? void 0 : options.isChromelessEditor,
    api: api,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
  }), (options === null || options === void 0 ? void 0 : options.allowContextualMenu) && /*#__PURE__*/React.createElement(FloatingContextualMenu, {
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    targetCellPosition: targetCellPosition,
    isOpen: Boolean(isContextualMenuOpen) && !isResizing,
    pluginConfig: pluginConfig,
    editorAnalyticsAPI: editorAnalyticsAPI,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    isCellMenuOpenByKeyboard: isCellMenuOpenByKeyboard,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor,
    api: api
  }), isDragAndDropEnabled && /*#__PURE__*/React.createElement(FloatingDragMenu, {
    editorView: editorView,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    tableRef: tableRef,
    tableNode: tableNode,
    targetCellPosition: targetCellPosition,
    direction: dragMenuDirection,
    index: dragMenuIndex,
    isOpen: !!isDragMenuOpen && !isResizing,
    getEditorContainerWidth: defaultGetEditorContainerWidth,
    editorAnalyticsAPI: editorAnalyticsAPI,
    stickyHeaders: stickyHeader,
    pluginConfig: pluginConfig,
    isTableScalingEnabled: options === null || options === void 0 ? void 0 : options.isTableScalingEnabled,
    getEditorFeatureFlags: (options === null || options === void 0 ? void 0 : options.getEditorFeatureFlags) || defaultGetEditorFeatureFlags,
    ariaNotifyPlugin: ariaNotifyPlugin,
    api: api,
    isCommentEditor: options === null || options === void 0 ? void 0 : options.isCommentEditor
  }), allowControls && !isDragAndDropEnabled && !isResizing && /*#__PURE__*/React.createElement(FloatingDeleteButton, {
    editorView: editorView,
    selection: editorView.state.selection,
    tableRef: tableRef,
    mountPoint: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    stickyHeaders: stickyHeader,
    isNumberColumnEnabled: tableNode && tableNode.attrs.isNumberColumnEnabled,
    editorAnalyticsAPI: editorAnalyticsAPI,
    api: api
  }), ((options === null || options === void 0 ? void 0 : options.isTableScalingEnabled) || (options === null || options === void 0 ? void 0 : options.tableOptions.allowTableResizing) && options.isCommentEditor) && isTableResizing && widthToWidest && resizingTableLocalId && resizingTableRef && widthToWidest[resizingTableLocalId] && /*#__PURE__*/React.createElement(FloatingToolbarLabel, {
    target: resizingTableRef,
    content: /*#__PURE__*/React.createElement(FullWidthDisplay, null),
    alignX: 'center',
    alignY: 'bottom',
    stick: true,
    forcePlacement: true,
    zIndex: akEditorFloatingPanelZIndex,
    offset: [0, 10]
  }));
};
export const ContentComponent = ({
  api,
  editorView,
  dispatchAnalyticsEvent,
  options,
  popupsMountPoint,
  popupsBoundariesElement,
  popupsScrollableElement,
  defaultGetEditorContainerWidth,
  defaultGetEditorFeatureFlags
}) => {
  var _api$featureFlags;
  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    component: ACTION_SUBJECT.TABLES_PLUGIN,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    fallbackComponent: null
  }, /*#__PURE__*/React.createElement(GlobalStylesWrapper, {
    featureFlags: api === null || api === void 0 ? void 0 : (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState(),
    isDragAndDropEnabledOption: options === null || options === void 0 ? void 0 : options.dragAndDropEnabled,
    api: api
  }), /*#__PURE__*/React.createElement(ContentComponentInternal, {
    api: api,
    editorView: editorView,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    options: options,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    defaultGetEditorContainerWidth: defaultGetEditorContainerWidth,
    defaultGetEditorFeatureFlags: defaultGetEditorFeatureFlags
  }));
};