import { withLazyLoading } from '@atlaskit/editor-common/lazy-node-view';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
// TODO: ED-23976 - Clean up
import { createTableView } from './table';
import TableCell from './TableCell';
import TableRow from './TableRow';
export const lazyTableView = options => {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return (node, view, getPos) => {
      return createTableView(node, view, getPos, options.portalProviderAPI, options.eventDispatcher, options.getEditorContainerWidth, options.getEditorFeatureFlags, options.dispatchAnalyticsEvent, options.pluginInjectionApi, options.isCommentEditor, options.isChromelessEditor);
    };
  }
  const loader = () => {
    const result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
    './table').then(({
      createTableView
    }) => {
      return (node, view, getPos, decorations, getNodeViewOptions) => {
        const {
          portalProviderAPI,
          eventDispatcher,
          getEditorContainerWidth,
          getEditorFeatureFlags,
          dispatchAnalyticsEvent,
          pluginInjectionApi,
          isCommentEditor,
          isChromelessEditor
        } = getNodeViewOptions();
        return createTableView(node, view, getPos, portalProviderAPI, eventDispatcher, getEditorContainerWidth, getEditorFeatureFlags, dispatchAnalyticsEvent, pluginInjectionApi, isCommentEditor, isChromelessEditor);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'table',
    getNodeViewOptions: () => options,
    loader
  });
};
export const lazyTableCellView = options => {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return (node, view, getPos) => {
      var _options$pluginInject, _options$pluginInject2;
      return new TableCell(node, view, getPos, options.eventDispatcher, (_options$pluginInject = options.pluginInjectionApi) === null || _options$pluginInject === void 0 ? void 0 : (_options$pluginInject2 = _options$pluginInject.analytics) === null || _options$pluginInject2 === void 0 ? void 0 : _options$pluginInject2.actions);
    };
  }
  const loader = () => {
    const result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table_nodeview" */
    './TableCell').then(({
      default: TableCell
    }) => {
      return (node, view, getPos, decorations, getNodeViewOptions) => {
        var _pluginInjectionApi$a;
        const {
          eventDispatcher,
          pluginInjectionApi
        } = getNodeViewOptions();
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableCell',
    getNodeViewOptions: () => options,
    loader
  });
};
export const lazyTableHeaderView = options => {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return (node, view, getPos) => {
      var _options$pluginInject3, _options$pluginInject4;
      return new TableCell(node, view, getPos, options.eventDispatcher, (_options$pluginInject3 = options.pluginInjectionApi) === null || _options$pluginInject3 === void 0 ? void 0 : (_options$pluginInject4 = _options$pluginInject3.analytics) === null || _options$pluginInject4 === void 0 ? void 0 : _options$pluginInject4.actions);
    };
  }
  const loader = () => {
    const result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-cell_nodeview" */
    './TableCell').then(({
      default: TableCell
    }) => {
      return (node, view, getPos, decorations, getNodeViewOptions) => {
        var _pluginInjectionApi$a2;
        const {
          eventDispatcher,
          pluginInjectionApi
        } = getNodeViewOptions();
        return new TableCell(node, view, getPos, eventDispatcher, pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a2 = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a2 === void 0 ? void 0 : _pluginInjectionApi$a2.actions);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableHeader',
    getNodeViewOptions: () => options,
    loader
  });
};
export const lazyTableRowView = options => {
  // LNV tables are broken in concurrent mode - temporarily disable to unblock concurrent mode
  if (editorExperiment('platform_editor_exp_lazy_node_views', false) || fg('platform_editor_disable_table_lnv')) {
    return (node, view, getPos) => {
      return new TableRow(node, view, getPos, options.eventDispatcher);
    };
  }
  const loader = () => {
    const result = import( /* webpackChunkName: "@atlaskit-internal_editor-plugin-table-row_nodeview" */
    './TableRow').then(({
      default: TableRow
    }) => {
      return (node, view, getPos, decorations, getNodeViewOptions) => {
        const {
          eventDispatcher
        } = getNodeViewOptions();
        return new TableRow(node, view, getPos, eventDispatcher);
      };
    });
    return result;
  };
  return withLazyLoading({
    nodeName: 'tableRow',
    getNodeViewOptions: () => options,
    loader
  });
};