import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import classNames from 'classnames';
import { CHANGE_ALIGNMENT_REASON, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { getTableContainerWidth } from '@atlaskit/editor-common/node-width';
import { akEditorDefaultLayoutWidth, akEditorGutterPaddingDynamic, akEditorMobileBreakoutPoint } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
import { setTableAlignmentWithTableContentWithPosWithAnalytics } from '../pm-plugins/commands/commands-with-analytics';
import { getPluginState } from '../pm-plugins/plugin-factory';
import { TABLE_MAX_WIDTH, TABLE_OFFSET_IN_COMMENT_EDITOR } from '../pm-plugins/table-resizing/utils/consts';
import { ALIGN_CENTER, ALIGN_START } from '../pm-plugins/utils/alignment';
import { TableCssClassName as ClassName } from '../types';
import { getAlignmentStyle } from './table-container-styles';
import { TableResizer } from './TableResizer';
const InnerContainer = /*#__PURE__*/forwardRef(({
  className,
  style,
  node,
  children
}, ref) => {
  return /*#__PURE__*/React.createElement("div", {
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    "data-number-column": node.attrs.isNumberColumnEnabled,
    "data-layout": node.attrs.layout,
    "data-testid": "table-container"
  }, children);
});
const AlignmentTableContainer = ({
  node,
  children,
  pluginInjectionApi,
  getPos,
  editorView
}) => {
  const alignment = node.attrs.layout !== ALIGN_START ? ALIGN_CENTER : ALIGN_START;
  const {
    tableState
  } = useSharedPluginState(pluginInjectionApi, ['table']);
  useEffect(() => {
    if (tableState && editorView && getPos) {
      const {
        wasFullWidthModeEnabled,
        isFullWidthModeEnabled
      } = tableState;
      const {
        state,
        dispatch
      } = editorView;
      if (wasFullWidthModeEnabled && isFullWidthModeEnabled !== undefined && !isFullWidthModeEnabled && alignment !== ALIGN_CENTER && node.attrs.width > akEditorDefaultLayoutWidth) {
        var _pluginInjectionApi$a;
        const pos = getPos && getPos();
        if (typeof pos !== 'number') {
          return;
        }
        setTableAlignmentWithTableContentWithPosWithAnalytics(pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions)(ALIGN_CENTER, alignment, {
          pos,
          node
        }, INPUT_METHOD.AUTO, CHANGE_ALIGNMENT_REASON.EDITOR_APPEARANCE_CHANGED)(state, dispatch);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [editorView, tableState, node]);
  const style = useMemo(() => {
    return getAlignmentStyle(alignment);
  }, [alignment]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    React.createElement("div", {
      "data-testid": "table-alignment-container",
      style: style
    }, children)
  );
};
const AlignmentTableContainerWrapper = ({
  isTableAlignmentEnabled,
  node,
  children,
  pluginInjectionApi,
  getPos,
  editorView
}) => {
  if (!isTableAlignmentEnabled) {
    return /*#__PURE__*/React.createElement("div", {
      "data-testid": "table-alignment-container",
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        display: 'flex',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        justifyContent: 'center'
      }
    }, children);
  }
  return /*#__PURE__*/React.createElement(AlignmentTableContainer, {
    node: node,
    pluginInjectionApi: pluginInjectionApi,
    getPos: getPos,
    editorView: editorView
  }, children);
};
export const ResizableTableContainer = /*#__PURE__*/React.memo(({
  children,
  className,
  node,
  containerWidth,
  lineLength,
  editorView,
  getPos,
  tableRef,
  isResizing,
  pluginInjectionApi,
  tableWrapperHeight,
  isWholeTableInDanger,
  isTableScalingEnabled,
  isTableWithFixedColumnWidthsOptionEnabled,
  isTableAlignmentEnabled,
  shouldUseIncreasedScalingPercent,
  isCommentEditor
}) => {
  const containerRef = useRef(null);
  const tableWidthRef = useRef(akEditorDefaultLayoutWidth);
  const [resizing, setIsResizing] = useState(false);
  const {
    tableState
  } = useSharedPluginState(pluginInjectionApi, ['table']);
  const {
    isFullWidthModeEnabled
  } = tableState;
  const updateContainerHeight = useCallback(height => {
    var _containerRef$current;
    // current StickyHeader State is not stable to be fetch.
    // we need to update stickyHeader plugin to make sure state can be
    //    consistently fetch and refactor below
    const stickyHeaders = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getElementsByClassName('pm-table-sticky');
    if (!stickyHeaders || stickyHeaders.length < 1) {
      // when starting to drag, we need to keep the original space,
      // -- When sticky header not appear, margin top(24px) and margin bottom(16px), should be 40px,
      //    1px is border width but collapse make it 0.5.
      // -- When sticky header appear, we should add first row height but reduce
      //    collapsed border
      return typeof height === 'number' ? `${height + 40.5}px` : 'auto';
    } else {
      var _containerRef$current2;
      const stickyHeaderHeight = ((_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getElementsByTagName('th')[0].getBoundingClientRect().height) || 0;
      return typeof height === 'number' ? `${height + stickyHeaderHeight + 39.5}px` : 'auto';
    }
  }, []);
  const onResizeStart = useCallback(() => {
    setIsResizing(true);
  }, []);
  const onResizeStop = useCallback(() => {
    setIsResizing(false);
  }, []);
  const updateWidth = useCallback(width => {
    if (!containerRef.current) {
      return;
    }

    // make sure during resizing
    // the pm-table-resizer-container width is the same as its child div resizer-item
    // otherwise when resize table from wider to narrower , pm-table-resizer-container stays wider
    // and cause the fabric-editor-popup-scroll-parent to overflow
    if (containerRef.current.style.width !== `${width}px`) {
      containerRef.current.style.width = `${width}px`;
    }
  }, []);
  const displayGuideline = useCallback(guidelines => {
    var _pluginInjectionApi$g, _pluginInjectionApi$g2, _pluginInjectionApi$g3;
    return (_pluginInjectionApi$g = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$g2 = pluginInjectionApi.guideline) === null || _pluginInjectionApi$g2 === void 0 ? void 0 : (_pluginInjectionApi$g3 = _pluginInjectionApi$g2.actions) === null || _pluginInjectionApi$g3 === void 0 ? void 0 : _pluginInjectionApi$g3.displayGuideline(editorView)({
      guidelines
    })) !== null && _pluginInjectionApi$g !== void 0 ? _pluginInjectionApi$g : false;
  }, [pluginInjectionApi, editorView]);
  const attachAnalyticsEvent = useCallback(payload => {
    var _pluginInjectionApi$a2;
    return pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a2 = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a2 === void 0 ? void 0 : _pluginInjectionApi$a2.actions.attachAnalyticsEvent(payload);
  }, [pluginInjectionApi]);
  const displayGapCursor = useCallback(toggle => {
    var _pluginInjectionApi$c, _pluginInjectionApi$c2, _pluginInjectionApi$s;
    return (_pluginInjectionApi$c = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$c2 = pluginInjectionApi.core) === null || _pluginInjectionApi$c2 === void 0 ? void 0 : _pluginInjectionApi$c2.actions.execute(pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$s = pluginInjectionApi.selection) === null || _pluginInjectionApi$s === void 0 ? void 0 : _pluginInjectionApi$s.commands.displayGapCursor(toggle))) !== null && _pluginInjectionApi$c !== void 0 ? _pluginInjectionApi$c : false;
  }, [pluginInjectionApi]);
  const tableWidth = getTableContainerWidth(node);
  const {
    editorViewModeState
  } = useSharedPluginState(pluginInjectionApi, ['editorViewMode']);
  let responsiveContainerWidth = 0;
  const resizeHandleSpacing = 12;
  // When Full width editor enabled, a Mac OS user can change "ak-editor-content-area" width by
  // updating Settings -> Appearance -> Show scroll bars from "When scrolling" to "Always". It causes
  // issues when viwport width is less than full width Editor's width. To detect avoid them
  // we need to use lineLength to defined responsiveWidth instead of containerWidth
  // (which does not get updated when Mac setting changes) in Full-width editor.
  if (isFullWidthModeEnabled) {
    // When: Show scroll bars -> containerWidth = akEditorGutterPadding * 2 + lineLength;
    // When: Always -> containerWidth = akEditorGutterPadding * 2 + lineLength + scrollbarWidth;
    // scrollbarWidth can vary. Values can be 14, 15, 16 and up to 20px;
    responsiveContainerWidth = isTableScalingEnabled ? lineLength : containerWidth - akEditorGutterPaddingDynamic() * 2 - resizeHandleSpacing;
  } else if (isCommentEditor) {
    responsiveContainerWidth = containerWidth - TABLE_OFFSET_IN_COMMENT_EDITOR;
  } else {
    // 76 is currently an accepted padding value considering the spacing for resizer handle
    // containerWidth = width of a DIV with test id="ak-editor-fp-content-area". It is a parent of
    // a DIV with className="ak-editor-content-area". This DIV has padding left and padding right.
    // padding left = padding right = akEditorGutterPadding = 32
    responsiveContainerWidth = isTableScalingEnabled ? containerWidth - akEditorGutterPaddingDynamic() * 2 : containerWidth - akEditorGutterPaddingDynamic() * 2 - resizeHandleSpacing;
  }
  const width = !node.attrs.width && isCommentEditor ? responsiveContainerWidth : Math.min(tableWidth, responsiveContainerWidth);
  if (!isResizing) {
    tableWidthRef.current = width;
  }
  const maxResizerWidth = isCommentEditor ? responsiveContainerWidth : Math.min(responsiveContainerWidth, TABLE_MAX_WIDTH);
  const tableResizerProps = {
    width,
    maxWidth: maxResizerWidth,
    containerWidth,
    lineLength,
    updateWidth,
    editorView,
    getPos,
    node,
    tableRef,
    displayGuideline,
    attachAnalyticsEvent,
    displayGapCursor,
    isTableAlignmentEnabled,
    isFullWidthModeEnabled,
    isTableScalingEnabled,
    isTableWithFixedColumnWidthsOptionEnabled,
    isWholeTableInDanger,
    shouldUseIncreasedScalingPercent,
    pluginInjectionApi,
    onResizeStart,
    onResizeStop,
    isCommentEditor
  };
  const isLivePageViewMode = (editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode) === 'view';
  return /*#__PURE__*/React.createElement(AlignmentTableContainerWrapper, {
    isTableAlignmentEnabled: isTableAlignmentEnabled,
    node: node,
    pluginInjectionApi: pluginInjectionApi,
    getPos: getPos,
    editorView: editorView
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      width: tableWidthRef.current,
      height: resizing ? updateContainerHeight(tableWrapperHeight !== null && tableWrapperHeight !== void 0 ? tableWrapperHeight : 'auto') : 'auto',
      position: isLivePageViewMode ? 'relative' : 'unset'
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: ClassName.TABLE_RESIZER_CONTAINER,
    ref: containerRef
  }, fg('platform_editor_live_page_prevent_table_recreation') ? null : isLivePageViewMode ? /*#__PURE__*/React.createElement(InnerContainer
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: className,
    node: node
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      width: 'inherit'
    }
  }, children) :
  /*#__PURE__*/
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  React.createElement(TableResizer, tableResizerProps, /*#__PURE__*/React.createElement(InnerContainer, {
    className: className,
    node: node
  }, children)), fg('platform_editor_live_page_prevent_table_recreation') ?
  /*#__PURE__*/
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  React.createElement(TableResizer, _extends({}, tableResizerProps, {
    disabled: isLivePageViewMode
  }), /*#__PURE__*/React.createElement(InnerContainer, {
    className: className,
    node: node
  }, children)) : null));
});
export const TableContainer = ({
  children,
  node,
  className,
  containerWidth: {
    width: editorWidth,
    lineLength
  },
  editorView,
  getPos,
  tableRef,
  isNested,
  tableWrapperHeight,
  isResizing,
  pluginInjectionApi,
  isWholeTableInDanger,
  isTableResizingEnabled,
  isTableScalingEnabled,
  isTableWithFixedColumnWidthsOptionEnabled,
  isTableAlignmentEnabled,
  shouldUseIncreasedScalingPercent,
  isCommentEditor,
  isChromelessEditor
}) => {
  if (isTableResizingEnabled && !isNested) {
    return /*#__PURE__*/React.createElement(ResizableTableContainer
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    , {
      className: className,
      node: node
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      containerWidth: editorWidth
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ,
      lineLength: lineLength,
      editorView: editorView,
      getPos: getPos,
      tableRef: tableRef,
      tableWrapperHeight: tableWrapperHeight,
      isResizing: isResizing,
      pluginInjectionApi: pluginInjectionApi,
      isTableScalingEnabled: isTableScalingEnabled,
      isTableWithFixedColumnWidthsOptionEnabled: isTableWithFixedColumnWidthsOptionEnabled,
      isWholeTableInDanger: isWholeTableInDanger,
      isTableAlignmentEnabled: isTableAlignmentEnabled,
      shouldUseIncreasedScalingPercent: shouldUseIncreasedScalingPercent,
      isCommentEditor: isCommentEditor
    }, children);
  }
  const {
    isDragAndDropEnabled
  } = getPluginState(editorView.state);
  return /*#__PURE__*/React.createElement(InnerContainer, {
    node: node
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: classNames(className, {
      'less-padding': editorWidth < akEditorMobileBreakoutPoint && !isNested && !(isChromelessEditor && isDragAndDropEnabled)
    }),
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      width: 'inherit',
      marginLeft: isChromelessEditor ? 18 : undefined
    }
  }, children);
};