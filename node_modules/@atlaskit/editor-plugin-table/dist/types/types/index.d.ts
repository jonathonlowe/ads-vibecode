import type { IntlShape } from 'react-intl-next';
import type { TableLayout } from '@atlaskit/adf-schema';
import type { TableColumnOrdering } from '@atlaskit/custom-steps';
import type { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { Node as PmNode } from '@atlaskit/editor-prosemirror/model';
import type { Transaction } from '@atlaskit/editor-prosemirror/state';
import type { DecorationSet } from '@atlaskit/editor-prosemirror/view';
import type { Rect } from '@atlaskit/editor-tables/table-map';
import type { Edge } from '@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge';
import { RowStickyState } from '../pm-plugins/sticky-headers/types';
import type { TablePlugin } from '../tablePluginType';
export declare const RESIZE_HANDLE_AREA_DECORATION_GAP = 30;
export type RowInsertPosition = 'TOP' | 'BOTTOM';
/**
 * @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-6877 Internal documentation for deprecation (no external access)}
 **/
export type PermittedLayoutsDescriptor = TableLayout[] | 'all';
export type Cell = {
    pos: number;
    start: number;
    node: PmNode;
};
export type CellTransform = (cell: Cell) => (tr: Transaction) => Transaction;
export interface InsertRowOptions {
    index: number;
    moveCursorToInsertedRow: boolean;
}
export type PluginInjectionAPI = ExtractInjectionAPI<TablePlugin>;
export type PluginInjectionAPIWithA11y = ExtractInjectionAPI<TablePlugin> & {
    accessibilityUtils?: {
        actions: {
            ariaNotify: (message: string) => void | undefined;
        };
    };
};
export type TableSharedStateInternal = Pick<TablePluginState, 'isFullWidthModeEnabled' | 'wasFullWidthModeEnabled' | 'isHeaderRowEnabled' | 'isHeaderColumnEnabled' | 'ordering' | 'isInDanger' | 'hoveredRows' | 'hoveredColumns' | 'hoveredCell' | 'isTableHovered' | 'tableNode' | 'widthToWidest' | 'tableRef' | 'tablePos' | 'targetCellPosition' | 'isContextualMenuOpen' | 'pluginConfig' | 'insertColumnButtonIndex' | 'insertRowButtonIndex' | 'isDragAndDropEnabled' | 'tableWrapperTarget' | 'isCellMenuOpenByKeyboard'> & {
    isResizing: boolean;
    isTableResizing?: boolean;
    isWholeTableInDanger?: boolean;
    resizingTableRef?: HTMLTableElement;
    resizingTableLocalId?: string;
    stickyHeader?: RowStickyState;
    dragMenuDirection?: TableDirection;
    dragMenuIndex?: number;
    isDragMenuOpen?: boolean;
};
export type TableSharedState = Pick<TablePluginState, 'isFullWidthModeEnabled' | 'wasFullWidthModeEnabled'>;
export type AlignmentOptions = 'center' | 'align-start';
export type InsertRowMethods = INPUT_METHOD.CONTEXT_MENU | INPUT_METHOD.BUTTON | INPUT_METHOD.SHORTCUT | INPUT_METHOD.KEYBOARD | INPUT_METHOD.FLOATING_TB | INPUT_METHOD.TABLE_CONTEXT_MENU;
export interface PluginConfig {
    advanced?: boolean;
    allowBackgroundColor?: boolean;
    allowColumnResizing?: boolean;
    allowTableResizing?: boolean;
    allowTableAlignment?: boolean;
    allowHeaderColumn?: boolean;
    allowHeaderRow?: boolean;
    allowMergeCells?: boolean;
    allowNumberColumn?: boolean;
    allowColumnSorting?: boolean;
    allowAddColumnWithCustomStep?: boolean;
    allowCollapse?: boolean;
    allowNestedTables?: boolean;
    isHeaderRowRequired?: boolean;
    /**
     * @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-6877 Internal documentation for deprecation (no external access)}
     **/
    permittedLayouts?: PermittedLayoutsDescriptor;
    allowControls?: boolean;
    stickyHeaders?: boolean;
    allowCellOptionsInFloatingToolbar?: boolean;
    allowDistributeColumns?: boolean;
}
export type { ColumnResizingPluginState } from '@atlaskit/editor-common/types';
export type CellColumnPositioning = Pick<Rect, 'right' | 'left'>;
export interface CellHoverMeta {
    colIndex?: number;
    rowIndex?: number;
}
export interface WidthToWidest {
    [tableLocalId: string]: boolean;
}
export interface TablePluginState {
    editorHasFocus?: boolean;
    hoveredColumns: number[];
    hoveredRows: number[];
    hoveredCell: CellHoverMeta;
    pluginConfig: PluginConfig;
    isHeaderColumnEnabled: boolean;
    isHeaderRowEnabled: boolean;
    isNumberColumnEnabled?: boolean;
    targetCellPosition?: number;
    tableNode?: PmNode;
    tableRef?: HTMLTableElement;
    tablePos?: number;
    tableWrapperTarget?: HTMLElement;
    isContextualMenuOpen?: boolean;
    isInDanger?: boolean;
    isWholeTableInDanger?: boolean;
    insertColumnButtonIndex?: number;
    insertRowButtonIndex?: number;
    isFullWidthModeEnabled?: boolean;
    ordering?: TableColumnOrdering;
    isResizeHandleWidgetAdded?: boolean;
    resizeHandleRowIndex?: number;
    resizeHandleColumnIndex?: number;
    resizeHandleIncludeTooltip?: boolean;
    isKeyboardResize?: boolean;
    isTableCollapsed?: boolean;
    canCollapseTable?: boolean;
    widthToWidest?: WidthToWidest;
    getIntl: () => IntlShape;
    wasFullWidthModeEnabled?: boolean;
    isDragAndDropEnabled?: boolean;
    isTableHovered?: boolean;
    isTableScalingEnabled?: boolean;
    isCellMenuOpenByKeyboard?: boolean;
}
export type TablePluginAction = {
    type: 'SET_EDITOR_FOCUS';
    data: {
        editorHasFocus: boolean;
    };
} | {
    type: 'TOGGLE_HEADER_ROW';
} | {
    type: 'TOGGLE_HEADER_COLUMN';
} | {
    type: 'SORT_TABLE';
    data: {
        ordering: TableColumnOrdering;
    };
} | {
    type: 'SET_TABLE_REF';
    data: {
        tableRef?: HTMLTableElement;
        tableNode?: PmNode;
        tableWrapperTarget?: HTMLElement;
        isHeaderRowEnabled: boolean;
        isHeaderColumnEnabled: boolean;
    };
} | {
    type: 'HOVER_ROWS';
    data: {
        decorationSet: DecorationSet;
        hoveredRows: number[];
        isInDanger?: boolean;
    };
} | {
    type: 'HOVER_MERGED_CELLS';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'HOVER_COLUMNS';
    data: {
        decorationSet: DecorationSet;
        hoveredColumns: number[];
        isInDanger?: boolean;
    };
} | {
    type: 'HOVER_TABLE';
    data: {
        decorationSet: DecorationSet;
        hoveredRows: number[];
        hoveredColumns: number[];
        isInDanger?: boolean;
    };
} | {
    type: 'START_KEYBOARD_COLUMN_RESIZE';
    data: {
        decorationSet: DecorationSet;
        resizeHandleRowIndex: number;
        resizeHandleColumnIndex: number;
        resizeHandleIncludeTooltip: boolean;
        isKeyboardResize?: boolean;
    };
} | {
    type: 'ADD_RESIZE_HANDLE_DECORATIONS';
    data: {
        decorationSet: DecorationSet;
        resizeHandleRowIndex: number;
        resizeHandleColumnIndex: number;
        resizeHandleIncludeTooltip: boolean;
        isKeyboardResize?: boolean;
    };
} | {
    type: 'UPDATE_RESIZE_HANDLE_DECORATIONS';
    data: {
        decorationSet: DecorationSet;
        resizeHandleRowIndex: number | undefined;
        resizeHandleColumnIndex: number | undefined;
        resizeHandleIncludeTooltip: boolean | undefined;
    };
} | {
    type: 'UPDATE_TABLE_WIDTH_TO_WIDEST';
    data: {
        widthToWidest: WidthToWidest | undefined;
    };
} | {
    type: 'REMOVE_RESIZE_HANDLE_DECORATIONS';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'STOP_KEYBOARD_COLUMN_RESIZE';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'CLEAR_HOVER_SELECTION';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'SHOW_RESIZE_HANDLE_LINE';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'HIDE_RESIZE_HANDLE_LINE';
    data: {
        decorationSet: DecorationSet;
    };
} | {
    type: 'HOVER_CELL';
    data: {
        hoveredCell: CellHoverMeta;
    };
} | {
    type: 'TABLE_HOVERED';
    data: {
        isTableHovered: boolean;
    };
} | {
    type: 'SET_TARGET_CELL_POSITION';
    data: {
        targetCellPosition?: number;
    };
} | {
    type: 'SELECT_COLUMN';
    data: {
        targetCellPosition: number;
        decorationSet: DecorationSet;
    };
} | {
    type: 'SHOW_INSERT_ROW_BUTTON';
    data: {
        insertRowButtonIndex: number;
    };
} | {
    type: 'SHOW_INSERT_COLUMN_BUTTON';
    data: {
        insertColumnButtonIndex: number;
    };
} | {
    type: 'HIDE_INSERT_COLUMN_OR_ROW_BUTTON';
} | {
    type: 'TOGGLE_CONTEXTUAL_MENU';
} | {
    type: 'SET_CELL_MENU_OPEN';
    data: {
        isCellMenuOpenByKeyboard: boolean;
    };
};
export type ColumnResizingPluginAction = {
    type: 'SET_RESIZE_HANDLE_POSITION';
    data: {
        resizeHandlePos: number | null;
    };
} | {
    type: 'STOP_RESIZING';
} | {
    type: 'SET_DRAGGING';
    data: {
        dragging: {
            startX: number;
            startWidth: number;
        } | null;
    };
} | {
    type: 'SET_LAST_CLICK';
    data: {
        lastClick: {
            x: number;
            y: number;
            time: number;
        } | null;
    };
};
export declare enum TableDecorations {
    /** Classic controls */
    ALL_CONTROLS_HOVER = "CONTROLS_HOVER",
    ROW_CONTROLS_HOVER = "ROW_CONTROLS_HOVER",
    COLUMN_CONTROLS_HOVER = "COLUMN_CONTROLS_HOVER",
    TABLE_CONTROLS_HOVER = "TABLE_CONTROLS_HOVER",
    CELL_CONTROLS_HOVER = "CELL_CONTROLS_HOVER",
    COLUMN_CONTROLS_DECORATIONS = "COLUMN_CONTROLS_DECORATIONS",
    COLUMN_DROP_TARGET_DECORATIONS = "COLUMN_DROP_TARGET_DECORATIONS",
    COLUMN_SELECTED = "COLUMN_SELECTED",
    COLUMN_RESIZING_HANDLE = "COLUMN_RESIZING_HANDLE",
    COLUMN_RESIZING_HANDLE_WIDGET = "COLUMN_RESIZING_HANDLE_WIDGET",
    COLUMN_RESIZING_HANDLE_LINE = "COLUMN_RESIZING_HANDLE_LINE",
    COLUMN_INSERT_LINE = "COLUMN_INSERT_LINE",
    ROW_INSERT_LINE = "ROW_INSERT_LINE",
    LAST_CELL_ELEMENT = "LAST_CELL_ELEMENT"
}
export declare const TableCssClassName: {
    /** Classic controls */
    COLUMN_CONTROLS: string;
    COLUMN_CONTROLS_DECORATIONS: string;
    COLUMN_SELECTED: string;
    ROW_CONTROLS_WRAPPER: string;
    ROW_CONTROLS: string;
    ROW_CONTROLS_INNER: string;
    ROW_CONTROLS_BUTTON_WRAP: string;
    ROW_CONTROLS_BUTTON: string;
    CONTROLS_BUTTON: string;
    CONTROLS_BUTTON_ICON: string;
    CONTROLS_INSERT_BUTTON: string;
    CONTROLS_INSERT_BUTTON_INNER: string;
    CONTROLS_INSERT_BUTTON_WRAP: string;
    CONTROLS_INSERT_LINE: string;
    CONTROLS_BUTTON_OVERLAY: string;
    DRAG_CONTROLS_INSERT_BUTTON: string;
    DRAG_CONTROLS_INSERT_BUTTON_INNER: string;
    DRAG_CONTROLS_INSERT_BUTTON_INNER_COLUMN: string;
    DRAG_CONTROLS_INSERT_BUTTON_INNER_ROW: string;
    DRAG_CONTROLS_INSERT_BUTTON_INNER_ROW_CHROMELESS: string;
    DRAG_CONTROLS_INSERT_BUTTON_WRAP: string;
    CONTROLS_INSERT_MARKER: string;
    CONTROLS_INSERT_COLUMN: string;
    CONTROLS_INSERT_ROW: string;
    CONTROLS_DELETE_BUTTON_WRAP: string;
    CONTROLS_DELETE_BUTTON: string;
    CONTROLS_FLOATING_BUTTON_COLUMN: string;
    CONTROLS_FLOATING_BUTTON_ROW: string;
    CORNER_CONTROLS: string;
    CORNER_CONTROLS_INSERT_ROW_MARKER: string;
    CORNER_CONTROLS_INSERT_COLUMN_MARKER: string;
    CONTROLS_CORNER_BUTTON: string;
    /** drag and drop controls */
    DRAG_ROW_CONTROLS_WRAPPER: string;
    DRAG_ROW_CONTROLS: string;
    DRAG_ROW_FLOATING_INSERT_DOT_WRAPPER: string;
    DRAG_ROW_FLOATING_INSERT_DOT: string;
    DRAG_COLUMN_CONTROLS: string;
    DRAG_COLUMN_FLOATING_INSERT_DOT_WRAPPER: string;
    DRAG_COLUMN_FLOATING_INSERT_DOT: string;
    DRAG_COLUMN_CONTROLS_WRAPPER: string;
    DRAG_COLUMN_DROP_TARGET_CONTROLS: string;
    DRAG_COLUMN_CONTROLS_INNER: string;
    DRAG_HANDLE_BUTTON_CONTAINER: string;
    DRAG_HANDLE_BUTTON_CLICKABLE_ZONE: string;
    DRAG_CORNER_BUTTON: string;
    DRAG_CORNER_BUTTON_INNER: string;
    /** nested tables classes */
    NESTED_TABLE_WITH_CONTROLS: string;
    /** disabled classes */
    DRAG_HANDLE_DISABLED: string;
    /** minimised handle class */
    DRAG_HANDLE_MINIMISED: string;
    DRAG_SUBMENU: string;
    DRAG_SUBMENU_ICON: string;
    /** Other classes */
    NUMBERED_COLUMN: string;
    NUMBERED_COLUMN_BUTTON: string;
    NUMBERED_COLUMN_BUTTON_DISABLED: string;
    HOVERED_COLUMN: string;
    HOVERED_ROW: string;
    HOVERED_TABLE: string;
    HOVERED_NO_HIGHLIGHT: string;
    HOVERED_CELL: string;
    HOVERED_CELL_IN_DANGER: string;
    HOVERED_CELL_ACTIVE: string;
    HOVERED_CELL_WARNING: string;
    HOVERED_DELETE_BUTTON: string;
    WITH_CONTROLS: string;
    RESIZING_PLUGIN: string;
    RESIZE_CURSOR: string;
    IS_RESIZING: string;
    RESIZE_HANDLE_DECORATION: string;
    CONTEXTUAL_SUBMENU: string;
    CONTEXTUAL_MENU_BUTTON_WRAP: string;
    CONTEXTUAL_MENU_BUTTON: string;
    CONTEXTUAL_MENU_BUTTON_FIXED: string;
    CONTEXTUAL_MENU_ICON: string;
    CONTEXTUAL_MENU_ICON_SMALL: string;
    SELECTED_CELL: string;
    NODEVIEW_WRAPPER: string;
    TABLE_SELECTED: string;
    TABLE_CELL: string;
    TABLE_HEADER_CELL: string;
    TABLE_STICKY: string;
    TABLE_CHROMELESS: string;
    TOP_LEFT_CELL: string;
    LAST_ITEM_IN_CELL: string;
    WITH_COLUMN_INSERT_LINE: string;
    WITH_COLUMN_INSERT_LINE_INACTIVE: string;
    WITH_FIRST_COLUMN_INSERT_LINE: string;
    WITH_FIRST_COLUMN_INSERT_LINE_INACTIVE: string;
    WITH_LAST_COLUMN_INSERT_LINE: string;
    WITH_LAST_COLUMN_INSERT_LINE_INACTIVE: string;
    WITH_RESIZE_LINE: string;
    WITH_RESIZE_LINE_LAST_COLUMN: string;
    WITH_DRAG_RESIZE_LINE: string;
    WITH_DRAG_RESIZE_LINE_LAST_COLUMN: string;
    WITH_ROW_INSERT_LINE: string;
    WITH_ROW_INSERT_LINE_INACTIVE: string;
    WITH_LAST_ROW_INSERT_LINE: string;
    WITH_LAST_ROW_INSERT_LINE_INACTIVE: string;
    TABLE_CONTAINER: "pm-table-container";
    TABLE_NODE_WRAPPER: "pm-table-wrapper";
    TABLE_LEFT_SHADOW: "pm-table-with-left-shadow";
    TABLE_RIGHT_SHADOW: "pm-table-with-right-shadow";
    TABLE_STICKY_SHADOW: "pm-table-sticky-shadow";
    TABLE_STICKY_WRAPPER: "pm-table-sticky-wrapper";
    TABLE_STICKY_SCROLLBAR_CONTAINER: "pm-table-sticky-scrollbar-container";
    TABLE_STICKY_SENTINEL_TOP: "pm-table-sticky-sentinel-top";
    TABLE_STICKY_SENTINEL_BOTTOM: "pm-table-sticky-sentinel-bottom";
    TABLE_STICKY_SCROLLBAR_SENTINEL_TOP: "pm-table-sticky-scrollbar-sentinel-top";
    TABLE_STICKY_SCROLLBAR_SENTINEL_BOTTOM: "pm-table-sticky-scrollbar-sentinel-bottom";
    TABLE_SHADOW_SENTINEL_LEFT: "pm-table-shadow-sentinel-left";
    TABLE_SHADOW_SENTINEL_RIGHT: "pm-table-shadow-sentinel-right";
    TABLE_CELL_NODEVIEW_CONTENT_DOM: "pm-table-cell-nodeview-content-dom";
    TABLE_CELL_WRAPPER: "pm-table-cell-content-wrap";
    TABLE_HEADER_CELL_WRAPPER: "pm-table-header-content-wrap";
    TABLE_ROW_CONTROLS_WRAPPER: "pm-table-row-controls-wrapper";
    TABLE_COLUMN_CONTROLS_DECORATIONS: "pm-table-column-controls-decoration";
    TABLE_RESIZER_CONTAINER: "pm-table-resizer-container";
};
export interface ToolbarMenuConfig {
    allowHeaderRow?: boolean;
    allowHeaderColumn?: boolean;
    allowNumberColumn?: boolean;
    allowCollapse?: boolean;
}
export interface ToolbarMenuState {
    isHeaderRowEnabled?: boolean;
    isHeaderColumnEnabled?: boolean;
    isNumberColumnEnabled?: boolean;
    isTableCollapsed?: boolean;
    canCollapseTable?: boolean;
    isDragAndDropEnabled?: boolean;
}
export interface ToolbarMenuContext {
    formatMessage: IntlShape['formatMessage'];
}
export declare enum ShadowEvent {
    SHOW_BEFORE_SHADOW = "showBeforeShadow",
    SHOW_AFTER_SHADOW = "showAfterShadow"
}
export type ReportInvalidNodeAttrs = (invalidNodeAttrs: InvalidNodeAttr) => void;
export type InvalidNodeAttr = {
    nodeType: string;
    attribute: string;
    reason: string;
    spanValue: number;
    tableLocalId: string;
};
export type TableDirection = 'row' | 'column';
/**
 * Drag and Drop interfaces
 */
export type DraggableType = 'table-row' | 'table-column';
export type DraggableBehaviour = 'move' | 'clone';
export interface DraggableSourceData extends Record<string, unknown> {
    type: DraggableType;
    localId: string;
    indexes: number[];
}
export interface DraggableTargetData extends Record<string | symbol, unknown> {
    type: DraggableType;
    localId: string;
    targetIndex: number;
}
export interface DraggableData {
    sourceType: DraggableType;
    sourceLocalId: string;
    sourceIndexes: number[];
    targetType: DraggableType;
    targetLocalId: string;
    targetIndex: number;
    targetAdjustedIndex: number;
    targetClosestEdge: Edge;
    /**
     * The target direction identifies where relative to the target index is the item being dropped. A value of 'start' would
     * mean that the item is being inserted before the index, and 'end would be after.
     */
    targetDirection: 'start' | 'end';
    /**
     * This represents a hollistic movement direction; a value of 1 means the source->target index would shift in a positive direction.
     * A value of 0 indicates that the target index is inside the the source indexes.
     */
    direction: 1 | -1 | 0;
    behaviour: DraggableBehaviour;
}
export type HandleTypes = 'hover' | 'selected';
export interface MessageDescriptor {
    id: string;
    description: string;
    defaultMessage: string;
}
