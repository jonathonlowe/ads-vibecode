import type { MouseEventHandler } from 'react';
import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { TriggerType } from '../../pm-plugins/drag-and-drop/types';
import type { CellHoverMeta, TableDirection } from '../../types';
export type DragHandleAppearance = 'default' | 'selected' | 'disabled' | 'danger' | 'placeholder';
type DragHandleProps = {
    tableLocalId: string;
    indexes: number[];
    forceDefaultHandle?: boolean;
    previewWidth?: number;
    previewHeight?: number;
    hoveredCell?: CellHoverMeta;
    direction?: TableDirection;
    appearance?: DragHandleAppearance;
    onClick?: MouseEventHandler;
    onMouseOver?: MouseEventHandler;
    onMouseOut?: MouseEventHandler;
    toggleDragMenu?: (trigger: TriggerType, event?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    editorView: EditorView;
    isDragMenuTarget: boolean;
    hoveredColumns?: number[];
    hoveredRows?: number[];
};
export declare const DragHandle: React.FC<import("react-intl-next").WithIntlProps<DragHandleProps & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<DragHandleProps & WrappedComponentProps>;
};
export declare const DragHandleWithSharedState: React.FC<import("react-intl-next").WithIntlProps<DragHandleProps & {
    api?: import("@atlaskit/editor-common/types").EditorInjectionAPI<"table", {
        pluginConfiguration: import("../../tablePluginType").TablePluginOptions | undefined;
        actions: import("../../tablePluginType").TablePluginActions;
        sharedState?: import("../../types").TableSharedState | undefined;
        commands: import("../../tablePluginType").TablePluginCommands;
        dependencies: import("../../tablePluginType").TablePluginDependencies;
    }> | undefined;
} & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<DragHandleProps & {
        api?: import("@atlaskit/editor-common/types").EditorInjectionAPI<"table", {
            pluginConfiguration: import("../../tablePluginType").TablePluginOptions | undefined;
            actions: import("../../tablePluginType").TablePluginActions;
            sharedState?: import("../../types").TableSharedState | undefined;
            commands: import("../../tablePluginType").TablePluginCommands;
            dependencies: import("../../tablePluginType").TablePluginDependencies;
        }> | undefined;
    } & WrappedComponentProps>;
};
export {};
