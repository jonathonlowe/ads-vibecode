/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Component } from 'react';
import { jsx } from '@emotion/react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { EditorAnalyticsAPI } from '@atlaskit/editor-common/analytics';
import type { GetEditorContainerWidth, GetEditorFeatureFlags } from '@atlaskit/editor-common/types';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { Rect } from '@atlaskit/editor-tables/table-map';
import type { PluginInjectionAPI } from '../../types';
interface Props {
    editorView: EditorView;
    isOpen: boolean;
    selectionRect: Rect;
    targetCellPosition?: number;
    mountPoint?: HTMLElement;
    allowMergeCells?: boolean;
    allowColumnSorting?: boolean;
    allowBackgroundColor?: boolean;
    boundariesElement?: HTMLElement;
    offset?: Array<number>;
    api: PluginInjectionAPI | undefined | null;
    editorAnalyticsAPI?: EditorAnalyticsAPI;
    getEditorContainerWidth: GetEditorContainerWidth;
    getEditorFeatureFlags?: GetEditorFeatureFlags;
    isCellMenuOpenByKeyboard?: boolean;
    isCommentEditor?: boolean;
}
interface State {
    isSubmenuOpen: boolean;
    isOpenAllowed: boolean;
}
export declare class ContextualMenu extends Component<Props & WrappedComponentProps, State> {
    state: State;
    static defaultProps: {
        boundariesElement: HTMLElement | undefined;
    };
    private dropdownMenuRef;
    componentDidMount(): void;
    render(): jsx.JSX.Element;
    private handleSubMenuRef;
    private createBackgroundColorItem;
    private newDistributeColumnsItem;
    private createMergeSplitCellItems;
    private createInsertColumnItem;
    private createInsertRowItem;
    private createClearCellsItem;
    private createDeleteColumnItem;
    private createDeleteRowItem;
    private createDistributeColumnsItemInternal;
    private createDistributeColumnsItem;
    private createSortColumnItems;
    private createOriginalContextMenuItems;
    private createNewContextMenuItems;
    private onMenuItemActivated;
    private toggleOpen;
    private handleOpenChange;
    private handleItemMouseEnter;
    private handleItemMouseLeave;
    private closeSubmenu;
    private setColor;
}
declare const _default: React.FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<Props & WrappedComponentProps>;
};
export default _default;
