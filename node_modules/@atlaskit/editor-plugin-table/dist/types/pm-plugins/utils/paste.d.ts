import type { Schema } from '@atlaskit/editor-prosemirror/model';
import { Slice, Fragment, Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorState, Selection } from '@atlaskit/editor-prosemirror/state';
export declare const unwrapContentFromTable: (maybeTable: PMNode) => PMNode | PMNode[];
export declare const removeTableFromFirstChild: (node: PMNode, i: number) => PMNode | PMNode[];
export declare const removeTableFromLastChild: (node: PMNode, i: number, fragment: Fragment) => PMNode | PMNode[];
export declare const transformSliceToRemoveNestedTables: (slice: Slice, schema: Schema, selection: Selection) => Slice;
/**
 * When we copy from a table cell with a hardBreak at the end,
 * the slice generated will come with a hardBreak outside of the table.
 * This code will look for that pattern and fix it.
 */
export declare const transformSliceToFixHardBreakProblemOnCopyFromCell: (slice: Slice, schema: Schema) => Slice;
export declare const transformSliceToRemoveOpenTable: (slice: Slice, schema: Schema) => Slice;
export declare const transformSliceToCorrectEmptyTableCells: (slice: Slice, schema: Schema) => Slice;
export declare function isHeaderRowRequired(state: EditorState): boolean | undefined;
export declare const transformSliceTableLayoutDefaultToCenter: (slice: Slice, schema: Schema) => Slice;
