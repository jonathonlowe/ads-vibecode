export declare const isCell: (node: HTMLElement | null) => boolean;
export declare const isCornerButton: (node: HTMLElement | null) => boolean;
export declare const isInsertRowButton: (node: HTMLElement | null) => boolean | HTMLElement | null;
export declare const getColumnOrRowIndex: (target: HTMLElement) => [number, number];
export declare const isColumnControlsDecorations: (node: HTMLElement | null) => boolean;
export declare const isRowControlsButton: (node: HTMLElement | null) => boolean;
export declare const isResizeHandleDecoration: (node: HTMLElement | null) => boolean;
export declare const isTableControlsButton: (node: HTMLElement | null) => boolean;
export declare const isTableContainerOrWrapper: (node: HTMLElement | null) => boolean;
/** drag-and-drop classes */
export declare const isDragRowFloatingInsertDot: (node: HTMLElement | null) => boolean;
export declare const isDragColumnFloatingInsertDot: (node: HTMLElement | null) => boolean;
export declare const isDragCornerButton: (node: HTMLElement | null) => boolean;
/**
 * This can be used with mouse events to determine the left/right side of the target the pointer is closest too.
 *
 * WARNING: This metod reads properties which can trigger a reflow; use this wisely.
 *
 * @param mouseEvent
 * @param gapInPixels
 * @returns
 */
export declare const getMousePositionHorizontalRelativeByElement: (mouseEvent: MouseEvent, offsetX: number, gapInPixels?: number) => 'left' | 'right' | null;
export declare const getMousePositionVerticalRelativeByElement: (mouseEvent: MouseEvent) => 'top' | 'bottom' | null;
export declare const hasResizeHandler: ({ columnEndIndexTarget, target, }: {
    columnEndIndexTarget: number;
    target: HTMLElement;
}) => boolean;
export type TableDOMElements = {
    wrapper: HTMLDivElement;
    table: HTMLTableElement;
};
export declare const getTree: (tr: HTMLTableRowElement) => TableDOMElements | null;
export declare const getTop: (element: HTMLElement | Window | undefined) => number;
export declare const findNearestCellIndexToPoint: (x: number, y: number) => {
    row: number;
    col: number;
} | undefined;
