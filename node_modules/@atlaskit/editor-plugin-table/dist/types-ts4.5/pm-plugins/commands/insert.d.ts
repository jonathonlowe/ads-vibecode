import type { AnalyticsEventPayload, EditorAnalyticsAPI } from '@atlaskit/editor-common/analytics';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import type { Command, EditorCommand } from '@atlaskit/editor-common/types';
import type { Transaction } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { PluginInjectionAPI } from '../../types';
type InsertTableWithNestingSupportCommand = (options: {
    isTableScalingEnabled?: boolean;
    isTableAlignmentEnabled?: boolean;
    isFullWidthModeEnabled?: boolean;
    isCommentEditor?: boolean;
    isChromelessEditor?: boolean;
    isTableResizingEnabled?: boolean;
    createTableProps?: {
        rowsCount?: number;
        colsCount?: number;
    };
}, api: PluginInjectionAPI | undefined | null, analyticsPayload?: AnalyticsEventPayload) => EditorCommand;
export declare function addColumnAt(api: PluginInjectionAPI | undefined | null, isTableScalingEnabled?: boolean, isTableFixedColumnWidthsOptionEnabled?: boolean, shouldUseIncreasedScalingPercent?: boolean, isCommentEditor?: boolean): (column: number, allowAddColumnCustomStep: boolean | undefined, view: EditorView | undefined) => (tr: Transaction) => Transaction;
export declare const addColumnBefore: (api: PluginInjectionAPI | undefined | null, isTableScalingEnabled?: boolean, isTableFixedColumnWidthsOptionEnabled?: boolean, shouldUseIncreasedScalingPercent?: boolean, isCommentEditor?: boolean) => Command;
export declare const addColumnAfter: (api: PluginInjectionAPI | undefined | null, isTableScalingEnabled?: boolean, isTableFixedColumnWidthsOptionEnabled?: boolean, shouldUseIncreasedScalingPercent?: boolean, isCommentEditor?: boolean) => Command;
export declare const insertColumn: (api: PluginInjectionAPI | undefined | null, isTableScalingEnabled?: boolean, isTableFixedColumnWidthsOptionEnabled?: boolean, shouldUseIncreasedScalingPercent?: boolean, isCommentEditor?: boolean) => (column: number) => Command;
export declare const insertRow: (row: number, moveCursorToTheNewRow: boolean) => Command;
/**
 * @private
 * @deprecated This function is deprecated - please use insertTableWithNestingSupport instead.
 * (To be removed with feature gate: `platform_editor_use_nested_table_pm_nodes`)
 */
export declare const createTable: (isTableScalingEnabled?: boolean, isTableAlignmentEnabled?: boolean, isFullWidthModeEnabled?: boolean, editorAnalyticsAPI?: EditorAnalyticsAPI | undefined | null, isCommentEditor?: boolean, isChromelessEditor?: boolean, isTableResizingEnabled?: boolean) => Command;
/**
 * @private
 * @deprecated This function is deprecated - please use insertTableWithNestingSupport instead.
 * (To be removed with feature gate: `platform_editor_use_nested_table_pm_nodes`)
 */
export declare const insertTableWithSize: (isFullWidthModeEnabled?: boolean, isTableScalingEnabled?: boolean, isTableAlignmentEnabled?: boolean, editorAnalyticsAPI?: EditorAnalyticsAPI, isCommentEditor?: boolean, isChromelessEditor?: boolean) => (rowsCount: number, colsCount: number, inputMethod?: INPUT_METHOD.PICKER) => EditorCommand;
/**
 * Unified command to insert a new table into the editor.
 *
 * @param {Object} options - Configuration options for table insertion.
 * @param {boolean} [options.isTableScalingEnabled=false] - Flag to enable table scaling.
 * @param {boolean} [options.isTableAlignmentEnabled=false] - Flag to enable table alignment.
 * @param {boolean} [options.isFullWidthModeEnabled=false] - Flag to enable full-width mode for the table.
 * @param {boolean} [options.isCommentEditor=false] - Flag to indicate if the editor is in comment mode.
 * @param {boolean} [options.isChromelessEditor=false] - Flag to indicate if the editor is chromeless.
 * @param {boolean} [options.isTableResizingEnabled=false] - Flag to enable table resizing.
 * @param {Object} [options.createTableProps={}] - Additional properties for table creation, including table size.
 * @param {Object} api - PluginInjectinoApi object for content insertion commands.
 * @param {Object} analyticsPayload - Payload for analytics tracking.
 *
 * @returns {Function} A function that takes a transaction and inserts a table.
 */
export declare const insertTableWithNestingSupport: InsertTableWithNestingSupportCommand;
export {};
