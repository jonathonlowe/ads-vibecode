import type { TableLayout } from '@atlaskit/adf-schema';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { Command, EditorCommand } from '@atlaskit/editor-common/types';
import type { Node as PMNode, Schema, Slice } from '@atlaskit/editor-prosemirror/model';
import type { EditorState, Selection, Transaction } from '@atlaskit/editor-prosemirror/state';
import type { ContentNodeWithPos, NodeWithPos } from '@atlaskit/editor-prosemirror/utils';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { WidthToWidest } from '../../types';
export declare const setEditorFocus: (editorHasFocus: boolean) => Command;
export declare const setTableRef: (ref?: HTMLTableElement) => Command;
export declare const setCellAttr: (name: string, value: any) => Command;
export declare const triggerUnlessTableHeader: (command: Command) => Command;
export declare const transformSliceRemoveCellBackgroundColor: (slice: Slice, schema: Schema) => Slice;
export declare const transformSliceToAddTableHeaders: (slice: Slice, schema: Schema) => Slice;
export declare const transformSliceToRemoveColumnsWidths: (slice: Slice, schema: Schema) => Slice;
export declare const countCellsInSlice: (slice: Slice, schema: Schema, type?: 'row' | 'column') => number;
export declare const getTableSelectionType: (selection: Selection) => "row" | "column" | undefined;
export declare const getTableElementMoveTypeBySlice: (slice: Slice, state: EditorState) => "row" | "column" | undefined;
export declare const isInsideFirstCellOfRowOrColumn: (selection: Selection, type?: 'row' | 'column') => boolean;
export declare const deleteTable: Command;
export declare const deleteTableIfSelected: Command;
export declare const convertFirstRowToHeader: (schema: Schema) => (tr: Transaction) => Transaction;
export declare const moveCursorBackward: Command;
export declare const setMultipleCellAttrs: (attrs: Object, editorView?: EditorView | null) => Command;
export declare const selectColumn: (column: number, expand?: boolean, triggeredByKeyboard?: boolean) => Command;
export declare const selectColumns: (columnIndexes: number[]) => Command;
export declare const selectRow: (row: number, expand?: boolean, triggeredByKeyboard?: boolean) => Command;
export declare const selectRows: (rowIndexes: number[]) => Command;
export declare const showInsertColumnButton: (columnIndex: number) => Command;
export declare const showInsertRowButton: (rowIndex: number) => Command;
export declare const hideInsertColumnOrRowButton: () => Command;
export declare const addResizeHandleDecorations: (rowIndex: number, columnIndex: number, includeTooltip: boolean, nodeViewPortalProviderAPI: PortalProviderAPI, isKeyboardResize?: boolean) => Command;
export declare const updateResizeHandleDecorations: (nodeViewPortalProviderAPI: PortalProviderAPI, rowIndex?: number, columnIndex?: number, includeTooltip?: boolean) => Command;
export declare const removeResizeHandleDecorations: () => Command;
export declare const autoSizeTable: (view: EditorView, node: PMNode, table: HTMLTableElement, basePos: number | undefined, opts: {
    containerWidth: number;
}) => boolean;
export declare const addBoldInEmptyHeaderCells: (tableCellHeader: ContentNodeWithPos) => Command;
export declare const updateWidthToWidest: (widthToWidest: WidthToWidest) => Command;
export declare const setTableAlignment: (newAlignment: TableLayout, isCommentEditor: boolean) => EditorCommand;
export declare const setTableAlignmentWithTableContentWithPos: (newAlignment: TableLayout, tableNodeWithPos: NodeWithPos) => EditorCommand;
export declare const setFocusToCellMenu: (isCellMenuOpenByKeyboard?: boolean, originalTr?: Transaction) => Command;
