import type { IntlShape } from 'react-intl-next';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { Node as PmNode } from '@atlaskit/editor-prosemirror/model';
import type { ReadonlyTransaction, Selection, Transaction } from '@atlaskit/editor-prosemirror/state';
import type { DecorationSet } from '@atlaskit/editor-prosemirror/view';
import { Decoration } from '@atlaskit/editor-prosemirror/view';
import type { Cell, CellColumnPositioning } from '../../types';
import { TableDecorations } from '../../types';
export declare const findColumnControlSelectedDecoration: (decorationSet: DecorationSet) => Decoration[];
export declare const findControlsHoverDecoration: (decorationSet: DecorationSet) => Decoration[];
export declare const createCellHoverDecoration: (cells: Cell[]) => Decoration[];
export declare const createControlsHoverDecoration: (cells: Cell[], type: 'row' | 'column' | 'table', tr: Transaction | ReadonlyTransaction, isDragAndDropEnable: boolean | undefined, hoveredIndexes: number[], danger?: boolean, selected?: boolean) => Decoration[];
export declare const createColumnSelectedDecoration: (tr: Transaction | ReadonlyTransaction) => Decoration[];
export declare const createColumnControlsDecoration: (selection: Selection) => Decoration[];
export declare const updateDecorations: (node: PmNode, decorationSet: DecorationSet, decorations: Decoration[], key: TableDecorations) => DecorationSet;
export declare const createResizeHandleDecoration: (tr: Transaction | ReadonlyTransaction, rowIndexTarget: number, columnEndIndexTarget: Omit<CellColumnPositioning, 'left'>, includeTooltip: boolean | undefined, getIntl: () => IntlShape, nodeViewPortalProviderAPI: PortalProviderAPI) => [
    Decoration[],
    Decoration[]
];
export declare const createColumnLineResize: (selection: Selection, cellColumnPositioning: Omit<CellColumnPositioning, 'left'>, isDragAndDropEnabled?: boolean) => Decoration[];
export declare const createColumnInsertLine: (columnIndex: number, selection: Selection, hasMergedCells: boolean) => Decoration[];
export declare const createRowInsertLine: (rowIndex: number, selection: Selection, hasMergedCells: boolean) => Decoration[];
