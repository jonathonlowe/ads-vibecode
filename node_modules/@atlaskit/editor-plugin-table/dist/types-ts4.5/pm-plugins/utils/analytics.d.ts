import type { AnalyticsEventPayload, AnalyticsEventPayloadCallback, EditorAnalyticsAPI, TableEventPayload } from '@atlaskit/editor-common/analytics';
import type { HigherOrderCommand } from '@atlaskit/editor-common/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { Selection } from '@atlaskit/editor-prosemirror/state';
import { TableMap } from '@atlaskit/editor-tables/table-map';
import { findTable } from '@atlaskit/editor-tables/utils';
export declare function getSelectedTableInfo(selection: Selection): {
    table: ReturnType<typeof findTable> | undefined;
    map: TableMap | undefined;
    totalRowCount: number;
    totalColumnCount: number;
};
export declare function getSelectedCellInfo(selection: Selection): {
    totalRowCount: number;
    totalColumnCount: number;
    horizontalCells: number;
    verticalCells: number;
    totalCells: number;
};
export declare const withEditorAnalyticsAPI: (payload: AnalyticsEventPayload | AnalyticsEventPayloadCallback) => (editorAnalyticsAPI: EditorAnalyticsAPI | undefined | null) => HigherOrderCommand;
interface UseMeasureFramerateConfig {
    maxSamples?: number;
    minFrames?: number;
    minTimeMs?: number;
    sampleRateMs?: number;
    timeoutMs?: number;
}
export declare const generateResizedPayload: (props: {
    originalNode: PMNode;
    resizedNode: PMNode;
}) => TableEventPayload;
export declare const reduceResizeFrameRateSamples: (frameRateSamples: number[]) => number[];
export declare const generateResizeFrameRatePayloads: (props: {
    docSize: number;
    frameRateSamples: number[];
    originalNode: PMNode;
}) => TableEventPayload[];
/**
 * Measures the framerate of a component over a given time period.
 */
export declare const useMeasureFramerate: (config?: UseMeasureFramerateConfig) => {
    startMeasure: () => void;
    endMeasure: () => number[];
    countFrames: () => void;
};
export {};
