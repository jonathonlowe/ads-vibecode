"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSupportedFormatting = exports.formatting = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _browser = require("@atlaskit/editor-common/browser");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
var _styles = require("./styles");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var codeSm = (0, _primitives.xcss)({
  backgroundColor: 'color.background.neutral',
  borderRadius: 'border.radius',
  width: "var(--ds-space-300, 24px)",
  display: 'inline-block',
  height: "var(--ds-space-300, 24px)",
  lineHeight: "var(--ds-space-300, 24px)",
  textAlign: 'center'
});
var codeMd = (0, _primitives.xcss)({
  backgroundColor: 'color.background.neutral',
  borderRadius: 'border.radius',
  display: 'inline-block',
  height: "var(--ds-space-300, 24px)",
  lineHeight: "var(--ds-space-300, 24px)",
  width: '50px',
  textAlign: 'center'
});
var codeLg = (0, _primitives.xcss)({
  borderRadius: 'border.radius',
  display: 'inline-block',
  height: "var(--ds-space-300, 24px)",
  lineHeight: "var(--ds-space-300, 24px)",
  textAlign: 'center',
  paddingInline: 'space.150',
  backgroundColor: 'color.background.neutral'
});
var navigationKeymaps = function navigationKeymaps(_ref) {
  var formatMessage = _ref.formatMessage;
  return [{
    name: formatMessage(_messages.toolbarMessages.navigateToEditorToolbar),
    type: 'navigation',
    keymap: function keymap() {
      return _keymaps.navToEditorToolbar;
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.navigateToFloatingToolbar),
    type: 'navigation',
    keymap: function keymap() {
      return _keymaps.navToFloatingToolbar;
    }
  }];
};
var formatting = exports.formatting = function formatting(_ref2) {
  var formatMessage = _ref2.formatMessage;
  return [{
    name: formatMessage(_messages.toolbarMessages.bold),
    type: 'strong',
    keymap: function keymap() {
      return _keymaps.toggleBold;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "**", (0, _react.jsx)(_reactIntlNext.FormattedMessage
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      , _messages.toolbarMessages.bold), "**"));
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.italic),
    type: 'em',
    keymap: function keymap() {
      return _keymaps.toggleItalic;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "*", (0, _react.jsx)(_reactIntlNext.FormattedMessage
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      , _messages.toolbarMessages.italic), "*"));
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.underline),
    type: 'underline',
    keymap: function keymap() {
      return _keymaps.toggleUnderline;
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.strike),
    type: 'strike',
    keymap: function keymap() {
      return _keymaps.toggleStrikethrough;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "~~", (0, _react.jsx)(_reactIntlNext.FormattedMessage
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      , _messages.toolbarMessages.strike), "~~"));
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.subscript),
    type: 'subsup',
    keymap: function keymap() {
      return _keymaps.toggleSubscript;
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.superscript),
    type: 'subsup',
    keymap: function keymap() {
      return _keymaps.toggleSuperscript;
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading1),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading1;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeSm
      }, "#"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading2),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading2;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "##"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading3),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading3;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "###"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading4),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading4;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "####"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading5),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading5;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "#####"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.heading6),
    type: 'heading',
    keymap: function keymap() {
      return _keymaps.toggleHeading6;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "######"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.normal),
    type: 'paragraph',
    keymap: function keymap() {
      return _keymaps.setNormalText;
    }
  }, {
    name: formatMessage(_messages.listMessages.orderedList),
    type: 'orderedList',
    keymap: function keymap() {
      return _keymaps.toggleOrderedList;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeSm
      }, "1."), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.listMessages.unorderedList),
    type: 'bulletList',
    keymap: function keymap() {
      return _keymaps.toggleBulletList;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeSm
      }, "*"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.blockquote),
    type: 'blockquote',
    keymap: function keymap() {
      return _keymaps.toggleBlockQuote;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, '>'), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.blockTypeMessages.codeblock),
    type: 'codeBlock',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "```"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.horizontalRule),
    type: 'rule',
    keymap: function keymap() {
      return _keymaps.insertRule;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "---"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.link),
    type: 'link',
    keymap: function keymap() {
      return _keymaps.addLink;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "[", (0, _react.jsx)(_reactIntlNext.FormattedMessage
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      , _messages.toolbarInsertBlockMessages.link), "](http://a.com)"));
    }
  }, {
    name: formatMessage(_messages.toolbarMessages.code),
    type: 'code',
    keymap: function keymap() {
      return _keymaps.toggleCode;
    },
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "`", (0, _react.jsx)(_reactIntlNext.FormattedMessage
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      , _messages.toolbarMessages.code), "`"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.action),
    type: 'taskItem',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeSm
      }, "[]"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.decision),
    type: 'decisionItem',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeSm
      }, "<>"), ' ', (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "Space"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.emoji),
    type: 'emoji',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, ":"));
    }
  }, {
    name: formatMessage(_messages.toolbarInsertBlockMessages.mention),
    type: 'mention',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "@"));
    }
  }, {
    name: formatMessage(_messages.alignmentMessages.alignLeft),
    type: 'alignment',
    keymap: function keymap() {
      return _keymaps.alignLeft;
    }
  }, {
    name: formatMessage(_messages.alignmentMessages.alignCenter),
    type: 'alignment',
    keymap: function keymap() {
      return _keymaps.alignCenter;
    }
  }, {
    name: formatMessage(_messages.alignmentMessages.alignRight),
    type: 'alignment',
    keymap: function keymap() {
      return _keymaps.alignRight;
    }
  }];
};
var otherFormatting = function otherFormatting(_ref3) {
  var formatMessage = _ref3.formatMessage;
  return [{
    name: formatMessage(_messages.toolbarMessages.clearFormatting),
    type: 'clearFormatting',
    keymap: function keymap() {
      return _keymaps.clearFormatting;
    }
  }, {
    name: formatMessage(_messages.undoRedoMessages.undo),
    type: 'undo',
    keymap: function keymap() {
      return _keymaps.undo;
    }
  }, {
    name: formatMessage(_messages.undoRedoMessages.redo),
    type: 'redo',
    keymap: function keymap() {
      return (0, _platformFeatureFlags.fg)('platform_editor_cmd_y_mac_redo_shortcut') ? _keymaps.redoAlt : _keymaps.redo;
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.pastePlainText),
    type: 'paste',
    keymap: function keymap() {
      return _keymaps.pastePlainText;
    }
  }, {
    name: formatMessage(_messages.annotationMessages.createComment),
    type: 'annotation',
    keymap: function keymap() {
      return _keymaps.addInlineComment;
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.CheckUncheckActionItem),
    type: 'checkbox',
    keymap: function keymap() {
      return _keymaps.toggleTaskItemCheckbox;
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.selectTableRow),
    type: 'table',
    autoFormatting: function autoFormatting() {
      return (
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react.jsx)("span", {
          css: _styles.shortcutsArray
        }, (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, "Shift"), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "\u2190")), (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, "Shift"), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "\u2192")))
      );
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.selectTableColumn),
    type: 'table',
    autoFormatting: function autoFormatting() {
      return (
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react.jsx)("span", {
          css: _styles.shortcutsArray
        }, (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, "Shift"), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "\u2191")), (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, "Shift"), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "\u2193")))
      );
    }
  }].concat([{
    name: formatMessage(_messages.helpDialogMessages.InsertTableColumn),
    type: 'table',
    autoFormatting: function autoFormatting() {
      return (
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react.jsx)("span", {
          css: _styles.shortcutsArray
        }, (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "=")), (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "-")))
      );
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.InsertTableRow),
    type: 'table',
    autoFormatting: function autoFormatting() {
      return (
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react.jsx)("span", {
          css: _styles.shortcutsArray
        }, (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "]")), (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "[")))
      );
    }
  }], [{
    name: formatMessage(_messages.helpDialogMessages.selectColumnResize),
    type: 'table',
    autoFormatting: function autoFormatting() {
      return (
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react.jsx)("span", {
          css: _styles.shortcutsArray
        }, (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: _browser.browser.mac ? codeSm : codeMd
        }, _browser.browser.mac ? '⌘' : 'Ctrl'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, _browser.browser.mac ? 'Opt' : 'Alt'), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeMd
        }, "Shift"), ' + ', (0, _react.jsx)(_primitives.Box, {
          as: "span",
          xcss: codeSm
        }, "C")))
      );
    }
  }], [{
    name: formatMessage(_messages.helpDialogMessages.highlightColor),
    type: 'highlight',
    keymap: function keymap() {
      return _keymaps.toggleHighlightPalette;
    }
  }]);
};
var resizeInformationFormatting = function resizeInformationFormatting(_ref4) {
  var formatMessage = _ref4.formatMessage;
  return [{
    name: formatMessage(_messages.helpDialogMessages.increaseSize),
    type: 'media',
    keymap: function keymap() {
      return _keymaps.increaseMediaSize;
    }
  }, {
    name: formatMessage(_messages.helpDialogMessages.decreaseSize),
    type: 'media',
    keymap: function keymap() {
      return _keymaps.decreaseMediaSize;
    }
  }];
};
var focusTableResizeHandleFormatting = function focusTableResizeHandleFormatting(_ref5) {
  var formatMessage = _ref5.formatMessage;
  return [{
    name: formatMessage(_messages.helpDialogMessages.focusTableResizeHandle),
    type: 'navigation',
    keymap: function keymap() {
      return _keymaps.focusTableResizer;
    }
  }];
};
var openCellOptionsFormattingtoFormat = function openCellOptionsFormattingtoFormat(_ref6) {
  var formatMessage = _ref6.formatMessage;
  return [{
    name: formatMessage(_messages.helpDialogMessages.openCellOptions),
    type: 'image',
    keymap: function keymap() {
      return _keymaps.focusToContextMenuTrigger;
    }
  }];
};
var imageAutoFormat = {
  name: 'Image',
  type: 'image',
  autoFormatting: function autoFormatting() {
    return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
      as: "span",
      xcss: codeLg
    }, "![", (0, _react.jsx)(_reactIntlNext.FormattedMessage
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _messages.helpDialogMessages.altText), "](http://www.image.com)"));
  }
};
var quickInsertAutoFormat = function quickInsertAutoFormat(_ref7) {
  var formatMessage = _ref7.formatMessage;
  return {
    name: formatMessage(_messages.helpDialogMessages.quickInsert),
    type: 'quickInsert',
    autoFormatting: function autoFormatting() {
      return (0, _react.jsx)("span", null, (0, _react.jsx)(_primitives.Box, {
        as: "span",
        xcss: codeLg
      }, "/"));
    }
  };
};
var getSupportedFormatting = exports.getSupportedFormatting = function getSupportedFormatting(schema, intl, imageEnabled, quickInsertEnabled) {
  var supportedBySchema = formatting(intl).filter(function (format) {
    return schema.nodes[format.type] || schema.marks[format.type];
  });
  return [].concat((0, _toConsumableArray2.default)(navigationKeymaps(intl)), (0, _toConsumableArray2.default)(otherFormatting(intl)), (0, _toConsumableArray2.default)(supportedBySchema), (0, _toConsumableArray2.default)(imageEnabled ? [imageAutoFormat] : []), (0, _toConsumableArray2.default)(quickInsertEnabled ? [quickInsertAutoFormat(intl)] : []), (0, _toConsumableArray2.default)(focusTableResizeHandleFormatting(intl)), (0, _toConsumableArray2.default)(resizeInformationFormatting(intl)), (0, _toConsumableArray2.default)(openCellOptionsFormattingtoFormat(intl)));
};