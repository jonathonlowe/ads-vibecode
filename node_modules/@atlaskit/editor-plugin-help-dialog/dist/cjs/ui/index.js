"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _modalDialog = _interopRequireWildcard(require("@atlaskit/modal-dialog"));
var _commands = require("../pm-plugins/commands");
var _formatting = require("./formatting");
var _Modal = _interopRequireDefault(require("./Modal"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var HelpDialog = function HelpDialog(_ref) {
  var pluginInjectionApi = _ref.pluginInjectionApi,
    editorView = _ref.editorView,
    quickInsertEnabled = _ref.quickInsertEnabled,
    intl = _ref.intl;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['helpDialog']),
    helpDialogState = _useSharedPluginState.helpDialogState;
  var closeDialog = (0, _react.useCallback)(function () {
    var tr = editorView.state.tr,
      dispatch = editorView.dispatch;
    (0, _commands.closeHelpCommand)(tr, dispatch);
  }, [editorView]);
  var handleEsc = (0, _react.useCallback)(function (e) {
    if (e.key === 'Escape' && helpDialogState !== null && helpDialogState !== void 0 && helpDialogState.isVisible) {
      closeDialog();
    }
  }, [closeDialog, helpDialogState === null || helpDialogState === void 0 ? void 0 : helpDialogState.isVisible]);
  (0, _react.useEffect)(function () {
    // Ignored via go/ees005
    // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
    document.addEventListener('keydown', handleEsc);
    return function () {
      // Ignored via go/ees005
      // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
      document.removeEventListener('keydown', handleEsc);
    };
  }, [handleEsc]);
  var formatting = (0, _formatting.getSupportedFormatting)(editorView.state.schema, intl, helpDialogState === null || helpDialogState === void 0 ? void 0 : helpDialogState.imageEnabled, quickInsertEnabled);
  return (0, _react2.jsx)(_modalDialog.ModalTransition, null, helpDialogState !== null && helpDialogState !== void 0 && helpDialogState.isVisible ? (0, _react2.jsx)(_modalDialog.default, {
    width: "large",
    onClose: closeDialog,
    testId: "help-modal-dialog"
  }, (0, _react2.jsx)(_Modal.default, {
    formatting: formatting
  })) : null);
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(HelpDialog);