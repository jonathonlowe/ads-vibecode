"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpDialogPlugin = void 0;
var _react = _interopRequireDefault(require("react"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _questionCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/question-circle"));
var _actions = require("./pm-plugins/actions");
var _commands = require("./pm-plugins/commands");
var _keymap = require("./pm-plugins/keymap");
var _main = require("./pm-plugins/main");
var _pluginKey = require("./pm-plugins/plugin-key");
var _HelpDialogLoader = require("./ui/HelpDialogLoader");
var helpDialogPlugin = exports.helpDialogPlugin = function helpDialogPlugin(_ref) {
  var _ref$config = _ref.config,
    imageUploadProviderExists = _ref$config === void 0 ? false : _ref$config,
    api = _ref.api;
  return {
    name: 'helpDialog',
    pmPlugins: function pmPlugins() {
      return [{
        name: 'helpDialog',
        plugin: function plugin(_ref2) {
          var dispatch = _ref2.dispatch;
          return (0, _main.createPlugin)(dispatch, imageUploadProviderExists);
        }
      }, {
        name: 'helpDialogKeymap',
        plugin: function plugin() {
          var _api$analytics;
          return (0, _keymap.keymapPlugin)(api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions);
        }
      }];
    },
    pluginsOptions: {
      quickInsert: function quickInsert(_ref3) {
        var formatMessage = _ref3.formatMessage;
        return [{
          id: 'helpdialog',
          title: formatMessage(_messages.toolbarInsertBlockMessages.help),
          description: formatMessage(_messages.toolbarInsertBlockMessages.helpDescription),
          keywords: ['?'],
          priority: 4000,
          keyshortcut: (0, _keymaps.tooltip)(_keymaps.openHelp),
          icon: function icon() {
            return /*#__PURE__*/_react.default.createElement(_questionCircle.default, {
              label: "",
              color: "currentColor",
              spacing: "spacious"
            });
          },
          action: function action(insert) {
            var _api$analytics2;
            var tr = insert('');
            (0, _commands.openHelpCommand)(tr);
            api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 || _api$analytics2.actions.attachAnalyticsEvent({
              action: _analytics.ACTION.HELP_OPENED,
              actionSubject: _analytics.ACTION_SUBJECT.HELP,
              actionSubjectId: _analytics.ACTION_SUBJECT_ID.HELP_QUICK_INSERT,
              attributes: {
                inputMethod: _analytics.INPUT_METHOD.QUICK_INSERT
              },
              eventType: _analytics.EVENT_TYPE.UI
            })(tr);
            return tr;
          }
        }];
      }
    },
    contentComponent: function contentComponent(_ref4) {
      var editorView = _ref4.editorView;
      return /*#__PURE__*/_react.default.createElement(_HelpDialogLoader.HelpDialogLoader, {
        pluginInjectionApi: api,
        editorView: editorView,
        quickInsertEnabled: !!(api !== null && api !== void 0 && api.quickInsert)
      });
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return null;
      }
      return _pluginKey.pluginKey.getState(editorState) || null;
    },
    actions: {
      openHelp: function openHelp() {
        return api === null || api === void 0 ? void 0 : api.core.actions.execute(function (_ref5) {
          var tr = _ref5.tr;
          return (0, _actions.openHelpAction)(tr);
        });
      },
      closeHelp: function closeHelp() {
        return api === null || api === void 0 ? void 0 : api.core.actions.execute(function (_ref6) {
          var tr = _ref6.tr;
          return (0, _actions.closeHelpAction)(tr);
        });
      }
    }
  };
};