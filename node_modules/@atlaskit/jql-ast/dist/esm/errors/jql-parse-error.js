import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Represents a error occurring when trying to parse JQL into a Jast.
 */
export var JQLParseError = /*#__PURE__*/function (_Error) {
  _inherits(JQLParseError, _Error);
  var _super = _createSuper(JQLParseError);
  /**
   * The original JS error that was thrown trying to parse JQL.
   */

  /**
   * The error message. We use a separate property here so consumers can perform shallow comparison of error objects.
   */

  function JQLParseError(message, cause) {
    var _this;
    _classCallCheck(this, JQLParseError);
    _this = _super.call(this, message);
    _this.name = 'JQLParseError';
    _this.cause = cause;
    _this.description = message;
    return _this;
  }
  return _createClass(JQLParseError);
}( /*#__PURE__*/_wrapNativeSuper(Error));