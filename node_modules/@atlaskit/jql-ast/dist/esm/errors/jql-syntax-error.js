import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { JQLParseError } from './jql-parse-error';

/**
 * Represents a syntax error occurring at a specific token in the parser token stream.
 *
 * This error will be constructed using the error message produced by an {@link ANTLRErrorStrategy}. As such, consumers
 * should refer to the {@link ANTLRErrorStrategy} implementation to know if the message is i18n safe and suitable to
 * display to users.
 */
export var JQLSyntaxError = /*#__PURE__*/function (_JQLParseError) {
  _inherits(JQLSyntaxError, _JQLParseError);
  var _super = _createSuper(JQLSyntaxError);
  /**
   * The starting character position (zero-indexed) of the offending token.
   */

  /**
   * The last character position (zero-indexed) of the offending token.
   */

  /**
   * The line number (starting from 1) in the input where the error occurred.
   */

  /**
   * The character position (zero-indexed) within that line where the error occurred.
   */

  function JQLSyntaxError(message, start, stop, line, charPositionInLine) {
    var _this;
    _classCallCheck(this, JQLSyntaxError);
    _this = _super.call(this, message);
    _this.name = 'JQLSyntaxError';
    _this.start = start;
    _this.stop = stop;
    _this.line = line;
    _this.charPositionInLine = charPositionInLine;
    return _this;
  }
  return _createClass(JQLSyntaxError);
}(JQLParseError);