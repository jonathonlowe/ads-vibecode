import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { CharStreams, CommonTokenStream } from 'antlr4ts';
import memoize from 'memoize-one';
import { JQLLexer, JQLParser } from '@atlaskit/jql-parser';
import creators from '../creators';
import { JastBuilderErrorListener, JQLParseError } from '../errors';
import { QueryVisitor } from '../visitors';
export var JastBuilder = /*#__PURE__*/function () {
  function JastBuilder() {
    _classCallCheck(this, JastBuilder);
    _defineProperty(this, "errorListeners", []);
    _defineProperty(this, "errorHandler", undefined);
    _defineProperty(this, "getTokens", memoize(function (value) {
      var chars = CharStreams.fromString(value);
      var lexer = new JQLLexer(chars);
      return new CommonTokenStream(lexer);
    }));
    _defineProperty(this, "getParser", memoize(function (tokens) {
      return new JQLParser(tokens);
    }));
  }
  _createClass(JastBuilder, [{
    key: "setErrorHandler",
    value: function setErrorHandler(errorHandler) {
      this.errorHandler = errorHandler;
      return this;
    }
  }, {
    key: "setErrorListeners",
    value: function setErrorListeners(errorListeners) {
      this.errorListeners = this.errorListeners.concat(errorListeners);
      return this;
    }
  }, {
    key: "build",
    value: function build(value) {
      var tokens = this.getTokens(value);
      var parser = this.getParser(tokens);
      var astErrorListener = new JastBuilderErrorListener();
      parser.removeErrorListeners();
      parser.addErrorListener(astErrorListener);
      this.errorListeners.forEach(function (errorListener) {
        return parser.addErrorListener(errorListener);
      });
      if (this.errorHandler) {
        parser.errorHandler = this.errorHandler;
        this.errorHandler.reset(parser);
      }
      var visitor = new QueryVisitor(tokens);
      try {
        var parseTree = parser.jqlQuery();
        var query = parseTree.accept(visitor);
        return creators.jast(query, value, astErrorListener.errors);
      } catch (error) {
        return creators.jast(undefined, value, [new JQLParseError(error.message, error)]);
      }
    }
  }]);
  return JastBuilder;
}();