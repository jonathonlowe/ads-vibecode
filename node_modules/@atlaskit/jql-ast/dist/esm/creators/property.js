import { assignParent } from './common';
function acceptProperty(visitor) {
  return visitor.visitProperty ? visitor.visitProperty(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterProperty && listener.enterProperty(this);
}
function exitNode(listener) {
  listener.exitProperty && listener.exitProperty(this);
}
function getChildren() {
  var children = [];
  if (this.key) {
    children.push(this.key);
  }
  if (this.path) {
    return children.concat(this.path);
  }
  return children;
}
export var property = function property(key) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return propertyInternal(key, path);
};
export var propertyInternal = function propertyInternal(key, path) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    key: key,
    path: path,
    position: position,
    accept: acceptProperty,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null
  };
  assignParent(node);
  return node;
};