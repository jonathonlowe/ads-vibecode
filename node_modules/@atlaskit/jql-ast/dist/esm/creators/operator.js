import { noChildren } from './common';
function acceptOperator(visitor) {
  return visitor.visitOperator ? visitor.visitOperator(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterOperator && listener.enterOperator(this);
}
function exitNode(listener) {
  listener.exitOperator && listener.exitOperator(this);
}
export var operator = function operator(value) {
  return operatorInternal(value, value);
};
export var operatorInternal = function operatorInternal(value, text) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    text: text,
    value: value,
    position: position,
    accept: acceptOperator,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: noChildren,
    parent: null
  };
};