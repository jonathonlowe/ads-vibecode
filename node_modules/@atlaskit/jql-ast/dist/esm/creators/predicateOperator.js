import { noChildren } from './common';
function acceptPredicateOperator(visitor) {
  return visitor.visitPredicateOperator ? visitor.visitPredicateOperator(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterPredicateOperator && listener.enterPredicateOperator(this);
}
function exitNode(listener) {
  listener.exitPredicateOperator && listener.exitPredicateOperator(this);
}
export var predicateOperator = function predicateOperator(value) {
  return predicateOperatorInternal(value, value);
};
export var predicateOperatorInternal = function predicateOperatorInternal(value, text) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    text: text,
    value: value,
    position: position,
    accept: acceptPredicateOperator,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: noChildren,
    parent: null
  };
};