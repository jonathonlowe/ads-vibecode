import { CLAUSE_TYPE_NOT, NODE_TYPE_CLAUSE } from '../constants';
import { remove, removeClause, replace, replaceClause } from '../transformers/notClause';
import { assignParent } from './common';
import { notClauseOperator } from './notClauseOperator';
function acceptNotClause(visitor) {
  return visitor.visitNotClause ? visitor.visitNotClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterNotClause && listener.enterNotClause(this);
}
function exitNode(listener) {
  listener.exitNotClause && listener.exitNotClause(this);
}
function getChildren() {
  return [this.operator, this.clause];
}
export var notClause = function notClause(clause) {
  return notClauseInternal(clause, notClauseOperator());
};
export var notClauseInternal = function notClauseInternal(clause, operator) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_NOT,
    clause: clause,
    operator: operator,
    position: position,
    accept: acceptNotClause,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    remove: remove,
    removeClause: removeClause,
    replace: replace,
    replaceClause: replaceClause
  };
  assignParent(node);
  return node;
};