import { CLAUSE_TYPE_TERMINAL, NODE_TYPE_CLAUSE } from '../constants';
import { appendOperand, remove, replace, setOperand, setOperator } from '../transformers/terminalClause';
import { assignParent } from './common';
function acceptTerminalClause(visitor) {
  return visitor.visitTerminalClause ? visitor.visitTerminalClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterTerminalClause && listener.enterTerminalClause(this);
}
function exitNode(listener) {
  listener.exitTerminalClause && listener.exitTerminalClause(this);
}
function getChildren() {
  var children = [this.field];
  if (this.operator) {
    children.push(this.operator);
  }
  if (this.operand) {
    children.push(this.operand);
  }
  return children.concat(this.predicates);
}
export var terminalClause = function terminalClause(field, operator, operand) {
  var predicates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  return terminalClauseInternal(field, operator, operand, predicates);
};
export var terminalClauseInternal = function terminalClauseInternal(field, operator, operand, predicates) {
  var position = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_TERMINAL,
    field: field,
    operator: operator,
    operand: operand,
    predicates: predicates,
    position: position,
    accept: acceptTerminalClause,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    setOperator: setOperator,
    setOperand: setOperand,
    appendOperand: appendOperand,
    remove: remove,
    replace: replace
  };
  assignParent(node);
  return node;
};