import { noChildren } from './common';
function acceptCompoundOperator(visitor) {
  return visitor.visitCompoundOperator ? visitor.visitCompoundOperator(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterCompoundOperator && listener.enterCompoundOperator(this);
}
function exitNode(listener) {
  listener.exitCompoundOperator && listener.exitCompoundOperator(this);
}
export var compoundOperator = function compoundOperator(value) {
  return compoundOperatorInternal(value, []);
};
export var compoundOperatorInternal = function compoundOperatorInternal(value, operatorPositions) {
  return {
    value: value,
    positions: operatorPositions,
    position: null,
    accept: acceptCompoundOperator,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: noChildren,
    parent: null
  };
};