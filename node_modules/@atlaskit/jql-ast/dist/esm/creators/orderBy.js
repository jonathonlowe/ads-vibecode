import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { NODE_TYPE_ORDER_BY } from '../constants';
import { prependOrderField, remove, removeOrderField, replace, replaceOrderField, setOrderDirection } from '../transformers/orderBy';
import { assignParent } from './common';
import { orderByOperator } from './orderByOperator';
function acceptOrderBy(visitor) {
  return visitor.visitOrderBy ? visitor.visitOrderBy(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterOrderBy && listener.enterOrderBy(this);
}
function exitNode(listener) {
  listener.exitOrderBy && listener.exitOrderBy(this);
}
function getChildren() {
  return [this.operator].concat(_toConsumableArray(this.fields));
}
export var orderBy = function orderBy(fields) {
  return orderByInternal(fields, orderByOperator());
};
export var orderByInternal = function orderByInternal(fields, operator) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    type: NODE_TYPE_ORDER_BY,
    operator: operator,
    fields: fields,
    position: position,
    accept: acceptOrderBy,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    prependOrderField: prependOrderField,
    setOrderDirection: setOrderDirection,
    replace: replace,
    replaceOrderField: replaceOrderField,
    remove: remove,
    removeOrderField: removeOrderField
  };
  assignParent(node);
  return node;
};