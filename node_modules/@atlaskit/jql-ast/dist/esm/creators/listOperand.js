import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { NODE_TYPE_OPERAND, OPERAND_TYPE_LIST } from '../constants';
import { appendOperand } from '../transformers/listOperand';
import { assignParent } from './common';
function acceptListOperand(visitor) {
  return visitor.visitListOperand ? visitor.visitListOperand(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterListOperand && listener.enterListOperand(this);
}
function exitNode(listener) {
  listener.exitListOperand && listener.exitListOperand(this);
}
function getChildren() {
  return _toConsumableArray(this.values);
}
export var listOperand = function listOperand(values) {
  return listOperandInternal(values);
};
export var listOperandInternal = function listOperandInternal(values) {
  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var node = {
    type: NODE_TYPE_OPERAND,
    operandType: OPERAND_TYPE_LIST,
    values: values,
    position: position,
    accept: acceptListOperand,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    appendOperand: appendOperand
  };
  assignParent(node);
  return node;
};