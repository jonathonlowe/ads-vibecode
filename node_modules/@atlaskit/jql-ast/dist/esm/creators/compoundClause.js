import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { CLAUSE_TYPE_COMPOUND, NODE_TYPE_CLAUSE } from '../constants';
import { appendClause, remove, removeClause, replace, replaceClause } from '../transformers/compoundClause';
import { assignParent } from './common';
function acceptCompoundClause(visitor) {
  return visitor.visitCompoundClause ? visitor.visitCompoundClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterCompoundClause && listener.enterCompoundClause(this);
}
function exitNode(listener) {
  listener.exitCompoundClause && listener.exitCompoundClause(this);
}
function getChildren() {
  return [this.operator].concat(_toConsumableArray(this.clauses));
}
export var compoundClause = function compoundClause(operator, clauses) {
  return compoundClauseInternal(operator, clauses);
};
export var compoundClauseInternal = function compoundClauseInternal(operator, clauses) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_COMPOUND,
    operator: operator,
    clauses: clauses,
    position: position,
    accept: acceptCompoundClause,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    appendClause: appendClause,
    remove: remove,
    removeClause: removeClause,
    replace: replace,
    replaceClause: replaceClause
  };
  assignParent(node);
  return node;
};