import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { internalCreators } from '../creators';
import { notUndefined } from '../utils';
import { getPositionFromContext, JastBuildingVisitor } from './common';
import { FieldVisitor } from './field';
import { OperandVisitor } from './operand';
import { OperatorVisitor } from './operator';
import { PredicateVisitor } from './predicate';
export var TerminalClauseVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(TerminalClauseVisitor, _JastBuildingVisitor);
  var _super = _createSuper(TerminalClauseVisitor);
  function TerminalClauseVisitor() {
    var _this;
    _classCallCheck(this, TerminalClauseVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "fieldVisitor", new FieldVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "terminalClauseRhsVisitor", new TerminalClauseRhsVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "visitJqlTerminalClause", function (ctx) {
      var field = ctx.jqlField().accept(_this.fieldVisitor);
      var _ctx$jqlTerminalClaus = ctx.jqlTerminalClauseRhs().accept(_this.terminalClauseRhsVisitor),
        operator = _ctx$jqlTerminalClaus.operator,
        operand = _ctx$jqlTerminalClaus.operand,
        predicates = _ctx$jqlTerminalClaus.predicates;
      var position = getPositionFromContext(ctx);
      return internalCreators.terminalClause(field, operator, operand, predicates, position);
    });
    return _this;
  }
  return _createClass(TerminalClauseVisitor);
}(JastBuildingVisitor);
var TerminalClauseRhsVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  _inherits(TerminalClauseRhsVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(TerminalClauseRhsVisitor);
  function TerminalClauseRhsVisitor() {
    var _this2;
    _classCallCheck(this, TerminalClauseRhsVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "operatorVisitor", new OperatorVisitor(_this2.tokens));
    _defineProperty(_assertThisInitialized(_this2), "terminalClauseOperandVisitor", new TerminalClauseOperandVisitor(_this2.tokens));
    _defineProperty(_assertThisInitialized(_this2), "predicateVisitor", new PredicateVisitor(_this2.tokens));
    _defineProperty(_assertThisInitialized(_this2), "visitJqlEqualsClause", function (ctx) {
      var operator = ctx.jqlEqualsOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      return {
        operator: operator,
        operand: operand,
        predicates: []
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlLikeClause", function (ctx) {
      var operator = ctx.jqlLikeOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      return {
        operator: operator,
        operand: operand,
        predicates: []
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlComparisonClause", function (ctx) {
      var operator = ctx.jqlComparisonOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      return {
        operator: operator,
        operand: operand,
        predicates: []
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlInClause", function (ctx) {
      var operator = ctx.jqlInOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      return {
        operator: operator,
        operand: operand,
        predicates: []
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlIsClause", function (ctx) {
      var operator = ctx.jqlIsOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      return {
        operator: operator,
        operand: operand,
        predicates: []
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlWasClause", function (ctx) {
      var operator = ctx.jqlWasOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      var predicates = ctx.jqlWasPredicate().map(function (predicate) {
        return predicate.accept(_this2.predicateVisitor);
      }).filter(notUndefined);
      return {
        operator: operator,
        operand: operand,
        predicates: predicates
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlWasInClause", function (ctx) {
      var operator = ctx.jqlWasInOperator().accept(_this2.operatorVisitor);
      var operand = ctx.accept(_this2.terminalClauseOperandVisitor);
      var predicates = ctx.jqlWasPredicate().map(function (predicate) {
        return predicate.accept(_this2.predicateVisitor);
      }).filter(notUndefined);
      return {
        operator: operator,
        operand: operand,
        predicates: predicates
      };
    });
    _defineProperty(_assertThisInitialized(_this2), "visitJqlChangedClause", function (ctx) {
      var operator = ctx.jqlChangedOperator().accept(_this2.operatorVisitor);
      var predicates = ctx.jqlChangedPredicate().map(function (predicate) {
        return predicate.accept(_this2.predicateVisitor);
      }).filter(notUndefined);
      return {
        operator: operator,
        operand: undefined,
        predicates: predicates
      };
    });
    // Recover from clause type ambiguities, e.g. "issuetype was " (which can be a WAS or WAS IN clause)
    _defineProperty(_assertThisInitialized(_this2), "visitChildren", function (node) {
      var operator = node.accept(_this2.operatorVisitor);
      return {
        operator: operator,
        operand: undefined,
        predicates: []
      };
    });
    return _this2;
  }
  return _createClass(TerminalClauseRhsVisitor);
}(JastBuildingVisitor);
var TerminalClauseOperandVisitor = /*#__PURE__*/function (_JastBuildingVisitor3) {
  _inherits(TerminalClauseOperandVisitor, _JastBuildingVisitor3);
  var _super3 = _createSuper(TerminalClauseOperandVisitor);
  function TerminalClauseOperandVisitor() {
    var _this3;
    _classCallCheck(this, TerminalClauseOperandVisitor);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this3 = _super3.call.apply(_super3, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this3), "operandVisitor", new OperandVisitor(_this3.tokens));
    _defineProperty(_assertThisInitialized(_this3), "visitJqlEqualsClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlLikeClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlComparisonClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlInClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlList(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlIsClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlEmpty()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlWasClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "visitJqlWasInClause", function (ctx) {
      return _this3.getOperandForContexts([ctx.jqlList(), ctx.jqlFunction()]);
    });
    _defineProperty(_assertThisInitialized(_this3), "getOperandForContexts", function (contexts) {
      var operandContext = contexts.find(notUndefined);
      return operandContext === null || operandContext === void 0 ? void 0 : operandContext.accept(_this3.operandVisitor);
    });
    return _this3;
  }
  return _createClass(TerminalClauseOperandVisitor);
}(JastBuildingVisitor);