import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { OPERAND_EMPTY } from '../constants';
import { internalCreators } from '../creators';
import { notUndefined } from '../utils';
import { ArgumentVisitor } from './argument';
import { getPositionFromContext, getPositionFromToken, JastBuildingVisitor } from './common';
import { NumberVisitor } from './number';
import { StringVisitor } from './string';
export var OperandVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(OperandVisitor, _JastBuildingVisitor);
  var _super = _createSuper(OperandVisitor);
  function OperandVisitor() {
    var _this;
    _classCallCheck(this, OperandVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "stringVisitor", new StringVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "numberVisitor", new NumberVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "functionNameVisitor", new FunctionNameVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "argumentListVisitor", new ArgumentListVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "visitJqlOperand", function (ctx) {
      var operandContext = [ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlList(), ctx.jqlFunction()].find(notUndefined);
      return operandContext === null || operandContext === void 0 ? void 0 : operandContext.accept(_assertThisInitialized(_this));
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlEmpty", function (ctx) {
      // ANTLR will optimistically create a jqlEmpty node in some situations where user input doesn't match the EMPTY
      // token, e.g. when using value operands in IS clauses ("field is value"), where EMPTY is the only valid operand.
      if (ctx.exception) {
        return undefined;
      }
      return internalCreators.keywordOperand(OPERAND_EMPTY, getPositionFromToken(ctx.EMPTY().payload));
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlValue", function (ctx) {
      var stringContext = ctx.jqlString();
      if (stringContext !== undefined) {
        var stringValue = stringContext.accept(_this.stringVisitor);
        return internalCreators.valueOperand(stringValue.value, stringValue.text, stringValue.position);
      }
      var numberContext = ctx.jqlNumber();
      if (numberContext !== undefined) {
        return numberContext.accept(_this.numberVisitor);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlList", function (ctx) {
      var values = ctx.jqlOperand().map(function (operandCtx) {
        return operandCtx.accept(_assertThisInitialized(_this));
      }).filter(notUndefined);
      return internalCreators.listOperand(values, getPositionFromContext(ctx));
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlFunction", function (ctx) {
      var argumentListContext = ctx.jqlArgumentList();
      return internalCreators.functionOperand(ctx.jqlFunctionName().accept(_this.functionNameVisitor), argumentListContext === undefined ? [] : argumentListContext.accept(_this.argumentListVisitor), getPositionFromContext(ctx));
    });
    return _this;
  }
  return _createClass(OperandVisitor);
}(JastBuildingVisitor);
var FunctionNameVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  _inherits(FunctionNameVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(FunctionNameVisitor);
  function FunctionNameVisitor() {
    var _this2;
    _classCallCheck(this, FunctionNameVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "stringVisitor", new StringVisitor(_this2.tokens));
    _defineProperty(_assertThisInitialized(_this2), "visitJqlFunctionName", function (ctx) {
      var stringContext = ctx.jqlString();
      if (stringContext !== undefined) {
        var stringValue = stringContext.accept(_this2.stringVisitor);
        return internalCreators.functionString(stringValue.value, stringValue.text, stringValue.position);
      } else {
        var text = _this2.tokens.getText(ctx);
        return internalCreators.functionString(text, text, getPositionFromContext(ctx));
      }
    });
    return _this2;
  }
  return _createClass(FunctionNameVisitor);
}(JastBuildingVisitor);
var ArgumentListVisitor = /*#__PURE__*/function (_JastBuildingVisitor3) {
  _inherits(ArgumentListVisitor, _JastBuildingVisitor3);
  var _super3 = _createSuper(ArgumentListVisitor);
  function ArgumentListVisitor() {
    var _this3;
    _classCallCheck(this, ArgumentListVisitor);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this3 = _super3.call.apply(_super3, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this3), "argumentVisitor", new ArgumentVisitor(_this3.tokens));
    _defineProperty(_assertThisInitialized(_this3), "visitJqlArgumentList", function (ctx) {
      return ctx.jqlArgument().map(function (argumentCtx) {
        return argumentCtx.accept(_this3.argumentVisitor);
      });
    });
    return _this3;
  }
  return _createClass(ArgumentListVisitor);
}(JastBuildingVisitor);