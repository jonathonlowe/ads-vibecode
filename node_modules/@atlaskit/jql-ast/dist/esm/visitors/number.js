import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { internalCreators } from '../creators';
import { getPositionFromContext, JastBuildingVisitor } from './common';
export var NumberVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(NumberVisitor, _JastBuildingVisitor);
  var _super = _createSuper(NumberVisitor);
  function NumberVisitor() {
    var _this;
    _classCallCheck(this, NumberVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "visitJqlNumber", function (ctx) {
      var text = _this.tokens.getText(ctx);
      return internalCreators.valueOperand(text, text, getPositionFromContext(ctx));
    });
    return _this;
  }
  return _createClass(NumberVisitor);
}(JastBuildingVisitor);