import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { COMPOUND_OPERATOR_AND, COMPOUND_OPERATOR_OR } from '../constants';
import { internalCreators } from '../creators';
import { notUndefined } from '../utils';
import { getPositionFromContext, getPositionFromToken, getPositionsFromTerminalNodes, JastBuildingVisitor } from './common';
import { TerminalClauseVisitor } from './terminal-clause';
export var WhereVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(WhereVisitor, _JastBuildingVisitor);
  var _super = _createSuper(WhereVisitor);
  function WhereVisitor() {
    var _this;
    _classCallCheck(this, WhereVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "terminalClauseVisitor", new TerminalClauseVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "visitJqlWhere", function (ctx) {
      return _this.visitJqlOrClause(ctx.jqlOrClause());
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlOrClause", function (ctx) {
      var clauses = ctx.jqlAndClause().map(function (andClauseContext) {
        return andClauseContext.accept(_assertThisInitialized(_this));
      }).filter(notUndefined);
      if (clauses.length > 1) {
        var operator = internalCreators.compoundOperator(COMPOUND_OPERATOR_OR, getPositionsFromTerminalNodes(ctx.OR()));
        return internalCreators.compoundClause(operator, clauses, getPositionFromContext(ctx));
      }
      return clauses.length === 0 ? undefined : clauses[0];
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlAndClause", function (ctx) {
      var clauses = ctx.jqlNotClause().map(function (notClauseContext) {
        return notClauseContext.accept(_assertThisInitialized(_this));
      }).filter(notUndefined);
      if (clauses.length > 1) {
        var operator = internalCreators.compoundOperator(COMPOUND_OPERATOR_AND, getPositionsFromTerminalNodes(ctx.AND()));
        return internalCreators.compoundClause(operator, clauses, getPositionFromContext(ctx));
      }
      return clauses.length === 0 ? undefined : clauses[0];
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlNotClause", function (ctx) {
      var notClauseContext = ctx.jqlNotClause();
      var subClauseContext = ctx.jqlSubClause();
      var terminalClauseContext = ctx.jqlTerminalClause();
      var clause;
      if (notClauseContext !== undefined) {
        clause = notClauseContext.accept(_assertThisInitialized(_this)) || undefined;
      } else if (subClauseContext !== undefined) {
        clause = subClauseContext.accept(_assertThisInitialized(_this)) || undefined;
      } else if (terminalClauseContext !== undefined) {
        clause = terminalClauseContext.accept(_this.terminalClauseVisitor);
      }

      // Our token can be either NOT or !
      var notToken = ctx.NOT();
      notToken = notToken === undefined ? ctx.BANG() : notToken;
      if (notToken && clause) {
        return internalCreators.notClause(clause, internalCreators.notClauseOperator(getPositionFromToken(notToken.payload)), getPositionFromContext(ctx));
      }
      return clause;
    });
    _defineProperty(_assertThisInitialized(_this), "visitJqlSubClause", function (ctx) {
      return _this.visitJqlOrClause(ctx.jqlOrClause());
    });
    return _this;
  }
  return _createClass(WhereVisitor);
}(JastBuildingVisitor);