import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { getPositionFromContext, JastBuildingVisitor } from './common';
export var StringVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(StringVisitor, _JastBuildingVisitor);
  var _super = _createSuper(StringVisitor);
  function StringVisitor() {
    var _this;
    _classCallCheck(this, StringVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "visitJqlString", function (ctx) {
      var text = _this.tokens.getText(ctx);
      var position = getPositionFromContext(ctx);
      var value;
      if (ctx.QUOTE_STRING()) {
        value = text.replace(/^"|"$/g, '').replace(/(?:\\(.))/g, '$1');
      } else if (ctx.SQUOTE_STRING()) {
        value = text.replace(/^'|'$/g, '').replace(/(?:\\(.))/g, '$1');
      } else {
        // unquoted string
        value = text;
      }
      return {
        text: text,
        value: value,
        position: position
      };
    });
    return _this;
  }
  return _createClass(StringVisitor);
}(JastBuildingVisitor);