import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = _getPrototypeOf(t); if (r) { var s = _getPrototypeOf(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return _possibleConstructorReturn(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { ORDER_BY_DIRECTION_ASC, ORDER_BY_DIRECTION_DESC } from '../constants';
import { internalCreators } from '../creators';
import { notUndefined } from '../utils';
import { getPositionFromContext, getPositionFromToken, JastBuildingVisitor } from './common';
import { FieldVisitor } from './field';
export var OrderByVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  _inherits(OrderByVisitor, _JastBuildingVisitor);
  var _super = _createSuper(OrderByVisitor);
  function OrderByVisitor() {
    var _this;
    _classCallCheck(this, OrderByVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "searchSortVisitor", new SearchSortVisitor(_this.tokens));
    _defineProperty(_assertThisInitialized(_this), "visitJqlOrderBy", function (ctx) {
      // If this rule returned due to an exception then the order by operator is incomplete so we should exit early,
      // e.g. 'order '.
      if (ctx.exception) {
        return undefined;
      }
      var operator = internalCreators.orderByOperator(getPositionFromToken(ctx.ORDER().payload, ctx.BY().payload));
      var fields = ctx.jqlSearchSort().map(function (searchSortCtx) {
        return searchSortCtx.accept(_this.searchSortVisitor);
      }).filter(notUndefined);
      return internalCreators.orderBy(fields, operator, getPositionFromContext(ctx));
    });
    return _this;
  }
  return _createClass(OrderByVisitor);
}(JastBuildingVisitor);
var SearchSortVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  _inherits(SearchSortVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(SearchSortVisitor);
  function SearchSortVisitor() {
    var _this2;
    _classCallCheck(this, SearchSortVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "fieldVisitor", new FieldVisitor(_this2.tokens));
    _defineProperty(_assertThisInitialized(_this2), "visitJqlSearchSort", function (ctx) {
      var fieldCtx = ctx.jqlField();

      // If the field rule is returned due to an exception then we should ignore this search search rule. This happens
      // when there are no fields following and order by clause, e.g. 'order by '
      if (fieldCtx.exception) {
        return undefined;
      }
      var direction;
      var desc = ctx.DESC();
      var asc = ctx.ASC();
      if (desc !== undefined) {
        direction = internalCreators.orderByDirection(ORDER_BY_DIRECTION_DESC, getPositionFromToken(desc.payload));
      } else if (asc !== undefined) {
        direction = internalCreators.orderByDirection(ORDER_BY_DIRECTION_ASC, getPositionFromToken(asc.payload));
      }
      return internalCreators.orderByField(ctx.jqlField().accept(_this2.fieldVisitor), direction, getPositionFromContext(ctx));
    });
    return _this2;
  }
  return _createClass(SearchSortVisitor);
}(JastBuildingVisitor);