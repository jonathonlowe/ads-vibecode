import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { walkAST } from '../api';
import { ASSIGNEE_FIELD, COLLAPSED_CUSTOM_FIELD_PATTERN_NO_QUOTES, COMPOUND_OPERATOR_AND, COMPOUND_OPERATOR_OR, CREATED_FIELD, DUE_DATE_FIELD, ISSUE_TYPE_FIELD, LAST_VIEWED_FIELD, PRIORITY_FIELD, PRIVACY_SAFE_FIELDS, PROJECT_FIELD, REPORTER_FIELD, RESOLUTION_DATE_FIELD, RESOLUTION_FIELD, STATUS_FIELD, SUMMARY_FIELD, TEAM_CUSTOM_FIELD_TYPE, TYPE_FIELD, UPDATED_FIELD } from '../constants';
/**
 * Splits the provided text by new line characters.
 */
export var splitTextByNewLine = function splitTextByNewLine(text) {
  return text.split(/(?:\r\n?|\n)/);
};

/**
 * Finds the field type in the collapsed field syntax. eg. "field[xyz]" -> "[xyz]"
 */
export var collapsedFieldType = function collapsedFieldType(text) {
  var match = COLLAPSED_CUSTOM_FIELD_PATTERN_NO_QUOTES.exec(text.toLowerCase());
  if (match) {
    return "[".concat(match[1], "]");
  }
};

/**
 * Analytics computed for a JQL query.
 */
var JastAnalyticsListener = /*#__PURE__*/_createClass(function JastAnalyticsListener(jast) {
  var _this = this;
  _classCallCheck(this, JastAnalyticsListener);
  // Default attributes
  _defineProperty(this, "attributes", {
    jqlFieldValueCount: {
      issueType: 0,
      project: 0,
      assignee: 0,
      reporter: 0,
      priority: 0,
      status: 0,
      resolution: 0,
      team: 0
    },
    jqlFieldIsUsed: {
      summary: false,
      due: false,
      resolutionDate: false,
      created: false,
      lastviewed: false,
      updated: false,
      team: false
    },
    jqlUsedFields: [],
    jqlUsedFieldsCount: 0,
    jqlUsedFieldsOrderBy: [],
    jqlLineCount: 0,
    jqlErrorCount: 0,
    jqlClauseCount: {
      orderBy: 0,
      leaf: 0,
      and: 0,
      not: 0,
      or: 0
    },
    jqlMaxCompoundClauseDepth: 0
  });
  _defineProperty(this, "usedFields", new Set());
  _defineProperty(this, "usedFieldsOrderBy", new Set());
  _defineProperty(this, "fieldValueCount", 0);
  // The current number of nested compound clauses for an AST node
  _defineProperty(this, "compoundClauseDepth", 0);
  _defineProperty(this, "getFieldName", function (field) {
    return collapsedFieldType(field.value) || field.value.toLowerCase();
  });
  _defineProperty(this, "incrementFieldValueCount", function () {
    _this.fieldValueCount += 1;
  });
  _defineProperty(this, "exitQuery", function () {
    // Track all fields used in the query using the term 'other' for non-privacy safe fields
    var privacySafeFields = new Set();
    _this.usedFields.forEach(function (field) {
      return privacySafeFields.add(PRIVACY_SAFE_FIELDS.includes(field) ? field : 'other');
    });
    _this.attributes.jqlUsedFields = Array.from(privacySafeFields).sort();
    _this.attributes.jqlUsedFieldsCount = _this.usedFields.size;
    _this.attributes.jqlUsedFieldsOrderBy = Array.from(_this.usedFieldsOrderBy);
  });
  _defineProperty(this, "enterCompoundClause", function (compoundClause) {
    if (compoundClause.operator.value === COMPOUND_OPERATOR_AND) {
      _this.attributes.jqlClauseCount.and += 1;
    } else if (compoundClause.operator.value === COMPOUND_OPERATOR_OR) {
      _this.attributes.jqlClauseCount.or += 1;
    }
    _this.compoundClauseDepth += 1;
    if (_this.compoundClauseDepth > _this.attributes.jqlMaxCompoundClauseDepth) {
      _this.attributes.jqlMaxCompoundClauseDepth = _this.compoundClauseDepth;
    }
  });
  _defineProperty(this, "exitCompoundClause", function () {
    _this.compoundClauseDepth -= 1;
  });
  _defineProperty(this, "enterTerminalClause", function (terminalClause) {
    var field = _this.getFieldName(terminalClause.field);
    switch (field) {
      case SUMMARY_FIELD:
        _this.attributes.jqlFieldIsUsed.summary = true;
        break;
      case DUE_DATE_FIELD:
        _this.attributes.jqlFieldIsUsed.due = true;
        break;
      case RESOLUTION_DATE_FIELD:
        _this.attributes.jqlFieldIsUsed.resolutionDate = true;
        break;
      case CREATED_FIELD:
        _this.attributes.jqlFieldIsUsed.created = true;
        break;
      case LAST_VIEWED_FIELD:
        _this.attributes.jqlFieldIsUsed.lastviewed = true;
        break;
      case UPDATED_FIELD:
        _this.attributes.jqlFieldIsUsed.updated = true;
        break;
      case TEAM_CUSTOM_FIELD_TYPE:
        _this.attributes.jqlFieldIsUsed.team = true;
        break;
    }
    _this.attributes.jqlClauseCount.leaf += 1;

    // Track all fields used in the query
    _this.usedFields.add(field);

    // Reset our count of RHS values for the field
    _this.fieldValueCount = 0;
  });
  _defineProperty(this, "exitTerminalClause", function (terminalClause) {
    switch (_this.getFieldName(terminalClause.field)) {
      case ISSUE_TYPE_FIELD:
      case TYPE_FIELD:
        _this.attributes.jqlFieldValueCount.issueType += _this.fieldValueCount;
        break;
      case PROJECT_FIELD:
        _this.attributes.jqlFieldValueCount.project += _this.fieldValueCount;
        break;
      case ASSIGNEE_FIELD:
        _this.attributes.jqlFieldValueCount.assignee += _this.fieldValueCount;
        break;
      case REPORTER_FIELD:
        _this.attributes.jqlFieldValueCount.reporter += _this.fieldValueCount;
        break;
      case PRIORITY_FIELD:
        _this.attributes.jqlFieldValueCount.priority += _this.fieldValueCount;
        break;
      case STATUS_FIELD:
        _this.attributes.jqlFieldValueCount.status += _this.fieldValueCount;
        break;
      case RESOLUTION_FIELD:
        _this.attributes.jqlFieldValueCount.resolution += _this.fieldValueCount;
        break;
      case TEAM_CUSTOM_FIELD_TYPE:
        _this.attributes.jqlFieldValueCount.team += _this.fieldValueCount;
        break;
      default:
        break;
    }
  });
  _defineProperty(this, "enterNotClause", function () {
    _this.attributes.jqlClauseCount.not += 1;
  });
  _defineProperty(this, "enterFunctionOperand", this.incrementFieldValueCount);
  _defineProperty(this, "enterKeywordOperand", this.incrementFieldValueCount);
  _defineProperty(this, "enterValueOperand", this.incrementFieldValueCount);
  _defineProperty(this, "enterOrderByField", function (orderByField) {
    _this.usedFieldsOrderBy.add(_this.getFieldName(orderByField.field));
    _this.attributes.jqlClauseCount.orderBy += 1;
  });
  this.attributes.jqlLineCount = splitTextByNewLine(jast.represents).length;
  this.attributes.jqlErrorCount = jast.errors.length;
});
export var computeJqlInsights = function computeJqlInsights(jast) {
  var listener = new JastAnalyticsListener(jast);
  walkAST(listener, jast);
  return listener.attributes;
};