import { CHANGED_OPERATORS, COMPARISON_OPERATORS, EQUALS_OPERATORS, IN_OPERATORS, IS_OPERATORS, LIKE_OPERATORS, LIST_OPERATORS, OPERATORS, WAS_IN_OPERATORS, WAS_OPERATORS } from '../../constants';
import { type AstNode } from './common';
export type OperatorValue = (typeof OPERATORS)[number];
export type EqualsOperatorValue = (typeof EQUALS_OPERATORS)[number];
export type LikeOperatorValue = (typeof LIKE_OPERATORS)[number];
export type ComparisonOperatorValue = (typeof COMPARISON_OPERATORS)[number];
export type InOperatorValue = (typeof IN_OPERATORS)[number];
export type IsOperatorValue = (typeof IS_OPERATORS)[number];
export type WasOperatorValue = (typeof WAS_OPERATORS)[number];
export type WasInOperatorValue = (typeof WAS_IN_OPERATORS)[number];
export type ChangedOperatorValue = (typeof CHANGED_OPERATORS)[number];
export type ListOperatorValue = (typeof LIST_OPERATORS)[number];
export type Operator = EqualsOperator | LikeOperator | ComparisonOperator | InOperator | IsOperator | WasOperator | WasInOperator | ChangedOperator;
export type EqualsOperator = BaseOperator<EqualsOperatorValue>;
export type LikeOperator = BaseOperator<LikeOperatorValue>;
export type ComparisonOperator = BaseOperator<ComparisonOperatorValue>;
export type InOperator = BaseOperator<InOperatorValue>;
export type IsOperator = BaseOperator<IsOperatorValue>;
export type WasOperator = BaseOperator<WasOperatorValue>;
export type WasInOperator = BaseOperator<WasInOperatorValue>;
export type ChangedOperator = BaseOperator<ChangedOperatorValue>;
export interface BaseOperator<T> extends AstNode {
    /**
     * Literal value for an operator (with formatting preserved).
     */
    text: string;
    /**
     * Enum constant representation of the operator value.
     */
    value: T;
}
export declare const isOperator: (operator: string) => operator is "=" | "!=" | ">" | "<" | ">=" | "<=" | "in" | "not in" | "~" | "!~" | "is" | "is not" | "was" | "was in" | "was not in" | "was not" | "changed";
export declare const isEqualsOperator: (operator: string) => operator is "=" | "!=";
export declare const isLikeOperator: (operator: string) => operator is "~" | "!~";
export declare const isComparisonOperator: (operator: string) => operator is ">" | "<" | ">=" | "<=";
export declare const isInOperator: (operator: string) => operator is "in" | "not in";
export declare const isIsOperator: (operator: string) => operator is "is" | "is not";
export declare const isWasOperator: (operator: string) => operator is "was" | "was not";
export declare const isWasInOperator: (operator: string) => operator is "was in" | "was not in";
export declare const isChangedOperator: (operator: string) => operator is "changed";
export declare const isListOperator: (operator: string) => operator is "in" | "not in" | "was in" | "was not in";
