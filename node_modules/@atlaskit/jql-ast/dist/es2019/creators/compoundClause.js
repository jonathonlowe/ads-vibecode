import { CLAUSE_TYPE_COMPOUND, NODE_TYPE_CLAUSE } from '../constants';
import { appendClause, remove, removeClause, replace, replaceClause } from '../transformers/compoundClause';
import { assignParent } from './common';
function acceptCompoundClause(visitor) {
  return visitor.visitCompoundClause ? visitor.visitCompoundClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterCompoundClause && listener.enterCompoundClause(this);
}
function exitNode(listener) {
  listener.exitCompoundClause && listener.exitCompoundClause(this);
}
function getChildren() {
  return [this.operator, ...this.clauses];
}
export const compoundClause = (operator, clauses) => {
  return compoundClauseInternal(operator, clauses);
};
export const compoundClauseInternal = (operator, clauses, position = null) => {
  const node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_COMPOUND,
    operator,
    clauses,
    position,
    accept: acceptCompoundClause,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    appendClause,
    remove,
    removeClause,
    replace,
    replaceClause
  };
  assignParent(node);
  return node;
};