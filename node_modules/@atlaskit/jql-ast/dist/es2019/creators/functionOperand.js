import { NODE_TYPE_OPERAND, OPERAND_TYPE_FUNCTION } from '../constants';
import { assignParent } from './common';
function acceptFunctionOperand(visitor) {
  return visitor.visitFunctionOperand ? visitor.visitFunctionOperand(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterFunctionOperand && listener.enterFunctionOperand(this);
}
function exitNode(listener) {
  listener.exitFunctionOperand && listener.exitFunctionOperand(this);
}
function getChildren() {
  return [this.function, ...this.arguments];
}
export const functionOperand = (functionString, args = []) => functionOperandInternal(functionString, args);
export const functionOperandInternal = (functionString, args, position = null) => {
  const node = {
    type: NODE_TYPE_OPERAND,
    operandType: OPERAND_TYPE_FUNCTION,
    function: functionString,
    arguments: args,
    position,
    accept: acceptFunctionOperand,
    enterNode,
    exitNode,
    getChildren,
    parent: null
  };
  assignParent(node);
  return node;
};