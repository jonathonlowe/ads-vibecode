import { NODE_TYPE_QUERY } from '../constants';
import { appendClause, prependOrderField, removeClause, removeOrderBy, replaceClause, replaceOrderBy, setOrderDirection } from '../transformers/query';
import { assignParent } from './common';

/**
 * AstNode accept functions. We define them outside of the creator function so the same function reference is returned
 * when a creator is invoked multiple times (which is helpful when testing for equality of AST objects).
 */
function acceptQuery(visitor) {
  return visitor.visitQuery ? visitor.visitQuery(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterQuery && listener.enterQuery(this);
}
function exitNode(listener) {
  listener.exitQuery && listener.exitQuery(this);
}
function getChildren() {
  const children = [];
  if (this.where) {
    children.push(this.where);
  }
  if (this.orderBy) {
    children.push(this.orderBy);
  }
  return children;
}
export const query = (where, orderBy) => queryInternal(where, orderBy);
export const queryInternal = (where, orderBy, position = null) => {
  const node = {
    type: NODE_TYPE_QUERY,
    where,
    orderBy,
    position,
    accept: acceptQuery,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    appendClause,
    prependOrderField,
    setOrderDirection,
    removeClause,
    replaceClause,
    replaceOrderBy,
    removeOrderBy
  };
  assignParent(node);
  return node;
};