import { remove, replace, setOrderDirection } from '../transformers/orderByField';
import { assignParent } from './common';
function acceptOrderByField(visitor) {
  return visitor.visitOrderByField ? visitor.visitOrderByField(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterOrderByField && listener.enterOrderByField(this);
}
function exitNode(listener) {
  listener.exitOrderByField && listener.exitOrderByField(this);
}
function getChildren() {
  const children = [this.field];
  if (this.direction) {
    children.push(this.direction);
  }
  return children;
}
export const orderByField = (field, direction) => orderByFieldInternal(field, direction);
export const orderByFieldInternal = (field, direction, position = null) => {
  const node = {
    field,
    direction,
    position,
    accept: acceptOrderByField,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    setOrderDirection,
    replace,
    remove
  };
  assignParent(node);
  return node;
};