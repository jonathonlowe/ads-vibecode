import { NODE_TYPE_ORDER_BY } from '../constants';
import { prependOrderField, remove, removeOrderField, replace, replaceOrderField, setOrderDirection } from '../transformers/orderBy';
import { assignParent } from './common';
import { orderByOperator } from './orderByOperator';
function acceptOrderBy(visitor) {
  return visitor.visitOrderBy ? visitor.visitOrderBy(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterOrderBy && listener.enterOrderBy(this);
}
function exitNode(listener) {
  listener.exitOrderBy && listener.exitOrderBy(this);
}
function getChildren() {
  return [this.operator, ...this.fields];
}
export const orderBy = fields => {
  return orderByInternal(fields, orderByOperator());
};
export const orderByInternal = (fields, operator, position = null) => {
  const node = {
    type: NODE_TYPE_ORDER_BY,
    operator,
    fields,
    position,
    accept: acceptOrderBy,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    prependOrderField,
    setOrderDirection,
    replace,
    replaceOrderField,
    remove,
    removeOrderField
  };
  assignParent(node);
  return node;
};