import { assignParent } from './common';
function acceptPredicate(visitor) {
  return visitor.visitPredicate ? visitor.visitPredicate(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterPredicate && listener.enterPredicate(this);
}
function exitNode(listener) {
  listener.exitPredicate && listener.exitPredicate(this);
}
function getChildren() {
  const children = [this.operator];
  if (this.operand) {
    children.push(this.operand);
  }
  return children;
}
export const predicate = (operator, operand) => predicateInternal(operator, operand);
export const predicateInternal = (operator, operand, position = null) => {
  const node = {
    operator,
    operand,
    position,
    accept: acceptPredicate,
    enterNode,
    exitNode,
    getChildren,
    parent: null
  };
  assignParent(node);
  return node;
};