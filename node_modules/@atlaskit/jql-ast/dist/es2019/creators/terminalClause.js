import { CLAUSE_TYPE_TERMINAL, NODE_TYPE_CLAUSE } from '../constants';
import { appendOperand, remove, replace, setOperand, setOperator } from '../transformers/terminalClause';
import { assignParent } from './common';
function acceptTerminalClause(visitor) {
  return visitor.visitTerminalClause ? visitor.visitTerminalClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterTerminalClause && listener.enterTerminalClause(this);
}
function exitNode(listener) {
  listener.exitTerminalClause && listener.exitTerminalClause(this);
}
function getChildren() {
  const children = [this.field];
  if (this.operator) {
    children.push(this.operator);
  }
  if (this.operand) {
    children.push(this.operand);
  }
  return children.concat(this.predicates);
}
export const terminalClause = (field, operator, operand, predicates = []) => {
  return terminalClauseInternal(field, operator, operand, predicates);
};
export const terminalClauseInternal = (field, operator, operand, predicates, position = null) => {
  const node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_TERMINAL,
    field,
    operator,
    operand,
    predicates,
    position,
    accept: acceptTerminalClause,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    setOperator,
    setOperand,
    appendOperand,
    remove,
    replace
  };
  assignParent(node);
  return node;
};