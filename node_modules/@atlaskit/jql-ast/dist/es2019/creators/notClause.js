import { CLAUSE_TYPE_NOT, NODE_TYPE_CLAUSE } from '../constants';
import { remove, removeClause, replace, replaceClause } from '../transformers/notClause';
import { assignParent } from './common';
import { notClauseOperator } from './notClauseOperator';
function acceptNotClause(visitor) {
  return visitor.visitNotClause ? visitor.visitNotClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterNotClause && listener.enterNotClause(this);
}
function exitNode(listener) {
  listener.exitNotClause && listener.exitNotClause(this);
}
function getChildren() {
  return [this.operator, this.clause];
}
export const notClause = clause => {
  return notClauseInternal(clause, notClauseOperator());
};
export const notClauseInternal = (clause, operator, position = null) => {
  const node = {
    type: NODE_TYPE_CLAUSE,
    clauseType: CLAUSE_TYPE_NOT,
    clause,
    operator,
    position,
    accept: acceptNotClause,
    enterNode,
    exitNode,
    getChildren,
    parent: null,
    remove,
    removeClause,
    replace,
    replaceClause
  };
  assignParent(node);
  return node;
};