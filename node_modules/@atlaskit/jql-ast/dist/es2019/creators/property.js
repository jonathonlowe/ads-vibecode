import { assignParent } from './common';
function acceptProperty(visitor) {
  return visitor.visitProperty ? visitor.visitProperty(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterProperty && listener.enterProperty(this);
}
function exitNode(listener) {
  listener.exitProperty && listener.exitProperty(this);
}
function getChildren() {
  const children = [];
  if (this.key) {
    children.push(this.key);
  }
  if (this.path) {
    return children.concat(this.path);
  }
  return children;
}
export const property = (key, path = []) => propertyInternal(key, path);
export const propertyInternal = (key, path, position = null) => {
  const node = {
    key,
    path,
    position,
    accept: acceptProperty,
    enterNode,
    exitNode,
    getChildren,
    parent: null
  };
  assignParent(node);
  return node;
};