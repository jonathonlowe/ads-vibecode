const computeFlatWidth = doc => {
  if (typeof doc === 'string') {
    return doc.length;
  }
  if (Array.isArray(doc)) {
    return doc.reduce((result, innerDoc) => result + computeFlatWidth(innerDoc), 0);
  }
  switch (doc.type) {
    case 'group':
      {
        return computeFlatWidth(doc.contents);
      }
    case 'if-break':
      {
        return computeFlatWidth(doc.flatContents);
      }
    case 'new-line':
      {
        // TODO This probably represents a bug as we don't expect new lines in the flat path
        return 0;
      }
    default:
      throw new Error('Unrecognised doc type.');
  }
};
const printDoc = (doc, context) => {
  if (typeof doc === 'string') {
    return {
      result: doc,
      endIndex: context.startIndex + doc.length
    };
  }
  switch (doc.type) {
    case 'group':
      {
        return printGroup(doc, context);
      }
    case 'if-break':
      {
        return printIfBreak(doc, context);
      }
    case 'new-line':
      {
        return printNewLine();
      }
    default:
      throw new Error('Unrecognised doc type.');
  }
};
const printGroup = (doc, context) => {
  const docWidth = context.startIndex + computeFlatWidth(doc);
  const breakContents = context.printWidth !== null && docWidth > context.printWidth;
  return doc.contents.reduce((agg, innerDoc) => {
    const innerContext = {
      ...context,
      startIndex: agg.endIndex,
      breakContents
    };
    const output = printDoc(innerDoc, innerContext);
    return {
      result: agg.result + output.result,
      endIndex: output.endIndex
    };
  }, {
    result: '',
    endIndex: context.startIndex
  });
};
const printIfBreak = (doc, context) => {
  if (context.breakContents) {
    return printDoc(doc.breakContents, context);
  }
  return printDoc(doc.flatContents, context);
};
const printNewLine = () => {
  return {
    result: '\n',
    // Reset our end index as a new line is being output.
    endIndex: 0
  };
};
// TODO Tweak this number with design
const defaultPrintWidth = 100;
export const printDocToString = (doc, options = {}) => {
  const {
    printWidth = defaultPrintWidth
  } = options;
  const output = printDoc(doc, {
    printWidth,
    startIndex: 0,
    breakContents: false
  });
  return output.result;
};