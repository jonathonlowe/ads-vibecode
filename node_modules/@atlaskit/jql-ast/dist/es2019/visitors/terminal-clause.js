import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { internalCreators } from '../creators';
import { notUndefined } from '../utils';
import { getPositionFromContext, JastBuildingVisitor } from './common';
import { FieldVisitor } from './field';
import { OperandVisitor } from './operand';
import { OperatorVisitor } from './operator';
import { PredicateVisitor } from './predicate';
export class TerminalClauseVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "fieldVisitor", new FieldVisitor(this.tokens));
    _defineProperty(this, "terminalClauseRhsVisitor", new TerminalClauseRhsVisitor(this.tokens));
    _defineProperty(this, "visitJqlTerminalClause", ctx => {
      const field = ctx.jqlField().accept(this.fieldVisitor);
      const {
        operator,
        operand,
        predicates
      } = ctx.jqlTerminalClauseRhs().accept(this.terminalClauseRhsVisitor);
      const position = getPositionFromContext(ctx);
      return internalCreators.terminalClause(field, operator, operand, predicates, position);
    });
  }
}
class TerminalClauseRhsVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "operatorVisitor", new OperatorVisitor(this.tokens));
    _defineProperty(this, "terminalClauseOperandVisitor", new TerminalClauseOperandVisitor(this.tokens));
    _defineProperty(this, "predicateVisitor", new PredicateVisitor(this.tokens));
    _defineProperty(this, "visitJqlEqualsClause", ctx => {
      const operator = ctx.jqlEqualsOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      return {
        operator,
        operand,
        predicates: []
      };
    });
    _defineProperty(this, "visitJqlLikeClause", ctx => {
      const operator = ctx.jqlLikeOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      return {
        operator,
        operand,
        predicates: []
      };
    });
    _defineProperty(this, "visitJqlComparisonClause", ctx => {
      const operator = ctx.jqlComparisonOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      return {
        operator,
        operand,
        predicates: []
      };
    });
    _defineProperty(this, "visitJqlInClause", ctx => {
      const operator = ctx.jqlInOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      return {
        operator,
        operand,
        predicates: []
      };
    });
    _defineProperty(this, "visitJqlIsClause", ctx => {
      const operator = ctx.jqlIsOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      return {
        operator,
        operand,
        predicates: []
      };
    });
    _defineProperty(this, "visitJqlWasClause", ctx => {
      const operator = ctx.jqlWasOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      const predicates = ctx.jqlWasPredicate().map(predicate => predicate.accept(this.predicateVisitor)).filter(notUndefined);
      return {
        operator,
        operand,
        predicates
      };
    });
    _defineProperty(this, "visitJqlWasInClause", ctx => {
      const operator = ctx.jqlWasInOperator().accept(this.operatorVisitor);
      const operand = ctx.accept(this.terminalClauseOperandVisitor);
      const predicates = ctx.jqlWasPredicate().map(predicate => predicate.accept(this.predicateVisitor)).filter(notUndefined);
      return {
        operator,
        operand,
        predicates
      };
    });
    _defineProperty(this, "visitJqlChangedClause", ctx => {
      const operator = ctx.jqlChangedOperator().accept(this.operatorVisitor);
      const predicates = ctx.jqlChangedPredicate().map(predicate => predicate.accept(this.predicateVisitor)).filter(notUndefined);
      return {
        operator,
        operand: undefined,
        predicates
      };
    });
    // Recover from clause type ambiguities, e.g. "issuetype was " (which can be a WAS or WAS IN clause)
    _defineProperty(this, "visitChildren", node => {
      const operator = node.accept(this.operatorVisitor);
      return {
        operator,
        operand: undefined,
        predicates: []
      };
    });
  }
}
class TerminalClauseOperandVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "operandVisitor", new OperandVisitor(this.tokens));
    _defineProperty(this, "visitJqlEqualsClause", ctx => {
      return this.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "visitJqlLikeClause", ctx => {
      return this.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "visitJqlComparisonClause", ctx => {
      return this.getOperandForContexts([ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "visitJqlInClause", ctx => {
      return this.getOperandForContexts([ctx.jqlList(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "visitJqlIsClause", ctx => {
      return this.getOperandForContexts([ctx.jqlEmpty()]);
    });
    _defineProperty(this, "visitJqlWasClause", ctx => {
      return this.getOperandForContexts([ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "visitJqlWasInClause", ctx => {
      return this.getOperandForContexts([ctx.jqlList(), ctx.jqlFunction()]);
    });
    _defineProperty(this, "getOperandForContexts", contexts => {
      const operandContext = contexts.find(notUndefined);
      return operandContext === null || operandContext === void 0 ? void 0 : operandContext.accept(this.operandVisitor);
    });
  }
}