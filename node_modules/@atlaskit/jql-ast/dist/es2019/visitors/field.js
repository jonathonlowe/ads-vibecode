import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { internalCreators } from '../creators';
import { ArgumentVisitor } from './argument';
import { getPositionFromContext, JastBuildingVisitor } from './common';
import { StringVisitor } from './string';
export class FieldVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "stringVisitor", new StringVisitor(this.tokens));
    _defineProperty(this, "fieldPropertyVisitor", new FieldPropertyVisitor(this.tokens));
    _defineProperty(this, "visitJqlNumberField", ctx => {
      const text = this.tokens.getText(ctx);
      return internalCreators.field(text, text, undefined, getPositionFromContext(ctx));
    });
    _defineProperty(this, "visitJqlNonNumberField", ctx => {
      const stringContext = ctx.jqlString();
      const properties = ctx.jqlFieldProperty().map(context => context.accept(this.fieldPropertyVisitor));
      if (stringContext !== undefined) {
        const stringValue = stringContext.accept(this.stringVisitor);
        return internalCreators.field(stringValue.value, stringValue.text, properties, getPositionFromContext(ctx));
      }
      const text = this.tokens.getText(ctx);
      return internalCreators.field(text, text, properties, getPositionFromContext(ctx));
    });
  }
}
class FieldPropertyVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "argumentVisitor", new ArgumentVisitor(this.tokens));
    _defineProperty(this, "propertyArgumentVisitor", new PropertyArgumentVisitor(this.tokens));
    _defineProperty(this, "visitJqlFieldProperty", ctx => {
      const argumentContext = ctx.jqlArgument();
      const propertyArgumentContext = ctx.jqlPropertyArgument();
      const path = propertyArgumentContext.map(context => context.accept(this.propertyArgumentVisitor));
      return internalCreators.property(argumentContext && argumentContext.accept(this.argumentVisitor), path, getPositionFromContext(ctx));
    });
  }
}
class PropertyArgumentVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "argumentVisitor", new ArgumentVisitor(this.tokens));
    _defineProperty(this, "visitJqlPropertyArgument", ctx => {
      return ctx.jqlArgument().accept(this.argumentVisitor);
    });
  }
}