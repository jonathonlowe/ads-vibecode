import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { internalCreators } from '../creators';
import { isPredicateOperator } from '../types';
import { notUndefined } from '../utils';
import { getPositionFromContext, JastBuildingVisitor } from './common';
import { OperandVisitor } from './operand';
export class PredicateVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "predicateOperatorVisitor", new PredicateOperatorVisitor(this.tokens));
    _defineProperty(this, "predicateOperandVisitor", new PredicateOperandVisitor(this.tokens));
    _defineProperty(this, "visitJqlWasPredicate", ctx => {
      const operator = this.getOperatorForContexts([ctx.jqlDatePredicateOperator(), ctx.jqlDateRangePredicateOperator(), ctx.jqlUserPredicateOperator()]);
      const operand = ctx.jqlPredicateOperand().accept(this.predicateOperandVisitor);
      const position = getPositionFromContext(ctx);
      return internalCreators.predicate(operator, operand, position);
    });
    _defineProperty(this, "visitJqlChangedPredicate", ctx => {
      const operator = this.getOperatorForContexts([ctx.jqlDatePredicateOperator(), ctx.jqlDateRangePredicateOperator(), ctx.jqlUserPredicateOperator(), ctx.jqlValuePredicateOperator()]);
      const operand = ctx.jqlPredicateOperand().accept(this.predicateOperandVisitor);
      const position = getPositionFromContext(ctx);
      return internalCreators.predicate(operator, operand, position);
    });
    _defineProperty(this, "getOperatorForContexts", contexts => {
      const operatorContext = contexts.find(notUndefined);
      if (operatorContext !== undefined) {
        return operatorContext.accept(this.predicateOperatorVisitor);
      } else {
        throw new Error('Undefined predicate operator context');
      }
    });
  }
}
class PredicateOperatorVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "visitJqlDatePredicateOperator", ctx => {
      return this.getPredicateOperator(ctx);
    });
    _defineProperty(this, "visitJqlDateRangePredicateOperator", ctx => {
      return this.getPredicateOperator(ctx);
    });
    _defineProperty(this, "visitJqlUserPredicateOperator", ctx => {
      return this.getPredicateOperator(ctx);
    });
    _defineProperty(this, "visitJqlValuePredicateOperator", ctx => {
      return this.getPredicateOperator(ctx);
    });
    _defineProperty(this, "getPredicateOperator", ctx => {
      const text = this.tokens.getText(ctx);

      // Replace consecutive whitespace chars with single space
      const value = text.toLowerCase().replace(/\s+/g, ' ');
      if (!isPredicateOperator(value)) {
        throw new Error(`Found a history predicate operator which does not map to a changed time predicate operator in the ast: ${text}`);
      }
      return internalCreators.predicateOperator(value, text, getPositionFromContext(ctx));
    });
  }
}
class PredicateOperandVisitor extends JastBuildingVisitor {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "operandVisitor", new OperandVisitor(this.tokens));
    _defineProperty(this, "visitJqlPredicateOperand", ctx => {
      return ctx.jqlOperand().accept(this.operandVisitor);
    });
  }
}