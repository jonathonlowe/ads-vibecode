export class JastBuildingVisitor {
  constructor(tokens) {
    this.tokens = tokens;
  }
  visit(tree) {
    throw new Error('Unsupported operation visit(ParseTree)');
  }
  visitChildren(node) {
    throw new Error('Unsupported operation visitChildren(RuleNode)');
  }
  visitErrorNode(node) {
    throw new Error('Unsupported operation visitErrorNode(ErrorNode)');
  }
  visitTerminal(node) {
    throw new Error('Unsupported operation visitTerminal(TerminalNode)');
  }
}
export const getPositionFromToken = (startToken, stopToken) => [startToken.startIndex, (stopToken || startToken).stopIndex + 1];
export const getPositionFromContext = ctx => [ctx.start.startIndex, ctx.stop ? ctx.stop.stopIndex + 1 : ctx.start.stopIndex];
export const getPositionsFromTerminalNodes = terminalNodes => terminalNodes.map(node => getPositionFromToken(node.payload));
export const normalizeText = text => text.toLowerCase().replace(/\s+/g, ' ');