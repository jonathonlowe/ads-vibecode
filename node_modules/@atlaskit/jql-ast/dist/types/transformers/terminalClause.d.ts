import { type Clause, type Operand, type Operator, type TerminalClause } from '../types';
/**
 * Set the operator of the current terminal clause.
 *
 * @param operator Operator to update
 */
export declare function setOperator(this: TerminalClause, operator: Operator): void;
/**
 * Set the operand of the current terminal clause.
 *
 * @param operand Operand to update
 */
export declare function setOperand(this: TerminalClause, operand: Operand): void;
/**
 * Append the provided operand to the end of this terminal clause. If the existing operand is a singular value then it
 * will be converted into a list operand and the provided value will be appended.
 *
 * @param operand Operand to append
 */
export declare function appendOperand(this: TerminalClause, operand: Operand): void;
/**
 * Remove the current node from its parent. The parent node is responsible for implementing the logic to remove any
 * references to the child node.
 */
export declare function remove(this: TerminalClause): void;
/**
 * Replace the current node from its parent with the provided node. The parent node is responsible for implementing
 * the logic to replace any references to the child node.
 */
export declare function replace(this: TerminalClause, nextClause: Clause): void;
