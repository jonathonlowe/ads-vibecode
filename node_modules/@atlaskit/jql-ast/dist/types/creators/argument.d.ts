import { type Argument, type Position } from '../types';
/**
 * Creates a Argument AST node from a raw value that hasn't been pre-treated for use in a JQL string (for example,
 * if it can contain reserved characters or whitespaces without being wrapped in quotes).
 *
 * The provided value will be sanitised (quoted and escaped) if necessary before being set to the node's text property.
 *
 * @link argumentByText can be used instead if you are looking to create an Argument node from a text that has
 * already been quoted/escaped, e.g. in situations where your data provider returns terms that are guaranteed to be valid JQL.
 *
 * @param value String to be set as the AST node's value. This value will typically come from some type of user input
 * which may require quoting/escaping to produce a valid JQL string.
 */
export declare const argument: (value: string) => Argument;
/**
 * Creates a Argument AST node from a value that has been pre-treated to produce a valid JQL string.
 *
 * @link argument can be used instead if you are looking to create a Argument node from a text that can potentially
 * contain invalid JQL, e.g. from a user input which may require quoting/escaping due to special characters or whitespaces.
 *
 * @param text String to be set as the AST node's text. This text should be valid JQL as it will be preserved as-is
 * when building the AST node.
 */
export declare const argumentByText: (text: string) => Argument;
export declare const argumentInternal: (value: string, text: string, position?: Position | null) => Argument;
