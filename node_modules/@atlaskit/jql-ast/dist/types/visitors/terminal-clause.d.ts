import { type RuleNode } from 'antlr4ts/tree';
import { type JqlChangedClauseContext, type JqlComparisonClauseContext, type JqlEmptyContext, type JqlEqualsClauseContext, type JqlFunctionContext, type JqlInClauseContext, type JqlIsClauseContext, type JqlLikeClauseContext, type JqlListContext, type JqlTerminalClauseContext, type JqlValueContext, type JqlWasClauseContext, type JqlWasInClauseContext } from '@atlaskit/jql-parser';
import { type Clause, type Operand, type TerminalClauseRhs } from '../types';
import { JastBuildingVisitor } from './common';
import { FieldVisitor } from './field';
import { OperandVisitor } from './operand';
import { OperatorVisitor } from './operator';
import { PredicateVisitor } from './predicate';
type OperandContext = JqlEmptyContext | JqlValueContext | JqlFunctionContext | JqlListContext | void;
export declare class TerminalClauseVisitor extends JastBuildingVisitor<Clause> {
    fieldVisitor: FieldVisitor;
    terminalClauseRhsVisitor: TerminalClauseRhsVisitor;
    visitJqlTerminalClause: (ctx: JqlTerminalClauseContext) => import("../types").TerminalClause;
}
declare class TerminalClauseRhsVisitor extends JastBuildingVisitor<TerminalClauseRhs> {
    operatorVisitor: OperatorVisitor;
    terminalClauseOperandVisitor: TerminalClauseOperandVisitor;
    predicateVisitor: PredicateVisitor;
    visitJqlEqualsClause: (ctx: JqlEqualsClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: never[];
    };
    visitJqlLikeClause: (ctx: JqlLikeClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: never[];
    };
    visitJqlComparisonClause: (ctx: JqlComparisonClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: never[];
    };
    visitJqlInClause: (ctx: JqlInClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: never[];
    };
    visitJqlIsClause: (ctx: JqlIsClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: never[];
    };
    visitJqlWasClause: (ctx: JqlWasClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: import("../types").Predicate[];
    };
    visitJqlWasInClause: (ctx: JqlWasInClauseContext) => {
        operator: void | import("../types").Operator | undefined;
        operand: void | Operand;
        predicates: import("../types").Predicate[];
    };
    visitJqlChangedClause: (ctx: JqlChangedClauseContext) => TerminalClauseRhs;
    visitChildren: (node: RuleNode) => TerminalClauseRhs;
}
declare class TerminalClauseOperandVisitor extends JastBuildingVisitor<Operand | void> {
    operandVisitor: OperandVisitor;
    visitJqlEqualsClause: (ctx: JqlEqualsClauseContext) => Operand | void;
    visitJqlLikeClause: (ctx: JqlLikeClauseContext) => void | Operand;
    visitJqlComparisonClause: (ctx: JqlComparisonClauseContext) => void | Operand;
    visitJqlInClause: (ctx: JqlInClauseContext) => void | Operand;
    visitJqlIsClause: (ctx: JqlIsClauseContext) => void | Operand;
    visitJqlWasClause: (ctx: JqlWasClauseContext) => void | Operand;
    visitJqlWasInClause: (ctx: JqlWasInClauseContext) => void | Operand;
    getOperandForContexts: (contexts: OperandContext[]) => Operand | void;
}
export {};
