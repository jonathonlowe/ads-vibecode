"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueOperandInternal = exports.valueOperandByText = exports.valueOperand = void 0;
var _constants = require("../constants");
var _utils = require("../utils");
var _common = require("./common");
function acceptValueOperand(visitor) {
  return visitor.visitValueOperand ? visitor.visitValueOperand(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterValueOperand && listener.enterValueOperand(this);
}
function exitNode(listener) {
  listener.exitValueOperand && listener.exitValueOperand(this);
}

/**
 * Creates a ValueOperand AST node from a raw value that hasn't been pre-treated for use in a JQL string (for example,
 * if it can contain reserved characters or whitespaces without being wrapped in quotes).
 *
 * The provided value will be sanitised (quoted and escaped) if necessary before being set to the node's text property.
 *
 * @link valueOperandByText can be used instead if you are looking to create a ValueOperand node from a text that has
 * already been quoted/escaped, e.g. in situations where your data provider returns terms that are guaranteed to be valid JQL.
 *
 * @param value String to be set as the AST node's value. This value will typically come from some type of user input
 * which may require quoting/escaping to produce a valid JQL string.
 */
var valueOperand = exports.valueOperand = function valueOperand(value) {
  return valueOperandInternal(value, (0, _utils.sanitiseJqlString)(value));
};

/**
 * Creates a ValueOperand AST node from a value that has been pre-treated to produce a valid JQL string.
 *
 * @link valueOperand can be used instead if you are looking to create a ValueOperand node from a text that can potentially
 * contain invalid JQL, e.g. from a user input which may require quoting/escaping due to special characters or whitespaces.
 *
 * @param text String to be set as the AST node's text. This text should be valid JQL as it will be preserved as-is
 * when building the AST node.
 */
var valueOperandByText = exports.valueOperandByText = function valueOperandByText(text) {
  return valueOperandInternal((0, _utils.normaliseJqlString)(text), text);
};
var valueOperandInternal = exports.valueOperandInternal = function valueOperandInternal(value, text) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return {
    type: _constants.NODE_TYPE_OPERAND,
    operandType: _constants.OPERAND_TYPE_VALUE,
    text: text,
    value: value,
    position: position,
    accept: acceptValueOperand,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: _common.noChildren,
    parent: null
  };
};