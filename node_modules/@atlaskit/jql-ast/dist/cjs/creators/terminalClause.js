"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.terminalClauseInternal = exports.terminalClause = void 0;
var _constants = require("../constants");
var _terminalClause = require("../transformers/terminalClause");
var _common = require("./common");
function acceptTerminalClause(visitor) {
  return visitor.visitTerminalClause ? visitor.visitTerminalClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterTerminalClause && listener.enterTerminalClause(this);
}
function exitNode(listener) {
  listener.exitTerminalClause && listener.exitTerminalClause(this);
}
function getChildren() {
  var children = [this.field];
  if (this.operator) {
    children.push(this.operator);
  }
  if (this.operand) {
    children.push(this.operand);
  }
  return children.concat(this.predicates);
}
var terminalClause = exports.terminalClause = function terminalClause(field, operator, operand) {
  var predicates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  return terminalClauseInternal(field, operator, operand, predicates);
};
var terminalClauseInternal = exports.terminalClauseInternal = function terminalClauseInternal(field, operator, operand, predicates) {
  var position = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var node = {
    type: _constants.NODE_TYPE_CLAUSE,
    clauseType: _constants.CLAUSE_TYPE_TERMINAL,
    field: field,
    operator: operator,
    operand: operand,
    predicates: predicates,
    position: position,
    accept: acceptTerminalClause,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    setOperator: _terminalClause.setOperator,
    setOperand: _terminalClause.setOperand,
    appendOperand: _terminalClause.appendOperand,
    remove: _terminalClause.remove,
    replace: _terminalClause.replace
  };
  (0, _common.assignParent)(node);
  return node;
};