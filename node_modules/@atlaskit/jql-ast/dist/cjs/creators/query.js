"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryInternal = exports.query = void 0;
var _constants = require("../constants");
var _query = require("../transformers/query");
var _common = require("./common");
/**
 * AstNode accept functions. We define them outside of the creator function so the same function reference is returned
 * when a creator is invoked multiple times (which is helpful when testing for equality of AST objects).
 */
function acceptQuery(visitor) {
  return visitor.visitQuery ? visitor.visitQuery(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterQuery && listener.enterQuery(this);
}
function exitNode(listener) {
  listener.exitQuery && listener.exitQuery(this);
}
function getChildren() {
  var children = [];
  if (this.where) {
    children.push(this.where);
  }
  if (this.orderBy) {
    children.push(this.orderBy);
  }
  return children;
}
var query = exports.query = function query(where, orderBy) {
  return queryInternal(where, orderBy);
};
var queryInternal = exports.queryInternal = function queryInternal(where, orderBy) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    type: _constants.NODE_TYPE_QUERY,
    where: where,
    orderBy: orderBy,
    position: position,
    accept: acceptQuery,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    appendClause: _query.appendClause,
    prependOrderField: _query.prependOrderField,
    setOrderDirection: _query.setOrderDirection,
    removeClause: _query.removeClause,
    replaceClause: _query.replaceClause,
    replaceOrderBy: _query.replaceOrderBy,
    removeOrderBy: _query.removeOrderBy
  };
  (0, _common.assignParent)(node);
  return node;
};