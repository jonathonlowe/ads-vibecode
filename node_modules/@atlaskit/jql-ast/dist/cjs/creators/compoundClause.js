"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compoundClauseInternal = exports.compoundClause = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _constants = require("../constants");
var _compoundClause = require("../transformers/compoundClause");
var _common = require("./common");
function acceptCompoundClause(visitor) {
  return visitor.visitCompoundClause ? visitor.visitCompoundClause(this) : visitor.visitChildren(this);
}
function enterNode(listener) {
  listener.enterCompoundClause && listener.enterCompoundClause(this);
}
function exitNode(listener) {
  listener.exitCompoundClause && listener.exitCompoundClause(this);
}
function getChildren() {
  return [this.operator].concat((0, _toConsumableArray2.default)(this.clauses));
}
var compoundClause = exports.compoundClause = function compoundClause(operator, clauses) {
  return compoundClauseInternal(operator, clauses);
};
var compoundClauseInternal = exports.compoundClauseInternal = function compoundClauseInternal(operator, clauses) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var node = {
    type: _constants.NODE_TYPE_CLAUSE,
    clauseType: _constants.CLAUSE_TYPE_COMPOUND,
    operator: operator,
    clauses: clauses,
    position: position,
    accept: acceptCompoundClause,
    enterNode: enterNode,
    exitNode: exitNode,
    getChildren: getChildren,
    parent: null,
    appendClause: _compoundClause.appendClause,
    remove: _compoundClause.remove,
    removeClause: _compoundClause.removeClause,
    replace: _compoundClause.replace,
    replaceClause: _compoundClause.replaceClause
  };
  (0, _common.assignParent)(node);
  return node;
};