"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendOperand = appendOperand;
exports.remove = remove;
exports.replace = replace;
exports.setOperand = setOperand;
exports.setOperator = setOperator;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _constants = require("../constants");
var _creators = _interopRequireDefault(require("../creators"));
var _common = require("../creators/common");
/**
 * Set the operator of the current terminal clause.
 *
 * @param operator Operator to update
 */
function setOperator(operator) {
  this.operator = operator;
  (0, _common.assignParent)(this);
}

/**
 * Set the operand of the current terminal clause.
 *
 * @param operand Operand to update
 */
function setOperand(operand) {
  this.operand = operand;
  (0, _common.assignParent)(this);
}

/**
 * Append the provided operand to the end of this terminal clause. If the existing operand is a singular value then it
 * will be converted into a list operand and the provided value will be appended.
 *
 * @param operand Operand to append
 */
function appendOperand(operand) {
  if (this.operand) {
    if (this.operand.operandType === _constants.OPERAND_TYPE_LIST) {
      this.operand.appendOperand(operand);
    } else {
      this.setOperand(_creators.default.listOperand([this.operand].concat((0, _toConsumableArray2.default)(operand.operandType === _constants.OPERAND_TYPE_LIST ? operand.values : [operand]))));
    }
  } else {
    this.setOperand(operand);
  }
}

/**
 * Remove the current node from its parent. The parent node is responsible for implementing the logic to remove any
 * references to the child node.
 */
function remove() {
  if (this.parent) {
    this.parent.removeClause(this);
  }
}
/**
 * Replace the current node from its parent with the provided node. The parent node is responsible for implementing
 * the logic to replace any references to the child node.
 */
function replace(nextClause) {
  if (this.parent) {
    this.parent.replaceClause(this, nextClause);
  }
}