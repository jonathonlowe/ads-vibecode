"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendClause = appendClause;
exports.prependOrderField = prependOrderField;
exports.removeClause = removeClause;
exports.removeOrderBy = removeOrderBy;
exports.replaceClause = replaceClause;
exports.replaceOrderBy = replaceOrderBy;
exports.setOrderDirection = setOrderDirection;
var _creators = _interopRequireDefault(require("../creators"));
var _common = require("../creators/common");
/**
 * Append the provided clause to the query. If there is no previous `where` clause then it will be set to the provided
 * value, otherwise a compound clause will be formed using the provided compound operator.
 *
 * @param clause Clause to append
 * @param compoundOperatorValue Operator to use when appending to a compound clause
 */
function appendClause(clause, compoundOperatorValue) {
  if (!this.where) {
    this.where = clause;
  } else {
    var nextCompoundOperator = _creators.default.compoundOperator(compoundOperatorValue);
    var nextClause = _creators.default.compoundClause(nextCompoundOperator, []);

    // Append previous and new clause which will flatten compound clauses with matching operators.
    nextClause.appendClause(this.where);
    nextClause.appendClause(clause);
    this.where = nextClause;
  }
  (0, _common.assignParent)(this);
}

/**
 * Prepend the provided order by field to the list of fields in the order by node. If `orderBy` is undefined then a
 * new order by node is set with the provided field.
 *
 * @param orderField Field to add to the beginning of the order by field list
 */
function prependOrderField(orderField) {
  if (!this.orderBy) {
    this.orderBy = _creators.default.orderBy([orderField]);
    (0, _common.assignParent)(this);
  } else {
    this.orderBy.prependOrderField(orderField);
  }
}

/**
 * Set the direction of the primary order by field to the provided value. If there is no primary order by field then
 * this function is a noop.
 *
 * @param orderDirection Direction to set for the order by clause
 */
function setOrderDirection(orderDirection) {
  if (this.orderBy) {
    this.orderBy.setOrderDirection(orderDirection);
  }
}
function removeClause(clause) {
  if (this.where === clause) {
    this.where = undefined;
  }
}

/**
 * Replace orderBy with the provided orderBy node. If the orderBy node does not contain any fields, then the orderBy node
 * is removed from the query.
 *
 * @param orderBy orderBy to set for the new orderBy node
 */
function replaceOrderBy(orderBy) {
  if (orderBy && orderBy.fields.length === 0) {
    this.removeOrderBy();
  } else {
    this.orderBy = orderBy;
    (0, _common.assignParent)(this);
  }
}

/**
 * Replace the matching child clause with the provided `nextClause` node. If the clause to replace is not found as a
 * child of the current node then no changes will be made.
 *
 * @param clause Clause to be replaced
 * @param nextClause Clause to set as the new value
 */
function replaceClause(clause, nextClause) {
  if (this.where === clause) {
    this.where = nextClause;
    (0, _common.assignParent)(this);
  }
}

/**
 * Remove the orderBy from the node.
 */
function removeOrderBy() {
  this.orderBy = undefined;
}