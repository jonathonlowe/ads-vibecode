"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normaliseJqlString = exports.isSingleQuoted = exports.isQuoted = exports.isDoubleQuoted = void 0;
var isSingleQuoted = exports.isSingleQuoted = function isSingleQuoted(maybeQuotedString) {
  if (maybeQuotedString.length < 2) {
    return false;
  }
  return maybeQuotedString[0] === "'" && maybeQuotedString[maybeQuotedString.length - 1] === "'" && maybeQuotedString[maybeQuotedString.length - 2] !== '\\';
};
var isDoubleQuoted = exports.isDoubleQuoted = function isDoubleQuoted(maybeQuotedString) {
  if (maybeQuotedString.length < 2) {
    return false;
  }
  return maybeQuotedString[0] === '"' && maybeQuotedString[maybeQuotedString.length - 1] === '"' && maybeQuotedString[maybeQuotedString.length - 2] !== '\\';
};
var isQuoted = exports.isQuoted = function isQuoted(maybeQuotedString) {
  return isSingleQuoted(maybeQuotedString) || isDoubleQuoted(maybeQuotedString);
};

/**
 * Normalizes a string by removing surrounding quotes and unescaping corresponding escaped quotes
 * @param maybeQuotedString string to remove surrounding quotes from
 * @returns {string} unquoted, unescaped string
 */
var normaliseJqlString = exports.normaliseJqlString = function normaliseJqlString(maybeQuotedString) {
  if (isQuoted(maybeQuotedString)) {
    return maybeQuotedString.slice(1, -1).replace(/(?:\\(.))/g, '$1');
  }
  if (maybeQuotedString.startsWith('"') || maybeQuotedString.startsWith("'")) {
    return maybeQuotedString.slice(1).replace(/(?:\\(.))/g, '$1');
  }
  return maybeQuotedString;
};