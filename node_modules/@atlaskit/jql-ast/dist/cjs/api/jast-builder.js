"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JastBuilder = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _antlr4ts = require("antlr4ts");
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _jqlParser = require("@atlaskit/jql-parser");
var _creators = _interopRequireDefault(require("../creators"));
var _errors = require("../errors");
var _visitors = require("../visitors");
var JastBuilder = exports.JastBuilder = /*#__PURE__*/function () {
  function JastBuilder() {
    (0, _classCallCheck2.default)(this, JastBuilder);
    (0, _defineProperty2.default)(this, "errorListeners", []);
    (0, _defineProperty2.default)(this, "errorHandler", undefined);
    (0, _defineProperty2.default)(this, "getTokens", (0, _memoizeOne.default)(function (value) {
      var chars = _antlr4ts.CharStreams.fromString(value);
      var lexer = new _jqlParser.JQLLexer(chars);
      return new _antlr4ts.CommonTokenStream(lexer);
    }));
    (0, _defineProperty2.default)(this, "getParser", (0, _memoizeOne.default)(function (tokens) {
      return new _jqlParser.JQLParser(tokens);
    }));
  }
  (0, _createClass2.default)(JastBuilder, [{
    key: "setErrorHandler",
    value: function setErrorHandler(errorHandler) {
      this.errorHandler = errorHandler;
      return this;
    }
  }, {
    key: "setErrorListeners",
    value: function setErrorListeners(errorListeners) {
      this.errorListeners = this.errorListeners.concat(errorListeners);
      return this;
    }
  }, {
    key: "build",
    value: function build(value) {
      var tokens = this.getTokens(value);
      var parser = this.getParser(tokens);
      var astErrorListener = new _errors.JastBuilderErrorListener();
      parser.removeErrorListeners();
      parser.addErrorListener(astErrorListener);
      this.errorListeners.forEach(function (errorListener) {
        return parser.addErrorListener(errorListener);
      });
      if (this.errorHandler) {
        parser.errorHandler = this.errorHandler;
        this.errorHandler.reset(parser);
      }
      var visitor = new _visitors.QueryVisitor(tokens);
      try {
        var parseTree = parser.jqlQuery();
        var query = parseTree.accept(visitor);
        return _creators.default.jast(query, value, astErrorListener.errors);
      } catch (error) {
        return _creators.default.jast(undefined, value, [new _errors.JQLParseError(error.message, error)]);
      }
    }
  }]);
  return JastBuilder;
}();