"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JQLParseError = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Represents a error occurring when trying to parse JQL into a Jast.
 */
var JQLParseError = exports.JQLParseError = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(JQLParseError, _Error);
  var _super = _createSuper(JQLParseError);
  /**
   * The original JS error that was thrown trying to parse JQL.
   */

  /**
   * The error message. We use a separate property here so consumers can perform shallow comparison of error objects.
   */

  function JQLParseError(message, cause) {
    var _this;
    (0, _classCallCheck2.default)(this, JQLParseError);
    _this = _super.call(this, message);
    _this.name = 'JQLParseError';
    _this.cause = cause;
    _this.description = message;
    return _this;
  }
  return (0, _createClass2.default)(JQLParseError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));