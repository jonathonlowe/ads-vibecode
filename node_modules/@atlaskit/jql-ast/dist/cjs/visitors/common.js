"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeText = exports.getPositionsFromTerminalNodes = exports.getPositionFromToken = exports.getPositionFromContext = exports.JastBuildingVisitor = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var JastBuildingVisitor = exports.JastBuildingVisitor = /*#__PURE__*/function () {
  function JastBuildingVisitor(tokens) {
    (0, _classCallCheck2.default)(this, JastBuildingVisitor);
    this.tokens = tokens;
  }
  (0, _createClass2.default)(JastBuildingVisitor, [{
    key: "visit",
    value: function visit(tree) {
      throw new Error('Unsupported operation visit(ParseTree)');
    }
  }, {
    key: "visitChildren",
    value: function visitChildren(node) {
      throw new Error('Unsupported operation visitChildren(RuleNode)');
    }
  }, {
    key: "visitErrorNode",
    value: function visitErrorNode(node) {
      throw new Error('Unsupported operation visitErrorNode(ErrorNode)');
    }
  }, {
    key: "visitTerminal",
    value: function visitTerminal(node) {
      throw new Error('Unsupported operation visitTerminal(TerminalNode)');
    }
  }]);
  return JastBuildingVisitor;
}();
var getPositionFromToken = exports.getPositionFromToken = function getPositionFromToken(startToken, stopToken) {
  return [startToken.startIndex, (stopToken || startToken).stopIndex + 1];
};
var getPositionFromContext = exports.getPositionFromContext = function getPositionFromContext(ctx) {
  return [ctx.start.startIndex, ctx.stop ? ctx.stop.stopIndex + 1 : ctx.start.stopIndex];
};
var getPositionsFromTerminalNodes = exports.getPositionsFromTerminalNodes = function getPositionsFromTerminalNodes(terminalNodes) {
  return terminalNodes.map(function (node) {
    return getPositionFromToken(node.payload);
  });
};
var normalizeText = exports.normalizeText = function normalizeText(text) {
  return text.toLowerCase().replace(/\s+/g, ' ');
};