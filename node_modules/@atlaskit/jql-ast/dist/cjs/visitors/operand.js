"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OperandVisitor = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _creators = require("../creators");
var _utils = require("../utils");
var _argument = require("./argument");
var _common = require("./common");
var _number = require("./number");
var _string = require("./string");
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var OperandVisitor = exports.OperandVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  (0, _inherits2.default)(OperandVisitor, _JastBuildingVisitor);
  var _super = _createSuper(OperandVisitor);
  function OperandVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, OperandVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "stringVisitor", new _string.StringVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "numberVisitor", new _number.NumberVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "functionNameVisitor", new FunctionNameVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "argumentListVisitor", new ArgumentListVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlOperand", function (ctx) {
      var operandContext = [ctx.jqlEmpty(), ctx.jqlValue(), ctx.jqlList(), ctx.jqlFunction()].find(_utils.notUndefined);
      return operandContext === null || operandContext === void 0 ? void 0 : operandContext.accept((0, _assertThisInitialized2.default)(_this));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlEmpty", function (ctx) {
      // ANTLR will optimistically create a jqlEmpty node in some situations where user input doesn't match the EMPTY
      // token, e.g. when using value operands in IS clauses ("field is value"), where EMPTY is the only valid operand.
      if (ctx.exception) {
        return undefined;
      }
      return _creators.internalCreators.keywordOperand(_constants.OPERAND_EMPTY, (0, _common.getPositionFromToken)(ctx.EMPTY().payload));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlValue", function (ctx) {
      var stringContext = ctx.jqlString();
      if (stringContext !== undefined) {
        var stringValue = stringContext.accept(_this.stringVisitor);
        return _creators.internalCreators.valueOperand(stringValue.value, stringValue.text, stringValue.position);
      }
      var numberContext = ctx.jqlNumber();
      if (numberContext !== undefined) {
        return numberContext.accept(_this.numberVisitor);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlList", function (ctx) {
      var values = ctx.jqlOperand().map(function (operandCtx) {
        return operandCtx.accept((0, _assertThisInitialized2.default)(_this));
      }).filter(_utils.notUndefined);
      return _creators.internalCreators.listOperand(values, (0, _common.getPositionFromContext)(ctx));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlFunction", function (ctx) {
      var argumentListContext = ctx.jqlArgumentList();
      return _creators.internalCreators.functionOperand(ctx.jqlFunctionName().accept(_this.functionNameVisitor), argumentListContext === undefined ? [] : argumentListContext.accept(_this.argumentListVisitor), (0, _common.getPositionFromContext)(ctx));
    });
    return _this;
  }
  return (0, _createClass2.default)(OperandVisitor);
}(_common.JastBuildingVisitor);
var FunctionNameVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  (0, _inherits2.default)(FunctionNameVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(FunctionNameVisitor);
  function FunctionNameVisitor() {
    var _this2;
    (0, _classCallCheck2.default)(this, FunctionNameVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "stringVisitor", new _string.StringVisitor(_this2.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlFunctionName", function (ctx) {
      var stringContext = ctx.jqlString();
      if (stringContext !== undefined) {
        var stringValue = stringContext.accept(_this2.stringVisitor);
        return _creators.internalCreators.functionString(stringValue.value, stringValue.text, stringValue.position);
      } else {
        var text = _this2.tokens.getText(ctx);
        return _creators.internalCreators.functionString(text, text, (0, _common.getPositionFromContext)(ctx));
      }
    });
    return _this2;
  }
  return (0, _createClass2.default)(FunctionNameVisitor);
}(_common.JastBuildingVisitor);
var ArgumentListVisitor = /*#__PURE__*/function (_JastBuildingVisitor3) {
  (0, _inherits2.default)(ArgumentListVisitor, _JastBuildingVisitor3);
  var _super3 = _createSuper(ArgumentListVisitor);
  function ArgumentListVisitor() {
    var _this3;
    (0, _classCallCheck2.default)(this, ArgumentListVisitor);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this3 = _super3.call.apply(_super3, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "argumentVisitor", new _argument.ArgumentVisitor(_this3.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "visitJqlArgumentList", function (ctx) {
      return ctx.jqlArgument().map(function (argumentCtx) {
        return argumentCtx.accept(_this3.argumentVisitor);
      });
    });
    return _this3;
  }
  return (0, _createClass2.default)(ArgumentListVisitor);
}(_common.JastBuildingVisitor);