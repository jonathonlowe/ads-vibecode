"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PredicateVisitor = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _creators = require("../creators");
var _types = require("../types");
var _utils = require("../utils");
var _common = require("./common");
var _operand = require("./operand");
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var PredicateVisitor = exports.PredicateVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  (0, _inherits2.default)(PredicateVisitor, _JastBuildingVisitor);
  var _super = _createSuper(PredicateVisitor);
  function PredicateVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, PredicateVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "predicateOperatorVisitor", new PredicateOperatorVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "predicateOperandVisitor", new PredicateOperandVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlWasPredicate", function (ctx) {
      var operator = _this.getOperatorForContexts([ctx.jqlDatePredicateOperator(), ctx.jqlDateRangePredicateOperator(), ctx.jqlUserPredicateOperator()]);
      var operand = ctx.jqlPredicateOperand().accept(_this.predicateOperandVisitor);
      var position = (0, _common.getPositionFromContext)(ctx);
      return _creators.internalCreators.predicate(operator, operand, position);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlChangedPredicate", function (ctx) {
      var operator = _this.getOperatorForContexts([ctx.jqlDatePredicateOperator(), ctx.jqlDateRangePredicateOperator(), ctx.jqlUserPredicateOperator(), ctx.jqlValuePredicateOperator()]);
      var operand = ctx.jqlPredicateOperand().accept(_this.predicateOperandVisitor);
      var position = (0, _common.getPositionFromContext)(ctx);
      return _creators.internalCreators.predicate(operator, operand, position);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getOperatorForContexts", function (contexts) {
      var operatorContext = contexts.find(_utils.notUndefined);
      if (operatorContext !== undefined) {
        return operatorContext.accept(_this.predicateOperatorVisitor);
      } else {
        throw new Error('Undefined predicate operator context');
      }
    });
    return _this;
  }
  return (0, _createClass2.default)(PredicateVisitor);
}(_common.JastBuildingVisitor);
var PredicateOperatorVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  (0, _inherits2.default)(PredicateOperatorVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(PredicateOperatorVisitor);
  function PredicateOperatorVisitor() {
    var _this2;
    (0, _classCallCheck2.default)(this, PredicateOperatorVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlDatePredicateOperator", function (ctx) {
      return _this2.getPredicateOperator(ctx);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlDateRangePredicateOperator", function (ctx) {
      return _this2.getPredicateOperator(ctx);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlUserPredicateOperator", function (ctx) {
      return _this2.getPredicateOperator(ctx);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlValuePredicateOperator", function (ctx) {
      return _this2.getPredicateOperator(ctx);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "getPredicateOperator", function (ctx) {
      var text = _this2.tokens.getText(ctx);

      // Replace consecutive whitespace chars with single space
      var value = text.toLowerCase().replace(/\s+/g, ' ');
      if (!(0, _types.isPredicateOperator)(value)) {
        throw new Error("Found a history predicate operator which does not map to a changed time predicate operator in the ast: ".concat(text));
      }
      return _creators.internalCreators.predicateOperator(value, text, (0, _common.getPositionFromContext)(ctx));
    });
    return _this2;
  }
  return (0, _createClass2.default)(PredicateOperatorVisitor);
}(_common.JastBuildingVisitor);
var PredicateOperandVisitor = /*#__PURE__*/function (_JastBuildingVisitor3) {
  (0, _inherits2.default)(PredicateOperandVisitor, _JastBuildingVisitor3);
  var _super3 = _createSuper(PredicateOperandVisitor);
  function PredicateOperandVisitor() {
    var _this3;
    (0, _classCallCheck2.default)(this, PredicateOperandVisitor);
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _this3 = _super3.call.apply(_super3, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "operandVisitor", new _operand.OperandVisitor(_this3.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "visitJqlPredicateOperand", function (ctx) {
      return ctx.jqlOperand().accept(_this3.operandVisitor);
    });
    return _this3;
  }
  return (0, _createClass2.default)(PredicateOperandVisitor);
}(_common.JastBuildingVisitor);