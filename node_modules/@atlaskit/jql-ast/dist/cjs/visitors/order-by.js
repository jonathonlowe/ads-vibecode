"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrderByVisitor = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _creators = require("../creators");
var _utils = require("../utils");
var _common = require("./common");
var _field = require("./field");
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var OrderByVisitor = exports.OrderByVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  (0, _inherits2.default)(OrderByVisitor, _JastBuildingVisitor);
  var _super = _createSuper(OrderByVisitor);
  function OrderByVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, OrderByVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "searchSortVisitor", new SearchSortVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlOrderBy", function (ctx) {
      // If this rule returned due to an exception then the order by operator is incomplete so we should exit early,
      // e.g. 'order '.
      if (ctx.exception) {
        return undefined;
      }
      var operator = _creators.internalCreators.orderByOperator((0, _common.getPositionFromToken)(ctx.ORDER().payload, ctx.BY().payload));
      var fields = ctx.jqlSearchSort().map(function (searchSortCtx) {
        return searchSortCtx.accept(_this.searchSortVisitor);
      }).filter(_utils.notUndefined);
      return _creators.internalCreators.orderBy(fields, operator, (0, _common.getPositionFromContext)(ctx));
    });
    return _this;
  }
  return (0, _createClass2.default)(OrderByVisitor);
}(_common.JastBuildingVisitor);
var SearchSortVisitor = /*#__PURE__*/function (_JastBuildingVisitor2) {
  (0, _inherits2.default)(SearchSortVisitor, _JastBuildingVisitor2);
  var _super2 = _createSuper(SearchSortVisitor);
  function SearchSortVisitor() {
    var _this2;
    (0, _classCallCheck2.default)(this, SearchSortVisitor);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "fieldVisitor", new _field.FieldVisitor(_this2.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "visitJqlSearchSort", function (ctx) {
      var fieldCtx = ctx.jqlField();

      // If the field rule is returned due to an exception then we should ignore this search search rule. This happens
      // when there are no fields following and order by clause, e.g. 'order by '
      if (fieldCtx.exception) {
        return undefined;
      }
      var direction;
      var desc = ctx.DESC();
      var asc = ctx.ASC();
      if (desc !== undefined) {
        direction = _creators.internalCreators.orderByDirection(_constants.ORDER_BY_DIRECTION_DESC, (0, _common.getPositionFromToken)(desc.payload));
      } else if (asc !== undefined) {
        direction = _creators.internalCreators.orderByDirection(_constants.ORDER_BY_DIRECTION_ASC, (0, _common.getPositionFromToken)(asc.payload));
      }
      return _creators.internalCreators.orderByField(ctx.jqlField().accept(_this2.fieldVisitor), direction, (0, _common.getPositionFromContext)(ctx));
    });
    return _this2;
  }
  return (0, _createClass2.default)(SearchSortVisitor);
}(_common.JastBuildingVisitor);