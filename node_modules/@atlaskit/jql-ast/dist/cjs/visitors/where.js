"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WhereVisitor = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _creators = require("../creators");
var _utils = require("../utils");
var _common = require("./common");
var _terminalClause = require("./terminal-clause");
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var WhereVisitor = exports.WhereVisitor = /*#__PURE__*/function (_JastBuildingVisitor) {
  (0, _inherits2.default)(WhereVisitor, _JastBuildingVisitor);
  var _super = _createSuper(WhereVisitor);
  function WhereVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, WhereVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "terminalClauseVisitor", new _terminalClause.TerminalClauseVisitor(_this.tokens));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlWhere", function (ctx) {
      return _this.visitJqlOrClause(ctx.jqlOrClause());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlOrClause", function (ctx) {
      var clauses = ctx.jqlAndClause().map(function (andClauseContext) {
        return andClauseContext.accept((0, _assertThisInitialized2.default)(_this));
      }).filter(_utils.notUndefined);
      if (clauses.length > 1) {
        var operator = _creators.internalCreators.compoundOperator(_constants.COMPOUND_OPERATOR_OR, (0, _common.getPositionsFromTerminalNodes)(ctx.OR()));
        return _creators.internalCreators.compoundClause(operator, clauses, (0, _common.getPositionFromContext)(ctx));
      }
      return clauses.length === 0 ? undefined : clauses[0];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlAndClause", function (ctx) {
      var clauses = ctx.jqlNotClause().map(function (notClauseContext) {
        return notClauseContext.accept((0, _assertThisInitialized2.default)(_this));
      }).filter(_utils.notUndefined);
      if (clauses.length > 1) {
        var operator = _creators.internalCreators.compoundOperator(_constants.COMPOUND_OPERATOR_AND, (0, _common.getPositionsFromTerminalNodes)(ctx.AND()));
        return _creators.internalCreators.compoundClause(operator, clauses, (0, _common.getPositionFromContext)(ctx));
      }
      return clauses.length === 0 ? undefined : clauses[0];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlNotClause", function (ctx) {
      var notClauseContext = ctx.jqlNotClause();
      var subClauseContext = ctx.jqlSubClause();
      var terminalClauseContext = ctx.jqlTerminalClause();
      var clause;
      if (notClauseContext !== undefined) {
        clause = notClauseContext.accept((0, _assertThisInitialized2.default)(_this)) || undefined;
      } else if (subClauseContext !== undefined) {
        clause = subClauseContext.accept((0, _assertThisInitialized2.default)(_this)) || undefined;
      } else if (terminalClauseContext !== undefined) {
        clause = terminalClauseContext.accept(_this.terminalClauseVisitor);
      }

      // Our token can be either NOT or !
      var notToken = ctx.NOT();
      notToken = notToken === undefined ? ctx.BANG() : notToken;
      if (notToken && clause) {
        return _creators.internalCreators.notClause(clause, _creators.internalCreators.notClauseOperator((0, _common.getPositionFromToken)(notToken.payload)), (0, _common.getPositionFromContext)(ctx));
      }
      return clause;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitJqlSubClause", function (ctx) {
      return _this.visitJqlOrClause(ctx.jqlOrClause());
    });
    return _this;
  }
  return (0, _createClass2.default)(WhereVisitor);
}(_common.JastBuildingVisitor);