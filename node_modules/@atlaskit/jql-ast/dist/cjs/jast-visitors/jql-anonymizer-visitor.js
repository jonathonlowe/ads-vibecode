"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JqlAnonymizerVisitor = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _utils = require("../utils");
var _abstractJastVisitor = require("./abstract-jast-visitor");
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ANONYMIZED_FIELD = '"?"';
var ANONYMIZED_VALUE = '"?"';
var CUSTOM_FIELD_PATTERN = /^cf\[\d+]$/i;
var privacySafeFields = new Set(_constants.PRIVACY_SAFE_FIELDS);
var getPrivacySafeFieldName = function getPrivacySafeFieldName(field) {
  // Privacy safe field name (Jira field)
  if (privacySafeFields.has(field.value.toLowerCase())) {
    return field.text;
  }

  // Custom field identifier, e.g. cf[10001]
  if (CUSTOM_FIELD_PATTERN.test(field.value)) {
    return field.text;
  }

  // Collapsed custom field
  var match = field.text.match(_constants.COLLAPSED_CUSTOM_FIELD_PATTERN);
  if (match) {
    return "\"?[".concat(match[1], "]\"");
  }

  // Other field names that can potentially contain UGC
  return ANONYMIZED_FIELD;
};
var JqlAnonymizerVisitor = exports.JqlAnonymizerVisitor = /*#__PURE__*/function (_AbstractJastVisitor) {
  (0, _inherits2.default)(JqlAnonymizerVisitor, _AbstractJastVisitor);
  var _super = _createSuper(JqlAnonymizerVisitor);
  function JqlAnonymizerVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, JqlAnonymizerVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitQuery", function (query) {
      var where = query.where ? query.where.accept((0, _assertThisInitialized2.default)(_this)) : undefined;
      var orderBy = query.orderBy ? query.orderBy.accept((0, _assertThisInitialized2.default)(_this)) : undefined;
      return [where, orderBy].filter(_utils.notUndefined).join(' ');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitField", function (field) {
      var name = getPrivacySafeFieldName(field);
      if (field.properties && field.properties.length) {
        var properties = field.properties.map(function (property) {
          var key = property.key ? property.key.text : '';
          var path = property.path ? property.path.map(function (arg) {
            return arg.text;
          }).join('') : '';
          return "[".concat(key, "]").concat(path);
        }).join('');
        return "".concat(name).concat(properties);
      }
      return name;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitTerminalClause", function (terminalClause) {
      var field = terminalClause.field.accept((0, _assertThisInitialized2.default)(_this));
      var operator = terminalClause.operator ? terminalClause.operator.text : undefined;
      var operand = terminalClause.operand ? terminalClause.operand.accept((0, _assertThisInitialized2.default)(_this)) : undefined;
      var predicates = terminalClause.predicates.map(function (predicate) {
        return predicate.accept((0, _assertThisInitialized2.default)(_this));
      });
      return [field, operator, operand].concat((0, _toConsumableArray2.default)(predicates)).filter(_utils.notUndefined).join(' ');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitCompoundClause", function (compoundClause) {
      var operator = compoundClause.operator.value;
      return compoundClause.clauses.map(function (clause) {
        // Nested compound clauses should be wrapped in parentheses
        return clause.clauseType === _constants.CLAUSE_TYPE_COMPOUND ? "(".concat(clause.accept((0, _assertThisInitialized2.default)(_this)), ")") : clause.accept((0, _assertThisInitialized2.default)(_this));
      }).join(" ".concat(operator, " "));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitNotClause", function (notClause) {
      // Nested compound clauses should be wrapped in parentheses
      var nestedClause = notClause.clause.clauseType === _constants.CLAUSE_TYPE_COMPOUND ? "(".concat(notClause.clause.accept((0, _assertThisInitialized2.default)(_this)), ")") : notClause.clause.accept((0, _assertThisInitialized2.default)(_this));
      return "".concat(notClause.operator.value, " ").concat(nestedClause);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitValueOperand", function () {
      return ANONYMIZED_VALUE;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitListOperand", function (listOperand) {
      return "(".concat(listOperand.values.map(function (value) {
        return value.accept((0, _assertThisInitialized2.default)(_this));
      }).join(', '), ")");
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitFunctionOperand", function (functionOperand) {
      var functionName = functionOperand.function.text;
      var functionArguments = functionOperand.arguments.map(function () {
        return ANONYMIZED_VALUE;
      }).join(', ');
      return "".concat(functionName, "(").concat(functionArguments, ")");
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitKeywordOperand", function (keywordOperand) {
      return keywordOperand.value;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitPredicate", function (predicate) {
      var operator = predicate.operator.text;
      var operand = predicate.operand ? predicate.operand.accept((0, _assertThisInitialized2.default)(_this)) : undefined;
      return [operator, operand].filter(_utils.notUndefined).join(' ');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visitOrderBy", function (orderBy) {
      var orderByFields = orderBy.fields.map(function (orderByField) {
        var field = orderByField.field.accept((0, _assertThisInitialized2.default)(_this));
        var direction = orderByField.direction ? orderByField.direction.value : undefined;
        return [field, direction].filter(_utils.notUndefined).join(' ');
      });
      return "".concat(_constants.ORDER_BY_OPERATOR_ORDER_BY, " ").concat(orderByFields.join(', '));
    });
    return _this;
  }
  (0, _createClass2.default)(JqlAnonymizerVisitor, [{
    key: "defaultResult",
    value: function defaultResult() {
      return '';
    }
  }]);
  return JqlAnonymizerVisitor;
}(_abstractJastVisitor.AbstractJastVisitor);