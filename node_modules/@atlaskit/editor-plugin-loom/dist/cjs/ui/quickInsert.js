"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQuickInsertItem = void 0;
var _react = _interopRequireDefault(require("react"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _messages = require("@atlaskit/editor-common/messages");
var _monitoring = require("@atlaskit/editor-common/monitoring");
var _video = _interopRequireDefault(require("@atlaskit/icon/core/video"));
var _commands = require("../pm-plugins/commands");
var _main = require("../pm-plugins/main");
var getQuickInsertItem = exports.getQuickInsertItem = function getQuickInsertItem(editorAnalyticsAPI) {
  return function (_ref) {
    var formatMessage = _ref.formatMessage;
    return [{
      id: 'loom',
      title: formatMessage(_messages.toolbarInsertBlockMessages.recordVideo),
      description: formatMessage(_messages.toolbarInsertBlockMessages.recordVideoDescription),
      keywords: ['loom', 'record', 'video'],
      priority: 800,
      isDisabledOffline: true,
      icon: function icon() {
        return /*#__PURE__*/_react.default.createElement(_video.default, {
          label: "",
          color: "var(--ds-icon-subtle, #626F86)",
          spacing: "spacious"
        });
      },
      action: function action(insert, editorState) {
        var _recordVideo;
        var tr = insert(undefined);
        var loomState = _main.loomPluginKey.getState(editorState);
        if (!(loomState !== null && loomState !== void 0 && loomState.isEnabled)) {
          var _recordVideoFailed;
          var errorMessage = loomState === null || loomState === void 0 ? void 0 : loomState.error;
          (0, _monitoring.logException)(new Error(errorMessage), {
            location: 'editor-plugin-loom/quick-insert-record-video'
          });
          return (_recordVideoFailed = (0, _commands.recordVideoFailed)({
            inputMethod: _analytics.INPUT_METHOD.QUICK_INSERT,
            error: errorMessage,
            editorAnalyticsAPI: editorAnalyticsAPI
          })({
            tr: tr
          })) !== null && _recordVideoFailed !== void 0 ? _recordVideoFailed : false;
        }
        return (_recordVideo = (0, _commands.recordVideo)({
          inputMethod: _analytics.INPUT_METHOD.QUICK_INSERT,
          editorAnalyticsAPI: editorAnalyticsAPI
        })({
          tr: tr
        })) !== null && _recordVideo !== void 0 ? _recordVideo : false;
      }
    }];
  };
};