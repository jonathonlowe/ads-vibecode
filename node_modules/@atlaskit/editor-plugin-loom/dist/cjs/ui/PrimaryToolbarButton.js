"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loomPrimaryToolbarComponent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _hooks = require("@atlaskit/editor-common/hooks");
var _commands = require("../pm-plugins/commands");
var _ToolbarButtonComponent = _interopRequireDefault(require("./ToolbarButtonComponent"));
var _excluded = ["onClickBeforeInit", "isDisabled", "href"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CustomisableLoomToolbarButton = function CustomisableLoomToolbarButton(disabled, appearance, api) {
  return /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
    var onClickBeforeInit = props.onClickBeforeInit,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      href = props.href,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['loom', 'connectivity']),
      loomState = _useSharedPluginState.loomState,
      connectivityState = _useSharedPluginState.connectivityState;
    var isLoomEnabled = !!(loomState !== null && loomState !== void 0 && loomState.isEnabled);
    var handleOnClick = (0, _react.useCallback)(function (e) {
      if (isLoomEnabled) {
        (0, _commands.executeRecordVideo)(api);
      } else {
        onClickBeforeInit && onClickBeforeInit(e);
      }
    }, [isLoomEnabled, onClickBeforeInit]);
    return (0, _react2.jsx)(_ToolbarButtonComponent.default, (0, _extends2.default)({
      ref: ref,
      hideTooltip: !!(restProps.onMouseEnter || restProps.onMouseLeave)
      // Ignore href if Loom is enabled so that it doesn't interfere with recording
      ,
      href: isLoomEnabled ? undefined : href,
      disabled: disabled || isDisabled || (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
      api: api,
      appearance: appearance,
      onClick: function onClick(e) {
        return handleOnClick(e);
      }
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
    }, restProps));
  });
};
var LoomToolbarButtonWrapper = function LoomToolbarButtonWrapper(_ref) {
  var disabled = _ref.disabled,
    api = _ref.api,
    appearance = _ref.appearance;
  var handleOnClick = (0, _react.useCallback)(function () {
    return (0, _commands.executeRecordVideo)(api);
  }, [api]);
  var _useSharedPluginState2 = (0, _hooks.useSharedPluginState)(api, ['loom', 'connectivity']),
    loomState = _useSharedPluginState2.loomState,
    connectivityState = _useSharedPluginState2.connectivityState;
  if (!loomState) {
    return null;
  }
  return (0, _react2.jsx)(_ToolbarButtonComponent.default
  // Disable the icon while the SDK isn't initialised
  , {
    disabled: disabled || !(loomState !== null && loomState !== void 0 && loomState.isEnabled) || (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
    api: api,
    appearance: appearance,
    onClick: handleOnClick
  });
};
var loomPrimaryToolbarComponent = exports.loomPrimaryToolbarComponent = function loomPrimaryToolbarComponent(config, api) {
  return function (_ref2) {
    var disabled = _ref2.disabled,
      appearance = _ref2.appearance;
    if (config.shouldShowToolbarButton === false) {
      return null;
    }
    if (config.renderButton) {
      return config.renderButton(CustomisableLoomToolbarButton(disabled, appearance, api));
    }
    if (config.shouldShowToolbarButton) {
      return (0, _react2.jsx)(LoomToolbarButtonWrapper
      // Disable the icon while the SDK isn't initialised
      , {
        disabled: disabled,
        api: api,
        appearance: appearance
      });
    }
    return null;
  };
};