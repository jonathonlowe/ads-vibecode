// TODO: ED-26959 - removed to support TypeScript bundler mode
// import type { SDKUnsupportedReasons } from '@loomhq/record-sdk';

import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
// copied from @loomhq/record-sdk
// TODO: ED-26959 - remove once @loomhq/record-sdk get updated to support "package exports"
var SDKUnsupportedReasons = /*#__PURE__*/function (SDKUnsupportedReasons) {
  SDKUnsupportedReasons["IncompatibleBrowser"] = "incompatible-browser";
  SDKUnsupportedReasons["ThirdPartyCookiesDisabled"] = "third-party-cookies-disabled";
  SDKUnsupportedReasons["NoMediaStreamsSupport"] = "no-media-streams-support";
  return SDKUnsupportedReasons;
}(SDKUnsupportedReasons || {});
import { setupLoom } from './commands';
export let LoomPluginAction = /*#__PURE__*/function (LoomPluginAction) {
  LoomPluginAction[LoomPluginAction["ENABLE"] = 0] = "ENABLE";
  LoomPluginAction[LoomPluginAction["DISABLE"] = 1] = "DISABLE";
  LoomPluginAction[LoomPluginAction["RECORD_VIDEO"] = 2] = "RECORD_VIDEO";
  LoomPluginAction[LoomPluginAction["INSERT_VIDEO"] = 3] = "INSERT_VIDEO";
  return LoomPluginAction;
}({});
export const loomPluginKey = new PluginKey('loom');
export const createPlugin = ({
  config,
  api
}) => {
  return new SafePlugin({
    key: loomPluginKey,
    state: {
      init: () => ({
        isEnabled: false,
        loomButton: null,
        isRecordingVideo: false,
        error: undefined
      }),
      apply: (tr, pluginState) => {
        var _tr$getMeta, _pluginState$loomButt;
        const action = (_tr$getMeta = tr.getMeta(loomPluginKey)) === null || _tr$getMeta === void 0 ? void 0 : _tr$getMeta.type;
        switch (action) {
          case LoomPluginAction.ENABLE:
            const {
              loomButton
            } = tr.getMeta(loomPluginKey);
            return {
              ...pluginState,
              isEnabled: true,
              loomButton
            };
          case LoomPluginAction.DISABLE:
            const {
              error
            } = tr.getMeta(loomPluginKey);
            return {
              ...pluginState,
              isEnabled: false,
              loomButton: null,
              error
            };
          case LoomPluginAction.RECORD_VIDEO:
            // Click the unmounted button in state that has the Loom SDK attached
            pluginState === null || pluginState === void 0 ? void 0 : (_pluginState$loomButt = pluginState.loomButton) === null || _pluginState$loomButt === void 0 ? void 0 : _pluginState$loomButt.click();
            return {
              ...pluginState,
              isRecordingVideo: true
            };
          case LoomPluginAction.INSERT_VIDEO:
            return {
              ...pluginState,
              isRecordingVideo: false
            };
          default:
            return pluginState;
        }
      }
    },
    view(editorView) {
      if (config.loomProvider) {
        setupLoom(config.loomProvider, api, editorView);
      }
      return {};
    }
  });
};