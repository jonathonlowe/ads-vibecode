import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { executeRecordVideo } from '../pm-plugins/commands';
import ToolbarButtonComponent from './ToolbarButtonComponent';
const CustomisableLoomToolbarButton = (disabled, appearance, api) => /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    onClickBeforeInit,
    isDisabled = false,
    href,
    ...restProps
  } = props;
  const {
    loomState,
    connectivityState
  } = useSharedPluginState(api, ['loom', 'connectivity']);
  const isLoomEnabled = !!(loomState !== null && loomState !== void 0 && loomState.isEnabled);
  const handleOnClick = useCallback(e => {
    if (isLoomEnabled) {
      executeRecordVideo(api);
    } else {
      onClickBeforeInit && onClickBeforeInit(e);
    }
  }, [isLoomEnabled, onClickBeforeInit]);
  return jsx(ToolbarButtonComponent, _extends({
    ref: ref,
    hideTooltip: !!(restProps.onMouseEnter || restProps.onMouseLeave)
    // Ignore href if Loom is enabled so that it doesn't interfere with recording
    ,
    href: isLoomEnabled ? undefined : href,
    disabled: disabled || isDisabled || (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
    api: api,
    appearance: appearance,
    onClick: e => handleOnClick(e)
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, restProps));
});
const LoomToolbarButtonWrapper = ({
  disabled,
  api,
  appearance
}) => {
  const handleOnClick = useCallback(() => executeRecordVideo(api), [api]);
  const {
    loomState,
    connectivityState
  } = useSharedPluginState(api, ['loom', 'connectivity']);
  if (!loomState) {
    return null;
  }
  return jsx(ToolbarButtonComponent
  // Disable the icon while the SDK isn't initialised
  , {
    disabled: disabled || !(loomState !== null && loomState !== void 0 && loomState.isEnabled) || (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
    api: api,
    appearance: appearance,
    onClick: handleOnClick
  });
};
export const loomPrimaryToolbarComponent = (config, api) => ({
  disabled,
  appearance
}) => {
  if (config.shouldShowToolbarButton === false) {
    return null;
  }
  if (config.renderButton) {
    return config.renderButton(CustomisableLoomToolbarButton(disabled, appearance, api));
  }
  if (config.shouldShowToolbarButton) {
    return jsx(LoomToolbarButtonWrapper
    // Disable the icon while the SDK isn't initialised
    , {
      disabled: disabled,
      api: api,
      appearance: appearance
    });
  }
  return null;
};