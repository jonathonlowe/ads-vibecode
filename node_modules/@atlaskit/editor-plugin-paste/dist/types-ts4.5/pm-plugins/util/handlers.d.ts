import type { EditorAnalyticsAPI, InputMethodInsertMedia } from '@atlaskit/editor-common/analytics';
import type { CardOptions, QueueCardsFromTransactionAction } from '@atlaskit/editor-common/card';
import type { ExtensionAutoConvertHandler } from '@atlaskit/editor-common/extensions';
import type { Command } from '@atlaskit/editor-common/types';
import type { RunMacroAutoConvert } from '@atlaskit/editor-plugin-extension';
import type { FindRootParentListNode } from '@atlaskit/editor-plugin-list';
import type { InsertMediaAsMediaSingle } from '@atlaskit/editor-plugin-media/types';
import { Slice } from '@atlaskit/editor-prosemirror/model';
import type { Schema } from '@atlaskit/editor-prosemirror/model';
import type { EditorState, Selection } from '@atlaskit/editor-prosemirror/state';
export declare function handleMention(slice: Slice, schema: Schema): Slice;
export declare function handlePasteIntoTaskOrDecisionOrPanel(slice: Slice, queueCardsFromChangedTr: QueueCardsFromTransactionAction | undefined): Command;
export declare function handlePasteNonNestableBlockNodesIntoList(slice: Slice): Command;
export declare const doesSelectionWhichStartsOrEndsInListContainEntireList: (selection: Selection, findRootParentListNode: FindRootParentListNode | undefined) => boolean;
export declare function handlePastePanelOrDecisionContentIntoList(slice: Slice, findRootParentListNode: FindRootParentListNode | undefined): Command;
export declare function handlePasteLinkOnSelectedText(slice: Slice): Command;
export declare function handlePasteAsPlainText(slice: Slice, _event: ClipboardEvent, editorAnalyticsAPI: EditorAnalyticsAPI | undefined): Command;
export declare function handlePastePreservingMarks(slice: Slice, queueCardsFromChangedTr: QueueCardsFromTransactionAction | undefined): Command;
export declare function handleMacroAutoConvert(text: string, slice: Slice, queueCardsFromChangedTr: QueueCardsFromTransactionAction | undefined, runMacroAutoConvert: RunMacroAutoConvert | undefined, cardsOptions?: CardOptions, extensionAutoConverter?: ExtensionAutoConvertHandler): Command;
export declare function handleCodeBlock(text: string): Command;
export declare function handleMediaSingle(inputMethod: InputMethodInsertMedia, insertMediaAsMediaSingle: InsertMediaAsMediaSingle | undefined): (slice: Slice) => Command;
export declare function handleTableContentPasteInBodiedExtension(slice: Slice): Command;
export declare function handleNestedTablePaste(slice: Slice, isNestingTablesSupported?: boolean): Command;
export declare function handleExpandPaste(slice: Slice): Command;
export declare function handleMarkdown(markdownSlice: Slice, queueCardsFromChangedTr: QueueCardsFromTransactionAction | undefined, from?: number, to?: number): Command;
export declare function handleParagraphBlockMarks(state: EditorState, slice: Slice): Slice;
/**
 * ED-6300: When a nested list is pasted in a table cell and the slice has openStart > openEnd,
 * it splits the table. As a workaround, we flatten the list to even openStart and openEnd.
 *
 * Note: this only happens if the first child is a list
 *
 * Example: copying "one" and "two"
 * - zero
 *   - one
 * - two
 *
 * Before:
 * ul
 *   ┗━ li
 *     ┗━ ul
 *       ┗━ li
 *         ┗━ p -> "one"
 *   ┗━ li
 *     ┗━ p -> "two"
 *
 * After:
 * ul
 *   ┗━ li
 *     ┗━ p -> "one"
 *   ┗━ li
 *     ┗━p -> "two"
 */
export declare function flattenNestedListInSlice(slice: Slice): Slice;
export declare function handleRichText(slice: Slice, queueCardsFromChangedTr: QueueCardsFromTransactionAction | undefined): Command;
export declare function handlePasteIntoCaption(slice: Slice): Command;
export declare const handleSelectedTable: (editorAnalyticsAPI: EditorAnalyticsAPI | undefined) => (slice: Slice) => Command;
export declare function checkTaskListInList(state: EditorState, slice: Slice): boolean;
export declare function checkIfSelectionInNestedList(state: EditorState): boolean;
