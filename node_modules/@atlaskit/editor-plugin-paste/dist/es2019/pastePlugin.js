import { createPlugin } from './pm-plugins/main';
import { createPlugin as createMoveAnalyticsPlugin } from './pm-plugins/move-analytics/plugin';
import { pluginKey } from './pm-plugins/plugin-factory';
export const pastePlugin = ({
  config,
  api
}) => {
  var _api$featureFlags, _api$analytics;
  const {
    cardOptions,
    sanitizePrivateContent,
    isFullPage
  } = config !== null && config !== void 0 ? config : {};
  const featureFlags = (api === null || api === void 0 ? void 0 : (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState()) || {};
  const editorAnalyticsAPI = api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  return {
    name: 'paste',
    pmPlugins() {
      return [{
        name: 'paste',
        plugin: ({
          schema,
          providerFactory,
          dispatchAnalyticsEvent,
          dispatch
        }) => createPlugin(schema, dispatchAnalyticsEvent, dispatch, featureFlags, api, cardOptions, sanitizePrivateContent, providerFactory)
      }, {
        name: 'moveAnalyticsPlugin',
        plugin: ({
          dispatch
        }) => {
          return isFullPage ? createMoveAnalyticsPlugin(dispatch, editorAnalyticsAPI) : undefined;
        }
      }];
    },
    getSharedState: editorState => {
      if (!editorState) {
        return {
          lastContentPasted: null
        };
      }
      const pluginState = pluginKey.getState(editorState);
      return {
        lastContentPasted: pluginState.lastContentPasted
      };
    }
  };
};