"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pluginKey = exports.getPluginState = exports.createPluginState = exports.createCommand = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _utils = require("@atlaskit/editor-common/utils");
var _state = require("@atlaskit/editor-prosemirror/state");
var _reducer = require("./reducer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var pluginKey = exports.pluginKey = new _state.PluginKey('pastePlugin');
var _pluginFactory = (0, _utils.pluginFactory)(pluginKey, _reducer.reducer, {
    mapping: function mapping(tr, pluginState) {
      if (tr.docChanged) {
        var atLeastOnePositionChanged = false;
        var positionsMappedThroughChanges = Object.entries(pluginState.pastedMacroPositions).reduce(function (acc, _ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            key = _ref2[0],
            position = _ref2[1];
          var mappedPosition = tr.mapping.map(position);
          if (position !== mappedPosition) {
            atLeastOnePositionChanged = true;
          }
          acc[key] = tr.mapping.map(position);
          return acc;
        }, {});
        if (atLeastOnePositionChanged) {
          return _objectSpread(_objectSpread({}, pluginState), {}, {
            pastedMacroPositions: positionsMappedThroughChanges
          });
        }
      }
      return pluginState;
    }
  }),
  createPluginState = exports.createPluginState = _pluginFactory.createPluginState,
  createCommand = exports.createCommand = _pluginFactory.createCommand,
  getPluginState = exports.getPluginState = _pluginFactory.getPluginState;