import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { reducer } from './reducer';
export var pluginKey = new PluginKey('pastePlugin');
var _pluginFactory = pluginFactory(pluginKey, reducer, {
    mapping: function mapping(tr, pluginState) {
      if (tr.docChanged) {
        var atLeastOnePositionChanged = false;
        var positionsMappedThroughChanges = Object.entries(pluginState.pastedMacroPositions).reduce(function (acc, _ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            position = _ref2[1];
          var mappedPosition = tr.mapping.map(position);
          if (position !== mappedPosition) {
            atLeastOnePositionChanged = true;
          }
          acc[key] = tr.mapping.map(position);
          return acc;
        }, {});
        if (atLeastOnePositionChanged) {
          return _objectSpread(_objectSpread({}, pluginState), {}, {
            pastedMacroPositions: positionsMappedThroughChanges
          });
        }
      }
      return pluginState;
    }
  }),
  createPluginState = _pluginFactory.createPluginState,
  createCommand = _pluginFactory.createCommand,
  getPluginState = _pluginFactory.getPluginState;
export { createPluginState, createCommand, getPluginState };