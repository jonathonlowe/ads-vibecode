import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { PastePluginActionTypes as ActionTypes } from '../editor-actions/actions';
export var reducer = function reducer(state, action) {
  switch (action.type) {
    case ActionTypes.START_TRACKING_PASTED_MACRO_POSITIONS:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          pastedMacroPositions: _objectSpread(_objectSpread({}, state.pastedMacroPositions), action.pastedMacroPositions)
        });
      }
    case ActionTypes.STOP_TRACKING_PASTED_MACRO_POSITIONS:
      {
        var filteredMacroPositions = Object.fromEntries(Object.entries(state.pastedMacroPositions).filter(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
            key = _ref2[0];
          return !action.pastedMacroPositionKeys.includes(key);
        }));
        return _objectSpread(_objectSpread({}, state), {}, {
          pastedMacroPositions: filteredMacroPositions
        });
      }
    case ActionTypes.ON_PASTE:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          lastContentPasted: action.contentPasted
        });
      }
    default:
      return state;
  }
};