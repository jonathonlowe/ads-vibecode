import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { MoveAnalyticPluginTypes } from './actions';
import { createCommand, getPluginState } from './plugin-factory';
import { pluginKey } from './plugin-key';
export var updateContentMoved = function updateContentMoved(nextState, nextAction) {
  return createCommand(function (state) {
    var _getPluginState = getPluginState(state),
      contentMoved = _getPluginState.contentMoved;
    var data = {
      currentActions: [].concat(_toConsumableArray(contentMoved.currentActions), [nextAction]),
      size: (nextState === null || nextState === void 0 ? void 0 : nextState.size) || contentMoved.size,
      nodeName: nextState === null || nextState === void 0 ? void 0 : nextState.nodeName,
      nodeDepth: nextState === null || nextState === void 0 ? void 0 : nextState.nodeDepth,
      nodeTypes: nextState === null || nextState === void 0 ? void 0 : nextState.nodeTypes,
      hasSelectedMultipleNodes: nextState === null || nextState === void 0 ? void 0 : nextState.hasSelectedMultipleNodes
    };
    return {
      type: MoveAnalyticPluginTypes.UpdateMovedAction,
      data: data
    };
  }, function (tr) {
    return tr.setMeta('addToHistory', false);
  });
};
export var resetContentMoved = function resetContentMoved() {
  return createCommand(function () {
    return {
      type: MoveAnalyticPluginTypes.RemoveMovedAction
    };
  }, function (tr) {
    return tr.setMeta('addToHistory', false);
  });
};
export var resetContentMovedTransform = function resetContentMovedTransform() {
  return function (tr) {
    var payload = {
      type: MoveAnalyticPluginTypes.RemoveMovedAction
    };
    return tr.setMeta(pluginKey, payload);
  };
};