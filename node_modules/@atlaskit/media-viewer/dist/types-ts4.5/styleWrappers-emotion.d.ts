/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { jsx } from '@emotion/react';
import { type CSSProperties, type MouseEvent, type ReactNode } from 'react';
import { type MediaType } from '@atlaskit/media-client';
export interface IconWrapperProps {
    type: MediaType;
}
type Children = {
    children: ReactNode;
};
type ClassName = {
    className: string;
};
type DataTestID = {
    'data-testid'?: string | undefined;
};
type BlanketProps = DataTestID & Children & ClassName;
export declare const Blanket: ({ "data-testid": datatestId, className, children }: BlanketProps) => jsx.JSX.Element;
type HeaderWrapperProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const HeaderWrapper: {
    ({ className, children, isArchiveSideBarVisible, }: ClassName & Children & HeaderWrapperProps): jsx.JSX.Element;
    displayName: string;
};
export declare const ListWrapper: {
    ({ children }: Children): jsx.JSX.Element;
    displayName: string;
};
export declare const ArrowsWrapper: ({ children }: Children) => jsx.JSX.Element;
export declare const CloseButtonWrapper: ({ className, children }: ClassName & Children) => jsx.JSX.Element;
type ContentWrapperProps = {
    isSidebarVisible: boolean | undefined;
} & Children;
export declare const ContentWrapper: ({ isSidebarVisible, children }: ContentWrapperProps) => jsx.JSX.Element;
export declare const ZoomWrapper: ({ className, children }: ClassName & Children) => jsx.JSX.Element;
export declare const ZoomCenterControls: ({ children }: Children) => jsx.JSX.Element;
export declare const ZoomRightControls: ({ children }: Children) => jsx.JSX.Element;
export declare const ZoomLevelIndicator: ({ children }: Children) => jsx.JSX.Element;
export declare const HDIconGroupWrapper: ({ className, children }: ClassName & Children) => jsx.JSX.Element;
type ErrorMessageWrapperProps = DataTestID & Children;
export declare const ErrorMessageWrapper: ({ "data-testid": datatestId, children, }: ErrorMessageWrapperProps) => jsx.JSX.Element;
type ErrorImageProps = {
    alt: string | undefined;
    src: string;
};
export declare const ErrorImage: ({ src, alt }: ErrorImageProps) => jsx.JSX.Element;
type VideoProps = {
    controls: boolean;
    src: string;
    autoPlay: boolean;
};
export declare const Video: ({ autoPlay, controls, src }: VideoProps) => jsx.JSX.Element;
export declare const PDFWrapper: import("react").ForwardRefExoticComponent<DataTestID & Children & import("react").RefAttributes<HTMLDivElement>>;
export declare const Arrow: ({ className, children }: ClassName & Children) => jsx.JSX.Element;
export type LeftWrapperProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const LeftWrapper: ({ children, isArchiveSideBarVisible }: Children & LeftWrapperProps) => jsx.JSX.Element;
export declare const RightWrapper: ({ children }: Children) => jsx.JSX.Element;
export type HeaderProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const Header: ({ children, isArchiveSideBarVisible, className, }: Children & HeaderProps & ClassName) => jsx.JSX.Element;
export declare const LeftHeader: ({ children }: Children) => jsx.JSX.Element;
export type ImageWrapperProps = {
    onClick: (event: MouseEvent<HTMLDivElement>) => void;
    style: CSSProperties;
} & Children & DataTestID;
export declare const ImageWrapper: import("react").ForwardRefExoticComponent<{
    onClick: (event: MouseEvent<HTMLDivElement>) => void;
    style: CSSProperties;
} & Children & DataTestID & ClassName & import("react").RefAttributes<unknown>>;
export declare const BaselineExtend: () => jsx.JSX.Element;
export type ImgProps = {
    canDrag: boolean;
    isDragging: boolean;
    shouldPixelate: boolean;
    src: string;
    style: CSSProperties;
    onLoad: (ev: React.SyntheticEvent<HTMLImageElement>) => void;
    onMouseDown: (ev: MouseEvent<{}>) => void;
    onError: (() => void) | undefined;
} & DataTestID & ClassName;
export declare const Img: ({ canDrag, isDragging, shouldPixelate, "data-testid": datatestId, src, style, onLoad, onError, onMouseDown, className, }: ImgProps) => jsx.JSX.Element;
export declare const MedatadataTextWrapper: ({ children }: Children) => jsx.JSX.Element;
export declare const MetadataWrapper: ({ children }: Children) => jsx.JSX.Element;
type MetadataFileNameProps = DataTestID & Children;
export declare const MetadataFileName: ({ "data-testid": datatestId, children, }: MetadataFileNameProps) => jsx.JSX.Element;
type MetadataSubTextProps = DataTestID & Children;
export declare const MetadataSubText: ({ "data-testid": datatestId, children }: MetadataSubTextProps) => jsx.JSX.Element;
export declare const MetadataIconWrapper: ({ children }: Children) => jsx.JSX.Element;
export interface IconWrapperProps {
    type: MediaType;
}
export declare const RightHeader: ({ children }: Children) => jsx.JSX.Element;
export declare const CustomAudioPlayerWrapper: ({ children }: Children) => jsx.JSX.Element;
type AudioPlayerProps = DataTestID & Children;
export declare const AudioPlayer: {
    ({ "data-testid": datatestId, children }: AudioPlayerProps): jsx.JSX.Element;
    displayName: string;
};
type AudioProps = {
    autoPlay: boolean;
    controls: boolean;
    src: string | undefined;
    preload: string;
};
export declare const Audio: import("react").ForwardRefExoticComponent<AudioProps & import("react").RefAttributes<HTMLAudioElement>>;
type AudioCoverProps = {
    alt: string | undefined;
    src: string;
};
export declare const AudioCover: ({ src, alt }: AudioCoverProps) => jsx.JSX.Element;
export declare const DefaultCoverWrapper: ({ children }: Children) => jsx.JSX.Element;
export declare const DownloadButtonWrapper: ({ children }: Children) => jsx.JSX.Element;
type CustomVideoPlayerWrapperProps = DataTestID & Children;
export declare const CustomVideoPlayerWrapper: ({ "data-testid": datatestId, children, }: CustomVideoPlayerWrapperProps) => jsx.JSX.Element;
type SidebarWrapperProps = DataTestID & Children;
export declare const SidebarWrapper: ({ "data-testid": datatestId, children }: SidebarWrapperProps) => jsx.JSX.Element;
export declare const SpinnerWrapper: ({ children }: Children) => jsx.JSX.Element;
export declare const FormattedMessageWrapper: ({ children }: Children) => jsx.JSX.Element;
export {};
