import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["analyticspayload", "onClick", "tooltip"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import DownloadIcon from '@atlaskit/icon/core/migration/download';
import { isErrorFileState, isExternalImageIdentifier } from '@atlaskit/media-client';
import { MediaButton, messages } from '@atlaskit/media-ui';
import React, { useCallback, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { createDownloadButtonClickedEvent } from './analytics/events/ui/downloadButtonClicked';
import { createDownloadFailedEventPayload, createDownloadSucceededEventPayload } from './analytics/events/operational/download';
import { fireAnalytics } from './analytics';
import { createFailedPreviewDownloadButtonClickedEvent } from './analytics/events/ui/failedPreviewDownloadButtonClicked';
import { DownloadButtonWrapper } from './styleWrappers';
import { MediaViewerError } from './errors';
import Tooltip from '@atlaskit/tooltip';
import { AbuseModal } from '@atlaskit/media-ui/abuseModal';
var downloadIcon = /*#__PURE__*/React.createElement(DownloadIcon, {
  color: "currentColor",
  spacing: "spacious",
  label: "Download"
});
function noop() {}
function DownloadButton(_ref) {
  var analyticspayload = _ref.analyticspayload,
    _ref$onClick = _ref.onClick,
    providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick,
    tooltip = _ref.tooltip,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var onClick = useCallback(function (event, analyticsEvent) {
    fireAnalytics(analyticspayload, createAnalyticsEvent);
    providedOnClick(event, analyticsEvent);
  }, [analyticspayload, providedOnClick, createAnalyticsEvent]);
  var downloadButton = /*#__PURE__*/React.createElement(MediaButton, _extends({}, rest, {
    onClick: onClick
  }));
  return tooltip ? /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltip,
    position: "bottom",
    tag: "span"
  }, downloadButton) : downloadButton;
}
var createItemDownloader = function createItemDownloader(file, mediaClient, options) {
  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var collectionName, traceContext, createAnalyticsEvent, id, name;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          collectionName = options.collectionName, traceContext = options.traceContext, createAnalyticsEvent = options.createAnalyticsEvent;
          id = file.id;
          name = !isErrorFileState(file) ? file.name : undefined;
          mediaClient.file.downloadBinary(id, name, collectionName, traceContext).then(function () {
            fireAnalytics(createDownloadSucceededEventPayload(file, traceContext), createAnalyticsEvent);
          }).catch(function (e) {
            fireAnalytics(createDownloadFailedEventPayload(file.id, new MediaViewerError('download', e), file, traceContext), createAnalyticsEvent);
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
};
var useDownloadButtonDisabledProps = function useDownloadButtonDisabledProps(mediaClient) {
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var isDisabled = mediaClient.config.enforceDataSecurityPolicy;
  var tooltip = isDisabled ? formatMessage(messages.download_disabled_security_policy) : undefined;
  return {
    isDisabled: isDisabled,
    tooltip: tooltip
  };
};
var DownloadItem = function DownloadItem(_ref3) {
  var testId = _ref3.testId,
    fileState = _ref3.fileState,
    mediaClient = _ref3.mediaClient,
    collectionName = _ref3.collectionName,
    appearance = _ref3.appearance,
    analyticspayload = _ref3.analyticspayload,
    traceContext = _ref3.traceContext,
    iconBefore = _ref3.iconBefore,
    children = _ref3.children;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isAbuseModalOpen = _useState2[0],
    setIsAbuseModalOpen = _useState2[1];
  var _useAnalyticsEvents2 = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var _useDownloadButtonDis = useDownloadButtonDisabledProps(mediaClient),
    isDisabled = _useDownloadButtonDis.isDisabled,
    tooltip = _useDownloadButtonDis.tooltip;
  var shouldRenderAbuseModal = !isErrorFileState(fileState) && !!fileState.abuseClassification;
  var itemDownloader = createItemDownloader(fileState, mediaClient, {
    collectionName: collectionName,
    createAnalyticsEvent: createAnalyticsEvent,
    traceContext: traceContext
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderAbuseModal && /*#__PURE__*/React.createElement(AbuseModal, {
    isOpen: isAbuseModalOpen,
    onConfirm: itemDownloader,
    onClose: function onClose() {
      return setIsAbuseModalOpen(false);
    }
  }), /*#__PURE__*/React.createElement(DownloadButton, {
    testId: testId,
    appearance: appearance,
    analyticspayload: analyticspayload,
    isDisabled: isDisabled,
    tooltip: tooltip,
    onClick: function onClick() {
      if (shouldRenderAbuseModal) {
        setIsAbuseModalOpen(true);
      } else {
        itemDownloader();
      }
    },
    iconBefore: iconBefore
  }, children));
};
export var ErrorViewDownloadButton = function ErrorViewDownloadButton(_ref4) {
  var fileState = _ref4.fileState,
    mediaClient = _ref4.mediaClient,
    error = _ref4.error,
    traceContext = _ref4.traceContext,
    collectionName = _ref4.collectionName;
  var downloadEvent = createFailedPreviewDownloadButtonClickedEvent(fileState, error);
  var testId = 'media-viewer-error-download-button';
  return /*#__PURE__*/React.createElement(DownloadButtonWrapper, null, /*#__PURE__*/React.createElement(DownloadItem, {
    testId: testId,
    analyticspayload: downloadEvent,
    appearance: "primary",
    fileState: fileState,
    mediaClient: mediaClient,
    collectionName: collectionName,
    traceContext: traceContext
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.download)));
};
export var ToolbarDownloadButton = function ToolbarDownloadButton(_ref5) {
  var state = _ref5.state,
    mediaClient = _ref5.mediaClient,
    identifier = _ref5.identifier,
    traceContext = _ref5.traceContext;
  // TODO [MS-1731]: make it work for external files as well
  if (isExternalImageIdentifier(identifier)) {
    return null;
  }
  var downloadEvent = createDownloadButtonClickedEvent(state);
  var testId = 'media-viewer-download-button';
  return /*#__PURE__*/React.createElement(DownloadItem, {
    testId: testId,
    analyticspayload: downloadEvent,
    fileState: state,
    mediaClient: mediaClient,
    collectionName: identifier.collectionName,
    traceContext: traceContext,
    iconBefore: downloadIcon
  });
};
export var DisabledToolbarDownloadButton = /*#__PURE__*/React.createElement(MediaButton, {
  isDisabled: true,
  iconBefore: downloadIcon
});