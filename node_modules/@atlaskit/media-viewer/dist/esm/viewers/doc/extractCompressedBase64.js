import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { gunzip } from 'fflate';
export function extractCompressedBase64(_x) {
  return _extractCompressedBase.apply(this, arguments);
}
function _extractCompressedBase() {
  _extractCompressedBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
    var output,
      uint,
      decompressed,
      _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          output = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'uint';
          uint = Uint8Array.from(atob(data), function (c) {
            return c.charCodeAt(0);
          });
          _context.next = 4;
          return new Promise(function (res, rej) {
            return gunzip(uint, function (err, data) {
              return err ? rej(err) : res(data);
            });
          });
        case 4:
          decompressed = _context.sent;
          if (!(output === 'uint')) {
            _context.next = 7;
            break;
          }
          return _context.abrupt("return", decompressed);
        case 7:
          return _context.abrupt("return", new Response(decompressed).blob());
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _extractCompressedBase.apply(this, arguments);
}