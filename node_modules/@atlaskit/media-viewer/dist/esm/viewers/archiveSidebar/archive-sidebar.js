import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { unzip } from 'unzipit';
import { ArchiveSideBar, Separator } from './styleWrappers';
import { ArchiveSidebarFolderEntry } from './archive-sidebar-folder-entry';
import { ArchiveSidebarHeader } from './archive-sidebar-header';
import { getMediaTypeFromFilename, getFolderParent, extractArchiveFolderName, rejectAfter } from '../../utils';
export var ArchiveSidebar = /*#__PURE__*/function (_React$Component) {
  function ArchiveSidebar(props) {
    var _this;
    _classCallCheck(this, ArchiveSidebar);
    _this = _callSuper(this, ArchiveSidebar, [props]);
    _defineProperty(_this, "getArchiveFromEntry", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(entry) {
        var blob, archive;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return rejectAfter(function () {
                return entry.blob();
              });
            case 2:
              blob = _context.sent;
              _context.next = 5;
              return rejectAfter(function () {
                return unzip(blob);
              });
            case 5:
              archive = _context.sent;
              Object.values(archive.entries).forEach(function (zipEntry) {
                zipEntry.name = _this.state.currentArchiveSidebarFolder.name + zipEntry.name;
              });
              return _context.abrupt("return", archive);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(_this, "onEntrySelected", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(entry) {
        var onEntrySelected, isArchive;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              onEntrySelected = _this.props.onEntrySelected;
              if (!entry.isDirectory) {
                onEntrySelected(entry);
              }
              isArchive = !entry.isDirectory && getMediaTypeFromFilename(entry.name) === 'archive';
              _context2.prev = 3;
              if (!(isArchive || entry.isDirectory)) {
                _context2.next = 9;
                break;
              }
              _context2.next = 7;
              return _this.onFolderEntrySelected(entry, isArchive);
            case 7:
              _context2.next = 10;
              break;
            case 9:
              null;
            case 10:
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](3);
              return _context2.abrupt("return", _this.props.onError(_context2.t0, entry));
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[3, 12]]);
      }));
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    _defineProperty(_this, "onFolderEntrySelected", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(folder, isArchive) {
        var _this$props, entries, mediaClient, folderName, archiveEntries, _this$props2, isArchiveEntryLoading, onError, shouldRenderAbuseModal, currentFolderName;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _this$props = _this.props, entries = _this$props.entries, mediaClient = _this$props.mediaClient;
              if (!isArchive) {
                _context3.next = 7;
                break;
              }
              _context3.next = 4;
              return _this.getArchiveFromEntry(folder);
            case 4:
              archiveEntries = _context3.sent.entries;
              entries = _objectSpread(_objectSpread({}, entries), archiveEntries);
              folderName = extractArchiveFolderName(folder.name);
            case 7:
              _this$props2 = _this.props, isArchiveEntryLoading = _this$props2.isArchiveEntryLoading, onError = _this$props2.onError, shouldRenderAbuseModal = _this$props2.shouldRenderAbuseModal;
              currentFolderName = folderName || folder.name;
              _this.setState({
                currentArchiveSidebarFolder: {
                  isArchiveEntryLoading: isArchiveEntryLoading,
                  root: currentFolderName,
                  name: currentFolderName,
                  entries: entries,
                  onEntrySelected: _this.onEntrySelected,
                  mediaClient: mediaClient,
                  onError: onError,
                  shouldRenderAbuseModal: shouldRenderAbuseModal
                }
              });
            case 10:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function (_x3, _x4) {
        return _ref3.apply(this, arguments);
      };
    }());
    _defineProperty(_this, "onHeaderClicked", function () {
      var _this$props3 = _this.props,
        entries = _this$props3.entries,
        mediaClient = _this$props3.mediaClient,
        onHeaderClicked = _this$props3.onHeaderClicked,
        isArchiveEntryLoading = _this$props3.isArchiveEntryLoading,
        onError = _this$props3.onError,
        shouldRenderAbuseModal = _this$props3.shouldRenderAbuseModal;
      var folderParent = getFolderParent(_this.state.currentArchiveSidebarFolder.root);
      _this.setState({
        currentArchiveSidebarFolder: {
          isArchiveEntryLoading: isArchiveEntryLoading,
          root: folderParent,
          name: folderParent,
          entries: entries,
          onEntrySelected: _this.onEntrySelected,
          mediaClient: mediaClient,
          onError: onError,
          shouldRenderAbuseModal: shouldRenderAbuseModal
        }
      });

      // This sets the preview to the Folder icon
      onHeaderClicked();
    });
    var _isArchiveEntryLoading = props.isArchiveEntryLoading,
      _entries = props.entries,
      _mediaClient = props.mediaClient,
      _onError = props.onError,
      _shouldRenderAbuseModal = props.shouldRenderAbuseModal;
    _this.state = {
      currentArchiveSidebarFolder: {
        isArchiveEntryLoading: _isArchiveEntryLoading,
        root: '',
        name: '/',
        entries: _entries,
        onEntrySelected: _this.onEntrySelected,
        hideHeader: true,
        mediaClient: _mediaClient,
        onError: _onError,
        shouldRenderAbuseModal: _shouldRenderAbuseModal
      }
    };
    return _this;
  }
  _inherits(ArchiveSidebar, _React$Component);
  return _createClass(ArchiveSidebar, [{
    key: "render",
    value: function render() {
      var currentArchiveSidebarFolder = this.state.currentArchiveSidebarFolder;
      var onError = this.props.onError;
      return /*#__PURE__*/React.createElement(ArchiveSideBar, null, /*#__PURE__*/React.createElement(ArchiveSidebarHeader, {
        folderName: currentArchiveSidebarFolder.root,
        onHeaderClick: this.onHeaderClicked
      }), /*#__PURE__*/React.createElement(Separator, null), /*#__PURE__*/React.createElement(ArchiveSidebarFolderEntry, _extends({}, currentArchiveSidebarFolder, {
        onError: onError
      })));
    }
  }]);
}(React.Component);