import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { Component } from 'react';
import { isErrorFileState } from '@atlaskit/media-client';
import { SpinnerWrapper } from '../../styleWrappers';
import { ArchiveSidebar } from './archive-sidebar';
import { getArchiveEntriesFromFileState } from './archive';
import { Spinner } from '../../loading';
import { ArchiveViewerError } from '../../errors';
import { ArchiveSideBar } from './styleWrappers';
var ArchiveSidebarRenderer = /*#__PURE__*/function (_Component) {
  function ArchiveSidebarRenderer() {
    var _this;
    _classCallCheck(this, ArchiveSidebarRenderer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ArchiveSidebarRenderer, [].concat(args));
    _defineProperty(_this, "state", {
      entries: {},
      status: 'loading'
    });
    return _this;
  }
  _inherits(ArchiveSidebarRenderer, _Component);
  return _createClass(ArchiveSidebarRenderer, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$props, selectedFileState, mediaClient, collectionName, onError, onSuccess, archive, entries;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this$props = this.props, selectedFileState = _this$props.selectedFileState, mediaClient = _this$props.mediaClient, collectionName = _this$props.collectionName, onError = _this$props.onError, onSuccess = _this$props.onSuccess;
              _context.prev = 1;
              _context.next = 4;
              return getArchiveEntriesFromFileState(selectedFileState, mediaClient, collectionName);
            case 4:
              archive = _context.sent;
              entries = archive.entries;
              this.setState({
                entries: entries,
                status: 'loaded'
              });
              onSuccess();
              _context.next = 14;
              break;
            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](1);
              this.setState({
                status: 'loaded'
              });
              onError(new ArchiveViewerError('archiveviewer-read-binary', _context.t0 instanceof Error ? _context.t0 : undefined));
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 10]]);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
        entries = _this$state.entries,
        status = _this$state.status;
      var _this$props2 = this.props,
        mediaClient = _this$props2.mediaClient,
        onHeaderClicked = _this$props2.onHeaderClicked,
        isArchiveEntryLoading = _this$props2.isArchiveEntryLoading,
        onSelectedArchiveEntryChange = _this$props2.onSelectedArchiveEntryChange,
        onError = _this$props2.onError,
        selectedFileState = _this$props2.selectedFileState;
      return /*#__PURE__*/React.createElement(React.Fragment, null, status === 'loading' && /*#__PURE__*/React.createElement(ArchiveSideBar, null, /*#__PURE__*/React.createElement(SpinnerWrapper, null, /*#__PURE__*/React.createElement(Spinner, null))) || /*#__PURE__*/React.createElement(ArchiveSidebar, {
        entries: entries,
        onEntrySelected: onSelectedArchiveEntryChange,
        onHeaderClicked: onHeaderClicked,
        mediaClient: mediaClient,
        isArchiveEntryLoading: isArchiveEntryLoading,
        onError: onError,
        shouldRenderAbuseModal: !isErrorFileState(selectedFileState) && !!selectedFileState.abuseClassification
      }));
    }
  }]);
}(Component);
export { ArchiveSidebarRenderer as default };