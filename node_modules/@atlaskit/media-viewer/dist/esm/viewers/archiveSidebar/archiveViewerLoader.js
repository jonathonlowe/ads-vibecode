import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import ModalSpinner from '../modalSpinner';
import ErrorMessage from '../../errorMessage';
import { MediaViewerError } from '../../errors';
var ArchiveViewerLoader = /*#__PURE__*/function (_React$PureComponent) {
  function ArchiveViewerLoader() {
    var _this;
    _classCallCheck(this, ArchiveViewerLoader);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ArchiveViewerLoader, [].concat(args));
    _defineProperty(_this, "state", {
      ArchiveViewer: ArchiveViewerLoader.ArchiveViewer,
      isErrored: false
    });
    return _this;
  }
  _inherits(ArchiveViewerLoader, _React$PureComponent);
  return _createClass(ArchiveViewerLoader, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var archive;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (this.state.ArchiveViewer) {
                _context.next = 12;
                break;
              }
              _context.prev = 1;
              _context.next = 4;
              return import( /* webpackChunkName: "@atlaskit-internal_media-archive-viewer" */'./archive');
            case 4:
              archive = _context.sent;
              ArchiveViewerLoader.ArchiveViewer = archive.ArchiveViewer;
              this.setState({
                ArchiveViewer: ArchiveViewerLoader.ArchiveViewer
              });
              _context.next = 12;
              break;
            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](1);
              this.setState({
                isErrored: true
              });
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 9]]);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
        ArchiveViewer = _this$state.ArchiveViewer,
        isErrored = _this$state.isErrored;
      var item = this.props.item;
      if (isErrored) {
        return /*#__PURE__*/React.createElement(ErrorMessage, {
          fileId: item.id,
          fileState: item,
          error: new MediaViewerError('archiveviewer-bundle-loader')
        });
      }
      if (ArchiveViewer) {
        return /*#__PURE__*/React.createElement(ArchiveViewer, this.props);
      } else {
        return /*#__PURE__*/React.createElement(ModalSpinner, null);
      }
    }
  }]);
}(React.PureComponent);
export { ArchiveViewerLoader as default };