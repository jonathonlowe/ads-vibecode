import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { globalMediaEventEmitter } from '@atlaskit/media-client';
import AudioIcon from '@atlaskit/icon/core/migration/audio--media-services-audio';
import { Outcome } from '../domain';
import { MediaViewerError } from '../errors';
import { AudioPlayer, AudioCover, Audio, DefaultCoverWrapper, CustomAudioPlayerWrapper } from '../styleWrappers';
import { BaseViewer } from './base-viewer';
import { isIE } from '../utils/isIE';
import { CustomMediaPlayer } from '@atlaskit/media-ui';
import { getObjectUrlFromFileState } from '../utils/getObjectUrlFromFileState';
var defaultCover = /*#__PURE__*/React.createElement(DefaultCoverWrapper, null, /*#__PURE__*/React.createElement(AudioIcon, {
  label: "cover",
  LEGACY_size: "xlarge",
  color: "currentColor"
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  ,
  LEGACY_primaryColor: "#22272B"
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  ,
  LEGACY_secondaryColor: "#9FADBC"
}));
var getCoverUrl = function getCoverUrl(item, mediaClient, collectionName) {
  return mediaClient.getImageUrl(item.id, {
    collection: collectionName
  });
};
export var AudioViewer = /*#__PURE__*/function (_BaseViewer) {
  function AudioViewer() {
    var _this;
    _classCallCheck(this, AudioViewer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, AudioViewer, [].concat(args));
    _defineProperty(_this, "renderCover", function () {
      var item = _this.props.item;
      var coverUrl = _this.state.coverUrl;
      if (coverUrl && item.status !== 'error') {
        return /*#__PURE__*/React.createElement(AudioCover, {
          src: coverUrl,
          alt: item.name
        });
      } else {
        return defaultCover;
      }
    });
    _defineProperty(_this, "saveAudioElement", function (audioElement) {
      if (!audioElement) {
        return;
      }
      audioElement.setAttribute('controlsList', 'nodownload');
    });
    _defineProperty(_this, "onFirstPlay", function () {
      var item = _this.props.item;
      globalMediaEventEmitter.emit('media-viewed', {
        fileId: item.id,
        viewingLevel: 'full'
      });
    });
    _defineProperty(_this, "onError", function () {
      var onError = _this.props.onError;
      onError && onError(new MediaViewerError('audioviewer-playback'));
    });
    _defineProperty(_this, "loadCover", function (coverUrl) {
      return new Promise( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {
          var img;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                img = new Image();
                img.src = coverUrl;
                img.onload = resolve;
                img.onerror = reject;
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    });
    _defineProperty(_this, "setCoverUrl", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _this$props, mediaClient, item, collectionName, coverUrl;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _this$props = _this.props, mediaClient = _this$props.mediaClient, item = _this$props.item, collectionName = _this$props.collectionName;
            if (!(item.status !== 'processed')) {
              _context2.next = 3;
              break;
            }
            return _context2.abrupt("return");
          case 3:
            _context2.next = 5;
            return getCoverUrl(item, mediaClient, collectionName);
          case 5:
            coverUrl = _context2.sent;
            _context2.prev = 6;
            _context2.next = 9;
            return _this.loadCover(coverUrl);
          case 9:
            _this.safeSetState({
              coverUrl: coverUrl
            });
            _context2.next = 14;
            break;
          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](6);
          case 14:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[6, 12]]);
    })));
    return _this;
  }
  _inherits(AudioViewer, _BaseViewer);
  return _createClass(AudioViewer, [{
    key: "initialState",
    get: function get() {
      return {
        content: Outcome.pending()
      };
    }
  }, {
    key: "renderSuccessful",
    value: function renderSuccessful(src) {
      var _this$props2 = this.props,
        item = _this$props2.item,
        showControls = _this$props2.showControls,
        previewCount = _this$props2.previewCount,
        onCanPlay = _this$props2.onCanPlay;
      var useCustomAudioPlayer = !isIE();
      var isAutoPlay = previewCount === 0;
      return useCustomAudioPlayer ? /*#__PURE__*/React.createElement(AudioPlayer, {
        "data-testid": "media-viewer-audio-content"
      }, this.renderCover(), /*#__PURE__*/React.createElement(CustomAudioPlayerWrapper, null, /*#__PURE__*/React.createElement(CustomMediaPlayer, {
        type: "audio",
        isAutoPlay: isAutoPlay,
        src: src,
        fileId: item.id,
        isShortcutEnabled: true,
        showControls: showControls,
        onCanPlay: onCanPlay,
        onFirstPlay: this.onFirstPlay,
        onError: this.onError
      }))) : /*#__PURE__*/React.createElement(AudioPlayer, null, this.renderCover(), /*#__PURE__*/React.createElement(CustomAudioPlayerWrapper, null, /*#__PURE__*/React.createElement(Audio, {
        autoPlay: isAutoPlay,
        controls: true,
        ref: this.saveAudioElement,
        src: src,
        preload: "metadata"
      })));
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _this$props3, mediaClient, item, collectionName, audioUrl;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _this$props3 = this.props, mediaClient = _this$props3.mediaClient, item = _this$props3.item, collectionName = _this$props3.collectionName;
              _context3.prev = 1;
              if (!(item.status === 'processed')) {
                _context3.next = 10;
                break;
              }
              _context3.next = 5;
              return mediaClient.file.getArtifactURL(item.artifacts, 'audio.mp3', collectionName);
            case 5:
              audioUrl = _context3.sent;
              if (audioUrl) {
                _context3.next = 8;
                break;
              }
              throw new MediaViewerError('audioviewer-missing-artefact');
            case 8:
              _context3.next = 16;
              break;
            case 10:
              _context3.next = 12;
              return getObjectUrlFromFileState(item);
            case 12:
              audioUrl = _context3.sent;
              if (audioUrl) {
                _context3.next = 16;
                break;
              }
              this.safeSetState({
                content: Outcome.pending()
              });
              return _context3.abrupt("return");
            case 16:
              this.setCoverUrl();
              this.safeSetState({
                content: Outcome.successful(audioUrl)
              });
              _context3.next = 23;
              break;
            case 20:
              _context3.prev = 20;
              _context3.t0 = _context3["catch"](1);
              this.safeSetState({
                content: Outcome.failed(new MediaViewerError('audioviewer-fetch-url', _context3.t0 instanceof Error ? _context3.t0 : undefined))
              });
            case 23:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[1, 20]]);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "release",
    value: function release() {
      var content = this.state.content;
      if (!content.data) {
        return;
      }
      URL.revokeObjectURL(content.data);
    }
  }]);
}(BaseViewer);