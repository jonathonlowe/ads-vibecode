import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
export var Outcome = /*#__PURE__*/function () {
  function Outcome(state) {
    _classCallCheck(this, Outcome);
    this.state = state;
  }
  return _createClass(Outcome, [{
    key: "status",
    get: function get() {
      return this.state.status;
    }
  }, {
    key: "data",
    get: function get() {
      if (this.state.status === 'SUCCESSFUL' || this.state.status === 'FAILED') {
        return this.state.data;
      } else {
        return;
      }
    }
  }, {
    key: "err",
    get: function get() {
      if (this.state.status === 'FAILED') {
        return this.state.err;
      } else {
        return;
      }
    }
  }, {
    key: "whenSuccessful",
    value: function whenSuccessful(successful) {
      if (this.state.status === 'SUCCESSFUL') {
        successful(this.state.data);
      }
    }
  }, {
    key: "whenPending",
    value: function whenPending(pending) {
      if (this.state.status === 'PENDING') {
        pending();
      }
    }
  }, {
    key: "whenFailed",
    value: function whenFailed(failed) {
      if (this.state.status === 'FAILED') {
        failed(this.state.err);
      }
    }
  }, {
    key: "match",
    value: function match(_ref) {
      var successful = _ref.successful,
        pending = _ref.pending,
        failed = _ref.failed;
      switch (this.state.status) {
        case 'SUCCESSFUL':
          return successful(this.state.data);
        case 'PENDING':
          return pending();
        case 'FAILED':
          return failed(this.state.err, this.state.data);
      }
    }
  }], [{
    key: "successful",
    value: function successful(data) {
      return new Outcome({
        status: 'SUCCESSFUL',
        data: data
      });
    }
  }, {
    key: "pending",
    value: function pending() {
      return new Outcome({
        status: 'PENDING'
      });
    }
  }, {
    key: "failed",
    value: function failed(err, data) {
      return new Outcome({
        status: 'FAILED',
        err: err,
        data: data
      });
    }
  }]);
}();