import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Component } from 'react';
import { hideControlsClassName, MediaButton } from '@atlaskit/media-ui';
import ZoomOutIcon from '@atlaskit/icon/core/migration/zoom-out--media-services-zoom-out';
import ZoomInIcon from '@atlaskit/icon/core/migration/zoom-in--media-services-zoom-in';
import { ZoomWrapper, ZoomCenterControls, ZoomRightControls, ZoomLevelIndicator } from './styleWrappers';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { fireAnalytics } from './analytics/';
import { createZoomInButtonClickEvent } from './analytics/events/ui/zoomInButtonClicked';
import { createZoomOutButtonClickedEvent } from './analytics/events/ui/zoomOutButtonClicked';
import { injectIntl } from 'react-intl-next';
import { messages } from '@atlaskit/media-ui';
export var ZoomControlsBase = /*#__PURE__*/function (_Component) {
  function ZoomControlsBase() {
    var _this;
    _classCallCheck(this, ZoomControlsBase);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ZoomControlsBase, [].concat(args));
    _defineProperty(_this, "zoomIn", function () {
      var _this$props = _this.props,
        onChange = _this$props.onChange,
        zoomLevel = _this$props.zoomLevel,
        createAnalyticsEvent = _this$props.createAnalyticsEvent;
      if (zoomLevel.canZoomIn) {
        var zoom = zoomLevel.zoomIn();
        fireAnalytics(createZoomInButtonClickEvent(zoom.value), createAnalyticsEvent);
        onChange(zoom);
      }
    });
    _defineProperty(_this, "zoomOut", function () {
      var _this$props2 = _this.props,
        onChange = _this$props2.onChange,
        zoomLevel = _this$props2.zoomLevel,
        createAnalyticsEvent = _this$props2.createAnalyticsEvent;
      if (zoomLevel.canZoomOut) {
        var zoom = zoomLevel.zoomOut();
        fireAnalytics(createZoomOutButtonClickedEvent(zoom.value), createAnalyticsEvent);
        onChange(zoom);
      }
    });
    return _this;
  }
  _inherits(ZoomControlsBase, _Component);
  return _createClass(ZoomControlsBase, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
        zoomLevel = _this$props3.zoomLevel,
        formatMessage = _this$props3.intl.formatMessage,
        children = _this$props3.children;
      return (
        /*#__PURE__*/
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        React.createElement(ZoomWrapper, {
          className: hideControlsClassName
        }, /*#__PURE__*/React.createElement(ZoomCenterControls, null, /*#__PURE__*/React.createElement(MediaButton, {
          isDisabled: !zoomLevel.canZoomOut,
          onClick: this.zoomOut,
          iconBefore: /*#__PURE__*/React.createElement(ZoomOutIcon, {
            color: "currentColor",
            spacing: "spacious",
            label: formatMessage(messages.zoom_out)
          })
        }), /*#__PURE__*/React.createElement(MediaButton, {
          isDisabled: !zoomLevel.canZoomIn,
          onClick: this.zoomIn,
          iconBefore: /*#__PURE__*/React.createElement(ZoomInIcon, {
            color: "currentColor",
            spacing: "spacious",
            label: formatMessage(messages.zoom_in)
          })
        })), /*#__PURE__*/React.createElement(ZoomRightControls, null, children, /*#__PURE__*/React.createElement(ZoomLevelIndicator, null, zoomLevel.asPercentage)))
      );
    }
  }]);
}(Component);

// @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
export var ZoomControls = withAnalyticsEvents({})(injectIntl(ZoomControlsBase));