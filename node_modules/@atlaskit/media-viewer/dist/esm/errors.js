import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { isCommonMediaClientError } from '@atlaskit/media-client';
export var MediaViewerError = /*#__PURE__*/function (_Error) {
  function MediaViewerError(primaryReason, secondaryError) {
    var _this;
    _classCallCheck(this, MediaViewerError);
    _this = _callSuper(this, MediaViewerError, [primaryReason]);

    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    _this.primaryReason = primaryReason;
    _this.secondaryError = secondaryError;
    Object.setPrototypeOf(_this, (this instanceof MediaViewerError ? this.constructor : void 0).prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(_this, this instanceof MediaViewerError ? this.constructor : void 0);
    }
    return _this;
  }
  _inherits(MediaViewerError, _Error);
  return _createClass(MediaViewerError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export function isMediaViewerError(err) {
  return err instanceof MediaViewerError;
}
export var ArchiveViewerError = /*#__PURE__*/function (_MediaViewerError) {
  function ArchiveViewerError(primaryReason, secondaryError, zipEntry) {
    var _this2;
    _classCallCheck(this, ArchiveViewerError);
    _this2 = _callSuper(this, ArchiveViewerError, [primaryReason, secondaryError]);
    _this2.primaryReason = primaryReason;
    _this2.secondaryError = secondaryError;
    _this2.zipEntry = zipEntry;
    return _this2;
  }
  _inherits(ArchiveViewerError, _MediaViewerError);
  return _createClass(ArchiveViewerError);
}(MediaViewerError);
export function isArchiveViewerError(err) {
  return err instanceof ArchiveViewerError;
}
// not supplied, so just a primary reason

export function getPrimaryErrorReason(error) {
  return error.primaryReason;
}
export function getSecondaryErrorReason(error) {
  var secondaryError = error.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.reason;
  } else if (secondaryError) {
    return 'nativeError';
  } else {
    return 'unknown';
  }
}
export function getErrorDetail(error) {
  var _ref = error || {},
    secondaryError = _ref.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    var _secondaryError$inner;
    return ((_secondaryError$inner = secondaryError.innerError) === null || _secondaryError$inner === void 0 ? void 0 : _secondaryError$inner.message) || 'unknown';
  } else if (secondaryError) {
    return secondaryError.message;
  }
  return 'unknown';
}
export function getRequestMetadata(error) {
  var _ref2 = error || {},
    secondaryError = _ref2.secondaryError;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.metadata;
  }
}