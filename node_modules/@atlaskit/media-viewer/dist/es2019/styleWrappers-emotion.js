import _extends from "@babel/runtime/helpers/extends";
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx, css } from '@emotion/react';
import { forwardRef, useMemo } from 'react';
import { blanketColor, overlayZindex } from './styles';
import { ellipsis, hideControlsClassName } from '@atlaskit/media-ui';
import { TouchScrollable } from 'react-scrolllock';
import { useMergeRefs } from 'use-callback-ref';
import { headerAndSidebarBackgroundColor } from './viewers/modalSpinner';
import { ArchiveSideBarWidth } from './viewers/archiveSidebar/styles';
import { borderRadius } from '@atlaskit/theme/constants';
import { Box, xcss } from '@atlaskit/primitives';
const SIDEBAR_WIDTH = 416;
const blanketStyles = css({
  position: 'fixed',
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundColor: blanketColor,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: overlayZindex,
  display: 'flex'
});
const headerWrapperStyles = ({
  isArchiveSideBarVisible
}) => css({
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '98px',
  opacity: 0.85,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  background: `linear-gradient( to bottom, ${headerAndSidebarBackgroundColor}, rgba(14, 22, 36, 0) ) no-repeat`,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  backgroundPosition: isArchiveSideBarVisible ? `${ArchiveSideBarWidth}px 0` : '0',
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#c7d1db',
  fontWeight: "var(--ds-font-weight-medium, 500)",
  padding: "var(--ds-space-300, 24px)",
  boxSizing: 'border-box',
  pointerEvents: 'none',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: overlayZindex + 1
});
const listWrapperStyles = css({
  width: '100%',
  height: '100%',
  position: 'relative',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});
const closeButtonWrapperStyles = css({
  position: 'absolute',
  top: "var(--ds-space-300, 24px)",
  right: "var(--ds-space-250, 20px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  zIndex: overlayZindex + 2
});
const contentWrapperStyles = ({
  isSidebarVisible
}) => css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: isSidebarVisible ? `calc(100% - ${SIDEBAR_WIDTH}px)` : '100%'
});
const zoomWrapperStyles = css({
  width: '100%',
  position: 'absolute',
  bottom: '0px',
  height: '98px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundImage: `linear-gradient( to top, ${headerAndSidebarBackgroundColor}, rgba(14, 22, 36, 0) )`,
  opacity: 0.85,
  pointerEvents: 'none',
  boxSizing: 'border-box',
  display: 'flex',
  alignItems: 'flex-end',
  padding: `${"var(--ds-space-100, 10px)"} ${"var(--ds-space-300, 24px)"}`
});
const zoomCenterControlsStyles = css({
  width: '100%',
  display: 'flex',
  justifyContent: 'center',
  gap: "var(--ds-space-100, 10px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> *': {
    pointerEvents: 'all'
  }
});
const zoomRightControlsStyles = css({
  position: 'absolute',
  right: "var(--ds-space-300, 24px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#c7d1db',
  pointerEvents: 'all',
  display: 'flex',
  justifyContent: 'right',
  gap: "var(--ds-space-100, 10px)"
});
const zoomLevelIndicatorStyles = css({
  height: '32px',
  lineHeight: '32px',
  verticalAlign: 'middle'
});
const hdIconGroupWrapperStyles = css({
  display: 'flex',
  alignItems: 'center',
  gap: "var(--ds-space-100, 10px)",
  position: 'relative',
  width: '24px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> *': {
    position: 'absolute'
  }
});
const errorMessageWrapperStyles = css({
  textAlign: 'center',
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#c7d1db',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  p: {
    lineHeight: '100%'
  }
});
const errorImageStyles = css({
  marginBottom: "var(--ds-space-100, 10px)",
  userSelect: 'none'
});
const videoStyles = css({
  width: '100vw',
  height: '100vh'
});
const pdfWrapperStyles = css({
  overflow: 'auto',
  position: 'absolute',
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  [`.${hideControlsClassName}`]: {
    position: 'fixed'
  }
});
const arrowStyles = css({
  cursor: 'pointer',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  svg: {
    filter: 'drop-shadow(0px 1px 1px rgb(9 30 66 / 25%)) drop-shadow(0px 0px 1px rgb(9 30 66 / 31%))'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&& button': {
    '&:hover': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      svg: {
        // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
        color: '#b6c2cf'
      }
    },
    '&:active': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      svg: {
        // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
        color: '#c7d1db'
      }
    }
  }
});
const arrowWrapperStyles = css({
  position: 'absolute',
  top: '50%',
  transform: 'translateY(-50%)',
  padding: "var(--ds-space-250, 20px)"
});
const arrowsWrapperStyles = css({
  display: 'flex',
  position: 'absolute',
  top: '50%',
  transform: 'translateY(-50%)',
  left: 0,
  width: '100%'
});
const leftWrapperStyles = ({
  isArchiveSideBarVisible
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
css(arrowWrapperStyles, {
  textAlign: 'left',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  left: isArchiveSideBarVisible ? `${ArchiveSideBarWidth}px` : '0'
});

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
const rightWrapperStyles = css(arrowWrapperStyles, {
  textAlign: 'right',
  right: 0
});
const headerStyles = ({
  isArchiveSideBarVisible
}) => css({
  display: 'flex',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  paddingLeft: isArchiveSideBarVisible ? `${ArchiveSideBarWidth}px` : '0'
});
const leftHeaderStyles = css({
  flex: 1,
  overflow: 'hidden',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> *': {
    pointerEvents: 'all'
  }
});
const imageWrapperStyles = css({
  width: '100vw',
  height: '100vh',
  overflow: 'auto',
  textAlign: 'center',
  verticalAlign: 'middle',
  whiteSpace: 'nowrap'
});
const baselineExtendStyles = css({
  height: '100%',
  display: 'inline-block',
  verticalAlign: 'middle'
});
const imgStyles = ({
  cursor,
  shouldPixelate
}) => css({
  display: 'inline-block',
  verticalAlign: 'middle',
  position: 'relative',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  cursor: cursor
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
shouldPixelate ? `/* Prevent images from being smoothed when scaled up */
    image-rendering: optimizeSpeed; /* Legal fallback */
    image-rendering: -moz-crisp-edges; /* Firefox        */
    image-rendering: -o-crisp-edges; /* Opera          */
    image-rendering: -webkit-optimize-contrast; /* Safari         */
    image-rendering: optimize-contrast; /* CSS3 Proposed  */
    image-rendering: crisp-edges; /* CSS4 Proposed  */
    image-rendering: pixelated; /* CSS4 Proposed  */
    -ms-interpolation-mode: nearest-neighbor; /* IE8+           */` : ``);
const medatadataTextWrapperStyles = css({
  overflow: 'hidden'
});
const metadataWrapperStyles = css({
  display: 'flex'
});

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
const metadataFileNameStyles = css(ellipsis());
const metadataSubTextStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#c7d1db'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
ellipsis());
const metadataIconWrapperStyles = xcss({
  paddingTop: 'space.050',
  paddingRight: 'space.150'
});
const rightHeaderStyles = css({
  textAlign: 'right',
  marginRight: "var(--ds-space-500, 40px)",
  minWidth: '200px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> *': {
    pointerEvents: 'all'
  }
});
const customAudioPlayerWrapperStyles = css({
  position: 'absolute',
  bottom: 0,
  left: 0,
  width: '100%'
});
const audioPlayerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  backgroundColor: blanketColor,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  borderRadius: borderRadius(),
  alignItems: 'center',
  justifyContent: 'center',
  width: '400px',
  height: '400px',
  overflow: 'hidden',
  display: 'flex',
  flexDirection: 'column',
  position: 'relative'
});
const audioStyles = css({
  width: '100%',
  position: 'absolute',
  bottom: 0,
  left: 0
});
const audioCoverStyles = css({
  width: '100%',
  height: '100%',
  objectFit: 'scale-down',
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  backgroundColor: '#000'
});
const defaultCoverWrapperStyles = css({
  width: '100%',
  height: '100%',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  color: "var(--ds-text, #9FADBC)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> *': {
    transform: 'scale(2)'
  }
});
const downloadButtonWrapperStyles = css({
  marginTop: "var(--ds-space-300, 28px)",
  textAlign: 'center',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  button: {
    '&:hover, &:active': {
      // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
      color: '#161a1d !important'
    }
  }
});
const customVideoPlayerWrapperStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  video: {
    flex: 1,
    width: '100vw',
    height: '100vh',
    maxHeight: '100vh'
  }
});
const sidebarWrapperStyles = css({
  top: 0,
  right: 0,
  width: `${SIDEBAR_WIDTH}px`,
  height: '100vh',
  overflow: 'hidden auto',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  backgroundColor: `var(--ds-surface, ${headerAndSidebarBackgroundColor})`,
  color: "var(--ds-text, #c7d1db)"
});
const spinnerWrapperStyles = css({
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  height: '100%'
});
const formattedMessageWrapperStyles = css({});
// We are keeping this data-testid since JIRA is still using it in their codebase to perform checks. Before removing this, we need to ensure this 'media-viewer-popup' test id is not being used anywhere else in other codebases
export const Blanket = ({
  'data-testid': datatestId,
  className,
  children
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
jsx("div", {
  css: blanketStyles,
  "data-testid": datatestId,
  className: className
}, children);
export const HeaderWrapper = ({
  className,
  children,
  isArchiveSideBarVisible
}) => {
  return jsx("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: headerWrapperStyles({
      isArchiveSideBarVisible
    })
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className
  }, children);
};
HeaderWrapper.displayName = 'HeaderWrapper';
export const ListWrapper = ({
  children
}) => jsx("div", {
  css: listWrapperStyles
}, children);
ListWrapper.displayName = 'ListWrapper';
export const ArrowsWrapper = ({
  children
}) => jsx("div", {
  id: "media-viewer-navigation",
  css: arrowsWrapperStyles
}, children);
export const CloseButtonWrapper = ({
  className,
  children
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
jsx("div", {
  css: closeButtonWrapperStyles,
  className: className
}, children);
export const ContentWrapper = ({
  isSidebarVisible,
  children
}) =>
// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
jsx("div", {
  css: contentWrapperStyles({
    isSidebarVisible
  })
}, children);
export const ZoomWrapper = ({
  className,
  children
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
jsx("div", {
  css: zoomWrapperStyles,
  className: className
}, children);
export const ZoomCenterControls = ({
  children
}) => jsx("div", {
  css: zoomCenterControlsStyles
}, children);
export const ZoomRightControls = ({
  children
}) => jsx("div", {
  css: zoomRightControlsStyles
}, children);
export const ZoomLevelIndicator = ({
  children
}) => jsx("span", {
  css: zoomLevelIndicatorStyles,
  "data-testid": "zoom-level-indicator"
}, children);
export const HDIconGroupWrapper = ({
  className,
  children
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
jsx("div", {
  css: hdIconGroupWrapperStyles,
  className: className
}, children);
export const ErrorMessageWrapper = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: errorMessageWrapperStyles,
  "data-testid": datatestId
}, children);
export const ErrorImage = ({
  src,
  alt
}) => jsx("img", {
  css: errorImageStyles,
  alt: alt,
  src: src
});
export const Video = ({
  autoPlay,
  controls,
  src
}) =>
// eslint-disable-next-line jsx-a11y/media-has-caption
jsx("video", {
  css: videoStyles,
  autoPlay: autoPlay,
  controls: controls,
  src: src
});
const PDFWrapperBody = /*#__PURE__*/forwardRef(({
  innerRef,
  'data-testid': datatestId,
  children
}, ref) => {
  const bodyRef = useMergeRefs([ref, innerRef]);
  return jsx("div", {
    css: pdfWrapperStyles,
    ref: bodyRef,
    "data-testid": datatestId
  }, children);
});
export const PDFWrapper = /*#__PURE__*/forwardRef((props, ref) => {
  return jsx(TouchScrollable, null, jsx(PDFWrapperBody, _extends({
    innerRef: ref
  }, props)));
});
export const Arrow = ({
  className,
  children
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
jsx("span", {
  css: arrowStyles,
  className: className
}, children);
export const LeftWrapper = ({
  children,
  isArchiveSideBarVisible
}) =>
// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
jsx("div", {
  css: leftWrapperStyles({
    isArchiveSideBarVisible
  })
}, children);
export const RightWrapper = ({
  children
}) => jsx("div", {
  css: rightWrapperStyles
}, children);

// header.tsx

export const Header = ({
  children,
  isArchiveSideBarVisible,
  className
}) =>
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
jsx("div", {
  css: headerStyles({
    isArchiveSideBarVisible
  }),
  className: className
}, children);
export const LeftHeader = ({
  children
}) => jsx("div", {
  css: leftHeaderStyles
}, children);
export const ImageWrapper = /*#__PURE__*/forwardRef(({
  children,
  'data-testid': datatestId,
  onClick,
  style,
  className
}, ref) =>
// eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
jsx("div", {
  "data-testid": datatestId,
  onClick: onClick,
  ref: ref,
  css: imageWrapperStyles
  // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
  ,
  style: style
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  ,
  className: className
}, children));
export const BaselineExtend = () => jsx("div", {
  css: baselineExtendStyles
});
export const Img = ({
  canDrag,
  isDragging,
  shouldPixelate,
  'data-testid': datatestId,
  src,
  style,
  onLoad,
  onError,
  onMouseDown,
  className
}) => {
  const cursor = useMemo(() => {
    if (canDrag && isDragging) {
      return 'grabbing';
    } else if (canDrag) {
      return 'grab';
    } else {
      return 'auto';
    }
  }, [canDrag, isDragging]);
  return (
    // eslint-disable-next-line jsx-a11y/alt-text, jsx-a11y/no-noninteractive-element-interactions
    jsx("img", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: className
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      ,
      css: imgStyles({
        cursor,
        shouldPixelate
      }),
      "data-testid": datatestId,
      src: src
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: style,
      onLoad: onLoad,
      onError: onError,
      onMouseDown: onMouseDown
    })
  );
};
export const MedatadataTextWrapper = ({
  children
}) => jsx("div", {
  css: medatadataTextWrapperStyles
}, children);
export const MetadataWrapper = ({
  children
}) => jsx("div", {
  css: metadataWrapperStyles
}, children);
export const MetadataFileName = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: metadataFileNameStyles,
  "data-testid": datatestId
}, children);
export const MetadataSubText = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: metadataSubTextStyles,
  "data-testid": datatestId
}, children);
export const MetadataIconWrapper = ({
  children
}) => jsx(Box, {
  xcss: metadataIconWrapperStyles
}, children);
export const RightHeader = ({
  children
}) => jsx("div", {
  css: rightHeaderStyles
}, children);
export const CustomAudioPlayerWrapper = ({
  children
}) => jsx("div", {
  css: customAudioPlayerWrapperStyles
}, children);
export const AudioPlayer = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: audioPlayerStyles,
  "data-testid": datatestId
}, children);
AudioPlayer.displayName = 'AudioPlayer';
export const Audio = /*#__PURE__*/forwardRef(({
  autoPlay,
  controls,
  src,
  preload
}, ref) =>
// eslint-disable-next-line jsx-a11y/media-has-caption
jsx("audio", {
  css: audioStyles,
  ref: ref,
  autoPlay: autoPlay,
  controls: controls,
  src: src,
  preload: preload
}));
export const AudioCover = ({
  src,
  alt
}) => jsx("img", {
  css: audioCoverStyles,
  alt: alt,
  src: src
});
export const DefaultCoverWrapper = ({
  children
}) => jsx("div", {
  css: defaultCoverWrapperStyles
}, children);
export const DownloadButtonWrapper = ({
  children
}) => jsx("div", {
  css: downloadButtonWrapperStyles
}, children);
export const CustomVideoPlayerWrapper = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: customVideoPlayerWrapperStyles,
  "data-testid": datatestId
}, children);
export const SidebarWrapper = ({
  'data-testid': datatestId,
  children
}) => jsx("div", {
  css: sidebarWrapperStyles,
  "data-testid": datatestId
}, children);
export const SpinnerWrapper = ({
  children
}) => jsx("div", {
  css: spinnerWrapperStyles
}, children);
export const FormattedMessageWrapper = ({
  children
}) => jsx("span", {
  css: formattedMessageWrapperStyles
}, children);