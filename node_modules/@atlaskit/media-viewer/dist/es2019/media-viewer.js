import _extends from "@babel/runtime/helpers/extends";
import React, { useState, useLayoutEffect, useRef } from 'react';
import { IntlProvider, injectIntl } from 'react-intl-next';
import { Shortcut } from '@atlaskit/media-ui';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { fireAnalytics } from './analytics';
import { createModalEvent } from './analytics/events/screen/modal';
import { createClosedEvent } from './analytics/events/ui/closed';
import { List } from './list';
import { Content } from './content';
import { Blanket, SidebarWrapper } from './styleWrappers';
import { start } from 'perf-marks';
import { mediaViewerPopupClass } from './classnames';
import ScrollLock from 'react-scrolllock';
import FocusLock from 'react-focus-lock';
const MediaViewerComponent = ({
  featureFlags,
  items,
  extensions,
  contextId,
  innerRef,
  onClose,
  selectedItem,
  intl,
  viewerOptions
}) => {
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
  const [selectedIdentifier, setSelectedIdentifier] = useState();
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const createAnalyticsEventRef = useRef(createAnalyticsEvent);
  createAnalyticsEventRef.current = createAnalyticsEvent;
  useLayoutEffect(() => {
    fireAnalytics(createModalEvent(), createAnalyticsEventRef.current);
    start('MediaViewer.SessionDuration');
  }, []);
  const defaultSelectedItem = selectedItem || items[0];
  const renderSidebar = () => {
    const sidebarSelectedIdentifier = selectedIdentifier || defaultSelectedItem;
    if (sidebarSelectedIdentifier && isSidebarVisible && extensions && extensions.sidebar) {
      return /*#__PURE__*/React.createElement(SidebarWrapper, {
        "data-testid": "media-viewer-sidebar-content"
      }, extensions.sidebar.renderer(sidebarSelectedIdentifier, {
        close: () => setIsSidebarVisible(!isSidebarVisible)
      }));
    }
  };
  const content = /*#__PURE__*/React.createElement("div", {
    ref: innerRef
  }, /*#__PURE__*/React.createElement(Blanket, {
    "data-testid": "media-viewer-popup"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: mediaViewerPopupClass
  }, /*#__PURE__*/React.createElement(Shortcut, {
    code: 'Escape',
    handler: () => {
      fireAnalytics(createClosedEvent('escKey'), createAnalyticsEventRef.current);
      onClose && onClose();
    }
  }), /*#__PURE__*/React.createElement(Content, {
    isSidebarVisible: isSidebarVisible,
    onClose: (_e, analyticsEvent) => {
      var _analyticsEvent$paylo;
      if ((analyticsEvent === null || analyticsEvent === void 0 ? void 0 : (_analyticsEvent$paylo = analyticsEvent.payload) === null || _analyticsEvent$paylo === void 0 ? void 0 : _analyticsEvent$paylo.actionSubject) === 'button') {
        fireAnalytics(createClosedEvent('button'), createAnalyticsEventRef.current);
      }
      onClose && onClose();
    }
  }, /*#__PURE__*/React.createElement(List, {
    defaultSelectedItem: defaultSelectedItem || items[0],
    items: items,
    onClose: onClose,
    extensions: extensions,
    onNavigationChange: setSelectedIdentifier,
    onSidebarButtonClick: () => setIsSidebarVisible(!isSidebarVisible),
    isSidebarVisible: isSidebarVisible,
    contextId: contextId,
    featureFlags: featureFlags,
    viewerOptions: viewerOptions
  })), renderSidebar()));
  return intl ? content : /*#__PURE__*/React.createElement(IntlProvider, {
    locale: "en"
  }, content);
};
const MediaViewerWithRef = /*#__PURE__*/React.forwardRef((props, ref) => {
  return /*#__PURE__*/React.createElement(MediaViewerComponent, _extends({}, props, {
    innerRef: ref
  }));
});
const MediaViewerWithScrollLock = props => {
  return /*#__PURE__*/React.createElement(FocusLock, {
    autoFocus: true
  }, /*#__PURE__*/React.createElement(ScrollLock, null), /*#__PURE__*/React.createElement(MediaViewerWithRef, props));
};
export const MediaViewer = injectIntl(MediaViewerWithScrollLock, {
  enforceContext: false
});