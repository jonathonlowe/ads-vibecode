import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { Component } from 'react';
import { hideControlsClassName, MediaButton } from '@atlaskit/media-ui';
import ZoomOutIcon from '@atlaskit/icon/core/migration/zoom-out--media-services-zoom-out';
import ZoomInIcon from '@atlaskit/icon/core/migration/zoom-in--media-services-zoom-in';
import { ZoomWrapper, ZoomCenterControls, ZoomRightControls, ZoomLevelIndicator } from './styleWrappers';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { fireAnalytics } from './analytics/';
import { createZoomInButtonClickEvent } from './analytics/events/ui/zoomInButtonClicked';
import { createZoomOutButtonClickedEvent } from './analytics/events/ui/zoomOutButtonClicked';
import { injectIntl } from 'react-intl-next';
import { messages } from '@atlaskit/media-ui';
export class ZoomControlsBase extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "zoomIn", () => {
      const {
        onChange,
        zoomLevel,
        createAnalyticsEvent
      } = this.props;
      if (zoomLevel.canZoomIn) {
        const zoom = zoomLevel.zoomIn();
        fireAnalytics(createZoomInButtonClickEvent(zoom.value), createAnalyticsEvent);
        onChange(zoom);
      }
    });
    _defineProperty(this, "zoomOut", () => {
      const {
        onChange,
        zoomLevel,
        createAnalyticsEvent
      } = this.props;
      if (zoomLevel.canZoomOut) {
        const zoom = zoomLevel.zoomOut();
        fireAnalytics(createZoomOutButtonClickedEvent(zoom.value), createAnalyticsEvent);
        onChange(zoom);
      }
    });
  }
  render() {
    const {
      zoomLevel,
      intl: {
        formatMessage
      },
      children
    } = this.props;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      React.createElement(ZoomWrapper, {
        className: hideControlsClassName
      }, /*#__PURE__*/React.createElement(ZoomCenterControls, null, /*#__PURE__*/React.createElement(MediaButton, {
        isDisabled: !zoomLevel.canZoomOut,
        onClick: this.zoomOut,
        iconBefore: /*#__PURE__*/React.createElement(ZoomOutIcon, {
          color: "currentColor",
          spacing: "spacious",
          label: formatMessage(messages.zoom_out)
        })
      }), /*#__PURE__*/React.createElement(MediaButton, {
        isDisabled: !zoomLevel.canZoomIn,
        onClick: this.zoomIn,
        iconBefore: /*#__PURE__*/React.createElement(ZoomInIcon, {
          color: "currentColor",
          spacing: "spacious",
          label: formatMessage(messages.zoom_in)
        })
      })), /*#__PURE__*/React.createElement(ZoomRightControls, null, children, /*#__PURE__*/React.createElement(ZoomLevelIndicator, null, zoomLevel.asPercentage)))
    );
  }
}

// @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
export const ZoomControls = withAnalyticsEvents({})(injectIntl(ZoomControlsBase));