import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { unzip } from 'unzipit';
import { ArchiveSideBar, Separator } from './styleWrappers';
import { ArchiveSidebarFolderEntry } from './archive-sidebar-folder-entry';
import { ArchiveSidebarHeader } from './archive-sidebar-header';
import { getMediaTypeFromFilename, getFolderParent, extractArchiveFolderName, rejectAfter } from '../../utils';
export class ArchiveSidebar extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "getArchiveFromEntry", async entry => {
      const blob = await rejectAfter(() => entry.blob());
      const archive = await rejectAfter(() => unzip(blob));
      Object.values(archive.entries).forEach(zipEntry => {
        zipEntry.name = this.state.currentArchiveSidebarFolder.name + zipEntry.name;
      });
      return archive;
    });
    _defineProperty(this, "onEntrySelected", async entry => {
      const {
        onEntrySelected
      } = this.props;
      if (!entry.isDirectory) {
        onEntrySelected(entry);
      }
      const isArchive = !entry.isDirectory && getMediaTypeFromFilename(entry.name) === 'archive';
      try {
        isArchive || entry.isDirectory ? await this.onFolderEntrySelected(entry, isArchive) : null;
      } catch (error) {
        return this.props.onError(error, entry);
      }
    });
    _defineProperty(this, "onFolderEntrySelected", async (folder, isArchive) => {
      let {
        entries,
        mediaClient
      } = this.props;
      let folderName;
      if (isArchive) {
        const archiveEntries = (await this.getArchiveFromEntry(folder)).entries;
        entries = {
          ...entries,
          ...archiveEntries
        };
        folderName = extractArchiveFolderName(folder.name);
      }
      const {
        isArchiveEntryLoading,
        onError,
        shouldRenderAbuseModal
      } = this.props;
      const currentFolderName = folderName || folder.name;
      this.setState({
        currentArchiveSidebarFolder: {
          isArchiveEntryLoading,
          root: currentFolderName,
          name: currentFolderName,
          entries,
          onEntrySelected: this.onEntrySelected,
          mediaClient,
          onError,
          shouldRenderAbuseModal
        }
      });
    });
    _defineProperty(this, "onHeaderClicked", () => {
      const {
        entries,
        mediaClient,
        onHeaderClicked,
        isArchiveEntryLoading,
        onError,
        shouldRenderAbuseModal
      } = this.props;
      const folderParent = getFolderParent(this.state.currentArchiveSidebarFolder.root);
      this.setState({
        currentArchiveSidebarFolder: {
          isArchiveEntryLoading,
          root: folderParent,
          name: folderParent,
          entries,
          onEntrySelected: this.onEntrySelected,
          mediaClient,
          onError,
          shouldRenderAbuseModal
        }
      });

      // This sets the preview to the Folder icon
      onHeaderClicked();
    });
    const {
      isArchiveEntryLoading: _isArchiveEntryLoading,
      entries: _entries,
      mediaClient: _mediaClient,
      onError: _onError,
      shouldRenderAbuseModal: _shouldRenderAbuseModal
    } = props;
    this.state = {
      currentArchiveSidebarFolder: {
        isArchiveEntryLoading: _isArchiveEntryLoading,
        root: '',
        name: '/',
        entries: _entries,
        onEntrySelected: this.onEntrySelected,
        hideHeader: true,
        mediaClient: _mediaClient,
        onError: _onError,
        shouldRenderAbuseModal: _shouldRenderAbuseModal
      }
    };
  }
  render() {
    const {
      currentArchiveSidebarFolder
    } = this.state;
    const {
      onError
    } = this.props;
    return /*#__PURE__*/React.createElement(ArchiveSideBar, null, /*#__PURE__*/React.createElement(ArchiveSidebarHeader, {
      folderName: currentArchiveSidebarFolder.root,
      onHeaderClick: this.onHeaderClicked
    }), /*#__PURE__*/React.createElement(Separator, null), /*#__PURE__*/React.createElement(ArchiveSidebarFolderEntry, _extends({}, currentArchiveSidebarFolder, {
      onError: onError
    })));
  }
}