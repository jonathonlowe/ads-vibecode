import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import { isErrorFileState } from '@atlaskit/media-client';
import { SpinnerWrapper } from '../../styleWrappers';
import { ArchiveSidebar } from './archive-sidebar';
import { getArchiveEntriesFromFileState } from './archive';
import { Spinner } from '../../loading';
import { ArchiveViewerError } from '../../errors';
import { ArchiveSideBar } from './styleWrappers';
export default class ArchiveSidebarRenderer extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      entries: {},
      status: 'loading'
    });
  }
  async componentDidMount() {
    const {
      selectedFileState,
      mediaClient,
      collectionName,
      onError,
      onSuccess
    } = this.props;
    try {
      const archive = await getArchiveEntriesFromFileState(selectedFileState, mediaClient, collectionName);
      const entries = archive.entries;
      this.setState({
        entries,
        status: 'loaded'
      });
      onSuccess();
    } catch (error) {
      this.setState({
        status: 'loaded'
      });
      onError(new ArchiveViewerError('archiveviewer-read-binary', error instanceof Error ? error : undefined));
    }
  }
  render() {
    const {
      entries,
      status
    } = this.state;
    const {
      mediaClient,
      onHeaderClicked,
      isArchiveEntryLoading,
      onSelectedArchiveEntryChange,
      onError,
      selectedFileState
    } = this.props;
    return /*#__PURE__*/React.createElement(React.Fragment, null, status === 'loading' && /*#__PURE__*/React.createElement(ArchiveSideBar, null, /*#__PURE__*/React.createElement(SpinnerWrapper, null, /*#__PURE__*/React.createElement(Spinner, null))) || /*#__PURE__*/React.createElement(ArchiveSidebar, {
      entries: entries,
      onEntrySelected: onSelectedArchiveEntryChange,
      onHeaderClicked: onHeaderClicked,
      mediaClient: mediaClient,
      isArchiveEntryLoading: isArchiveEntryLoading,
      onError: onError,
      shouldRenderAbuseModal: !isErrorFileState(selectedFileState) && !!selectedFileState.abuseClassification
    }));
  }
}