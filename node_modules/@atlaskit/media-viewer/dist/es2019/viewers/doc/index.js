import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { isPreviewableFileState } from '@atlaskit/media-client';
import { Outcome } from '../../domain';
import { MediaViewerError } from '../../errors';
import { PDFRenderer } from './pdfRenderer';
import { BaseViewer } from '../base-viewer';
import { getObjectUrlFromFileState } from '../../utils/getObjectUrlFromFileState';
export class DocViewer extends BaseViewer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "isObjectUrl", false);
  }
  get initialState() {
    return {
      content: Outcome.pending()
    };
  }
  needsReset(propsA, propsB) {
    if (this.state.content.status === 'SUCCESSFUL') {
      return false;
    }
    return propsA.item.status !== propsB.item.status;
  }
  async init() {
    const {
      item,
      mediaClient,
      collectionName,
      onError
    } = this.props;
    if (isPreviewableFileState(item) && item.mimeType.toLowerCase() === 'application/pdf') {
      const src = await getObjectUrlFromFileState(item);
      if (src) {
        this.isObjectUrl = true;
        this.setState({
          content: Outcome.successful(src)
        });
        return;
      }
    }
    if (item.status === 'processed') {
      try {
        const src = await mediaClient.file.getArtifactURL(item.artifacts, 'document.pdf', collectionName);
        this.onMediaDisplayed();
        this.setState({
          content: Outcome.successful(src)
        });
      } catch (error) {
        const docError = new MediaViewerError('docviewer-fetch-url', error instanceof Error ? error : undefined);
        this.setState({
          content: Outcome.failed(docError)
        });
        if (onError) {
          onError(docError);
        }
      }
    } else if (item.status === 'failed-processing') {
      try {
        const src = await mediaClient.file.getFileBinaryURL(item.id, collectionName, 2940 // 2940 seconds ~= 50 mins
        );
        this.onMediaDisplayed();
        this.setState({
          content: Outcome.successful(src)
        });
      } catch (error) {
        const docError = new MediaViewerError('docviewer-fetch-url', error instanceof Error ? error : undefined);
        this.setState({
          content: Outcome.failed(docError)
        });
        if (onError) {
          onError(docError);
        }
      }
    }
  }
  release() {
    if (!this.isObjectUrl) {
      return;
    }
    const {
      content
    } = this.state;
    if (content.data) {
      URL.revokeObjectURL(content.data);
    }
  }
  renderSuccessful(content) {
    const {
      item,
      onClose,
      onSuccess,
      onError
    } = this.props;
    return /*#__PURE__*/React.createElement(PDFRenderer, {
      item: item,
      src: content,
      onSuccess: onSuccess,
      onError: onError,
      onClose: onClose
    });
  }
}