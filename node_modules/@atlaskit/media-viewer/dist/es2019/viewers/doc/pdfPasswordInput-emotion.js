import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useRef, useState } from 'react';
import Button from '@atlaskit/button/new';
import TextField from '@atlaskit/textfield';
import LockIcon from '@atlaskit/icon/core/migration/lock-locked--lock';
import Form, { Field } from '@atlaskit/form';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { messages } from '@atlaskit/media-ui';
import { xcss, Box, Flex } from '@atlaskit/primitives';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx, css } from '@emotion/react';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
const COLOR_SHADE = '#b6c2cf';
const headingStyle = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-bold, 700)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: COLOR_SHADE
});
const errorMessageWrapperStyle = css({
  marginTop: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#FD9891',
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  display: 'flex',
  alignItems: 'center'
});
const errorMessageStyle = css({
  marginTop: '0px',
  marginLeft: "var(--ds-space-050, 4px)"
});
const headerStyles = xcss({
  textAlign: 'center',
  marginTop: 'space.200',
  marginBottom: 'space.200'
});
const inputStyle = xcss({
  width: '330px'
});
const footerStyles = xcss({
  marginTop: 'space.200',
  display: 'flex',
  justifyContent: 'center'
});
export const PDFPasswordInput = ({
  onSubmit,
  hasPasswordError,
  onRender
}) => {
  const passwordInputRef = useRef(null);
  const onRenderRef = useRef(onRender);
  const [formError, setFormError] = useState(hasPasswordError);
  const intl = useIntl();
  useEffect(() => {
    var _onRenderRef$current;
    (_onRenderRef$current = onRenderRef.current) === null || _onRenderRef$current === void 0 ? void 0 : _onRenderRef$current.call(onRenderRef);
  }, []);
  useEffect(() => {
    if (hasPasswordError) {
      var _passwordInputRef$cur;
      setFormError(true);
      (_passwordInputRef$cur = passwordInputRef.current) === null || _passwordInputRef$cur === void 0 ? void 0 : _passwordInputRef$cur.focus();
    }
  }, [hasPasswordError]);
  return jsx(Form, {
    onSubmit: onSubmit
  }, ({
    formProps,
    submitting
  }) => jsx("form", formProps, jsx(Flex, {
    justifyContent: "center"
  }, jsx(LockIcon, {
    label: "",
    LEGACY_size: "xlarge",
    color: COLOR_SHADE
  })), jsx(Box, {
    xcss: headerStyles
  }, jsx("h1", {
    css: headingStyle
  }, jsx(FormattedMessage, messages.password_protected_pdf))), jsx(Field, {
    "aria-required": true,
    name: "password",
    defaultValue: "",
    isRequired: true
  }, ({
    fieldProps
  }) => jsx(Box, {
    xcss: inputStyle
  }, jsx(TextField, _extends({}, fieldProps, {
    type: "password",
    "aria-label": intl.formatMessage(messages.password),
    placeholder: intl.formatMessage(messages.enter_password),
    ref: passwordInputRef,
    "aria-describedby": formError ? `${fieldProps.id}-error` : undefined,
    onChange: value => {
      fieldProps.onChange(value);
      setFormError(false);
    }
  })), formError && jsx("div", {
    css: errorMessageWrapperStyle,
    id: `${fieldProps.id}-error`
  }, jsx(ErrorIcon, {
    color: "currentColor",
    LEGACY_size: "small",
    label: ""
  }), jsx("p", {
    css: errorMessageStyle
  }, jsx(FormattedMessage, messages.incorrect_password))))), jsx(Box, {
    xcss: footerStyles
  }, jsx(Button, {
    appearance: "primary",
    type: "submit",
    isLoading: submitting
  }, jsx(FormattedMessage, messages.submit)))));
};