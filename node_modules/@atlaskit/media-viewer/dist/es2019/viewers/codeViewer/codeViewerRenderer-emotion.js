import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { Component, forwardRef } from 'react';
import { Outcome } from '../../domain';
import { Spinner } from '../../loading';
import CodeBlock from '@atlaskit/code/block';
import ErrorMessage from '../../errorMessage';
import { MediaViewerError } from '../../errors';
import { lineCount } from './util';
import { codeViewerHeaderBarStyles, codeViewWrapperStyles, codeViewerHTMLStyles } from './styles';

// Based on some basic benchmarking with @atlaskit/code it was found that ~10,000 lines took around ~5secs to render, which locks the main thread.
// Therefore we set a hard limit on the amount of lines which we apply formatting to,
// otherwise the "text" language will be used which is plain and more performant
const MAX_FORMATTED_LINES = 10000;
// Use plain html to render code file if their size exceeds 5MB.
// Required by https://product-fabric.atlassian.net/browse/MEX-1788
const MAX_FILE_SIZE_USE_CODE_VIEWER = 5 * 1024 * 1024;
export const CodeViewWrapper = /*#__PURE__*/forwardRef(({
  children,
  'data-testid': testId
}, ref) => {
  return /* eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766 */(
    jsx("div", {
      css: codeViewWrapperStyles,
      "data-testid": testId,
      ref: ref
    }, children)
  );
});
export const CodeViewerHeaderBar = () => {
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  return jsx("div", {
    css: codeViewerHeaderBarStyles
  });
};
const initialState = {
  doc: Outcome.pending()
};
export class CodeViewRenderer extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", initialState);
  }
  componentDidMount() {
    this.init();
  }
  componentWillUnmount() {}
  async init() {
    const {
      src,
      onSuccess,
      onError
    } = this.props;
    try {
      this.setState({
        doc: Outcome.successful(src)
      });
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      const mediaError = new MediaViewerError('codeviewer-load-src', error instanceof Error ? error : undefined);
      this.setState({
        doc: Outcome.failed(mediaError)
      });
      if (onError) {
        onError(mediaError);
      }
    }
  }
  render() {
    const {
      item,
      src,
      language,
      testId
    } = this.props;
    //Use src to measure the real file size
    //item.size is incorrect for archives with mutiple docs inside.
    const fileSize = new Blob([src]).size;
    const codeViewer = lineCount(src) > MAX_FORMATTED_LINES || fileSize > MAX_FILE_SIZE_USE_CODE_VIEWER ?
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    jsx("code", {
      css: codeViewerHTMLStyles,
      "data-testid": "code-block"
    }, src) : jsx(CodeBlock, {
      language: language,
      text: src,
      testId: "code-block"
    });
    return this.state.doc.match({
      pending: () => jsx(Spinner, null),
      successful: () => jsx(CodeViewWrapper, {
        "data-testid": testId
      }, jsx(CodeViewerHeaderBar, null), codeViewer),
      failed: error => jsx(ErrorMessage, {
        fileId: item.id,
        fileState: item,
        error: error,
        supressAnalytics: true // item-viewer.tsx will send
      })
    });
  }
}