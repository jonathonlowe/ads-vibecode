import React from 'react';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import { messages as i18nMessages } from '@atlaskit/media-ui';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ErrorMessageWrapper, ErrorImage } from './styleWrappers';
import { errorLoadingFile } from './error-images';
import { fireAnalytics } from './analytics';
import { getPrimaryErrorReason, getSecondaryErrorReason } from './errors';
import { createLoadFailedEvent } from './analytics/events/operational/loadFailed';
import { createPreviewUnsupportedEvent } from './analytics/events/operational/previewUnsupported';
import { failMediaFileUfoExperience } from './analytics/ufoExperiences';
const errorLoadingFileImage = formatMessage => /*#__PURE__*/React.createElement(ErrorImage, {
  src: errorLoadingFile,
  alt: formatMessage(i18nMessages.error_loading_file)
});
export const errorReasonToMessages = [['serverRateLimited', i18nMessages.might_be_a_hiccup], ['invalidFileId', i18nMessages.item_not_found_in_list], ['itemviewer-file-failed-processing-status', i18nMessages.image_format_invalid_error], ['archiveviewer-read-binary', i18nMessages.zip_entry_load_fail], ['archiveviewer-create-url', i18nMessages.zip_entry_load_fail], ['archiveviewer-missing-name-src', i18nMessages.zip_entry_load_fail], ['archiveviewer-encrypted-entry', i18nMessages.couldnt_generate_encrypted_entry_preview], ['archiveviewer-codeviewer-file-size-exceeds', i18nMessages.couldnt_load_file], ['codeviewer-file-size-exceeds', i18nMessages.couldnt_load_file]];
export const getErrorMessageFromError = error => {
  const matchingRow = errorReasonToMessages.find(row => row[0] === getPrimaryErrorReason(error) || row[0] === getSecondaryErrorReason(error));
  return matchingRow ? matchingRow[1] : undefined;
};
export class ErrorMessage extends React.Component {
  getErrorInfo() {
    const {
      intl: {
        formatMessage
      },
      error
    } = this.props;
    const errorInfo = {
      icon: errorLoadingFileImage(formatMessage),
      messages: [i18nMessages.something_went_wrong, i18nMessages.couldnt_generate_preview]
    };
    const message = getErrorMessageFromError(error);
    if (message) {
      errorInfo.messages.push(message);
    }
    return errorInfo;
  }
  componentDidMount() {
    const {
      props
    } = this;
    const {
      supressAnalytics,
      error,
      fileState,
      fileId,
      traceContext,
      createAnalyticsEvent,
      fileStateFlags
    } = props;
    if (supressAnalytics !== true) {
      const payload = ErrorMessage.getEventPayload(error, fileId, fileState, traceContext);
      fireAnalytics(payload, createAnalyticsEvent);
      const rawPayload = {
        ...(payload === null || payload === void 0 ? void 0 : payload.attributes),
        fileStateFlags
      };
      if (Object.keys(rawPayload).includes('status')) {
        delete rawPayload['status'];
      }
      const failMediaFileUfoExperiencePayload = rawPayload;
      failMediaFileUfoExperience(failMediaFileUfoExperiencePayload);
    }
  }
  static getEventPayload(error, fileId, fileState, traceContext) {
    if (fileState && getPrimaryErrorReason(error) === 'unsupported') {
      // this is not an SLI, its just a useful metric for unsupported
      return createPreviewUnsupportedEvent(fileState);
    } else {
      return createLoadFailedEvent(fileId, error, fileState, traceContext);
    }
  }
  render() {
    const errorInfo = this.getErrorInfo();
    return /*#__PURE__*/React.createElement(ErrorMessageWrapper, {
      "data-testid": "media-viewer-error"
    }, /*#__PURE__*/React.createElement("div", null, errorInfo.icon, errorInfo.messages.map((formatMessage, i) =>
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/design-system/use-primitives-text
    React.createElement("p", {
      key: `p${i}`
    }, /*#__PURE__*/React.createElement(FormattedMessage, formatMessage)))), this.props.children);
  }
}

// @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
const ErroMsg = withAnalyticsEvents()(injectIntl(ErrorMessage));
export default ErroMsg;