export class Outcome {
  constructor(state) {
    this.state = state;
  }
  static successful(data) {
    return new Outcome({
      status: 'SUCCESSFUL',
      data
    });
  }
  static pending() {
    return new Outcome({
      status: 'PENDING'
    });
  }
  static failed(err, data) {
    return new Outcome({
      status: 'FAILED',
      err,
      data
    });
  }
  get status() {
    return this.state.status;
  }
  get data() {
    if (this.state.status === 'SUCCESSFUL' || this.state.status === 'FAILED') {
      return this.state.data;
    } else {
      return;
    }
  }
  get err() {
    if (this.state.status === 'FAILED') {
      return this.state.err;
    } else {
      return;
    }
  }
  whenSuccessful(successful) {
    if (this.state.status === 'SUCCESSFUL') {
      successful(this.state.data);
    }
  }
  whenPending(pending) {
    if (this.state.status === 'PENDING') {
      pending();
    }
  }
  whenFailed(failed) {
    if (this.state.status === 'FAILED') {
      failed(this.state.err);
    }
  }
  match({
    successful,
    pending,
    failed
  }) {
    switch (this.state.status) {
      case 'SUCCESSFUL':
        return successful(this.state.data);
      case 'PENDING':
        return pending();
      case 'FAILED':
        return failed(this.state.err, this.state.data);
    }
  }
}