import _extends from "@babel/runtime/helpers/extends";
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import DownloadIcon from '@atlaskit/icon/core/migration/download';
import { isErrorFileState, isExternalImageIdentifier } from '@atlaskit/media-client';
import { MediaButton, messages } from '@atlaskit/media-ui';
import React, { useCallback, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { createDownloadButtonClickedEvent } from './analytics/events/ui/downloadButtonClicked';
import { createDownloadFailedEventPayload, createDownloadSucceededEventPayload } from './analytics/events/operational/download';
import { fireAnalytics } from './analytics';
import { createFailedPreviewDownloadButtonClickedEvent } from './analytics/events/ui/failedPreviewDownloadButtonClicked';
import { DownloadButtonWrapper } from './styleWrappers';
import { MediaViewerError } from './errors';
import Tooltip from '@atlaskit/tooltip';
import { AbuseModal } from '@atlaskit/media-ui/abuseModal';
const downloadIcon = /*#__PURE__*/React.createElement(DownloadIcon, {
  color: "currentColor",
  spacing: "spacious",
  label: "Download"
});
function noop() {}
function DownloadButton({
  analyticspayload,
  onClick: providedOnClick = noop,
  tooltip,
  ...rest
}) {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const onClick = useCallback((event, analyticsEvent) => {
    fireAnalytics(analyticspayload, createAnalyticsEvent);
    providedOnClick(event, analyticsEvent);
  }, [analyticspayload, providedOnClick, createAnalyticsEvent]);
  const downloadButton = /*#__PURE__*/React.createElement(MediaButton, _extends({}, rest, {
    onClick: onClick
  }));
  return tooltip ? /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltip,
    position: "bottom",
    tag: "span"
  }, downloadButton) : downloadButton;
}
const createItemDownloader = (file, mediaClient, options) => async () => {
  const {
    collectionName,
    traceContext,
    createAnalyticsEvent
  } = options;
  const id = file.id;
  const name = !isErrorFileState(file) ? file.name : undefined;
  mediaClient.file.downloadBinary(id, name, collectionName, traceContext).then(() => {
    fireAnalytics(createDownloadSucceededEventPayload(file, traceContext), createAnalyticsEvent);
  }).catch(e => {
    fireAnalytics(createDownloadFailedEventPayload(file.id, new MediaViewerError('download', e), file, traceContext), createAnalyticsEvent);
  });
};
const useDownloadButtonDisabledProps = mediaClient => {
  const {
    formatMessage
  } = useIntl();
  const isDisabled = mediaClient.config.enforceDataSecurityPolicy;
  const tooltip = isDisabled ? formatMessage(messages.download_disabled_security_policy) : undefined;
  return {
    isDisabled,
    tooltip
  };
};
const DownloadItem = ({
  testId,
  fileState,
  mediaClient,
  collectionName,
  appearance,
  analyticspayload,
  traceContext,
  iconBefore,
  children
}) => {
  const [isAbuseModalOpen, setIsAbuseModalOpen] = useState(false);
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const {
    isDisabled,
    tooltip
  } = useDownloadButtonDisabledProps(mediaClient);
  const shouldRenderAbuseModal = !isErrorFileState(fileState) && !!fileState.abuseClassification;
  const itemDownloader = createItemDownloader(fileState, mediaClient, {
    collectionName: collectionName,
    createAnalyticsEvent,
    traceContext
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderAbuseModal && /*#__PURE__*/React.createElement(AbuseModal, {
    isOpen: isAbuseModalOpen,
    onConfirm: itemDownloader,
    onClose: () => setIsAbuseModalOpen(false)
  }), /*#__PURE__*/React.createElement(DownloadButton, {
    testId: testId,
    appearance: appearance,
    analyticspayload: analyticspayload,
    isDisabled: isDisabled,
    tooltip: tooltip,
    onClick: () => {
      if (shouldRenderAbuseModal) {
        setIsAbuseModalOpen(true);
      } else {
        itemDownloader();
      }
    },
    iconBefore: iconBefore
  }, children));
};
export const ErrorViewDownloadButton = ({
  fileState,
  mediaClient,
  error,
  traceContext,
  collectionName
}) => {
  const downloadEvent = createFailedPreviewDownloadButtonClickedEvent(fileState, error);
  const testId = 'media-viewer-error-download-button';
  return /*#__PURE__*/React.createElement(DownloadButtonWrapper, null, /*#__PURE__*/React.createElement(DownloadItem, {
    testId: testId,
    analyticspayload: downloadEvent,
    appearance: "primary",
    fileState: fileState,
    mediaClient: mediaClient,
    collectionName: collectionName,
    traceContext: traceContext
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.download)));
};
export const ToolbarDownloadButton = ({
  state,
  mediaClient,
  identifier,
  traceContext
}) => {
  // TODO [MS-1731]: make it work for external files as well
  if (isExternalImageIdentifier(identifier)) {
    return null;
  }
  const downloadEvent = createDownloadButtonClickedEvent(state);
  const testId = 'media-viewer-download-button';
  return /*#__PURE__*/React.createElement(DownloadItem, {
    testId: testId,
    analyticspayload: downloadEvent,
    fileState: state,
    mediaClient: mediaClient,
    collectionName: identifier.collectionName,
    traceContext: traceContext,
    iconBefore: downloadIcon
  });
};
export const DisabledToolbarDownloadButton = /*#__PURE__*/React.createElement(MediaButton, {
  isDisabled: true,
  iconBefore: downloadIcon
});