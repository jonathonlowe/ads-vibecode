import { isCommonMediaClientError } from '@atlaskit/media-client';
export class MediaViewerError extends Error {
  constructor(primaryReason, secondaryError) {
    super(primaryReason);

    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
    Object.setPrototypeOf(this, new.target.prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(this, new.target);
    }
  }
}
export function isMediaViewerError(err) {
  return err instanceof MediaViewerError;
}
export class ArchiveViewerError extends MediaViewerError {
  constructor(primaryReason, secondaryError, zipEntry) {
    super(primaryReason, secondaryError);
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
    this.zipEntry = zipEntry;
  }
}
export function isArchiveViewerError(err) {
  return err instanceof ArchiveViewerError;
}
// not supplied, so just a primary reason

export function getPrimaryErrorReason(error) {
  return error.primaryReason;
}
export function getSecondaryErrorReason(error) {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.reason;
  } else if (secondaryError) {
    return 'nativeError';
  } else {
    return 'unknown';
  }
}
export function getErrorDetail(error) {
  const {
    secondaryError
  } = error || {};
  if (isCommonMediaClientError(secondaryError)) {
    var _secondaryError$inner;
    return ((_secondaryError$inner = secondaryError.innerError) === null || _secondaryError$inner === void 0 ? void 0 : _secondaryError$inner.message) || 'unknown';
  } else if (secondaryError) {
    return secondaryError.message;
  }
  return 'unknown';
}
export function getRequestMetadata(error) {
  const {
    secondaryError
  } = error || {};
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.metadata;
  }
}