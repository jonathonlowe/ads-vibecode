import React, { type CSSProperties, type MouseEvent, type ReactNode } from 'react';
import { type MediaType } from '@atlaskit/media-client';
export interface IconWrapperProps {
    type: MediaType;
}
type Children = {
    children: ReactNode;
};
type ClassName = {
    className: string;
};
type DataTestID = {
    'data-testid'?: string | undefined;
};
type BlanketProps = DataTestID & Children & ClassName;
export declare const Blanket: (props: BlanketProps) => React.JSX.Element;
type HeaderWrapperProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const HeaderWrapper: {
    (props: ClassName & Children & HeaderWrapperProps): React.JSX.Element;
    displayName: string;
};
export declare const ListWrapper: {
    (props: Children): React.JSX.Element;
    displayName: string;
};
export declare const ArrowsWrapper: (props: Children) => React.JSX.Element;
export declare const CloseButtonWrapper: (props: ClassName & Children) => React.JSX.Element;
type ContentWrapperProps = {
    isSidebarVisible: boolean | undefined;
} & Children;
export declare const ContentWrapper: (props: ContentWrapperProps) => React.JSX.Element;
export declare const ZoomWrapper: (props: ClassName & Children) => React.JSX.Element;
export declare const ZoomCenterControls: (props: Children) => React.JSX.Element;
export declare const ZoomRightControls: (props: Children) => React.JSX.Element;
export declare const ZoomLevelIndicator: (props: Children) => React.JSX.Element;
export declare const HDIconGroupWrapper: (props: ClassName & Children) => React.JSX.Element;
type ErrorMessageWrapperProps = DataTestID & Children;
export declare const ErrorMessageWrapper: (props: ErrorMessageWrapperProps) => React.JSX.Element;
type ErrorImageProps = {
    alt: string | undefined;
    src: string;
};
export declare const ErrorImage: (props: ErrorImageProps) => React.JSX.Element;
type VideoProps = {
    controls: boolean;
    src: string;
    autoPlay: boolean;
};
export declare const Video: (props: VideoProps) => React.JSX.Element;
export declare const PDFWrapper: React.ForwardRefExoticComponent<DataTestID & Children & React.RefAttributes<HTMLDivElement>>;
export declare const Arrow: (props: ClassName & Children) => React.JSX.Element;
export type LeftWrapperProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const LeftWrapper: (props: Children & LeftWrapperProps) => React.JSX.Element;
export declare const RightWrapper: (props: Children) => React.JSX.Element;
export type HeaderProps = {
    isArchiveSideBarVisible: boolean;
};
export declare const Header: (props: Children & HeaderProps & ClassName) => React.JSX.Element;
export declare const LeftHeader: (props: Children) => React.JSX.Element;
export type ImageWrapperProps = {
    onClick: (event: MouseEvent<HTMLDivElement>) => void;
    style: CSSProperties;
} & Children & DataTestID;
export declare const ImageWrapper: React.ForwardRefExoticComponent<{
    onClick: (event: MouseEvent<HTMLDivElement>) => void;
    style: CSSProperties;
} & Children & DataTestID & ClassName & React.RefAttributes<HTMLDivElement>>;
export declare const BaselineExtend: () => React.JSX.Element;
export type ImgProps = {
    canDrag: boolean;
    isDragging: boolean;
    shouldPixelate: boolean;
    src: string;
    style: CSSProperties;
    onLoad: (ev: React.SyntheticEvent<HTMLImageElement>) => void;
    onMouseDown: (ev: MouseEvent<{}>) => void;
    onError: (() => void) | undefined;
} & DataTestID & ClassName;
export declare const Img: (props: ImgProps) => React.JSX.Element;
export declare const MedatadataTextWrapper: (props: Children) => React.JSX.Element;
export declare const MetadataWrapper: (props: Children) => React.JSX.Element;
type MetadataFileNameProps = DataTestID & Children;
export declare const MetadataFileName: (props: MetadataFileNameProps) => React.JSX.Element;
type MetadataSubTextProps = DataTestID & Children;
export declare const MetadataSubText: (props: MetadataSubTextProps) => React.JSX.Element;
export declare const MetadataIconWrapper: (props: Children) => React.JSX.Element;
export interface IconWrapperProps {
    type: MediaType;
}
export declare const RightHeader: (props: Children) => React.JSX.Element;
export declare const CustomAudioPlayerWrapper: (props: Children) => React.JSX.Element;
type AudioPlayerProps = DataTestID & Children;
export declare const AudioPlayer: {
    (props: AudioPlayerProps): React.JSX.Element;
    displayName: string;
};
type AudioProps = {
    autoPlay: boolean;
    controls: boolean;
    src: string | undefined;
    preload: string;
};
export declare const Audio: React.ForwardRefExoticComponent<AudioProps & React.RefAttributes<HTMLAudioElement>>;
type AudioCoverProps = {
    alt: string | undefined;
    src: string;
};
export declare const AudioCover: (props: AudioCoverProps) => React.JSX.Element;
export declare const DefaultCoverWrapper: (props: Children) => React.JSX.Element;
export declare const DownloadButtonWrapper: (props: Children) => React.JSX.Element;
type CustomVideoPlayerWrapperProps = DataTestID & Children;
export declare const CustomVideoPlayerWrapper: (props: CustomVideoPlayerWrapperProps) => React.JSX.Element;
type SidebarWrapperProps = DataTestID & Children;
export declare const SidebarWrapper: (props: SidebarWrapperProps) => React.JSX.Element;
export declare const SpinnerWrapper: (props: Children) => React.JSX.Element;
export declare const FormattedMessageWrapper: (props: Children) => React.JSX.Element;
export {};
