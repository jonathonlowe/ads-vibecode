import React from 'react';
import { type ReactNode } from 'react';
import { type MessageDescriptor, type WrappedComponentProps } from 'react-intl-next';
import { type FileState } from '@atlaskit/media-client';
import { type WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { type PrimaryErrorReason, type SecondaryErrorReason, type MediaViewerError } from './errors';
import { type FileStateFlags } from './components/types';
import { type MediaTraceContext } from '@atlaskit/media-common';
export type Props = Readonly<{
    error: MediaViewerError;
    supressAnalytics?: boolean;
    fileId: string;
    fileState?: FileState;
    children?: ReactNode;
    fileStateFlags?: FileStateFlags;
    traceContext?: MediaTraceContext;
}>;
export type FormatMessageFn = (messageDescriptor: MessageDescriptor) => string;
export declare const errorReasonToMessages: Array<[
    PrimaryErrorReason | SecondaryErrorReason,
    MessageDescriptor
]>;
export declare const getErrorMessageFromError: (error: MediaViewerError) => MessageDescriptor | undefined;
export declare class ErrorMessage extends React.Component<Props & WrappedComponentProps & WithAnalyticsEventsProps, {}> {
    private getErrorInfo;
    componentDidMount(): void;
    static getEventPayload(error: MediaViewerError, fileId: string, fileState?: FileState, traceContext?: MediaTraceContext): import("./analytics/events/operational/loadFailed").LoadFailedEventPayload | import("./analytics/events/operational/previewUnsupported").PreviewUnsupportedEventPayload;
    render(): React.JSX.Element;
}
declare const ErroMsg: React.ComponentType<Props & WithAnalyticsEventsProps>;
export default ErroMsg;
