import React, { type ComponentType } from 'react';
import { type MediaClient, type FileState, type ErrorFileState } from '@atlaskit/media-client';
import { Outcome } from '../../domain';
import { MediaViewerError } from '../../errors';
import { type Props as RendererProps } from './codeViewerRenderer';
import { BaseViewer } from '../base-viewer';
import { type MediaTraceContext } from '@atlaskit/media-common';
export type Props = {
    mediaClient: MediaClient;
    item: Exclude<FileState, ErrorFileState>;
    collectionName?: string;
    onClose?: () => void;
    onError: (error: MediaViewerError) => void;
    onSuccess: () => void;
    traceContext: MediaTraceContext;
};
export declare class CodeViewer extends BaseViewer<string, Props> {
    static CodeViewerComponent: ComponentType<RendererProps>;
    protected get initialState(): {
        content: Outcome<string, MediaViewerError>;
    };
    protected init(): Promise<void>;
    private loadCodeViewer;
    private getCodeLanguage;
    protected release(): void;
    protected renderSuccessful(content: string): React.JSX.Element;
}
