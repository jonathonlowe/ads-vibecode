import React from 'react';
import { type MediaClient, type FileState } from '@atlaskit/media-client';
import { type Outcome } from '../domain';
import { type MediaViewerError } from '../errors';
import { type MediaTraceContext } from '@atlaskit/media-common';
export type BaseProps = {
    mediaClient: MediaClient;
    item: FileState;
    collectionName?: string;
    traceContext: MediaTraceContext;
};
export type BaseState<Content> = {
    content: Outcome<Content, MediaViewerError>;
};
export declare abstract class BaseViewer<Content, Props extends BaseProps, State extends BaseState<Content> = BaseState<Content>> extends React.Component<Props, State> {
    state: State;
    protected mounted: boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected safeSetState(newState: Partial<State>): void;
    UNSAFE_componentWillReceiveProps(nextProps: Readonly<Props>): void;
    componentDidUpdate(prevProps: Props): void;
    render(): React.JSX.Element;
    private getInitialState;
    private renderDownloadButton;
    protected onMediaDisplayed: () => void;
    protected needsReset(propsA: Props, propsB: Props): boolean;
    protected abstract init(): void;
    protected abstract release(): void;
    protected abstract get initialState(): State;
    protected abstract renderSuccessful(content: Content): React.ReactNode;
}
