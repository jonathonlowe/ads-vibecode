import React from 'react';
import { type ZipInfo, type ZipEntry } from 'unzipit';
import { type MediaClient, type FileState } from '@atlaskit/media-client';
import { Outcome } from '../../domain';
import { BaseViewer } from '../base-viewer';
import { type ArchiveViewerProps } from './types';
import { type WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { ArchiveViewerError } from '../../errors';
export type Props = ArchiveViewerProps & WithAnalyticsEventsProps;
export type Content = {
    src?: string;
    name?: string;
    isDirectory?: boolean;
    selectedArchiveEntry?: ZipEntry;
    hasLoadedEntries?: boolean;
    error?: ArchiveViewerError;
    codeViewerSrc?: string;
    isCodeMimeType?: boolean;
};
export declare const getArchiveEntriesFromFileState: (fileState: FileState, mediaClient: MediaClient, collectionName?: string) => Promise<ZipInfo>;
export declare class ArchiveViewerBase extends BaseViewer<Content, Props> {
    protected init(): Promise<void>;
    protected get initialState(): {
        content: Outcome<Content, ArchiveViewerError>;
    };
    protected release(): void;
    private onError;
    private onSelectedArchiveEntryChange;
    private onHeaderClicked;
    private onViewerLoad;
    private onViewerError;
    private onSidebarLoaded;
    protected renderSuccessful(content: Content): React.JSX.Element;
    private renderArchiveItemViewer;
    private renderPreviewError;
}
export declare const ArchiveViewer: React.ForwardRefExoticComponent<Omit<ArchiveViewerProps, keyof WithAnalyticsEventsProps> & React.RefAttributes<any>>;
