"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rejectAfter = exports.isSameIdentifier = exports.isMacPrivateFile = exports.getSelectedIndex = exports.getMimeTypeFromFilename = exports.getMediaTypeFromFilename = exports.getFormattedFolderName = exports.getFolderParent = exports.extractArchiveFolderName = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mediaClient = require("@atlaskit/media-client");
var _mediaCommon = require("@atlaskit/media-common");
var _mime = require("mime");
var isSameIdentifier = exports.isSameIdentifier = function isSameIdentifier(id1, id2) {
  if ((0, _mediaClient.isFileIdentifier)(id1) && (0, _mediaClient.isFileIdentifier)(id2)) {
    return id1.id === id2.id;
  }
  if (!(0, _mediaClient.isFileIdentifier)(id1) && !(0, _mediaClient.isFileIdentifier)(id2)) {
    return id1.dataURI === id2.dataURI;
  }
  return false;
};

// TODO MS-1752 - current implementation makes viewer navigation to misbehave
// if passed a file with the same id (with different occurrenceKeys) or with the same dataURI twice
var getSelectedIndex = exports.getSelectedIndex = function getSelectedIndex(items, selectedItem) {
  return items.findIndex(function (item) {
    return isSameIdentifier(item, selectedItem);
  });
};
var getMediaTypeFromFilename = exports.getMediaTypeFromFilename = function getMediaTypeFromFilename(filename) {
  var mimeType = getMimeTypeFromFilename(filename);
  return (0, _mediaCommon.getMediaTypeFromMimeType)(mimeType);
};
var getMimeTypeFromFilename = exports.getMimeTypeFromFilename = function getMimeTypeFromFilename(filename) {
  var extension = filename.split('.').pop();
  if (!extension) {
    return '';
  }
  var mimeType = (0, _mime.getType)(extension);
  if (!mimeType) {
    return '';
  }
  return mimeType;
};
var getFolderParent = exports.getFolderParent = function getFolderParent(path) {
  var pathParts = path.substring(0, path.length - 1).split('/');
  pathParts.pop();
  var parent = pathParts.at(-1);
  if (!parent) {
    return ''; // root
  }
  return pathParts.join('/') + '/';
};
var extractArchiveFolderName = exports.extractArchiveFolderName = function extractArchiveFolderName(folderName) {
  var index = folderName.lastIndexOf('.');
  return index > -1 ? folderName.substring(0, index) + '/' : folderName + '/';
};
var getFormattedFolderName = exports.getFormattedFolderName = function getFormattedFolderName(folderName) {
  // We assume name ends with '/' unless it is the root directory
  if (folderName === '') {
    return '';
  }
  var name = folderName.substring(0, folderName.length - 1);
  var index = name.lastIndexOf('/');
  if (index === -1) {
    return name;
  }
  return name.substring(index + 1);
};
var isMacPrivateFile = exports.isMacPrivateFile = function isMacPrivateFile(fileName) {
  return fileName.startsWith('__MACOSX') || fileName.includes('.DS_Store');
};
var rejectAfter = exports.rejectAfter = function rejectAfter(fn) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  return new Promise( /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, reject) {
      var timeoutId;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            timeoutId = setTimeout(function () {
              return reject(new Error('timed out'));
            }, delay);
            _context.prev = 1;
            _context.t0 = resolve;
            _context.next = 5;
            return fn();
          case 5:
            _context.t1 = _context.sent;
            (0, _context.t0)(_context.t1);
            _context.next = 12;
            break;
          case 9:
            _context.prev = 9;
            _context.t2 = _context["catch"](1);
            reject(_context.t2);
          case 12:
            _context.prev = 12;
            clearTimeout(timeoutId);
            return _context.finish(12);
          case 15:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[1, 9, 12, 15]]);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
};