"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoomLevel = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var BASE_ZOOM_LEVELS = [0.06, 0.12, 0.24, 0.48, 1, 1.5, 2, 4, 6, 8];
var sortNumbers = function sortNumbers(nums) {
  return nums.sort(function (a, b) {
    return a - b;
  });
}; // default sorting is alphabetically

var deduplicated = function deduplicated(nums) {
  return sortNumbers(nums).filter(function (num, pos) {
    return pos === 0 || num !== nums[pos - 1];
  });
};
var ZoomLevel = exports.ZoomLevel = /*#__PURE__*/function () {
  function ZoomLevel(initialValue, selectedValue) {
    (0, _classCallCheck2.default)(this, ZoomLevel);
    this.initialValue = initialValue;
    if (!selectedValue) {
      selectedValue = initialValue;
    }
    if (selectedValue < this.min) {
      this.value = this.min;
    } else if (selectedValue > this.max) {
      this.value = this.max;
    } else {
      this.value = selectedValue;
    }
  }
  return (0, _createClass2.default)(ZoomLevel, [{
    key: "zoomLevels",
    get: function get() {
      var _this = this;
      return deduplicated(sortNumbers(BASE_ZOOM_LEVELS.map(function (zoomLevel) {
        return zoomLevel * _this.initialValue;
      }).concat(1) // make sure 100% is selectable
      )); // and that all levels are ordered
    }
  }, {
    key: "min",
    get: function get() {
      return this.zoomLevels[0];
    }
  }, {
    key: "max",
    get: function get() {
      return this.zoomLevels.slice(-1)[0];
    }
  }, {
    key: "asPercentage",
    get: function get() {
      return "".concat(Math.round(this.value * 100), " %");
    }
  }, {
    key: "zoomIn",
    value: function zoomIn() {
      var index = this.zoomLevels.indexOf(this.value);
      var nextValue = this.zoomLevels[index + 1];
      return nextValue ? new ZoomLevel(this.initialValue, nextValue) : this;
    }
  }, {
    key: "zoomOut",
    value: function zoomOut() {
      var index = this.zoomLevels.indexOf(this.value);
      var nextValue = this.zoomLevels[index - 1];
      return nextValue ? new ZoomLevel(this.initialValue, nextValue) : this;
    }
  }, {
    key: "fullyZoomIn",
    value: function fullyZoomIn() {
      return new ZoomLevel(this.initialValue, this.max);
    }
  }, {
    key: "fullyZoomOut",
    value: function fullyZoomOut() {
      return new ZoomLevel(this.initialValue, this.min);
    }
  }, {
    key: "canZoomIn",
    get: function get() {
      return this.value < this.max;
    }
  }, {
    key: "canZoomOut",
    get: function get() {
      return this.value > this.min;
    }
  }]);
}();