"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PDFPasswordInput = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _lockLockedLock = _interopRequireDefault(require("@atlaskit/icon/core/migration/lock-locked--lock"));
var _form = _interopRequireWildcard(require("@atlaskit/form"));
var _reactIntlNext = require("react-intl-next");
var _mediaUi = require("@atlaskit/media-ui");
var _primitives = require("@atlaskit/primitives");
var _react2 = require("@emotion/react");
var _error = _interopRequireDefault(require("@atlaskit/icon/utility/migration/error"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var COLOR_SHADE = '#b6c2cf';
var headingStyle = (0, _react2.css)({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-bold, 700)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: COLOR_SHADE
});
var errorMessageWrapperStyle = (0, _react2.css)({
  marginTop: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  color: '#FD9891',
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  display: 'flex',
  alignItems: 'center'
});
var errorMessageStyle = (0, _react2.css)({
  marginTop: '0px',
  marginLeft: "var(--ds-space-050, 4px)"
});
var headerStyles = (0, _primitives.xcss)({
  textAlign: 'center',
  marginTop: 'space.200',
  marginBottom: 'space.200'
});
var inputStyle = (0, _primitives.xcss)({
  width: '330px'
});
var footerStyles = (0, _primitives.xcss)({
  marginTop: 'space.200',
  display: 'flex',
  justifyContent: 'center'
});
var PDFPasswordInput = exports.PDFPasswordInput = function PDFPasswordInput(_ref) {
  var onSubmit = _ref.onSubmit,
    hasPasswordError = _ref.hasPasswordError,
    onRender = _ref.onRender;
  var passwordInputRef = (0, _react.useRef)(null);
  var onRenderRef = (0, _react.useRef)(onRender);
  var _useState = (0, _react.useState)(hasPasswordError),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    formError = _useState2[0],
    setFormError = _useState2[1];
  var intl = (0, _reactIntlNext.useIntl)();
  (0, _react.useEffect)(function () {
    var _onRenderRef$current;
    (_onRenderRef$current = onRenderRef.current) === null || _onRenderRef$current === void 0 || _onRenderRef$current.call(onRenderRef);
  }, []);
  (0, _react.useEffect)(function () {
    if (hasPasswordError) {
      var _passwordInputRef$cur;
      setFormError(true);
      (_passwordInputRef$cur = passwordInputRef.current) === null || _passwordInputRef$cur === void 0 || _passwordInputRef$cur.focus();
    }
  }, [hasPasswordError]);
  return (0, _react2.jsx)(_form.default, {
    onSubmit: onSubmit
  }, function (_ref2) {
    var formProps = _ref2.formProps,
      submitting = _ref2.submitting;
    return (0, _react2.jsx)("form", formProps, (0, _react2.jsx)(_primitives.Flex, {
      justifyContent: "center"
    }, (0, _react2.jsx)(_lockLockedLock.default, {
      label: "",
      LEGACY_size: "xlarge",
      color: COLOR_SHADE
    })), (0, _react2.jsx)(_primitives.Box, {
      xcss: headerStyles
    }, (0, _react2.jsx)("h1", {
      css: headingStyle
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _mediaUi.messages.password_protected_pdf))), (0, _react2.jsx)(_form.Field, {
      "aria-required": true,
      name: "password",
      defaultValue: "",
      isRequired: true
    }, function (_ref3) {
      var fieldProps = _ref3.fieldProps;
      return (0, _react2.jsx)(_primitives.Box, {
        xcss: inputStyle
      }, (0, _react2.jsx)(_textfield.default, (0, _extends2.default)({}, fieldProps, {
        type: "password",
        "aria-label": intl.formatMessage(_mediaUi.messages.password),
        placeholder: intl.formatMessage(_mediaUi.messages.enter_password),
        ref: passwordInputRef,
        "aria-describedby": formError ? "".concat(fieldProps.id, "-error") : undefined,
        onChange: function onChange(value) {
          fieldProps.onChange(value);
          setFormError(false);
        }
      })), formError && (0, _react2.jsx)("div", {
        css: errorMessageWrapperStyle,
        id: "".concat(fieldProps.id, "-error")
      }, (0, _react2.jsx)(_error.default, {
        color: "currentColor",
        LEGACY_size: "small",
        label: ""
      }), (0, _react2.jsx)("p", {
        css: errorMessageStyle
      }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _mediaUi.messages.incorrect_password))));
    }), (0, _react2.jsx)(_primitives.Box, {
      xcss: footerStyles
    }, (0, _react2.jsx)(_new.default, {
      appearance: "primary",
      type: "submit",
      isLoading: submitting
    }, (0, _react2.jsx)(_reactIntlNext.FormattedMessage, _mediaUi.messages.submit))));
  });
};