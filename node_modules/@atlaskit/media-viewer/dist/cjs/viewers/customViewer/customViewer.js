"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomViewer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _errors = require("../../errors");
var _react = _interopRequireWildcard(require("react"));
var _loading = require("../../loading");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CustomViewer = exports.CustomViewer = function CustomViewer(_ref) {
  var mediaClient = _ref.mediaClient,
    item = _ref.item,
    customRendererConfig = _ref.customRendererConfig,
    collectionName = _ref.collectionName,
    onSuccess = _ref.onSuccess,
    onError = _ref.onError;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    getBinaryContent = _useState2[0],
    setGetBinaryContent = _useState2[1];
  (0, _react.useEffect)(function () {
    setGetBinaryContent(undefined);
    var abortController = new AbortController();
    // This sets the 'getBinaryContent' to an async function that fetches the binary content of the file
    // The 'getBinaryContent' function has to be updated when the item changes
    // This approach handles aborting in-progress request outside of the custom-renderer concern
    if (item.status === 'processed' || item.status === 'failed-processing') {
      setGetBinaryContent(function () {
        return function () {
          return mediaClient.mediaStore.getFileBinary(item.id, collectionName, abortController);
        };
      });
    }
    return function () {
      return abortController.abort();
    };
  }, [collectionName, item, mediaClient]);
  var onLoadFailed = (0, _react.useCallback)(function (error) {
    var mediaError = new _errors.MediaViewerError('custom-viewer-error', error);
    onError(mediaError, item);
  }, [item, onError]);
  if (!getBinaryContent) {
    return /*#__PURE__*/_react.default.createElement(_loading.Spinner, null);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, customRendererConfig.renderContent({
    fileItem: item,
    getBinaryContent: getBinaryContent,
    onLoad: onSuccess,
    onError: onLoadFailed
  }));
};