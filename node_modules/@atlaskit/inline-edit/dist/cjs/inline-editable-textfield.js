/* inline-editable-textfield.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./inline-editable-textfield.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _css = require("@atlaskit/css");
var _error = _interopRequireDefault(require("@atlaskit/icon/utility/migration/error"));
var _inlineDialog = _interopRequireDefault(require("@atlaskit/inline-dialog"));
var _compiled = require("@atlaskit/primitives/compiled");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _colors = require("@atlaskit/theme/colors");
var _inlineEdit = _interopRequireDefault(require("./inline-edit"));
var _excluded = ["errorMessage", "isInvalid"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var errorIconContainerStyles = {
  root: "_vwz41osq _y4ti12x7"
};
var readViewForTextFieldStyles = {
  root: "_11c82smr _1rjcu2gc _18zr12x7 _1e0c1txw _p12f1osq _1nmz1hna"
};
var compactStyles = {
  root: "_1rjc1b66 _18zr12x7"
};
var InlineEditableTextfield = function InlineEditableTextfield(props) {
  var _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    defaultValue = props.defaultValue,
    placeholder = props.placeholder,
    testId = props.testId,
    providedOnCancel = props.onCancel;
  var textFieldRef = (0, _react.useRef)();
  var onCancel = (0, _react.useCallback)(function () {
    if (textFieldRef.current) {
      textFieldRef.current.value = defaultValue || '';
    }
    providedOnCancel === null || providedOnCancel === void 0 || providedOnCancel();
  }, [defaultValue, providedOnCancel]);
  return /*#__PURE__*/_react.default.createElement(_inlineEdit.default, (0, _extends2.default)({}, props, {
    onCancel: onCancel,
    defaultValue: defaultValue,
    editView: function editView(_ref) {
      var errorMessage = _ref.errorMessage,
        isInvalid = _ref.isInvalid,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return /*#__PURE__*/_react.default.createElement(_inlineDialog.default, {
        isOpen: isInvalid,
        content: /*#__PURE__*/_react.default.createElement("div", {
          id: "error-message"
        }, errorMessage),
        placement: "right"
      }, /*#__PURE__*/_react.default.createElement(_textfield.default, (0, _extends2.default)({}, props, {
        ref: textFieldRef,
        elemAfterInput: isInvalid && /*#__PURE__*/_react.default.createElement(_compiled.Box, {
          xcss: errorIconContainerStyles.root
        }, /*#__PURE__*/_react.default.createElement(_error.default, {
          label: "error",
          LEGACY_primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")"),
          color: "var(--ds-icon-danger, #C9372C)"
        })),
        testId: testId,
        isCompact: isCompact,
        autoFocus: true
      })));
    },
    readView: function readView() {
      return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
        xcss: (0, _css.cx)(readViewForTextFieldStyles.root, isCompact && compactStyles.root),
        "data-compact": isCompact,
        testId: testId && "read-view-".concat(testId)
      }, defaultValue || placeholder);
    }
  }));
};
var _default = exports.default = InlineEditableTextfield;