/* read-view.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./read-view.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _react = _interopRequireWildcard(require("react"));
var _compiled = require("@atlaskit/primitives/compiled");
var _colors = require("@atlaskit/theme/colors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var readViewContainerStyles = null;
var editButtonStyles = {
  root: "_12ji1r31 _1qu2glyw _12y3idpf _189e1grb _1dqoglyw _1h6d1j28 _1e0c1ule _19pkze3t _2hwxze3t _otyrze3t _18u0ze3t _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _r06hglyw _bfhk1j28 _vwz4kb7n _1xp41p6i _14ly1bk5 _1j8znqa1 _mizu1r31 _ra3xglyw _128midpf"
};
var readViewWrapperStyles = null;
var readViewFitContainerWidthStyles = null;
var DRAG_THRESHOLD = 5;
var ReadView = function ReadView(_ref) {
  var editButtonLabel = _ref.editButtonLabel,
    onEditRequested = _ref.onEditRequested,
    postReadViewClick = _ref.postReadViewClick,
    editButtonRef = _ref.editButtonRef,
    readViewFitContainerWidth = _ref.readViewFitContainerWidth,
    readView = _ref.readView,
    testId = _ref.testId;
  var startX = (0, _react.useRef)(0);
  var startY = (0, _react.useRef)(0);
  var mouseHasMovedAfterMouseDown = function mouseHasMovedAfterMouseDown(event) {
    return Math.abs(startX.current - event.clientX) >= DRAG_THRESHOLD || Math.abs(startY.current - event.clientY) >= DRAG_THRESHOLD;
  };
  var onReadViewClick = function onReadViewClick(event) {
    var element = event.target;
    /**
     * If a link is clicked in the read view, default action should be taken
     */
    if (element.tagName.toLowerCase() !== 'a' && !mouseHasMovedAfterMouseDown(event)) {
      event.preventDefault();
      onEditRequested();
      postReadViewClick();
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _runtime.ax)(["_vwz4kb7n"])
  }, /*#__PURE__*/_react.default.createElement(_compiled.Pressable, {
    xcss: editButtonStyles.root,
    onClick: onEditRequested,
    ref: editButtonRef,
    testId: testId && "".concat(testId, "--edit-button"),
    "aria-label": editButtonLabel
  }), /*#__PURE__*/_react.default.createElement("div", {
    /**
     * It is not normally acceptable to add click handlers to non-interactive elements
     * as this is an accessibility anti-pattern. However, because this instance is
     * account for clicking on links that may be embedded within inline-edit and not
     * creating an inaccessible custom element, we can add role="presentation" so that
     * there is no negative impacts to assistive technologies.
     * (Why links are embeeded in inline-edit is for another day...)
     */
    role: "presentation",
    onClick: onReadViewClick,
    onMouseDown: function onMouseDown(e) {
      startX.current = e.clientX;
      startY.current = e.clientY;
    },
    "data-read-view-fit-container-width": readViewFitContainerWidth,
    className: (0, _runtime.ax)(["_2rko1sit _v564thzt _1h6d1j28 _1dqonqa1 _189e1bk5 _1e0c1o8l _vchhusvi _1bsb1wug _p12f1osq _irr32tgk", readViewFitContainerWidth && "_1bsb1osq"]),
    style: {
      "--_1y60f1n": (0, _runtime.ix)("var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30, ")"))
    }
  }, readView()));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = ReadView;