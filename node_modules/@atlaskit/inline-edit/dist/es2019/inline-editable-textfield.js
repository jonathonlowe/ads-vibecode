/* inline-editable-textfield.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./inline-editable-textfield.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useRef } from 'react';
import { cx } from '@atlaskit/css';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import InlineDialog from '@atlaskit/inline-dialog';
import { Box } from '@atlaskit/primitives/compiled';
import Textfield from '@atlaskit/textfield';
import { R400 } from '@atlaskit/theme/colors';
import InlineEdit from './inline-edit';
const errorIconContainerStyles = {
  root: "_vwz41osq _y4ti12x7"
};
const readViewForTextFieldStyles = {
  root: "_11c82smr _1rjcu2gc _18zr12x7 _1e0c1txw _p12f1osq _1nmz1hna"
};
const compactStyles = {
  root: "_1rjc1b66 _18zr12x7"
};
const InlineEditableTextfield = props => {
  const {
    isCompact = false,
    defaultValue,
    placeholder,
    testId,
    onCancel: providedOnCancel
  } = props;
  const textFieldRef = useRef();
  const onCancel = useCallback(() => {
    if (textFieldRef.current) {
      textFieldRef.current.value = defaultValue || '';
    }
    providedOnCancel === null || providedOnCancel === void 0 ? void 0 : providedOnCancel();
  }, [defaultValue, providedOnCancel]);
  return /*#__PURE__*/React.createElement(InlineEdit, _extends({}, props, {
    onCancel: onCancel,
    defaultValue: defaultValue,
    editView: ({
      errorMessage,
      isInvalid,
      ...props
    }) => /*#__PURE__*/React.createElement(InlineDialog, {
      isOpen: isInvalid,
      content: /*#__PURE__*/React.createElement("div", {
        id: "error-message"
      }, errorMessage),
      placement: "right"
    }, /*#__PURE__*/React.createElement(Textfield, _extends({}, props, {
      ref: textFieldRef,
      elemAfterInput: isInvalid && /*#__PURE__*/React.createElement(Box, {
        xcss: errorIconContainerStyles.root
      }, /*#__PURE__*/React.createElement(ErrorIcon, {
        label: "error",
        LEGACY_primaryColor: `var(--ds-icon-danger, ${R400})`,
        color: "var(--ds-icon-danger, #C9372C)"
      })),
      testId: testId,
      isCompact: isCompact,
      autoFocus: true
    }))),
    readView: () => /*#__PURE__*/React.createElement(Box, {
      xcss: cx(readViewForTextFieldStyles.root, isCompact && compactStyles.root),
      "data-compact": isCompact,
      testId: testId && `read-view-${testId}`
    }, defaultValue || placeholder)
  }));
};
export default InlineEditableTextfield;