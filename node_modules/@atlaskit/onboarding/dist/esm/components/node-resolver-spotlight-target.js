/* node-resolver-spotlight-target.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./node-resolver-spotlight-target.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useEffect, useRef } from 'react';
import NodeResolver from 'react-node-resolver';
var spanStyles = null;
/**
 * A wrapper component that conditionally applies a NodeResolver to its children.
 *
 * Note: NodeResolver should not be used in React 18 concurrent mode. This component
 * is intended to be removed once the feature flag  is removed.
 * @param {boolean} props.hasNodeResolver - Determines whether to apply the NodeResolver.
 * @param {ReactElement} props.children - The child elements to be wrapped.
 * @param {string} props.name - The name to reference from Spotlight.
 * @param {ReactElement} props.getTargetRef - Setting up Target Node in Spotlight Manager.
 * @returns {ReactElement} The children wrapped with NodeResolver if hasNodeResolver is true, wrape the children in a div setting innerRef with ref to the div.
 */
var NodeResolverSpotlightTarget = function NodeResolverSpotlightTarget(_ref) {
  var hasNodeResolver = _ref.hasNodeResolver,
    children = _ref.children,
    getTargetRef = _ref.getTargetRef,
    name = _ref.name;
  var divRef = useRef(null);
  useEffect(function () {
    var targetRef = getTargetRef(name);
    if (!hasNodeResolver) {
      var _divRef$current;
      targetRef((_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.firstElementChild);
    }
    return function () {
      !hasNodeResolver && targetRef(undefined);
    };
  }, [hasNodeResolver, name, getTargetRef]);
  if (hasNodeResolver) {
    return /*#__PURE__*/React.createElement(NodeResolver, {
      innerRef: getTargetRef(name)
    }, children);
  }
  return /*#__PURE__*/React.createElement("span", {
    ref: divRef,
    className: ax(["_1e0c1bgi"])
  }, children);
};
export default NodeResolverSpotlightTarget;