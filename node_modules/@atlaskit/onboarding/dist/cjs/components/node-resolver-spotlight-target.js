/* node-resolver-spotlight-target.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./node-resolver-spotlight-target.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var spanStyles = null;
/**
 * A wrapper component that conditionally applies a NodeResolver to its children.
 *
 * Note: NodeResolver should not be used in React 18 concurrent mode. This component
 * is intended to be removed once the feature flag  is removed.
 * @param {boolean} props.hasNodeResolver - Determines whether to apply the NodeResolver.
 * @param {ReactElement} props.children - The child elements to be wrapped.
 * @param {string} props.name - The name to reference from Spotlight.
 * @param {ReactElement} props.getTargetRef - Setting up Target Node in Spotlight Manager.
 * @returns {ReactElement} The children wrapped with NodeResolver if hasNodeResolver is true, wrape the children in a div setting innerRef with ref to the div.
 */
var NodeResolverSpotlightTarget = function NodeResolverSpotlightTarget(_ref) {
  var hasNodeResolver = _ref.hasNodeResolver,
    children = _ref.children,
    getTargetRef = _ref.getTargetRef,
    name = _ref.name;
  var divRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var targetRef = getTargetRef(name);
    if (!hasNodeResolver) {
      var _divRef$current;
      targetRef((_divRef$current = divRef.current) === null || _divRef$current === void 0 ? void 0 : _divRef$current.firstElementChild);
    }
    return function () {
      !hasNodeResolver && targetRef(undefined);
    };
  }, [hasNodeResolver, name, getTargetRef]);
  if (hasNodeResolver) {
    return /*#__PURE__*/React.createElement(_reactNodeResolver.default, {
      innerRef: getTargetRef(name)
    }, children);
  }
  return /*#__PURE__*/React.createElement("span", {
    ref: divRef,
    className: (0, _runtime.ax)(["_1e0c1bgi"])
  }, children);
};
var _default = exports.default = NodeResolverSpotlightTarget;