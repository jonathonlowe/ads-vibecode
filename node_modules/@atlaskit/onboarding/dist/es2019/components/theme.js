const spotlightTheme = {
  default: {
    background: {
      default: "var(--ds-background-inverse-subtle, #00000029)",
      hover: "var(--ds-background-inverse-subtle-hovered, #0000003D)",
      active: "var(--ds-background-inverse-subtle-pressed, #00000052)",
      disabled: "var(--ds-background-disabled, #091E4208)",
      selected: "var(--ds-background-inverse-subtle-pressed, #00000052)",
      focus: "var(--ds-background-inverse-subtle, #00000029)"
    },
    color: {
      default: "var(--ds-text-inverse, #FFFFFF)",
      hover: "var(--ds-text-inverse, #FFFFFF)",
      active: "var(--ds-text-inverse, #FFFFFF)",
      disabled: {
        light: "var(--ds-text-disabled, #091E424F)",
        dark: "var(--ds-text-disabled, #091E424F)"
      },
      selected: "var(--ds-text-inverse, #FFFFFF)",
      focus: "var(--ds-text-inverse, #FFFFFF)"
    }
  },
  subtle: {
    background: {
      default: 'none',
      hover: "var(--ds-background-inverse-subtle-hovered, #0000003D)",
      active: "var(--ds-background-inverse-subtle-pressed, #00000052)",
      disabled: 'none',
      selected: {
        light: "var(--ds-background-selected-hovered, #CCE0FF)",
        dark: "var(--ds-background-selected-hovered, #CCE0FF)"
      },
      focusSelected: {
        light: "var(--ds-background-selected-hovered, #CCE0FF)",
        dark: "var(--ds-background-selected-hovered, #CCE0FF)"
      }
    },
    color: {
      default: "var(--ds-text-inverse, #FFFFFF)",
      hover: "var(--ds-text-inverse, #FFFFFF)",
      active: "var(--ds-text-inverse, #FFFFFF)",
      disabled: "var(--ds-text-disabled, #091E424F)",
      selected: "var(--ds-text-inverse, #FFFFFF)",
      focus: "var(--ds-text-inverse, #FFFFFF)"
    }
  },
  'subtle-link': {
    textDecoration: {
      hover: `underline ${"var(--ds-text-inverse, #FFFFFF)"}`
    },
    textDecorationLine: {
      active: 'none'
    },
    color: {
      default: "var(--ds-text-inverse, #FFFFFF)",
      hover: "var(--ds-text-inverse, #FFFFFF)",
      active: "var(--ds-text-inverse, #FFFFFF)",
      disabled: "var(--ds-text-discovery, #5E4DB2)",
      selected: "var(--ds-text-selected, #0C66E4)",
      focus: "var(--ds-text-inverse, #FFFFFF)"
    }
  }
};
const modalTheme = {
  primary: {
    background: {
      default: "var(--ds-background-discovery-bold, #6E5DC6)",
      hover: "var(--ds-background-discovery-bold-hovered, #5E4DB2)",
      active: "var(--ds-background-discovery-bold-pressed, #352C63)",
      disabled: {
        light: "var(--ds-background-disabled, #091E4208)",
        dark: "var(--ds-background-disabled, #091E4208)"
      },
      selected: "var(--ds-background-selected-hovered, #CCE0FF)",
      focus: "var(--ds-background-discovery-bold-hovered, #5E4DB2)"
    },
    color: {
      default: "var(--ds-text-inverse, #FFFFFF)",
      disabled: {
        light: "var(--ds-text-disabled, #091E424F)",
        dark: "var(--ds-text-disabled, #091E424F)"
      },
      selected: "var(--ds-text-selected, #0C66E4)",
      focus: "var(--ds-text-inverse, #FFFFFF)"
    }
  }
};
function extract(newTheme, {
  mode,
  appearance,
  state
}) {
  if (!newTheme[appearance]) {
    return undefined;
  }
  const root = newTheme[appearance];
  return Object.keys(root).reduce((acc, val) => {
    let node = root;
    [val, state, mode].forEach(item => {
      if (!node[item]) {
        return undefined;
      }
      if (typeof node[item] !== 'object') {
        acc[val] = node[item];
        return undefined;
      }
      node = node[item];
      return undefined;
    });
    return acc;
  }, {});
}

/**
 * @deprecated
 * Custom button themes are deprecated and will be removed in the future.
 */
export const spotlightButtonTheme = (current, themeProps) => {
  const {
    buttonStyles,
    ...rest
  } = current(themeProps);
  return {
    buttonStyles: {
      ...buttonStyles,
      ...extract(spotlightTheme, themeProps)
    },
    ...rest
  };
};

/**
 * @deprecated
 * Custom button themes are deprecated and will be removed in the future.
 */
export const modalButtonTheme = (current, themeProps) => {
  const {
    buttonStyles,
    ...rest
  } = current(themeProps);
  return {
    buttonStyles: {
      ...buttonStyles,
      ...extract(modalTheme, themeProps)
    },
    ...rest
  };
};