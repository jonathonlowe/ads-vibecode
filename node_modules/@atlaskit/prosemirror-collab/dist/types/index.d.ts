import type { EditorState, Transaction } from '@atlaskit/editor-prosemirror/state';
import { Plugin } from '@atlaskit/editor-prosemirror/state';
import type { Step as ProseMirrorStep, Transform as ProseMirrorTransform } from '@atlaskit/editor-prosemirror/transform';
declare class Rebaseable {
    readonly step: ProseMirrorStep;
    readonly inverted: ProseMirrorStep;
    readonly origin: ProseMirrorTransform;
    constructor(step: ProseMirrorStep, inverted: ProseMirrorStep, origin: ProseMirrorTransform);
}
export declare function rebaseSteps(steps: readonly Rebaseable[], over: readonly ProseMirrorStep[], transform: ProseMirrorTransform): Rebaseable[];
declare class CollabState {
    readonly version: number;
    readonly unconfirmed: readonly Rebaseable[];
    constructor(version: number, unconfirmed: readonly Rebaseable[]);
}
type CollabConfig = {
    version?: number;
    clientID?: number | string | null;
    transformUnconfirmed?: (steps: Rebaseable[]) => Rebaseable[];
};
export declare function collab(config?: CollabConfig): Plugin;
/**
 * Get the document before the unconfirmed steps were applied.
 * This is used to facilitate tab syncing across multiple tabs while offline, by returning the document before the unconfirmed steps were
 * applied we can ensure each tab starts from the same doc.
 * @param state The editor state
 * @returns The document before the unconfirmed steps were applied
 */
export declare function getDocBeforeUnconfirmedSteps(state: EditorState): import("prosemirror-model").Node;
/**
 * Sync the document, version and unconfirmed steps from another source.
 * This is used to facilitate tab syncing across multiple tabs while offline, because we no longer have access to the central authority.
 *
 * @param state The editor state
 * @param version the version number of the last update received from the central authority
 * @param docJSON the document corresponding with the version
 * @param unconfirmedSteps the unconfirmed steps that havent been successfully sent to the server yet
 * @returns A transaction that represents the new state of the editor after receiving the new steps, doc and version
 */
export declare function syncFromAnotherSource(state: EditorState, version: number, docJSON: any, unconfirmedSteps: readonly ProseMirrorStep[]): Transaction;
export declare function receiveTransaction(state: EditorState, steps: readonly ProseMirrorStep[], clientIDs: readonly (string | number)[], options?: {
    mapSelectionBackward?: boolean;
}): Transaction;
export declare function sendableSteps(state: EditorState): {
    version: number;
    steps: readonly ProseMirrorStep[];
    clientID: number | string;
    origins: readonly Transaction[];
} | null;
export declare function getCollabState(state: EditorState): CollabState | undefined;
export {};
