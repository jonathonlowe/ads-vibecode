import React from 'react';
import { type PopupUserPickerProps } from '../types';
interface State {
    flipped: boolean;
}
export declare class PopupUserPickerWithoutAnalytics extends React.Component<PopupUserPickerProps, State> {
    static defaultProps: Partial<PopupUserPickerProps>;
    state: {
        flipped: boolean;
    };
    handleFlipStyle: (data: {
        flipped: boolean;
        styles: any;
        popper: any;
    }) => {
        flipped: boolean;
        styles: any;
        popper: any;
    };
    render(): React.JSX.Element;
}
export declare const PopupUserPicker: React.ForwardRefExoticComponent<Omit<Pick<Omit<{
    fieldId: string | null;
    options?: import("../types").OptionData[] | undefined;
    width?: string | number | undefined;
    menuMinWidth?: number | undefined;
    maxPickerHeight?: number | undefined;
    textFieldBackgroundColor?: boolean | undefined;
    loadOptions?: import("../types").LoadOptions | undefined;
    loadOptionsErrorMessage?: ((value: {
        inputValue: string;
    }) => React.ReactNode) | undefined;
    loadUserSource?: import("../types").LoadUserSource | undefined;
    onChange?: import("../types").OnChange | undefined;
    isMulti?: boolean | undefined;
    search?: string | undefined;
    anchor?: React.ComponentType<any> | undefined;
    open?: boolean | undefined;
    isLoading?: boolean | undefined;
    onInputChange?: import("../types").OnInputChange | undefined;
    onSelection?: import("../types").OnOption | undefined;
    onFocus?: import("../types").OnPicker | undefined;
    onBlur?: import("../types").OnPicker | undefined;
    onClear?: import("../types").OnPicker | undefined;
    onOpen?: import("../types").OnPicker | undefined;
    onClose?: import("../types").OnPicker | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<Element>) => void) | undefined;
    appearance?: import("../types").Appearance | undefined;
    subtle?: boolean | undefined;
    noBorder?: boolean | undefined;
    styles?: import("@atlaskit/select").StylesConfig | undefined;
    components?: Partial<import("packages/design-system/react-select/dist/types/components").SelectComponents<import("../types").OptionData, boolean, import("@atlaskit/select").GroupType<import("../types").OptionData>>> | undefined;
    defaultValue?: import("../types").DefaultValue;
    placeholder?: React.ReactNode;
    placeholderAvatar?: "team" | "person" | undefined;
    addMoreMessage?: string | undefined;
    noOptionsMessage?: React.ReactNode | ((value: {
        inputValue: string;
    }) => React.ReactNode);
    footer?: React.ReactNode;
    value?: import("../types").Value;
    isDisabled?: boolean | undefined;
    isInvalid?: boolean | undefined;
    isClearable?: boolean | undefined;
    clearValueLabel?: string | undefined;
    menuPosition?: "absolute" | "fixed" | undefined;
    captureMenuScroll?: boolean | undefined;
    menuPortalTarget?: HTMLElement | undefined;
    allowEmail?: boolean | undefined;
    suggestEmailsForDomain?: string | undefined;
    emailLabel?: string | undefined;
    disableInput?: boolean | undefined;
    isValidEmail?: import("./emailValidation").EmailValidator | undefined;
    autoFocus?: boolean | undefined;
    maxOptions?: number | undefined;
    inputId?: string | undefined;
    closeMenuOnScroll?: boolean | EventListener | undefined;
    menuShouldBlockScroll?: boolean | undefined;
    ariaLabel?: string | undefined;
    ariaLabelledBy?: string | undefined;
    ariaDescribedBy?: string | undefined;
    ariaLive?: "polite" | "off" | "assertive" | undefined;
    name?: string | undefined;
    header?: React.ReactNode;
    required?: boolean | undefined;
    UNSAFE_hasDraggableParentComponent?: boolean | undefined;
    openMenuOnClick?: boolean | undefined;
    strategy?: "absolute" | "fixed" | undefined;
    showClearIndicator?: boolean | undefined;
} & {
    target: import("../types").Target;
    popupTitle?: string | undefined;
    boundariesElement?: import("../types").BoundariesElement | undefined;
    offset?: [number, number] | undefined;
    placement?: import("@popperjs/core").Placement | undefined;
    rootBoundary?: import("../types").RootBoundary | undefined;
    shouldFlip?: boolean | undefined;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, never> & {
    options?: import("../types").OptionData[] | undefined;
    search?: string | undefined;
    placeholder?: React.ReactNode;
    isDisabled?: boolean | undefined;
    offset?: [number, number] | undefined;
    autoFocus?: boolean | undefined;
    captureMenuScroll?: boolean | undefined;
    closeMenuOnScroll?: boolean | EventListener | undefined;
    components?: Partial<import("packages/design-system/react-select/dist/types/components").SelectComponents<import("../types").OptionData, boolean, import("@atlaskit/select").GroupType<import("../types").OptionData>>> | undefined;
    inputId?: string | undefined;
    isClearable?: boolean | undefined;
    isInvalid?: boolean | undefined;
    isLoading?: boolean | undefined;
    isMulti?: boolean | undefined;
    menuPosition?: "absolute" | "fixed" | undefined;
    menuPortalTarget?: HTMLElement | undefined;
    menuShouldBlockScroll?: boolean | undefined;
    name?: string | undefined;
    noOptionsMessage?: React.ReactNode | ((value: {
        inputValue: string;
    }) => React.ReactNode);
    onBlur?: import("../types").OnPicker | undefined;
    onChange?: import("../types").OnChange | undefined;
    onFocus?: import("../types").OnPicker | undefined;
    onInputChange?: import("../types").OnInputChange | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<Element>) => void) | undefined;
    openMenuOnClick?: boolean | undefined;
    styles?: import("@atlaskit/select").StylesConfig | undefined;
    value?: import("../types").Value;
    required?: boolean | undefined;
    appearance?: import("../types").Appearance | undefined;
    footer?: React.ReactNode;
    target?: import("../types").Target | undefined;
    defaultValue?: import("../types").DefaultValue;
    fieldId?: string | null | undefined;
    width?: string | number | undefined;
    menuMinWidth?: number | undefined;
    maxPickerHeight?: number | undefined;
    textFieldBackgroundColor?: boolean | undefined;
    loadOptions?: import("../types").LoadOptions | undefined;
    loadOptionsErrorMessage?: ((value: {
        inputValue: string;
    }) => React.ReactNode) | undefined;
    loadUserSource?: import("../types").LoadUserSource | undefined;
    anchor?: React.ComponentType<any> | undefined;
    open?: boolean | undefined;
    onSelection?: import("../types").OnOption | undefined;
    onClear?: import("../types").OnPicker | undefined;
    onOpen?: import("../types").OnPicker | undefined;
    onClose?: import("../types").OnPicker | undefined;
    subtle?: boolean | undefined;
    noBorder?: boolean | undefined;
    placeholderAvatar?: "team" | "person" | undefined;
    addMoreMessage?: string | undefined;
    clearValueLabel?: string | undefined;
    allowEmail?: boolean | undefined;
    suggestEmailsForDomain?: string | undefined;
    emailLabel?: string | undefined;
    disableInput?: boolean | undefined;
    isValidEmail?: import("./emailValidation").EmailValidator | undefined;
    maxOptions?: number | undefined;
    ariaLabel?: string | undefined;
    ariaLabelledBy?: string | undefined;
    ariaDescribedBy?: string | undefined;
    ariaLive?: "polite" | "off" | "assertive" | undefined;
    header?: React.ReactNode;
    UNSAFE_hasDraggableParentComponent?: boolean | undefined;
    strategy?: "absolute" | "fixed" | undefined;
    showClearIndicator?: boolean | undefined;
    popupTitle?: string | undefined;
    placement?: import("@popperjs/core").Placement | undefined;
    rootBoundary?: import("../types").RootBoundary | undefined;
    boundariesElement?: import("../types").BoundariesElement | undefined;
    shouldFlip?: boolean | undefined;
} & {
    ref?: React.Ref<any> | undefined;
    createAnalyticsEvent?: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | undefined;
}, "ref"> & React.RefAttributes<any>>;
export {};
