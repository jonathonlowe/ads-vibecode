import { type ReactChild, type ReactElement, type ReactNode } from 'react';
import { type AtlaskitSelectValue, type ExternalUser, type Custom, type Email, type Option, type OptionData, type Promisable, type Team, type Group, type User, type OptionIdentifier, type DefaultValue, type LozengeProps } from '../types';
export declare const isExternalUser: (option: OptionData) => option is ExternalUser;
export declare const isUser: (option: OptionData) => option is User;
export declare const isTeam: (option: OptionData) => option is Team;
export declare const isGroup: (option: OptionData) => option is Group;
export declare const isEmail: (option: OptionData) => option is Email;
export declare const isCustom: (option: OptionData) => option is Custom;
export declare const isDefaultValuePopulated: (value?: DefaultValue) => boolean;
export declare const optionToSelectableOption: (option: OptionData | OptionIdentifier) => Option;
export declare const extractOptionValue: (value: AtlaskitSelectValue) => OptionData | OptionData[] | undefined;
export declare const isIterable: (a: any) => a is Iterable<Promisable<OptionData | OptionData[]>>;
export declare const getOptions: import("memoize-one").MemoizedFn<(options: OptionData[]) => Option[]>;
export interface OptionToSelectableOptions {
    (defaultValue: OptionData): Option;
    (defaultValue: OptionData[]): Option[];
    (defaultValue?: null): null;
    (defaultValue?: DefaultValue): Option | Option[] | null | undefined;
}
export declare const optionToSelectableOptions: OptionToSelectableOptions;
export declare const getAvatarSize: (appearance: string) => 'xsmall' | 'small' | 'medium';
export declare const isChildInput: (child: ReactChild) => child is ReactElement<any, string | import("react").JSXElementConstructor<any>>;
export declare const isSingleValue: (value?: AtlaskitSelectValue) => value is Option;
export declare const hasValue: (value?: string) => value is string;
export declare const callCallback: <U extends any[], R>(callback: ((...U: U) => R) | undefined, ...args: U) => R | undefined;
export declare const getAvatarUrl: (optionData: OptionData) => string | undefined;
export declare const isPopupUserPickerByComponent: (SelectComponent: React.ComponentType<any>) => boolean;
export declare const isPopupUserPickerByProps: (selectProps: any) => boolean;
export declare const isLozengeText: (lozengeProp: ReactNode | LozengeProps) => lozengeProp is LozengeProps;
