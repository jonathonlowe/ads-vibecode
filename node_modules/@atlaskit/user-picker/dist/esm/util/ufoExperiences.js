import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { ExperiencePerformanceTypes, ExperienceTypes, ConcurrentExperience, UFOExperienceState } from '@atlaskit/ufo';
export var userPickerRenderedUfoExperience = new ConcurrentExperience('user-picker-rendered', {
  platform: {
    component: 'user-picker'
  },
  type: ExperienceTypes.Load,
  performanceType: ExperiencePerformanceTypes.PageSegmentLoad
});
export var userPickerOptionsShownUfoExperience = new ConcurrentExperience('user-picker-options-shown', {
  platform: {
    component: 'user-picker'
  },
  type: ExperienceTypes.Operation,
  performanceType: ExperiencePerformanceTypes.InlineResult
});
export var UfoErrorBoundary = /*#__PURE__*/function (_React$Component) {
  function UfoErrorBoundary() {
    _classCallCheck(this, UfoErrorBoundary);
    return _callSuper(this, UfoErrorBoundary, arguments);
  }
  _inherits(UfoErrorBoundary, _React$Component);
  return _createClass(UfoErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch() {
      var instance = userPickerRenderedUfoExperience.getInstance(this.props.id);
      if (instance.state.id !== UFOExperienceState.FAILED.id) {
        instance.failure();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
}(React.Component);