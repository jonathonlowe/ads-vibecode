import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import Avatar from '@atlaskit/avatar';
import TeamAvatar from '@atlaskit/teams-avatar';
import React from 'react';
import { getAvatarSize } from './utils';
export var SizeableAvatar = /*#__PURE__*/function (_React$PureComponent) {
  function SizeableAvatar() {
    _classCallCheck(this, SizeableAvatar);
    return _callSuper(this, SizeableAvatar, arguments);
  }
  _inherits(SizeableAvatar, _React$PureComponent);
  return _createClass(SizeableAvatar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        src = _this$props.src,
        presence = _this$props.presence,
        appearance = _this$props.appearance,
        _this$props$type = _this$props.type,
        type = _this$props$type === void 0 ? 'person' : _this$props$type;
      var props = {
        size: getAvatarSize(appearance),
        src: src,
        borderColor: 'transparent',
        presence: presence
      };
      return type === 'team' ? /*#__PURE__*/React.createElement(TeamAvatar, props) : /*#__PURE__*/React.createElement(Avatar, props);
    }
  }]);
}(React.PureComponent);