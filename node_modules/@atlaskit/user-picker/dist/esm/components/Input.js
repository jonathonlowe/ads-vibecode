/* Input.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./Input.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { components } from '@atlaskit/select';
var inputStyles = {
  root: "_5ce6131l _1ir3kb7n _h5gq131l"
};
export var Input = /*#__PURE__*/function (_React$Component) {
  function Input() {
    var _this;
    _classCallCheck(this, Input);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Input, [].concat(args));
    // onKeyPress is used instead as
    // react-select is using onKeyDown for capturing keyboard input
    _defineProperty(_this, "handleKeyPress", function (e) {
      var _this$props$selectPro;
      if (e.key === 'Enter') {
        e.preventDefault();
      }
      //@ts-ignore react-select unsupported props
      if ((_this$props$selectPro = _this.props.selectProps) !== null && _this$props$selectPro !== void 0 && _this$props$selectPro.disableInput) {
        e.preventDefault();
      }
    });
    return _this;
  }
  _inherits(Input, _React$Component);
  return _createClass(Input, [{
    key: "ariaLabelledBy",
    get:
    /**
     * Overrides the default behaviour of react-select lib
     *
     * The getter is a workaround for original behaviour of the react-select lib.
     * Placeholder and Input are linked not via label, aria-label or aria-labeledby, but through aria-describedby.
     * Basically in the getter we reassign Placeholder ID from aria-describedby to aria-labelledby
     * {@link https://github.com/JedWatson/react-select/issues/5651#issue-1731353197 GitHub}
     */
    function get() {
      var _this$props$ariaLabe;
      return (_this$props$ariaLabe = this.props['aria-labelledby']) !== null && _this$props$ariaLabe !== void 0 ? _this$props$ariaLabe : this.props['aria-describedby'];
    }
  }, {
    key: "ariaDescribedBy",
    get: function get() {
      var _this$props$selectPro2, _this$props$selectPro3;
      return (_this$props$selectPro2 = (_this$props$selectPro3 = this.props.selectProps) === null || _this$props$selectPro3 === void 0 ? void 0 : _this$props$selectPro3['aria-describedby']) !== null && _this$props$selectPro2 !== void 0 ? _this$props$selectPro2 : this.props['aria-describedby'];
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(components.Input, _extends({}, this.props, {
        "aria-labelledby": this.ariaLabelledBy,
        "aria-describedby": this.ariaDescribedBy,
        innerRef: this.props.innerRef,
        onKeyPress: this.handleKeyPress,
        xcss: inputStyles.root
      }));
    }
  }]);
}(React.Component);