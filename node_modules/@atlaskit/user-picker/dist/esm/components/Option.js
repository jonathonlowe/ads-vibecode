import { Box } from '@atlaskit/primitives/compiled';
import { components } from '@atlaskit/select';
import Tooltip from '@atlaskit/tooltip';
import React from 'react';
import { UserOption } from './UserOption';
import AsyncExternalOption from './ExternalUserOption';
import AsyncTeamOption from './TeamOption';
import AsyncGroupOption from './GroupOption';
import AsyncEmailOption from './EmailOption';
import AsyncCustomOption from './CustomOption';
import { isCustom, isEmail, isTeam, isUser, isGroup, isExternalUser } from './utils';
import { isValidEmail } from './emailValidation';
var defaultOption = function defaultOption(_ref) {
  var data = _ref.data.data,
    isSelected = _ref.isSelected,
    status = _ref.status;
  return (
    /*#__PURE__*/
    // @ts-expect-error - <UserOption> expects `data` to be of User interface, but data is OptionData interface by default. Check if the `user` props in UserOption should also accept OptionData or refactor this file to accept generics
    React.createElement(UserOption, {
      user: data,
      status: status,
      isSelected: isSelected
    })
  );
};
var dataOption = function dataOption(_ref2) {
  var data = _ref2.data.data,
    isSelected = _ref2.isSelected,
    status = _ref2.status,
    selectProps = _ref2.selectProps;
  if (isExternalUser(data)) {
    return /*#__PURE__*/React.createElement(AsyncExternalOption, {
      user: data,
      status: status,
      isSelected: isSelected
    });
  }
  if (isUser(data)) {
    return /*#__PURE__*/React.createElement(UserOption, {
      user: data,
      status: status,
      isSelected: isSelected
    });
  }
  if (isEmail(data)) {
    return /*#__PURE__*/React.createElement(AsyncEmailOption, {
      email: data,
      emailValidity: isValidEmail(data.id),
      isSelected: isSelected,
      label: selectProps.emailLabel
    });
  }
  if (isTeam(data)) {
    return /*#__PURE__*/React.createElement(AsyncTeamOption, {
      team: data,
      isSelected: isSelected
    });
  }
  if (isGroup(data)) {
    return /*#__PURE__*/React.createElement(AsyncGroupOption, {
      group: data,
      isSelected: isSelected
    });
  }
  if (isCustom(data)) {
    return /*#__PURE__*/React.createElement(AsyncCustomOption, {
      data: data,
      isSelected: isSelected
    });
  }
  return null;
};
var dataOptionWithTooltip = function dataOptionWithTooltip(props) {
  var _props$data;
  if ((_props$data = props.data) !== null && _props$data !== void 0 && (_props$data = _props$data.data) !== null && _props$data !== void 0 && _props$data.tooltip) {
    var _props$data2;
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: (_props$data2 = props.data) === null || _props$data2 === void 0 || (_props$data2 = _props$data2.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.tooltip
    }, function (tooltipProps) {
      return /*#__PURE__*/React.createElement(Box, tooltipProps, dataOption(props));
    });
  }
  return dataOption(props);
};
export var Option = function Option(props) {
  return /*#__PURE__*/React.createElement(components.Option, props, /*#__PURE__*/React.createElement(React.Suspense, {
    fallback: defaultOption(props)
  }, dataOptionWithTooltip(props)));
};