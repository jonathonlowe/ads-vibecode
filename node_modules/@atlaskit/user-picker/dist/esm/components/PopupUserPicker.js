import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { PopupSelect } from '@atlaskit/select';
import React from 'react';
import { getPopupComponents } from './components';
import { getPopupStyles } from './styles';
import { getPopupProps } from './popup';
import { BaseUserPickerWithoutAnalytics } from './BaseUserPicker';
import { fg } from '@atlaskit/platform-feature-flags';
export var PopupUserPickerWithoutAnalytics = /*#__PURE__*/function (_React$Component) {
  function PopupUserPickerWithoutAnalytics() {
    var _this;
    _classCallCheck(this, PopupUserPickerWithoutAnalytics);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, PopupUserPickerWithoutAnalytics, [].concat(args));
    _defineProperty(_this, "state", {
      flipped: false
    });
    _defineProperty(_this, "handleFlipStyle", function (data) {
      var flipped = data.flipped,
        transform = data.styles.transform,
        height = data.popper.height;
      _this.setState({
        flipped: flipped
      });
      if (!flipped) {
        return data;
      }
      data.styles.transform = transform + "translate(0, ".concat(height, "px) translate(0, -100%)");
      return data;
    });
    return _this;
  }
  _inherits(PopupUserPickerWithoutAnalytics, _React$Component);
  return _createClass(PopupUserPickerWithoutAnalytics, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        target = _this$props.target,
        popupTitle = _this$props.popupTitle,
        boundariesElement = _this$props.boundariesElement,
        isMulti = _this$props.isMulti,
        offset = _this$props.offset,
        placement = _this$props.placement,
        rootBoundary = _this$props.rootBoundary,
        shouldFlip = _this$props.shouldFlip,
        styles = _this$props.styles,
        strategy = _this$props.strategy;
      var width = this.props.width;
      var selectStyles = getPopupStyles(width, isMulti, styles,
      // eslint-disable-next-line @atlaskit/platform/no-preconditioning, @atlaskit/platform/ensure-feature-flag-prefix
      fg('platform-component-visual-refresh') && fg('visual-refresh-user-picker'));
      return /*#__PURE__*/React.createElement(BaseUserPickerWithoutAnalytics, _extends({}, this.props, {
        SelectComponent: PopupSelect,
        width: width,
        styles: selectStyles,
        components: getPopupComponents(!!popupTitle),
        pickerProps: getPopupProps(width, target, this.handleFlipStyle, boundariesElement, offset, placement, rootBoundary, shouldFlip, popupTitle, strategy)
      }));
    }
  }]);
}(React.Component);
_defineProperty(PopupUserPickerWithoutAnalytics, "defaultProps", {
  boundariesElement: 'viewport',
  width: 300,
  isMulti: false,
  offset: [0, 0],
  placement: 'auto',
  rootBoundary: 'viewport',
  shouldFlip: true,
  strategy: 'fixed'
});
export var PopupUserPicker = withAnalyticsEvents()(PopupUserPickerWithoutAnalytics);