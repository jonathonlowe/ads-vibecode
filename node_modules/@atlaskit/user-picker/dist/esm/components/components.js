import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import memoizeOne from 'memoize-one';
import { ClearIndicator } from './ClearIndicator';
import { MultiValue } from './MultiValue';
import { MultiValueContainer } from './MultiValueContainer';
import { Option } from './Option';
import { SingleValue } from './SingleValue';
import { Input } from './Input';
import { SingleValueContainer } from './SingleValueContainer';
import { PopupInput } from './PopupInput';
import { PopupControl } from './PopupControl';
import { Menu } from './Menu';
import Control from './Control';

/**
 * Memoize getComponents to avoid rerenders.
 */
export var getComponents = memoizeOne(function (multi, anchor, showClearIndicator) {
  if (anchor) {
    return {
      Control: anchor,
      Option: Option
    };
  } else {
    return {
      MultiValue: MultiValue,
      DropdownIndicator: null,
      SingleValue: SingleValue,
      ClearIndicator: showClearIndicator || !multi ? ClearIndicator : null,
      Option: Option,
      ValueContainer: multi ? MultiValueContainer : SingleValueContainer,
      Input: Input,
      Menu: Menu,
      Control: Control
    };
  }
});
export var getPopupComponents = memoizeOne(function (hasPopupTitle) {
  var baseProps = {
    DropdownIndicator: null,
    SingleValue: SingleValue,
    ClearIndicator: ClearIndicator,
    Option: Option,
    ValueContainer: SingleValueContainer,
    Input: PopupInput
  };
  if (hasPopupTitle) {
    return _objectSpread(_objectSpread({}, baseProps), {}, {
      Control: PopupControl
    });
  }
  return baseProps;
});