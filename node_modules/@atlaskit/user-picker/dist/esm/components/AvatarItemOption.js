import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Lozenge from '@atlaskit/lozenge';
import { isLozengeText } from './utils';
var AsyncTooltip = /*#__PURE__*/React.lazy(function () {
  return import( /* webpackChunkName: "@atlaskit-internal_@atlaskit/tooltip" */'@atlaskit/tooltip').then(function (module) {
    return {
      default: module.default
    };
  });
});
var wrapper = function wrapper(isDisabled) {
  return css({
    alignItems: 'center',
    boxSizing: 'border-box',
    display: 'flex',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: 1,
    outline: 'none',
    margin: 0,
    width: '100%',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    cursor: isDisabled ? 'not-allowed' : 'pointer',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: isDisabled ? "var(--ds-opacity-disabled, 0.4)" : undefined
  });
};
var optionWrapper = css({
  maxWidth: '100%',
  minWidth: 0,
  flex: '1 1 100%',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '1.4',
  paddingLeft: "var(--ds-space-100, 8px)"
});
var getTextStyle = function getTextStyle(isSecondary) {
  var secondaryCssArgs = isSecondary ? {
    font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
  } : {};
  return css(_objectSpread({
    margin: 0,
    overflowX: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }, secondaryCssArgs));
};
var additionalInfo = css({
  float: 'right'
});
export var textWrapper = function textWrapper(color) {
  return css({
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: 'inline',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    color: color
  });
};
export var AvatarItemOption = function AvatarItemOption(_ref) {
  var avatar = _ref.avatar,
    isDisabled = _ref.isDisabled,
    lozenge = _ref.lozenge,
    primaryText = _ref.primaryText,
    secondaryText = _ref.secondaryText;
  var renderLozenge = function renderLozenge() {
    if (isLozengeText(lozenge)) {
      if (lozenge !== null && lozenge !== void 0 && lozenge.tooltip) {
        // Note that entire Lozenge must be wrapped in the Tooltip (rather than just the
        // Lozenge text) or tooltip won't work
        return jsx(React.Suspense, {
          fallback: jsx(Lozenge, lozenge, lozenge.text)
        }, jsx(AsyncTooltip, {
          content: lozenge.tooltip
        }, jsx(Lozenge, lozenge, lozenge.text)));
      }
      return jsx(Lozenge, lozenge, lozenge.text);
    }
    return lozenge;
  };
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("span", {
      css: wrapper(isDisabled)
    }, avatar, jsx("div", {
      css: optionWrapper
    }, jsx("div", null, jsx("div", {
      css: getTextStyle()
    }, primaryText), secondaryText && jsx("div", {
      css: getTextStyle(true)
    }, secondaryText))), lozenge && jsx("div", {
      css: additionalInfo
    }, renderLozenge()))
  );
};