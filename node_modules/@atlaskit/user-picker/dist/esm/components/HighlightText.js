import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
export var HighlightText = /*#__PURE__*/function (_React$PureComponent) {
  function HighlightText() {
    _classCallCheck(this, HighlightText);
    return _callSuper(this, HighlightText, arguments);
  }
  _inherits(HighlightText, _React$PureComponent);
  return _createClass(HighlightText, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        highlights = _this$props.highlights;
      var parts = [];
      var lastIndex = 0;
      if (highlights) {
        highlights.sort(function (a, b) {
          return a.start - b.start;
        }).reduce(function (highlights, highlight) {
          var lastHighlight = highlights[highlights.length - 1];
          if (!lastHighlight || highlight.start > lastHighlight.end + 1) {
            return highlights.concat(highlight);
          }
          if (highlight.end > lastHighlight.end) {
            lastHighlight.end = highlight.end;
          }
          return highlights;
        }, []).forEach(function (highlight) {
          var start = highlight.start,
            end = highlight.end;
          if (start >= end) {
            return;
          }
          if (start > lastIndex) {
            parts.push({
              value: children.substring(lastIndex, start),
              matches: false
            });
          }
          parts.push({
            value: children.substring(start, end + 1),
            matches: true
          });
          lastIndex = end + 1;
        });
      }
      if (lastIndex < children.length) {
        parts.push({
          value: children.substring(lastIndex, children.length),
          matches: false
        });
      }
      return parts.map(function (part, index) {
        if (part.matches) {
          return /*#__PURE__*/React.createElement("b", {
            key: index
          }, part.value);
        }
        return part.value;
      });
    }
  }]);
}(React.PureComponent);