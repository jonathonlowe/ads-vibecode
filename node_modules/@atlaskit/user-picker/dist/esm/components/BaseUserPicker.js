import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { UFOExperienceState } from '@atlaskit/ufo';
import debounce from 'lodash/debounce';
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { v4 as uuidv4 } from 'uuid';
import { cancelEvent, clearEvent, createAndFireEventInElementsChannel, deleteEvent, failedEvent, focusEvent, searchedEvent, selectEvent, startSession } from '../analytics';
import { batchByKey } from './batch';
import { messages } from './i18n';
import { callCallback, extractOptionValue, getOptions, isIterable, isPopupUserPickerByComponent, isDefaultValuePopulated, isSingleValue, optionToSelectableOptions } from './utils';
import { userPickerOptionsShownUfoExperience } from '../util/ufoExperiences';
var loadingMessage = function loadingMessage() {
  return null;
};
var classNamePrefix = 'fabric-user-picker';
export var BaseUserPickerWithoutAnalytics = /*#__PURE__*/function (_React$Component) {
  function BaseUserPickerWithoutAnalytics(props) {
    var _this;
    _classCallCheck(this, BaseUserPickerWithoutAnalytics);
    _this = _callSuper(this, BaseUserPickerWithoutAnalytics, [props]);
    _defineProperty(_this, "getSessionId", function () {
      return _this.session && _this.session.id ? _this.session.id : undefined;
    });
    _defineProperty(_this, "withSelectRef", function (callback) {
      return function () {
        if (_this.selectRef) {
          callback(_this.selectRef);
        }
      };
    });
    _defineProperty(_this, "nextOption", _this.withSelectRef(function (select) {
      return select.focusOption('down');
    }));
    _defineProperty(_this, "previousOption", _this.withSelectRef(function (select) {
      return select.focusOption('up');
    }));
    _defineProperty(_this, "focus", function () {
      if (_this.selectRef && _this.selectRef.focus) {
        _this.selectRef.focus();
      }
    });
    _defineProperty(_this, "blur", function () {
      if (_this.selectRef && _this.selectRef.blur) {
        _this.selectRef.blur();
      }
    });
    _defineProperty(_this, "selectOption", _this.withSelectRef(function (select) {
      var focusedOption = select.state.focusedOption;
      select.selectOption(focusedOption);
    }));
    // value = null if user deletes the last item in the user picker
    _defineProperty(_this, "handleChange", function (value, _ref) {
      var action = _ref.action,
        removedValue = _ref.removedValue,
        option = _ref.option;
      if (removedValue && removedValue.data.fixed) {
        return;
      }
      _this.resetInputState();
      var _this$props = _this.props,
        onChange = _this$props.onChange,
        onSelection = _this$props.onSelection,
        onClear = _this$props.onClear,
        isMulti = _this$props.isMulti;
      callCallback(onChange, extractOptionValue(value), action);
      switch (action) {
        case 'select-option':
          if (value) {
            callCallback(onSelection, extractOptionValue(value), _this.getSessionId(), _this);
          }
          _this.fireEvent(selectEvent, isMulti ? option : value);
          _this.session = isMulti ? startSession() : undefined;
          break;
        case 'clear':
          callCallback(onClear);
          _this.fireEvent(clearEvent);
          break;
        case 'remove-value':
        case 'pop-value':
          if (removedValue) {
            _this.fireEvent(deleteEvent, removedValue.data);
          }
          break;
      }
      _this.fireEvent(searchedEvent);
      if (removedValue && _this.state.value && Array.isArray(_this.state.value)) {
        var remainingValues = _this.state.value.filter(function (val) {
          return val.data.id !== removedValue.data.id;
        });
        _this.setState({
          value: remainingValues ? remainingValues : [],
          menuIsOpen: true
        });
      }
      if (!_this.props.value) {
        _this.setState({
          value: value ? value : []
        });
      }
    });
    _defineProperty(_this, "handleSelectRef", function (ref) {
      _this.selectRef = ref;
    });
    _defineProperty(_this, "addOptions", batchByKey(function (request, newOptions) {
      var resolving = _this.state.resolving;
      _this.setState(function (_ref2) {
        var inflightRequest = _ref2.inflightRequest,
          options = _ref2.options,
          count = _ref2.count;
        if (inflightRequest.toString() === request) {
          return {
            options: (resolving ? options : []).concat(newOptions.reduce(function (nextOptions, item) {
              return Array.isArray(item) ? nextOptions.concat(item[0]) : nextOptions.concat(item);
            }, [])),
            count: count - newOptions.length,
            resolving: count - newOptions.length !== 0
          };
        }
        return null;
      });
    }));
    _defineProperty(_this, "handleLoadOptionsError", function () {
      var count = _this.state.count;
      var newCount = count - 1;
      var resolving = newCount !== 0;
      var showError = false;
      if (!resolving) {
        showError = true;
      }
      _this.setState({
        count: newCount,
        resolving: resolving,
        showError: showError
      });
      _this.fireEvent(failedEvent);
    });
    _defineProperty(_this, "debouncedLoadOptions", debounce(function (search) {
      var loadOptions = _this.props.loadOptions;
      if (loadOptions) {
        var inflightRequest = _this.state.inflightRequest + 1;
        var result = _this.session && _this.session.id ? loadOptions(search, _this.session.id) : loadOptions(search);
        var addOptions = _this.addOptions.bind(_this, inflightRequest.toString());
        var count = 0;
        if (isIterable(result)) {
          var _iterator = _createForOfIteratorHelper(result),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _value = _step.value;
              Promise.resolve(_value).then(addOptions).catch(_this.handleLoadOptionsError);
              count++;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          Promise.resolve(result).then(addOptions).catch(_this.handleLoadOptionsError);
          count++;
        }
        _this.setState({
          inflightRequest: inflightRequest,
          count: count,
          resolving: count !== 0,
          options: []
        });
      }
    }, 200));
    _defineProperty(_this, "abortOptionsShownUfoExperience", function () {
      if (_this.optionsShownUfoExperienceInstance.state.id === UFOExperienceState.STARTED.id) {
        // There may be an existing UFO timing running from previous key entry or focus,
        // so abort it and restart it just in case.
        _this.optionsShownUfoExperienceInstance.abort();
      }
    });
    _defineProperty(_this, "startOptionsShownUfoExperience", function () {
      _this.abortOptionsShownUfoExperience();
      _this.optionsShownUfoExperienceInstance.start();
    });
    _defineProperty(_this, "executeLoadOptions", function (search) {
      var loadOptions = _this.props.loadOptions;
      if (loadOptions) {
        _this.setState({
          resolving: true,
          showError: false
        }, function () {
          return _this.debouncedLoadOptions(search);
        });
      }
    });
    _defineProperty(_this, "handleFocus", function (event) {
      var _this$state = _this.state,
        value = _this$state.value,
        menuIsOpen = _this$state.menuIsOpen;
      if (!menuIsOpen || !_this.session) {
        _this.startSession();
      }
      _this.startOptionsShownUfoExperience();
      callCallback(_this.props.onFocus, _this.getSessionId());
      if (!_this.isMenuOpenOnClickForSingleSelect) {
        _this.setState({
          menuIsOpen: true
        });
        if (!_this.props.isMulti && isSingleValue(value)) {
          var input = event.target;
          _this.setState({
            inputValue: value.label
          }, function () {
            if (input instanceof HTMLInputElement) {
              input.setSelectionRange(0, value.label.length);
            }
          });
        }
      }
    });
    _defineProperty(_this, "resetInputState", function () {
      // Prevent filter if query typed, then blurred with no selection
      _this.setState({
        inputValue: ''
      });
      callCallback(_this.props.onInputChange, '', _this.getSessionId());
    });
    _defineProperty(_this, "handleBlur", function () {
      callCallback(_this.props.onBlur, _this.getSessionId());
      if (isPopupUserPickerByComponent(_this.props.SelectComponent)) {
        return;
      }
      _this.resetInputState();
      _this.abortOptionsShownUfoExperience();
      _this.setState({
        menuIsOpen: false,
        initialFocusHandled: false,
        options: []
      });
    });
    _defineProperty(_this, "handleOpen", function () {
      callCallback(_this.props.onOpen, _this.getSessionId());
      _this.setState({
        menuIsOpen: true
      });
    });
    _defineProperty(_this, "handleClose", function () {
      _this.resetInputState();
      callCallback(_this.props.onClose, _this.getSessionId());
      _this.setState({
        menuIsOpen: false,
        options: []
      });
    });
    _defineProperty(_this, "handleInputChange", function (search, _ref3) {
      var action = _ref3.action;
      if (action === 'input-change' || action === 'set-value') {
        callCallback(_this.props.onInputChange, search, _this.getSessionId());
        _this.setState({
          inputValue: search
        });
        _this.startOptionsShownUfoExperience();
      }
    });
    _defineProperty(_this, "fireEvent", function (eventCreator) {
      var createAnalyticsEvent = _this.props.createAnalyticsEvent;
      if (createAnalyticsEvent) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        createAndFireEventInElementsChannel(eventCreator.apply(void 0, [_this.props, _this.state, _this.session, _this.journeyId].concat(args)))(createAnalyticsEvent);
      }
    });
    _defineProperty(_this, "startSession", function () {
      _this.session = startSession();
      _this.journeyId = _this.getSessionId();
      _this.fireEvent(focusEvent);
    });
    _defineProperty(_this, "handleKeyDown", function (event) {
      if (!_this.isMenuOpenOnClickForSingleSelect) {
        // Escape
        if (event.keyCode === 27) {
          _this.blur();
        }

        // Space
        if (event.keyCode === 32 && !_this.state.inputValue) {
          event.preventDefault();
          !_this.props.disableInput && _this.setState({
            inputValue: ' '
          });
        }
      }
      if (_this.session) {
        _this.session.lastKey = event.keyCode;
        switch (event.keyCode) {
          // KeyUp 38
          case 38:
            _this.session.upCount++;
            break;
          // KeyDown 40
          case 40:
            _this.session.downCount++;
            break;
        }
      }
      _this.props.onKeyDown && _this.props.onKeyDown(event);
    });
    _defineProperty(_this, "handleClearIndicatorHover", function (hoveringClearIndicator) {
      _this.setState({
        hoveringClearIndicator: hoveringClearIndicator
      });
    });
    _defineProperty(_this, "getOptions", function () {
      var options = getOptions(_this.state.options) || [];
      var _this$props2 = _this.props,
        maxOptions = _this$props2.maxOptions,
        isMulti = _this$props2.isMulti;
      if (maxOptions === 0) {
        return [];
      }
      if (maxOptions && maxOptions > 0 && maxOptions < options.length) {
        var _value2 = _this.state.value;
        var filteredOptions = options;
        // Filter out previously selected options
        if (isMulti && Array.isArray(_value2)) {
          var valueIds = _value2.map(function (item) {
            return item.data.id;
          });
          filteredOptions = options.filter(function (option) {
            return valueIds.indexOf(option.data.id) === -1;
          });
        }
        return filteredOptions.slice(0, maxOptions);
      }
      return options;
    });
    _defineProperty(_this, "getAppearance", function () {
      return _this.props.appearance ? _this.props.appearance : 'normal';
    });
    _defineProperty(_this, "handleClickDraggableParentComponent", function () {
      if (_this.state.initialFocusHandled) {
        // As <Select /> is already focused, calling this.selectRef.current.focus() again no longer triggers its own handlers (i.e. onMenuOpen, onMenuClose)
        // We have to manually handle the open and close states of the dropdown menu based on a user's click from this point onwards to prevent the bug
        if (_this.state.menuIsOpen) {
          _this.handleClose();
        } else {
          _this.handleOpen();
        }
        // escaping the below condition when openMenuOnClick is true otherwise menu own't open on click
      } else if (!_this.state.menuIsOpen && !_this.isMenuOpenOnClickForSingleSelect) {
        // Trigger focus state when ValueContainer is clicked for the first time
        // The focused state will then invoke <Select /> instance's own handlers (e.g. onMenuOpen, onMenuClose)
        // to manage the state of the dropdown menu
        _this.focus();
        _this.setState(function () {
          return {
            initialFocusHandled: true
          };
        });
      }
    });
    _this.state = {
      options: [],
      isDefaultSet: false,
      inflightRequest: 0,
      count: 0,
      hoveringClearIndicator: false,
      menuIsOpen: !!_this.props.open,
      inputValue: props.search || '',
      resolving: false,
      showError: false,
      initialFocusHandled: false
    };
    _this.optionsShownUfoExperienceInstance = userPickerOptionsShownUfoExperience.getInstance(uuidv4());
    return _this;
  }
  _inherits(BaseUserPickerWithoutAnalytics, _React$Component);
  return _createClass(BaseUserPickerWithoutAnalytics, [{
    key: "isMenuOpenOnClickForSingleSelect",
    get: function get() {
      return this.props.openMenuOnClick && !this.props.isMulti;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props3 = this.props,
        open = _this$props3.open,
        search = _this$props3.search;
      // load options when the picker open
      if (open) {
        if (!this.session) {
          this.startSession();
        }
        this.executeLoadOptions(search);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      var _this$state2 = this.state,
        menuIsOpen = _this$state2.menuIsOpen,
        options = _this$state2.options,
        resolving = _this$state2.resolving,
        count = _this$state2.count,
        inputValue = _this$state2.inputValue;

      // Create a new session when the menu is opened and there is no session
      if (menuIsOpen && !prevState.menuIsOpen && !this.session) {
        this.startSession();
      }

      // Load options when user picker opens or when input value changes
      if (menuIsOpen && !prevState.menuIsOpen || inputValue !== prevState.inputValue) {
        this.executeLoadOptions(inputValue);
      }
      if (!menuIsOpen && prevState.menuIsOpen && this.session) {
        this.fireEvent(cancelEvent, prevState);
        this.session = undefined;
      }
      if (menuIsOpen && (!prevState.menuIsOpen && options.length > 0 || options.length !== prevState.options.length)) {
        this.fireEvent(searchedEvent);
      }
      if (this.state.inputValue !== prevState.inputValue) {
        if (this.session) {
          this.session.inputChangeTime = Date.now();
        }
      }
      if (menuIsOpen && (!_.loadOptions || prevState.menuIsOpen) && count === 0 && !resolving && [UFOExperienceState.STARTED.id, UFOExperienceState.IN_PROGRESS.id].includes(this.optionsShownUfoExperienceInstance.state.id)) {
        this.optionsShownUfoExperienceInstance.success();
      }
    }
  }, {
    key: "ariaProps",
    get: function get() {
      var ariaLabels = Object.keys(this.props).filter(function (key) {
        return key.startsWith('aria-');
      });
      var props = _objectSpread({}, this.props);
      return ariaLabels.reduce(function (obj, key) {
        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, key, props[key]));
      }, {});
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
        isMulti = _this$props4.isMulti,
        isLoading = _this$props4.isLoading,
        subtle = _this$props4.subtle,
        noBorder = _this$props4.noBorder,
        placeholder = _this$props4.placeholder,
        isClearable = _this$props4.isClearable,
        isDisabled = _this$props4.isDisabled,
        isInvalid = _this$props4.isInvalid,
        clearValueLabel = _this$props4.clearValueLabel,
        menuMinWidth = _this$props4.menuMinWidth,
        menuPortalTarget = _this$props4.menuPortalTarget,
        loadOptionsErrorMessage = _this$props4.loadOptionsErrorMessage,
        addMoreMessage = _this$props4.addMoreMessage,
        noOptionsMessage = _this$props4.noOptionsMessage,
        footer = _this$props4.footer,
        disableInput = _this$props4.disableInput,
        components = _this$props4.components,
        pickerProps = _this$props4.pickerProps,
        SelectComponent = _this$props4.SelectComponent,
        styles = _this$props4.styles,
        autoFocus = _this$props4.autoFocus,
        fieldId = _this$props4.fieldId,
        inputId = _this$props4.inputId,
        maxPickerHeight = _this$props4.maxPickerHeight,
        textFieldBackgroundColor = _this$props4.textFieldBackgroundColor,
        ariaLabelledBy = _this$props4.ariaLabelledBy,
        ariaDescribedBy = _this$props4.ariaDescribedBy,
        ariaLive = _this$props4.ariaLive,
        ariaLabel = _this$props4.ariaLabel,
        name = _this$props4.name,
        header = _this$props4.header,
        required = _this$props4.required,
        UNSAFE_hasDraggableParentComponent = _this$props4.UNSAFE_hasDraggableParentComponent,
        placeholderAvatar = _this$props4.placeholderAvatar;
      var _this$state3 = this.state,
        count = _this$state3.count,
        hoveringClearIndicator = _this$state3.hoveringClearIndicator,
        menuIsOpen = _this$state3.menuIsOpen,
        value = _this$state3.value,
        inputValue = _this$state3.inputValue,
        resolving = _this$state3.resolving,
        showError = _this$state3.showError;
      var appearance = this.getAppearance();
      // these props override the default select menu open and close
      var menuOpenDeciderProps = _objectSpread({}, !this.isMenuOpenOnClickForSingleSelect && {
        menuIsOpen: menuIsOpen,
        blurInputOnSelect: !isMulti,
        openMenuOnFocus: true
      });
      return /*#__PURE__*/React.createElement(SelectComponent, _extends({
        name: name,
        value: value,
        autoFocus: autoFocus !== undefined ? autoFocus : menuIsOpen,
        "aria-labelledby": ariaLabelledBy,
        "aria-describedby": fg('pass-aria-describedby-to-baseuserpicker') ? ariaDescribedBy : undefined,
        "aria-label": ariaLabel,
        "aria-live": ariaLive,
        "aria-required": required // This has been added as a safety net.
        ,
        required: required,
        ref: this.handleSelectRef,
        isMulti: isMulti,
        options: this.getOptions(),
        styles: styles,
        enableAnimation: isMulti,
        components: components,
        inputValue: inputValue,
        isLoading: count > 0 || resolving || isLoading,
        loadingMessage: loadingMessage,
        menuPlacement: "auto",
        placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : /*#__PURE__*/React.createElement(FormattedMessage, messages.placeholder),
        addMoreMessage: addMoreMessage,
        classNamePrefix: classNamePrefix,
        hoveringClearIndicator: hoveringClearIndicator,
        appearance: appearance,
        isClearable: isClearable,
        noBorder: noBorder,
        subtle: subtle,
        closeMenuOnSelect: !isMulti,
        noOptionsMessage: showError ? loadOptionsErrorMessage : typeof noOptionsMessage === 'function' ? noOptionsMessage : function () {
          return noOptionsMessage;
        },
        footer: footer,
        isDisabled: isDisabled,
        isInvalid: isInvalid,
        isFocused: menuIsOpen,
        backspaceRemovesValue: isMulti,
        filterOption: null // disable local filtering
        ,
        clearValueLabel: clearValueLabel,
        menuMinWidth: menuMinWidth,
        menuPortalTarget: menuPortalTarget,
        disableInput: disableInput || isDisabled,
        instanceId: fieldId,
        inputId: inputId,
        onChange: this.handleChange,
        onMenuOpen: this.handleOpen,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onMenuClose: this.handleClose,
        onInputChange: this.handleInputChange,
        onClearIndicatorHover: this.handleClearIndicatorHover,
        onKeyDown: this.handleKeyDown,
        maxPickerHeight: maxPickerHeight,
        textFieldBackgroundColor: textFieldBackgroundColor,
        header: header,
        placeholderAvatar: placeholderAvatar
      }, this.ariaProps, pickerProps, UNSAFE_hasDraggableParentComponent && {
        onValueContainerClick: this.handleClickDraggableParentComponent
      }, menuOpenDeciderProps));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var derivedState = {};
      if (nextProps.isDisabled || nextProps.disableInput) {
        derivedState.menuIsOpen = false;
      }
      if (nextProps.open !== undefined) {
        derivedState.menuIsOpen = nextProps.open;
      }
      if (nextProps.value !== undefined) {
        derivedState.value = optionToSelectableOptions(nextProps.value);
      } else if (isDefaultValuePopulated(nextProps.defaultValue) && !prevState.isDefaultSet) {
        derivedState.value = optionToSelectableOptions(nextProps.defaultValue);
        derivedState.isDefaultSet = true;
      }
      if (nextProps.search !== undefined && nextProps.search !== prevState.inputValue) {
        derivedState.inputValue = nextProps.search;
      }
      if (nextProps.options !== undefined) {
        derivedState.options = nextProps.options;
      }
      return derivedState;
    }

    // session id for focus to blur
  }]);
}(React.Component);
_defineProperty(BaseUserPickerWithoutAnalytics, "defaultProps", {
  isMulti: false,
  subtle: false,
  noBorder: false,
  textFieldBackgroundColor: false,
  isClearable: true,
  loadOptionsErrorMessage: function loadOptionsErrorMessage() {
    return /*#__PURE__*/React.createElement(FormattedMessage, messages.errorMessage);
  },
  openMenuOnClick: false
});
export var BaseUserPicker = withAnalyticsEvents()(BaseUserPickerWithoutAnalytics);