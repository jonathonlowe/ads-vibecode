/* SingleValueContainer.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["children"];
import "./SingleValueContainer.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { components } from '@atlaskit/select';
import { SizeableAvatar } from './SizeableAvatar';
import ValueContainerWrapper from './ValueContainerWrapper';
var valueContainerStyles = {
  root: "_yv0e5bpd _ca0q12x7 _n3td12x7 _19bvze3t _1reo15vq _18m91wug _1fjgglyw _c71l1osq _1suq1j28 _1ke8idpf"
};
var placeholderIconContainer = null;
var wrapperStyle = null;
var showUserAvatar = function showUserAvatar(inputValue, value) {
  return value && value.data && inputValue === value.label;
};
export var SingleValueContainer = /*#__PURE__*/function (_React$Component) {
  function SingleValueContainer() {
    var _this;
    _classCallCheck(this, SingleValueContainer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SingleValueContainer, [].concat(args));
    _defineProperty(_this, "renderAvatar", function () {
      var _this$props = _this.props,
        hasValue = _this$props.hasValue,
        _this$props$selectPro = _this$props.selectProps,
        appearance = _this$props$selectPro.appearance,
        isFocused = _this$props$selectPro.isFocused,
        inputValue = _this$props$selectPro.inputValue,
        value = _this$props$selectPro.value,
        placeholderAvatar = _this$props$selectPro.placeholderAvatar;
      if (isFocused || !hasValue) {
        return /*#__PURE__*/React.createElement(SizeableAvatar, {
          appearance: appearance,
          type: placeholderAvatar,
          src: showUserAvatar(inputValue, value) ? value.data.avatarUrl : undefined
        });
      }
      return null;
    });
    //@ts-ignore react-select unsupported props
    _defineProperty(_this, "onValueContainerClick", _this.props.selectProps.onValueContainerClick);
    _defineProperty(_this, "Wrapper", function (_ref) {
      var children = _ref.children;
      return _this.onValueContainerClick ? /*#__PURE__*/React.createElement("div", {
        onMouseDown: _this.onValueContainerClick,
        className: ax(["_16jlkb7n"])
      }, children) : children;
    });
    return _this;
  }
  _inherits(SingleValueContainer, _React$Component);
  return _createClass(SingleValueContainer, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        children = _this$props2.children,
        valueContainerProps = _objectWithoutProperties(_this$props2, _excluded);
      return /*#__PURE__*/React.createElement(ValueContainerWrapper, {
        isEnabled: this.onValueContainerClick,
        onMouseDown: this.onValueContainerClick
      }, /*#__PURE__*/React.createElement(components.ValueContainer, _extends({}, valueContainerProps, {
        xcss: valueContainerStyles.root
      }), /*#__PURE__*/React.createElement("div", {
        className: ax(["_nd5l1kqh _19bv12x7 _vwz4idpf"])
      }, this.renderAvatar()), children));
    }
  }]);
}(React.Component);