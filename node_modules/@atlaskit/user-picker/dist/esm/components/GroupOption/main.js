import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N20, B400, N800, N200 } from '@atlaskit/theme/colors';
import PeopleIcon from '@atlaskit/icon/core/migration/people-group--people';
import { AvatarItemOption, textWrapper } from '../AvatarItemOption';
import { messages } from '../i18n';
import { HighlightText } from '../HighlightText';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var groupOptionIconWrapper = css({
  padding: "var(--ds-space-025, 2px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> span': {
    backgroundColor: "var(--ds-background-neutral, ".concat(N20, ")"),
    borderRadius: '50%',
    padding: "var(--ds-space-050, 4px)"
  }
});
export var GroupOption = /*#__PURE__*/function (_React$PureComponent) {
  function GroupOption() {
    var _this;
    _classCallCheck(this, GroupOption);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, GroupOption, [].concat(args));
    _defineProperty(_this, "getPrimaryText", function () {
      var _this$props = _this.props,
        isSelected = _this$props.isSelected,
        _this$props$group = _this$props.group,
        name = _this$props$group.name,
        highlight = _this$props$group.highlight;
      return [jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(isSelected ? "var(--ds-text-selected, ".concat(B400, ")") : "var(--ds-text, ".concat(N800, ")"))
      }, jsx(HighlightText, {
        highlights: highlight && highlight.name
      }, name))];
    });
    _defineProperty(_this, "renderAvatar", function () {
      return jsx("span", {
        css: groupOptionIconWrapper
      }, jsx(PeopleIcon, {
        color: "currentColor",
        label: "group-icon",
        LEGACY_size: "medium",
        spacing: "spacious"
      }));
    });
    _defineProperty(_this, "renderByline", function () {
      var _this$props2 = _this.props,
        isSelected = _this$props2.isSelected,
        group = _this$props2.group;
      return jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: textWrapper(isSelected ? "var(--ds-text-selected, ".concat(B400, ")") : "var(--ds-text-subtlest, ".concat(N200, ")")),
        "data-testid": "user-picker-group-secondary-text"
      }, group.byline ? group.byline : jsx(FormattedMessage, messages.groupByline));
    });
    _defineProperty(_this, "getLozengeProps", function () {
      return typeof _this.props.group.lozenge === 'string' ? {
        text: _this.props.group.lozenge
      } : _this.props.group.lozenge;
    });
    return _this;
  }
  _inherits(GroupOption, _React$PureComponent);
  return _createClass(GroupOption, [{
    key: "render",
    value: function render() {
      return jsx(AvatarItemOption, {
        avatar: this.renderAvatar(),
        isDisabled: this.props.group.isDisabled,
        lozenge: this.getLozengeProps(),
        primaryText: this.getPrimaryText(),
        secondaryText: this.renderByline()
      });
    }
  }]);
}(React.PureComponent);