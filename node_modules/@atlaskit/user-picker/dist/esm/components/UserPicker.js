/* UserPicker.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import Select, { CreatableSelect } from '@atlaskit/select';
import { UFOExperienceState } from '@atlaskit/ufo';
import React from 'react';
import { BaseUserPickerWithoutAnalytics } from './BaseUserPicker';
import { getStyles } from './styles';
import { getComponents } from './components';
import { getCreatableProps } from './creatable';
import { getCreatableSuggestedEmailProps } from './creatableEmailSuggestion';
import MessagesIntlProvider from './MessagesIntlProvider';
import { ExusUserSourceProvider } from '../clients/UserSourceProvider';
import { userPickerRenderedUfoExperience as experience, UfoErrorBoundary } from '../util/ufoExperiences';
import { v4 as uuidv4 } from 'uuid';
import { fg } from '@atlaskit/platform-feature-flags';
export var UserPickerWithoutAnalytics = /*#__PURE__*/function (_React$Component) {
  function UserPickerWithoutAnalytics(props) {
    var _this;
    _classCallCheck(this, UserPickerWithoutAnalytics);
    _this = _callSuper(this, UserPickerWithoutAnalytics, [props]);
    _this.ufoId = uuidv4();
    var experienceForId = experience.getInstance(_this.ufoId);
    if (![UFOExperienceState.IN_PROGRESS.id, UFOExperienceState.STARTED.id].includes(experienceForId.state.id)) {
      experienceForId.start();
    }
    return _this;
  }
  _inherits(UserPickerWithoutAnalytics, _React$Component);
  return _createClass(UserPickerWithoutAnalytics, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var experienceForId = experience.getInstance(this.ufoId);

      // Send UFO success if the experience is still in progress i.e. hasn't failed
      if ([UFOExperienceState.IN_PROGRESS.id, UFOExperienceState.STARTED.id].includes(experienceForId.state.id)) {
        experienceForId.success();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        emailLabel = _this$props.emailLabel,
        allowEmail = _this$props.allowEmail,
        suggestEmailsForDomain = _this$props.suggestEmailsForDomain,
        isMulti = _this$props.isMulti,
        isValidEmail = _this$props.isValidEmail,
        anchor = _this$props.anchor,
        menuPortalTarget = _this$props.menuPortalTarget,
        menuPosition = _this$props.menuPosition,
        menuShouldBlockScroll = _this$props.menuShouldBlockScroll,
        captureMenuScroll = _this$props.captureMenuScroll,
        closeMenuOnScroll = _this$props.closeMenuOnScroll,
        loadUserSource = _this$props.loadUserSource,
        _this$props$required = _this$props.required,
        required = _this$props$required === void 0 ? false : _this$props$required,
        _this$props$showClear = _this$props.showClearIndicator,
        showClearIndicator = _this$props$showClear === void 0 ? false : _this$props$showClear;
      var width = this.props.width;
      var SelectComponent = allowEmail ? CreatableSelect : Select;
      var creatableProps = suggestEmailsForDomain ? getCreatableSuggestedEmailProps(suggestEmailsForDomain, isValidEmail) : getCreatableProps(isValidEmail);
      var defaultPickerProps = {
        closeMenuOnScroll: closeMenuOnScroll,
        menuPortalTarget: menuPortalTarget,
        menuPosition: menuPosition,
        menuShouldBlockScroll: menuShouldBlockScroll,
        captureMenuScroll: captureMenuScroll,
        required: required
      };
      var pickerProps = allowEmail ? _objectSpread(_objectSpread(_objectSpread({}, defaultPickerProps), creatableProps), {}, {
        emailLabel: emailLabel
      }) : _objectSpread({}, defaultPickerProps);
      return /*#__PURE__*/React.createElement(UfoErrorBoundary, {
        id: this.ufoId
      }, /*#__PURE__*/React.createElement(MessagesIntlProvider, null, /*#__PURE__*/React.createElement(ExusUserSourceProvider, {
        fetchUserSource: loadUserSource
      }, /*#__PURE__*/React.createElement(BaseUserPickerWithoutAnalytics, _extends({}, this.props, {
        width: width,
        SelectComponent: SelectComponent
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        styles: getStyles(width, isMulti, this.props.appearance === 'compact', this.props.styles, this.props.isInvalid,
        // eslint-disable-next-line @atlaskit/platform/no-preconditioning, @atlaskit/platform/ensure-feature-flag-prefix
        fg('platform-component-visual-refresh') && fg('visual-refresh-user-picker')),
        components: getComponents(isMulti, anchor, showClearIndicator && fg('user-picker-show-clear-indicator')),
        pickerProps: pickerProps
      })))));
    }
  }]);
}(React.Component);
_defineProperty(UserPickerWithoutAnalytics, "defaultProps", {
  width: 350,
  isMulti: false
});
export var UserPicker = withAnalyticsEvents()(UserPickerWithoutAnalytics);