import memoizeOne from 'memoize-one';
import { EmailType } from '../types';
import { isValidEmail as defaultIsValidEmail } from './emailValidation';
import { isEmail } from './utils';
var validOption = ['VALID', 'POTENTIAL'];
var isValidNewOption = function isValidNewOption() {
  var isValidEmail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultIsValidEmail;
  return function (inputValue) {
    return inputValue && validOption.includes(isValidEmail(inputValue));
  };
};
var getNewOptionData = function getNewOptionData(inputValue) {
  return {
    label: inputValue,
    value: inputValue,
    data: {
      id: inputValue,
      name: inputValue,
      type: EmailType
    }
  };
};
var formatCreateLabel = function formatCreateLabel(inputText) {
  if (inputText) {
    return inputText.trim();
  }
  return '';
};
var isOptionDisabled = function isOptionDisabled() {
  var isValidEmail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultIsValidEmail;
  return function (option) {
    if (isEmail(option.data)) {
      return isValidEmail(option.data.id) !== 'VALID';
    }
    return !!option.isDisabled;
  };
};
function creatableProps(isValidEmail) {
  return {
    allowCreateWhileLoading: true,
    createOptionPosition: 'first',
    isValidNewOption: isValidNewOption(isValidEmail),
    getNewOptionData: getNewOptionData,
    formatCreateLabel: formatCreateLabel,
    isOptionDisabled: isOptionDisabled(isValidEmail)
  };
}

// ignoring the 'clear' memoizeOne function object property
export var getCreatableProps = memoizeOne(creatableProps);