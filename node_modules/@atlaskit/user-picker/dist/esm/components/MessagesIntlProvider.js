import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useMemo } from 'react';
import { useIntl, IntlProvider } from 'react-intl-next';
import { getMessagesForLocale } from '../util/i18n-util';
var EMPTY = {};
var useI18n = function useI18n(locale) {
  var _React$useState = React.useState(EMPTY),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    messages = _React$useState2[0],
    setMessages = _React$useState2[1];
  React.useEffect(function () {
    var aborted = false;
    setMessages(EMPTY);
    getMessagesForLocale(locale).then(function (messages) {
      if (!aborted) {
        setMessages(messages);
      }
    }).catch(function (error) {
      // eslint-disable-next-line no-console
      console.error(error);
    });
    return function () {
      aborted = true;
    };
  }, [locale]);
  return messages;
};
var MessagesIntlProvider = function MessagesIntlProvider(props) {
  var intl = useIntl();
  var children = props.children;
  var messages = useI18n(intl.locale);
  var mergedMessages = useMemo(function () {
    return _objectSpread(_objectSpread({}, intl.messages), messages);
  }, [intl.messages, messages]);
  return /*#__PURE__*/React.createElement(IntlProvider, {
    locale: intl.locale,
    messages: mergedMessages
  }, children);
};
export default MessagesIntlProvider;