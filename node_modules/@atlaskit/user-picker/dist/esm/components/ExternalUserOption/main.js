import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { B400, N200, N800 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel, userInfoEvent } from '../../analytics';
import { textWrapper } from '../AvatarItemOption';
import { SizeableAvatar } from '../SizeableAvatar';
import { ExternalUserSourcesContainer } from '../ExternalUserSourcesContainer';
import InfoIcon from './InfoIcon';
import { ExternalAvatarItemOption } from './ExternalAvatarItemOption';
import { SourcesTooltipContent } from './SourcesTooltipContent';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var imageContainer = css({
  height: '16px',
  width: '16px',
  paddingRight: "var(--ds-space-050, 4px)",
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var emailDomainWrapper = css({
  fontWeight: "var(--ds-font-weight-bold, 700)"
});
var ExternalUserOptionImpl = /*#__PURE__*/function (_React$PureComponent) {
  function ExternalUserOptionImpl() {
    var _this;
    _classCallCheck(this, ExternalUserOptionImpl);
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ExternalUserOptionImpl, [].concat(_args));
    _defineProperty(_this, "getPrimaryText", function () {
      var name = _this.props.user.name;
      return jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(_this.props.isSelected ? "var(--ds-text-selected, ".concat(B400, ")") : "var(--ds-text, ".concat(N800, ")"))
      }, name);
    });
    _defineProperty(_this, "renderSecondaryText", function () {
      var _this$props$user = _this.props.user,
        byline = _this$props$user.byline,
        email = _this$props$user.email;
      if (!byline && !email) {
        return;
      }
      var textColor = _this.props.isSelected ? "var(--ds-text-selected, ".concat(B400, ")") : "var(--ds-text-subtlest, ".concat(N200, ")");

      // Render byline if present
      if (byline) {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        return jsx("span", {
          css: textWrapper(textColor)
        }, byline);
      }

      // Render email if byline isn't present
      if (email) {
        var _email$split = email.split('@'),
          _email$split2 = _slicedToArray(_email$split, 2),
          emailUser = _email$split2[0],
          emailDomain = _email$split2[1];
        var emailDomainWithAt = "@".concat(emailDomain);
        return (
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          jsx("span", {
            css: textWrapper(textColor)
          }, emailUser, jsx("span", {
            css: emailDomainWrapper
          }, emailDomainWithAt))
        );
      }
    });
    _defineProperty(_this, "renderAvatar", function () {
      var _this$props = _this.props,
        avatarUrl = _this$props.user.avatarUrl,
        status = _this$props.status;
      return jsx(SizeableAvatar, {
        appearance: "big",
        src: avatarUrl,
        presence: status
      });
    });
    _defineProperty(_this, "fireEvent", function (eventCreator) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      var createAnalyticsEvent = _this.props.createAnalyticsEvent;
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel(eventCreator.apply(void 0, args))(createAnalyticsEvent);
      }
    });
    _defineProperty(_this, "onShow", function () {
      var user = _this.props.user;
      _this.fireEvent(userInfoEvent, user.sources, user.id);
    });
    _defineProperty(_this, "getSourcesInfoTooltip", function () {
      return _this.props.user.isExternal ? jsx(Tooltip, {
        content: _this.formattedTooltipContent(),
        position: 'right-start',
        onShow: _this.onShow
      }, jsx(InfoIcon, null)) : undefined;
    });
    return _this;
  }
  _inherits(ExternalUserOptionImpl, _React$PureComponent);
  return _createClass(ExternalUserOptionImpl, [{
    key: "render",
    value: function render() {
      return jsx(ExternalAvatarItemOption, {
        avatar: this.renderAvatar(),
        isDisabled: this.props.user.isDisabled,
        primaryText: this.getPrimaryText(),
        secondaryText: this.renderSecondaryText(),
        sourcesInfoTooltip: this.getSourcesInfoTooltip()
      });
    }
  }, {
    key: "formattedTooltipContent",
    value: function formattedTooltipContent() {
      var _this$props$user2 = this.props.user,
        id = _this$props$user2.id,
        requiresSourceHydration = _this$props$user2.requiresSourceHydration,
        sources = _this$props$user2.sources;
      return jsx(ExternalUserSourcesContainer, {
        accountId: id,
        shouldFetchSources: Boolean(requiresSourceHydration),
        initialSources: sources
      }, function (sourceData) {
        return jsx(SourcesTooltipContent, sourceData);
      });
    }
  }]);
}(React.PureComponent);
export var ExternalUserOption = withAnalyticsEvents()(ExternalUserOptionImpl);