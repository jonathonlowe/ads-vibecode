import { Box, xcss } from '@atlaskit/primitives';
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import { AtlassianIcon, ConfluenceIcon, JiraIcon } from '@atlaskit/logo';
import Spinner from '@atlaskit/spinner/spinner';
import { SlackIcon } from '../assets/slack';
import { GoogleIcon } from '../assets/google';
import { MicrosoftIcon } from '../assets/microsoft';
import { messages } from '../i18n';
var sourcesTooltipContainer = xcss({
  paddingBottom: 'space.050',
  paddingRight: 'space.050'
});
var sourceWrapperStyles = xcss({
  paddingTop: 'space.050',
  display: 'flex',
  alignItems: 'center'
});
var SUPPORTED_SOURCES = [{
  sourceType: 'jira',
  icon: /*#__PURE__*/React.createElement(JiraIcon, {
    size: 'xsmall'
  }),
  label: messages.jiraSource
}, {
  sourceType: 'confluence',
  icon: /*#__PURE__*/React.createElement(ConfluenceIcon, {
    size: 'xsmall'
  }),
  label: messages.confluenceSource
}, {
  sourceType: 'other-atlassian',
  icon: /*#__PURE__*/React.createElement(AtlassianIcon, {
    size: 'xsmall'
  }),
  label: messages.otherAtlassianSource
}, {
  sourceType: 'slack',
  icon: /*#__PURE__*/React.createElement(SlackIcon, null),
  label: messages.slackProvider
}, {
  sourceType: 'google',
  icon: /*#__PURE__*/React.createElement(GoogleIcon, null),
  label: messages.googleProvider
}, {
  sourceType: 'microsoft',
  icon: /*#__PURE__*/React.createElement(MicrosoftIcon, null),
  label: messages.microsoftProvider
}];
var imageContainerStyles = xcss({
  height: '16px',
  width: '16px',
  paddingRight: 'space.050',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});
export var SourcesTooltipContent = function SourcesTooltipContent(_ref) {
  var sources = _ref.sources,
    sourcesLoading = _ref.sourcesLoading;
  var sourcesToRender = React.useMemo(function () {
    return SUPPORTED_SOURCES.filter(function (supportedSource) {
      return sources.includes(supportedSource.sourceType);
    });
  }, [sources]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, !sourcesLoading && sources.length === 0 ? /*#__PURE__*/React.createElement(Box, {
    as: "span"
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.externalUserSourcesError)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    as: "span"
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.externalUserSourcesHeading)), /*#__PURE__*/React.createElement(Box, {
    xcss: sourcesTooltipContainer
  }, sourcesLoading && /*#__PURE__*/React.createElement(Spinner, {
    size: "small",
    appearance: "invert"
  }), !sourcesLoading && sourcesToRender.map(function (_ref2) {
    var sourceType = _ref2.sourceType,
      icon = _ref2.icon,
      label = _ref2.label;
    return /*#__PURE__*/React.createElement(Box, {
      xcss: sourceWrapperStyles,
      key: sourceType
    }, /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: imageContainerStyles
    }, icon), /*#__PURE__*/React.createElement(Box, {
      as: "span"
    }, /*#__PURE__*/React.createElement(FormattedMessage, label)));
  }))));
};