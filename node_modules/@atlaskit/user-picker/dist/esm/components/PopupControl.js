import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N200 } from '@atlaskit/theme/colors';
import Control from './Control';
var controlWrapper = css({
  display: 'flex',
  flexDirection: 'column',
  padding: "0px ".concat("var(--ds-space-100, 8px)", " ", "var(--ds-space-100, 8px)")
});
var labelStyle = css({
  color: "var(--ds-text-subtlest, ".concat(N200, ")"),
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-semibold, 600)",
  paddingBottom: "var(--ds-space-050, 4px)",
  paddingLeft: "var(--ds-space-0, 0px)",
  paddingRight: "var(--ds-space-0, 0px)",
  paddingTop: "var(--ds-space-250, 20px)"
});
export var PopupControl = /*#__PURE__*/function (_React$PureComponent) {
  function PopupControl() {
    _classCallCheck(this, PopupControl);
    return _callSuper(this, PopupControl, arguments);
  }
  _inherits(PopupControl, _React$PureComponent);
  return _createClass(PopupControl, [{
    key: "render",
    value: function render() {
      var popupTitle = this.props.selectProps.popupTitle;
      return jsx("div", {
        css: controlWrapper
      }, jsx("div", {
        css: labelStyle
      }, popupTitle), jsx(Control, this.props));
    }
  }]);
}(React.PureComponent);