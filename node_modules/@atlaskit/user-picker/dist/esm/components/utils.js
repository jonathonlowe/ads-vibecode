import _typeof from "@babel/runtime/helpers/typeof";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import memoizeOne from 'memoize-one';
import { CustomType, EmailType, TeamType, GroupType, UserType, ExternalUserType } from '../types';
import { PopupSelect } from '@atlaskit/select';
export var isExternalUser = function isExternalUser(option) {
  return option.type === ExternalUserType || Boolean(option.isExternal);
};
export var isUser = function isUser(option) {
  return option.type === undefined || option.type === UserType;
};
export var isTeam = function isTeam(option) {
  return option.type === TeamType;
};
export var isGroup = function isGroup(option) {
  return option.type === GroupType;
};
export var isEmail = function isEmail(option) {
  return option.type === EmailType;
};
export var isCustom = function isCustom(option) {
  return option.type === CustomType;
};
export var isDefaultValuePopulated = function isDefaultValuePopulated(value) {
  return value && !Array.isArray(value) || Array.isArray(value) && value.length > 0;
};
var isOptionData = function isOptionData(option) {
  return option.name !== undefined;
};
export var optionToSelectableOption = function optionToSelectableOption(option) {
  if (isOptionData(option)) {
    return {
      data: option,
      isDisabled: option.isDisabled,
      label: option.name,
      value: option.id
    };
  } else {
    return {
      data: _objectSpread(_objectSpread({}, option), {}, {
        name: option.id
      }),
      isDisabled: option.isDisabled,
      label: option.id,
      value: option.id
    };
  }
};
export var extractOptionValue = function extractOptionValue(value) {
  if (!value) {
    return undefined;
  }
  if (Array.isArray(value)) {
    return value.map(function (_ref) {
      var option = _ref.data;
      return option;
    });
  }
  return value.data;
};
export var isIterable = function isIterable(a) {
  return typeof a[Symbol.iterator] === 'function';
};
export var getOptions = memoizeOne(function (options) {
  return options.map(optionToSelectableOption);
});
export var optionToSelectableOptions = memoizeOne(function (defaultValue) {
  if (!defaultValue) {
    return null;
  }
  if (Array.isArray(defaultValue)) {
    return defaultValue.map(optionToSelectableOption);
  }
  return optionToSelectableOption(defaultValue);
});
export var getAvatarSize = function getAvatarSize(appearance) {
  return appearance === 'big' ? 'medium' : appearance === 'multi' ? 'xsmall' : 'small';
};
export var isChildInput = function isChildInput(child) {
  return child && _typeof(child) === 'object' && child.props && child.props.type === 'text';
};
export var isSingleValue = function isSingleValue(value) {
  return !!value && !Array.isArray(value);
};
export var hasValue = function hasValue(value) {
  return !!value && value.trim().length > 0;
};
export var callCallback = function callCallback(callback) {
  if (typeof callback === 'function') {
    try {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      //  there is mystery error in IE 11, so we need this try-catch
      return callback.apply(void 0, args);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('@atlassian/user-select: an error happening in `callCallback`: ', error);
    }
  }
};
export var getAvatarUrl = function getAvatarUrl(optionData) {
  if (isUser(optionData) || isTeam(optionData) || isCustom(optionData)) {
    return optionData.avatarUrl;
  }
  return undefined;
};
export var isPopupUserPickerByComponent = function isPopupUserPickerByComponent(SelectComponent) {
  return SelectComponent === PopupSelect;
};
export var isPopupUserPickerByProps = function isPopupUserPickerByProps(selectProps) {
  return selectProps.searchThreshold === -1;
};
export var isLozengeText = function isLozengeText(lozengeProp) {
  return (lozengeProp === null || lozengeProp === void 0 ? void 0 : lozengeProp.hasOwnProperty('text')) || false;
};