import React from 'react';
import { type UserPickerProps } from '../types';
export declare class UserPickerWithoutAnalytics extends React.Component<UserPickerProps> {
    ufoId: string;
    constructor(props: UserPickerProps);
    static defaultProps: {
        width: number;
        isMulti: boolean;
    };
    componentDidMount(): void;
    render(): JSX.Element;
}
export declare const UserPicker: React.ForwardRefExoticComponent<Pick<Omit<{
    fieldId: string | null;
    options?: import("../types").OptionData[] | undefined;
    width?: string | number | undefined;
    menuMinWidth?: number | undefined;
    maxPickerHeight?: number | undefined;
    textFieldBackgroundColor?: boolean | undefined;
    loadOptions?: import("../types").LoadOptions | undefined;
    loadOptionsErrorMessage?: ((value: {
        inputValue: string;
    }) => React.ReactNode) | undefined;
    loadUserSource?: import("../types").LoadUserSource | undefined;
    onChange?: import("../types").OnChange | undefined;
    isMulti?: boolean | undefined;
    search?: string | undefined;
    anchor?: React.ComponentType<any> | undefined;
    open?: boolean | undefined;
    isLoading?: boolean | undefined;
    onInputChange?: import("../types").OnInputChange | undefined;
    onSelection?: import("../types").OnOption | undefined;
    onFocus?: import("../types").OnPicker | undefined;
    onBlur?: import("../types").OnPicker | undefined;
    onClear?: import("../types").OnPicker | undefined;
    onOpen?: import("../types").OnPicker | undefined;
    onClose?: import("../types").OnPicker | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<Element>) => void) | undefined;
    appearance?: import("../types").Appearance | undefined;
    subtle?: boolean | undefined;
    noBorder?: boolean | undefined;
    styles?: import("@atlaskit/select").StylesConfig | undefined;
    components?: Partial<import("packages/design-system/react-select/dist/types/components").SelectComponents<import("../types").OptionData, boolean, import("@atlaskit/select").GroupType<import("../types").OptionData>>> | undefined;
    defaultValue?: import("../types").DefaultValue;
    placeholder?: React.ReactNode;
    placeholderAvatar?: "team" | "person" | undefined;
    addMoreMessage?: string | undefined;
    noOptionsMessage?: React.ReactNode | ((value: {
        inputValue: string;
    }) => React.ReactNode);
    footer?: React.ReactNode;
    value?: import("../types").Value;
    isDisabled?: boolean | undefined;
    isInvalid?: boolean | undefined;
    isClearable?: boolean | undefined;
    clearValueLabel?: string | undefined;
    menuPosition?: "absolute" | "fixed" | undefined;
    captureMenuScroll?: boolean | undefined;
    menuPortalTarget?: HTMLElement | undefined;
    allowEmail?: boolean | undefined;
    suggestEmailsForDomain?: string | undefined;
    emailLabel?: string | undefined;
    disableInput?: boolean | undefined;
    isValidEmail?: import("./emailValidation").EmailValidator | undefined;
    autoFocus?: boolean | undefined;
    maxOptions?: number | undefined;
    inputId?: string | undefined;
    closeMenuOnScroll?: boolean | EventListener | undefined;
    menuShouldBlockScroll?: boolean | undefined;
    ariaLabel?: string | undefined;
    ariaLabelledBy?: string | undefined;
    ariaDescribedBy?: string | undefined;
    ariaLive?: "polite" | "off" | "assertive" | undefined;
    name?: string | undefined;
    header?: React.ReactNode;
    required?: boolean | undefined;
    UNSAFE_hasDraggableParentComponent?: boolean | undefined;
    openMenuOnClick?: boolean | undefined;
    strategy?: "absolute" | "fixed" | undefined;
    showClearIndicator?: boolean | undefined;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "options" | "search" | "placeholder" | "isDisabled" | "autoFocus" | "captureMenuScroll" | "closeMenuOnScroll" | "components" | "inputId" | "isClearable" | "isInvalid" | "isLoading" | "menuPosition" | "menuPortalTarget" | "menuShouldBlockScroll" | "name" | "noOptionsMessage" | "onBlur" | "onChange" | "onFocus" | "onInputChange" | "onKeyDown" | "openMenuOnClick" | "styles" | "value" | "required" | "appearance" | "footer" | "defaultValue" | "fieldId" | "menuMinWidth" | "maxPickerHeight" | "textFieldBackgroundColor" | "loadOptions" | "loadOptionsErrorMessage" | "loadUserSource" | "anchor" | "open" | "onSelection" | "onClear" | "onOpen" | "onClose" | "subtle" | "noBorder" | "placeholderAvatar" | "addMoreMessage" | "clearValueLabel" | "allowEmail" | "suggestEmailsForDomain" | "emailLabel" | "disableInput" | "isValidEmail" | "maxOptions" | "ariaLabel" | "ariaLabelledBy" | "ariaDescribedBy" | "ariaLive" | "header" | "UNSAFE_hasDraggableParentComponent" | "strategy" | "showClearIndicator"> & {
    isMulti?: boolean | undefined;
    width?: string | number | undefined;
} & {} & React.RefAttributes<any>>;
