import React from 'react';
import type { Appearance, OptionData, UserPickerProps, UserPickerState } from '../types';
export type BaseUserPickerProps = UserPickerProps & {
    SelectComponent: React.ComponentType<any>;
    pickerProps?: any;
    styles: any;
    components: any;
    width: string | number;
    name?: string;
    /**
     * @deprecated This is a temporary prop to enable user-pickers to work in Draggable elements in react-beautiful-dnd.
     * See https://product-fabric.atlassian.net/browse/DSP-15701 for more details.
     * It may be removed in a future minor or patch when a longer-term workaround is found.
     */
    UNSAFE_hasDraggableParentComponent?: boolean;
};
export declare class BaseUserPickerWithoutAnalytics extends React.Component<BaseUserPickerProps, UserPickerState> {
    static defaultProps: {
        isMulti: boolean;
        subtle: boolean;
        noBorder: boolean;
        textFieldBackgroundColor: boolean;
        isClearable: boolean;
        loadOptionsErrorMessage: () => React.JSX.Element;
        openMenuOnClick: boolean;
    };
    static getDerivedStateFromProps(nextProps: Partial<UserPickerProps>, prevState: UserPickerState): Partial<UserPickerState>;
    private selectRef;
    private session?;
    private journeyId?;
    private optionsShownUfoExperienceInstance;
    constructor(props: BaseUserPickerProps);
    private getSessionId;
    private withSelectRef;
    nextOption: () => void;
    previousOption: () => void;
    focus: () => void;
    blur: () => void;
    selectOption: () => void;
    private handleChange;
    private handleSelectRef;
    private addOptions;
    private handleLoadOptionsError;
    private debouncedLoadOptions;
    private get isMenuOpenOnClickForSingleSelect();
    abortOptionsShownUfoExperience: () => void;
    startOptionsShownUfoExperience: () => void;
    private executeLoadOptions;
    private handleFocus;
    private resetInputState;
    private handleBlur;
    private handleOpen;
    private handleClose;
    private handleInputChange;
    private fireEvent;
    private startSession;
    componentDidMount(): void;
    componentDidUpdate(_: UserPickerProps, prevState: UserPickerState): void;
    private handleKeyDown;
    handleClearIndicatorHover: (hoveringClearIndicator: boolean) => void;
    private getOptions;
    private getAppearance;
    get ariaProps(): {};
    private handleClickDraggableParentComponent;
    render(): React.JSX.Element;
}
export declare const BaseUserPicker: React.ForwardRefExoticComponent<Pick<Omit<{
    fieldId: string | null; /**
     * @deprecated This is a temporary prop to enable user-pickers to work in Draggable elements in react-beautiful-dnd.
     * See https://product-fabric.atlassian.net/browse/DSP-15701 for more details.
     * It may be removed in a future minor or patch when a longer-term workaround is found.
     */
    options?: OptionData[] | undefined;
    width?: string | number | undefined;
    menuMinWidth?: number | undefined;
    maxPickerHeight?: number | undefined;
    textFieldBackgroundColor?: boolean | undefined;
    loadOptions?: import("../types").LoadOptions | undefined;
    loadOptionsErrorMessage?: ((value: {
        inputValue: string;
    }) => React.ReactNode) | undefined;
    loadUserSource?: import("../types").LoadUserSource | undefined;
    onChange?: import("../types").OnChange | undefined;
    isMulti?: boolean | undefined;
    search?: string | undefined;
    anchor?: React.ComponentType<any> | undefined;
    open?: boolean | undefined;
    isLoading?: boolean | undefined;
    onInputChange?: import("../types").OnInputChange | undefined;
    onSelection?: import("../types").OnOption | undefined;
    onFocus?: import("../types").OnPicker | undefined;
    onBlur?: import("../types").OnPicker | undefined;
    onClear?: import("../types").OnPicker | undefined;
    onOpen?: import("../types").OnPicker | undefined;
    onClose?: import("../types").OnPicker | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<Element>) => void) | undefined;
    appearance?: Appearance | undefined;
    subtle?: boolean | undefined;
    noBorder?: boolean | undefined;
    styles?: import("@atlaskit/select").StylesConfig | undefined;
    components?: Partial<import("packages/design-system/react-select/dist/types/components").SelectComponents<OptionData, boolean, import("@atlaskit/select").GroupType<OptionData>>> | undefined;
    defaultValue?: import("../types").DefaultValue;
    placeholder?: React.ReactNode;
    placeholderAvatar?: "team" | "person" | undefined;
    addMoreMessage?: string | undefined;
    noOptionsMessage?: React.ReactNode | ((value: {
        inputValue: string;
    }) => React.ReactNode);
    footer?: React.ReactNode;
    value?: import("../types").Value;
    isDisabled?: boolean | undefined;
    isInvalid?: boolean | undefined;
    isClearable?: boolean | undefined;
    clearValueLabel?: string | undefined;
    menuPosition?: "absolute" | "fixed" | undefined;
    captureMenuScroll?: boolean | undefined;
    menuPortalTarget?: HTMLElement | undefined;
    allowEmail?: boolean | undefined;
    suggestEmailsForDomain?: string | undefined;
    emailLabel?: string | undefined;
    disableInput?: boolean | undefined;
    isValidEmail?: import("./emailValidation").EmailValidator | undefined;
    autoFocus?: boolean | undefined;
    maxOptions?: number | undefined;
    inputId?: string | undefined;
    closeMenuOnScroll?: boolean | EventListener | undefined;
    menuShouldBlockScroll?: boolean | undefined;
    ariaLabel?: string | undefined;
    ariaLabelledBy?: string | undefined;
    ariaDescribedBy?: string | undefined;
    ariaLive?: "polite" | "off" | "assertive" | undefined;
    name?: string | undefined;
    header?: React.ReactNode;
    required?: boolean | undefined;
    UNSAFE_hasDraggableParentComponent?: boolean | undefined;
    openMenuOnClick?: boolean | undefined;
    strategy?: "absolute" | "fixed" | undefined;
    showClearIndicator?: boolean | undefined;
} & {
    SelectComponent: React.ComponentType<any>;
    pickerProps?: any;
    styles: any;
    components: any;
    width: string | number;
    name?: string | undefined;
    /**
     * @deprecated This is a temporary prop to enable user-pickers to work in Draggable elements in react-beautiful-dnd.
     * See https://product-fabric.atlassian.net/browse/DSP-15701 for more details.
     * It may be removed in a future minor or patch when a longer-term workaround is found.
     */
    UNSAFE_hasDraggableParentComponent?: boolean | undefined;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "options" | "search" | "placeholder" | "isDisabled" | "autoFocus" | "captureMenuScroll" | "closeMenuOnScroll" | "components" | "inputId" | "isInvalid" | "isLoading" | "menuPosition" | "menuPortalTarget" | "menuShouldBlockScroll" | "name" | "noOptionsMessage" | "onBlur" | "onChange" | "onFocus" | "onInputChange" | "onKeyDown" | "styles" | "value" | "required" | "appearance" | "footer" | "defaultValue" | "fieldId" | "width" | "menuMinWidth" | "maxPickerHeight" | "loadOptions" | "loadUserSource" | "anchor" | "open" | "onSelection" | "onClear" | "onOpen" | "onClose" | "placeholderAvatar" | "addMoreMessage" | "clearValueLabel" | "allowEmail" | "suggestEmailsForDomain" | "emailLabel" | "disableInput" | "isValidEmail" | "maxOptions" | "ariaLabel" | "ariaLabelledBy" | "ariaDescribedBy" | "ariaLive" | "header" | "UNSAFE_hasDraggableParentComponent" | "strategy" | "showClearIndicator" | "SelectComponent" | "pickerProps"> & {
    isClearable?: boolean | undefined;
    isMulti?: boolean | undefined;
    openMenuOnClick?: boolean | undefined;
    textFieldBackgroundColor?: boolean | undefined;
    loadOptionsErrorMessage?: ((value: {
        inputValue: string;
    }) => React.ReactNode) | undefined;
    subtle?: boolean | undefined;
    noBorder?: boolean | undefined;
} & {} & React.RefAttributes<any>>;
