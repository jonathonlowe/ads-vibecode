"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userInfoEvent = exports.startSession = exports.selectEvent = exports.searchedEvent = exports.focusEvent = exports.failedEvent = exports.deleteEvent = exports.createAndFireEventInElementsChannel = exports.clearEvent = exports.cancelEvent = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _uuid = require("uuid");
var _utils = require("./components/utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var packageName = "@atlaskit/user-picker";
var packageVersion = "11.0.10";
var UUID_REGEXP_TEAMS_GROUPS = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
var UUID_REGEXP_OLD_AAID = /^[a-fA-F0-9]{1,8}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
var UUID_REGEXP_NEW_AAID = /^[a-fA-F0-9]{24,24}$/;
var startSession = exports.startSession = function startSession() {
  return {
    id: (0, _uuid.v4)(),
    start: Date.now(),
    inputChangeTime: Date.now(),
    upCount: 0,
    downCount: 0,
    lastKey: undefined
  };
};
var createAndFireEventInElementsChannel = exports.createAndFireEventInElementsChannel = (0, _analyticsNext.createAndFireEvent)('fabric-elements');
var createEvent = function createEvent(eventType, action, actionSubject) {
  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return {
    eventType: eventType,
    action: action,
    actionSubject: actionSubject,
    attributes: _objectSpread({
      packageName: packageName,
      packageVersion: packageVersion
    }, attributes)
  };
};
var checkValidId = function checkValidId(id) {
  return UUID_REGEXP_NEW_AAID.test(id) || UUID_REGEXP_OLD_AAID.test(id) || UUID_REGEXP_TEAMS_GROUPS.test(id);
};
var optionData2Analytics = function optionData2Analytics(option) {
  var id = option.id,
    type = option.type;
  // id's of email types are emails which is PII
  var validatedData = {
    id: checkValidId(id) ? id : null,
    type: type || null
  };
  if ((0, _utils.isExternalUser)(option)) {
    return _objectSpread(_objectSpread({}, validatedData), {}, {
      type: 'external_user',
      sources: option.sources,
      externalUserType: option.externalUserType
    });
  }
  if ((0, _utils.isCustom)(option) && option.analyticsType) {
    return _objectSpread(_objectSpread({}, validatedData), {}, {
      type: option.analyticsType
    });
  }
  return validatedData;
};
var buildValueForAnalytics = function buildValueForAnalytics(value) {
  if (value) {
    var valueToConvert = Array.isArray(value) ? value : [value];
    return valueToConvert.map(function (_ref) {
      var data = _ref.data;
      return optionData2Analytics(data);
    });
  }
  return [];
};
var createDefaultPickerAttributes = function createDefaultPickerAttributes(props, session, journeyId) {
  return {
    context: props.fieldId,
    sessionId: sessionId(session),
    pickerType: pickerType(props),
    journeyId: journeyId
  };
};
var focusEvent = exports.focusEvent = function focusEvent(props, state, session, journeyId) {
  return createEvent('ui', 'focused', 'userPicker', _objectSpread(_objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)), {}, {
    values: buildValueForAnalytics(state.value)
  }));
};
var clearEvent = exports.clearEvent = function clearEvent(props, state, session, journeyId) {
  return createEvent('ui', 'cleared', 'userPicker', _objectSpread(_objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)), {}, {
    pickerOpen: state.menuIsOpen,
    values: values(state)
  }));
};
var deleteEvent = exports.deleteEvent = function deleteEvent(props, state, session, journeyId) {
  return createEvent('ui', 'deleted', 'userPickerItem', {
    context: props.fieldId,
    sessionId: sessionId(session),
    journeyId: journeyId,
    value: optionData2Analytics(arguments.length <= 4 ? undefined : arguments[4]),
    pickerOpen: state.menuIsOpen
  });
};
var cancelEvent = exports.cancelEvent = function cancelEvent(props, _, session, journeyId) {
  return createEvent('ui', 'cancelled', 'userPicker', _objectSpread(_objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)), {}, {
    sessionDuration: sessionDuration(session),
    queryLength: queryLength(arguments.length <= 4 ? undefined : arguments[4]),
    spaceInQuery: spaceInQuery(arguments.length <= 4 ? undefined : arguments[4]),
    upKeyCount: upKeyCount(session),
    downKeyCount: downKeyCount(session)
  }));
};
var selectEvent = exports.selectEvent = function selectEvent(props, state, session, journeyId) {
  return createEvent('ui', selectEventType(session), 'userPicker', _objectSpread(_objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)), {}, {
    sessionDuration: sessionDuration(session),
    position: position(state, arguments.length <= 4 ? undefined : arguments[4]),
    queryLength: queryLength(state),
    spaceInQuery: spaceInQuery(state),
    upKeyCount: upKeyCount(session),
    downKeyCount: downKeyCount(session),
    result: result(arguments.length <= 4 ? undefined : arguments[4]),
    numberOfResults: numberOfResults(state)
  }));
};
var searchedEvent = exports.searchedEvent = function searchedEvent(props, state, session, journeyId) {
  var searchResults = results(state);
  return createEvent('operational', 'searched', 'userPicker', _objectSpread(_objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)), {}, {
    sessionDuration: sessionDuration(session),
    durationSinceInputChange: durationSinceInputChange(session),
    queryLength: queryLength(state),
    isLoading: isLoading(props, state),
    results: searchResults,
    numberOfResults: searchResults.length
  }));
};
var failedEvent = exports.failedEvent = function failedEvent(props, _, session, journeyId) {
  return createEvent('operational', 'failed', 'userPicker', _objectSpread({}, createDefaultPickerAttributes(props, session, journeyId)));
};
var userInfoEvent = exports.userInfoEvent = function userInfoEvent(sources, accountId) {
  return createEvent('ui', 'displayed', 'userInfo', {
    sources: sources,
    // accountId can be PII if it is an email so check that it's an AAID first
    accountId: checkValidId(accountId) ? accountId : null
  });
};
function queryLength(state) {
  return state.inputValue.length;
}
function selectEventType(session) {
  return session && session.lastKey === 13 ? 'pressed' : 'clicked';
}
function upKeyCount(session) {
  return session ? session.upCount : null;
}
function downKeyCount(session) {
  return session ? session.downCount : null;
}
function spaceInQuery(state) {
  return state.inputValue.indexOf(' ') !== -1;
}
function sessionDuration(session) {
  return session ? Date.now() - session.start : null;
}
function durationSinceInputChange(session) {
  return session ? Date.now() - session.inputChangeTime : null;
}
function sessionId(session) {
  return session && session.id;
}
function position(state, value) {
  return value ? state.options.findIndex(function (option) {
    return option === value.data;
  }) : -1;
}
function pickerType(props) {
  return props.isMulti ? 'multi' : 'single';
}
function result(option) {
  return option ? optionData2Analytics(option.data) : null;
}
function results(state) {
  return (state.options || []).map(optionData2Analytics);
}
function isLoading(props, state) {
  return state.count > 0 || props.isLoading;
}
function values(state) {
  return state.value ? Array.isArray(state.value) ? state.value.map(function (option) {
    return optionData2Analytics(option.data);
  }) : [optionData2Analytics(state.value.data)] : [];
}
function numberOfResults(state) {
  return (state.options || []).length;
}