"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollToValue = exports.MultiValue = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _primitives = require("@atlaskit/primitives");
var _select = require("@atlaskit/select");
var _react2 = require("@emotion/react");
var _AddOptionAvatar = require("./AddOptionAvatar");
var _SizeableAvatar = require("./SizeableAvatar");
var _utils = require("./utils");
var _peopleGroupPeople = _interopRequireDefault(require("@atlaskit/icon/core/migration/people-group--people"));
var _verifiedTeamIcon = require("@atlaskit/people-teams-ui-public/verified-team-icon");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _excluded = ["children", "innerProps"];
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var scrollToValue = exports.scrollToValue = function scrollToValue(valueContainer, control) {
  var _valueContainer$getBo = valueContainer.getBoundingClientRect(),
    top = _valueContainer$getBo.top,
    height = _valueContainer$getBo.height;
  var _control$getBoundingC = control.getBoundingClientRect(),
    controlHeight = _control$getBoundingC.height;
  if (top - height < 0) {
    valueContainer.scrollIntoView();
  }
  if (top + height > controlHeight) {
    valueContainer.scrollIntoView(false);
  }
};
var groupTagContainer = (0, _primitives.xcss)({
  paddingLeft: 'space.025',
  marginTop: 'space.025'
});
var nameWrapper = (0, _react2.css)({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  paddingLeft: "var(--ds-space-050, 4px)"
});
var MultiValue = exports.MultiValue = /*#__PURE__*/function (_React$Component) {
  function MultiValue(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MultiValue);
    _this = _callSuper(this, MultiValue, [props]);
    (0, _defineProperty2.default)(_this, "getElemBefore", function () {
      var data = _this.props.data.data;
      if ((0, _utils.isEmail)(data)) {
        // This element is a decorative icon and does not require a label
        return (0, _react2.jsx)(_AddOptionAvatar.AddOptionAvatar, {
          isLozenge: true
        });
      }
      if ((0, _utils.isGroup)(data)) {
        return (0, _react2.jsx)(_primitives.Box, {
          xcss: groupTagContainer
        }, (0, _react2.jsx)(_peopleGroupPeople.default, {
          LEGACY_margin: "-2px 0 0 0",
          color: "currentColor",
          label: "" // This element is a decorative icon and does not require a label
          ,
          LEGACY_size: "small"
        }));
      }
      return (0, _react2.jsx)(_SizeableAvatar.SizeableAvatar, {
        appearance: "multi",
        src: (0, _utils.getAvatarUrl)(data),
        type: (0, _utils.isTeam)(data) && (0, _platformFeatureFlags.fg)('verified-team-in-user-picker') ? 'team' : 'person'
      });
    });
    (0, _defineProperty2.default)(_this, "getElemAfter", function () {
      var data = _this.props.data.data;
      if ((0, _utils.isTeam)(data) && data.verified && (0, _platformFeatureFlags.fg)('verified-team-in-user-picker')) {
        return (0, _react2.jsx)(_verifiedTeamIcon.VerifiedTeamIcon, null);
      }
      return null;
    });
    _this.containerRef = /*#__PURE__*/_react.default.createRef();
    return _this;
  }
  (0, _inherits2.default)(MultiValue, _React$Component);
  return (0, _createClass2.default)(MultiValue, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var isFocused = this.props.isFocused;
      if (isFocused && this.containerRef.current && this.containerRef.current.parentElement && this.containerRef.current.parentElement.parentElement) {
        scrollToValue(this.containerRef.current, this.containerRef.current.parentElement.parentElement);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this$props = this.props,
        _this$props$data = _this$props.data,
        label = _this$props$data.label,
        data = _this$props$data.data,
        innerProps = _this$props.innerProps,
        isFocused = _this$props.isFocused;
      var _nextProps$data = nextProps.data,
        nextLabel = _nextProps$data.label,
        nextData = _nextProps$data.data,
        nextInnerProps = nextProps.innerProps,
        nextIsFocused = nextProps.isFocused;

      // We can ignore onRemove here because it is an anonymous function
      // that will be recreated every time but with the same implementation.
      return data !== nextData || label !== nextLabel || innerProps !== nextInnerProps || isFocused !== nextIsFocused;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        children = _this$props2.children,
        innerProps = _this$props2.innerProps,
        rest = (0, _objectWithoutProperties2.default)(_this$props2, _excluded);
      return (0, _react2.jsx)(_select.components.MultiValue, (0, _extends2.default)({}, rest, {
        innerProps: {
          ref: this.containerRef
        },
        cropWithEllipsis: false
      }), (0, _react2.jsx)(_primitives.Inline, {
        alignBlock: "center"
      }, this.getElemBefore(), " ", (0, _react2.jsx)("div", {
        css: nameWrapper
      }, children), this.getElemAfter()));
    }
  }]);
}(_react.default.Component);