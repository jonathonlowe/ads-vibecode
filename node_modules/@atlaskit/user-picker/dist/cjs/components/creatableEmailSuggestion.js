"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCreatableSuggestedEmailProps = void 0;
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _types = require("../types");
var _emailValidation = require("./emailValidation");
var _utils = require("./utils");
var validOption = ['VALID', 'POTENTIAL'];
var isValidNewOption = function isValidNewOption(inputValue) {
  return inputValue && inputValue.length > 0;
};

// Generates suggested option data based on user input and validity of the input (if it is an email or not);
var getNewOptionData = function getNewOptionData() {
  var isValidEmail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emailValidation.isValidEmail;
  var emailDomain = arguments.length > 1 ? arguments[1] : undefined;
  return function (inputValue) {
    if (!inputValue) {
      return null;
    }
    var isEmail = inputValue && validOption.includes(isValidEmail(inputValue));
    var value = isEmail ? inputValue : "".concat(inputValue.replace(/\s+/g, '.').toLocaleLowerCase(), "@").concat(emailDomain);
    return {
      label: value,
      value: value,
      data: {
        id: value,
        name: value,
        type: _types.EmailType,
        suggestion: true
      }
    };
  };
};
var formatCreateLabel = function formatCreateLabel(inputText) {
  if (inputText) {
    return inputText.trim();
  }
  return '';
};

// Option will not be selectable until the email value is valid and can actually be invited
var isOptionDisabled = function isOptionDisabled() {
  var isValidEmail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emailValidation.isValidEmail;
  return function (option) {
    if ((0, _utils.isEmail)(option.data)) {
      return isValidEmail(option.data.id) !== 'VALID';
    }
    return !!option.isDisabled;
  };
};

// Generates user picker props to always create an email item visible
// to the user as a suggested option when they are typing in a value
var getCreatableSuggestedEmailProps = exports.getCreatableSuggestedEmailProps = (0, _memoizeOne.default)(function (emailDomain, isValidEmail) {
  return {
    allowCreateWhileLoading: true,
    createOptionPosition: 'last',
    isValidNewOption: isValidNewOption,
    getNewOptionData: getNewOptionData(isValidEmail, emailDomain),
    formatCreateLabel: formatCreateLabel,
    isOptionDisabled: isOptionDisabled(isValidEmail)
  };
});