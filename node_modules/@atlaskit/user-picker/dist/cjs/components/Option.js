"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = void 0;
var _compiled = require("@atlaskit/primitives/compiled");
var _select = require("@atlaskit/select");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _react = _interopRequireDefault(require("react"));
var _UserOption = require("./UserOption");
var _ExternalUserOption = _interopRequireDefault(require("./ExternalUserOption"));
var _TeamOption = _interopRequireDefault(require("./TeamOption"));
var _GroupOption = _interopRequireDefault(require("./GroupOption"));
var _EmailOption = _interopRequireDefault(require("./EmailOption"));
var _CustomOption = _interopRequireDefault(require("./CustomOption"));
var _utils = require("./utils");
var _emailValidation = require("./emailValidation");
var defaultOption = function defaultOption(_ref) {
  var data = _ref.data.data,
    isSelected = _ref.isSelected,
    status = _ref.status;
  return (
    /*#__PURE__*/
    // @ts-expect-error - <UserOption> expects `data` to be of User interface, but data is OptionData interface by default. Check if the `user` props in UserOption should also accept OptionData or refactor this file to accept generics
    _react.default.createElement(_UserOption.UserOption, {
      user: data,
      status: status,
      isSelected: isSelected
    })
  );
};
var dataOption = function dataOption(_ref2) {
  var data = _ref2.data.data,
    isSelected = _ref2.isSelected,
    status = _ref2.status,
    selectProps = _ref2.selectProps;
  if ((0, _utils.isExternalUser)(data)) {
    return /*#__PURE__*/_react.default.createElement(_ExternalUserOption.default, {
      user: data,
      status: status,
      isSelected: isSelected
    });
  }
  if ((0, _utils.isUser)(data)) {
    return /*#__PURE__*/_react.default.createElement(_UserOption.UserOption, {
      user: data,
      status: status,
      isSelected: isSelected
    });
  }
  if ((0, _utils.isEmail)(data)) {
    return /*#__PURE__*/_react.default.createElement(_EmailOption.default, {
      email: data,
      emailValidity: (0, _emailValidation.isValidEmail)(data.id),
      isSelected: isSelected,
      label: selectProps.emailLabel
    });
  }
  if ((0, _utils.isTeam)(data)) {
    return /*#__PURE__*/_react.default.createElement(_TeamOption.default, {
      team: data,
      isSelected: isSelected
    });
  }
  if ((0, _utils.isGroup)(data)) {
    return /*#__PURE__*/_react.default.createElement(_GroupOption.default, {
      group: data,
      isSelected: isSelected
    });
  }
  if ((0, _utils.isCustom)(data)) {
    return /*#__PURE__*/_react.default.createElement(_CustomOption.default, {
      data: data,
      isSelected: isSelected
    });
  }
  return null;
};
var dataOptionWithTooltip = function dataOptionWithTooltip(props) {
  var _props$data;
  if ((_props$data = props.data) !== null && _props$data !== void 0 && (_props$data = _props$data.data) !== null && _props$data !== void 0 && _props$data.tooltip) {
    var _props$data2;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      content: (_props$data2 = props.data) === null || _props$data2 === void 0 || (_props$data2 = _props$data2.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.tooltip
    }, function (tooltipProps) {
      return /*#__PURE__*/_react.default.createElement(_compiled.Box, tooltipProps, dataOption(props));
    });
  }
  return dataOption(props);
};
var Option = exports.Option = function Option(props) {
  return /*#__PURE__*/_react.default.createElement(_select.components.Option, props, /*#__PURE__*/_react.default.createElement(_react.default.Suspense, {
    fallback: defaultOption(props)
  }, dataOptionWithTooltip(props)));
};