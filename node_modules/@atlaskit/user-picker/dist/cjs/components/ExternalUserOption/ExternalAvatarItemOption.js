"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExternalAvatarItemOption = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("@emotion/react");
var _colors = require("@atlaskit/theme/colors");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var outerWrapper = function outerWrapper(isDisabled) {
  return (0, _react.css)({
    alignItems: 'center',
    boxSizing: 'border-box',
    display: 'flex',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: 1,
    outline: 'none',
    margin: 0,
    width: '100%',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    cursor: isDisabled ? 'not-allowed' : 'pointer',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: isDisabled ? "var(--ds-opacity-disabled, 0.4)" : undefined
  });
};
var detailsWrapper = (0, _react.css)({
  display: 'flex',
  maxWidth: '100%',
  minWidth: 0,
  flex: '1 1 100%',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 1.4,
  paddingLeft: "var(--ds-space-100, 8px)",
  alignItems: 'center'
});
var textSection = (0, _react.css)({
  width: 'calc(100% - 32px)',
  flex: 'auto'
});
var getTextStyle = function getTextStyle(isSecondary) {
  var secondaryCssArgs = isSecondary ? {
    color: "var(--ds-text-selected, ".concat(_colors.B400, ")"),
    font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
  } : {};
  return (0, _react.css)(_objectSpread(_objectSpread({
    display: 'flex',
    maxWidth: '100%',
    margin: 0,
    color: "var(--ds-text-selected, ".concat(_colors.B400, ")")
  }, {
    secondaryCssArgs: secondaryCssArgs
  }), {}, {
    whiteSpace: 'nowrap',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '> span': {
      maxWidth: 'inherit'
    }
  }));
};
var ExternalAvatarItemOption = exports.ExternalAvatarItemOption = function ExternalAvatarItemOption(_ref) {
  var avatar = _ref.avatar,
    isDisabled = _ref.isDisabled,
    primaryText = _ref.primaryText,
    secondaryText = _ref.secondaryText,
    sourcesInfoTooltip = _ref.sourcesInfoTooltip;
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _react.jsx)("div", {
      css: outerWrapper(isDisabled)
    }, avatar, (0, _react.jsx)("div", {
      css: detailsWrapper
    }, (0, _react.jsx)("div", {
      css: textSection
    }, (0, _react.jsx)("div", null, (0, _react.jsx)("div", {
      css: getTextStyle()
    }, primaryText)), secondaryText && (0, _react.jsx)("div", null, (0, _react.jsx)("div", {
      css: getTextStyle(true)
    }, secondaryText))), (0, _react.jsx)("div", null, sourcesInfoTooltip)))
  );
};