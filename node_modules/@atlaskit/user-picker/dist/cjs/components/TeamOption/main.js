"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TeamOption = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _colors = require("@atlaskit/theme/colors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _verifiedTeamIcon = require("@atlaskit/people-teams-ui-public/verified-team-icon");
var _react = require("@emotion/react");
var _react2 = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _AvatarItemOption = require("../AvatarItemOption");
var _HighlightText = require("../HighlightText");
var _i18n = require("../i18n");
var _SizeableAvatar = require("../SizeableAvatar");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var TeamOption = exports.TeamOption = /*#__PURE__*/function (_React$PureComponent) {
  function TeamOption() {
    var _this;
    (0, _classCallCheck2.default)(this, TeamOption);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, TeamOption, [].concat(args));
    (0, _defineProperty2.default)(_this, "getPrimaryText", function () {
      var _this$props$team = _this.props.team,
        name = _this$props$team.name,
        highlight = _this$props$team.highlight,
        verified = _this$props$team.verified;
      return [(0, _react.jsx)("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: (0, _AvatarItemOption.textWrapper)(_this.props.isSelected ? "var(--ds-text-selected, ".concat(_colors.B400, ")") : "var(--ds-text, ".concat(_colors.N800, ")"))
      }, (0, _platformFeatureFlags.fg)('verified-team-in-user-picker') ? (0, _react.jsx)(_compiled.Inline, {
        alignBlock: "center"
      }, (0, _react.jsx)(_HighlightText.HighlightText, {
        highlights: highlight && highlight.name
      }, name), verified && (0, _react.jsx)(_verifiedTeamIcon.VerifiedTeamIcon, null)) : (0, _react.jsx)(_HighlightText.HighlightText, {
        highlights: highlight && highlight.name
      }, name))];
    });
    (0, _defineProperty2.default)(_this, "renderByline", function () {
      var _this$props = _this.props,
        isSelected = _this$props.isSelected,
        _this$props$team2 = _this$props.team,
        memberCount = _this$props$team2.memberCount,
        includesYou = _this$props$team2.includesYou;

      // if Member count is missing, do not show the byline, regardless of the availability of includesYou
      if (memberCount === null || typeof memberCount === 'undefined') {
        return undefined;
      } else {
        if (includesYou === true) {
          if (memberCount > 50) {
            return _this.getBylineComponent(isSelected, (0, _react.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.plus50MembersWithYou));
          } else {
            return _this.getBylineComponent(isSelected, (0, _react.jsx)(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _i18n.messages.memberCountWithYou, {
              values: {
                count: memberCount
              }
            })));
          }
        } else {
          if (memberCount > 50) {
            return _this.getBylineComponent(isSelected, (0, _react.jsx)(_reactIntlNext.FormattedMessage, _i18n.messages.plus50MembersWithoutYou));
          } else {
            return _this.getBylineComponent(isSelected, (0, _react.jsx)(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _i18n.messages.memberCountWithoutYou, {
              values: {
                count: memberCount
              }
            })));
          }
        }
      }
    });
    (0, _defineProperty2.default)(_this, "getBylineComponent", function (isSelected, message) {
      return (0, _react.jsx)("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: (0, _AvatarItemOption.textWrapper)(isSelected ? "var(--ds-text-selected, ".concat(_colors.B400, ")") : "var(--ds-text-subtlest, ".concat(_colors.N200, ")")),
        "data-testid": "user-picker-team-secondary-text"
      }, message);
    });
    (0, _defineProperty2.default)(_this, "renderAvatar", function () {
      var avatarUrl = _this.props.team.avatarUrl;
      return (0, _react.jsx)(_SizeableAvatar.SizeableAvatar, {
        appearance: "big",
        src: avatarUrl,
        type: "team"
      });
    });
    (0, _defineProperty2.default)(_this, "getLozengeProps", function () {
      return typeof _this.props.team.lozenge === 'string' ? {
        text: _this.props.team.lozenge
      } : _this.props.team.lozenge;
    });
    (0, _defineProperty2.default)(_this, "renderCustomByLine", function () {
      var _this$props$team3;
      if (!((_this$props$team3 = _this.props.team) !== null && _this$props$team3 !== void 0 && _this$props$team3.byline)) {
        return undefined;
      }
      return (0, _react.jsx)("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: (0, _AvatarItemOption.textWrapper)(_this.props.isSelected ? "var(--ds-text-selected, ".concat(_colors.B400, ")") : "var(--ds-text-subtlest, ".concat(_colors.N200, ")"))
      }, _this.props.team.byline);
    });
    return _this;
  }
  (0, _inherits2.default)(TeamOption, _React$PureComponent);
  return (0, _createClass2.default)(TeamOption, [{
    key: "render",
    value: function render() {
      return (0, _react.jsx)(_AvatarItemOption.AvatarItemOption, {
        avatar: this.renderAvatar(),
        isDisabled: this.props.team.isDisabled,
        lozenge: this.getLozengeProps(),
        primaryText: this.getPrimaryText(),
        secondaryText: this.renderCustomByLine() || this.renderByline()
      });
    }
  }]);
}(_react2.default.PureComponent);