"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optionToSelectableOptions = exports.optionToSelectableOption = exports.isUser = exports.isTeam = exports.isSingleValue = exports.isPopupUserPickerByProps = exports.isPopupUserPickerByComponent = exports.isLozengeText = exports.isIterable = exports.isGroup = exports.isExternalUser = exports.isEmail = exports.isDefaultValuePopulated = exports.isCustom = exports.isChildInput = exports.hasValue = exports.getOptions = exports.getAvatarUrl = exports.getAvatarSize = exports.extractOptionValue = exports.callCallback = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _types = require("../types");
var _select = require("@atlaskit/select");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isExternalUser = exports.isExternalUser = function isExternalUser(option) {
  return option.type === _types.ExternalUserType || Boolean(option.isExternal);
};
var isUser = exports.isUser = function isUser(option) {
  return option.type === undefined || option.type === _types.UserType;
};
var isTeam = exports.isTeam = function isTeam(option) {
  return option.type === _types.TeamType;
};
var isGroup = exports.isGroup = function isGroup(option) {
  return option.type === _types.GroupType;
};
var isEmail = exports.isEmail = function isEmail(option) {
  return option.type === _types.EmailType;
};
var isCustom = exports.isCustom = function isCustom(option) {
  return option.type === _types.CustomType;
};
var isDefaultValuePopulated = exports.isDefaultValuePopulated = function isDefaultValuePopulated(value) {
  return value && !Array.isArray(value) || Array.isArray(value) && value.length > 0;
};
var isOptionData = function isOptionData(option) {
  return option.name !== undefined;
};
var optionToSelectableOption = exports.optionToSelectableOption = function optionToSelectableOption(option) {
  if (isOptionData(option)) {
    return {
      data: option,
      isDisabled: option.isDisabled,
      label: option.name,
      value: option.id
    };
  } else {
    return {
      data: _objectSpread(_objectSpread({}, option), {}, {
        name: option.id
      }),
      isDisabled: option.isDisabled,
      label: option.id,
      value: option.id
    };
  }
};
var extractOptionValue = exports.extractOptionValue = function extractOptionValue(value) {
  if (!value) {
    return undefined;
  }
  if (Array.isArray(value)) {
    return value.map(function (_ref) {
      var option = _ref.data;
      return option;
    });
  }
  return value.data;
};
var isIterable = exports.isIterable = function isIterable(a) {
  return typeof a[Symbol.iterator] === 'function';
};
var getOptions = exports.getOptions = (0, _memoizeOne.default)(function (options) {
  return options.map(optionToSelectableOption);
});
var optionToSelectableOptions = exports.optionToSelectableOptions = (0, _memoizeOne.default)(function (defaultValue) {
  if (!defaultValue) {
    return null;
  }
  if (Array.isArray(defaultValue)) {
    return defaultValue.map(optionToSelectableOption);
  }
  return optionToSelectableOption(defaultValue);
});
var getAvatarSize = exports.getAvatarSize = function getAvatarSize(appearance) {
  return appearance === 'big' ? 'medium' : appearance === 'multi' ? 'xsmall' : 'small';
};
var isChildInput = exports.isChildInput = function isChildInput(child) {
  return child && (0, _typeof2.default)(child) === 'object' && child.props && child.props.type === 'text';
};
var isSingleValue = exports.isSingleValue = function isSingleValue(value) {
  return !!value && !Array.isArray(value);
};
var hasValue = exports.hasValue = function hasValue(value) {
  return !!value && value.trim().length > 0;
};
var callCallback = exports.callCallback = function callCallback(callback) {
  if (typeof callback === 'function') {
    try {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      //  there is mystery error in IE 11, so we need this try-catch
      return callback.apply(void 0, args);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('@atlassian/user-select: an error happening in `callCallback`: ', error);
    }
  }
};
var getAvatarUrl = exports.getAvatarUrl = function getAvatarUrl(optionData) {
  if (isUser(optionData) || isTeam(optionData) || isCustom(optionData)) {
    return optionData.avatarUrl;
  }
  return undefined;
};
var isPopupUserPickerByComponent = exports.isPopupUserPickerByComponent = function isPopupUserPickerByComponent(SelectComponent) {
  return SelectComponent === _select.PopupSelect;
};
var isPopupUserPickerByProps = exports.isPopupUserPickerByProps = function isPopupUserPickerByProps(selectProps) {
  return selectProps.searchThreshold === -1;
};
var isLozengeText = exports.isLozengeText = function isLozengeText(lozengeProp) {
  return (lozengeProp === null || lozengeProp === void 0 ? void 0 : lozengeProp.hasOwnProperty('text')) || false;
};