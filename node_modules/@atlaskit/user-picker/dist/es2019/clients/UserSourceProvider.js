import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';
const ExusUserSourceContext = /*#__PURE__*/createContext({});
export const ExusUserSourceProvider = ({
  fetchUserSource,
  children
}) => /*#__PURE__*/React.createElement(ExusUserSourceContext.Provider, {
  value: {
    fetchUserSource
  }
}, children);
export const useUserSource = (accountId, shouldFetchSources, existingSources) => {
  const {
    fetchUserSource
  } = useContext(ExusUserSourceContext);
  const [externalSources, setExternalSources] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const abortController = useMemo(() => {
    if (typeof AbortController === 'undefined') {
      return;
    }
    return new AbortController();
  }, []);
  useEffect(() => {
    let isMounted = true;
    const cleanup = () => {
      abortController === null || abortController === void 0 ? void 0 : abortController.abort();
      isMounted = false;
    };
    if (!fetchUserSource || !shouldFetchSources) {
      setLoading(false);
      return cleanup;
    }
    fetchUserSource(accountId, abortController === null || abortController === void 0 ? void 0 : abortController.signal).then(externalSources => {
      if (!isMounted) {
        return;
      }
      setLoading(false);
      const externalSourceTypes = externalSources.map(source => source.sourceType);
      setExternalSources(externalSourceTypes);
    }).catch(error => {
      if (!isMounted) {
        return;
      }
      setLoading(false);
      setError(error);
    });
    return cleanup;
  }, [fetchUserSource, accountId, abortController, shouldFetchSources]);
  return useMemo(() => ({
    sources: Array.from(new Set([...(existingSources !== null && existingSources !== void 0 ? existingSources : []), ...externalSources])),
    loading,
    error
  }), [error, existingSources, externalSources, loading]);
};