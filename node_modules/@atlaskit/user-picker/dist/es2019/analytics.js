import { createAndFireEvent } from '@atlaskit/analytics-next';
import { v4 as uuidv4 } from 'uuid';
import { isCustom, isExternalUser } from './components/utils';
const packageName = "@atlaskit/user-picker";
const packageVersion = "11.0.10";
const UUID_REGEXP_TEAMS_GROUPS = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
const UUID_REGEXP_OLD_AAID = /^[a-fA-F0-9]{1,8}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
const UUID_REGEXP_NEW_AAID = /^[a-fA-F0-9]{24,24}$/;
export const startSession = () => ({
  id: uuidv4(),
  start: Date.now(),
  inputChangeTime: Date.now(),
  upCount: 0,
  downCount: 0,
  lastKey: undefined
});
export const createAndFireEventInElementsChannel = createAndFireEvent('fabric-elements');
const createEvent = (eventType, action, actionSubject, attributes = {}) => ({
  eventType,
  action,
  actionSubject,
  attributes: {
    packageName,
    packageVersion,
    ...attributes
  }
});
const checkValidId = id => {
  return UUID_REGEXP_NEW_AAID.test(id) || UUID_REGEXP_OLD_AAID.test(id) || UUID_REGEXP_TEAMS_GROUPS.test(id);
};
const optionData2Analytics = option => {
  const {
    id,
    type
  } = option;
  // id's of email types are emails which is PII
  const validatedData = {
    id: checkValidId(id) ? id : null,
    type: type || null
  };
  if (isExternalUser(option)) {
    return {
      ...validatedData,
      type: 'external_user',
      sources: option.sources,
      externalUserType: option.externalUserType
    };
  }
  if (isCustom(option) && option.analyticsType) {
    return {
      ...validatedData,
      type: option.analyticsType
    };
  }
  return validatedData;
};
const buildValueForAnalytics = value => {
  if (value) {
    const valueToConvert = Array.isArray(value) ? value : [value];
    return valueToConvert.map(({
      data
    }) => optionData2Analytics(data));
  }
  return [];
};
const createDefaultPickerAttributes = (props, session, journeyId) => ({
  context: props.fieldId,
  sessionId: sessionId(session),
  pickerType: pickerType(props),
  journeyId
});
export const focusEvent = (props, state, session, journeyId) => createEvent('ui', 'focused', 'userPicker', {
  ...createDefaultPickerAttributes(props, session, journeyId),
  values: buildValueForAnalytics(state.value)
});
export const clearEvent = (props, state, session, journeyId) => createEvent('ui', 'cleared', 'userPicker', {
  ...createDefaultPickerAttributes(props, session, journeyId),
  pickerOpen: state.menuIsOpen,
  values: values(state)
});
export const deleteEvent = (props, state, session, journeyId, ...args) => createEvent('ui', 'deleted', 'userPickerItem', {
  context: props.fieldId,
  sessionId: sessionId(session),
  journeyId,
  value: optionData2Analytics(args[0]),
  pickerOpen: state.menuIsOpen
});
export const cancelEvent = (props, _, session, journeyId, ...args) => createEvent('ui', 'cancelled', 'userPicker', {
  ...createDefaultPickerAttributes(props, session, journeyId),
  sessionDuration: sessionDuration(session),
  queryLength: queryLength(args[0]),
  spaceInQuery: spaceInQuery(args[0]),
  upKeyCount: upKeyCount(session),
  downKeyCount: downKeyCount(session)
});
export const selectEvent = (props, state, session, journeyId, ...args) => {
  return createEvent('ui', selectEventType(session), 'userPicker', {
    ...createDefaultPickerAttributes(props, session, journeyId),
    sessionDuration: sessionDuration(session),
    position: position(state, args[0]),
    queryLength: queryLength(state),
    spaceInQuery: spaceInQuery(state),
    upKeyCount: upKeyCount(session),
    downKeyCount: downKeyCount(session),
    result: result(args[0]),
    numberOfResults: numberOfResults(state)
  });
};
export const searchedEvent = (props, state, session, journeyId) => {
  const searchResults = results(state);
  return createEvent('operational', 'searched', 'userPicker', {
    ...createDefaultPickerAttributes(props, session, journeyId),
    sessionDuration: sessionDuration(session),
    durationSinceInputChange: durationSinceInputChange(session),
    queryLength: queryLength(state),
    isLoading: isLoading(props, state),
    results: searchResults,
    numberOfResults: searchResults.length
  });
};
export const failedEvent = (props, _, session, journeyId) => createEvent('operational', 'failed', 'userPicker', {
  ...createDefaultPickerAttributes(props, session, journeyId)
});
export const userInfoEvent = (sources, accountId) => createEvent('ui', 'displayed', 'userInfo', {
  sources,
  // accountId can be PII if it is an email so check that it's an AAID first
  accountId: checkValidId(accountId) ? accountId : null
});
function queryLength(state) {
  return state.inputValue.length;
}
function selectEventType(session) {
  return session && session.lastKey === 13 ? 'pressed' : 'clicked';
}
function upKeyCount(session) {
  return session ? session.upCount : null;
}
function downKeyCount(session) {
  return session ? session.downCount : null;
}
function spaceInQuery(state) {
  return state.inputValue.indexOf(' ') !== -1;
}
function sessionDuration(session) {
  return session ? Date.now() - session.start : null;
}
function durationSinceInputChange(session) {
  return session ? Date.now() - session.inputChangeTime : null;
}
function sessionId(session) {
  return session && session.id;
}
function position(state, value) {
  return value ? state.options.findIndex(option => option === value.data) : -1;
}
function pickerType(props) {
  return props.isMulti ? 'multi' : 'single';
}
function result(option) {
  return option ? optionData2Analytics(option.data) : null;
}
function results(state) {
  return (state.options || []).map(optionData2Analytics);
}
function isLoading(props, state) {
  return state.count > 0 || props.isLoading;
}
function values(state) {
  return state.value ? Array.isArray(state.value) ? state.value.map(option => optionData2Analytics(option.data)) : [optionData2Analytics(state.value.data)] : [];
}
function numberOfResults(state) {
  return (state.options || []).length;
}