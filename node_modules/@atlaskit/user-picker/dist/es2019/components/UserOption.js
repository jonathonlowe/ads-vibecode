import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { B400, N800, N200 } from '@atlaskit/theme/colors';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import React from 'react';
import { AvatarItemOption, textWrapper } from './AvatarItemOption';
import { HighlightText } from './HighlightText';
import { SizeableAvatar } from './SizeableAvatar';
import { hasValue } from './utils';
import { fg } from '@atlaskit/platform-feature-flags';
export class UserOption extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "getPrimaryText", () => {
      const {
        user: {
          name,
          publicName,
          highlight
        }
      } = this.props;
      const result = [jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text, ${N800})`)
      }, jsx(HighlightText, {
        highlights: highlight && highlight.name
      }, name))];
      if (hasValue(publicName) && name.trim() !== publicName.trim()) {
        result.push(jsx(React.Fragment, {
          key: "publicName"
        }, ' ', jsx("span", {
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`)
        }, "(", jsx(HighlightText, {
          highlights: highlight && highlight.publicName
        }, publicName), ")")));
      }
      return result;
    });
    _defineProperty(this, "renderSecondaryText", () => this.props.user.byline ? jsx("span", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`)
    }, this.props.user.byline) : undefined);
    _defineProperty(this, "renderAvatar", () => {
      const {
        user: {
          avatarUrl
        },
        status
      } = this.props;
      return jsx(SizeableAvatar, {
        appearance:
        // eslint-disable-next-line @atlaskit/platform/no-preconditioning, @atlaskit/platform/ensure-feature-flag-prefix
        fg('platform-component-visual-refresh') && fg('visual-refresh-user-picker') ? 'medium' : 'big',
        src: avatarUrl,
        presence: status
      });
    });
    _defineProperty(this, "getLozengeProps", () => typeof this.props.user.lozenge === 'string' ? {
      text: this.props.user.lozenge
    } : this.props.user.lozenge);
  }
  render() {
    return jsx(AvatarItemOption, {
      avatar: this.renderAvatar(),
      lozenge: this.getLozengeProps(),
      isDisabled: this.props.user.isDisabled,
      primaryText: this.getPrimaryText(),
      secondaryText: this.renderSecondaryText()
    });
  }
}