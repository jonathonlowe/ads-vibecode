import memoizeOne from 'memoize-one';
import { EmailType } from '../types';
import { isValidEmail as defaultIsValidEmail } from './emailValidation';
import { isEmail } from './utils';
const validOption = ['VALID', 'POTENTIAL'];
const isValidNewOption = inputValue => inputValue && inputValue.length > 0;

// Generates suggested option data based on user input and validity of the input (if it is an email or not);
const getNewOptionData = (isValidEmail = defaultIsValidEmail, emailDomain) => inputValue => {
  if (!inputValue) {
    return null;
  }
  const isEmail = inputValue && validOption.includes(isValidEmail(inputValue));
  const value = isEmail ? inputValue : `${inputValue.replace(/\s+/g, '.').toLocaleLowerCase()}@${emailDomain}`;
  return {
    label: value,
    value: value,
    data: {
      id: value,
      name: value,
      type: EmailType,
      suggestion: true
    }
  };
};
const formatCreateLabel = inputText => {
  if (inputText) {
    return inputText.trim();
  }
  return '';
};

// Option will not be selectable until the email value is valid and can actually be invited
const isOptionDisabled = (isValidEmail = defaultIsValidEmail) => option => {
  if (isEmail(option.data)) {
    return isValidEmail(option.data.id) !== 'VALID';
  }
  return !!option.isDisabled;
};

// Generates user picker props to always create an email item visible
// to the user as a suggested option when they are typing in a value
export const getCreatableSuggestedEmailProps = memoizeOne((emailDomain, isValidEmail) => ({
  allowCreateWhileLoading: true,
  createOptionPosition: 'last',
  isValidNewOption,
  getNewOptionData: getNewOptionData(isValidEmail, emailDomain),
  formatCreateLabel,
  isOptionDisabled: isOptionDisabled(isValidEmail)
}));