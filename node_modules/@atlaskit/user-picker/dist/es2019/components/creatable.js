import memoizeOne from 'memoize-one';
import { EmailType } from '../types';
import { isValidEmail as defaultIsValidEmail } from './emailValidation';
import { isEmail } from './utils';
const validOption = ['VALID', 'POTENTIAL'];
const isValidNewOption = (isValidEmail = defaultIsValidEmail) => inputValue => inputValue && validOption.includes(isValidEmail(inputValue));
const getNewOptionData = inputValue => ({
  label: inputValue,
  value: inputValue,
  data: {
    id: inputValue,
    name: inputValue,
    type: EmailType
  }
});
const formatCreateLabel = inputText => {
  if (inputText) {
    return inputText.trim();
  }
  return '';
};
const isOptionDisabled = (isValidEmail = defaultIsValidEmail) => option => {
  if (isEmail(option.data)) {
    return isValidEmail(option.data.id) !== 'VALID';
  }
  return !!option.isDisabled;
};
function creatableProps(isValidEmail) {
  return {
    allowCreateWhileLoading: true,
    createOptionPosition: 'first',
    isValidNewOption: isValidNewOption(isValidEmail),
    getNewOptionData,
    formatCreateLabel,
    isOptionDisabled: isOptionDisabled(isValidEmail)
  };
}

// ignoring the 'clear' memoizeOne function object property
export const getCreatableProps = memoizeOne(creatableProps);