import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { B400, N200, N800 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel, userInfoEvent } from '../../analytics';
import { textWrapper } from '../AvatarItemOption';
import { SizeableAvatar } from '../SizeableAvatar';
import { ExternalUserSourcesContainer } from '../ExternalUserSourcesContainer';
import InfoIcon from './InfoIcon';
import { ExternalAvatarItemOption } from './ExternalAvatarItemOption';
import { SourcesTooltipContent } from './SourcesTooltipContent';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const imageContainer = css({
  height: '16px',
  width: '16px',
  paddingRight: "var(--ds-space-050, 4px)",
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const emailDomainWrapper = css({
  fontWeight: "var(--ds-font-weight-bold, 700)"
});
class ExternalUserOptionImpl extends React.PureComponent {
  constructor(..._args) {
    super(..._args);
    _defineProperty(this, "getPrimaryText", () => {
      const {
        user: {
          name
        }
      } = this.props;
      return jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text, ${N800})`)
      }, name);
    });
    _defineProperty(this, "renderSecondaryText", () => {
      const {
        byline,
        email
      } = this.props.user;
      if (!byline && !email) {
        return;
      }
      const textColor = this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`;

      // Render byline if present
      if (byline) {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        return jsx("span", {
          css: textWrapper(textColor)
        }, byline);
      }

      // Render email if byline isn't present
      if (email) {
        const [emailUser, emailDomain] = email.split('@');
        const emailDomainWithAt = `@${emailDomain}`;
        return (
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          jsx("span", {
            css: textWrapper(textColor)
          }, emailUser, jsx("span", {
            css: emailDomainWrapper
          }, emailDomainWithAt))
        );
      }
    });
    _defineProperty(this, "renderAvatar", () => {
      const {
        user: {
          avatarUrl
        },
        status
      } = this.props;
      return jsx(SizeableAvatar, {
        appearance: "big",
        src: avatarUrl,
        presence: status
      });
    });
    _defineProperty(this, "fireEvent", (eventCreator, ...args) => {
      const {
        createAnalyticsEvent
      } = this.props;
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel(eventCreator(...args))(createAnalyticsEvent);
      }
    });
    _defineProperty(this, "onShow", () => {
      const {
        user
      } = this.props;
      this.fireEvent(userInfoEvent, user.sources, user.id);
    });
    _defineProperty(this, "getSourcesInfoTooltip", () => this.props.user.isExternal ? jsx(Tooltip, {
      content: this.formattedTooltipContent(),
      position: 'right-start',
      onShow: this.onShow
    }, jsx(InfoIcon, null)) : undefined);
  }
  render() {
    return jsx(ExternalAvatarItemOption, {
      avatar: this.renderAvatar(),
      isDisabled: this.props.user.isDisabled,
      primaryText: this.getPrimaryText(),
      secondaryText: this.renderSecondaryText(),
      sourcesInfoTooltip: this.getSourcesInfoTooltip()
    });
  }
  formattedTooltipContent() {
    const {
      user: {
        id,
        requiresSourceHydration,
        sources
      }
    } = this.props;
    return jsx(ExternalUserSourcesContainer, {
      accountId: id,
      shouldFetchSources: Boolean(requiresSourceHydration),
      initialSources: sources
    }, sourceData => jsx(SourcesTooltipContent, sourceData));
  }
}
export const ExternalUserOption = withAnalyticsEvents()(ExternalUserOptionImpl);