import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { B400, N800, N200 } from '@atlaskit/theme/colors';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import React from 'react';
import { AvatarItemOption, textWrapper } from '../AvatarItemOption';
import { HighlightText } from '../HighlightText';
import { SizeableAvatar } from '../SizeableAvatar';
export class CustomOption extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "getPrimaryText", () => {
      const {
        data: {
          name,
          highlight
        }
      } = this.props;
      return [jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text, ${N800})`)
      }, jsx(HighlightText, {
        highlights: highlight && highlight.name
      }, name))];
    });
    _defineProperty(this, "getBylineComponent", (isSelected, message) => jsx("span", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css: textWrapper(isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`),
      "data-testid": "user-picker-custom-secondary-text"
    }, message));
    _defineProperty(this, "renderByline", () => {
      var _this$props$data;
      if (!((_this$props$data = this.props.data) !== null && _this$props$data !== void 0 && _this$props$data.byline)) {
        return undefined;
      }
      return this.getBylineComponent(this.props.isSelected, this.props.data.byline);
    });
    _defineProperty(this, "renderAvatar", () => {
      const {
        data: {
          avatarUrl
        }
      } = this.props;
      return jsx(SizeableAvatar, {
        appearance: "big",
        src: avatarUrl
      });
    });
    _defineProperty(this, "getLozengeProps", () => typeof this.props.data.lozenge === 'string' ? {
      text: this.props.data.lozenge
    } : this.props.data.lozenge);
  }
  render() {
    return jsx(AvatarItemOption, {
      avatar: this.renderAvatar(),
      isDisabled: this.props.data.isDisabled,
      lozenge: this.getLozengeProps(),
      primaryText: this.getPrimaryText(),
      secondaryText: this.renderByline()
    });
  }
}