import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { N20, B400, N800, N200 } from '@atlaskit/theme/colors';
import PeopleIcon from '@atlaskit/icon/core/migration/people-group--people';
import { AvatarItemOption, textWrapper } from '../AvatarItemOption';
import { messages } from '../i18n';
import { HighlightText } from '../HighlightText';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const groupOptionIconWrapper = css({
  padding: "var(--ds-space-025, 2px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '> span': {
    backgroundColor: `var(--ds-background-neutral, ${N20})`,
    borderRadius: '50%',
    padding: "var(--ds-space-050, 4px)"
  }
});
export class GroupOption extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "getPrimaryText", () => {
      const {
        isSelected,
        group: {
          name,
          highlight
        }
      } = this.props;
      return [jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text, ${N800})`)
      }, jsx(HighlightText, {
        highlights: highlight && highlight.name
      }, name))];
    });
    _defineProperty(this, "renderAvatar", () => jsx("span", {
      css: groupOptionIconWrapper
    }, jsx(PeopleIcon, {
      color: "currentColor",
      label: "group-icon",
      LEGACY_size: "medium",
      spacing: "spacious"
    })));
    _defineProperty(this, "renderByline", () => {
      const {
        isSelected,
        group
      } = this.props;
      return jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: textWrapper(isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`),
        "data-testid": "user-picker-group-secondary-text"
      }, group.byline ? group.byline : jsx(FormattedMessage, messages.groupByline));
    });
    _defineProperty(this, "getLozengeProps", () => typeof this.props.group.lozenge === 'string' ? {
      text: this.props.group.lozenge
    } : this.props.group.lozenge);
  }
  render() {
    return jsx(AvatarItemOption, {
      avatar: this.renderAvatar(),
      isDisabled: this.props.group.isDisabled,
      lozenge: this.getLozengeProps(),
      primaryText: this.getPrimaryText(),
      secondaryText: this.renderByline()
    });
  }
}