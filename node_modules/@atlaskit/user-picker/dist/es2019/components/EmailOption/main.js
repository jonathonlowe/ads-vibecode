import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import { B400, N200, N800 } from '@atlaskit/theme/colors';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { AddOptionAvatar } from '../AddOptionAvatar';
import { AvatarItemOption, textWrapper } from '../AvatarItemOption';
import { messages } from '../i18n';
const getAddEmailMessage = validity => validity === 'POTENTIAL' ? messages.continueToAddEmail : messages.selectToAddEmail;
export class EmailOption extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "getLozengeProps", () => typeof this.props.email.lozenge === 'string' ? {
      text: this.props.email.lozenge
    } : this.props.email.lozenge);
    _defineProperty(this, "renderPrimaryText", () => {
      const {
        email: {
          id
        }
      } = this.props;
      return jsx("span", {
        key: "name"
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text, ${N800})`)
      }, id);
    });
    _defineProperty(this, "renderSecondaryText", label => {
      return jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: textWrapper(this.props.isSelected ? `var(--ds-text-selected, ${B400})` : `var(--ds-text-subtlest, ${N200})`),
        "data-testid": "user-picker-email-secondary-text"
      }, label);
    });
    _defineProperty(this, "renderOption", label => jsx(AvatarItemOption, {
      avatar: jsx(AddOptionAvatar, {
        label: label
      }),
      lozenge: this.getLozengeProps(),
      isDisabled: this.props.email.isDisabled,
      primaryText: this.renderPrimaryText(),
      secondaryText: this.renderSecondaryText(label)
    }));
  }
  render() {
    const {
      label,
      emailValidity
    } = this.props;
    return label !== undefined ? this.renderOption(label) : jsx(FormattedMessage, getAddEmailMessage(emailValidity), label => this.renderOption(label));
  }
}