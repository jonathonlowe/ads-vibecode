/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Lozenge from '@atlaskit/lozenge';
import { isLozengeText } from './utils';
const AsyncTooltip = /*#__PURE__*/React.lazy(() => import( /* webpackChunkName: "@atlaskit-internal_@atlaskit/tooltip" */'@atlaskit/tooltip').then(module => {
  return {
    default: module.default
  };
}));
const wrapper = isDisabled => css({
  alignItems: 'center',
  boxSizing: 'border-box',
  display: 'flex',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: 1,
  outline: 'none',
  margin: 0,
  width: '100%',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  cursor: isDisabled ? 'not-allowed' : 'pointer',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  opacity: isDisabled ? "var(--ds-opacity-disabled, 0.4)" : undefined
});
const optionWrapper = css({
  maxWidth: '100%',
  minWidth: 0,
  flex: '1 1 100%',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '1.4',
  paddingLeft: "var(--ds-space-100, 8px)"
});
const getTextStyle = isSecondary => {
  const secondaryCssArgs = isSecondary ? {
    font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
  } : {};
  return css({
    margin: 0,
    overflowX: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    ...secondaryCssArgs
  });
};
const additionalInfo = css({
  float: 'right'
});
export const textWrapper = color => css({
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  display: 'inline',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  color
});
export const AvatarItemOption = ({
  avatar,
  isDisabled,
  lozenge,
  primaryText,
  secondaryText
}) => {
  const renderLozenge = () => {
    if (isLozengeText(lozenge)) {
      if (lozenge !== null && lozenge !== void 0 && lozenge.tooltip) {
        // Note that entire Lozenge must be wrapped in the Tooltip (rather than just the
        // Lozenge text) or tooltip won't work
        return jsx(React.Suspense, {
          fallback: jsx(Lozenge, lozenge, lozenge.text)
        }, jsx(AsyncTooltip, {
          content: lozenge.tooltip
        }, jsx(Lozenge, lozenge, lozenge.text)));
      }
      return jsx(Lozenge, lozenge, lozenge.text);
    }
    return lozenge;
  };
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("span", {
      css: wrapper(isDisabled)
    }, avatar, jsx("div", {
      css: optionWrapper
    }, jsx("div", null, jsx("div", {
      css: getTextStyle()
    }, primaryText), secondaryText && jsx("div", {
      css: getTextStyle(true)
    }, secondaryText))), lozenge && jsx("div", {
      css: additionalInfo
    }, renderLozenge()))
  );
};