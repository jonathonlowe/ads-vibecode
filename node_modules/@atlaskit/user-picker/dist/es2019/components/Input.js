/* Input.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./Input.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { components } from '@atlaskit/select';
const inputStyles = {
  root: "_5ce6131l _1ir3kb7n _h5gq131l"
};
export class Input extends React.Component {
  constructor(...args) {
    super(...args);
    // onKeyPress is used instead as
    // react-select is using onKeyDown for capturing keyboard input
    _defineProperty(this, "handleKeyPress", e => {
      var _this$props$selectPro;
      if (e.key === 'Enter') {
        e.preventDefault();
      }
      //@ts-ignore react-select unsupported props
      if ((_this$props$selectPro = this.props.selectProps) !== null && _this$props$selectPro !== void 0 && _this$props$selectPro.disableInput) {
        e.preventDefault();
      }
    });
  }
  /**
   * Overrides the default behaviour of react-select lib
   *
   * The getter is a workaround for original behaviour of the react-select lib.
   * Placeholder and Input are linked not via label, aria-label or aria-labeledby, but through aria-describedby.
   * Basically in the getter we reassign Placeholder ID from aria-describedby to aria-labelledby
   * {@link https://github.com/JedWatson/react-select/issues/5651#issue-1731353197 GitHub}
   */
  get ariaLabelledBy() {
    var _this$props$ariaLabe;
    return (_this$props$ariaLabe = this.props['aria-labelledby']) !== null && _this$props$ariaLabe !== void 0 ? _this$props$ariaLabe : this.props['aria-describedby'];
  }
  get ariaDescribedBy() {
    var _this$props$selectPro2, _this$props$selectPro3;
    return (_this$props$selectPro2 = (_this$props$selectPro3 = this.props.selectProps) === null || _this$props$selectPro3 === void 0 ? void 0 : _this$props$selectPro3['aria-describedby']) !== null && _this$props$selectPro2 !== void 0 ? _this$props$selectPro2 : this.props['aria-describedby'];
  }
  render() {
    return /*#__PURE__*/React.createElement(components.Input, _extends({}, this.props, {
      "aria-labelledby": this.ariaLabelledBy,
      "aria-describedby": this.ariaDescribedBy,
      innerRef: this.props.innerRef,
      onKeyPress: this.handleKeyPress,
      xcss: inputStyles.root
    }));
  }
}