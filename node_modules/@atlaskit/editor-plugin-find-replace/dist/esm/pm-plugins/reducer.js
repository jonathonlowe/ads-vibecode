import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { FindReplaceActionTypes } from './actions';
var reducer = function reducer(getInitialState) {
  return function (state, action) {
    switch (action.type) {
      case FindReplaceActionTypes.ACTIVATE:
      case FindReplaceActionTypes.FIND:
        return _objectSpread(_objectSpread({}, state), {}, {
          isActive: true,
          shouldFocus: action.type === FindReplaceActionTypes.ACTIVATE,
          findText: action.findText !== undefined ? action.findText : state.findText,
          matches: action.matches || state.matches,
          index: action.index !== undefined ? action.index : state.index
        });
      case FindReplaceActionTypes.UPDATE_DECORATIONS:
        return _objectSpread(_objectSpread({}, state), {}, {
          decorationSet: action.decorationSet
        });
      case FindReplaceActionTypes.FIND_NEXT:
        return _objectSpread(_objectSpread({}, state), {}, {
          index: action.index,
          decorationSet: action.decorationSet
        });
      case FindReplaceActionTypes.FIND_PREVIOUS:
        return _objectSpread(_objectSpread({}, state), {}, {
          index: action.index,
          decorationSet: action.decorationSet
        });
      case FindReplaceActionTypes.REPLACE:
      case FindReplaceActionTypes.REPLACE_ALL:
        return _objectSpread(_objectSpread({}, state), {}, {
          replaceText: action.replaceText,
          decorationSet: action.decorationSet,
          matches: action.matches,
          index: action.index
        });
      case FindReplaceActionTypes.CANCEL:
        return getInitialState();
      case FindReplaceActionTypes.BLUR:
        return _objectSpread(_objectSpread({}, state), {}, {
          shouldFocus: false
        });
      case FindReplaceActionTypes.TOGGLE_MATCH_CASE:
        return _objectSpread(_objectSpread({}, state), {}, {
          shouldMatchCase: !state.shouldMatchCase
        });
      default:
        return state;
    }
  };
};
export default reducer;