import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { IconButton } from '@atlaskit/button/new';
import { findKeymapByDescription, ToolTipContent } from '@atlaskit/editor-common/keymaps';
import Tooltip from '@atlaskit/tooltip';
// eslint-disable-next-line @repo/internal/react/no-class-components
export var FindReplaceTooltipButton = /*#__PURE__*/function (_React$PureComponent) {
  function FindReplaceTooltipButton() {
    var _this;
    _classCallCheck(this, FindReplaceTooltipButton);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, FindReplaceTooltipButton, [].concat(args));
    _defineProperty(_this, "buttonRef", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "handleClick", function () {
      _this.props.onClick(_this.buttonRef);
    });
    return _this;
  }
  _inherits(FindReplaceTooltipButton, _React$PureComponent);
  return _createClass(FindReplaceTooltipButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        title = _this$props.title,
        Icon = _this$props.icon,
        iconSize = _this$props.iconSize,
        keymapDescription = _this$props.keymapDescription,
        disabled = _this$props.disabled,
        isPressed = _this$props.isPressed,
        appearance = _this$props.appearance;
      var pressedProps = _objectSpread({}, typeof isPressed === 'boolean' && {
        'aria-pressed': isPressed
      });
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: /*#__PURE__*/React.createElement(ToolTipContent, {
          description: title,
          keymap: findKeymapByDescription(keymapDescription)
        }),
        hideTooltipOnClick: true,
        position: 'top'
      }, /*#__PURE__*/React.createElement(IconButton, _extends({
        id: "afterInputSection",
        label: title,
        appearance: appearance,
        testId: title,
        ref: this.buttonRef
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
        ,
        icon: function icon(iconProps) {
          return /*#__PURE__*/React.createElement(Icon, _extends({}, iconProps, {
            size: iconSize
          }));
        },
        isDisabled: disabled,
        onClick: this.handleClick,
        isSelected: isPressed
        // Ignored via go/ees005
        // eslint-disable-next-line react/jsx-props-no-spreading
      }, pressedProps)));
    }
  }]);
}(React.PureComponent);
_defineProperty(FindReplaceTooltipButton, "defaultProps", {
  keymapDescription: 'no-keymap',
  appearance: 'subtle'
});