import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/* eslint-disable @atlaskit/design-system/consistent-css-prop-usage */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import { ACTION, ACTION_SUBJECT, EVENT_TYPE, TRIGGER_METHOD } from '@atlaskit/editor-common/analytics';
import { findReplaceMessages as messages } from '@atlaskit/editor-common/messages';
import { Label, ValidMessage } from '@atlaskit/form';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down--hipchat-chevron-down';
import ChevronUpIcon from '@atlaskit/icon/utility/migration/chevron-up--hipchat-chevron-up';
import { Inline, xcss } from '@atlaskit/primitives';
import Textfield from '@atlaskit/textfield';
import { FindReplaceTooltipButton } from './FindReplaceTooltipButton';
import { nextPreviousItemStyles, orderOneStyles, orderZeroStyles, sectionWrapperJustified, sectionWrapperStyles, sectionWrapperStylesAlternate, textFieldWrapper } from './ui-styles';
// eslint-disable-next-line @repo/internal/react/no-class-components
var Replace = /*#__PURE__*/function (_React$PureComponent) {
  function Replace(props) {
    var _this;
    _classCallCheck(this, Replace);
    _this = _callSuper(this, Replace, [props]);
    _defineProperty(_this, "replaceTextfieldRef", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "successReplacementMessageRef", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "isComposing", false);
    _defineProperty(_this, "skipWhileComposing", function (fn) {
      if (_this.state.isComposing) {
        return;
      }
      fn();
    });
    _defineProperty(_this, "handleReplaceClick", function () {
      return _this.skipWhileComposing(function () {
        _this.props.onReplace({
          triggerMethod: TRIGGER_METHOD.BUTTON,
          replaceText: _this.state.replaceText
        });
        // for replace button replaceCount always 1;
        var replaceCount = 1;
        _this.triggerSuccessReplacementMessageUpdate(replaceCount);
        _this.setState({
          isHelperMessageVisible: true,
          replaceCount: replaceCount
        });
        _this.props.setFindTyped(false);
      });
    });
    _defineProperty(_this, "handleReplaceChange", function (event) {
      return _this.skipWhileComposing(function () {
        _this.updateReplaceValue(event.target.value);
      });
    });
    _defineProperty(_this, "updateReplaceValue", function (replaceText) {
      var dispatchAnalyticsEvent = _this.props.dispatchAnalyticsEvent;
      if (dispatchAnalyticsEvent) {
        dispatchAnalyticsEvent({
          eventType: EVENT_TYPE.TRACK,
          action: ACTION.CHANGED_REPLACEMENT_TEXT,
          actionSubject: ACTION_SUBJECT.FIND_REPLACE_DIALOG
        });
      }
      _this.setState({
        replaceText: replaceText
      });
    });
    _defineProperty(_this, "handleReplaceKeyDown", function (event) {
      return _this.skipWhileComposing(function () {
        if (event.key === 'Enter') {
          _this.props.onReplace({
            triggerMethod: TRIGGER_METHOD.KEYBOARD,
            replaceText: _this.state.replaceText
          });
        } else if (event.key === 'ArrowUp') {
          // we want to move focus between find & replace texfields when user hits up/down arrows
          _this.props.onArrowUp();
        }
      });
    });
    _defineProperty(_this, "handleReplaceAllClick", function () {
      return _this.skipWhileComposing(function () {
        _this.props.onReplaceAll({
          replaceText: _this.state.replaceText
        });
        _this.setState({
          isHelperMessageVisible: true
        });
        _this.triggerSuccessReplacementMessageUpdate(_this.props.count.total);
        _this.setState({
          replaceCount: _this.props.count.total
        });
        _this.props.setFindTyped(false);
      });
    });
    _defineProperty(_this, "handleCompositionStart", function () {
      _this.setState({
        isComposing: true
      });
    });
    _defineProperty(_this, "handleCompositionEnd", function (event) {
      _this.setState({
        isComposing: false
      });
      // type for React.CompositionEvent doesn't set type for target correctly
      _this.updateReplaceValue(event.target.value);
    });
    _defineProperty(_this, "clearSearch", function () {
      _this.props.onCancel({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
      _this.props.focusToolbarButton && _this.props.focusToolbarButton();
    });
    _defineProperty(_this, "handleFindNextClick", function () {
      if (_this.isComposing) {
        return;
      }
      _this.props.onFindNext({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
    });
    _defineProperty(_this, "handleFindPrevClick", function () {
      if (_this.isComposing) {
        return;
      }
      _this.props.onFindPrev({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
    });
    var _replaceText = props.replaceText,
      formatMessage = props.intl.formatMessage;
    _this.state = {
      replaceText: _replaceText || '',
      isComposing: false,
      isHelperMessageVisible: false,
      fakeSuccessReplacementMessageUpdate: false,
      replaceCount: 0
    };
    _this.replace = formatMessage(messages.replace);
    _this.replaceWith = formatMessage(messages.replaceWith);
    _this.replaceAll = formatMessage(messages.replaceAll);
    _this.findNext = formatMessage(messages.findNext);
    _this.findPrevious = formatMessage(messages.findPrevious);
    _this.closeFindReplaceDialog = formatMessage(messages.closeFindReplaceDialog);
    return _this;
  }
  _inherits(Replace, _React$PureComponent);
  return _createClass(Replace, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onReplaceTextfieldRefSet(this.replaceTextfieldRef);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var prevReplaceText = _ref.replaceText;
      var replaceText = this.props.replaceText;
      if (replaceText && replaceText !== prevReplaceText) {
        this.setState({
          replaceText: replaceText,
          isComposing: false
        });
      }
      var findTextField = document.getElementById('find-text-field');
      var replaceButton = document.getElementById('replace-button');
      var replaceAllButton = document.getElementById('replaceAll-button');
      if (((replaceButton === null || replaceButton === void 0 ? void 0 : replaceButton.tabIndex) === -1 || (replaceAllButton === null || replaceAllButton === void 0 ? void 0 : replaceAllButton.tabIndex) === -1) && findTextField) {
        findTextField.focus();
      }
    }
  }, {
    key: "triggerSuccessReplacementMessageUpdate",
    value: function triggerSuccessReplacementMessageUpdate(currentReplaceCount) {
      var _this$state;
      if (((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.replaceCount) === currentReplaceCount) {
        this.setState({
          fakeSuccessReplacementMessageUpdate: !this.state.fakeSuccessReplacementMessageUpdate
        });
      }
      if (this.successReplacementMessageRef && this.successReplacementMessageRef.current) {
        var ariaLiveRegion = this.successReplacementMessageRef.current.querySelector('[aria-live="polite"]');
        ariaLiveRegion === null || ariaLiveRegion === void 0 || ariaLiveRegion.removeAttribute('aria-live');
        ariaLiveRegion === null || ariaLiveRegion === void 0 || ariaLiveRegion.setAttribute('aria-live', 'polite');
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
        replaceText = _this$state2.replaceText,
        isHelperMessageVisible = _this$state2.isHelperMessageVisible,
        replaceCount = _this$state2.replaceCount;
      var _this$props = this.props,
        canReplace = _this$props.canReplace,
        count = _this$props.count,
        formatMessage = _this$props.intl.formatMessage;
      var resultsReplace = formatMessage(messages.replaceSuccess, {
        numberOfMatches: replaceCount
      });
      return jsx(Fragment, null, jsx("div", {
        css: [sectionWrapperStyles, sectionWrapperStylesAlternate]
      }, jsx("div", {
        css: textFieldWrapper
      }, jsx(Label, {
        htmlFor: "replace-text-field"
      }, this.replaceWith), jsx(Textfield, {
        name: "replace",
        id: "replace-text-field",
        testId: "replace-field",
        appearance: "standard",
        defaultValue: replaceText,
        ref: this.replaceTextfieldRef,
        autoComplete: "off",
        onChange: this.handleReplaceChange,
        onKeyDown: this.handleReplaceKeyDown,
        onCompositionStart: this.handleCompositionStart,
        onCompositionEnd: this.handleCompositionEnd
      }), isHelperMessageVisible && this.props.findTyped === false && jsx("div", {
        ref: this.successReplacementMessageRef
      }, jsx(ValidMessage, {
        testId: "message-success-replacement"
      },
      /*
      Replacement needed to trigger the SR announcement if message hasn't changed. e.g Replace button clicked twice.
      '\u00a0' is value for &nbsp
      */
      this.state.fakeSuccessReplacementMessageUpdate ?
      // Ignored via go/ees005
      // eslint-disable-next-line require-unicode-regexp
      resultsReplace.replace(/ /, "\xA0") : resultsReplace)))), jsx("div", {
        css: [sectionWrapperStyles, sectionWrapperStylesAlternate, sectionWrapperJustified]
      }, jsx("div", {
        css: orderOneStyles
      }, jsx("div", {
        css: nextPreviousItemStyles
      }, jsx(FindReplaceTooltipButton, {
        title: this.findNext,
        icon: ChevronDownIcon,
        iconLabel: this.findNext,
        keymapDescription: 'Enter',
        onClick: this.handleFindNextClick,
        disabled: count.total <= 1
      })), jsx("div", {
        css: nextPreviousItemStyles
      }, jsx(FindReplaceTooltipButton, {
        title: this.findPrevious,
        icon: ChevronUpIcon,
        iconLabel: this.findPrevious,
        keymapDescription: 'Shift Enter',
        onClick: this.handleFindPrevClick,
        disabled: count.total <= 1
      })), jsx(Inline, {
        space: "space.075"
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        ,
        xcss: xcss({
          // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
          paddingInlineStart: 'space.050',
          // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
          paddingInlineEnd: 'space.025'
        })
      }, jsx(Button, {
        testId: this.replace,
        id: "replace-button",
        onClick: this.handleReplaceClick,
        isDisabled: !canReplace
      }, this.replace), jsx(Button, {
        appearance: "primary",
        testId: this.replaceAll,
        id: "replaceAll-button",
        onClick: this.handleReplaceAllClick,
        isDisabled: !canReplace
      }, this.replaceAll))), jsx("div", {
        css: orderZeroStyles
      }, jsx(Button, {
        appearance: "subtle",
        testId: this.closeFindReplaceDialog,
        onClick: this.clearSearch
      }, this.closeFindReplaceDialog))));
    }
  }]);
}(React.PureComponent);
export default injectIntl(Replace);