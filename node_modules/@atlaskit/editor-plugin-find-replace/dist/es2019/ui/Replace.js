import _defineProperty from "@babel/runtime/helpers/defineProperty";
/* eslint-disable @atlaskit/design-system/consistent-css-prop-usage */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import { ACTION, ACTION_SUBJECT, EVENT_TYPE, TRIGGER_METHOD } from '@atlaskit/editor-common/analytics';
import { findReplaceMessages as messages } from '@atlaskit/editor-common/messages';
import { Label, ValidMessage } from '@atlaskit/form';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down--hipchat-chevron-down';
import ChevronUpIcon from '@atlaskit/icon/utility/migration/chevron-up--hipchat-chevron-up';
import { Inline, xcss } from '@atlaskit/primitives';
import Textfield from '@atlaskit/textfield';
import { FindReplaceTooltipButton } from './FindReplaceTooltipButton';
import { nextPreviousItemStyles, orderOneStyles, orderZeroStyles, sectionWrapperJustified, sectionWrapperStyles, sectionWrapperStylesAlternate, textFieldWrapper } from './ui-styles';
// eslint-disable-next-line @repo/internal/react/no-class-components
class Replace extends React.PureComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "replaceTextfieldRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "successReplacementMessageRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "isComposing", false);
    _defineProperty(this, "skipWhileComposing", fn => {
      if (this.state.isComposing) {
        return;
      }
      fn();
    });
    _defineProperty(this, "handleReplaceClick", () => this.skipWhileComposing(() => {
      this.props.onReplace({
        triggerMethod: TRIGGER_METHOD.BUTTON,
        replaceText: this.state.replaceText
      });
      // for replace button replaceCount always 1;
      const replaceCount = 1;
      this.triggerSuccessReplacementMessageUpdate(replaceCount);
      this.setState({
        isHelperMessageVisible: true,
        replaceCount
      });
      this.props.setFindTyped(false);
    }));
    _defineProperty(this, "handleReplaceChange", event => this.skipWhileComposing(() => {
      this.updateReplaceValue(event.target.value);
    }));
    _defineProperty(this, "updateReplaceValue", replaceText => {
      const {
        dispatchAnalyticsEvent
      } = this.props;
      if (dispatchAnalyticsEvent) {
        dispatchAnalyticsEvent({
          eventType: EVENT_TYPE.TRACK,
          action: ACTION.CHANGED_REPLACEMENT_TEXT,
          actionSubject: ACTION_SUBJECT.FIND_REPLACE_DIALOG
        });
      }
      this.setState({
        replaceText
      });
    });
    _defineProperty(this, "handleReplaceKeyDown", event => this.skipWhileComposing(() => {
      if (event.key === 'Enter') {
        this.props.onReplace({
          triggerMethod: TRIGGER_METHOD.KEYBOARD,
          replaceText: this.state.replaceText
        });
      } else if (event.key === 'ArrowUp') {
        // we want to move focus between find & replace texfields when user hits up/down arrows
        this.props.onArrowUp();
      }
    }));
    _defineProperty(this, "handleReplaceAllClick", () => this.skipWhileComposing(() => {
      this.props.onReplaceAll({
        replaceText: this.state.replaceText
      });
      this.setState({
        isHelperMessageVisible: true
      });
      this.triggerSuccessReplacementMessageUpdate(this.props.count.total);
      this.setState({
        replaceCount: this.props.count.total
      });
      this.props.setFindTyped(false);
    }));
    _defineProperty(this, "handleCompositionStart", () => {
      this.setState({
        isComposing: true
      });
    });
    _defineProperty(this, "handleCompositionEnd", event => {
      this.setState({
        isComposing: false
      });
      // type for React.CompositionEvent doesn't set type for target correctly
      this.updateReplaceValue(event.target.value);
    });
    _defineProperty(this, "clearSearch", () => {
      this.props.onCancel({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
      this.props.focusToolbarButton && this.props.focusToolbarButton();
    });
    _defineProperty(this, "handleFindNextClick", () => {
      if (this.isComposing) {
        return;
      }
      this.props.onFindNext({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
    });
    _defineProperty(this, "handleFindPrevClick", () => {
      if (this.isComposing) {
        return;
      }
      this.props.onFindPrev({
        triggerMethod: TRIGGER_METHOD.BUTTON
      });
    });
    const {
      replaceText: _replaceText,
      intl: {
        formatMessage
      }
    } = props;
    this.state = {
      replaceText: _replaceText || '',
      isComposing: false,
      isHelperMessageVisible: false,
      fakeSuccessReplacementMessageUpdate: false,
      replaceCount: 0
    };
    this.replace = formatMessage(messages.replace);
    this.replaceWith = formatMessage(messages.replaceWith);
    this.replaceAll = formatMessage(messages.replaceAll);
    this.findNext = formatMessage(messages.findNext);
    this.findPrevious = formatMessage(messages.findPrevious);
    this.closeFindReplaceDialog = formatMessage(messages.closeFindReplaceDialog);
  }
  componentDidMount() {
    this.props.onReplaceTextfieldRefSet(this.replaceTextfieldRef);
  }
  componentDidUpdate({
    replaceText: prevReplaceText
  }) {
    const {
      replaceText
    } = this.props;
    if (replaceText && replaceText !== prevReplaceText) {
      this.setState({
        replaceText,
        isComposing: false
      });
    }
    const findTextField = document.getElementById('find-text-field');
    const replaceButton = document.getElementById('replace-button');
    const replaceAllButton = document.getElementById('replaceAll-button');
    if (((replaceButton === null || replaceButton === void 0 ? void 0 : replaceButton.tabIndex) === -1 || (replaceAllButton === null || replaceAllButton === void 0 ? void 0 : replaceAllButton.tabIndex) === -1) && findTextField) {
      findTextField.focus();
    }
  }
  triggerSuccessReplacementMessageUpdate(currentReplaceCount) {
    var _this$state;
    if (((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.replaceCount) === currentReplaceCount) {
      this.setState({
        fakeSuccessReplacementMessageUpdate: !this.state.fakeSuccessReplacementMessageUpdate
      });
    }
    if (this.successReplacementMessageRef && this.successReplacementMessageRef.current) {
      const ariaLiveRegion = this.successReplacementMessageRef.current.querySelector('[aria-live="polite"]');
      ariaLiveRegion === null || ariaLiveRegion === void 0 ? void 0 : ariaLiveRegion.removeAttribute('aria-live');
      ariaLiveRegion === null || ariaLiveRegion === void 0 ? void 0 : ariaLiveRegion.setAttribute('aria-live', 'polite');
    }
  }
  render() {
    const {
      replaceText,
      isHelperMessageVisible,
      replaceCount
    } = this.state;
    const {
      canReplace,
      count,
      intl: {
        formatMessage
      }
    } = this.props;
    const resultsReplace = formatMessage(messages.replaceSuccess, {
      numberOfMatches: replaceCount
    });
    return jsx(Fragment, null, jsx("div", {
      css: [sectionWrapperStyles, sectionWrapperStylesAlternate]
    }, jsx("div", {
      css: textFieldWrapper
    }, jsx(Label, {
      htmlFor: "replace-text-field"
    }, this.replaceWith), jsx(Textfield, {
      name: "replace",
      id: "replace-text-field",
      testId: "replace-field",
      appearance: "standard",
      defaultValue: replaceText,
      ref: this.replaceTextfieldRef,
      autoComplete: "off",
      onChange: this.handleReplaceChange,
      onKeyDown: this.handleReplaceKeyDown,
      onCompositionStart: this.handleCompositionStart,
      onCompositionEnd: this.handleCompositionEnd
    }), isHelperMessageVisible && this.props.findTyped === false && jsx("div", {
      ref: this.successReplacementMessageRef
    }, jsx(ValidMessage, {
      testId: "message-success-replacement"
    },
    /*
    Replacement needed to trigger the SR announcement if message hasn't changed. e.g Replace button clicked twice.
    '\u00a0' is value for &nbsp
    */
    this.state.fakeSuccessReplacementMessageUpdate ?
    // Ignored via go/ees005
    // eslint-disable-next-line require-unicode-regexp
    resultsReplace.replace(/ /, '\u00a0') : resultsReplace)))), jsx("div", {
      css: [sectionWrapperStyles, sectionWrapperStylesAlternate, sectionWrapperJustified]
    }, jsx("div", {
      css: orderOneStyles
    }, jsx("div", {
      css: nextPreviousItemStyles
    }, jsx(FindReplaceTooltipButton, {
      title: this.findNext,
      icon: ChevronDownIcon,
      iconLabel: this.findNext,
      keymapDescription: 'Enter',
      onClick: this.handleFindNextClick,
      disabled: count.total <= 1
    })), jsx("div", {
      css: nextPreviousItemStyles
    }, jsx(FindReplaceTooltipButton, {
      title: this.findPrevious,
      icon: ChevronUpIcon,
      iconLabel: this.findPrevious,
      keymapDescription: 'Shift Enter',
      onClick: this.handleFindPrevClick,
      disabled: count.total <= 1
    })), jsx(Inline, {
      space: "space.075"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      xcss: xcss({
        // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
        paddingInlineStart: 'space.050',
        // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
        paddingInlineEnd: 'space.025'
      })
    }, jsx(Button, {
      testId: this.replace,
      id: "replace-button",
      onClick: this.handleReplaceClick,
      isDisabled: !canReplace
    }, this.replace), jsx(Button, {
      appearance: "primary",
      testId: this.replaceAll,
      id: "replaceAll-button",
      onClick: this.handleReplaceAllClick,
      isDisabled: !canReplace
    }, this.replaceAll))), jsx("div", {
      css: orderZeroStyles
    }, jsx(Button, {
      appearance: "subtle",
      testId: this.closeFindReplaceDialog,
      onClick: this.clearSearch
    }, this.closeFindReplaceDialog))));
  }
}
export default injectIntl(Replace);