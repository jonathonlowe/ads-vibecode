import _defineProperty from "@babel/runtime/helpers/defineProperty";
/* eslint-disable @atlaskit/design-system/consistent-css-prop-usage */
/* eslint-disable @atlaskit/design-system/prefer-primitives */
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
import Find from './Find';
import Replace from './Replace';
import ReplaceNext from './ReplaceNext';
import { ruleStyles, wrapperPaddingStyles, wrapperStyles } from './ui-styles';
// eslint-disable-next-line @repo/internal/react/no-class-components
class FindReplace extends React.PureComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "findTextfield", null);
    _defineProperty(this, "replaceTextfield", null);
    /**
     * Delete this function on cleanup of
     * editor_a11y_refactor_find_replace_style
     */
    _defineProperty(this, "handleTabNavigation", event => {
      if (fg('editor_a11y_refactor_find_replace_style')) {
        return;
      }
      if (event.key === 'Tab') {
        event.preventDefault();
        const modalFindReplace = this.modalRef.current;
        if (!modalFindReplace || !modalFindReplace.contains(document.activeElement)) {
          return;
        }
        const focusableElements = Array.from(modalFindReplace.querySelectorAll('[tabindex]:not([tabindex="-1"]), input, button')).filter(el => el.getAttribute('tabindex') !== '-1');
        const currentIndex = focusableElements.findIndex(el => el === document.activeElement);
        const isShiftPressed = event.shiftKey;
        if (isShiftPressed) {
          const prevIndex = (currentIndex - 1 + focusableElements.length) % focusableElements.length;
          focusableElements[prevIndex].focus();
        } else {
          const nextIndex = (currentIndex + 1) % focusableElements.length;
          focusableElements[nextIndex].focus();
        }
      }
    });
    _defineProperty(this, "state", {
      findTyped: false
    });
    _defineProperty(this, "setFindTyped", value => {
      this.setState({
        findTyped: value
      });
    });
    _defineProperty(this, "setFindTextfieldRef", findTextfieldRef => {
      this.findTextfield = findTextfieldRef.current;
    });
    _defineProperty(this, "setReplaceTextfieldRef", replaceTextfieldRef => {
      this.replaceTextfield = replaceTextfieldRef.current;
    });
    _defineProperty(this, "setFocusToFind", () => {
      if (this.findTextfield) {
        this.findTextfield.focus();
      }
    });
    _defineProperty(this, "setFocusToReplace", () => {
      if (this.replaceTextfield) {
        this.replaceTextfield.focus();
      }
    });
    this.modalRef = /*#__PURE__*/React.createRef();
  }
  componentDidMount() {
    // eslint-disable-next-line
    window.addEventListener('keydown', this.handleTabNavigation);
  }
  componentWillUnmount() {
    // eslint-disable-next-line
    window.removeEventListener('keydown', this.handleTabNavigation);
  }
  render() {
    const {
      findText,
      count,
      shouldFocus,
      onFind,
      onFindBlur,
      onFindNext,
      onFindPrev,
      onCancel,
      replaceText,
      onReplace,
      onReplaceAll,
      dispatchAnalyticsEvent,
      allowMatchCase,
      shouldMatchCase,
      onToggleMatchCase
    } = this.props;
    const focusToolbarButton = this.props.focusToolbarButton || (() => {});
    return (
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      jsx("div", {
        ref: this.modalRef,
        css: [wrapperStyles, wrapperPaddingStyles]
      }, jsx(Find, {
        allowMatchCase: allowMatchCase,
        shouldMatchCase: shouldMatchCase,
        onToggleMatchCase: onToggleMatchCase,
        findText: findText,
        count: count,
        shouldFocus: shouldFocus,
        onFind: onFind,
        onFindBlur: onFindBlur,
        onFindPrev: onFindPrev,
        onFindNext: onFindNext,
        onFindTextfieldRefSet: this.setFindTextfieldRef,
        onCancel: onCancel,
        onArrowDown: this.setFocusToReplace,
        findTyped: this.state.findTyped,
        setFindTyped: this.setFindTyped
      }), jsx("hr", {
        role: "presentation",
        css: ruleStyles,
        id: "replace-hr-element"
      }), fg('editor_a11y_refactor_find_replace_style') ? jsx(ReplaceNext, {
        canReplace: count.total > 0,
        replaceText: replaceText,
        onReplace: onReplace,
        onReplaceAll: onReplaceAll,
        onReplaceTextfieldRefSet: this.setReplaceTextfieldRef,
        onArrowUp: this.setFocusToFind,
        onCancel: onCancel,
        count: count,
        onFindPrev: onFindPrev,
        onFindNext: onFindNext,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        findTyped: this.state.findTyped,
        setFindTyped: this.setFindTyped,
        focusToolbarButton: focusToolbarButton
      }) : jsx(Replace, {
        canReplace: count.total > 0,
        replaceText: replaceText,
        onReplace: onReplace,
        onReplaceAll: onReplaceAll,
        onReplaceTextfieldRefSet: this.setReplaceTextfieldRef,
        onArrowUp: this.setFocusToFind,
        onCancel: onCancel,
        count: count,
        onFindPrev: onFindPrev,
        onFindNext: onFindNext,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        findTyped: this.state.findTyped,
        setFindTyped: this.setFindTyped,
        focusToolbarButton: focusToolbarButton
      }))
    );
  }
}
export default FindReplace;