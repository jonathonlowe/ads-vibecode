import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import { TRIGGER_METHOD } from '@atlaskit/editor-common/analytics';
export type ReplaceProps = {
    canReplace: boolean;
    replaceText?: string;
    onReplace: ({ triggerMethod, replaceText, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
        replaceText: string;
    }) => void;
    onReplaceAll: ({ replaceText }: {
        replaceText: string;
    }) => void;
    onReplaceTextfieldRefSet: (ref: React.RefObject<HTMLInputElement>) => void;
    onArrowUp: () => void;
    onCancel: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.TOOLBAR | TRIGGER_METHOD.BUTTON;
    }) => void;
    count: {
        index: number;
        total: number;
    };
    onFindNext: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
    }) => void;
    onFindPrev: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
    }) => void;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
    setFindTyped: (value: boolean) => void;
    findTyped: boolean;
    focusToolbarButton: () => void;
};
declare const _default: React.FC<import("react-intl-next").WithIntlProps<ReplaceProps & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<ReplaceProps & WrappedComponentProps>;
};
export default _default;
