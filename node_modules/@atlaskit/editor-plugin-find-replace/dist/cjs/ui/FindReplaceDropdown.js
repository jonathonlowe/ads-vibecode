"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _primitives = require("@atlaskit/primitives");
var _FindReplace = _interopRequireDefault(require("./FindReplace"));
var findReplaceWrapperStyles = (0, _primitives.xcss)({
  display: 'flex',
  flexDirection: 'column'
});

// Magic number taken from ../FindReplaceToolbarButton.tsx
var dropdownWidthNewDesign = 382;
var FindReplaceDropdown = function FindReplaceDropdown(props) {
  var findText = props.findText,
    replaceText = props.replaceText,
    isActive = props.isActive,
    index = props.index,
    numMatches = props.numMatches,
    popupsMountPoint = props.popupsMountPoint,
    onCancel = props.onCancel;
  if (!popupsMountPoint) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_uiMenu.Dropdown, {
    target: popupsMountPoint,
    mountTo: popupsMountPoint,
    forcePlacement: true,
    alignX: 'right',
    alignY: 'start',
    offset: [4, 0],
    isOpen: isActive,
    handleEscapeKeydown: function handleEscapeKeydown() {
      if (isActive) {
        onCancel({
          triggerMethod: _analytics.TRIGGER_METHOD.KEYBOARD
        });
      }
    },
    fitWidth: dropdownWidthNewDesign,
    zIndex: _editorSharedStyles.akEditorFloatingPanelZIndex,
    arrowKeyNavigationProviderOptions: {
      type: _uiMenu.ArrowKeyNavigationType.MENU,
      disableArrowKeyNavigation: true
    }
  }, /*#__PURE__*/_react.default.createElement(_primitives.Box, {
    xcss: findReplaceWrapperStyles
  }, /*#__PURE__*/_react.default.createElement(_FindReplace.default, (0, _extends2.default)({
    findText: findText,
    replaceText: replaceText,
    count: {
      index: index,
      total: numMatches
    }
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, props))));
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(FindReplaceDropdown);