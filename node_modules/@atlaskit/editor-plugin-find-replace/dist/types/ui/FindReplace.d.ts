/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { jsx } from '@emotion/react';
import type { DispatchAnalyticsEvent, TRIGGER_METHOD } from '@atlaskit/editor-common/analytics';
import type { MatchCaseProps } from '../types';
export type FindReplaceProps = {
    findText?: string;
    replaceText?: string;
    count: {
        index: number;
        total: number;
    };
    shouldFocus: boolean;
    onFindBlur: () => void;
    onFind: (findText?: string) => void;
    onFindNext: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
    }) => void;
    onFindPrev: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
    }) => void;
    onReplace: ({ triggerMethod, replaceText, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.BUTTON;
        replaceText: string;
    }) => void;
    onReplaceAll: ({ replaceText }: {
        replaceText: string;
    }) => void;
    onCancel: ({ triggerMethod, }: {
        triggerMethod: TRIGGER_METHOD.KEYBOARD | TRIGGER_METHOD.TOOLBAR | TRIGGER_METHOD.BUTTON;
    }) => void;
    dispatchAnalyticsEvent?: DispatchAnalyticsEvent;
    focusToolbarButton?: () => void;
} & MatchCaseProps;
declare class FindReplace extends React.PureComponent<FindReplaceProps> {
    private findTextfield;
    private replaceTextfield?;
    private modalRef;
    constructor(props: FindReplaceProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    /**
     * Delete this function on cleanup of
     * editor_a11y_refactor_find_replace_style
     */
    handleTabNavigation: (event: KeyboardEvent) => void;
    state: {
        findTyped: boolean;
    };
    setFindTyped: (value: boolean) => void;
    setFindTextfieldRef: (findTextfieldRef: React.RefObject<HTMLInputElement>) => void;
    setReplaceTextfieldRef: (replaceTextfieldRef: React.RefObject<HTMLInputElement>) => void;
    setFocusToFind: () => void;
    setFocusToReplace: () => void;
    render(): jsx.JSX.Element;
}
export default FindReplace;
