"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromCommonMediaClientError = exports.CommonMediaClientError = exports.BaseMediaClientError = void 0;
Object.defineProperty(exports, "getMediaClientErrorReason", {
  enumerable: true,
  get: function get() {
    return _helpers.getMediaClientErrorReason;
  }
});
exports.isCommonMediaClientError = isCommonMediaClientError;
Object.defineProperty(exports, "isMediaClientError", {
  enumerable: true,
  get: function get() {
    return _helpers.isMediaClientError;
  }
});
exports.toCommonMediaClientError = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _helpers = require("./helpers");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Base class for media errors
 */
var BaseMediaClientError = exports.BaseMediaClientError = /*#__PURE__*/function (_Error) {
  function BaseMediaClientError(reason, metadata, innerError) {
    var _this;
    (0, _classCallCheck2.default)(this, BaseMediaClientError);
    _this = _callSuper(this, BaseMediaClientError, [reason]);

    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    _this.reason = reason;
    _this.metadata = metadata;
    _this.innerError = innerError;
    Object.setPrototypeOf(_this, (this instanceof BaseMediaClientError ? this.constructor : void 0).prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(_this, this instanceof BaseMediaClientError ? this.constructor : void 0);
    }
    return _this;
  }

  // TODO: Deprecate attributes getter https://product-fabric.atlassian.net/browse/CXP-4665
  (0, _inherits2.default)(BaseMediaClientError, _Error);
  return (0, _createClass2.default)(BaseMediaClientError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error
// TODO: Deprecate attributes getter https://product-fabric.atlassian.net/browse/CXP-4665
)); // The only reason why this class exists is because BaseMediaClientError is abstract class, so it can't be used to deserialize ErrorFileState. We can refactor and simplify this later.
/** Generic Media Client Erorr. All errors extending BaseMediaClientError match CommonMediaClientError attributes. Used to deserialize ErrorFileState */
var CommonMediaClientError = exports.CommonMediaClientError = /*#__PURE__*/function (_BaseMediaClientError) {
  function CommonMediaClientError(reason, metadata, innerError) {
    (0, _classCallCheck2.default)(this, CommonMediaClientError);
    return _callSuper(this, CommonMediaClientError, [reason, metadata, innerError]);
  }
  (0, _inherits2.default)(CommonMediaClientError, _BaseMediaClientError);
  return (0, _createClass2.default)(CommonMediaClientError, [{
    key: "attributes",
    get: function get() {
      return {
        reason: this.reason
      };
    }
  }]);
}(BaseMediaClientError);
function isCommonMediaClientError(error) {
  if (!error) {
    return false;
  }
  // Check if the error is an instance of Error
  if (error instanceof CommonMediaClientError) {
    return true;
  }
  return typeof error.reason === 'string' && ('metadata' in error || error.metadata === undefined) && ('innerError' in error || error.innerError === undefined);
}

/** Deserializer ErrorFileState -> CommonMediaClientError */
var toCommonMediaClientError = exports.toCommonMediaClientError = function toCommonMediaClientError(errorFileState) {
  var _errorFileState$detai;
  var error = (_errorFileState$detai = errorFileState.details) === null || _errorFileState$detai === void 0 ? void 0 : _errorFileState$detai.error;
  return new CommonMediaClientError((error === null || error === void 0 ? void 0 : error.reason) || 'unknown-reason', error.metadata, error.innerError);
};

/** Serializer CommonMediaClientError -> ErrorFileState */
var fromCommonMediaClientError = exports.fromCommonMediaClientError = function fromCommonMediaClientError(id, occurrenceKey, error) {
  return {
    status: 'error',
    id: id,
    occurrenceKey: occurrenceKey,
    reason: error.reason,
    details: _objectSpread({
      /** Use this attr to translate back into CommonMediaClientError (toCommonMediaClientError) */
      error: {
        reason: error === null || error === void 0 ? void 0 : error.reason,
        metadata: error === null || error === void 0 ? void 0 : error.metadata,
        innerError: error === null || error === void 0 ? void 0 : error.innerError
      }
    }, error === null || error === void 0 ? void 0 : error.attributes),
    message: error === null || error === void 0 ? void 0 : error.message
  };
};