"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVideoDimensionsFromBlob = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var getVideoDimensionsFromBlob = exports.getVideoDimensionsFromBlob = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(blob) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            var url = URL.createObjectURL(blob);
            var video = document.createElement('video');
            video.preload = 'metadata';
            video.src = url;
            video.muted = true;

            // loadedmetadata, loadeddata, play, playing
            video.addEventListener('loadedmetadata', function timeupdateHandler() {
              video.removeEventListener('loadedmetadata', timeupdateHandler);
              resolve({
                width: video.videoWidth,
                height: video.videoHeight
              });
              URL.revokeObjectURL(url);
            });
            video.addEventListener('error', function () {
              reject(new Error('failed to load video'));
              URL.revokeObjectURL(url);
            });
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getVideoDimensionsFromBlob(_x) {
    return _ref.apply(this, arguments);
  };
}();