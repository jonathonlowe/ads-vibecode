"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectToQueryString = exports.isMediaBlobUrl = exports.getAttrsFromUrl = exports.addFileAttrsToUrl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var mediaBlobUrlIdentifier = 'media-blob-url';
var isMediaBlobUrl = exports.isMediaBlobUrl = function isMediaBlobUrl(url) {
  return url.indexOf("".concat(mediaBlobUrlIdentifier, "=true")) > -1;
};
var getNumberFromParams = function getNumberFromParams(params, name) {
  var value = params.get(name);
  return typeof value === 'string' && !isNaN(parseInt(value)) ? parseInt(value) : undefined;
};
var getStringFromParams = function getStringFromParams(params, name) {
  var value = params.get(name);
  if (!value) {
    return;
  }
  return decodeURIComponent(value);
};
var getAttrsFromUrl = exports.getAttrsFromUrl = function getAttrsFromUrl(blobUrl) {
  var url = new URL(blobUrl);
  var hash = url.hash.replace('#', '');
  var params = new URLSearchParams(hash);
  var id = params.get('id');
  var contextId = params.get('contextId');
  // check if we have the required params
  if (!id || !contextId) {
    return;
  }
  return {
    id: id,
    contextId: contextId,
    collection: getStringFromParams(params, 'collection'),
    alt: getStringFromParams(params, 'alt'),
    height: getNumberFromParams(params, 'height'),
    width: getNumberFromParams(params, 'width'),
    size: getNumberFromParams(params, 'size'),
    name: getStringFromParams(params, 'name'),
    mimeType: getStringFromParams(params, 'mimeType')
  };
};
var objectToQueryString = exports.objectToQueryString = function objectToQueryString(json) {
  return Object.keys(json).filter(function (attrName) {
    return typeof json[attrName] !== 'undefined' && json[attrName] !== null;
  }).map(function (key) {
    var value = json[key];
    if (typeof value === 'undefined' || value === null) {
      return;
    }
    return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value.toString()));
  }).join('&');
};
var addFileAttrsToUrl = exports.addFileAttrsToUrl = function addFileAttrsToUrl(url, fileAttrs) {
  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  if (isSafari) {
    return url;
  }
  var mediaIdentifierAttr = (0, _defineProperty2.default)({}, mediaBlobUrlIdentifier, 'true');
  var mergedAttrs = _objectSpread(_objectSpread({}, mediaIdentifierAttr), fileAttrs);
  var queryAttrs = objectToQueryString(mergedAttrs);

  // we can't use '?' separator for blob url params
  return "".concat(url, "#").concat(queryAttrs);
};