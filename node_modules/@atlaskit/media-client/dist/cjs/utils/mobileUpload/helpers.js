"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMobileFileStateSubject = exports.createMobileDownloadFileStream = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ReplaySubject = require("rxjs/ReplaySubject");
var _from = require("rxjs/observable/from");
var _map = require("rxjs/operators/map");
var _fileState = require("../../models/file-state");
var _createMediaSubject = require("../createMediaSubject");
var _detectEmptyFile = require("../detectEmptyFile");
var _polling = require("../polling");
var _error = require("./error");
var _media = require("../../models/media");
var createMobileFileStateSubject = exports.createMobileFileStateSubject = function createMobileFileStateSubject(service) {
  var subject = new _ReplaySubject.ReplaySubject(1);
  (0, _from.from)(service.start()).pipe((0, _map.map)(function (state) {
    return state.context.currentFileState;
  })).subscribe(subject);
  return subject;
};
var createMobileDownloadFileStream = exports.createMobileDownloadFileStream = function createMobileDownloadFileStream(dataloader, id, collectionName, occurrenceKey) {
  var subject = (0, _createMediaSubject.createMediaSubject)();
  var poll = new _polling.PollingFunction();

  // ensure subject errors if polling exceeds max iterations or uncaught exception in executor
  poll.onError = function (error) {
    return subject.error(error);
  };
  poll.execute( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var response, fileState;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return dataloader.load({
            id: id,
            collectionName: collectionName
          });
        case 2:
          response = _context.sent;
          if (!(0, _media.isNotFoundMediaItemDetails)(response)) {
            _context.next = 5;
            break;
          }
          throw new _error.MobileUploadError('emptyItems', {
            id: id,
            collectionName: collectionName,
            occurrenceKey: occurrenceKey,
            traceContext: response.metadataTraceContext
          });
        case 5:
          if (!(0, _detectEmptyFile.isEmptyFile)(response)) {
            _context.next = 7;
            break;
          }
          throw new _error.MobileUploadError('zeroVersionFile', {
            id: id,
            collectionName: collectionName,
            occurrenceKey: occurrenceKey,
            traceContext: response.metadataTraceContext
          });
        case 7:
          fileState = (0, _fileState.mapMediaItemToFileState)(id, response);
          subject.next(fileState);
          _context.t0 = fileState.status;
          _context.next = _context.t0 === 'processing' ? 12 : _context.t0 === 'processed' ? 14 : 16;
          break;
        case 12:
          // the only case for continuing polling, otherwise this function is run once only
          poll.next();
          return _context.abrupt("break", 16);
        case 14:
          subject.complete();
          return _context.abrupt("break", 16);
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  return subject;
};