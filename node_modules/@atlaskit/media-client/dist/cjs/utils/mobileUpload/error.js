"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileUploadError = void 0;
exports.isMobileUploadError = isMobileUploadError;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _errors = require("../../models/errors");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MobileUploadError = exports.MobileUploadError = /*#__PURE__*/function (_BaseMediaClientError) {
  // Legacy Attribute. Should be removed

  function MobileUploadError(reason, metadata) {
    var _this;
    (0, _classCallCheck2.default)(this, MobileUploadError);
    _this = _callSuper(this, MobileUploadError, [reason, metadata, undefined]);
    _this.id = metadata.id;
    return _this;
  }

  // TODO: Deprecate this getter https://product-fabric.atlassian.net/browse/CXP-4665
  /** Will be deprecated. Use the properties `reason` and `metadata` instead */
  (0, _inherits2.default)(MobileUploadError, _BaseMediaClientError);
  return (0, _createClass2.default)(MobileUploadError, [{
    key: "attributes",
    get: function get() {
      var reason = this.reason,
        _this$metadata = this.metadata,
        id = _this$metadata.id,
        collectionName = _this$metadata.collectionName,
        occurrenceKey = _this$metadata.occurrenceKey,
        traceContext = _this$metadata.traceContext;
      return {
        reason: reason,
        id: id,
        collectionName: collectionName,
        occurrenceKey: occurrenceKey,
        metadata: {
          traceContext: traceContext
        }
      };
    }
  }]);
}(_errors.BaseMediaClientError);
function isMobileUploadError(err) {
  return err instanceof MobileUploadError;
}