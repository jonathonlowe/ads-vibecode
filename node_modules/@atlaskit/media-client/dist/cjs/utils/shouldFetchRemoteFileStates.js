"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldFetchRemoteFileStates = shouldFetchRemoteFileStates;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mediaTypeUtils = require("@atlaskit/media-common/mediaTypeUtils");
var _getVideoDimensionsFromBlob = require("./getVideoDimensionsFromBlob");
/**
 * Async helper determining if we should fetch remote fileStates from the backend:
 * - we poll the backend for all supported documents,
 * - we poll the backend is mimeType isn't natively supported by the browser,
 * - we poll the backend if we don't have a local preview available.
 * - we poll the backend if we have a video with which we can't extract dimensions,
 *
 * Polling the backend periodically refreshes the cached fileState until the file is processed.
 * Polling is needed for the use cases above to properly render the file in our components.
 *
 */
function shouldFetchRemoteFileStates(_x, _x2, _x3) {
  return _shouldFetchRemoteFileStates.apply(this, arguments);
}
function _shouldFetchRemoteFileStates() {
  _shouldFetchRemoteFileStates = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(mediaType, mimeType, preview) {
    var content, _yield$getVideoDimens, width, height;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!((mediaType === 'doc' || !(0, _mediaTypeUtils.isMimeTypeSupportedByBrowser)(mimeType) || !preview) && (0, _mediaTypeUtils.isMimeTypeSupportedByServer)(mimeType))) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", true);
        case 2:
          if (!(mediaType === 'video' && !!preview)) {
            _context.next = 20;
            break;
          }
          _context.next = 5;
          return preview;
        case 5:
          content = _context.sent.value;
          if (content instanceof Blob) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", false);
        case 8:
          _context.prev = 8;
          _context.next = 11;
          return (0, _getVideoDimensionsFromBlob.getVideoDimensionsFromBlob)(content);
        case 11:
          _yield$getVideoDimens = _context.sent;
          width = _yield$getVideoDimens.width;
          height = _yield$getVideoDimens.height;
          return _context.abrupt("return", !width && !height);
        case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](8);
          return _context.abrupt("return", true);
        case 20:
          return _context.abrupt("return", false);
        case 21:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[8, 17]]);
  }));
  return _shouldFetchRemoteFileStates.apply(this, arguments);
}