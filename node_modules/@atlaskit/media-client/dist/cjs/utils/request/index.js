"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RequestError", {
  enumerable: true,
  get: function get() {
    return _errors.RequestError;
  }
});
Object.defineProperty(exports, "createRequestErrorReason", {
  enumerable: true,
  get: function get() {
    return _helpers.createRequestErrorReason;
  }
});
Object.defineProperty(exports, "isRateLimitedError", {
  enumerable: true,
  get: function get() {
    return _helpers.isRateLimitedError;
  }
});
Object.defineProperty(exports, "isRequestError", {
  enumerable: true,
  get: function get() {
    return _errors.isRequestError;
  }
});
exports.request = request;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _errors = require("./errors");
var _helpers = require("./helpers");
function request(_x) {
  return _request.apply(this, arguments);
}
function _request() {
  _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url) {
    var options,
      controller,
      _options$method,
      method,
      endpoint,
      auth,
      params,
      headers,
      body,
      _options$clientOption,
      clientOptions,
      traceContext,
      retryOptions,
      metadata,
      doFetch,
      _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          controller = _args.length > 2 ? _args[2] : undefined;
          _options$method = options.method, method = _options$method === void 0 ? 'GET' : _options$method, endpoint = options.endpoint, auth = options.auth, params = options.params, headers = options.headers, body = options.body, _options$clientOption = options.clientOptions, clientOptions = _options$clientOption === void 0 ? {} : _options$clientOption, traceContext = options.traceContext;
          retryOptions = clientOptions.retryOptions;
          metadata = {
            method: method,
            endpoint: endpoint,
            traceContext: traceContext
          }; // TODO BMPT-918: add client timeout feature behing a FF (using clientOptions.clientTimeout + Promise.race)
          doFetch = function doFetch() {
            return fetch((0, _helpers.createUrl)(url, {
              params: params
            }), {
              method: method,
              body: body,
              headers: (0, _helpers.extendHeaders)(headers, auth, traceContext),
              signal: controller && controller.signal
            }).then((0, _helpers.createProcessFetchResponse)(metadata));
          };
          return _context.abrupt("return", (0, _helpers.fetchRetry)(doFetch, metadata, retryOptions));
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _request.apply(this, arguments);
}