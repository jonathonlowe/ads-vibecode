"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _eventemitter = require("eventemitter2");
var _mediaCore = require("@atlaskit/media-core");
var _mediaStore = require("./media-store");
var _fileFetcher = require("./file-fetcher");
var _stargateClient = require("./stargate-client");
var _mediaState = require("@atlaskit/media-state");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MediaClient = exports.MediaClient = /*#__PURE__*/function () {
  // mobile upload is lazily loaded

  // Deprecated value introduced for backward compatibility with Context

  function MediaClient(mediaClientConfig) {
    var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _mediaState.mediaStore;
    var mediaApi = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2.default)(this, MediaClient);
    this.mediaClientConfig = mediaClientConfig;
    this.store = store;
    this.mediaStore = mediaApi !== null && mediaApi !== void 0 ? mediaApi : new _mediaStore.MediaStore({
      authProvider: mediaClientConfig.authProvider,
      initialAuth: mediaClientConfig.initialAuth,
      chunkHashAlgorithm: mediaClientConfig.useSha256ForUploads ? _mediaCore.ChunkHashAlgorithm.Sha256 : _mediaCore.ChunkHashAlgorithm.Sha1,
      authProviderTimeout: mediaClientConfig.authProviderTimeoutMs
    });
    this.config = mediaClientConfig;
    this.file = new _fileFetcher.FileFetcherImpl(this.mediaStore, this.store);
    this.eventEmitter = new _eventemitter.EventEmitter2();
    this.stargate = new _stargateClient.StargateClient(mediaClientConfig.stargateBaseUrl);
  }

  /**
   * @internal
   */
  return (0, _createClass2.default)(MediaClient, [{
    key: "__DO_NOT_USE__getMediaStore",
    value: function __DO_NOT_USE__getMediaStore() {
      return this.store;
    }
  }, {
    key: "getImage",
    value: function getImage(id, params, controller, fetchMaxRes, traceContext) {
      return this.mediaStore.getImage(id, params, controller, fetchMaxRes, traceContext);
    }
  }, {
    key: "getImageUrl",
    value: function getImageUrl(id, params) {
      return this.mediaStore.getFileImageURL(id, params);
    }
  }, {
    key: "getImageUrlSync",
    value: function getImageUrlSync(id, params) {
      return this.mediaStore.getFileImageURLSync(id, params);
    }
  }, {
    key: "getImageMetadata",
    value: function () {
      var _getImageMetadata = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(id, params) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.mediaStore.getImageMetadata(id, params);
            case 2:
              return _context.abrupt("return", _context.sent.metadata);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getImageMetadata(_x, _x2) {
        return _getImageMetadata.apply(this, arguments);
      }
      return getImageMetadata;
    }()
  }, {
    key: "mobileUploadPromise",
    value: function () {
      var _mobileUploadPromise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var module;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.mobileUpload) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", this.mobileUpload);
            case 2:
              _context2.next = 4;
              return Promise.resolve().then(function () {
                return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_media-client-mobile-upload" */'./mobile-upload'));
              });
            case 4:
              module = _context2.sent;
              this.mobileUpload = new module.MobileUploadImpl(this.mediaStore, this.store);
              return _context2.abrupt("return", this.mobileUpload);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function mobileUploadPromise() {
        return _mobileUploadPromise.apply(this, arguments);
      }
      return mobileUploadPromise;
    }()
  }, {
    key: "removeFileFromCollection",
    value: function () {
      var _removeFileFromCollection = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(id, collectionName, occurrenceKey, traceContext) {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.mediaStore.removeCollectionFile(id, collectionName, occurrenceKey, traceContext);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function removeFileFromCollection(_x3, _x4, _x5, _x6) {
        return _removeFileFromCollection.apply(this, arguments);
      }
      return removeFileFromCollection;
    }()
  }, {
    key: "on",
    value: function on(event, listener) {
      this.eventEmitter.on(event, listener);
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      this.eventEmitter.off(event, listener);
    }
  }, {
    key: "emit",
    value: function emit(event, payload) {
      return this.eventEmitter.emit(event, payload);
    }
  }]);
}();