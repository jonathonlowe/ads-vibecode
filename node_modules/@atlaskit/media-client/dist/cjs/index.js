"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ChunkHashAlgorithm", {
  enumerable: true,
  get: function get() {
    return _mediaCore.ChunkHashAlgorithm;
  }
});
Object.defineProperty(exports, "FileFetcherError", {
  enumerable: true,
  get: function get() {
    return _fileFetcher.FileFetcherError;
  }
});
Object.defineProperty(exports, "FileFetcherImpl", {
  enumerable: true,
  get: function get() {
    return _fileFetcher.FileFetcherImpl;
  }
});
Object.defineProperty(exports, "MAX_RESOLUTION", {
  enumerable: true,
  get: function get() {
    return _constants.MAX_RESOLUTION;
  }
});
Object.defineProperty(exports, "MediaClient", {
  enumerable: true,
  get: function get() {
    return _mediaClient.MediaClient;
  }
});
Object.defineProperty(exports, "MediaStore", {
  enumerable: true,
  get: function get() {
    return _mediaStore.MediaStore;
  }
});
Object.defineProperty(exports, "MediaStoreError", {
  enumerable: true,
  get: function get() {
    return _mediaStore.MediaStoreError;
  }
});
Object.defineProperty(exports, "PollingError", {
  enumerable: true,
  get: function get() {
    return _polling.PollingError;
  }
});
Object.defineProperty(exports, "PollingFunction", {
  enumerable: true,
  get: function get() {
    return _polling.PollingFunction;
  }
});
Object.defineProperty(exports, "RECENTS_COLLECTION", {
  enumerable: true,
  get: function get() {
    return _constants.RECENTS_COLLECTION;
  }
});
Object.defineProperty(exports, "RequestError", {
  enumerable: true,
  get: function get() {
    return _request.RequestError;
  }
});
Object.defineProperty(exports, "StargateClient", {
  enumerable: true,
  get: function get() {
    return _stargateClient.StargateClient;
  }
});
Object.defineProperty(exports, "UploadController", {
  enumerable: true,
  get: function get() {
    return _uploadController.UploadController;
  }
});
Object.defineProperty(exports, "addFileAttrsToUrl", {
  enumerable: true,
  get: function get() {
    return _url.addFileAttrsToUrl;
  }
});
Object.defineProperty(exports, "checkWebpSupport", {
  enumerable: true,
  get: function get() {
    return _checkWebpSupport.checkWebpSupport;
  }
});
Object.defineProperty(exports, "createMediaSubject", {
  enumerable: true,
  get: function get() {
    return _createMediaSubject.createMediaSubject;
  }
});
Object.defineProperty(exports, "createMediaSubscribable", {
  enumerable: true,
  get: function get() {
    return _mediaSubscribable.createMediaSubscribable;
  }
});
Object.defineProperty(exports, "createRequestErrorReason", {
  enumerable: true,
  get: function get() {
    return _request.createRequestErrorReason;
  }
});
Object.defineProperty(exports, "createUrl", {
  enumerable: true,
  get: function get() {
    return _helpers.createUrl;
  }
});
Object.defineProperty(exports, "fromObservable", {
  enumerable: true,
  get: function get() {
    return _mediaSubscribable.fromObservable;
  }
});
Object.defineProperty(exports, "getArtifactUrl", {
  enumerable: true,
  get: function get() {
    return _artifacts.getArtifactUrl;
  }
});
Object.defineProperty(exports, "getAttrsFromUrl", {
  enumerable: true,
  get: function get() {
    return _url.getAttrsFromUrl;
  }
});
Object.defineProperty(exports, "getDimensionsFromBlob", {
  enumerable: true,
  get: function get() {
    return _getDimensionsFromBlob.getDimensionsFromBlob;
  }
});
Object.defineProperty(exports, "getFileStreamsCache", {
  enumerable: true,
  get: function get() {
    return _fileStreamsCache.getFileStreamsCache;
  }
});
Object.defineProperty(exports, "getMediaClientErrorReason", {
  enumerable: true,
  get: function get() {
    return _errors.getMediaClientErrorReason;
  }
});
Object.defineProperty(exports, "getMediaEnvironment", {
  enumerable: true,
  get: function get() {
    return _mediaStore.getMediaEnvironment;
  }
});
Object.defineProperty(exports, "getMediaRegion", {
  enumerable: true,
  get: function get() {
    return _mediaStore.getMediaRegion;
  }
});
Object.defineProperty(exports, "globalMediaEventEmitter", {
  enumerable: true,
  get: function get() {
    return _globalMediaEventEmitter.globalMediaEventEmitter;
  }
});
Object.defineProperty(exports, "imageResizeModeToFileImageMode", {
  enumerable: true,
  get: function get() {
    return _imageResizeModeToFileImageMode.imageResizeModeToFileImageMode;
  }
});
Object.defineProperty(exports, "isAbortedRequestError", {
  enumerable: true,
  get: function get() {
    return _helpers.isAbortedRequestError;
  }
});
Object.defineProperty(exports, "isCommonMediaClientError", {
  enumerable: true,
  get: function get() {
    return _errors.isCommonMediaClientError;
  }
});
Object.defineProperty(exports, "isDifferentIdentifier", {
  enumerable: true,
  get: function get() {
    return _identifier.isDifferentIdentifier;
  }
});
Object.defineProperty(exports, "isErrorFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isErrorFileState;
  }
});
Object.defineProperty(exports, "isExternalImageIdentifier", {
  enumerable: true,
  get: function get() {
    return _identifier.isExternalImageIdentifier;
  }
});
Object.defineProperty(exports, "isFileFetcherError", {
  enumerable: true,
  get: function get() {
    return _fileFetcher.isFileFetcherError;
  }
});
Object.defineProperty(exports, "isFileIdentifier", {
  enumerable: true,
  get: function get() {
    return _identifier.isFileIdentifier;
  }
});
Object.defineProperty(exports, "isFinalFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isFinalFileState;
  }
});
Object.defineProperty(exports, "isImageRepresentationReady", {
  enumerable: true,
  get: function get() {
    return _fileState.isImageRepresentationReady;
  }
});
Object.defineProperty(exports, "isMediaBlobUrl", {
  enumerable: true,
  get: function get() {
    return _url.isMediaBlobUrl;
  }
});
Object.defineProperty(exports, "isMediaClientError", {
  enumerable: true,
  get: function get() {
    return _errors.isMediaClientError;
  }
});
Object.defineProperty(exports, "isMediaStoreError", {
  enumerable: true,
  get: function get() {
    return _mediaStore.isMediaStoreError;
  }
});
Object.defineProperty(exports, "isNonErrorFinalFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isNonErrorFinalFileState;
  }
});
Object.defineProperty(exports, "isPollingError", {
  enumerable: true,
  get: function get() {
    return _polling.isPollingError;
  }
});
Object.defineProperty(exports, "isPreviewableFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isPreviewableFileState;
  }
});
Object.defineProperty(exports, "isPreviewableType", {
  enumerable: true,
  get: function get() {
    return _media.isPreviewableType;
  }
});
Object.defineProperty(exports, "isProcessedFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isProcessedFileState;
  }
});
Object.defineProperty(exports, "isProcessingFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isProcessingFileState;
  }
});
Object.defineProperty(exports, "isRateLimitedError", {
  enumerable: true,
  get: function get() {
    return _request.isRateLimitedError;
  }
});
Object.defineProperty(exports, "isRequestError", {
  enumerable: true,
  get: function get() {
    return _request.isRequestError;
  }
});
Object.defineProperty(exports, "isUploadingFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.isUploadingFileState;
  }
});
Object.defineProperty(exports, "mapMediaFileToFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.mapMediaFileToFileState;
  }
});
Object.defineProperty(exports, "mapMediaItemToFileState", {
  enumerable: true,
  get: function get() {
    return _fileState.mapMediaItemToFileState;
  }
});
Object.defineProperty(exports, "objectToQueryString", {
  enumerable: true,
  get: function get() {
    return _url.objectToQueryString;
  }
});
Object.defineProperty(exports, "request", {
  enumerable: true,
  get: function get() {
    return _request.request;
  }
});
Object.defineProperty(exports, "toCommonMediaClientError", {
  enumerable: true,
  get: function get() {
    return _errors.toCommonMediaClientError;
  }
});
Object.defineProperty(exports, "uploadFile", {
  enumerable: true,
  get: function get() {
    return _uploader.uploadFile;
  }
});
var _mediaStore = require("./client/media-store");
var _uploadController = require("./upload-controller");
var _media = require("./models/media");
var _artifacts = require("./models/artifacts");
var _errors = require("./models/errors");
var _fileState = require("./models/file-state");
var _uploader = require("./uploader");
var _request = require("./utils/request");
var _helpers = require("./utils/request/helpers");
var _polling = require("./utils/polling");
var _imageResizeModeToFileImageMode = require("./utils/imageResizeModeToFileImageMode");
var _fileFetcher = require("./client/file-fetcher");
var _mediaClient = require("./client/media-client");
var _stargateClient = require("./client/stargate-client");
var _checkWebpSupport = require("./utils/checkWebpSupport");
var _getDimensionsFromBlob = require("./utils/getDimensionsFromBlob");
var _createMediaSubject = require("./utils/createMediaSubject");
var _identifier = require("./identifier");
var _globalMediaEventEmitter = require("./globalMediaEventEmitter");
var _url = require("./utils/url");
var _mediaSubscribable = require("./utils/mediaSubscribable");
var _constants = require("./constants");
var _fileStreamsCache = require("./file-streams-cache");
var _mediaCore = require("@atlaskit/media-core");