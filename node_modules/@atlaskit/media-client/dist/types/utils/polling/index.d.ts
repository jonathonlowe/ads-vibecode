import { type Executor } from './types';
export { PollingError, isPollingError } from './errors';
export interface PollingOptions {
    poll_intervalMs: number;
    poll_maxAttempts: number;
    poll_backoffFactor: number;
    poll_maxIntervalMs: number;
}
export declare const defaultPollingOptions: PollingOptions;
/**
 * This class encapsulates polling functionality with the following features:
 *
 *  - async executor function provides each attempt
 *  - executor will only repeat defined max amount of times (options)
 *  - each attempt uses a timeout to the next attempt by an interval (ms)
 *  - each attempt increases the timeout interval by a "poll_backoffFactor"
 *  - if max attempts are exceeded or executor has exception then onError handler is called
 *
 * IMPORTANT! the executor function must explicitly call ".next()" for the next iteration to run
 */
export declare class PollingFunction {
    options: PollingOptions;
    poll_intervalMs: number;
    attempt: number;
    shouldIterate: boolean;
    onError?: (error: Error) => void;
    timeoutId: number;
    constructor(options?: Partial<PollingOptions>);
    execute(executor: Executor): Promise<void>;
    private fail;
    getIntervalMsForIteration(iteration: number): number;
    next(): void;
    cancel(): void;
}
