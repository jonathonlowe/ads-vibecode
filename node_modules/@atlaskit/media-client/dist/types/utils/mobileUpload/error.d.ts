import { type MediaTraceContext } from '@atlaskit/media-common';
import { BaseMediaClientError } from '../../models/errors';
export type MobileUploadErrorReason = 'emptyItems' | 'zeroVersionFile';
export type MobileUploadErrorAttributes = {
    readonly reason: MobileUploadErrorReason;
    readonly id: string;
    readonly metadata?: {
        readonly collectionName?: string;
        readonly occurrenceKey?: string;
        readonly traceContext?: MediaTraceContext;
    };
};
export type MobileUploadErrorMetadata = {
    readonly id: string;
    readonly collectionName?: string;
    readonly occurrenceKey?: string;
    readonly traceContext?: MediaTraceContext;
};
export declare class MobileUploadError extends BaseMediaClientError<MobileUploadErrorReason, MobileUploadErrorMetadata, undefined, MobileUploadErrorAttributes> {
    readonly id: string;
    constructor(reason: MobileUploadErrorReason, metadata: MobileUploadErrorMetadata);
    /** Will be deprecated. Use the properties `reason` and `metadata` instead */
    get attributes(): {
        reason: MobileUploadErrorReason;
        id: string;
        collectionName: string | undefined;
        occurrenceKey: string | undefined;
        metadata: {
            traceContext: MediaTraceContext | undefined;
        };
    };
}
export declare function isMobileUploadError(err: Error): err is MobileUploadError;
