import { BaseMediaClientError } from '../../models/errors';
import { type MediaTraceContext } from '@atlaskit/media-common';
export type FileFetcherErrorReason = 'invalidFileId' | 'emptyItems' | 'zeroVersionFile' | 'emptyFileName';
export type FileFetcherErrorAttributes = {
    readonly reason: FileFetcherErrorReason;
    readonly id: string;
    readonly metadata?: {
        readonly collectionName?: string;
        readonly occurrenceKey?: string;
        readonly traceContext?: MediaTraceContext;
    };
};
export type FileFetcherErrorMetadata = {
    readonly id: string;
    readonly collectionName?: string;
    readonly occurrenceKey?: string;
    readonly traceContext?: MediaTraceContext;
};
export declare class FileFetcherError extends BaseMediaClientError<FileFetcherErrorReason, FileFetcherErrorMetadata, undefined, FileFetcherErrorAttributes> {
    readonly id: string;
    constructor(reason: FileFetcherErrorReason, metadata: FileFetcherErrorMetadata);
    /** Will be deprecated. Use the properties `reason` and `metadata` instead */
    get attributes(): {
        metadata?: {
            traceContext: MediaTraceContext;
        } | undefined;
        reason: FileFetcherErrorReason;
        id: string;
        collectionName: string | undefined;
        occurrenceKey: string | undefined;
    };
}
export declare function isFileFetcherError(err: Error): err is FileFetcherError;
