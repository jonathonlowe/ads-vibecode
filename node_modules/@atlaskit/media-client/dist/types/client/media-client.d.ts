import { type MediaClientConfig } from '@atlaskit/media-core';
import { type MediaTraceContext } from '@atlaskit/media-common';
import { MediaStore as MediaApi, type MediaStoreGetFileImageParams, type ImageMetadata } from './media-store';
import { type FileFetcher } from './file-fetcher';
import { type UploadEventPayloadMap, type EventPayloadListener } from './events';
import { StargateClient } from './stargate-client';
import { type MobileUpload } from '../models/mobile-upload';
import { type MediaStore } from '@atlaskit/media-state';
export declare class MediaClient {
    readonly mediaClientConfig: MediaClientConfig;
    private readonly store;
    readonly mediaStore: MediaApi;
    readonly file: FileFetcher;
    readonly stargate: StargateClient;
    private readonly eventEmitter;
    private mobileUpload?;
    readonly config: MediaClientConfig;
    constructor(mediaClientConfig: MediaClientConfig, store?: MediaStore, mediaApi?: MediaApi);
    /**
     * @internal
     */
    __DO_NOT_USE__getMediaStore(): MediaStore;
    getImage(id: string, params?: MediaStoreGetFileImageParams, controller?: AbortController, fetchMaxRes?: boolean, traceContext?: MediaTraceContext): Promise<Blob>;
    getImageUrl(id: string, params?: MediaStoreGetFileImageParams): Promise<string>;
    getImageUrlSync(id: string, params?: MediaStoreGetFileImageParams): string;
    getImageMetadata(id: string, params?: MediaStoreGetFileImageParams): Promise<ImageMetadata>;
    mobileUploadPromise(): Promise<MobileUpload>;
    removeFileFromCollection(id: string, collectionName: string, occurrenceKey?: string, traceContext?: MediaTraceContext): Promise<void>;
    on<E extends keyof UploadEventPayloadMap>(event: E, listener: EventPayloadListener<UploadEventPayloadMap, E>): void;
    off<E extends keyof UploadEventPayloadMap>(event: E, listener: EventPayloadListener<UploadEventPayloadMap, E>): void;
    emit<E extends keyof UploadEventPayloadMap>(event: E, payload: UploadEventPayloadMap[E]): boolean;
}
