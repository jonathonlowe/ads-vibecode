import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { EventEmitter2 } from 'eventemitter2';
import { ChunkHashAlgorithm } from '@atlaskit/media-core';
import { MediaStore as MediaApi } from './media-store';
import { FileFetcherImpl } from './file-fetcher';
import { StargateClient } from './stargate-client';
import { mediaStore } from '@atlaskit/media-state';
export var MediaClient = /*#__PURE__*/function () {
  // mobile upload is lazily loaded

  // Deprecated value introduced for backward compatibility with Context

  function MediaClient(mediaClientConfig) {
    var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mediaStore;
    var mediaApi = arguments.length > 2 ? arguments[2] : undefined;
    _classCallCheck(this, MediaClient);
    this.mediaClientConfig = mediaClientConfig;
    this.store = store;
    this.mediaStore = mediaApi !== null && mediaApi !== void 0 ? mediaApi : new MediaApi({
      authProvider: mediaClientConfig.authProvider,
      initialAuth: mediaClientConfig.initialAuth,
      chunkHashAlgorithm: mediaClientConfig.useSha256ForUploads ? ChunkHashAlgorithm.Sha256 : ChunkHashAlgorithm.Sha1,
      authProviderTimeout: mediaClientConfig.authProviderTimeoutMs
    });
    this.config = mediaClientConfig;
    this.file = new FileFetcherImpl(this.mediaStore, this.store);
    this.eventEmitter = new EventEmitter2();
    this.stargate = new StargateClient(mediaClientConfig.stargateBaseUrl);
  }

  /**
   * @internal
   */
  return _createClass(MediaClient, [{
    key: "__DO_NOT_USE__getMediaStore",
    value: function __DO_NOT_USE__getMediaStore() {
      return this.store;
    }
  }, {
    key: "getImage",
    value: function getImage(id, params, controller, fetchMaxRes, traceContext) {
      return this.mediaStore.getImage(id, params, controller, fetchMaxRes, traceContext);
    }
  }, {
    key: "getImageUrl",
    value: function getImageUrl(id, params) {
      return this.mediaStore.getFileImageURL(id, params);
    }
  }, {
    key: "getImageUrlSync",
    value: function getImageUrlSync(id, params) {
      return this.mediaStore.getFileImageURLSync(id, params);
    }
  }, {
    key: "getImageMetadata",
    value: function () {
      var _getImageMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, params) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.mediaStore.getImageMetadata(id, params);
            case 2:
              return _context.abrupt("return", _context.sent.metadata);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getImageMetadata(_x, _x2) {
        return _getImageMetadata.apply(this, arguments);
      }
      return getImageMetadata;
    }()
  }, {
    key: "mobileUploadPromise",
    value: function () {
      var _mobileUploadPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var module;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.mobileUpload) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return", this.mobileUpload);
            case 2:
              _context2.next = 4;
              return import( /* webpackChunkName: "@atlaskit-internal_media-client-mobile-upload" */'./mobile-upload');
            case 4:
              module = _context2.sent;
              this.mobileUpload = new module.MobileUploadImpl(this.mediaStore, this.store);
              return _context2.abrupt("return", this.mobileUpload);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function mobileUploadPromise() {
        return _mobileUploadPromise.apply(this, arguments);
      }
      return mobileUploadPromise;
    }()
  }, {
    key: "removeFileFromCollection",
    value: function () {
      var _removeFileFromCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id, collectionName, occurrenceKey, traceContext) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.mediaStore.removeCollectionFile(id, collectionName, occurrenceKey, traceContext);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function removeFileFromCollection(_x3, _x4, _x5, _x6) {
        return _removeFileFromCollection.apply(this, arguments);
      }
      return removeFileFromCollection;
    }()
  }, {
    key: "on",
    value: function on(event, listener) {
      this.eventEmitter.on(event, listener);
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      this.eventEmitter.off(event, listener);
    }
  }, {
    key: "emit",
    value: function emit(event, payload) {
      return this.eventEmitter.emit(event, payload);
    }
  }]);
}();