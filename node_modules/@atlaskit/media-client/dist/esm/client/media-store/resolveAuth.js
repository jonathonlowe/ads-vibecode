import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { MediaStoreError } from './error';
import { rejectTimeout } from '../../utils/setTimeoutPromise';
export var DEFAULT_AUTH_PROVIDER_TIMEOUT = 10000;
export var resolveAuth = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authProvider, authContext) {
    var authProviderTimeout,
      auth,
      _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          authProviderTimeout = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_AUTH_PROVIDER_TIMEOUT;
          _context.prev = 1;
          _context.next = 4;
          return Promise.race([authProvider(authContext), rejectTimeout(authProviderTimeout, new MediaStoreError('authProviderTimedOut'))]);
        case 4:
          auth = _context.sent;
          _context.next = 12;
          break;
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          if (!(_context.t0 instanceof MediaStoreError)) {
            _context.next = 11;
            break;
          }
          throw _context.t0;
        case 11:
          throw new MediaStoreError('failedAuthProvider', _context.t0 instanceof Error ? _context.t0 : undefined);
        case 12:
          if (auth) {
            _context.next = 14;
            break;
          }
          throw new MediaStoreError('emptyAuth');
        case 14:
          return _context.abrupt("return", auth);
        case 15:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
  return function resolveAuth(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
export var resolveInitialAuth = function resolveInitialAuth(auth) {
  if (!auth) {
    throw new MediaStoreError('missingInitialAuth');
  }
  return auth;
};