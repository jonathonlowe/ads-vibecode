import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { getMediaTypeFromMimeType } from '@atlaskit/media-common';
import { mediaStore } from '@atlaskit/media-state';
import { getFileStreamsCache } from '../file-streams-cache';
import { createFileDataloader } from '../utils/createFileDataLoader';
import { createServicesCache, createMobileUploadStateMachine, createMobileUploadService, createMobileFileStateSubject } from '../utils/mobileUpload';
export var MobileUploadImpl = /*#__PURE__*/function () {
  function MobileUploadImpl(mediaApi) {
    var _this = this;
    var store = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mediaStore;
    _classCallCheck(this, MobileUploadImpl);
    _defineProperty(this, "getErrorFileState", function (error, id, occurrenceKey) {
      return typeof error === 'string' ? {
        status: 'error',
        id: id,
        reason: error,
        occurrenceKey: occurrenceKey,
        message: error
      } : {
        status: 'error',
        id: id,
        reason: error === null || error === void 0 ? void 0 : error.reason,
        details: error === null || error === void 0 ? void 0 : error.attributes,
        occurrenceKey: occurrenceKey,
        message: error === null || error === void 0 ? void 0 : error.message
      };
    });
    _defineProperty(this, "setFileState", function (id, fileState) {
      _this.store.setState(function (state) {
        state.files[id] = fileState;
      });
    });
    this.store = store;
    this.dataloader = createFileDataloader(mediaApi);
    this.servicesCache = createServicesCache();
  }
  return _createClass(MobileUploadImpl, [{
    key: "notifyUploadStart",
    value: function notifyUploadStart(event) {
      var _this2 = this;
      var fileId = event.fileId,
        collectionName = event.collectionName,
        occurrenceKey = event.occurrenceKey,
        fileName = event.fileName,
        fileSize = event.fileSize,
        fileMimetype = event.fileMimetype,
        preview = event.preview,
        createdAt = event.createdAt;
      var mediaType = getMediaTypeFromMimeType(fileMimetype);
      var initialState = {
        status: 'uploading',
        id: fileId,
        occurrenceKey: occurrenceKey,
        name: fileName,
        size: fileSize,
        progress: 0,
        mediaType: mediaType,
        mimeType: fileMimetype,
        preview: preview,
        createdAt: createdAt
      };
      var service = createMobileUploadService(createMobileUploadStateMachine(this.dataloader, initialState, collectionName));
      var subject = createMobileFileStateSubject(service);
      subject.subscribe({
        next: function next(fileState) {
          _this2.setFileState(fileId, fileState);
        },
        error: function error(err) {
          var errorFileState = _this2.getErrorFileState(err, fileId, occurrenceKey);
          _this2.setFileState(fileId, errorFileState);
        }
      });
      this.servicesCache.set(fileId, service);
      getFileStreamsCache().set(fileId, subject);
    }
  }, {
    key: "notifyUploadProgress",
    value: function notifyUploadProgress(event) {
      var fileId = event.fileId,
        progress = event.progress;
      var service = this.servicesCache.get(fileId);
      if (service) {
        service.send('UPLOAD_PROGRESS', {
          progress: progress
        });
      }
    }
  }, {
    key: "notifyUploadEnd",
    value: function notifyUploadEnd(event) {
      var fileId = event.fileId;
      var service = this.servicesCache.get(fileId);
      if (service) {
        service.send('UPLOAD_END');
      }
    }
  }, {
    key: "notifyUploadError",
    value: function notifyUploadError(event) {
      var fileId = event.fileId,
        message = event.message;
      var service = this.servicesCache.get(fileId);
      if (service) {
        service.send('UPLOAD_ERROR', {
          message: message
        });
      }
    }
  }]);
}();