import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getImageDimensionsFromBlob } from './getImageDimensionsFromBlob';
import { getVideoDimensionsFromBlob } from './getVideoDimensionsFromBlob';
export var getDimensionsFromBlob = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mediaType, blob) {
    var url;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = mediaType;
          _context.next = _context.t0 === 'image' ? 3 : _context.t0 === 'video' ? 11 : 12;
          break;
        case 3:
          url = URL.createObjectURL(blob);
          _context.prev = 4;
          _context.next = 7;
          return getImageDimensionsFromBlob(url);
        case 7:
          return _context.abrupt("return", _context.sent);
        case 8:
          _context.prev = 8;
          URL.revokeObjectURL(url);
          return _context.finish(8);
        case 11:
          return _context.abrupt("return", getVideoDimensionsFromBlob(blob));
        case 12:
          throw new Error("Can't extract dimensions from ".concat(mediaType));
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4,, 8, 11]]);
  }));
  return function getDimensionsFromBlob(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();