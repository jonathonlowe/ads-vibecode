import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { BaseMediaClientError } from '../../models/errors';
export var RequestError = /*#__PURE__*/function (_BaseMediaClientError) {
  function RequestError(reason, metadata, innerError) {
    _classCallCheck(this, RequestError);
    return _callSuper(this, RequestError, [reason, metadata, innerError]);
  }

  // TODO: Deprecate this getter https://product-fabric.atlassian.net/browse/CXP-4665
  /** Will be deprecated. Use the properties `reason` and `metadata` instead */
  _inherits(RequestError, _BaseMediaClientError);
  return _createClass(RequestError, [{
    key: "attributes",
    get: function get() {
      var reason = this.reason,
        _this$metadata = this.metadata,
        _this$metadata2 = _this$metadata === void 0 ? {} : _this$metadata,
        method = _this$metadata2.method,
        endpoint = _this$metadata2.endpoint,
        mediaRegion = _this$metadata2.mediaRegion,
        mediaEnv = _this$metadata2.mediaEnv,
        attempts = _this$metadata2.attempts,
        clientExhaustedRetries = _this$metadata2.clientExhaustedRetries,
        statusCode = _this$metadata2.statusCode,
        traceContext = _this$metadata2.traceContext,
        innerError = this.innerError;
      return {
        reason: reason,
        method: method,
        endpoint: endpoint,
        mediaRegion: mediaRegion,
        mediaEnv: mediaEnv,
        attempts: attempts,
        clientExhaustedRetries: clientExhaustedRetries,
        statusCode: statusCode,
        metadata: {
          traceContext: traceContext
        },
        innerError: innerError
      };
    }
  }]);
}(BaseMediaClientError);
export function isRequestError(err) {
  return err instanceof RequestError;
}