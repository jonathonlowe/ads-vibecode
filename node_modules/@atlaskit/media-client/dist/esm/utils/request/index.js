import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
export { RequestError, isRequestError } from './errors';
export { isRateLimitedError, createRequestErrorReason } from './helpers';
import { createUrl, fetchRetry, createProcessFetchResponse, extendHeaders } from './helpers';
export function request(_x) {
  return _request.apply(this, arguments);
}
function _request() {
  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
    var options,
      controller,
      _options$method,
      method,
      endpoint,
      auth,
      params,
      headers,
      body,
      _options$clientOption,
      clientOptions,
      traceContext,
      retryOptions,
      metadata,
      doFetch,
      _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          controller = _args.length > 2 ? _args[2] : undefined;
          _options$method = options.method, method = _options$method === void 0 ? 'GET' : _options$method, endpoint = options.endpoint, auth = options.auth, params = options.params, headers = options.headers, body = options.body, _options$clientOption = options.clientOptions, clientOptions = _options$clientOption === void 0 ? {} : _options$clientOption, traceContext = options.traceContext;
          retryOptions = clientOptions.retryOptions;
          metadata = {
            method: method,
            endpoint: endpoint,
            traceContext: traceContext
          }; // TODO BMPT-918: add client timeout feature behing a FF (using clientOptions.clientTimeout + Promise.race)
          doFetch = function doFetch() {
            return fetch(createUrl(url, {
              params: params
            }), {
              method: method,
              body: body,
              headers: extendHeaders(headers, auth, traceContext),
              signal: controller && controller.signal
            }).then(createProcessFetchResponse(metadata));
          };
          return _context.abrupt("return", fetchRetry(doFetch, metadata, retryOptions));
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _request.apply(this, arguments);
}