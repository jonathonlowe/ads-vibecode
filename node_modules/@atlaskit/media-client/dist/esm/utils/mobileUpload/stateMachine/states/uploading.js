import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { assign } from 'xstate';
import { isUploadingFileState } from '../../../../models/file-state';
export var machineUploadingState = {
  // Events
  on: {
    UPLOAD_PROGRESS: [{
      target: 'uploading',
      cond: function cond(ctx, event) {
        return isUploadingFileState(ctx.currentFileState) && event.progress > ctx.currentFileState.progress;
      },
      actions: assign({
        currentFileState: function currentFileState(ctx, event) {
          return _objectSpread(_objectSpread({}, ctx.currentFileState), {}, {
            progress: event.progress
          });
        }
      })
    }, {
      target: 'error'
    }],
    UPLOAD_END: {
      target: 'processing',
      actions: assign({
        currentFileState: function currentFileState(ctx) {
          return isUploadingFileState(ctx.currentFileState) && {
            status: 'processing',
            id: ctx.currentFileState.id,
            occurrenceKey: ctx.currentFileState.occurrenceKey,
            name: ctx.currentFileState.name,
            size: ctx.currentFileState.size,
            mediaType: ctx.currentFileState.mediaType,
            mimeType: ctx.currentFileState.mimeType,
            preview: ctx.currentFileState.preview,
            createdAt: ctx.currentFileState.createdAt
          } || ctx.currentFileState;
        }
      })
    },
    UPLOAD_ERROR: {
      target: 'error',
      actions: assign({
        currentFileState: function currentFileState(ctx, event) {
          return {
            status: 'error',
            id: ctx.currentFileState.id,
            message: event.message
          };
        }
      })
    }
  }
};