import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { BaseMediaClientError } from '../../models/errors';
export var MobileUploadError = /*#__PURE__*/function (_BaseMediaClientError) {
  // Legacy Attribute. Should be removed

  function MobileUploadError(reason, metadata) {
    var _this;
    _classCallCheck(this, MobileUploadError);
    _this = _callSuper(this, MobileUploadError, [reason, metadata, undefined]);
    _this.id = metadata.id;
    return _this;
  }

  // TODO: Deprecate this getter https://product-fabric.atlassian.net/browse/CXP-4665
  /** Will be deprecated. Use the properties `reason` and `metadata` instead */
  _inherits(MobileUploadError, _BaseMediaClientError);
  return _createClass(MobileUploadError, [{
    key: "attributes",
    get: function get() {
      var reason = this.reason,
        _this$metadata = this.metadata,
        id = _this$metadata.id,
        collectionName = _this$metadata.collectionName,
        occurrenceKey = _this$metadata.occurrenceKey,
        traceContext = _this$metadata.traceContext;
      return {
        reason: reason,
        id: id,
        collectionName: collectionName,
        occurrenceKey: occurrenceKey,
        metadata: {
          traceContext: traceContext
        }
      };
    }
  }]);
}(BaseMediaClientError);
export function isMobileUploadError(err) {
  return err instanceof MobileUploadError;
}