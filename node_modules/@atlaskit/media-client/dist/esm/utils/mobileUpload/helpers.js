import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { from } from 'rxjs/observable/from';
import { map } from 'rxjs/operators/map';
import { mapMediaItemToFileState } from '../../models/file-state';
import { createMediaSubject } from '../createMediaSubject';
import { isEmptyFile } from '../detectEmptyFile';
import { PollingFunction } from '../polling';
import { MobileUploadError } from './error';
import { isNotFoundMediaItemDetails } from '../../models/media';
export var createMobileFileStateSubject = function createMobileFileStateSubject(service) {
  var subject = new ReplaySubject(1);
  from(service.start()).pipe(map(function (state) {
    return state.context.currentFileState;
  })).subscribe(subject);
  return subject;
};
export var createMobileDownloadFileStream = function createMobileDownloadFileStream(dataloader, id, collectionName, occurrenceKey) {
  var subject = createMediaSubject();
  var poll = new PollingFunction();

  // ensure subject errors if polling exceeds max iterations or uncaught exception in executor
  poll.onError = function (error) {
    return subject.error(error);
  };
  poll.execute( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var response, fileState;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return dataloader.load({
            id: id,
            collectionName: collectionName
          });
        case 2:
          response = _context.sent;
          if (!isNotFoundMediaItemDetails(response)) {
            _context.next = 5;
            break;
          }
          throw new MobileUploadError('emptyItems', {
            id: id,
            collectionName: collectionName,
            occurrenceKey: occurrenceKey,
            traceContext: response.metadataTraceContext
          });
        case 5:
          if (!isEmptyFile(response)) {
            _context.next = 7;
            break;
          }
          throw new MobileUploadError('zeroVersionFile', {
            id: id,
            collectionName: collectionName,
            occurrenceKey: occurrenceKey,
            traceContext: response.metadataTraceContext
          });
        case 7:
          fileState = mapMediaItemToFileState(id, response);
          subject.next(fileState);
          _context.t0 = fileState.status;
          _context.next = _context.t0 === 'processing' ? 12 : _context.t0 === 'processed' ? 14 : 16;
          break;
        case 12:
          // the only case for continuing polling, otherwise this function is run once only
          poll.next();
          return _context.abrupt("break", 16);
        case 14:
          subject.complete();
          return _context.abrupt("break", 16);
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  return subject;
};