import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { ChunkHashAlgorithm } from '@atlaskit/media-core';
var hasher = null;
var sha256Hasher = null;
export var destroyHasher = function destroyHasher() {
  return hasher = null;
};
export var createHasher = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(algorithm) {
    var numWorkers, _yield$import, SimpleHasher, _yield$import2, WorkerHasher, _yield$import3, _SimpleHasher;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          numWorkers = 3;
          if (!(algorithm === ChunkHashAlgorithm.Sha256)) {
            _context.next = 11;
            break;
          }
          if (sha256Hasher) {
            _context.next = 8;
            break;
          }
          _context.next = 5;
          return import('./sha256SimpleHasher');
        case 5:
          _yield$import = _context.sent;
          SimpleHasher = _yield$import.SimpleHasher;
          sha256Hasher = new SimpleHasher();
        case 8:
          return _context.abrupt("return", sha256Hasher);
        case 11:
          if (hasher) {
            _context.next = 27;
            break;
          }
          _context.prev = 12;
          _context.next = 15;
          return import('./workerHasher');
        case 15:
          _yield$import2 = _context.sent;
          WorkerHasher = _yield$import2.WorkerHasher;
          hasher = new WorkerHasher(numWorkers);
          _context.next = 27;
          break;
        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](12);
          _context.next = 24;
          return import('./simpleHasher');
        case 24:
          _yield$import3 = _context.sent;
          _SimpleHasher = _yield$import3.SimpleHasher;
          hasher = new _SimpleHasher();
        case 27:
          return _context.abrupt("return", hasher);
        case 28:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[12, 20]]);
  }));
  return function createHasher(_x) {
    return _ref.apply(this, arguments);
  };
}();