import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { PollingError } from './errors';
export { PollingError, isPollingError } from './errors';
// default polling options without using feature flags
export var defaultPollingOptions = {
  poll_intervalMs: 3000,
  poll_maxAttempts: 30,
  poll_backoffFactor: 1.25,
  poll_maxIntervalMs: 200000
};

/**
 * This class encapsulates polling functionality with the following features:
 *
 *  - async executor function provides each attempt
 *  - executor will only repeat defined max amount of times (options)
 *  - each attempt uses a timeout to the next attempt by an interval (ms)
 *  - each attempt increases the timeout interval by a "poll_backoffFactor"
 *  - if max attempts are exceeded or executor has exception then onError handler is called
 *
 * IMPORTANT! the executor function must explicitly call ".next()" for the next iteration to run
 */
export var PollingFunction = /*#__PURE__*/function () {
  function PollingFunction(options) {
    _classCallCheck(this, PollingFunction);
    _defineProperty(this, "poll_intervalMs", 0);
    _defineProperty(this, "attempt", 1);
    _defineProperty(this, "shouldIterate", true);
    _defineProperty(this, "timeoutId", 0);
    this.options = _objectSpread(_objectSpread({}, defaultPollingOptions), options);
    this.poll_intervalMs = this.options.poll_intervalMs;
  }
  return _createClass(PollingFunction, [{
    key: "execute",
    value: function () {
      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(executor) {
        var _this = this;
        var poll_maxAttempts;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              poll_maxAttempts = this.options.poll_maxAttempts;
              if (!(poll_maxAttempts === 0)) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return", this.fail(new PollingError('pollingMaxAttemptsExceeded', {
                attempts: this.attempt
              })));
            case 3:
              _context.prev = 3;
              // executor must explicitly call this.next() for triggering next iteration (pull)
              this.shouldIterate = false;
              _context.next = 7;
              return executor();
            case 7:
              if (this.shouldIterate) {
                _context.next = 9;
                break;
              }
              return _context.abrupt("return");
            case 9:
              if (!(this.attempt >= poll_maxAttempts)) {
                _context.next = 11;
                break;
              }
              return _context.abrupt("return", this.fail(new PollingError('pollingMaxAttemptsExceeded', {
                attempts: this.attempt
              })));
            case 11:
              this.poll_intervalMs = this.getIntervalMsForIteration(this.attempt);
              this.attempt++;
              this.timeoutId = window.setTimeout(function () {
                return _this.execute(executor);
              }, this.poll_intervalMs);
              _context.next = 19;
              break;
            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](3);
              this.fail(_context.t0);
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[3, 16]]);
      }));
      function execute(_x) {
        return _execute.apply(this, arguments);
      }
      return execute;
    }()
  }, {
    key: "fail",
    value: function fail(error) {
      var onError = this.onError;
      this.cancel();
      onError && onError(error);
    }
  }, {
    key: "getIntervalMsForIteration",
    value: function getIntervalMsForIteration(iteration) {
      var poll_intervalMs = this.options.poll_intervalMs;
      if (iteration === 1) {
        return poll_intervalMs;
      }
      for (var i = 2; i <= iteration; i++) {
        poll_intervalMs = poll_intervalMs * this.options.poll_backoffFactor;
      }
      return Math.min(Math.round(poll_intervalMs), this.options.poll_maxIntervalMs);
    }
  }, {
    key: "next",
    value: function next() {
      this.shouldIterate = true;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      window.clearTimeout(this.timeoutId);
      this.timeoutId = 0;
    }
  }]);
}();