import { type Auth } from '@atlaskit/media-core';
import { type MediaTraceContext } from '@atlaskit/media-common';
import { RequestError } from './errors';
import { type CreateUrlOptions, type RequestErrorReason, type RequestErrorMetadata, type RequestHeaders, type RequestMetadata, type RetryOptions } from './types';
export declare function waitPromise(timeout: number): Promise<void>;
export declare function isAbortedRequestError(err: any): boolean;
export declare function isFetchNetworkError(err: any): err is TypeError;
export declare function isRateLimitedError(error: Error | undefined): boolean;
export declare const extendTraceContext: (traceContext?: MediaTraceContext) => Required<MediaTraceContext> | undefined;
export declare const ZipkinHeaderKeys: {
    traceId: string;
    spanId: string;
    parentSpanId: string;
    sampled: string;
    flags: string;
};
export declare function mapAuthToRequestHeaders(auth?: Auth): RequestHeaders;
export declare function createUrl(url: string, { params, auth }: CreateUrlOptions): string;
export declare function extendHeaders(headers?: RequestHeaders, auth?: Auth, traceContext?: Required<MediaTraceContext>): RequestHeaders | undefined;
export declare function createMapResponseToJson(metadata: RequestMetadata): (response: Response) => Promise<any>;
export declare function createMapResponseToBlob(metadata: RequestMetadata): (response: Response) => Promise<Blob>;
export declare const defaultShouldRetryError: (err: any) => boolean;
export declare const DEFAULT_RETRY_OPTIONS: RetryOptions;
export declare function cloneRequestError(error: RequestError, extraMetadata: Partial<RequestErrorMetadata>): RequestError;
export declare function fetchRetry(functionToRetry: () => Promise<Response>, metadata: RequestMetadata, overwriteOptions?: Partial<RetryOptions>): Promise<Response>;
export declare function createRequestErrorReason(statusCode: number): RequestErrorReason;
export declare function createRequestErrorFromResponse(metadata: RequestErrorMetadata, response: Response): RequestError;
export declare function createProcessFetchResponse(metadata: RequestMetadata): (response: Response) => Response;
export declare function extractMediaHeaders(response: Response): {
    mediaRegion: string;
    mediaEnv: string;
};
