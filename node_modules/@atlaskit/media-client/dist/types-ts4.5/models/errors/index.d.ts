import type { ErrorFileState } from '@atlaskit/media-state';
import type { MediaClientError, MediaClientErrorAttributes, MediaClientErrorReason, MediaClientErrorMetadata } from './types';
export type { MediaClientError, MediaClientErrorReason, MediaClientErrorAttributes } from './types';
export { isMediaClientError, getMediaClientErrorReason } from './helpers';
/**
 * Base class for media errors
 */
export declare abstract class BaseMediaClientError<Reason extends MediaClientErrorReason, Metadata extends MediaClientErrorMetadata | undefined, InnerError extends Error | undefined, Attributes extends MediaClientErrorAttributes> extends Error implements MediaClientError<Attributes> {
    readonly reason: Reason;
    readonly metadata: Metadata;
    readonly innerError: InnerError;
    constructor(reason: Reason, metadata: Metadata, innerError: InnerError);
    abstract get attributes(): Attributes;
}
/** Generic Media Client Erorr. All errors extending BaseMediaClientError match CommonMediaClientError attributes. Used to deserialize ErrorFileState */
export declare class CommonMediaClientError extends BaseMediaClientError<MediaClientErrorReason, MediaClientErrorMetadata | undefined, Error | undefined, MediaClientErrorAttributes> {
    constructor(reason: MediaClientErrorReason, metadata?: MediaClientErrorMetadata, innerError?: Error);
    get attributes(): MediaClientErrorAttributes;
}
export declare function isCommonMediaClientError(error: any): error is BaseMediaClientError<MediaClientErrorReason, MediaClientErrorMetadata | undefined, Error | undefined, MediaClientErrorAttributes>;
/** Deserializer ErrorFileState -> CommonMediaClientError */
export declare const toCommonMediaClientError: (errorFileState: ErrorFileState) => CommonMediaClientError;
/** Serializer CommonMediaClientError -> ErrorFileState */
export declare const fromCommonMediaClientError: (id: string, occurrenceKey: string | undefined, error: CommonMediaClientError) => ErrorFileState;
