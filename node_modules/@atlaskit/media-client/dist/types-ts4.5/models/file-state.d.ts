import { type FileStatus as CommonFileStatus } from '@atlaskit/media-common';
import { type MediaStoreResponse } from '../client/media-store';
import { type MediaItemDetails, type MediaFile } from './media';
import { type FilePreview, type FileState, type ErrorFileState, type UploadingFileState, type ProcessingFileState, type ProcessedFileState, type ProcessingFailedState } from '@atlaskit/media-state';
export type FileStatus = CommonFileStatus;
export interface PreviewOptions {
}
export interface GetFileOptions {
    preview?: PreviewOptions;
    collectionName?: string;
    occurrenceKey?: string;
    includeHashForDuplicateFiles?: boolean;
    forceRefresh?: boolean;
}
export interface PreviewableFileState {
    preview: FilePreview | Promise<FilePreview>;
}
export type NonErrorFileState = Exclude<FileState, ErrorFileState>;
export declare const isUploadingFileState: (fileState: FileState) => fileState is UploadingFileState;
export declare const isProcessingFileState: (fileState: FileState) => fileState is ProcessingFileState;
export declare const isProcessedFileState: (fileState: FileState) => fileState is ProcessedFileState;
export declare const isErrorFileState: (fileState: FileState) => fileState is ErrorFileState;
export declare const isPreviewableFileState: (fileState: FileState) => fileState is (UploadingFileState | ProcessingFileState | ProcessedFileState | ProcessingFailedState) & PreviewableFileState;
export declare const isFinalFileState: (fileState: FileState) => fileState is ProcessedFileState | ErrorFileState | ProcessingFailedState;
export declare const isNonErrorFinalFileState: (fileState: FileState) => fileState is ProcessedFileState | ProcessingFailedState;
export declare const isImageRepresentationReady: (fileState: FileState) => boolean;
export declare const mapMediaFileToFileState: (mediaFile: MediaStoreResponse<MediaFile>) => FileState;
export declare const mapMediaItemToFileState: (id: string, item: MediaItemDetails) => FileState;
