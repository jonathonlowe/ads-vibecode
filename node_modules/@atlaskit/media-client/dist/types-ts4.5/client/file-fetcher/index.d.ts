import { type AuthProvider } from '@atlaskit/media-core';
import { type MediaFileArtifacts } from '@atlaskit/media-state';
import { MediaStore as MediaApi, type MediaStoreCopyFileWithTokenParams, type TouchedFiles, type TouchFileDescriptor } from '../media-store';
import { type GetFileOptions } from '../../models/file-state';
import { type MediaFile } from '../../models/media';
import { type UploadableFile, type UploadableFileUpfrontIds } from '../../uploader';
import { type UploadController } from '../../upload-controller';
import { type MediaSubscribable } from '../../utils/mediaSubscribable';
import { type Dimensions } from '../../utils/getDimensionsFromBlob';
import { type MediaTraceContext } from '@atlaskit/media-common';
import { type FilePreview, type FileState, type MediaStore } from '@atlaskit/media-state';
export type { FileFetcherErrorAttributes, FileFetcherErrorReason } from './error';
export { isFileFetcherError, FileFetcherError } from './error';
export interface CopySourceFile {
    id: string;
    collection?: string;
    authProvider?: AuthProvider;
}
export interface CopyDestination extends MediaStoreCopyFileWithTokenParams {
    authProvider?: AuthProvider;
    mediaStore?: MediaApi;
}
export interface CopyFileOptions {
    preview?: FilePreview | Promise<FilePreview>;
    mimeType?: string;
}
export type ExternalUploadPayload = {
    uploadableFileUpfrontIds: UploadableFileUpfrontIds;
    mimeType: string;
    dimensions: Dimensions;
};
export interface FileFetcher {
    getFileState(id: string, options?: GetFileOptions): MediaSubscribable;
    getArtifactURL(artifacts: MediaFileArtifacts, artifactName: keyof MediaFileArtifacts, collectionName?: string): Promise<string>;
    touchFiles(descriptors: TouchFileDescriptor[], collection?: string, traceContext?: MediaTraceContext): Promise<TouchedFiles>;
    upload(file: UploadableFile, controller?: UploadController, uploadableFileUpfrontIds?: UploadableFileUpfrontIds, traceContext?: MediaTraceContext): MediaSubscribable;
    uploadExternal(url: string, collection?: string, traceContext?: MediaTraceContext): Promise<ExternalUploadPayload>;
    downloadBinary(id: string, name?: string, collectionName?: string, traceContext?: MediaTraceContext): Promise<void>;
    getCurrentState(id: string, options?: GetFileOptions): Promise<FileState>;
    copyFile(source: CopySourceFile, destination: CopyDestination, options?: CopyFileOptions, traceContext?: MediaTraceContext): Promise<MediaFile>;
    getFileBinaryURL(id: string, collectionName?: string, maxAge?: number): Promise<string>;
    registerCopyIntent(id: string, collectionName?: string): Promise<void>;
}
export declare class FileFetcherImpl implements FileFetcher {
    private readonly mediaApi;
    private readonly store;
    private readonly dataloader;
    private readonly copyIntentRegisterationBatcher;
    constructor(mediaApi: MediaApi, store?: MediaStore);
    private getErrorFileState;
    private setFileState;
    getFileState(id: string, options?: GetFileOptions): MediaSubscribable;
    getCurrentState(id: string, options?: GetFileOptions): Promise<FileState>;
    getArtifactURL(artifacts: MediaFileArtifacts, artifactName: keyof MediaFileArtifacts, collectionName?: string): Promise<string>;
    getFileBinaryURL(id: string, collectionName?: string, maxAge?: number): Promise<string>;
    private createDownloadFileStream;
    touchFiles(descriptors: TouchFileDescriptor[], collection?: string, traceContext?: MediaTraceContext): Promise<TouchedFiles>;
    private generateUploadableFileUpfrontIds;
    uploadExternal(url: string, collection?: string, traceContext?: MediaTraceContext): Promise<ExternalUploadPayload>;
    private getUploadingFileStateBase;
    upload(file: UploadableFile, controller?: UploadController, uploadableFileUpfrontIds?: UploadableFileUpfrontIds, traceContext?: MediaTraceContext): MediaSubscribable;
    downloadBinary(id: string, name?: string, collectionName?: string, traceContext?: MediaTraceContext): Promise<void>;
    registerCopyIntent(id: string, collectionName?: string): Promise<void>;
    private copyFileWithToken;
    private copyFileWithIntent;
    copyFile(source: CopySourceFile, destination: CopyDestination, options?: CopyFileOptions, traceContext?: MediaTraceContext): Promise<MediaFile>;
}
