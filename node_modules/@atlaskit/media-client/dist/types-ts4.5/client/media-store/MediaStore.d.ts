import { type AuthContext, type MediaApiConfig, type Auth } from '@atlaskit/media-core';
import { type MediaTraceContext } from '@atlaskit/media-common';
import { type MediaFileArtifacts } from '@atlaskit/media-state';
import type { ItemsPayload, ImageMetadata, MediaStoreResponse, MediaStoreTouchFileParams, TouchFileDescriptor, MediaStoreTouchFileBody, RejectedTouchFile, MediaStoreRequestOptions, MediaStoreCreateFileFromUploadParams, MediaStoreCreateFileFromUploadBody, MediaStoreGetFileParams, MediaStoreGetFileImageParams, MediaStoreCopyFileWithTokenBody, MediaStoreCopyFileWithTokenParams, AppendChunksToUploadRequestBody, TouchedFiles, MediaApi, CopyFileParams } from './types';
import { type MediaFile, type MediaUpload } from '../../models/media';
import { ChunkHashAlgorithm } from '@atlaskit/media-core';
export declare class MediaStore implements MediaApi {
    private readonly config;
    private readonly _chunkHashAlgorithm;
    constructor(config: MediaApiConfig);
    removeCollectionFile(id: string, collectionName: string, occurrenceKey?: string, traceContext?: MediaTraceContext): Promise<void>;
    createUpload(createUpTo?: number, collectionName?: string, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<MediaUpload[]>>;
    uploadChunk(etag: string, blob: Blob, uploadId: string, partNumber: number, collectionName?: string, traceContext?: MediaTraceContext): Promise<void>;
    createFileFromUpload(body: MediaStoreCreateFileFromUploadBody, params?: MediaStoreCreateFileFromUploadParams, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<MediaFile>>;
    getRejectedResponseFromDescriptor(descriptor: TouchFileDescriptor, limit: number): RejectedTouchFile;
    touchFiles(body: MediaStoreTouchFileBody, params?: MediaStoreTouchFileParams, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<TouchedFiles>>;
    getFile(fileId: string, params?: MediaStoreGetFileParams, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<MediaFile>>;
    getFileImageURL(id: string, params?: MediaStoreGetFileImageParams): Promise<string>;
    getFileImageURLSync(id: string, params?: MediaStoreGetFileImageParams): string;
    private createFileImageURL;
    getFileBinary(id: string, collectionName?: string, abortController?: AbortController, maxAge?: number): Promise<Blob>;
    getFileBinaryURL(id: string, collectionName?: string, maxAge?: number): Promise<string>;
    getArtifactURL(artifacts: MediaFileArtifacts, artifactName: keyof MediaFileArtifacts, collectionName?: string): Promise<string>;
    getImage(id: string, params?: MediaStoreGetFileImageParams, controller?: AbortController, fetchMaxRes?: boolean, traceContext?: MediaTraceContext): Promise<Blob>;
    getItems(ids: string[], collectionName?: string, traceContext?: MediaTraceContext, includeHashForDuplicateFiles?: boolean): Promise<MediaStoreResponse<ItemsPayload>>;
    getImageMetadata(id: string, params?: MediaStoreGetFileImageParams, traceContext?: MediaTraceContext): Promise<{
        metadata: ImageMetadata;
    }>;
    appendChunksToUpload(uploadId: string, body: AppendChunksToUploadRequestBody, collectionName?: string, traceContext?: MediaTraceContext): Promise<void>;
    copyFileWithToken(body: MediaStoreCopyFileWithTokenBody, params: MediaStoreCopyFileWithTokenParams, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<MediaFile>>;
    copyFile(id: string, params: CopyFileParams, traceContext?: MediaTraceContext): Promise<MediaStoreResponse<MediaFile>>;
    registerCopyIntents(files: Array<{
        id: string;
        collection?: string;
    }>, traceContext?: MediaTraceContext, resolvedAuth?: Auth): Promise<void>;
    request(path: string, options?: MediaStoreRequestOptions, controller?: AbortController, useMediaCdn?: boolean): Promise<Response>;
    testUrl(url: string, options?: {
        traceContext?: MediaTraceContext;
    }): Promise<void>;
    resolveAuth: (authContext?: AuthContext) => Promise<Auth>;
    resolveInitialAuth: () => Auth;
    get chunkHashAlgorithm(): ChunkHashAlgorithm;
}
export declare const getMediaEnvironment: () => string | undefined;
export declare const getMediaRegion: () => string | undefined;
