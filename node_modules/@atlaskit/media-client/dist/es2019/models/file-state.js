export const isUploadingFileState = fileState => fileState.status === 'uploading';
export const isProcessingFileState = fileState => fileState.status === 'processing';
export const isProcessedFileState = fileState => fileState.status === 'processed';
export const isErrorFileState = fileState => fileState.status === 'error';
export const isPreviewableFileState = fileState => !isErrorFileState(fileState) && !!fileState.preview;
export const isFinalFileState = fileState => ['processed', 'failed-processing', 'error'].includes(fileState.status);
export const isNonErrorFinalFileState = fileState => ['processed', 'failed-processing'].includes(fileState.status);
export const isImageRepresentationReady = fileState => {
  switch (fileState.status) {
    case 'processing':
    case 'processed':
    case 'failed-processing':
      return !!(fileState.representations && fileState.representations.image);
    default:
      return false;
  }
};
export const mapMediaFileToFileState = mediaFile => {
  const {
    id,
    name,
    size,
    processingStatus,
    artifacts,
    mediaType,
    mimeType,
    representations,
    createdAt,
    metadataTraceContext,
    hash,
    abuseClassification
  } = mediaFile.data;
  const baseState = {
    id,
    name,
    size,
    mediaType,
    mimeType,
    artifacts,
    representations,
    createdAt,
    hash,
    metadataTraceContext,
    abuseClassification
  };
  switch (processingStatus) {
    case 'pending':
    case undefined:
      return {
        ...baseState,
        status: 'processing'
      };
    case 'succeeded':
      return {
        ...baseState,
        status: 'processed'
      };
    case 'failed':
      return {
        ...baseState,
        status: 'failed-processing'
      };
  }
};
export const mapMediaItemToFileState = (id, item) => {
  return mapMediaFileToFileState({
    data: {
      id,
      ...item
    }
  });
};