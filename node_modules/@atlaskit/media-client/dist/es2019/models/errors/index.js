export { isMediaClientError, getMediaClientErrorReason } from './helpers';

/**
 * Base class for media errors
 */
export class BaseMediaClientError extends Error
// TODO: Deprecate attributes getter https://product-fabric.atlassian.net/browse/CXP-4665
{
  constructor(reason, metadata, innerError) {
    super(reason);

    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    this.reason = reason;
    this.metadata = metadata;
    this.innerError = innerError;
    Object.setPrototypeOf(this, new.target.prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(this, new.target);
    }
  }

  // TODO: Deprecate attributes getter https://product-fabric.atlassian.net/browse/CXP-4665
}

// The only reason why this class exists is because BaseMediaClientError is abstract class, so it can't be used to deserialize ErrorFileState. We can refactor and simplify this later.
/** Generic Media Client Erorr. All errors extending BaseMediaClientError match CommonMediaClientError attributes. Used to deserialize ErrorFileState */
export class CommonMediaClientError extends BaseMediaClientError {
  constructor(reason, metadata, innerError) {
    super(reason, metadata, innerError);
  }
  get attributes() {
    return {
      reason: this.reason
    };
  }
}
export function isCommonMediaClientError(error) {
  if (!error) {
    return false;
  }
  // Check if the error is an instance of Error
  if (error instanceof CommonMediaClientError) {
    return true;
  }
  return typeof error.reason === 'string' && ('metadata' in error || error.metadata === undefined) && ('innerError' in error || error.innerError === undefined);
}

/** Deserializer ErrorFileState -> CommonMediaClientError */
export const toCommonMediaClientError = errorFileState => {
  var _errorFileState$detai;
  const error = (_errorFileState$detai = errorFileState.details) === null || _errorFileState$detai === void 0 ? void 0 : _errorFileState$detai.error;
  return new CommonMediaClientError((error === null || error === void 0 ? void 0 : error.reason) || 'unknown-reason', error.metadata, error.innerError);
};

/** Serializer CommonMediaClientError -> ErrorFileState */
export const fromCommonMediaClientError = (id, occurrenceKey, error) => {
  return {
    status: 'error',
    id,
    occurrenceKey,
    reason: error.reason,
    details: {
      /** Use this attr to translate back into CommonMediaClientError (toCommonMediaClientError) */
      error: {
        reason: error === null || error === void 0 ? void 0 : error.reason,
        metadata: error === null || error === void 0 ? void 0 : error.metadata,
        innerError: error === null || error === void 0 ? void 0 : error.innerError
      },
      // Legacy details
      ...(error === null || error === void 0 ? void 0 : error.attributes)
    },
    message: error === null || error === void 0 ? void 0 : error.message
  };
};