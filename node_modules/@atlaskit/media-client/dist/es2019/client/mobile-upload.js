import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { getMediaTypeFromMimeType } from '@atlaskit/media-common';
import { mediaStore } from '@atlaskit/media-state';
import { getFileStreamsCache } from '../file-streams-cache';
import { createFileDataloader } from '../utils/createFileDataLoader';
import { createServicesCache, createMobileUploadStateMachine, createMobileUploadService, createMobileFileStateSubject } from '../utils/mobileUpload';
export class MobileUploadImpl {
  constructor(mediaApi, store = mediaStore) {
    _defineProperty(this, "getErrorFileState", (error, id, occurrenceKey) => typeof error === 'string' ? {
      status: 'error',
      id,
      reason: error,
      occurrenceKey,
      message: error
    } : {
      status: 'error',
      id,
      reason: error === null || error === void 0 ? void 0 : error.reason,
      details: error === null || error === void 0 ? void 0 : error.attributes,
      occurrenceKey,
      message: error === null || error === void 0 ? void 0 : error.message
    });
    _defineProperty(this, "setFileState", (id, fileState) => {
      this.store.setState(state => {
        state.files[id] = fileState;
      });
    });
    this.store = store;
    this.dataloader = createFileDataloader(mediaApi);
    this.servicesCache = createServicesCache();
  }
  notifyUploadStart(event) {
    const {
      fileId,
      collectionName,
      occurrenceKey,
      fileName,
      fileSize,
      fileMimetype,
      preview,
      createdAt
    } = event;
    const mediaType = getMediaTypeFromMimeType(fileMimetype);
    const initialState = {
      status: 'uploading',
      id: fileId,
      occurrenceKey,
      name: fileName,
      size: fileSize,
      progress: 0,
      mediaType,
      mimeType: fileMimetype,
      preview,
      createdAt
    };
    const service = createMobileUploadService(createMobileUploadStateMachine(this.dataloader, initialState, collectionName));
    const subject = createMobileFileStateSubject(service);
    subject.subscribe({
      next: fileState => {
        this.setFileState(fileId, fileState);
      },
      error: err => {
        const errorFileState = this.getErrorFileState(err, fileId, occurrenceKey);
        this.setFileState(fileId, errorFileState);
      }
    });
    this.servicesCache.set(fileId, service);
    getFileStreamsCache().set(fileId, subject);
  }
  notifyUploadProgress(event) {
    const {
      fileId,
      progress
    } = event;
    const service = this.servicesCache.get(fileId);
    if (service) {
      service.send('UPLOAD_PROGRESS', {
        progress
      });
    }
  }
  notifyUploadEnd(event) {
    const {
      fileId
    } = event;
    const service = this.servicesCache.get(fileId);
    if (service) {
      service.send('UPLOAD_END');
    }
  }
  notifyUploadError(event) {
    const {
      fileId,
      message
    } = event;
    const service = this.servicesCache.get(fileId);
    if (service) {
      service.send('UPLOAD_ERROR', {
        message
      });
    }
  }
}