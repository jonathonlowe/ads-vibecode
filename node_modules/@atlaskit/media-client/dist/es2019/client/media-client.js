import { EventEmitter2 } from 'eventemitter2';
import { ChunkHashAlgorithm } from '@atlaskit/media-core';
import { MediaStore as MediaApi } from './media-store';
import { FileFetcherImpl } from './file-fetcher';
import { StargateClient } from './stargate-client';
import { mediaStore } from '@atlaskit/media-state';
export class MediaClient {
  // mobile upload is lazily loaded

  // Deprecated value introduced for backward compatibility with Context

  constructor(mediaClientConfig, store = mediaStore, mediaApi) {
    this.mediaClientConfig = mediaClientConfig;
    this.store = store;
    this.mediaStore = mediaApi !== null && mediaApi !== void 0 ? mediaApi : new MediaApi({
      authProvider: mediaClientConfig.authProvider,
      initialAuth: mediaClientConfig.initialAuth,
      chunkHashAlgorithm: mediaClientConfig.useSha256ForUploads ? ChunkHashAlgorithm.Sha256 : ChunkHashAlgorithm.Sha1,
      authProviderTimeout: mediaClientConfig.authProviderTimeoutMs
    });
    this.config = mediaClientConfig;
    this.file = new FileFetcherImpl(this.mediaStore, this.store);
    this.eventEmitter = new EventEmitter2();
    this.stargate = new StargateClient(mediaClientConfig.stargateBaseUrl);
  }

  /**
   * @internal
   */
  __DO_NOT_USE__getMediaStore() {
    return this.store;
  }
  getImage(id, params, controller, fetchMaxRes, traceContext) {
    return this.mediaStore.getImage(id, params, controller, fetchMaxRes, traceContext);
  }
  getImageUrl(id, params) {
    return this.mediaStore.getFileImageURL(id, params);
  }
  getImageUrlSync(id, params) {
    return this.mediaStore.getFileImageURLSync(id, params);
  }
  async getImageMetadata(id, params) {
    return (await this.mediaStore.getImageMetadata(id, params)).metadata;
  }
  async mobileUploadPromise() {
    if (this.mobileUpload) {
      return this.mobileUpload;
    }
    const module = await import( /* webpackChunkName: "@atlaskit-internal_media-client-mobile-upload" */'./mobile-upload');
    this.mobileUpload = new module.MobileUploadImpl(this.mediaStore, this.store);
    return this.mobileUpload;
  }
  async removeFileFromCollection(id, collectionName, occurrenceKey, traceContext) {
    await this.mediaStore.removeCollectionFile(id, collectionName, occurrenceKey, traceContext);
  }
  on(event, listener) {
    this.eventEmitter.on(event, listener);
  }
  off(event, listener) {
    this.eventEmitter.off(event, listener);
  }
  emit(event, payload) {
    return this.eventEmitter.emit(event, payload);
  }
}