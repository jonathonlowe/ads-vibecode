import { map } from 'rxjs/operators/map';
import { createMachine, interpret } from 'xstate';
import { isProcessingFileState } from '../../../models/file-state';
import { shouldFetchRemoteFileStates } from '../../shouldFetchRemoteFileStates';
import { createMobileDownloadFileStream } from '../helpers';
import { machineUploadingState } from './states/uploading';
import { machineProcessingState } from './states/processing';
import { machineProcessedState } from './states/processed';
import { machineProcessingFailedState } from './states/processingFailed';
import { machineErrorState } from './states/error';
export const createMobileUploadStateMachine = (dataloader, initialState, collectionName) => createMachine({
  // Initial state
  initial: initialState.status,
  // Context
  context: {
    currentFileState: initialState
  },
  // State definitions
  states: {
    uploading: machineUploadingState,
    processing: machineProcessingState,
    processed: machineProcessedState,
    processingFailed: machineProcessingFailedState,
    error: machineErrorState
  }
}, {
  services: {
    shouldFetchRemoteFileStates: async ctx => {
      const {
        currentFileState
      } = ctx;
      if (isProcessingFileState(currentFileState)) {
        const {
          mediaType,
          mimeType,
          preview
        } = currentFileState;
        return shouldFetchRemoteFileStates(mediaType, mimeType, preview);
      }
      return false;
    },
    fetchRemoteFileStates: ctx => createMobileDownloadFileStream(dataloader, ctx.currentFileState.id, collectionName, ctx.currentFileState.occurrenceKey).pipe(map(fileState => ({
      type: 'REMOTE_FILESTATE_RESULT',
      fileState
    })))
  }
});
export function createMobileUploadService(machine) {
  return interpret(machine);
}