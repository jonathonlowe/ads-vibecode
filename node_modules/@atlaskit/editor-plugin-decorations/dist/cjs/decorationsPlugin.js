"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorationsPlugin = void 0;
var _main = _interopRequireWildcard(require("./pm-plugins/main"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Decorations plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
var decorationsPlugin = exports.decorationsPlugin = function decorationsPlugin() {
  return {
    name: 'decorations',
    pmPlugins: function pmPlugins() {
      return [{
        name: 'decorationPlugin',
        plugin: function plugin() {
          return (0, _main.default)();
        }
      }];
    },
    actions: {
      hoverDecoration: _main.hoverDecoration,
      removeDecoration: _main.removeDecoration
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return {
          decoration: undefined
        };
      }
      return _main.decorationStateKey.getState(editorState);
    }
  };
};