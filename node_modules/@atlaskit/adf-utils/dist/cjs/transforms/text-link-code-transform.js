"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformTextLinkCodeMarks = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _traverse = require("../traverse/traverse");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var hasLinkAndCodeMarks = function hasLinkAndCodeMarks(node) {
  var _node$marks;
  var marks = (_node$marks = node.marks) === null || _node$marks === void 0 ? void 0 : _node$marks.map(function (mark) {
    return mark.type;
  });
  return (marks === null || marks === void 0 ? void 0 : marks.includes('link')) && (marks === null || marks === void 0 ? void 0 : marks.includes('code'));
};
var removeCodeMarks = function removeCodeMarks(node) {
  if (node.marks) {
    return _objectSpread(_objectSpread({}, node), {}, {
      marks: node.marks.filter(function (mark) {
        return mark.type !== 'code';
      })
    });
  }
  return node;
};

// See: HOT-97965 https://product-fabric.atlassian.net/browse/ED-14400
// We declared in code mark spec that links and marks should not co-exist on
// text nodes. This util strips code marks from bad text nodes and preserves links.
var transformTextLinkCodeMarks = exports.transformTextLinkCodeMarks = function transformTextLinkCodeMarks(adf) {
  var isTransformed = false;
  var transformedAdf = (0, _traverse.traverse)(adf, {
    text: function text(node) {
      if (hasLinkAndCodeMarks(node)) {
        isTransformed = true;
        return removeCodeMarks(node);
      }
    }
  });
  return {
    transformedAdf: transformedAdf,
    isTransformed: isTransformed
  };
};