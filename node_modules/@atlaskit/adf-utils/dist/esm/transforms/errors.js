import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/** NodeNestingTransformError  */
export var NodeNestingTransformError = /*#__PURE__*/function (_Error) {
  /**
   * @param message - Error message - Do not use any UGC in this message
   */
  function NodeNestingTransformError(message) {
    var _this;
    _classCallCheck(this, NodeNestingTransformError);
    _this = _callSuper(this, NodeNestingTransformError, [message]);
    _this.name = 'NodeNestingTransformError';
    return _this;
  }
  _inherits(NodeNestingTransformError, _Error);
  return _createClass(NodeNestingTransformError);
}( /*#__PURE__*/_wrapNativeSuper(Error));