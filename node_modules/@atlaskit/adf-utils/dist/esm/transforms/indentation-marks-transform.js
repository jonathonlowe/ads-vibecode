import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { traverse } from '../traverse/traverse';
var hasChildHeadingWithIndentation = function hasChildHeadingWithIndentation(node) {
  var _node$content$some, _node$content;
  return (_node$content$some = (_node$content = node.content) === null || _node$content === void 0 ? void 0 : _node$content.some(function (childNode) {
    var _childNode$marks;
    return (childNode === null || childNode === void 0 ? void 0 : childNode.type) === 'heading' && (childNode === null || childNode === void 0 || (_childNode$marks = childNode.marks) === null || _childNode$marks === void 0 ? void 0 : _childNode$marks.some(function (mark) {
      return mark.type === 'indentation';
    }));
  })) !== null && _node$content$some !== void 0 ? _node$content$some : false;
};
var removeIndentationFromHeadings = function removeIndentationFromHeadings(node) {
  var _node$content2;
  return _objectSpread(_objectSpread({}, node), {}, {
    content: (_node$content2 = node.content) === null || _node$content2 === void 0 ? void 0 : _node$content2.map(function (childNode) {
      if ((childNode === null || childNode === void 0 ? void 0 : childNode.type) === 'heading') {
        var _childNode$marks2;
        return _objectSpread(_objectSpread({}, childNode), {}, {
          marks: (_childNode$marks2 = childNode.marks) === null || _childNode$marks2 === void 0 ? void 0 : _childNode$marks2.filter(function (mark) {
            return mark.type !== 'indentation';
          })
        });
      }
      return childNode;
    })
  });
};
export var transformIndentationMarks = function transformIndentationMarks(adf) {
  var isTransformed = false;
  var transformedAdf = traverse(adf, {
    tableCell: function tableCell(node) {
      if (hasChildHeadingWithIndentation(node)) {
        isTransformed = true;
        return removeIndentationFromHeadings(node);
      }
    },
    tableHeader: function tableHeader(node) {
      if (hasChildHeadingWithIndentation(node)) {
        isTransformed = true;
        return removeIndentationFromHeadings(node);
      }
    }
  });
  return {
    transformedAdf: transformedAdf,
    isTransformed: isTransformed
  };
};