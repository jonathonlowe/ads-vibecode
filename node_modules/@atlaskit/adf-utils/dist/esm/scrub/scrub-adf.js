import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { traverse } from '../traverse/traverse';
import { scrubAttrs, scrubStr, scrubLink } from './scrub-content';
import { defaultNodeReplacements } from './default-node-replacements';
import { defaultValueReplacements } from './default-value-replacements';
export default (function (adf) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var nodeReplacements = _objectSpread(_objectSpread({}, defaultNodeReplacements), options.nodeReplacements);
  var valueReplacements = _objectSpread(_objectSpread({}, defaultValueReplacements), options.valueReplacements);
  return traverse(adf, {
    any: function any(node, parent) {
      var replacement = nodeReplacements[node.type];
      if (typeof replacement === 'function') {
        var result = replacement(node, {
          parent: parent,
          valueReplacements: valueReplacements
        });
        if (result !== false) {
          return result;
        }
      }

      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var updatedNode = {};
      Object.entries(node).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        if (['version', 'type', 'content', 'marks'].includes(key)) {
          updatedNode[key] = value;
        }
      });
      if (node.text && node.marks) {
        var _node$marks;
        updatedNode.marks = scrubLink((_node$marks = node.marks) !== null && _node$marks !== void 0 ? _node$marks : [], {
          valueReplacements: valueReplacements
        });
      }
      if (node.text) {
        updatedNode.text = scrubStr(node.text);
      }
      if (node.attrs) {
        updatedNode.attrs = scrubAttrs(node.type, node.attrs);
      }
      return updatedNode;
    }
  });
});