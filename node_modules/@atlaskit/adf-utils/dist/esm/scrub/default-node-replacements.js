import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { scrubAttrs } from './scrub-content';
var card = function card(node, _ref) {
  var _node$attrs;
  var valueReplacements = _ref.valueReplacements;
  return {
    type: node.type,
    attrs: _objectSpread(_objectSpread({}, node.attrs || {}), {}, {
      url: valueReplacements.href((_node$attrs = node.attrs) === null || _node$attrs === void 0 ? void 0 : _node$attrs.url)
    })
  };
};
var mediaParent = function mediaParent(node) {
  var _node$content;
  return {
    type: node.type,
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    attrs: node.attrs ? scrubAttrs(node.type, node.attrs) : undefined,
    content: (_node$content = node.content) === null || _node$content === void 0 ? void 0 : _node$content.filter(function (c) {
      return (c === null || c === void 0 ? void 0 : c.type) === 'media';
    })
  };
};
export var defaultNodeReplacements = {
  emoji: function emoji() {
    return {
      type: 'emoji',
      attrs: {
        shortName: ':blue_star:',
        id: 'atlassian-blue_star',
        text: ':blue_star:'
      }
    };
  },
  date: function date() {
    return {
      type: 'date',
      attrs: {
        timestamp: new Date('2020-01-01').getTime()
      }
    };
  },
  mention: function mention() {
    return {
      type: 'mention',
      attrs: {
        id: 'error:NotFound',
        text: '@Nemo',
        accessLevel: 'CONTAINER'
      }
    };
  },
  inlineCard: card,
  blockCard: card,
  mediaSingle: mediaParent,
  mediaGroup: mediaParent,
  media: function media(node, _ref2) {
    var _parent$node, _node$attrs$width, _node$attrs2, _node$attrs$height, _node$attrs3;
    var parent = _ref2.parent;
    var defaults = ((_parent$node = parent.node) === null || _parent$node === void 0 ? void 0 : _parent$node.type) === 'mediaSingle' ? {
      width: 600,
      height: 400
    } : {
      width: 150,
      height: 125
    };
    var width = (_node$attrs$width = (_node$attrs2 = node.attrs) === null || _node$attrs2 === void 0 ? void 0 : _node$attrs2.width) !== null && _node$attrs$width !== void 0 ? _node$attrs$width : defaults.width;
    var height = (_node$attrs$height = (_node$attrs3 = node.attrs) === null || _node$attrs3 === void 0 ? void 0 : _node$attrs3.height) !== null && _node$attrs$height !== void 0 ? _node$attrs$height : defaults.height;
    return {
      type: 'media',
      attrs: _objectSpread(_objectSpread({}, scrubAttrs('media', node.attrs)), {}, {
        type: 'external',
        url: "https://dummyimage.com/".concat(width, "x").concat(height, "/f4f5f7/a5adba")
      })
    };
  }
};