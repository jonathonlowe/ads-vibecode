import React, { useCallback, useEffect, useRef } from 'react';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
export const SelectionExtensionComponentWrapper = ({
  api,
  editorAnalyticsAPI
}) => {
  var _selectionExtensionSt4;
  const componentRef = useRef();
  const {
    selectionExtensionState,
    editorViewModeState
  } = useSharedPluginState(api, ['selectionExtension', 'editorViewMode']);

  // Closed from active extension
  const handleOnClose = useCallback(() => {
    api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : api.selectionExtension.commands.clearActiveExtension());
    // Clears reference to active component
    componentRef.current = undefined;
    if (editorAnalyticsAPI) {
      editorAnalyticsAPI.fireAnalyticsEvent({
        action: ACTION.CLOSED,
        actionSubject: ACTION_SUBJECT.EDITOR_PLUGIN_SELECTION_EXTENSION,
        actionSubjectId: ACTION_SUBJECT_ID.EDITOR_PLUGIN_SELECTION_EXTENSION_COMPONENT,
        eventType: EVENT_TYPE.TRACK
      });
    }
  }, [editorAnalyticsAPI, api]);

  // Closed from editor page mode change
  useEffect(() => {
    if (componentRef.current !== undefined) {
      handleOnClose();
    }
  }, [handleOnClose, editorViewModeState]);

  // Viewed analytics event for component mount
  useEffect(() => {
    var _selectionExtensionSt, _selectionExtensionSt2;
    if (componentRef.current !== (selectionExtensionState === null || selectionExtensionState === void 0 ? void 0 : (_selectionExtensionSt = selectionExtensionState.activeExtension) === null || _selectionExtensionSt === void 0 ? void 0 : _selectionExtensionSt.extension.component) && (selectionExtensionState === null || selectionExtensionState === void 0 ? void 0 : (_selectionExtensionSt2 = selectionExtensionState.activeExtension) === null || _selectionExtensionSt2 === void 0 ? void 0 : _selectionExtensionSt2.extension.component) !== undefined) {
      var _selectionExtensionSt3;
      if (editorAnalyticsAPI) {
        editorAnalyticsAPI.fireAnalyticsEvent({
          action: ACTION.VIEWED,
          actionSubject: ACTION_SUBJECT.EDITOR_PLUGIN_SELECTION_EXTENSION,
          actionSubjectId: ACTION_SUBJECT_ID.EDITOR_PLUGIN_SELECTION_EXTENSION_COMPONENT,
          eventType: EVENT_TYPE.TRACK
        });
      }
      // Sets reference to active component
      componentRef.current = selectionExtensionState === null || selectionExtensionState === void 0 ? void 0 : (_selectionExtensionSt3 = selectionExtensionState.activeExtension) === null || _selectionExtensionSt3 === void 0 ? void 0 : _selectionExtensionSt3.extension.component;
    }
  }, [selectionExtensionState, editorAnalyticsAPI]);
  if (!(selectionExtensionState !== null && selectionExtensionState !== void 0 && (_selectionExtensionSt4 = selectionExtensionState.activeExtension) !== null && _selectionExtensionSt4 !== void 0 && _selectionExtensionSt4.extension.component)) {
    return null;
  }
  const ExtensionComponent = selectionExtensionState.activeExtension.extension.component;
  return /*#__PURE__*/React.createElement(ExtensionComponent, {
    closeExtension: handleOnClose,
    selection: selectionExtensionState.activeExtension.selection
  });
};