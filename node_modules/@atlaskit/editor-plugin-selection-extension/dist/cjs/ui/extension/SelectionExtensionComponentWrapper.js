"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectionExtensionComponentWrapper = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _hooks = require("@atlaskit/editor-common/hooks");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var SelectionExtensionComponentWrapper = exports.SelectionExtensionComponentWrapper = function SelectionExtensionComponentWrapper(_ref) {
  var _selectionExtensionSt4;
  var api = _ref.api,
    editorAnalyticsAPI = _ref.editorAnalyticsAPI;
  var componentRef = (0, _react.useRef)();
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['selectionExtension', 'editorViewMode']),
    selectionExtensionState = _useSharedPluginState.selectionExtensionState,
    editorViewModeState = _useSharedPluginState.editorViewModeState;

  // Closed from active extension
  var handleOnClose = (0, _react.useCallback)(function () {
    api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 ? void 0 : api.selectionExtension.commands.clearActiveExtension());
    // Clears reference to active component
    componentRef.current = undefined;
    if (editorAnalyticsAPI) {
      editorAnalyticsAPI.fireAnalyticsEvent({
        action: _analytics.ACTION.CLOSED,
        actionSubject: _analytics.ACTION_SUBJECT.EDITOR_PLUGIN_SELECTION_EXTENSION,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.EDITOR_PLUGIN_SELECTION_EXTENSION_COMPONENT,
        eventType: _analytics.EVENT_TYPE.TRACK
      });
    }
  }, [editorAnalyticsAPI, api]);

  // Closed from editor page mode change
  (0, _react.useEffect)(function () {
    if (componentRef.current !== undefined) {
      handleOnClose();
    }
  }, [handleOnClose, editorViewModeState]);

  // Viewed analytics event for component mount
  (0, _react.useEffect)(function () {
    var _selectionExtensionSt, _selectionExtensionSt2;
    if (componentRef.current !== (selectionExtensionState === null || selectionExtensionState === void 0 || (_selectionExtensionSt = selectionExtensionState.activeExtension) === null || _selectionExtensionSt === void 0 ? void 0 : _selectionExtensionSt.extension.component) && (selectionExtensionState === null || selectionExtensionState === void 0 || (_selectionExtensionSt2 = selectionExtensionState.activeExtension) === null || _selectionExtensionSt2 === void 0 ? void 0 : _selectionExtensionSt2.extension.component) !== undefined) {
      var _selectionExtensionSt3;
      if (editorAnalyticsAPI) {
        editorAnalyticsAPI.fireAnalyticsEvent({
          action: _analytics.ACTION.VIEWED,
          actionSubject: _analytics.ACTION_SUBJECT.EDITOR_PLUGIN_SELECTION_EXTENSION,
          actionSubjectId: _analytics.ACTION_SUBJECT_ID.EDITOR_PLUGIN_SELECTION_EXTENSION_COMPONENT,
          eventType: _analytics.EVENT_TYPE.TRACK
        });
      }
      // Sets reference to active component
      componentRef.current = selectionExtensionState === null || selectionExtensionState === void 0 || (_selectionExtensionSt3 = selectionExtensionState.activeExtension) === null || _selectionExtensionSt3 === void 0 ? void 0 : _selectionExtensionSt3.extension.component;
    }
  }, [selectionExtensionState, editorAnalyticsAPI]);
  if (!(selectionExtensionState !== null && selectionExtensionState !== void 0 && (_selectionExtensionSt4 = selectionExtensionState.activeExtension) !== null && _selectionExtensionSt4 !== void 0 && _selectionExtensionSt4.extension.component)) {
    return null;
  }
  var ExtensionComponent = selectionExtensionState.activeExtension.extension.component;
  return /*#__PURE__*/_react.default.createElement(ExtensionComponent, {
    closeExtension: handleOnClose,
    selection: selectionExtensionState.activeExtension.selection
  });
};