import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx
 */

import React, { useMemo } from 'react';
import { injectIntl } from 'react-intl-next';
import { v4 as uuid } from 'uuid';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { SelectionExtensionDropdownMenu } from './SelectionExtensionDropdownMenu';
var transformExtensionsToItems = function transformExtensionsToItems(extensions) {
  var extensionToItems = extensions.map(function (extension) {
    return {
      key: extension.id,
      content: extension.name,
      value: {
        name: extension.id
      }
    };
  });
  return [{
    items: extensionToItems
  }];
};
export var SelectionExtensionItemsComponent = function SelectionExtensionItemsComponent(_ref) {
  var extensions = _ref.extensions,
    onExtensionClick = _ref.onExtensionClick,
    editorAnalyticsAPI = _ref.editorAnalyticsAPI;
  var extensionsWithIdentifier = useMemo(function () {
    return extensions.map(function (extension) {
      return _objectSpread(_objectSpread({}, extension), {}, {
        id: uuid()
      });
    });
  }, [extensions]);
  var items = useMemo(function () {
    return transformExtensionsToItems(extensionsWithIdentifier);
  }, [extensionsWithIdentifier]);
  var handleOnItemActivated = function handleOnItemActivated(_ref2) {
    var item = _ref2.item;
    var extension = extensionsWithIdentifier.find(function (ext) {
      return ext.id === item.value.name;
    });
    if (extension) {
      onExtensionClick(extension);
      if (editorAnalyticsAPI) {
        editorAnalyticsAPI.fireAnalyticsEvent({
          action: ACTION.CLICKED,
          actionSubject: ACTION_SUBJECT.BUTTON,
          actionSubjectId: ACTION_SUBJECT_ID.EDITOR_PLUGIN_SELECTION_EXTENSION_ITEM,
          eventType: EVENT_TYPE.TRACK
        });
      }
    }
  };
  return /*#__PURE__*/React.createElement(SelectionExtensionDropdownMenu, {
    editorAnalyticsAPI: editorAnalyticsAPI,
    items: items,
    onItemActivated: handleOnItemActivated
  });
};
export var SelectionExtensionItems = injectIntl(SelectionExtensionItemsComponent);