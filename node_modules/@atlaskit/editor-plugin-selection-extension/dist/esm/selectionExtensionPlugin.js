import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from 'react';
import { selectionExtensionMessages } from '@atlaskit/editor-common/messages';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { createPlugin, selectionExtensionPluginKey } from './pm-plugins/main';
import { SelectionExtensionComponentWrapper } from './ui/extension/SelectionExtensionComponentWrapper';
import { getBoundingBoxFromSelection } from './ui/getBoundingBoxFromSelection';
export var selectionExtensionPlugin = function selectionExtensionPlugin(_ref) {
  var api = _ref.api,
    config = _ref.config;
  var editorViewRef = {
    current: null
  };
  return {
    name: 'selectionExtension',
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return null;
      }
      return selectionExtensionPluginKey.getState(editorState) || null;
    },
    commands: {
      setActiveExtension: function setActiveExtension(extension) {
        return function (_ref2) {
          var tr = _ref2.tr;
          return tr.setMeta(selectionExtensionPluginKey, {
            type: 'set-active-extension',
            extension: extension
          });
        };
      },
      clearActiveExtension: function clearActiveExtension() {
        return function (_ref3) {
          var tr = _ref3.tr;
          return tr.setMeta(selectionExtensionPluginKey, {
            type: 'clear-active-extension'
          });
        };
      }
    },
    contentComponent: function contentComponent(_ref4) {
      var _api$analytics;
      var editorView = _ref4.editorView;
      return /*#__PURE__*/React.createElement(SelectionExtensionComponentWrapper, {
        editorView: editorView,
        api: api,
        editorAnalyticsAPI: api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions
      });
    },
    pluginsOptions: {
      selectionToolbar: function selectionToolbar(state, intl) {
        var _api$editorViewMode;
        if (!config) {
          return;
        }
        var pageModes = config.pageModes,
          extensions = config.extensions;

        /**
         * Extensions Config Validation
         *
         * Check whether plugin contains any selection extensions
         */
        if (!(extensions !== null && extensions !== void 0 && extensions.firstParty) && !(extensions !== null && extensions !== void 0 && extensions.external)) {
          return;
        }

        /**
         * Content Mode Validation
         *
         * Check if pageModes is provided and matches against current content mode
         *
         * TODO: This will eventially transition from mode to contentMode
         */
        var editorContentMode = api === null || api === void 0 || (_api$editorViewMode = api.editorViewMode) === null || _api$editorViewMode === void 0 || (_api$editorViewMode = _api$editorViewMode.sharedState.currentState()) === null || _api$editorViewMode === void 0 ? void 0 : _api$editorViewMode.mode;
        if (pageModes) {
          // Early Exit: consumer has set pageModes but editorContentMode is undefined
          if (!editorContentMode) {
            return;
          }

          // Simplify traversion of pageModes which can be string or array of strings
          var showOnModesCollection = Array.isArray(pageModes) ? pageModes : [pageModes];

          // Early Exit: consumer has set pageModes but current editorContentMode is not in the collection
          if (!showOnModesCollection.includes(editorContentMode)) {
            return;
          }
        }

        /**
         * Active Extension
         *
         * Check if there is an active extension and hide the selection extension dropdown
         */
        var selectionExtensionState = selectionExtensionPluginKey.getState(state);
        if (selectionExtensionState !== null && selectionExtensionState !== void 0 && selectionExtensionState.activeExtension) {
          return;
        }
        var getSelection = function getSelection(view) {
          var currentSelection = state.selection;
          var from = currentSelection.from,
            to = currentSelection.to;
          var text = state.doc.textBetween(from, to, '\n');
          var coords = getBoundingBoxFromSelection(view, from, to);
          return {
            text: text,
            from: from,
            to: to,
            coords: coords
          };
        };
        var handleOnExtensionClick = function handleOnExtensionClick(view) {
          return function (extension) {
            var selection = getSelection(view);
            if (extension.component) {
              api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 ? void 0 : api.selectionExtension.commands.setActiveExtension({
                extension: extension,
                selection: selection
              }));
            }
            if (extension.onClick) {
              extension.onClick({
                selection: selection
              });
            }
          };
        };
        var convertExtensionToDropdownMenuItem = function convertExtensionToDropdownMenuItem(extension, rank) {
          var _extension$isDisabled;
          return {
            title: extension.name,
            icon: extension.icon ? /*#__PURE__*/React.createElement(extension.icon, {
              label: ''
            }) : undefined,
            disabled: extension === null || extension === void 0 || (_extension$isDisabled = extension.isDisabled) === null || _extension$isDisabled === void 0 ? void 0 : _extension$isDisabled.call(extension, {
              selection: editorViewRef.current ? getSelection(editorViewRef.current) : undefined
            }),
            rank: rank,
            onClick: function onClick() {
              editorViewRef.current && handleOnExtensionClick(editorViewRef.current)(extension);
              return true;
            }
          };
        };
        var getFirstPartyExtensions = function getFirstPartyExtensions(extensions) {
          return extensions.map(function (ext) {
            return convertExtensionToDropdownMenuItem(ext, 30);
          });
        };

        /**
         * Add a heading to the external extensions
         */
        var getExternalExtensions = function getExternalExtensions(extensions) {
          var externalExtensions = [];
          if (extensions !== null && extensions !== void 0 && extensions.length) {
            externalExtensions = extensions.map(function (ext, index) {
              return convertExtensionToDropdownMenuItem(ext);
            });
            var externalExtensionsHeading = {
              type: 'overflow-dropdown-heading',
              title: intl.formatMessage(selectionExtensionMessages.externalExtensionsHeading)
            };
            externalExtensions.unshift(externalExtensionsHeading);
          }
          return externalExtensions;
        };
        var groupedExtensionsArray = [].concat(_toConsumableArray(getFirstPartyExtensions(extensions.firstParty || [])), _toConsumableArray(getExternalExtensions(extensions.external || [])));
        var overflowMenu = {
          type: 'overflow-dropdown',
          dropdownWidth: 240,
          supportsViewMode: true,
          options: groupedExtensionsArray
        };
        return {
          isToolbarAbove: true,
          items: [{
            type: 'separator',
            fullHeight: true,
            supportsViewMode: true
          }, overflowMenu],
          rank: -6
        };
      }
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'selectionExtension',
        plugin: function plugin() {
          return createPlugin();
        }
      }, {
        name: 'selectionExtensionGetEditorViewReferencePlugin',
        plugin: function plugin() {
          return new SafePlugin({
            view: function view(editorView) {
              editorViewRef.current = editorView;
              return {
                destroy: function destroy() {
                  editorViewRef.current = null;
                }
              };
            }
          });
        }
      }];
    }
  };
};