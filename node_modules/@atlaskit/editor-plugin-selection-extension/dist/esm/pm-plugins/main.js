import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { SelectionExtensionActionTypes } from '../types';
export var selectionExtensionPluginKey = new PluginKey('selectionExtensionPlugin');
export var createPlugin = function createPlugin() {
  return new SafePlugin({
    key: selectionExtensionPluginKey,
    state: {
      init: function init() {
        return {
          activeExtension: undefined
        };
      },
      apply: function apply(tr, pluginState) {
        var meta = tr.getMeta(selectionExtensionPluginKey);
        switch (meta === null || meta === void 0 ? void 0 : meta.type) {
          case SelectionExtensionActionTypes.SET_ACTIVE_EXTENSION:
            return _objectSpread(_objectSpread({}, pluginState), {}, {
              activeExtension: meta.extension
            });
          case SelectionExtensionActionTypes.CLEAR_ACTIVE_EXTENSION:
            return _objectSpread(_objectSpread({}, pluginState), {}, {
              activeExtension: undefined
            });
        }
        return pluginState;
      }
    }
  });
};