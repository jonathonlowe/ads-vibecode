"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeDataProvider = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * This is the base class for creating a node data provider for an editor plugin.
 *
 * ## Usage
 *
 * ### Create a provider
 *
 * @example
 * ```ts
 * class EmojiNodeDataProvider extends NodeDataProvider<
 *  { attrs: EmojiAttributes },
 * { resolvedData: string }
 * > {
 *   constructor({ existingCache }?: { existingCache: Record<string, { resolvedData: string }> }) {
 *     super({ existingCache, nodeName: 'emoji' });
 *   }
 *   nodeToKey(node: { attrs: EmojiAttributes }): string {
 *     return `${node.attrs.shortName}-${node.attrs.text}-${node.attrs.id}`;
 *   }
 *   resolve(node: { attrs: EmojiAttributes }, _?: { signal: AbortSignal }) {
 *     return Promise.resolve({ resolvedData: 'resolved' });
 *   }
 * }
 * ```
 *
 * ### Use the provider
 *
 * @example
 * ```ts
 * const emojiNodeDataProvider = new EmojiNodeDataProvider();
 * ```
 *
 * ### Caching
 *
 * @see {@link buildCaches} for more information on building caches.
 *
 * #### Load an existing provider with a cache
 *
 * @example
 * ```
 * await buildCaches({
 *  adf: docFromSomewhere,
 *  nodeDataProviders: [emojiNodeDataProvider],
 *  signal: AbortSignal.timeout(5000),
 * });
 * emojiNodeDataProvider // { 'key': 'value' }
 * ```
 *
 * ### Load an new provider with an existing cache
 *
 * @example
 * ```
 * const provider1 = new ExampleNodeDataProvider();
 * await buildCaches({adf, nodeDataProviders: [provider1]})
 * provider1.cache // { 'key': 'value' }
 *
 * const provider2 = new ExampleNodeDataProvider({existingCache: provider1.cache});
 * ```
 */
var NodeDataProvider = exports.NodeDataProvider = /*#__PURE__*/function () {
  /**
   * This takes a node and returns a key that can be used to cache the result of the resolve function.
   */

  /**
   * This returns the information required to render a node.
   *
   * If unresolvable, this method will throw an error.
   *
   * If signal is aborted, this method will return undefined.
   */

  /**
   * The adf node name this provider is responsible for.
   */

  function NodeDataProvider(_ref) {
    var _ref$existingCache = _ref.existingCache,
      existingCache = _ref$existingCache === void 0 ? {} : _ref$existingCache,
      nodeName = _ref.nodeName,
      nodeToKey = _ref.nodeToKey,
      resolve = _ref.resolve;
    (0, _classCallCheck2.default)(this, NodeDataProvider);
    /**
     * This is added to ease building types
     */
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, _defineProperty2.default)(this, "__node", {});
    (0, _defineProperty2.default)(this, "pending", {});
    this.__cache = existingCache;
    this.nodeName = nodeName;
    this.nodeToKey = nodeToKey;
    this.resolve = resolve;
  }

  /**
   * Updates the providers cache.
   *
   * Useful in scenarios such as SSR where the cache is built on the server and then passed to the client.
   *
   * Avoids the need to provide the cache to the constructor (to allow decoupling creation of node data providers from cache building),
   * and allow for caching to be managed at a group level across multiple providers.
   *
   * This is not expected to be used by consumers, for internal consumption examples;
   * @see {@link buildCaches}
   *
   */
  return (0, _createClass2.default)(NodeDataProvider, [{
    key: "updateCache",
    value: function updateCache(cache, options) {
      switch (options.strategy) {
        case 'merge-override':
          this.__cache = _objectSpread(_objectSpread({}, this.__cache), cache);
          return;
        case 'replace':
          this.__cache = cache;
          return;
      }
    }

    /**
     * This is the cache for the provider.
     */
  }, {
    key: "cache",
    get: function get() {
      return this.__cache;
    }
  }, {
    key: "get",
    value: function get(node, _) {
      var _this = this;
      var key = this.nodeToKey(node);
      var cached = this.cache[key];
      if (cached) {
        return cached;
      }

      // Get could be called from a variety of sources;
      // - a Node Data Provider
      // - a cache build
      // - something else
      //
      // We want to avoid triggering multiple resolves for the same node -- so we keep track of pending requests
      // and share them across any overlapping gets.
      //
      // When a get is cancelled -- we only want to cancel the shared resolve if all signals are aborted
      // so we keep track of all signals that are not aborted.

      var originalSignal = (_ === null || _ === void 0 ? void 0 : _.signal) || new AbortController().signal;
      if (!this.pending[key]) {
        var abortController = new AbortController();
        this.pending[key] = {
          // eslint-disable-next-line no-async-promise-executor
          resolving: new Promise( /*#__PURE__*/function () {
            var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(res, rej) {
              var result;
              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return _this.resolve(node, {
                      signal: abortController.signal
                    }).catch(function (res) {
                      return res(undefined);
                    });
                  case 3:
                    result = _context.sent;
                    res(result);
                    _context.next = 10;
                    break;
                  case 7:
                    _context.prev = 7;
                    _context.t0 = _context["catch"](0);
                    res(undefined);
                  case 10:
                  case "end":
                    return _context.stop();
                }
              }, _callee, null, [[0, 7]]);
            }));
            return function (_x, _x2) {
              return _ref2.apply(this, arguments);
            };
          }()),
          abortController: abortController,
          activeSignals: [originalSignal]
        };
      }
      var handleAbort = function handleAbort() {
        _this.pending[key].activeSignals = _this.pending[key].activeSignals.filter(function (activeSignal) {
          return activeSignal !== originalSignal;
        });
        if (_this.pending[key].activeSignals.length === 0) {
          // abort the resolution if all signals are aborted
          _this.pending[key].abortController.abort();
        }
      };

      // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
      originalSignal === null || originalSignal === void 0 || originalSignal.addEventListener('abort', handleAbort);
      this.pending[key].resolving.then(function (resolvedValue) {
        if (resolvedValue) {
          _this.cache[key] = resolvedValue;
        }
        // eslint-disable-next-line @repo/internal/dom-events/no-unsafe-event-listeners
        originalSignal === null || originalSignal === void 0 || originalSignal.removeEventListener('abort', handleAbort);
        return resolvedValue;
      });
      return this.pending[key].resolving;
    }
  }]);
}(); // The purpose of this type is to ensure that either a DocNode or a PMNode is passed in
// to the provider.
// It is not opinionated about which nodes are used, so `any` is used here to allow
// compatibility with both DocNodes and PMNodes.