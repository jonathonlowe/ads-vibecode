"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContentNodeDataProviders = ContentNodeDataProviders;
Object.defineProperty(exports, "__testOnly_resetGlobalNdpCachesContext", {
  enumerable: true,
  get: function get() {
    return _globalNdpCaches._resetGlobalNdpCachesContext;
  }
});
exports.useContentNodeDataProviders = useContentNodeDataProviders;
var _react = _interopRequireDefault(require("react"));
var _globalNdpCaches = require("./_global-ndp-caches");
var _internalContext = require("./_internal-context");
/* eslint-disable @atlaskit/editor/no-re-export */
// Entry file

var ContentNodeDataProvidersContext = /*#__PURE__*/_react.default.createContext(undefined);

/**
 *
 * @example
 * ```tsx
 * <ContentNodeDataProviders
 * 	contentType="page" contentId="9001"
 * 	adf={doc}
 * 	placeholder={<Spinner />}
 * 	existingProvidersCache={ssrProvidersCache}
 * 	getNodeDataProviders={getPageNodeDataProviders}
 * 	onCacheWarmed={trackCacheWarmed}
 * >
 * 	 <Editor />
 * </ContentNodeDataProviders>
 * ```
 */
function ContentNodeDataProviders(props) {
  var contentNodeDataProviders = (0, _internalContext.useContentNodeDataProvidersSetup)({
    contentType: props.contentType,
    contentId: props.contentId
  }, {
    adfToUpdateWith: props.adf,
    existingProvidersCache: props.existingProvidersCache,
    getNodeDataProviders: props.getNodeDataProviders,
    onCacheWarmed: props.onCacheWarmed
  });
  return /*#__PURE__*/_react.default.createElement(ContentNodeDataProvidersContext.Provider, {
    value: contentNodeDataProviders
  }, props.children);
}
function useContentNodeDataProviders() {
  var contentNodeDataProvidersContext = _react.default.useContext(ContentNodeDataProvidersContext);
  return contentNodeDataProvidersContext;
}