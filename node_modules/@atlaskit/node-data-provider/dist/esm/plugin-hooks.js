import _typeof from "@babel/runtime/helpers/typeof";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect, useMemo, useState } from 'react';
/**
 *
 *
 * This hook is intended to simplify accessing data via the one tick providers.
 *
 * ```ts
 * const value = useNodeDataProviderGet(emojiProvider, emojiNode);
 *
 * if (value.state === 'loading') {
 *   return <Loading />;
 * }
 * if (value.state === 'failed') {
 *  return <Fallback />;
 * }
 * return <Emoji properties=(value.result) />
 * ```
 */
export function useNodeDataProviderGet(options) {
  var getResult = useMemo(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  function () {
    return options.provider.get(options.node);
  }, [options.provider, options.node]);
  var _useState = useState(getResult !== undefined && !isPromise(getResult) ? getResult : undefined),
    _useState2 = _slicedToArray(_useState, 2),
    resolved = _useState2[0],
    setResolved = _useState2[1];
  useEffect(function () {
    if (!isPromise(getResult)) {
      return;
    }
    var cancelled = false;
    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _resolved;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return getResult;
          case 3:
            _resolved = _context.sent;
            if (!cancelled) {
              if (_resolved === undefined) {
                setResolved('error');
              } else {
                setResolved(_resolved);
              }
            }
            _context.next = 10;
            break;
          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            setResolved('error');
          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 7]]);
    }))();
    return function () {
      cancelled = true;
    };
  }, [getResult]);
  if (resolved === undefined) {
    return {
      state: 'loading',
      result: undefined
    };
  }
  if (resolved === 'error') {
    return {
      state: 'failed',
      result: undefined
    };
  }
  return {
    state: 'resolved',
    result: resolved
  };
}
function isPromise(obj) {
  return !!obj && (_typeof(obj) === 'object' || typeof obj === 'function') &&
  // @ts-ignore
  typeof obj.then === 'function';
}