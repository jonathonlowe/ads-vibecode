import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { NodeDataProvider } from '../index';
export function createEmojiNodeDataProvider(_ref) {
  var emojiProvider = _ref.emojiProvider,
    existingCache = _ref.existingCache;
  var emojiNodeDataProvider = new NodeDataProvider({
    existingCache: existingCache,
    nodeName: 'emoji',
    nodeToKey: function nodeToKey(node) {
      var key = "".concat(node.attrs.id, "-").concat(node.attrs.shortName, "-").concat(node.attrs.text);
      return key;
    },
    resolve: function resolve(node, _resolveOptions) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var emojiDescriptionWithVariations;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return emojiProvider;
            case 2:
              _context.next = 4;
              return _context.sent.fetchByEmojiId({
                id: node.attrs.id,
                shortName: node.attrs.shortName,
                fallback: node.attrs.text
              }, true);
            case 4:
              emojiDescriptionWithVariations = _context.sent;
              if (emojiDescriptionWithVariations) {
                _context.next = 7;
                break;
              }
              throw new Error('Could not resolve emoji');
            case 7:
              return _context.abrupt("return", emojiDescriptionWithVariations);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
    }
  });
  return emojiNodeDataProvider;
}