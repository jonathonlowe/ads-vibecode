import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
export var LRUCache = /*#__PURE__*/function () {
  function LRUCache(capacity) {
    _classCallCheck(this, LRUCache);
    this.capacity = capacity;
    this.cache = new Map();
  }
  return _createClass(LRUCache, [{
    key: "get",
    value: function get(key) {
      if (!this.cache.has(key)) {
        return undefined;
      }

      // Move the used key to the end to mark it as most recently used
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var value = this.cache.get(key);
      this.cache.delete(key);
      this.cache.set(key, value);
      return value;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      // Check if the key already exists and delete it to update its position
      if (this.cache.has(key)) {
        this.cache.delete(key);
      } else if (this.cache.size >= this.capacity) {
        // Remove the first (least recently used) cache item if we're at capacity
        var firstKey = this.cache.keys().next().value;
        this.cache.delete(firstKey);
      }
      this.cache.set(key, value);
    }
  }]);
}();