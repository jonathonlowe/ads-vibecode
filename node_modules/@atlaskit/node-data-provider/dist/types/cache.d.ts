import type { DocNode } from '@atlaskit/adf-schema';
import { type AnyNodeDataProvider } from './internal-types';
import { type EmojiNodeDataProvider } from './providers/emoji';
export type NodeDataProvidersCache = {
    [nodeName: string]: Record<string, any>;
};
export type NodeDataProviders = {
    emoji: EmojiNodeDataProvider;
    [nodeName: string]: AnyNodeDataProvider;
};
/**
 * Builds {@link NodeDataProvider}s caches for a document.
 *
 * It will traverse the document and call the resolve method for each node.
 * When all promises are resolved, NodeDataProviders will have their caches populated.
 *
 * The providers will then be ready for use with an Editor.
 *
 * To limit the time spent building the cache, a signal can be provided to abort the request.
 *
 * ## Usage
 *
 * @example
 * ```ts
 * buildCaches({
 *  adf: doc,
 *  nodeDataProviders: { emoji: emojiNodeDataProvider, ... },
 *  signal: AbortSignal.timeout(5000),
 * });
 * ```
 *
 * ### Using caches
 *
 * To make use of a cache in another provider (ie. for a cache created on the server), you can retrieve the cache
 * from the provider and pass it to the new provider.
 *
 * @example
 * ```tsx
 * // SSR env
 * const ssrProvidersCaches = await buildCaches({adf, nodeDataProviders: { emoji }})
 *
 * // Client env (providersCaches is the cache from the server)
 * <ContentNodeDataProviders ... existingProvidersCache={ssrProvidersCaches} />
 * ```
 *
 * *Note:* On the client - buildCache is not expected to be used directly.
 *
 * @see {@link ContentNodeDataProviders} for expected client usage.
 */
export declare function buildCaches({ adf, nodeDataProviders, signal, existingProvidersCache, }: {
    adf?: DocNode;
    /**
     * Providers to build caches for
     */
    nodeDataProviders: NodeDataProviders;
    /**
     * Signal to abort cache building -- the caches will be built up to the point of abort.
     */
    signal?: AbortSignal;
    existingProvidersCache?: NodeDataProvidersCache;
}): Promise<NodeDataProvidersCache>;
