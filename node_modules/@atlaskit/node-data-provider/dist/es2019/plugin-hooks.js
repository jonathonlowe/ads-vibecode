import { useEffect, useMemo, useState } from 'react';
/**
 *
 *
 * This hook is intended to simplify accessing data via the one tick providers.
 *
 * ```ts
 * const value = useNodeDataProviderGet(emojiProvider, emojiNode);
 *
 * if (value.state === 'loading') {
 *   return <Loading />;
 * }
 * if (value.state === 'failed') {
 *  return <Fallback />;
 * }
 * return <Emoji properties=(value.result) />
 * ```
 */
export function useNodeDataProviderGet(options) {
  const getResult = useMemo(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  () => options.provider.get(options.node), [options.provider, options.node]);
  const [resolved, setResolved] = useState(getResult !== undefined && !isPromise(getResult) ? getResult : undefined);
  useEffect(() => {
    if (!isPromise(getResult)) {
      return;
    }
    let cancelled = false;
    (async function () {
      try {
        const resolved = await getResult;
        if (!cancelled) {
          if (resolved === undefined) {
            setResolved('error');
          } else {
            setResolved(resolved);
          }
        }
      } catch {
        setResolved('error');
      }
    })();
    return () => {
      cancelled = true;
    };
  }, [getResult]);
  if (resolved === undefined) {
    return {
      state: 'loading',
      result: undefined
    };
  }
  if (resolved === 'error') {
    return {
      state: 'failed',
      result: undefined
    };
  }
  return {
    state: 'resolved',
    result: resolved
  };
}
function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') &&
  // @ts-ignore
  typeof obj.then === 'function';
}