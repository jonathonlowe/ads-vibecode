/* Status.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Status = void 0;
require("./Status.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _compiled = _interopRequireDefault(require("@atlaskit/lozenge/compiled"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _analytics = require("./analytics");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var colorToLozengeAppearanceMap = {
  neutral: 'default',
  purple: 'new',
  blue: 'inprogress',
  red: 'removed',
  yellow: 'moved',
  green: 'success'
};
var DEFAULT_APPEARANCE = 'default';
var MAX_WIDTH = 200;

/**
 * This is to account for a bug in android chromium and should be removed
 * when the editor fixes its focus handling with respect to Status.
 *
 * See DSP-7701 for additional context.
 */
var inlineBlockStyles = null;

// eg. Version/4.0 Chrome/95.0.4638.50
var isAndroidChromium = typeof window !== 'undefined' && /Version\/.* Chrome\/.*/.test(window.navigator.userAgent);
var StatusInternal = /*#__PURE__*/function (_PureComponent) {
  function StatusInternal() {
    var _this;
    (0, _classCallCheck2.default)(this, StatusInternal);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, StatusInternal, [].concat(args));
    (0, _defineProperty2.default)(_this, "hoverStartTime", 0);
    (0, _defineProperty2.default)(_this, "handleMouseEnter", function (_e) {
      _this.hoverStartTime = Date.now();
    });
    (0, _defineProperty2.default)(_this, "handleMouseLeave", function (_e) {
      var onHover = _this.props.onHover;
      var delay = Date.now() - _this.hoverStartTime;
      if (delay >= _constants.ANALYTICS_HOVER_DELAY && onHover) {
        onHover();
      }
      _this.hoverStartTime = 0;
    });
    return _this;
  }
  (0, _inherits2.default)(StatusInternal, _PureComponent);
  return (0, _createClass2.default)(StatusInternal, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.hoverStartTime = 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        text = _this$props.text,
        color = _this$props.color,
        style = _this$props.style,
        role = _this$props.role,
        onClick = _this$props.onClick,
        isBold = _this$props.isBold;
      if (text.trim().length === 0) {
        return null;
      }
      var appearance = colorToLozengeAppearanceMap[color] || DEFAULT_APPEARANCE;
      // Note: ommitted data-local-id attribute to avoid copying/pasting the same localId
      return /*#__PURE__*/React.createElement("span", {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        className: (0, _runtime.ax)([isAndroidChromium && "_d0dzdf4r _1k0l7vkz _1frxnkob", "status-lozenge-span"]),
        onClick: onClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        "data-node-type": "status",
        "data-color": color,
        "data-style": style,
        role: role
      }, /*#__PURE__*/React.createElement(_compiled.default, {
        appearance: appearance,
        maxWidth: MAX_WIDTH,
        isBold: isBold
      }, text));
    }
  }]);
}(_react.PureComponent);
(0, _defineProperty2.default)(StatusInternal, "displayName", 'StatusInternal');
var Status = exports.Status = (0, _analyticsNext.withAnalyticsEvents)({
  onClick: function onClick(createEvent, props) {
    var localId = props.localId;
    return (0, _analytics.createStatusAnalyticsAndFire)(createEvent)({
      action: 'clicked',
      actionSubject: 'statusLozenge',
      attributes: {
        localId: localId
      }
    });
  },
  onHover: function onHover(createEvent, props) {
    var localId = props.localId;
    return (0, _analytics.createStatusAnalyticsAndFire)(createEvent)({
      action: 'hovered',
      actionSubject: 'statusLozenge',
      attributes: {
        localId: localId
      }
    });
  }
})(StatusInternal);