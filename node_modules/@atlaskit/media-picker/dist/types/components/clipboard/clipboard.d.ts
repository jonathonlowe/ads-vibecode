import React from 'react';
import { type CreateUIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type MediaFeatureFlags } from '@atlaskit/media-common';
import { LocalUploadComponentReact, type LocalUploadComponentBaseProps } from '../localUploadReact';
import { type LocalFileWithSource, type UploadService } from '../../service/types';
import { type ClipboardConfig } from '../../types';
export declare const getFilesFromClipboard: (files: FileList) => File[];
export interface ClipboardOwnProps {
    config: ClipboardConfig;
}
export type ClipboardProps = LocalUploadComponentBaseProps & {
    config: ClipboardConfig;
};
declare class ClipboardImpl {
    private readonly uploadService;
    private container?;
    private onPaste?;
    private readonly createAnalyticsEvent?;
    featureFlags?: MediaFeatureFlags | undefined;
    static instances: ClipboardImpl[];
    constructor(uploadService: UploadService, container?: HTMLElement | undefined, onPaste?: ((event: ClipboardEvent) => boolean | undefined) | undefined, createAnalyticsEvent?: CreateUIAnalyticsEvent | undefined, featureFlags?: MediaFeatureFlags | undefined);
    static get latestInstance(): ClipboardImpl | undefined;
    activate(): void;
    deactivate(): void;
    onFilesPasted(files: LocalFileWithSource[]): void;
    private fireAnalyticsEvent;
    static legacyHandleEvent: (event: ClipboardEvent) => void;
    private handleEvent;
}
export declare class ClipboardBase extends LocalUploadComponentReact<ClipboardProps> {
    clipboard: ClipboardImpl;
    constructor(props: ClipboardProps);
    static defaultProps: {
        config: ClipboardConfig;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: ClipboardProps): void;
    componentWillUnmount(): void;
    render(): React.JSX.Element;
}
export default ClipboardBase;
export declare const Clipboard: React.ForwardRefExoticComponent<Omit<Pick<Omit<{
    mediaClient: import("@atlaskit/media-client").MediaClient;
    config: import("../types").LocalUploadConfig;
    onUploadsStart?: ((payload: import("../../types").UploadsStartEventPayload) => void) | undefined;
    onPreviewUpdate?: ((payload: import("../../types").UploadPreviewUpdateEventPayload) => void) | undefined;
    onEnd?: ((payload: import("../../types").UploadEndEventPayload) => void) | undefined;
    onError?: ((payload: import("../../types").UploadErrorEventPayload) => void) | undefined;
    featureFlags?: MediaFeatureFlags | undefined;
} & {
    config: ClipboardConfig;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "mediaClient" | "onUploadsStart" | "onPreviewUpdate" | "onEnd" | "onError" | "featureFlags"> & {
    config?: (import("../types").LocalUploadConfig & ClipboardConfig) | undefined;
} & {} & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
