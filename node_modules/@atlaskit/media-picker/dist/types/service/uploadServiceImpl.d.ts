import { type MediaClient } from '@atlaskit/media-client';
import { type FileEmptyData, type MediaFile, type UploadParams } from '../types';
import { type UploadRejectionData } from '../types';
import { type UploadService, type UploadServiceEventListener, type UploadServiceEventPayloadTypes } from './types';
import { LocalFileSource, type LocalFileWithSource } from '../service/types';
import { type MediaTraceContext } from '@atlaskit/media-common';
export interface CancellableFileUpload {
    mediaFile: MediaFile;
    file: File;
    source: LocalFileSource;
    cancel?: () => void;
}
export declare class UploadServiceImpl implements UploadService {
    private readonly tenantMediaClient;
    private tenantUploadParams;
    private readonly shouldCopyFileToRecents;
    private readonly maxUploadBatchSize;
    private readonly userMediaClient?;
    private readonly emitter;
    private cancellableFilesUploads;
    private fileRejectionHandler?;
    private fileEmptyHandler?;
    constructor(tenantMediaClient: MediaClient, tenantUploadParams: UploadParams, shouldCopyFileToRecents: boolean, maxUploadBatchSize?: number);
    setUploadParams(uploadParams: UploadParams): void;
    private createUploadController;
    addFiles(files: File[]): void;
    addFile(file: File, replaceFileId?: string): void;
    addFilesWithSource(files: LocalFileWithSource[], traceContext?: MediaTraceContext): Promise<void>;
    isCancellableFileUpload(fileUpload: null | CancellableFileUpload): fileUpload is CancellableFileUpload;
    cancel(id?: string): void;
    on<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    off<E extends keyof UploadServiceEventPayloadTypes>(event: E, listener: UploadServiceEventListener<E>): void;
    private addFilesAndUpload;
    private readonly emit;
    private emitPreviews;
    private getMediaTypeFromFile;
    private releaseCancellableFile;
    private readonly onFileSuccess;
    private readonly onFileError;
    onFileEmpty(handler: (fileEmptyData: FileEmptyData) => void): void;
    onFileRejection(handler: (rejectionData: UploadRejectionData) => void): void;
}
