import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { GenericEventEmitter } from '../util/eventEmitter';
export var UploadComponent = /*#__PURE__*/function (_ref) {
  function UploadComponent() {
    _classCallCheck(this, UploadComponent);
    return _callSuper(this, UploadComponent, arguments);
  }
  _inherits(UploadComponent, _ref);
  return _createClass(UploadComponent, [{
    key: "emitPluginItemsInserted",
    value: function emitPluginItemsInserted(selectedPluginItems) {
      var payload = selectedPluginItems.map(function (item) {
        return {
          pluginName: item.serviceName,
          pluginFile: {
            id: item.id,
            metadata: item.metadata
          }
        };
      });
      this.emit('plugin-items-inserted', payload);
    }
  }, {
    key: "emitUploadsStart",
    value: function emitUploadsStart(files, traceContext) {
      this.emit('uploads-start', {
        files: files,
        traceContext: traceContext
      });
    }
  }, {
    key: "emitUploadPreviewUpdate",
    value: function emitUploadPreviewUpdate(file, preview) {
      this.emit('upload-preview-update', {
        file: file,
        preview: preview
      });
    }
  }, {
    key: "emitUploadEnd",
    value: function emitUploadEnd(file, traceContext) {
      this.emit('upload-end', {
        file: file,
        traceContext: traceContext
      });
    }
  }, {
    key: "emitUploadError",
    value: function emitUploadError(fileId, error, traceContext) {
      this.emit('upload-error', {
        fileId: fileId,
        error: error,
        traceContext: traceContext
      });
    }
  }]);
}(GenericEventEmitter);