import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
export var DropzoneLoader = /*#__PURE__*/function (_React$PureComponent) {
  function DropzoneLoader() {
    var _this;
    _classCallCheck(this, DropzoneLoader);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, DropzoneLoader, [].concat(args));
    _defineProperty(_this, "state", {
      Dropzone: DropzoneLoader.Dropzone,
      MediaPickerErrorBoundary: DropzoneLoader.MediaPickerErrorBoundary
    });
    return _this;
  }
  _inherits(DropzoneLoader, _React$PureComponent);
  return _createClass(DropzoneLoader, [{
    key: "UNSAFE_componentWillMount",
    value: function () {
      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$Promise$all, _yield$Promise$all2, mediaClient, dropzoneModule, mediaPickerErrorBoundaryModule;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(!this.state.Dropzone || !this.state.MediaPickerErrorBoundary)) {
                _context.next = 16;
                break;
              }
              _context.prev = 1;
              _context.next = 4;
              return Promise.all([import( /* webpackChunkName: "@atlaskit-internal_media-client-react" */'@atlaskit/media-client-react'), import( /* webpackChunkName: "@atlaskit-internal_media-dropzone" */'./dropzone'), import( /* webpackChunkName: "@atlaskit-internal_media-picker-error-boundary" */'../media-picker-analytics-error-boundary')]);
            case 4:
              _yield$Promise$all = _context.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
              mediaClient = _yield$Promise$all2[0];
              dropzoneModule = _yield$Promise$all2[1];
              mediaPickerErrorBoundaryModule = _yield$Promise$all2[2];
              // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
              DropzoneLoader.Dropzone = mediaClient.withMediaClient(dropzoneModule.Dropzone);
              DropzoneLoader.MediaPickerErrorBoundary = mediaPickerErrorBoundaryModule.default;
              this.setState({
                Dropzone: DropzoneLoader.Dropzone,
                MediaPickerErrorBoundary: DropzoneLoader.MediaPickerErrorBoundary
              });
              _context.next = 16;
              break;
            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](1);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 14]]);
      }));
      function UNSAFE_componentWillMount() {
        return _UNSAFE_componentWillMount.apply(this, arguments);
      }
      return UNSAFE_componentWillMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
        Dropzone = _this$state.Dropzone,
        MediaPickerErrorBoundary = _this$state.MediaPickerErrorBoundary;
      if (!Dropzone || !MediaPickerErrorBoundary) {
        return null;
      }
      return /*#__PURE__*/React.createElement(MediaPickerErrorBoundary, null, /*#__PURE__*/React.createElement(Dropzone, this.props));
    }
  }]);
}(React.PureComponent);
_defineProperty(DropzoneLoader, "displayName", 'AsyncDropzone');