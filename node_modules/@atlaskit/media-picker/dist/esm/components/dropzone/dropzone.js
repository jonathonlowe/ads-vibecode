import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ANALYTICS_MEDIA_CHANNEL, withMediaAnalyticsContext } from '@atlaskit/media-common';
import { LocalUploadComponentReact } from '../localUploadReact';
import { getPackageAttributes } from '../../util/analytics';
import ErrorFlagGroup from '../errorFlagGroup/ErrorFlagGroup';
function dragContainsFiles(event) {
  if (!event.dataTransfer) {
    return false;
  }
  var types = event.dataTransfer.types;
  return Array.from(types).indexOf('Files') > -1;
}
var COMPONENT_NAME = 'dropzone';
export var DropzoneBase = /*#__PURE__*/function (_LocalUploadComponent) {
  function DropzoneBase(props) {
    var _this;
    _classCallCheck(this, DropzoneBase);
    _this = _callSuper(this, DropzoneBase, [props, COMPONENT_NAME]);
    _defineProperty(_this, "uiActive", false);
    _defineProperty(_this, "addContainerListeners", function (container) {
      var target = container !== null && container !== void 0 ? container : _this.getContainer();
      // TODO: migrate this file to Pragmatic drag and drop
      /* eslint-disable @atlaskit/design-system/no-direct-use-of-web-platform-drag-and-drop */
      target.addEventListener('dragover', _this.onDragOver, false);
      target.addEventListener('dragleave', _this.onDragLeave, false);
      target.addEventListener('drop', _this.onFileDropped);
      /* eslint-enable @atlaskit/design-system/no-direct-use-of-web-platform-drag-and-drop */
    });
    _defineProperty(_this, "removeContainerListeners", function (container) {
      var target = container !== null && container !== void 0 ? container : _this.getContainer();
      target.removeEventListener('dragover', _this.onDragOver, false);
      target.removeEventListener('dragleave', _this.onDragLeave, false);
      target.removeEventListener('drop', _this.onFileDropped);
    });
    _defineProperty(_this, "onDragOver", function (event) {
      event.preventDefault();
      if (event.dataTransfer && dragContainsFiles(event)) {
        var dataTransfer = event.dataTransfer;
        var allowed;
        try {
          allowed = dataTransfer.effectAllowed;
        } catch (e) {} // the error is expected in IE11

        dataTransfer.dropEffect = 'move' === allowed || 'linkMove' === allowed ? 'move' : 'copy';
        var length = _this.getDraggedItemsLength(dataTransfer);
        // [EDM-1636]: needed in order to make multiple dropzones in the page to work
        event.stopPropagation();
        _this.emitDragOver({
          length: length
        });
      }
    });
    _defineProperty(_this, "onDragLeave", function (e) {
      if (e.dataTransfer) {
        e.preventDefault();
        var length = 0;
        if (dragContainsFiles(e)) {
          var dataTransfer = e.dataTransfer;
          length = _this.getDraggedItemsLength(dataTransfer);
        }
        _this.emitDragLeave({
          length: length
        });
      }
    });
    _defineProperty(_this, "onFileDropped", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dragEvent) {
        var files;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (dragEvent.dataTransfer) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              dragEvent.preventDefault();
              dragEvent.stopPropagation();
              // refreshes uploadParams as only set once in parent constructor
              _this.setUploadParams(_this.props.config.uploadParams);
              _this.onDrop(dragEvent);
              files = Array.from(dragEvent.dataTransfer.files);
              _this.uploadService.addFiles(files);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    _defineProperty(_this, "onDrop", function (e) {
      if (e.dataTransfer && dragContainsFiles(e)) {
        var dataTransfer = e.dataTransfer;
        var fileCount = _this.getDraggedItemsLength(dataTransfer);
        _this.sendAnalyticsAndEmitDragLeave(fileCount);
      }
    });
    _defineProperty(_this, "sendAnalyticsAndEmitDragLeave", function (fileCount) {
      _this.fireAnalyticsEvent('droppedInto', fileCount);
      if (_this.props.onDrop) {
        _this.props.onDrop();
      }
      _this.emitDragLeave({
        length: fileCount
      });
    });
    return _this;
  }
  _inherits(DropzoneBase, _LocalUploadComponent);
  return _createClass(DropzoneBase, [{
    key: "getContainer",
    value: function getContainer() {
      var container = this.props.config.container;
      return container || document.body;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var onCancelFn = this.props.onCancelFn;
      this.addContainerListeners(this.getContainer());
      if (onCancelFn) {
        onCancelFn(this.cancel);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeContainerListeners(this.getContainer());
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var newContainer = nextProps.config.container;
      var oldContainer = this.props.config.container;
      if (newContainer !== oldContainer) {
        this.removeContainerListeners(oldContainer);
        this.addContainerListeners(newContainer);
      }
    }
  }, {
    key: "getDraggedItemsLength",
    value:
    // Cross-browser way of getting dragged items length, we prioritize "items" if present
    // https://www.w3.org/TR/html51/editing.html#the-datatransfer-interface
    // This method is used on 'dragover' and we have no way to retrieve FileSystemFileEntry,
    // which contains info about if the dropped item is a file or directory. That info is only
    // available on 'drop'
    function getDraggedItemsLength(dataTransfer) {
      if (dataTransfer.items) {
        var items = Array.from(dataTransfer.items);
        return items.filter(function (i) {
          return i.kind === 'file';
        }).length;
      }
      // This is required for IE11
      return dataTransfer.files.length;
    }
  }, {
    key: "emitDragOver",
    value: function emitDragOver(payload) {
      if (!this.uiActive) {
        var onDragEnter = this.props.onDragEnter;
        this.uiActive = true;
        this.fireAnalyticsEvent('draggedInto', payload.length);
        if (onDragEnter) {
          onDragEnter(payload);
        }
      }
    }
  }, {
    key: "emitDragLeave",
    value: function emitDragLeave(payload) {
      var _this2 = this;
      if (this.uiActive) {
        this.uiActive = false;
        /*
            when drag over child elements, container will issue dragleave and then dragover immediately.
            The 50ms timeout will prevent from issuing that "false" dragleave event
            */
        window.setTimeout(function () {
          if (!_this2.uiActive) {
            var onDragLeave = _this2.props.onDragLeave;
            _this2.fireAnalyticsEvent('draggedOut', payload.length);
            if (onDragLeave) {
              onDragLeave(payload);
            }
          }
        }, 50);
      }
    }
  }, {
    key: "fireAnalyticsEvent",
    value: function fireAnalyticsEvent(action, fileCount) {
      var createAnalyticsEvent = this.props.createAnalyticsEvent;
      if (createAnalyticsEvent) {
        var payload = {
          eventType: 'ui',
          actionSubject: 'dropzone',
          action: action,
          attributes: {
            fileCount: fileCount
          }
        };
        var analyticsEvent = createAnalyticsEvent(payload);
        analyticsEvent.fire(ANALYTICS_MEDIA_CHANNEL);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(ErrorFlagGroup, {
        flagData: this.state.errorFlags,
        onFlagDismissed: this.dismissErrorFlag
      });
    }
  }]);
}(LocalUploadComponentReact);
export default DropzoneBase;
export var Dropzone = withMediaAnalyticsContext(getPackageAttributes(COMPONENT_NAME))(withAnalyticsEvents()(DropzoneBase));