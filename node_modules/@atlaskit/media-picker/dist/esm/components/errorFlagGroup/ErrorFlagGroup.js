import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { AutoDismissFlag, FlagGroup } from '@atlaskit/flag';
import FailIcon from '@atlaskit/icon/core/migration/cross-circle';
import { R300 } from '@atlaskit/theme/colors';
import { errorFlagMessages } from './messages';
import { injectIntl, IntlProvider, useIntl } from 'react-intl-next';
var defaultOptions = {
  style: 'unit',
  unitDisplay: 'short',
  minimumFractionDigits: 2
};
var fileSizeFormatters = {
  kilobyte: new Intl.NumberFormat('en', _objectSpread(_objectSpread({}, defaultOptions), {}, {
    unit: 'kilobyte'
  })),
  megabyte: new Intl.NumberFormat('en', _objectSpread(_objectSpread({}, defaultOptions), {}, {
    unit: 'megabyte'
  })),
  gigabyte: new Intl.NumberFormat('en', _objectSpread(_objectSpread({}, defaultOptions), {}, {
    unit: 'gigabyte'
  }))
};
var formatFileSize = function formatFileSize(size) {
  var formattedSize;
  if (size < 1000000) {
    formattedSize = size / 1000;
    return fileSizeFormatters.kilobyte.format(formattedSize);
  } else if (size >= 1000000 && size < 1000000000) {
    formattedSize = size / 1000000;
    return fileSizeFormatters.megabyte.format(formattedSize);
  } else {
    formattedSize = size / 1000000000;
    return fileSizeFormatters.gigabyte.format(formattedSize);
  }
};
var FlagGroupContent = function FlagGroupContent(_ref) {
  var flagData = _ref.flagData,
    onFlagDismissed = _ref.onFlagDismissed;
  var intl = useIntl();
  return /*#__PURE__*/React.createElement(FlagGroup, {
    onDismissed: onFlagDismissed
  }, flagData.map(function (data, i) {
    return /*#__PURE__*/React.createElement(AutoDismissFlag, {
      id: i,
      icon: /*#__PURE__*/React.createElement(FailIcon, {
        color: "var(--ds-icon-danger, ".concat(R300, ")"),
        label: "Fail",
        LEGACY_size: "medium",
        spacing: "spacious"
      }),
      key: i,
      title: intl.formatMessage(errorFlagMessages.errorTitle),
      description: data.reason === 'fileEmpty' ? intl.formatMessage(errorFlagMessages.fileEmptyDescription, {
        fileName: data.fileName
      }) : intl.formatMessage(errorFlagMessages.uploadRejectionDescription, {
        fileName: data.fileName,
        limit: formatFileSize(data.limit)
      })
    });
  }));
};
var ErrorFlagGroup = function ErrorFlagGroup(_ref2) {
  var flagData = _ref2.flagData,
    onFlagDismissed = _ref2.onFlagDismissed,
    intl = _ref2.intl;
  return intl ? /*#__PURE__*/React.createElement(FlagGroupContent, {
    flagData: flagData,
    onFlagDismissed: onFlagDismissed
  }) : /*#__PURE__*/React.createElement(IntlProvider, {
    locale: "en"
  }, /*#__PURE__*/React.createElement(FlagGroupContent, {
    flagData: flagData,
    onFlagDismissed: onFlagDismissed
  }));
};
export default injectIntl(ErrorFlagGroup, {
  enforceContext: false
});