import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { Component } from 'react';
import { start, end } from 'perf-marks';
import { getMediaClientErrorReason } from '@atlaskit/media-client';
import { ANALYTICS_MEDIA_CHANNEL } from '@atlaskit/media-common';
import { UploadComponent } from './component';
import { UploadServiceImpl } from '../service/uploadServiceImpl';
import { getRequestMetadata } from '../util/analytics';
import { startMediaUploadUfoExperience, succeedMediaUploadUfoExperience, failMediaUploadUfoExperience } from '../util/ufoExperiences';
export var LocalUploadComponentReact = /*#__PURE__*/function (_Component) {
  function LocalUploadComponentReact(props, componentName) {
    var _this;
    _classCallCheck(this, LocalUploadComponentReact);
    _this = _callSuper(this, LocalUploadComponentReact, [props]);
    _defineProperty(_this, "uploadComponent", new UploadComponent());
    _defineProperty(_this, "state", {
      errorFlags: []
    });
    _defineProperty(_this, "addErrorFlag", function (flagData) {
      _this.setState({
        errorFlags: [].concat(_toConsumableArray(_this.state.errorFlags), [flagData])
      });
    });
    _defineProperty(_this, "dismissErrorFlag", function () {
      _this.setState({
        errorFlags: _this.state.errorFlags.slice(1)
      });
    });
    _defineProperty(_this, "fireCommencedEvent", function (payload) {
      var files = payload.files,
        traceContext = payload.traceContext;
      files.forEach(function (_ref) {
        var fileId = _ref.id,
          fileSize = _ref.size,
          fileMimetype = _ref.type;
        start("MediaPicker.fireUpload.".concat(fileId));
        _this.createAndFireAnalyticsEvent({
          eventType: 'operational',
          action: 'commenced',
          actionSubject: 'mediaUpload',
          actionSubjectId: 'localMedia',
          attributes: {
            sourceType: 'local',
            serviceName: 'upload',
            fileAttributes: {
              fileId: fileId,
              fileSize: fileSize,
              fileMimetype: fileMimetype
            },
            traceContext: traceContext
          }
        });
        startMediaUploadUfoExperience(fileId, _this.componentName);
      });
    });
    _defineProperty(_this, "fireUploadSucceeded", function (payload) {
      var _payload$file = payload.file,
        fileId = _payload$file.id,
        fileSize = _payload$file.size,
        fileMimetype = _payload$file.type,
        traceContext = payload.traceContext;
      var _end = end("MediaPicker.fireUpload.".concat(fileId)),
        _end$duration = _end.duration,
        uploadDurationMsec = _end$duration === void 0 ? -1 : _end$duration;
      _this.createAndFireAnalyticsEvent({
        eventType: 'operational',
        action: 'succeeded',
        actionSubject: 'mediaUpload',
        actionSubjectId: 'localMedia',
        attributes: {
          sourceType: 'local',
          serviceName: 'upload',
          status: 'success',
          fileAttributes: {
            fileId: fileId,
            fileSize: fileSize,
            fileMimetype: fileMimetype
          },
          uploadDurationMsec: uploadDurationMsec,
          traceContext: traceContext
        }
      });
      succeedMediaUploadUfoExperience(fileId, {
        fileId: fileId,
        fileSize: fileSize,
        fileMimetype: fileMimetype
      });
    });
    _defineProperty(_this, "fireUploadFailed", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {
        var fileId, _payload$error, errorName, rawError, traceContext, _end2, _end2$duration, uploadDurationMsec;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              fileId = payload.fileId, _payload$error = payload.error, errorName = _payload$error.name, rawError = _payload$error.rawError, traceContext = payload.traceContext;
              _end2 = end("MediaPicker.fireUpload.".concat(fileId)), _end2$duration = _end2.duration, uploadDurationMsec = _end2$duration === void 0 ? -1 : _end2$duration;
              _this.createAndFireAnalyticsEvent({
                eventType: 'operational',
                action: 'failed',
                actionSubject: 'mediaUpload',
                actionSubjectId: 'localMedia',
                attributes: {
                  sourceType: 'local',
                  serviceName: 'upload',
                  status: 'fail',
                  failReason: errorName,
                  error: !!rawError ? getMediaClientErrorReason(rawError) : 'unknown',
                  request: !!rawError ? getRequestMetadata(rawError) : undefined,
                  fileAttributes: {
                    fileId: fileId
                  },
                  uploadDurationMsec: uploadDurationMsec,
                  traceContext: traceContext
                }
              });
              failMediaUploadUfoExperience(fileId, {
                failReason: errorName,
                error: !!rawError ? getMediaClientErrorReason(rawError) : 'unknown',
                request: !!rawError ? getRequestMetadata(rawError) : undefined,
                fileAttributes: {
                  fileId: fileId
                },
                uploadDurationMsec: uploadDurationMsec
              });
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    _defineProperty(_this, "createAndFireAnalyticsEvent", function (payload) {
      var createAnalyticsEvent = _this.props.createAnalyticsEvent;
      if (createAnalyticsEvent) {
        createAnalyticsEvent(payload).fire(ANALYTICS_MEDIA_CHANNEL);
      }
    });
    _defineProperty(_this, "cancel", function (uniqueIdentifier) {
      _this.uploadService.cancel(uniqueIdentifier);
    });
    _defineProperty(_this, "onFilesAdded", function (_ref3) {
      var files = _ref3.files,
        traceContext = _ref3.traceContext;
      _this.uploadComponent.emitUploadsStart(files, traceContext);
    });
    _defineProperty(_this, "onFilePreviewUpdate", function (_ref4) {
      var file = _ref4.file,
        preview = _ref4.preview;
      _this.uploadComponent.emitUploadPreviewUpdate(file, preview);
    });
    _defineProperty(_this, "onFileConverting", function (_ref5) {
      var file = _ref5.file,
        traceContext = _ref5.traceContext;
      _this.uploadComponent.emitUploadEnd(file, traceContext);
    });
    _defineProperty(_this, "onUploadError", function (_ref6) {
      var fileId = _ref6.fileId,
        error = _ref6.error,
        traceContext = _ref6.traceContext;
      _this.uploadComponent.emitUploadError(fileId, error, traceContext);
    });
    _this.componentName = componentName;
    var _this$props = _this.props,
      mediaClient = _this$props.mediaClient,
      config = _this$props.config,
      onUploadsStart = _this$props.onUploadsStart,
      onPreviewUpdate = _this$props.onPreviewUpdate,
      onEnd = _this$props.onEnd,
      onError = _this$props.onError;
    var tenantUploadParams = config.uploadParams;
    var _config$shouldCopyFil = config.shouldCopyFileToRecents,
      shouldCopyFileToRecents = _config$shouldCopyFil === void 0 ? true : _config$shouldCopyFil;
    _this.uploadComponent.on('uploads-start', _this.fireCommencedEvent);
    _this.uploadComponent.on('upload-end', _this.fireUploadSucceeded);
    _this.uploadComponent.on('upload-error', _this.fireUploadFailed);
    if (onUploadsStart) {
      _this.uploadComponent.on('uploads-start', onUploadsStart);
    }
    if (onPreviewUpdate) {
      _this.uploadComponent.on('upload-preview-update', onPreviewUpdate);
    }
    if (onEnd) {
      _this.uploadComponent.on('upload-end', onEnd);
    }
    if (onError) {
      _this.uploadComponent.on('upload-error', onError);
    }
    _this.uploadService = new UploadServiceImpl(mediaClient, tenantUploadParams, shouldCopyFileToRecents);
    _this.uploadService.on('files-added', _this.onFilesAdded);
    _this.uploadService.on('file-preview-update', _this.onFilePreviewUpdate);
    _this.uploadService.on('file-converting', _this.onFileConverting);
    _this.uploadService.on('file-upload-error', _this.onUploadError);
    var onFileRejection = function onFileRejection(rejectionData) {
      var onUploadRejection = tenantUploadParams.onUploadRejection;
      var shouldOverride = onUploadRejection === null || onUploadRejection === void 0 ? void 0 : onUploadRejection(rejectionData);
      if (!shouldOverride) {
        _this.addErrorFlag(rejectionData);
      }
    };
    _this.uploadService.onFileRejection(onFileRejection);
    _this.uploadService.onFileEmpty(onFileRejection);
    return _this;
  }
  _inherits(LocalUploadComponentReact, _Component);
  return _createClass(LocalUploadComponentReact, [{
    key: "setUploadParams",
    value: function setUploadParams(uploadParams) {
      this.uploadService.setUploadParams(uploadParams);
    }
  }]);
}(Component);