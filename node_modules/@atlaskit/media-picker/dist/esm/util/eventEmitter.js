import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { EventEmitter2 } from 'eventemitter2';
export var GenericEventEmitter = /*#__PURE__*/function () {
  function GenericEventEmitter() {
    _classCallCheck(this, GenericEventEmitter);
    _defineProperty(this, "emitter", new EventEmitter2({
      wildcard: true
    }));
  }
  return _createClass(GenericEventEmitter, [{
    key: "once",
    value: function once(event, listener) {
      this.emitter.once(event, listener);
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      this.emitter.on(event, listener);
    }
  }, {
    key: "onAny",
    value: function onAny(listener) {
      this.emitter.onAny(listener);
    }
  }, {
    key: "addListener",
    value: function addListener(event, listener) {
      this.emitter.addListener(event, listener);
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      this.emitter.off(event, listener);
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, handler) {
      this.emitter.removeListener(event, handler);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(event) {
      // We want to explicitly call removeAllListeners without any argument if event is undefined, otherwise will EventEmitter fail
      if (event === undefined) {
        this.emitter.removeAllListeners();
      } else {
        this.emitter.removeAllListeners(event);
      }
    }
  }, {
    key: "emit",
    value: function emit(event, payload) {
      return this.emitter.emit(event, payload);
    }
  }]);
}();