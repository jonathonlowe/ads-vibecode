import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getDimensionsFromBlob } from '@atlaskit/media-client';
export var isUnknownDimensions = function isUnknownDimensions(dimensions) {
  return !dimensions.width && !dimensions.height;
};
export function getPreviewFromBlob(_x, _x2) {
  return _getPreviewFromBlob.apply(this, arguments);
}
function _getPreviewFromBlob() {
  _getPreviewFromBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mediaType, file) {
    var dimensions;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = mediaType;
          _context.next = _context.t0 === 'image' ? 3 : _context.t0 === 'video' ? 3 : 9;
          break;
        case 3:
          _context.next = 5;
          return getDimensionsFromBlob(mediaType, file);
        case 5:
          dimensions = _context.sent;
          if (!isUnknownDimensions(dimensions)) {
            _context.next = 8;
            break;
          }
          return _context.abrupt("return", {
            file: file,
            scaleFactor: 1
          });
        case 8:
          return _context.abrupt("return", {
            file: file,
            dimensions: dimensions,
            scaleFactor: 1
          });
        case 9:
          return _context.abrupt("return", {
            file: file
          });
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getPreviewFromBlob.apply(this, arguments);
}