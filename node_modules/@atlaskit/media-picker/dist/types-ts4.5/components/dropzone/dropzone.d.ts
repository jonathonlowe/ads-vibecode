import React from 'react';
import { LocalUploadComponentReact, type LocalUploadComponentBaseProps } from '../localUploadReact';
import { type DropzoneConfig } from '../../types';
import { type DropzoneDragEnterEventPayload, type DropzoneDragLeaveEventPayload } from '../types';
export type DropzoneProps = LocalUploadComponentBaseProps & {
    config: DropzoneConfig;
    onDrop?: () => void;
    onDragEnter?: (payload: DropzoneDragEnterEventPayload) => void;
    onDragLeave?: (payload: DropzoneDragLeaveEventPayload) => void;
    onCancelFn?: (cancel: (uniqueIdentifier: string) => void) => void;
};
export declare class DropzoneBase extends LocalUploadComponentReact<DropzoneProps> {
    private uiActive;
    constructor(props: DropzoneProps);
    private getContainer;
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: DropzoneProps): void;
    private addContainerListeners;
    private removeContainerListeners;
    private onDragOver;
    private onDragLeave;
    private readonly onFileDropped;
    private getDraggedItemsLength;
    private onDrop;
    private sendAnalyticsAndEmitDragLeave;
    private emitDragOver;
    private emitDragLeave;
    private fireAnalyticsEvent;
    render(): React.JSX.Element;
}
export default DropzoneBase;
export declare const Dropzone: React.ForwardRefExoticComponent<Omit<Omit<{
    mediaClient: import("@atlaskit/media-client").MediaClient;
    config: import("../types").LocalUploadConfig;
    onUploadsStart?: ((payload: import("../../types").UploadsStartEventPayload) => void) | undefined;
    onPreviewUpdate?: ((payload: import("../../types").UploadPreviewUpdateEventPayload) => void) | undefined;
    onEnd?: ((payload: import("../../types").UploadEndEventPayload) => void) | undefined;
    onError?: ((payload: import("../../types").UploadErrorEventPayload) => void) | undefined;
    featureFlags?: import("@atlaskit/media-common").MediaFeatureFlags | undefined;
} & {
    config: DropzoneConfig;
    onDrop?: (() => void) | undefined;
    onDragEnter?: ((payload: DropzoneDragEnterEventPayload) => void) | undefined;
    onDragLeave?: ((payload: DropzoneDragLeaveEventPayload) => void) | undefined;
    onCancelFn?: ((cancel: (uniqueIdentifier: string) => void) => void) | undefined;
}, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps> & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
