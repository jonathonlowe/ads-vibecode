import { Component } from 'react';
import { type MediaClient } from '@atlaskit/media-client';
import { type MediaFeatureFlags } from '@atlaskit/media-common';
import { type UploadService } from '../service/types';
import { type UploadEndEventPayload, type UploadErrorEventPayload, type UploadPreviewUpdateEventPayload, type UploadsStartEventPayload, type UploadParams, type UploadRejectionData } from '../types';
import { UploadComponent } from './component';
import { type LocalUploadConfig } from './types';
import { type WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { type AnalyticsEventPayload } from '../types';
import { type ComponentName } from '../util/analytics';
export type LocalUploadComponentBaseProps = {
    mediaClient: MediaClient;
    config: LocalUploadConfig;
    onUploadsStart?: (payload: UploadsStartEventPayload) => void;
    onPreviewUpdate?: (payload: UploadPreviewUpdateEventPayload) => void;
    onEnd?: (payload: UploadEndEventPayload) => void;
    onError?: (payload: UploadErrorEventPayload) => void;
    featureFlags?: MediaFeatureFlags;
} & WithAnalyticsEventsProps;
export type LocalUploadComponentBaseState = {
    errorFlags: UploadRejectionData[];
};
export declare class LocalUploadComponentReact<Props extends LocalUploadComponentBaseProps> extends Component<Props, LocalUploadComponentBaseState> {
    protected readonly componentName: ComponentName;
    protected readonly uploadService: UploadService;
    protected uploadComponent: UploadComponent<import("../types").UploadEventPayloadMap>;
    state: LocalUploadComponentBaseState;
    constructor(props: Props, componentName: ComponentName);
    private addErrorFlag;
    protected dismissErrorFlag: () => void;
    private fireCommencedEvent;
    private fireUploadSucceeded;
    private fireUploadFailed;
    protected createAndFireAnalyticsEvent: (payload: AnalyticsEventPayload) => void;
    cancel: (uniqueIdentifier?: string) => void;
    setUploadParams(uploadParams: UploadParams): void;
    private onFilesAdded;
    private onFilePreviewUpdate;
    private onFileConverting;
    private onUploadError;
}
