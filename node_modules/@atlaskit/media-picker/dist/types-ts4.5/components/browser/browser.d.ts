import React from 'react';
import { type BrowserConfig } from '../../types';
import { LocalUploadComponentReact, type LocalUploadComponentBaseProps } from '../localUploadReact';
export interface BrowserOwnProps {
    config: BrowserConfig;
    /**
     * when true, the dialog will show when the component is rendered
     * (NOTE: without this value, no dialog will appear unless you use the **onBrowserFn** hook)
     */
    isOpen?: boolean;
    onClose?: () => void;
    /**
     * This prop will be mainly used for those contexts (like Editor) where there is no react lifecylce and we cannot rerender easily.
     * Otherwise, isOpen prop is preferred.
     */
    onBrowseFn?: (browse: () => void) => void;
    onCancelFn?: (cancel: (uniqueIdentifier: string) => void) => void;
    children?: (browse: () => void) => React.ReactChild;
}
export type BrowseFn = () => void;
export type BrowserProps = LocalUploadComponentBaseProps & BrowserOwnProps;
export declare class BrowserBase extends LocalUploadComponentReact<BrowserProps> {
    private browserRef;
    constructor(props: BrowserProps);
    static defaultProps: {
        config: BrowserConfig;
    };
    private onFilePicked;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: BrowserProps): void;
    browse: BrowseFn;
    render(): React.JSX.Element;
}
export default BrowserBase;
export declare const Browser: React.ForwardRefExoticComponent<Omit<Pick<Omit<{
    mediaClient: import("@atlaskit/media-client").MediaClient;
    config: import("../types").LocalUploadConfig;
    onUploadsStart?: ((payload: import("../../types").UploadsStartEventPayload) => void) | undefined;
    onPreviewUpdate?: ((payload: import("../../types").UploadPreviewUpdateEventPayload) => void) | undefined;
    onEnd?: ((payload: import("../../types").UploadEndEventPayload) => void) | undefined;
    onError?: ((payload: import("../../types").UploadErrorEventPayload) => void) | undefined;
    featureFlags?: import("@atlaskit/media-common").MediaFeatureFlags | undefined;
} & BrowserOwnProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "mediaClient" | "onUploadsStart" | "onPreviewUpdate" | "onEnd" | "onError" | "featureFlags" | "children" | "onCancelFn" | "isOpen" | "onClose" | "onBrowseFn"> & {
    config?: (import("../types").LocalUploadConfig & BrowserConfig) | undefined;
} & {} & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
