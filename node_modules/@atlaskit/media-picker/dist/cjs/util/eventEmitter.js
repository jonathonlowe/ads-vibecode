"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericEventEmitter = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eventemitter = require("eventemitter2");
var GenericEventEmitter = exports.GenericEventEmitter = /*#__PURE__*/function () {
  function GenericEventEmitter() {
    (0, _classCallCheck2.default)(this, GenericEventEmitter);
    (0, _defineProperty2.default)(this, "emitter", new _eventemitter.EventEmitter2({
      wildcard: true
    }));
  }
  return (0, _createClass2.default)(GenericEventEmitter, [{
    key: "once",
    value: function once(event, listener) {
      this.emitter.once(event, listener);
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      this.emitter.on(event, listener);
    }
  }, {
    key: "onAny",
    value: function onAny(listener) {
      this.emitter.onAny(listener);
    }
  }, {
    key: "addListener",
    value: function addListener(event, listener) {
      this.emitter.addListener(event, listener);
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      this.emitter.off(event, listener);
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, handler) {
      this.emitter.removeListener(event, handler);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(event) {
      // We want to explicitly call removeAllListeners without any argument if event is undefined, otherwise will EventEmitter fail
      if (event === undefined) {
        this.emitter.removeAllListeners();
      } else {
        this.emitter.removeAllListeners(event);
      }
    }
  }, {
    key: "emit",
    value: function emit(event, payload) {
      return this.emitter.emit(event, payload);
    }
  }]);
}();