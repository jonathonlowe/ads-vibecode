"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadComponent = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _eventEmitter = require("../util/eventEmitter");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var UploadComponent = exports.UploadComponent = /*#__PURE__*/function (_ref) {
  function UploadComponent() {
    (0, _classCallCheck2.default)(this, UploadComponent);
    return _callSuper(this, UploadComponent, arguments);
  }
  (0, _inherits2.default)(UploadComponent, _ref);
  return (0, _createClass2.default)(UploadComponent, [{
    key: "emitPluginItemsInserted",
    value: function emitPluginItemsInserted(selectedPluginItems) {
      var payload = selectedPluginItems.map(function (item) {
        return {
          pluginName: item.serviceName,
          pluginFile: {
            id: item.id,
            metadata: item.metadata
          }
        };
      });
      this.emit('plugin-items-inserted', payload);
    }
  }, {
    key: "emitUploadsStart",
    value: function emitUploadsStart(files, traceContext) {
      this.emit('uploads-start', {
        files: files,
        traceContext: traceContext
      });
    }
  }, {
    key: "emitUploadPreviewUpdate",
    value: function emitUploadPreviewUpdate(file, preview) {
      this.emit('upload-preview-update', {
        file: file,
        preview: preview
      });
    }
  }, {
    key: "emitUploadEnd",
    value: function emitUploadEnd(file, traceContext) {
      this.emit('upload-end', {
        file: file,
        traceContext: traceContext
      });
    }
  }, {
    key: "emitUploadError",
    value: function emitUploadError(fileId, error, traceContext) {
      this.emit('upload-error', {
        fileId: fileId,
        error: error,
        traceContext: traceContext
      });
    }
  }]);
}(_eventEmitter.GenericEventEmitter);