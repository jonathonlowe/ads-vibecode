"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BrowserBase = exports.Browser = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _mediaCommon = require("@atlaskit/media-common");
var _uuidValidate = _interopRequireDefault(require("uuid-validate"));
var _localUploadReact = require("../localUploadReact");
var _analytics = require("../../util/analytics");
var _ErrorFlagGroup = _interopRequireDefault(require("../errorFlagGroup/ErrorFlagGroup"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var defaultConfig = {
  uploadParams: {}
};
var COMPONENT_NAME = 'browser';
var BrowserBase = exports.BrowserBase = /*#__PURE__*/function (_LocalUploadComponent) {
  function BrowserBase(props) {
    var _this;
    (0, _classCallCheck2.default)(this, BrowserBase);
    _this = _callSuper(this, BrowserBase, [props, COMPONENT_NAME]);
    (0, _defineProperty2.default)(_this, "browserRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(_this, "onFilePicked", function (event) {
      if (!event.target) {
        return;
      }
      var replaceFileId = _this.props.config.replaceFileId;
      var filesArray = [].slice.call(event.target.files);

      // refreshes uploadParams as only set once in parent constructor
      _this.setUploadParams(_this.props.config.uploadParams);
      try {
        if (replaceFileId) {
          _this.uploadService.addFile(filesArray[0], replaceFileId);
        } else {
          _this.uploadService.addFiles(filesArray);
        }
      } finally {
        if (_this.browserRef.current) {
          _this.browserRef.current.value = '';
        }
      }
    });
    (0, _defineProperty2.default)(_this, "browse", function () {
      var onClose = _this.props.onClose;
      if (!_this.browserRef.current) {
        return;
      }
      _this.browserRef.current.click();
      // Calling onClose directly since there is no dom api to notify us when
      // the native file picker is closed
      if (onClose) {
        onClose();
      }
    });
    var config = props.config,
      onError = props.onError;
    var _replaceFileId = config.replaceFileId;
    if (_replaceFileId && !(0, _uuidValidate.default)(_replaceFileId)) {
      _this.createAndFireAnalyticsEvent({
        eventType: 'operational',
        action: 'failed',
        actionSubject: 'mediaUpload',
        actionSubjectId: 'localMedia',
        attributes: {
          status: 'fail',
          failReason: 'invalid_uuid',
          uuid: _replaceFileId
        }
      });
      onError && onError({
        fileId: _replaceFileId,
        error: {
          description: 'Invalid replaceFileId format',
          name: 'invalid_uuid',
          fileId: _replaceFileId
        }
      });
    }
    return _this;
  }
  (0, _inherits2.default)(BrowserBase, _LocalUploadComponent);
  return (0, _createClass2.default)(BrowserBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
        onBrowseFn = _this$props.onBrowseFn,
        onCancelFn = _this$props.onCancelFn,
        isOpen = _this$props.isOpen;
      if (onBrowseFn) {
        onBrowseFn(this.browse);
      }
      if (onCancelFn) {
        onCancelFn(this.cancel);
      }
      if (isOpen) {
        this.browse();
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var isOpen = this.props.isOpen;
      var nextIsOpen = nextProps.isOpen;
      if (nextIsOpen && nextIsOpen !== isOpen) {
        this.browse();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        config = _this$props2.config,
        children = _this$props2.children;
      var multiple = config.multiple,
        replaceFileId = config.replaceFileId;
      var fileExtensions = config.fileExtensions && config.fileExtensions.join(',');
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
        "data-testid": "media-picker-file-input",
        ref: this.browserRef,
        type: "file"
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        ,
        style: {
          display: 'none'
        },
        multiple: replaceFileId ? false : multiple /* if the consumer passes the fileId we must work in single selection mode */,
        accept: fileExtensions,
        onChange: this.onFilePicked
      }), children ? children(this.browse) : null, /*#__PURE__*/_react.default.createElement(_ErrorFlagGroup.default, {
        flagData: this.state.errorFlags,
        onFlagDismissed: this.dismissErrorFlag
      }));
    }
  }]);
}(_localUploadReact.LocalUploadComponentReact);
(0, _defineProperty2.default)(BrowserBase, "defaultProps", {
  config: defaultConfig
});
var _default = exports.default = BrowserBase;
var Browser = exports.Browser = (0, _mediaCommon.withMediaAnalyticsContext)((0, _analytics.getPackageAttributes)(COMPONENT_NAME))((0, _analyticsNext.withAnalyticsEvents)()(BrowserBase));