import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { withMediaAnalyticsContext } from '@atlaskit/media-common';
import isValidId from 'uuid-validate';
import { LocalUploadComponentReact } from '../localUploadReact';
import { getPackageAttributes } from '../../util/analytics';
import ErrorFlagGroup from '../errorFlagGroup/ErrorFlagGroup';
const defaultConfig = {
  uploadParams: {}
};
const COMPONENT_NAME = 'browser';
export class BrowserBase extends LocalUploadComponentReact {
  constructor(props) {
    super(props, COMPONENT_NAME);
    _defineProperty(this, "browserRef", /*#__PURE__*/React.createRef());
    _defineProperty(this, "onFilePicked", event => {
      if (!event.target) {
        return;
      }
      const {
        replaceFileId
      } = this.props.config;
      const filesArray = [].slice.call(event.target.files);

      // refreshes uploadParams as only set once in parent constructor
      this.setUploadParams(this.props.config.uploadParams);
      try {
        if (replaceFileId) {
          this.uploadService.addFile(filesArray[0], replaceFileId);
        } else {
          this.uploadService.addFiles(filesArray);
        }
      } finally {
        if (this.browserRef.current) {
          this.browserRef.current.value = '';
        }
      }
    });
    _defineProperty(this, "browse", () => {
      const {
        onClose
      } = this.props;
      if (!this.browserRef.current) {
        return;
      }
      this.browserRef.current.click();
      // Calling onClose directly since there is no dom api to notify us when
      // the native file picker is closed
      if (onClose) {
        onClose();
      }
    });
    const {
      config,
      onError
    } = props;
    const {
      replaceFileId: _replaceFileId
    } = config;
    if (_replaceFileId && !isValidId(_replaceFileId)) {
      this.createAndFireAnalyticsEvent({
        eventType: 'operational',
        action: 'failed',
        actionSubject: 'mediaUpload',
        actionSubjectId: 'localMedia',
        attributes: {
          status: 'fail',
          failReason: 'invalid_uuid',
          uuid: _replaceFileId
        }
      });
      onError && onError({
        fileId: _replaceFileId,
        error: {
          description: 'Invalid replaceFileId format',
          name: 'invalid_uuid',
          fileId: _replaceFileId
        }
      });
    }
  }
  componentDidMount() {
    const {
      onBrowseFn,
      onCancelFn,
      isOpen
    } = this.props;
    if (onBrowseFn) {
      onBrowseFn(this.browse);
    }
    if (onCancelFn) {
      onCancelFn(this.cancel);
    }
    if (isOpen) {
      this.browse();
    }
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      isOpen
    } = this.props;
    const {
      isOpen: nextIsOpen
    } = nextProps;
    if (nextIsOpen && nextIsOpen !== isOpen) {
      this.browse();
    }
  }
  render() {
    const {
      config,
      children
    } = this.props;
    const {
      multiple,
      replaceFileId
    } = config;
    const fileExtensions = config.fileExtensions && config.fileExtensions.join(',');
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", {
      "data-testid": "media-picker-file-input",
      ref: this.browserRef,
      type: "file"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: {
        display: 'none'
      },
      multiple: replaceFileId ? false : multiple /* if the consumer passes the fileId we must work in single selection mode */,
      accept: fileExtensions,
      onChange: this.onFilePicked
    }), children ? children(this.browse) : null, /*#__PURE__*/React.createElement(ErrorFlagGroup, {
      flagData: this.state.errorFlags,
      onFlagDismissed: this.dismissErrorFlag
    }));
  }
}
_defineProperty(BrowserBase, "defaultProps", {
  config: defaultConfig
});
export default BrowserBase;
export const Browser = withMediaAnalyticsContext(getPackageAttributes(COMPONENT_NAME))(withAnalyticsEvents()(BrowserBase));