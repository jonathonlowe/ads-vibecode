import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
export class DropzoneLoader extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      Dropzone: DropzoneLoader.Dropzone,
      MediaPickerErrorBoundary: DropzoneLoader.MediaPickerErrorBoundary
    });
  }
  async UNSAFE_componentWillMount() {
    if (!this.state.Dropzone || !this.state.MediaPickerErrorBoundary) {
      try {
        const [mediaClient, dropzoneModule, mediaPickerErrorBoundaryModule] = await Promise.all([import( /* webpackChunkName: "@atlaskit-internal_media-client-react" */'@atlaskit/media-client-react'), import( /* webpackChunkName: "@atlaskit-internal_media-dropzone" */'./dropzone'), import( /* webpackChunkName: "@atlaskit-internal_media-picker-error-boundary" */'../media-picker-analytics-error-boundary')]);

        // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
        DropzoneLoader.Dropzone = mediaClient.withMediaClient(dropzoneModule.Dropzone);
        DropzoneLoader.MediaPickerErrorBoundary = mediaPickerErrorBoundaryModule.default;
        this.setState({
          Dropzone: DropzoneLoader.Dropzone,
          MediaPickerErrorBoundary: DropzoneLoader.MediaPickerErrorBoundary
        });
      } catch (error) {
        // TODO [MS-2272]: Add operational error to catch async import error
      }
    }
  }
  render() {
    const {
      Dropzone,
      MediaPickerErrorBoundary
    } = this.state;
    if (!Dropzone || !MediaPickerErrorBoundary) {
      return null;
    }
    return /*#__PURE__*/React.createElement(MediaPickerErrorBoundary, null, /*#__PURE__*/React.createElement(Dropzone, this.props));
  }
}
_defineProperty(DropzoneLoader, "displayName", 'AsyncDropzone');