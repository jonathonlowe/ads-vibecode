import React from 'react';
import { AutoDismissFlag, FlagGroup } from '@atlaskit/flag';
import FailIcon from '@atlaskit/icon/core/migration/cross-circle';
import { R300 } from '@atlaskit/theme/colors';
import { errorFlagMessages } from './messages';
import { injectIntl, IntlProvider, useIntl } from 'react-intl-next';
const defaultOptions = {
  style: 'unit',
  unitDisplay: 'short',
  minimumFractionDigits: 2
};
const fileSizeFormatters = {
  kilobyte: new Intl.NumberFormat('en', {
    ...defaultOptions,
    unit: 'kilobyte'
  }),
  megabyte: new Intl.NumberFormat('en', {
    ...defaultOptions,
    unit: 'megabyte'
  }),
  gigabyte: new Intl.NumberFormat('en', {
    ...defaultOptions,
    unit: 'gigabyte'
  })
};
const formatFileSize = size => {
  let formattedSize;
  if (size < 1000000) {
    formattedSize = size / 1000;
    return fileSizeFormatters.kilobyte.format(formattedSize);
  } else if (size >= 1000000 && size < 1000000000) {
    formattedSize = size / 1000000;
    return fileSizeFormatters.megabyte.format(formattedSize);
  } else {
    formattedSize = size / 1000000000;
    return fileSizeFormatters.gigabyte.format(formattedSize);
  }
};
const FlagGroupContent = ({
  flagData,
  onFlagDismissed
}) => {
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(FlagGroup, {
    onDismissed: onFlagDismissed
  }, flagData.map((data, i) => /*#__PURE__*/React.createElement(AutoDismissFlag, {
    id: i,
    icon: /*#__PURE__*/React.createElement(FailIcon, {
      color: `var(--ds-icon-danger, ${R300})`,
      label: "Fail",
      LEGACY_size: "medium",
      spacing: "spacious"
    }),
    key: i,
    title: intl.formatMessage(errorFlagMessages.errorTitle),
    description: data.reason === 'fileEmpty' ? intl.formatMessage(errorFlagMessages.fileEmptyDescription, {
      fileName: data.fileName
    }) : intl.formatMessage(errorFlagMessages.uploadRejectionDescription, {
      fileName: data.fileName,
      limit: formatFileSize(data.limit)
    })
  })));
};
const ErrorFlagGroup = ({
  flagData,
  onFlagDismissed,
  intl
}) => {
  return intl ? /*#__PURE__*/React.createElement(FlagGroupContent, {
    flagData: flagData,
    onFlagDismissed: onFlagDismissed
  }) : /*#__PURE__*/React.createElement(IntlProvider, {
    locale: "en"
  }, /*#__PURE__*/React.createElement(FlagGroupContent, {
    flagData: flagData,
    onFlagDismissed: onFlagDismissed
  }));
};
export default injectIntl(ErrorFlagGroup, {
  enforceContext: false
});