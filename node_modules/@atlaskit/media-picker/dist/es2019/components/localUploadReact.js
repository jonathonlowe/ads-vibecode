import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { Component } from 'react';
import { start, end } from 'perf-marks';
import { getMediaClientErrorReason } from '@atlaskit/media-client';
import { ANALYTICS_MEDIA_CHANNEL } from '@atlaskit/media-common';
import { UploadComponent } from './component';
import { UploadServiceImpl } from '../service/uploadServiceImpl';
import { getRequestMetadata } from '../util/analytics';
import { startMediaUploadUfoExperience, succeedMediaUploadUfoExperience, failMediaUploadUfoExperience } from '../util/ufoExperiences';
export class LocalUploadComponentReact extends Component {
  constructor(props, componentName) {
    super(props);
    _defineProperty(this, "uploadComponent", new UploadComponent());
    _defineProperty(this, "state", {
      errorFlags: []
    });
    _defineProperty(this, "addErrorFlag", flagData => {
      this.setState({
        errorFlags: [...this.state.errorFlags, flagData]
      });
    });
    _defineProperty(this, "dismissErrorFlag", () => {
      this.setState({
        errorFlags: this.state.errorFlags.slice(1)
      });
    });
    _defineProperty(this, "fireCommencedEvent", payload => {
      const {
        files,
        traceContext
      } = payload;
      files.forEach(({
        id: fileId,
        size: fileSize,
        type: fileMimetype
      }) => {
        start(`MediaPicker.fireUpload.${fileId}`);
        this.createAndFireAnalyticsEvent({
          eventType: 'operational',
          action: 'commenced',
          actionSubject: 'mediaUpload',
          actionSubjectId: 'localMedia',
          attributes: {
            sourceType: 'local',
            serviceName: 'upload',
            fileAttributes: {
              fileId,
              fileSize,
              fileMimetype
            },
            traceContext
          }
        });
        startMediaUploadUfoExperience(fileId, this.componentName);
      });
    });
    _defineProperty(this, "fireUploadSucceeded", payload => {
      const {
        file: {
          id: fileId,
          size: fileSize,
          type: fileMimetype
        },
        traceContext
      } = payload;
      const {
        duration: uploadDurationMsec = -1
      } = end(`MediaPicker.fireUpload.${fileId}`);
      this.createAndFireAnalyticsEvent({
        eventType: 'operational',
        action: 'succeeded',
        actionSubject: 'mediaUpload',
        actionSubjectId: 'localMedia',
        attributes: {
          sourceType: 'local',
          serviceName: 'upload',
          status: 'success',
          fileAttributes: {
            fileId,
            fileSize,
            fileMimetype
          },
          uploadDurationMsec,
          traceContext
        }
      });
      succeedMediaUploadUfoExperience(fileId, {
        fileId,
        fileSize,
        fileMimetype
      });
    });
    _defineProperty(this, "fireUploadFailed", async payload => {
      const {
        fileId,
        error: {
          name: errorName,
          rawError
        },
        traceContext
      } = payload;
      const {
        duration: uploadDurationMsec = -1
      } = end(`MediaPicker.fireUpload.${fileId}`);
      this.createAndFireAnalyticsEvent({
        eventType: 'operational',
        action: 'failed',
        actionSubject: 'mediaUpload',
        actionSubjectId: 'localMedia',
        attributes: {
          sourceType: 'local',
          serviceName: 'upload',
          status: 'fail',
          failReason: errorName,
          error: !!rawError ? getMediaClientErrorReason(rawError) : 'unknown',
          request: !!rawError ? getRequestMetadata(rawError) : undefined,
          fileAttributes: {
            fileId
          },
          uploadDurationMsec,
          traceContext
        }
      });
      failMediaUploadUfoExperience(fileId, {
        failReason: errorName,
        error: !!rawError ? getMediaClientErrorReason(rawError) : 'unknown',
        request: !!rawError ? getRequestMetadata(rawError) : undefined,
        fileAttributes: {
          fileId
        },
        uploadDurationMsec
      });
    });
    _defineProperty(this, "createAndFireAnalyticsEvent", payload => {
      const {
        createAnalyticsEvent
      } = this.props;
      if (createAnalyticsEvent) {
        createAnalyticsEvent(payload).fire(ANALYTICS_MEDIA_CHANNEL);
      }
    });
    _defineProperty(this, "cancel", uniqueIdentifier => {
      this.uploadService.cancel(uniqueIdentifier);
    });
    _defineProperty(this, "onFilesAdded", ({
      files,
      traceContext
    }) => {
      this.uploadComponent.emitUploadsStart(files, traceContext);
    });
    _defineProperty(this, "onFilePreviewUpdate", ({
      file,
      preview
    }) => {
      this.uploadComponent.emitUploadPreviewUpdate(file, preview);
    });
    _defineProperty(this, "onFileConverting", ({
      file,
      traceContext
    }) => {
      this.uploadComponent.emitUploadEnd(file, traceContext);
    });
    _defineProperty(this, "onUploadError", ({
      fileId,
      error,
      traceContext
    }) => {
      this.uploadComponent.emitUploadError(fileId, error, traceContext);
    });
    this.componentName = componentName;
    const {
      mediaClient,
      config,
      onUploadsStart,
      onPreviewUpdate,
      onEnd,
      onError
    } = this.props;
    const tenantUploadParams = config.uploadParams;
    const {
      shouldCopyFileToRecents = true
    } = config;
    this.uploadComponent.on('uploads-start', this.fireCommencedEvent);
    this.uploadComponent.on('upload-end', this.fireUploadSucceeded);
    this.uploadComponent.on('upload-error', this.fireUploadFailed);
    if (onUploadsStart) {
      this.uploadComponent.on('uploads-start', onUploadsStart);
    }
    if (onPreviewUpdate) {
      this.uploadComponent.on('upload-preview-update', onPreviewUpdate);
    }
    if (onEnd) {
      this.uploadComponent.on('upload-end', onEnd);
    }
    if (onError) {
      this.uploadComponent.on('upload-error', onError);
    }
    this.uploadService = new UploadServiceImpl(mediaClient, tenantUploadParams, shouldCopyFileToRecents);
    this.uploadService.on('files-added', this.onFilesAdded);
    this.uploadService.on('file-preview-update', this.onFilePreviewUpdate);
    this.uploadService.on('file-converting', this.onFileConverting);
    this.uploadService.on('file-upload-error', this.onUploadError);
    const onFileRejection = rejectionData => {
      const {
        onUploadRejection
      } = tenantUploadParams;
      const shouldOverride = onUploadRejection === null || onUploadRejection === void 0 ? void 0 : onUploadRejection(rejectionData);
      if (!shouldOverride) {
        this.addErrorFlag(rejectionData);
      }
    };
    this.uploadService.onFileRejection(onFileRejection);
    this.uploadService.onFileEmpty(onFileRejection);
  }
  setUploadParams(uploadParams) {
    this.uploadService.setUploadParams(uploadParams);
  }
}