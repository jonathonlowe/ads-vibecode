import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _ClipboardImpl;
import React from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { ANALYTICS_MEDIA_CHANNEL, withMediaAnalyticsContext } from '@atlaskit/media-common';
import { LocalUploadComponentReact } from '../localUploadReact';
import { LocalFileSource } from '../../service/types';
import { getPackageAttributes } from '../../util/analytics';
import { appendTimestamp } from '../../util/appendTimestamp';
import ErrorFlagGroup from '../errorFlagGroup/ErrorFlagGroup';
export const getFilesFromClipboard = files => {
  return Array.from(files).map(file => {
    if (file.type.indexOf('image/') === 0) {
      const name = appendTimestamp(file.name, file.lastModified);
      return new File([file], name, {
        type: file.type
      });
    } else {
      return file;
    }
  });
};
const defaultConfig = {
  uploadParams: {}
};
const COMPONENT_NAME = 'clipboard';
class ClipboardImpl {
  constructor(uploadService, container, onPaste, createAnalyticsEvent, featureFlags) {
    _defineProperty(this, "handleEvent", event => {
      var _this$onPaste;
      const {
        clipboardData
      } = event;
      if ((_this$onPaste = this.onPaste) !== null && _this$onPaste !== void 0 && _this$onPaste.call(this, event)) {
        return;
      }

      // From https://product-fabric.atlassian.net/browse/MEX-1281 ,disable the handler if event target is input
      if (event.target instanceof HTMLInputElement) {
        return;
      }
      if (clipboardData && clipboardData.files) {
        const fileSource = clipboardData.types.length === 1 ? LocalFileSource.PastedScreenshot : LocalFileSource.PastedFile;
        const filesArray = getFilesFromClipboard(clipboardData.files).map(file => ({
          file,
          source: fileSource
        }));
        if (filesArray.length > 0) {
          this.onFilesPasted(filesArray);
        }
      }
    });
    this.uploadService = uploadService;
    this.container = container;
    this.onPaste = onPaste;
    this.createAnalyticsEvent = createAnalyticsEvent;
    this.featureFlags = featureFlags;
  }
  static get latestInstance() {
    return ClipboardImpl.instances[ClipboardImpl.instances.length - 1];
  }
  activate() {
    this.deactivate();
    if (!this.container) {
      document.addEventListener('paste', ClipboardImpl.legacyHandleEvent);
      ClipboardImpl.instances.push(this);
    } else {
      this.container.addEventListener('paste', this.handleEvent);
    }
  }
  deactivate() {
    if (!this.container) {
      const index = ClipboardImpl.instances.indexOf(this);
      if (index > -1) {
        ClipboardImpl.instances.splice(index, 1);
      } else {
        /**
         * We want to remove the handleEvent only when there are no more instances.
         * Since handleEvent is static, if we remove it right away, and there is still an active instance,
         * we will loose the clipboard functionality.
         */
        document.removeEventListener('paste', ClipboardImpl.legacyHandleEvent);
      }
    } else {
      this.container.removeEventListener('paste', this.handleEvent);
    }
  }
  onFilesPasted(files) {
    this.uploadService.addFilesWithSource(files);
    this.fireAnalyticsEvent(files);
  }
  fireAnalyticsEvent(files) {
    if (this.createAnalyticsEvent) {
      const payload = {
        eventType: 'ui',
        action: 'pasted',
        actionSubject: 'clipboard',
        attributes: {
          fileCount: files.length,
          fileAttributes: files.map(({
            file: {
              type,
              size
            },
            source
          }) => ({
            fileSource: source,
            fileMimetype: type,
            fileSize: size
          }))
        }
      };
      const analyticsEvent = this.createAnalyticsEvent(payload);
      analyticsEvent.fire(ANALYTICS_MEDIA_CHANNEL);
    }
  }

  // The existing (semi)singleton (last in `instances`) event handler is proven to be problematic
  // Replaced with the new mechanism in https://product-fabric.atlassian.net/browse/MEX-2454
  // Remove after product adoption / rollout
}
_ClipboardImpl = ClipboardImpl;
_defineProperty(ClipboardImpl, "instances", []);
_defineProperty(ClipboardImpl, "legacyHandleEvent", event => {
  // From https://product-fabric.atlassian.net/browse/MEX-1281 ,disable the handler if event target is input
  if (event.target instanceof HTMLInputElement) {
    return;
  }

  // last in, first served to support multiple instances listening at once
  const instance = _ClipboardImpl.latestInstance;
  if (instance) {
    /*
         Browser behaviour for getting files from the clipboard is very inconsistent and buggy.
         @see https://hello.atlassian.net/wiki/spaces/FIL/pages/141485494/RFC+099+Clipboard+browser+inconsistency
          TODO https://product-fabric.atlassian.net/browse/BMPT-1285 Investigate implementation
       */
    const {
      clipboardData
    } = event;
    if (clipboardData && clipboardData.files) {
      const fileSource = clipboardData.types.length === 1 ? LocalFileSource.PastedScreenshot : LocalFileSource.PastedFile;
      const filesArray = getFilesFromClipboard(clipboardData.files).map(file => ({
        file,
        source: fileSource
      }));
      // only the latest instance gets the event

      if (filesArray.length > 0) {
        instance.onFilesPasted.call(instance, filesArray);
      }
    }
  }
});
export class ClipboardBase extends LocalUploadComponentReact {
  constructor(props) {
    super(props, COMPONENT_NAME);
    this.clipboard = new ClipboardImpl(this.uploadService, this.props.config.container, this.props.config.onPaste, this.props.createAnalyticsEvent, props.featureFlags);
  }
  componentDidMount() {
    this.clipboard.activate();
  }
  componentDidUpdate(prevProps) {
    if (prevProps.featureFlags !== this.props.featureFlags) {
      this.clipboard.featureFlags = this.props.featureFlags;
    }
    // refreshes uploadParams as only set once in parent constructor
    if (prevProps.config.uploadParams !== this.props.config.uploadParams) {
      this.setUploadParams(this.props.config.uploadParams);
    }
  }
  componentWillUnmount() {
    this.clipboard.deactivate();
  }
  render() {
    return /*#__PURE__*/React.createElement(ErrorFlagGroup, {
      flagData: this.state.errorFlags,
      onFlagDismissed: this.dismissErrorFlag
    });
  }
}
_defineProperty(ClipboardBase, "defaultProps", {
  config: defaultConfig
});
export default ClipboardBase;
export const Clipboard = withMediaAnalyticsContext(getPackageAttributes(COMPONENT_NAME))(withAnalyticsEvents()(ClipboardBase));