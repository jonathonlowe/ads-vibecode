import { ConcurrentExperience, ExperiencePerformanceTypes, ExperienceTypes } from '@atlaskit/ufo';
import { getFeatureFlagKeysAllProducts } from '@atlaskit/media-common';
import { getMediaEnvironment, getMediaRegion } from '@atlaskit/media-client';
const packageName = "@atlaskit/media-picker";
const packageVersion = "68.0.3";
let ufoExperience;
const initExperience = (id, componentName) => {
  if (!ufoExperience) {
    const inlineExperience = {
      platform: {
        component: `media-picker-${componentName}`
      },
      type: ExperienceTypes.Experience,
      performanceType: ExperiencePerformanceTypes.InlineResult,
      featureFlags: getFeatureFlagKeysAllProducts()
    };
    ufoExperience = new ConcurrentExperience('media-upload', inlineExperience);
  }
  return ufoExperience.getInstance(id);
};
const getExperience = id => {
  if (ufoExperience) {
    return ufoExperience.getInstance(id);
  }
};
export const startMediaUploadUfoExperience = (id, componentName) => {
  initExperience(id, componentName).start();
};
export const succeedMediaUploadUfoExperience = (id, properties) => {
  var _getExperience;
  (_getExperience = getExperience(id)) === null || _getExperience === void 0 ? void 0 : _getExperience.success({
    metadata: {
      fileAttributes: properties,
      packageName,
      packageVersion,
      mediaEnvironment: getMediaEnvironment(),
      mediaRegion: getMediaRegion()
    }
  });
};
export const failMediaUploadUfoExperience = (id, properties) => {
  var _getExperience2;
  const refinedMetadata = {
    ...properties,
    packageName,
    packageVersion,
    mediaEnvironment: getMediaEnvironment(),
    mediaRegion: getMediaRegion()
  };
  (_getExperience2 = getExperience(id)) === null || _getExperience2 === void 0 ? void 0 : _getExperience2.failure({
    metadata: refinedMetadata
  });
};