/* styled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["valuePercent", "style"];
import "./styled.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { forwardRef } from 'react';
import { B200, B300, B400, N30, N40, N50A, N60A } from '@atlaskit/theme/colors';
// Styles are split up to avoid edge-cases with TS implementations between `css` and `cssMap` with some
// of these edge-case pseudo-selectors.
// Previously, in Emotion, these selectors weren't consolidated, eg. `&::webkit-thumb, &::moz-thumb`
// would not be parsed by either browser, but this may no longer be the case in Compiled
var webkitStyles = null;
var firefoxStyles = null;
var baseStyles = null;
var themeStyles = null;

/**
 * __Input__
 * Internal-only styled input component.
 */
export var Input = /*#__PURE__*/forwardRef(function (props, ref) {
  var valuePercent = props.valuePercent,
    style = props.style,
    strippedProps = _objectWithoutProperties(props, _excluded);
  return /*#__PURE__*/React.createElement("input", _extends({}, strippedProps, {
    ref: ref,
    className: ax(["_1bsb1osq _4t3i1ylp _bfhk1j28 _j5dh13gf _1j552wxo _nt751r31 _49pcglyw _1hvw1o36", "_wstuglyw _h2ksglyw _1kdl1q5u _m8f8g56u _1yz62hjt _1bdkusvi _u98z7vkz _1j707vkz _1esf4alp _4w431ik2 _yfyntlke _1sdc196n _18k7v77o _1cdcglyw _10lridpf _g6tdyh40 _vi4t2hjt _1g2h1osq _168l1y44 _9u3f2hce _1g741hsc _1d8tmgnk _np53xlkz _18tdtlke _1p201osq _1yte13gf _5i7a13gf", "_1yq0glyw _108m1q5u _1rf3g56u _1yeu2hjt _g4ppusvi _r7637vkz _1mn57vkz _12el4alp _1oqe1ik2 _10o7tlke _1kzev77o _15raidpf _e8hnidpf _37ywyh40 _1tcb2hjt _aoww1osq _1kd21y44 _vt2s1w6o _1ssqtlke _ru37idpf _1gvoyh40 _1nx42hjt _1f5t1osq _142y1y44 _d7w62hce _b3fmtlke _1vq313gf _1fov13gf _34m613gf", "_14h11gpr _15dpptpz _18lx1n8f _jxarjiw3 _ydqg1xpu _1jhcjiw3 _1rucy2jz _164c3zdg"]),
    style: _objectSpread(_objectSpread({}, {
      // We are creating a css variable to control the "progress" portion of the range input
      // This avoids us needing to create a new css class for each new percentage value
      '--track-fg-width': "".concat(valuePercent, "%")
    }), {}, {
      "--_171tp53": ix("var(--thumb-bg, ".concat("var(--ds-background-neutral-bold, ".concat(B400, ")"), ")")),
      "--_cghoza": ix("var(--ds-UNSAFE-transparent, ".concat("0 4px 8px -2px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")")),
      "--_19g1tth": ix("var(--ds-background-neutral, ".concat(N30, ")")),
      "--_1eby16r": ix("var(--ds-background-neutral-bold, ".concat(B400, ")")),
      "--_14t3dsg": ix("var(--ds-background-neutral-bold-hovered, ".concat(B300, ")")),
      "--_rf9ekb": ix("var(--ds-background-neutral-hovered, ".concat(N40, ")")),
      "--_1pam7of": ix("var(--ds-background-neutral-bold-pressed, ".concat(B200, ")")),
      "--_xjqa3d": ix("var(--ds-border-focused, ".concat(B200, ")"))
    })
  }));
});
Input.displayName = 'InputRange';