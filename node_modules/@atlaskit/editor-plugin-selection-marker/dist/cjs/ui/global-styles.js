"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalStylesWrapper = void 0;
var _react = require("@emotion/react");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-global-styles, @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/**
 * Unset the selection background color as we are using our own
 * Otherwise we might have a mix of grey + our selection marker depending on the state.
 *
 * Edge cases:
 * - We do not apply this reset to input fields (ie. expand case) because otherwise
 * selection highlight will not show on those.
 * - We do not apply this reset when the editor is disabled
 */
var oldGlobalStyles = (0, _react.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '.ProseMirror:not(:focus):not([contenteditable="false"]) ::selection:not(input)': {
    background: 'unset'
  }
});

/**
 * Unset the selection background color as we are using our own
 * Otherwise we might have a mix of grey + our selection marker depending on the state.
 *
 * Edge cases:
 * - We do not apply this reset to input fields or code blocks (ie. expand case) because otherwise
 * selection highlight will not show on those.
 * - We do not apply this reset when the editor is disabled
 */
var globalStyles = (0, _react.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '.ProseMirror:not(:focus):not([contenteditable="false"]) ::selection:not(input, .cm-editor)': {
    background: 'unset'
  }
});
var GlobalStylesWrapper = exports.GlobalStylesWrapper = function GlobalStylesWrapper() {
  if ((0, _experiments.editorExperiment)('platform_editor_advanced_code_blocks', true)) {
    return (0, _react.jsx)(_react.Global, {
      styles: globalStyles
    });
  }
  return (0, _react.jsx)(_react.Global, {
    styles: oldGlobalStyles
  });
};