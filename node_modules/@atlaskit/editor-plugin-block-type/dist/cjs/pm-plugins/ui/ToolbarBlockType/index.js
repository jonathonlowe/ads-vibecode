"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _styles = require("@atlaskit/editor-common/styles");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _text = _interopRequireDefault(require("@atlaskit/icon/core/text"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _primitives = require("@atlaskit/primitives");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _tokens = require("@atlaskit/tokens");
var _blockTypes = require("../../block-types");
var _blocktypeButton = require("./blocktype-button");
var _icons = require("./icons");
var _styled = require("./styled");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var buttonWrapperStyles = (0, _primitives.xcss)({
  flexShrink: 0
});
// eslint-disable-next-line @repo/internal/react/no-class-components
var ToolbarBlockType = /*#__PURE__*/function (_React$PureComponent) {
  function ToolbarBlockType() {
    var _this;
    (0, _classCallCheck2.default)(this, ToolbarBlockType);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ToolbarBlockType, [].concat(args));
    (0, _defineProperty2.default)(_this, "state", {
      active: false,
      isOpenedByKeyboard: false,
      typographyTheme: undefined,
      observer: null
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, _defineProperty2.default)(_this, "onOpenChange", function (attrs) {
      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {
        active: attrs.isOpen,
        isOpenedByKeyboard: attrs.isOpenedByKeyboard
      }));
    });
    (0, _defineProperty2.default)(_this, "handleTriggerClick", function () {
      _this.onOpenChange({
        isOpen: !_this.state.active,
        isOpenedByKeyboard: false
      });
    });
    (0, _defineProperty2.default)(_this, "handleTriggerByKeyboard", function (event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        _this.onOpenChange({
          isOpen: !_this.state.active,
          isOpenedByKeyboard: true
        });
      }
    });
    (0, _defineProperty2.default)(_this, "createItems", function () {
      var formatMessage = _this.props.intl.formatMessage;
      var _this$props$pluginSta = _this.props.pluginState,
        currentBlockType = _this$props$pluginSta.currentBlockType,
        availableBlockTypesInDropdown = _this$props$pluginSta.availableBlockTypesInDropdown,
        formattingIsPresent = _this$props$pluginSta.formattingIsPresent;
      var items = availableBlockTypesInDropdown.map(function (blockType, index) {
        var isActive = currentBlockType === blockType;
        var tagName = blockType.tagName || 'p';
        var Tag = tagName;
        var keyMap = (0, _keymaps.findKeymapByDescription)(blockType.title.defaultMessage);
        var icon = (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_4') ? blockType === null || blockType === void 0 ? void 0 : blockType.icon : blockType.LEGACY_icon;
        var item = {
          content:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          (0, _react2.jsx)("div", {
            css: (0, _styled.blockTypeMenuItemStyle)(tagName, isActive, _this.state.typographyTheme)
          }, (0, _react2.jsx)(Tag, null, formatMessage(blockType.title))),
          value: blockType,
          'aria-label': (0, _keymaps.tooltip)(keyMap, formatMessage(blockType.title)),
          key: "".concat(blockType.name, "-").concat(index),
          elemBefore: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? icon : undefined,
          elemAfter:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          (0, _react2.jsx)("div", {
            css: [_styled.keyboardShortcut, isActive && _styled.keyboardShortcutSelect]
          }, (0, _keymaps.tooltip)(keyMap)),
          isActive: isActive
        };
        return item;
      });
      if (availableBlockTypesInDropdown.map(function (blockType) {
        return blockType.name;
      }).includes('blockquote') && (0, _experiments.editorExperiment)('platform_editor_controls', 'control')) {
        var clearFormattingItem = {
          content: (0, _react2.jsx)("div", null, (0, _react2.jsx)("p", null, _messages.toolbarMessages.clearFormatting.defaultMessage)),
          value: {
            name: 'clearFormatting'
          },
          'aria-label': (0, _keymaps.tooltip)(_keymaps.clearFormatting, _messages.toolbarMessages.clearFormatting.defaultMessage),
          key: 'clear-formatting',
          elemAfter:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          (0, _react2.jsx)("div", {
            css: [_styled.keyboardShortcut]
          }, (0, _keymaps.tooltip)(_keymaps.clearFormatting)),
          isActive: false,
          isDisabled: currentBlockType === _blockTypes.NORMAL_TEXT && !formattingIsPresent
        };
        return [{
          items: items
        }, {
          items: [clearFormattingItem]
        }];
      }
      return [{
        items: items
      }];
    });
    (0, _defineProperty2.default)(_this, "handleSelectBlockType", function (_ref) {
      var item = _ref.item,
        _ref$shouldCloseMenu = _ref.shouldCloseMenu,
        shouldCloseMenu = _ref$shouldCloseMenu === void 0 ? true : _ref$shouldCloseMenu;
      var blockType = item.value;
      if (blockType.name === 'blockquote') {
        _this.props.wrapBlockQuote(blockType.name);
      } else {
        if (blockType.name === 'clearFormatting') {
          _this.props.clearFormatting();
        } else {
          var fromBlockQuote = _this.props.pluginState.currentBlockType.name === 'blockquote';
          _this.props.setTextLevel(blockType.name, fromBlockQuote);
        }
      }
      if (shouldCloseMenu) {
        _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {
          active: false
        }));
      }
    });
    return _this;
  }
  (0, _inherits2.default)(ToolbarBlockType, _React$PureComponent);
  return (0, _createClass2.default)(ToolbarBlockType, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var observer = new _tokens.ThemeMutationObserver(function (_ref2) {
        var typography = _ref2.typography;
        if (typography !== _this2.state.typographyTheme) {
          _this2.setState({
            typographyTheme: typography
          });
        }
      });
      this.setState({
        observer: observer
      });
      observer.observe();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$state$observer;
      (_this$state$observer = this.state.observer) === null || _this$state$observer === void 0 || _this$state$observer.disconnect();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$state = this.state,
        active = _this$state.active,
        isOpenedByKeyboard = _this$state.isOpenedByKeyboard;
      var _this$props = this.props,
        popupsMountPoint = _this$props.popupsMountPoint,
        popupsBoundariesElement = _this$props.popupsBoundariesElement,
        popupsScrollableElement = _this$props.popupsScrollableElement,
        isSmall = _this$props.isSmall,
        isReducedSpacing = _this$props.isReducedSpacing,
        _this$props$pluginSta2 = _this$props.pluginState,
        currentBlockType = _this$props$pluginSta2.currentBlockType,
        blockTypesDisabled = _this$props$pluginSta2.blockTypesDisabled,
        availableBlockTypes = _this$props$pluginSta2.availableBlockTypes,
        availableBlockTypesInDropdown = _this$props$pluginSta2.availableBlockTypesInDropdown,
        shouldUseDefaultRole = _this$props.shouldUseDefaultRole,
        formatMessage = _this$props.intl.formatMessage,
        api = _this$props.api;
      var isHeadingDisabled = !availableBlockTypes.some(function (blockType) {
        return blockType.nodeName === 'heading';
      });
      if (isHeadingDisabled) {
        return null;
      }
      var blockTypeTitles = availableBlockTypesInDropdown.filter(function (blockType) {
        return blockType.name === currentBlockType.name;
      }).map(function (blockType) {
        return blockType.title;
      });
      var defaultIcon = (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_4') ? (0, _react2.jsx)(_text.default, {
        label: ""
      }) : (0, _react2.jsx)(_icons.Text, null);
      var currentIcon = (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_4') ? currentBlockType === null || currentBlockType === void 0 ? void 0 : currentBlockType.icon : currentBlockType === null || currentBlockType === void 0 ? void 0 : currentBlockType.LEGACY_icon;
      if (!this.props.isDisabled && !blockTypesDisabled) {
        var items = this.createItems();
        var button = (0, _react2.jsx)(_blocktypeButton.BlockTypeButton, {
          isSmall: isSmall,
          isReducedSpacing: isReducedSpacing,
          selected: active,
          disabled: false,
          title: blockTypeTitles[0],
          onClick: this.handleTriggerClick,
          onKeyDown: this.handleTriggerByKeyboard,
          formatMessage: formatMessage,
          "aria-expanded": active,
          blockTypeName: currentBlockType.name,
          blockTypeIcon: currentIcon || defaultIcon
        });
        return (0, _react2.jsx)("span", {
          css: (0, _experiments.editorExperiment)('platform_editor_blockquote_in_text_formatting_menu', true) ?
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          [_styles.wrapperStyle, _styled.floatingToolbarWrapperStyle] :
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          _styles.wrapperStyle
        }, (0, _react2.jsx)(_uiMenu.DropdownMenuWithKeyboardNavigation, {
          items: items,
          onOpenChange: this.onOpenChange,
          onItemActivated: this.handleSelectBlockType,
          isOpen: active,
          mountTo: popupsMountPoint,
          boundariesElement: popupsBoundariesElement,
          scrollableElement: popupsScrollableElement,
          zIndex: _editorSharedStyles.akEditorMenuZIndex,
          fitHeight: 360,
          fitWidth: 106,
          section: {
            hasSeparator: true
          },
          shouldUseDefaultRole: shouldUseDefaultRole
          // hasSeparator={true}
          ,
          shouldFocusFirstItem: function shouldFocusFirstItem() {
            if (isOpenedByKeyboard) {
              // eslint-disable-next-line @repo/internal/react/no-set-state-inside-render
              _this3.setState(_objectSpread(_objectSpread({}, _this3.state), {}, {
                isOpenedByKeyboard: false
              }));
            }
            return isOpenedByKeyboard;
          }
        }, (0, _platformFeatureFlags.fg)('platform_editor_comments_toolbar_responsiveness') ?
        // extra wrapper added to prevent flex shrinking of the button
        (0, _react2.jsx)(_primitives.Box, {
          xcss: buttonWrapperStyles
        }, button) : button), !(api !== null && api !== void 0 && api.primaryToolbar) && (0, _react2.jsx)("span", {
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          css: _styles.separatorStyles
        }));
      }
      return (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        (0, _react2.jsx)("span", {
          css: _styles.wrapperStyle
        }, (0, _react2.jsx)(_blocktypeButton.BlockTypeButton, {
          isSmall: isSmall,
          isReducedSpacing: isReducedSpacing,
          selected: active,
          disabled: true,
          title: blockTypeTitles[0],
          onClick: this.handleTriggerClick,
          onKeyDown: this.handleTriggerByKeyboard,
          formatMessage: formatMessage,
          "aria-expanded": active,
          blockTypeName: currentBlockType.name
        }), !(api !== null && api !== void 0 && api.primaryToolbar) && (0, _react2.jsx)("span", {
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          css: _styles.separatorStyles
        }))
      );
    }
  }]);
}(_react.default.PureComponent);
var _default = exports.default = (0, _reactIntlNext.injectIntl)(ToolbarBlockType);