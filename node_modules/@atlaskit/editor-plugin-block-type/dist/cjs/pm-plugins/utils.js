"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areBlockTypesDisabled = areBlockTypesDisabled;
exports.isNodeAWrappingBlockNode = exports.hasBlockQuoteInOptions = exports.createWrappingTextBlockRule = exports.createJoinNodesRule = exports.checkFormattingIsPresent = void 0;
var _mark = require("@atlaskit/editor-common/mark");
var _utils = require("@atlaskit/editor-common/utils");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _blockTypes = require("./block-types");
var isNodeAWrappingBlockNode = exports.isNodeAWrappingBlockNode = function isNodeAWrappingBlockNode(node) {
  if (!node) {
    return false;
  }
  return _blockTypes.WRAPPER_BLOCK_TYPES.some(function (blockNode) {
    return blockNode.name === node.type.name;
  });
};
var createJoinNodesRule = exports.createJoinNodesRule = function createJoinNodesRule(match, nodeType) {
  return (0, _utils.createWrappingJoinRule)({
    nodeType: nodeType,
    match: match,
    getAttrs: {},
    joinPredicate: function joinPredicate(_, node) {
      return node.type === nodeType;
    }
  });
};
var createWrappingTextBlockRule = exports.createWrappingTextBlockRule = function createWrappingTextBlockRule(_ref) {
  var match = _ref.match,
    nodeType = _ref.nodeType,
    getAttrs = _ref.getAttrs;
  var handler = function handler(state, match, start, end) {
    var fixedStart = Math.max(start, 1);
    var $start = state.doc.resolve(fixedStart);
    var attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
    var nodeBefore = $start.node(-1);
    if (nodeBefore && !nodeBefore.canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) {
      return null;
    }
    return state.tr.delete(fixedStart, end).setBlockType(fixedStart, fixedStart, nodeType, attrs);
  };
  return (0, _utils.createRule)(match, handler);
};

/**
 * Function will create a list of wrapper blocks present in a selection.
 */
function getSelectedWrapperNodes(state) {
  var nodes = [];
  if (state.selection) {
    var _state$selection = state.selection,
      $from = _state$selection.$from,
      $to = _state$selection.$to;
    var _state$schema$nodes = state.schema.nodes,
      blockquote = _state$schema$nodes.blockquote,
      panel = _state$schema$nodes.panel,
      orderedList = _state$schema$nodes.orderedList,
      bulletList = _state$schema$nodes.bulletList,
      listItem = _state$schema$nodes.listItem,
      caption = _state$schema$nodes.caption,
      codeBlock = _state$schema$nodes.codeBlock,
      decisionItem = _state$schema$nodes.decisionItem,
      decisionList = _state$schema$nodes.decisionList,
      taskItem = _state$schema$nodes.taskItem,
      taskList = _state$schema$nodes.taskList;
    var wrapperNodes = [blockquote, panel, orderedList, bulletList, listItem, codeBlock, decisionItem, decisionList, taskItem, taskList];
    wrapperNodes.push(caption);
    state.doc.nodesBetween($from.pos, $to.pos, function (node) {
      if (node.isBlock && wrapperNodes.indexOf(node.type) >= 0) {
        nodes.push(node.type);
      }
    });
  }
  return nodes;
}

/**
 * Function will check if changing block types: Paragraph, Heading is enabled.
 */
function areBlockTypesDisabled(state) {
  var nodesTypes = getSelectedWrapperNodes(state);
  var _state$schema$nodes2 = state.schema.nodes,
    panel = _state$schema$nodes2.panel,
    blockquote = _state$schema$nodes2.blockquote,
    bulletList = _state$schema$nodes2.bulletList,
    orderedList = _state$schema$nodes2.orderedList;
  if ((0, _experiments.editorExperiment)('platform_editor_blockquote_in_text_formatting_menu', true)) {
    var hasQuote = false;
    var hasNestedListInQuote = false;
    var _state$selection2 = state.selection,
      $from = _state$selection2.$from,
      $to = _state$selection2.$to;
    state.doc.nodesBetween($from.pos, $to.pos, function (node) {
      if (node.type === blockquote) {
        hasQuote = true;
        node.descendants(function (child) {
          if (child.type === bulletList || child.type === orderedList) {
            hasNestedListInQuote = true;
            return false;
          }
          return true;
        });
      }
      return !hasNestedListInQuote;
    });
    return nodesTypes.filter(function (type) {
      return type !== panel;
    }).length > 0 && (!hasQuote || hasNestedListInQuote);
  }
  return nodesTypes.filter(function (type) {
    return type !== panel;
  }).length > 0;
}
var blockStylingIsPresent = function blockStylingIsPresent(state) {
  var _state$selection3 = state.selection,
    from = _state$selection3.from,
    to = _state$selection3.to;
  var isBlockStyling = false;
  state.doc.nodesBetween(from, to, function (node) {
    if (_blockTypes.FORMATTING_NODE_TYPES.indexOf(node.type.name) !== -1) {
      isBlockStyling = true;
      return false;
    }
    return true;
  });
  return isBlockStyling;
};
var marksArePresent = function marksArePresent(state) {
  var activeMarkTypes = _blockTypes.FORMATTING_MARK_TYPES.filter(function (mark) {
    if (!!state.schema.marks[mark]) {
      var _state$selection4 = state.selection,
        $from = _state$selection4.$from,
        empty = _state$selection4.empty;
      var marks = state.schema.marks;
      if (empty) {
        return !!marks[mark].isInSet(state.storedMarks || $from.marks());
      }
      return (0, _mark.anyMarkActive)(state, marks[mark]);
    }
    return false;
  });
  return activeMarkTypes.length > 0;
};
var checkFormattingIsPresent = exports.checkFormattingIsPresent = function checkFormattingIsPresent(state) {
  return marksArePresent(state) || blockStylingIsPresent(state);
};
var hasBlockQuoteInOptions = exports.hasBlockQuoteInOptions = function hasBlockQuoteInOptions(dropdownOptions) {
  return !!dropdownOptions.find(function (blockType) {
    return blockType.name === 'blockquote';
  });
};