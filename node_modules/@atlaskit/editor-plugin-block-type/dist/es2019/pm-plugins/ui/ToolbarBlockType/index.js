import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { clearFormatting, findKeymapByDescription, tooltip } from '@atlaskit/editor-common/keymaps';
import { toolbarMessages } from '@atlaskit/editor-common/messages';
import { separatorStyles, wrapperStyle } from '@atlaskit/editor-common/styles';
import { DropdownMenuWithKeyboardNavigation as DropdownMenu } from '@atlaskit/editor-common/ui-menu';
import { akEditorMenuZIndex } from '@atlaskit/editor-shared-styles';
import TextIcon from '@atlaskit/icon/core/text';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { ThemeMutationObserver } from '@atlaskit/tokens';
import { NORMAL_TEXT } from '../../block-types';
import { BlockTypeButton } from './blocktype-button';
import { Text } from './icons';
import { blockTypeMenuItemStyle, floatingToolbarWrapperStyle, keyboardShortcut, keyboardShortcutSelect } from './styled';
const buttonWrapperStyles = xcss({
  flexShrink: 0
});
// eslint-disable-next-line @repo/internal/react/no-class-components
class ToolbarBlockType extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      active: false,
      isOpenedByKeyboard: false,
      typographyTheme: undefined,
      observer: null
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _defineProperty(this, "onOpenChange", attrs => {
      this.setState({
        ...this.state,
        active: attrs.isOpen,
        isOpenedByKeyboard: attrs.isOpenedByKeyboard
      });
    });
    _defineProperty(this, "handleTriggerClick", () => {
      this.onOpenChange({
        isOpen: !this.state.active,
        isOpenedByKeyboard: false
      });
    });
    _defineProperty(this, "handleTriggerByKeyboard", event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this.onOpenChange({
          isOpen: !this.state.active,
          isOpenedByKeyboard: true
        });
      }
    });
    _defineProperty(this, "createItems", () => {
      const {
        intl: {
          formatMessage
        }
      } = this.props;
      const {
        currentBlockType,
        availableBlockTypesInDropdown,
        formattingIsPresent
      } = this.props.pluginState;
      const items = availableBlockTypesInDropdown.map((blockType, index) => {
        const isActive = currentBlockType === blockType;
        const tagName = blockType.tagName || 'p';
        const Tag = tagName;
        const keyMap = findKeymapByDescription(blockType.title.defaultMessage);
        const icon = fg('platform_editor_controls_patch_4') ? blockType === null || blockType === void 0 ? void 0 : blockType.icon : blockType.LEGACY_icon;
        const item = {
          content:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          jsx("div", {
            css: blockTypeMenuItemStyle(tagName, isActive, this.state.typographyTheme)
          }, jsx(Tag, null, formatMessage(blockType.title))),
          value: blockType,
          'aria-label': tooltip(keyMap, formatMessage(blockType.title)),
          key: `${blockType.name}-${index}`,
          elemBefore: editorExperiment('platform_editor_controls', 'variant1') ? icon : undefined,
          elemAfter:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          jsx("div", {
            css: [keyboardShortcut, isActive && keyboardShortcutSelect]
          }, tooltip(keyMap)),
          isActive
        };
        return item;
      });
      if (availableBlockTypesInDropdown.map(blockType => blockType.name).includes('blockquote') && editorExperiment('platform_editor_controls', 'control')) {
        const clearFormattingItem = {
          content: jsx("div", null, jsx("p", null, toolbarMessages.clearFormatting.defaultMessage)),
          value: {
            name: 'clearFormatting'
          },
          'aria-label': tooltip(clearFormatting, toolbarMessages.clearFormatting.defaultMessage),
          key: 'clear-formatting',
          elemAfter:
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          jsx("div", {
            css: [keyboardShortcut]
          }, tooltip(clearFormatting)),
          isActive: false,
          isDisabled: currentBlockType === NORMAL_TEXT && !formattingIsPresent
        };
        return [{
          items
        }, {
          items: [clearFormattingItem]
        }];
      }
      return [{
        items
      }];
    });
    _defineProperty(this, "handleSelectBlockType", ({
      item,
      shouldCloseMenu = true
    }) => {
      const blockType = item.value;
      if (blockType.name === 'blockquote') {
        this.props.wrapBlockQuote(blockType.name);
      } else {
        if (blockType.name === 'clearFormatting') {
          this.props.clearFormatting();
        } else {
          const fromBlockQuote = this.props.pluginState.currentBlockType.name === 'blockquote';
          this.props.setTextLevel(blockType.name, fromBlockQuote);
        }
      }
      if (shouldCloseMenu) {
        this.setState({
          ...this.state,
          active: false
        });
      }
    });
  }
  componentDidMount() {
    const observer = new ThemeMutationObserver(({
      typography
    }) => {
      if (typography !== this.state.typographyTheme) {
        this.setState({
          typographyTheme: typography
        });
      }
    });
    this.setState({
      observer
    });
    observer.observe();
  }
  componentWillUnmount() {
    var _this$state$observer;
    (_this$state$observer = this.state.observer) === null || _this$state$observer === void 0 ? void 0 : _this$state$observer.disconnect();
  }
  render() {
    const {
      active,
      isOpenedByKeyboard
    } = this.state;
    const {
      popupsMountPoint,
      popupsBoundariesElement,
      popupsScrollableElement,
      isSmall,
      isReducedSpacing,
      pluginState: {
        currentBlockType,
        blockTypesDisabled,
        availableBlockTypes,
        availableBlockTypesInDropdown
      },
      shouldUseDefaultRole,
      intl: {
        formatMessage
      },
      api
    } = this.props;
    const isHeadingDisabled = !availableBlockTypes.some(blockType => blockType.nodeName === 'heading');
    if (isHeadingDisabled) {
      return null;
    }
    const blockTypeTitles = availableBlockTypesInDropdown.filter(blockType => blockType.name === currentBlockType.name).map(blockType => blockType.title);
    const defaultIcon = fg('platform_editor_controls_patch_4') ? jsx(TextIcon, {
      label: ""
    }) : jsx(Text, null);
    const currentIcon = fg('platform_editor_controls_patch_4') ? currentBlockType === null || currentBlockType === void 0 ? void 0 : currentBlockType.icon : currentBlockType === null || currentBlockType === void 0 ? void 0 : currentBlockType.LEGACY_icon;
    if (!this.props.isDisabled && !blockTypesDisabled) {
      const items = this.createItems();
      const button = jsx(BlockTypeButton, {
        isSmall: isSmall,
        isReducedSpacing: isReducedSpacing,
        selected: active,
        disabled: false,
        title: blockTypeTitles[0],
        onClick: this.handleTriggerClick,
        onKeyDown: this.handleTriggerByKeyboard,
        formatMessage: formatMessage,
        "aria-expanded": active,
        blockTypeName: currentBlockType.name,
        blockTypeIcon: currentIcon || defaultIcon
      });
      return jsx("span", {
        css: editorExperiment('platform_editor_blockquote_in_text_formatting_menu', true) ?
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        [wrapperStyle, floatingToolbarWrapperStyle] :
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        wrapperStyle
      }, jsx(DropdownMenu, {
        items: items,
        onOpenChange: this.onOpenChange,
        onItemActivated: this.handleSelectBlockType,
        isOpen: active,
        mountTo: popupsMountPoint,
        boundariesElement: popupsBoundariesElement,
        scrollableElement: popupsScrollableElement,
        zIndex: akEditorMenuZIndex,
        fitHeight: 360,
        fitWidth: 106,
        section: {
          hasSeparator: true
        },
        shouldUseDefaultRole: shouldUseDefaultRole
        // hasSeparator={true}
        ,
        shouldFocusFirstItem: () => {
          if (isOpenedByKeyboard) {
            // eslint-disable-next-line @repo/internal/react/no-set-state-inside-render
            this.setState({
              ...this.state,
              isOpenedByKeyboard: false
            });
          }
          return isOpenedByKeyboard;
        }
      }, fg('platform_editor_comments_toolbar_responsiveness') ?
      // extra wrapper added to prevent flex shrinking of the button
      jsx(Box, {
        xcss: buttonWrapperStyles
      }, button) : button), !(api !== null && api !== void 0 && api.primaryToolbar) && jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: separatorStyles
      }));
    }
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      jsx("span", {
        css: wrapperStyle
      }, jsx(BlockTypeButton, {
        isSmall: isSmall,
        isReducedSpacing: isReducedSpacing,
        selected: active,
        disabled: true,
        title: blockTypeTitles[0],
        onClick: this.handleTriggerClick,
        onKeyDown: this.handleTriggerByKeyboard,
        formatMessage: formatMessage,
        "aria-expanded": active,
        blockTypeName: currentBlockType.name
      }), !(api !== null && api !== void 0 && api.primaryToolbar) && jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: separatorStyles
      }))
    );
  }
}
export default injectIntl(ToolbarBlockType);