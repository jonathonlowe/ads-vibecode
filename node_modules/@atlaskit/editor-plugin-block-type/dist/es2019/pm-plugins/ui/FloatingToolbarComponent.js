import React, { useCallback } from 'react';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import ToolbarBlockType from './ToolbarBlockType';
const FloatingToolbarSettings = {
  isSmall: true,
  disabled: false,
  isToolbarReducedSpacing: true,
  shouldUseDefaultRole: false
};
export function FloatingToolbarComponent({
  api
}) {
  const {
    blockTypeState
  } = useSharedPluginState(api, ['blockType']);
  const boundSetBlockType = useCallback(name => {
    var _api$core, _api$blockType, _api$blockType$comman;
    return api === null || api === void 0 ? void 0 : (_api$core = api.core) === null || _api$core === void 0 ? void 0 : _api$core.actions.execute(api === null || api === void 0 ? void 0 : (_api$blockType = api.blockType) === null || _api$blockType === void 0 ? void 0 : (_api$blockType$comman = _api$blockType.commands) === null || _api$blockType$comman === void 0 ? void 0 : _api$blockType$comman.setTextLevel(name, INPUT_METHOD.FLOATING_TB));
  }, [api]);
  const wrapBlockQuote = useCallback(() => {
    var _api$core2, _api$blockType2, _api$blockType2$comma;
    return api === null || api === void 0 ? void 0 : (_api$core2 = api.core) === null || _api$core2 === void 0 ? void 0 : _api$core2.actions.execute(api === null || api === void 0 ? void 0 : (_api$blockType2 = api.blockType) === null || _api$blockType2 === void 0 ? void 0 : (_api$blockType2$comma = _api$blockType2.commands) === null || _api$blockType2$comma === void 0 ? void 0 : _api$blockType2$comma.insertBlockQuote(INPUT_METHOD.FLOATING_TB));
  }, [api]);
  const clearFormatting = useCallback(() => {
    var _api$core3, _api$blockType3, _api$blockType3$comma;
    return api === null || api === void 0 ? void 0 : (_api$core3 = api.core) === null || _api$core3 === void 0 ? void 0 : _api$core3.actions.execute(api === null || api === void 0 ? void 0 : (_api$blockType3 = api.blockType) === null || _api$blockType3 === void 0 ? void 0 : (_api$blockType3$comma = _api$blockType3.commands) === null || _api$blockType3$comma === void 0 ? void 0 : _api$blockType3$comma.clearFormatting(INPUT_METHOD.FLOATING_TB));
  }, [api]);
  return /*#__PURE__*/React.createElement(ToolbarBlockType, {
    isSmall: FloatingToolbarSettings.isSmall,
    isDisabled: FloatingToolbarSettings.disabled,
    isReducedSpacing: editorExperiment('platform_editor_controls', 'variant1') ? false : FloatingToolbarSettings.isToolbarReducedSpacing,
    setTextLevel: boundSetBlockType
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    pluginState: blockTypeState,
    wrapBlockQuote: wrapBlockQuote,
    clearFormatting: clearFormatting,
    shouldUseDefaultRole: FloatingToolbarSettings.shouldUseDefaultRole,
    api: api
  });
}