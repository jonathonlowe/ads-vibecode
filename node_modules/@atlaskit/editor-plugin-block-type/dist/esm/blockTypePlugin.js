import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { extendedBlockquote, blockquoteWithoutNonBodiedMacros, hardBreak, heading } from '@atlaskit/adf-schema';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { keymap, tooltip } from '@atlaskit/editor-common/keymaps';
import { blockTypeMessages as messages } from '@atlaskit/editor-common/messages';
import { IconHeading, IconQuote } from '@atlaskit/editor-common/quick-insert';
import { ToolbarSize } from '@atlaskit/editor-common/types';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { clearFormatting as _clearFormatting, insertBlockQuoteWithAnalytics, insertBlockQuoteWithAnalyticsCommand, setBlockTypeWithAnalytics } from './pm-plugins/commands/block-type';
import inputRulePlugin from './pm-plugins/input-rule';
import keymapPlugin from './pm-plugins/keymap';
import { createPlugin, pluginKey } from './pm-plugins/main';
import { FloatingToolbarComponent } from './pm-plugins/ui/FloatingToolbarComponent';
import { PrimaryToolbarComponent } from './pm-plugins/ui/PrimaryToolbarComponent';
var headingPluginOptions = function headingPluginOptions(_ref, isAllowed, editorAnalyticsApi) {
  var formatMessage = _ref.formatMessage;
  if (!isAllowed) {
    return [];
  }
  return Array.from({
    length: 6
  }, function (_v, idx) {
    var level = idx + 1;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var descriptionDescriptor = messages["heading".concat(level, "Description")];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var keyshortcut = tooltip(keymap["toggleHeading".concat(level)]);
    var id = "heading".concat(level);
    return {
      id: id,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      title: formatMessage(messages[id]),
      description: formatMessage(descriptionDescriptor),
      priority: 1300,
      keywords: ["h".concat(level)],
      keyshortcut: keyshortcut,
      icon: function icon() {
        return /*#__PURE__*/React.createElement(IconHeading, {
          level: level
        });
      },
      action: function action(insert, state) {
        var tr = insert(state.schema.nodes.heading.createChecked({
          level: level
        }));
        editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
          action: ACTION.FORMATTED,
          actionSubject: ACTION_SUBJECT.TEXT,
          eventType: EVENT_TYPE.TRACK,
          actionSubjectId: ACTION_SUBJECT_ID.FORMAT_HEADING,
          attributes: {
            inputMethod: INPUT_METHOD.QUICK_INSERT,
            newHeadingLevel: level
          }
        })(tr);
        return tr;
      }
    };
  });
};
var blockquotePluginOptions = function blockquotePluginOptions(_ref2, isAllowed, editorAnalyticsApi) {
  var formatMessage = _ref2.formatMessage;
  if (!isAllowed) {
    return [];
  }
  return [{
    id: 'blockquote',
    title: formatMessage(messages.blockquote),
    description: formatMessage(messages.blockquoteDescription),
    priority: 1300,
    keyshortcut: '>',
    icon: function icon() {
      return /*#__PURE__*/React.createElement(IconQuote, null);
    },
    action: function action(insert, state) {
      var tr = insert(state.schema.nodes.blockquote.createChecked({}, state.schema.nodes.paragraph.createChecked()));
      editorAnalyticsApi === null || editorAnalyticsApi === void 0 || editorAnalyticsApi.attachAnalyticsEvent({
        action: ACTION.FORMATTED,
        actionSubject: ACTION_SUBJECT.TEXT,
        eventType: EVENT_TYPE.TRACK,
        actionSubjectId: ACTION_SUBJECT_ID.FORMAT_BLOCK_QUOTE,
        attributes: {
          inputMethod: INPUT_METHOD.QUICK_INSERT
        }
      })(tr);
      return tr;
    }
  }];
};
var blockTypePlugin = function blockTypePlugin(_ref3) {
  var _api$primaryToolbar;
  var options = _ref3.config,
    api = _ref3.api;
  var primaryToolbarComponent = function primaryToolbarComponent(_ref4) {
    var popupsMountPoint = _ref4.popupsMountPoint,
      popupsBoundariesElement = _ref4.popupsBoundariesElement,
      popupsScrollableElement = _ref4.popupsScrollableElement,
      toolbarSize = _ref4.toolbarSize,
      disabled = _ref4.disabled,
      isToolbarReducedSpacing = _ref4.isToolbarReducedSpacing;
    var isSmall = options && options.isUndoRedoButtonsEnabled ? toolbarSize < ToolbarSize.XXL : toolbarSize < ToolbarSize.XL;
    if (fg('platform_editor_toolbar_responsive_fixes')) {
      isSmall = toolbarSize < ToolbarSize.XXL;
    }
    return /*#__PURE__*/React.createElement(PrimaryToolbarComponent, {
      isSmall: isSmall,
      disabled: disabled,
      isToolbarReducedSpacing: isToolbarReducedSpacing,
      api: api,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      shouldUseDefaultRole: false
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'blockType',
    component: primaryToolbarComponent
  });
  return {
    name: 'blockType',
    nodes: function nodes() {
      var blockquote = editorExperiment('platform_editor_nested_non_bodied_macros', 'test', {
        exposure: false
      }) ? extendedBlockquote : blockquoteWithoutNonBodiedMacros;
      var nodes = [{
        name: 'heading',
        node: heading
      }, {
        name: 'blockquote',
        node: blockquote
      }, {
        name: 'hardBreak',
        node: hardBreak
      }];
      if (options && options.allowBlockType) {
        var exclude = options.allowBlockType.exclude ? options.allowBlockType.exclude : [];
        return nodes.filter(function (node) {
          return exclude.indexOf(node.name) === -1;
        });
      }
      return nodes;
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'blockType',
        plugin: function plugin(_ref5) {
          var dispatch = _ref5.dispatch;
          return createPlugin(api, dispatch, options && options.lastNodeMustBeParagraph, options === null || options === void 0 ? void 0 : options.includeBlockQuoteAsTextstyleOption);
        }
      }, {
        name: 'blockTypeInputRule',
        plugin: function plugin(_ref6) {
          var _api$analytics;
          var schema = _ref6.schema,
            featureFlags = _ref6.featureFlags;
          return inputRulePlugin(api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions, schema, featureFlags);
        }
      },
      // Needs to be lower priority than editor-tables.tableEditing
      // plugin as it is currently swallowing right/down arrow events inside tables
      {
        name: 'blockTypeKeyMap',
        plugin: function plugin(_ref7) {
          var _api$analytics2;
          var schema = _ref7.schema,
            featureFlags = _ref7.featureFlags;
          return keymapPlugin(api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions, schema, featureFlags);
        }
      }];
    },
    actions: {
      insertBlockQuote: function insertBlockQuote(inputMethod) {
        var _api$analytics3;
        return insertBlockQuoteWithAnalytics(inputMethod, api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions);
      }
    },
    commands: {
      setTextLevel: function setTextLevel(level, inputMethod) {
        var _api$analytics4;
        var fromBlockQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return setBlockTypeWithAnalytics(level, inputMethod, api === null || api === void 0 || (_api$analytics4 = api.analytics) === null || _api$analytics4 === void 0 ? void 0 : _api$analytics4.actions, fromBlockQuote);
      },
      insertBlockQuote: function insertBlockQuote(inputMethod) {
        var _api$analytics5;
        return insertBlockQuoteWithAnalyticsCommand(inputMethod, api === null || api === void 0 || (_api$analytics5 = api.analytics) === null || _api$analytics5 === void 0 ? void 0 : _api$analytics5.actions);
      },
      clearFormatting: function clearFormatting(inputMethod) {
        var _api$analytics6;
        return _clearFormatting(inputMethod, api === null || api === void 0 || (_api$analytics6 = api.analytics) === null || _api$analytics6 === void 0 ? void 0 : _api$analytics6.actions);
      }
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return;
      }
      return pluginKey.getState(editorState);
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined,
    pluginsOptions: _objectSpread({
      selectionToolbar: function selectionToolbar() {
        var _api$selectionToolbar;
        if ((api === null || api === void 0 || (_api$selectionToolbar = api.selectionToolbar) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.sharedState) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.currentState()) === null || _api$selectionToolbar === void 0 ? void 0 : _api$selectionToolbar.toolbarDocking) === 'none' && editorExperiment('platform_editor_controls', 'variant1', {
          exposure: true
        })) {
          var toolbarCustom = {
            type: 'custom',
            render: function render(view, _idx, _dispatchAnalyticsEvent) {
              if (!view) {
                return;
              }
              return /*#__PURE__*/React.createElement(FloatingToolbarComponent, {
                api: api
              });
            },
            fallback: []
          };
          return {
            isToolbarAbove: true,
            items: [toolbarCustom],
            rank: 8
          };
        } else {
          return undefined;
        }
      }
    }, editorExperiment('platform_editor_insertion', 'control') && {
      quickInsert: function quickInsert(intl) {
        var _api$analytics7, _api$analytics8;
        var exclude = options && options.allowBlockType && options.allowBlockType.exclude ? options.allowBlockType.exclude : [];
        return [].concat(_toConsumableArray(blockquotePluginOptions(intl, exclude.indexOf('blockquote') === -1, api === null || api === void 0 || (_api$analytics7 = api.analytics) === null || _api$analytics7 === void 0 ? void 0 : _api$analytics7.actions)), _toConsumableArray(headingPluginOptions(intl, exclude.indexOf('heading') === -1, api === null || api === void 0 || (_api$analytics8 = api.analytics) === null || _api$analytics8 === void 0 ? void 0 : _api$analytics8.actions)));
      }
    })
  };
};
export { blockTypePlugin };