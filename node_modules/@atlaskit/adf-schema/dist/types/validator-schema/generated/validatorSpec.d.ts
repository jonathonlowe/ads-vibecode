export declare const alignment: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                align: {
                    type: string;
                    values: string[];
                };
            };
        };
    };
};
export declare const annotation: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                id: {
                    type: string;
                };
                annotationType: {
                    type: string;
                    values: string[];
                };
            };
        };
    };
};
export declare const backgroundColor: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                color: {
                    pattern: string;
                    type: string;
                };
            };
        };
    };
};
export declare const block_content: string[];
export declare const blockCard: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: ({
            props: {
                url: {
                    type: string;
                    optional: boolean;
                    validatorFn: string;
                };
                datasource: {
                    props: {
                        id: {
                            type: string;
                        };
                        parameters: {
                            type: string;
                        };
                        views: {
                            items: {
                                props: {
                                    properties: {
                                        optional: boolean;
                                        type: string;
                                    };
                                    type: {
                                        type: string;
                                    };
                                };
                            }[];
                            minItems: number;
                            type: string;
                        };
                    };
                };
                width: {
                    type: string;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                data?: undefined;
            };
        } | {
            props: {
                url: {
                    type: string;
                    validatorFn: string;
                    optional?: undefined;
                };
                datasource?: undefined;
                width?: undefined;
                layout?: undefined;
                data?: undefined;
            };
        } | {
            props: {
                data: {
                    type: string;
                };
                url?: undefined;
                datasource?: undefined;
                width?: undefined;
                layout?: undefined;
            };
        })[];
    };
    required: string[];
};
export declare const blockquote: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const blockRootOnly: string[];
export declare const bodiedExtension: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                extensionKey: {
                    minLength: number;
                    type: string;
                };
                extensionType: {
                    minLength: number;
                    type: string;
                };
                parameters: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                localId: {
                    minLength: number;
                    type: string;
                    optional: boolean;
                };
            };
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const bodiedExtension_with_marks: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
})[];
export declare const border: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                size: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                color: {
                    pattern: string;
                    type: string;
                };
            };
        };
    };
};
export declare const breakout: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                mode: {
                    type: string;
                    values: string[];
                };
                width: {
                    type: string;
                    optional: boolean;
                };
            };
        };
    };
};
export declare const bulletList: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
        };
    };
};
export declare const caption: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[][];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
    };
};
export declare const code: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
export declare const codeBlock: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                language: {
                    type: string;
                    optional: boolean;
                };
                uniqueId: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
    };
};
export declare const codeBlock_root_only: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const confluenceInlineComment: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                reference: {
                    type: string;
                };
            };
        };
    };
};
export declare const dataConsumer: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                sources: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                };
            };
        };
    };
};
export declare const date: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                timestamp: {
                    minLength: number;
                    type: string;
                };
            };
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const decisionItem: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    type: string;
                };
                state: {
                    type: string;
                };
            };
        };
        content: {
            type: string;
            items: string[];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
    };
};
export declare const decisionList: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    type: string;
                };
            };
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const doc: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        version: {
            type: string;
            values: number[];
        };
        content: {
            type: string;
            items: string[][];
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const em: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
export declare const embedCard: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                url: {
                    type: string;
                    validatorFn: string;
                };
                layout: {
                    type: string;
                    values: string[];
                };
                width: {
                    type: string;
                    maximum: number;
                    minimum: number;
                    optional: boolean;
                };
                originalHeight: {
                    type: string;
                    optional: boolean;
                };
                originalWidth: {
                    type: string;
                    optional: boolean;
                };
            };
        };
    };
};
export declare const emoji: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                shortName: {
                    type: string;
                };
                id: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const expand: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                title: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const expand_root_only: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const extension: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                extensionKey: {
                    minLength: number;
                    type: string;
                };
                extensionType: {
                    minLength: number;
                    type: string;
                };
                parameters: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                localId: {
                    minLength: number;
                    type: string;
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const extension_with_marks: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
})[];
export declare const extensionFrame: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
};
export declare const fragment: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    minLength: number;
                    type: string;
                };
                name: {
                    type: string;
                    optional: boolean;
                };
            };
        };
    };
};
export declare const hardBreak: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                text: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
            };
            optional: boolean;
        };
    };
};
export declare const heading: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                level: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                localId: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        content: {
            type: string;
            items: string[];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const heading_with_alignment: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const heading_with_indentation: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const heading_with_no_marks: (string | {
    props: {
        marks: {
            type: string;
            maxItems: number;
            items: any[];
            optional: boolean;
        };
    };
})[];
export declare const indentation: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                level: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
            };
        };
    };
};
export declare const inline_content: string[];
export declare const inlineCard: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: ({
            props: {
                url: {
                    type: string;
                    validatorFn: string;
                };
                data?: undefined;
            };
        } | {
            props: {
                data: {
                    type: string;
                };
                url?: undefined;
            };
        })[];
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
    required: string[];
};
export declare const inlineExtension: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                extensionKey: {
                    minLength: number;
                    type: string;
                };
                extensionType: {
                    minLength: number;
                    type: string;
                };
                parameters: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
                localId: {
                    minLength: number;
                    type: string;
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const inlineExtension_with_marks: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
})[];
export declare const layoutColumn: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
            };
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const layoutSection: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const layoutSection_full: (string | {
    props: {
        content: {
            type: string;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const layoutSection_with_single_column: (string | {
    props: {
        attrs: {
            props: {
                columnRuleStyle: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const link: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                href: {
                    type: string;
                    validatorFn: string;
                };
                title: {
                    type: string;
                    optional: boolean;
                };
                id: {
                    type: string;
                    optional: boolean;
                };
                collection: {
                    type: string;
                    optional: boolean;
                };
                occurrenceKey: {
                    type: string;
                    optional: boolean;
                };
            };
        };
    };
};
export declare const listItem: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            isTupleLike: boolean;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const listItem_with_nested_decision: (string | {
    props: {
        content: {
            type: string;
            isTupleLike: boolean;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
})[];
export declare const media: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: ({
            props: {
                type: {
                    type: string;
                    values: string[];
                };
                id: {
                    minLength: number;
                    type: string;
                };
                alt: {
                    type: string;
                    optional: boolean;
                };
                collection: {
                    type: string;
                };
                height: {
                    type: string;
                    optional: boolean;
                };
                occurrenceKey: {
                    minLength: number;
                    type: string;
                    optional: boolean;
                };
                width: {
                    type: string;
                    optional: boolean;
                };
                url?: undefined;
            };
        } | {
            props: {
                type: {
                    type: string;
                    values: string[];
                };
                alt: {
                    type: string;
                    optional: boolean;
                };
                height: {
                    type: string;
                    optional: boolean;
                };
                width: {
                    type: string;
                    optional: boolean;
                };
                url: {
                    type: string;
                };
                id?: undefined;
                collection?: undefined;
                occurrenceKey?: undefined;
            };
        })[];
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
    required: string[];
};
export declare const mediaGroup: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const mediaInline: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                type: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                url: {
                    type: string;
                    optional: boolean;
                };
                id: {
                    minLength: number;
                    type: string;
                };
                alt: {
                    type: string;
                    optional: boolean;
                };
                collection: {
                    type: string;
                };
                occurrenceKey: {
                    minLength: number;
                    type: string;
                    optional: boolean;
                };
                width: {
                    type: string;
                    optional: boolean;
                };
                height: {
                    type: string;
                    optional: boolean;
                };
                data: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
};
export declare const mediaSingle: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: ({
            props: {
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                };
                widthType: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
            };
        } | {
            props: {
                width: {
                    type: string;
                    minimum: number;
                    maximum?: undefined;
                    optional?: undefined;
                };
                widthType: {
                    type: string;
                    values: string[];
                    optional?: undefined;
                };
                layout: {
                    type: string;
                    values: string[];
                };
            };
        })[];
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const mediaSingle_caption: (string | {
    props: {
        content: {
            type: string;
            isTupleLike: boolean;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
})[];
export declare const mediaSingle_full: (string | {
    props: {
        content: {
            type: string;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
})[];
export declare const mediaSingle_width_type: (string | {
    props: {
        content: {
            type: string;
            items: string[];
            minItems: number;
            maxItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
})[];
export declare const mention: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                id: {
                    type: string;
                };
                localId: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
                accessLevel: {
                    type: string;
                    optional: boolean;
                };
                userType: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const multiBodiedExtension: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                extensionKey: {
                    type: string;
                    minLength: number;
                };
                extensionType: {
                    type: string;
                    minLength: number;
                };
                parameters: {
                    type: string;
                    optional: boolean;
                };
                text: {
                    type: string;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                localId: {
                    type: string;
                    optional: boolean;
                    minLength: number;
                };
            };
        };
        content: {
            type: string;
            items: string[];
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const nestedExpand: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                title: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        content: string;
    };
    required: string[];
};
export declare const nestedExpand_content: {
    type: string;
    items: string[][];
    minItems: number;
    allowUnsupportedBlock: boolean;
};
export declare const nestedExpand_with_no_marks: (string | {
    props: {
        marks: {
            type: string;
            maxItems: number;
            items: any[];
            optional: boolean;
        };
    };
})[];
export declare const non_nestable_block_content: string[];
export declare const orderedList: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                order: {
                    type: string;
                    minimum: number;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
        };
    };
};
export declare const panel: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                panelType: {
                    type: string;
                    values: string[];
                };
                panelIcon: {
                    type: string;
                    optional: boolean;
                };
                panelIconId: {
                    type: string;
                    optional: boolean;
                };
                panelIconText: {
                    type: string;
                    optional: boolean;
                };
                panelColor: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const paragraph: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const paragraph_with_alignment: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const paragraph_with_indentation: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const paragraph_with_no_marks: (string | {
    props: {
        marks: {
            type: string;
            maxItems: number;
            items: any[];
            optional: boolean;
        };
    };
})[];
export declare const placeholder: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                text: {
                    type: string;
                };
            };
        };
    };
};
export declare const rule: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
export declare const status: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                text: {
                    minLength: number;
                    type: string;
                };
                color: {
                    type: string;
                    values: string[];
                };
                localId: {
                    type: string;
                    optional: boolean;
                };
                style: {
                    type: string;
                    optional: boolean;
                };
            };
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const strike: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
export declare const strong: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
export declare const subsup: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                type: {
                    type: string;
                    values: string[];
                };
            };
        };
    };
};
export declare const table: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                displayMode: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                isNumberColumnEnabled: {
                    type: string;
                    optional: boolean;
                };
                layout: {
                    type: string;
                    values: string[];
                    optional: boolean;
                };
                localId: {
                    type: string;
                    minLength: number;
                    optional: boolean;
                };
                width: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[];
            minItems: number;
        };
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
};
export declare const tableCell: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                colspan: {
                    type: string;
                    optional: boolean;
                };
                rowspan: {
                    type: string;
                    optional: boolean;
                };
                colwidth: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    optional: boolean;
                };
                background: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
    required: string[];
};
export declare const tableHeader: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                colspan: {
                    type: string;
                    optional: boolean;
                };
                rowspan: {
                    type: string;
                    optional: boolean;
                };
                colwidth: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    optional: boolean;
                };
                background: {
                    type: string;
                    optional: boolean;
                };
            };
            optional: boolean;
        };
        content: {
            type: string;
            items: string[][];
            minItems: number;
        };
    };
    required: string[];
};
export declare const tableRow: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        content: {
            type: string;
            items: string[][];
        };
    };
};
export declare const taskItem: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    type: string;
                };
                state: {
                    type: string;
                    values: string[];
                };
            };
        };
        content: {
            type: string;
            items: string[];
            optional: boolean;
            allowUnsupportedInline: boolean;
        };
    };
};
export declare const taskList: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                localId: {
                    type: string;
                };
            };
        };
        content: {
            type: string;
            isTupleLike: boolean;
            items: (string | string[])[];
            minItems: number;
            allowUnsupportedBlock: boolean;
        };
    };
};
export declare const text: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        text: {
            type: string;
            minLength: number;
        };
        marks: {
            type: string;
            items: any[];
            optional: boolean;
        };
    };
};
export declare const text_code_inline: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
})[];
export declare const text_formatted: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[][];
        };
    };
})[];
export declare const text_link_inline: (string | {
    props: {
        marks: {
            type: string;
            optional: boolean;
            items: string[];
        };
    };
})[];
export declare const text_with_no_marks: (string | {
    props: {
        marks: {
            type: string;
            maxItems: number;
            items: any[];
            optional: boolean;
        };
    };
})[];
export declare const textColor: {
    props: {
        type: {
            type: string;
            values: string[];
        };
        attrs: {
            props: {
                color: {
                    type: string;
                    pattern: string;
                };
            };
        };
    };
};
export declare const underline: {
    props: {
        type: {
            type: string;
            values: string[];
        };
    };
};
