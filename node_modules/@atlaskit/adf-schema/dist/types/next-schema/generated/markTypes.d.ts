/**
 * This file was automatically generated by @atlaskit/adf-schema-generator
 * DO NOT MODIFY IT BY HAND. Instead, modify the source files in "packages/adf-schema/src/next-schema" ,
 * and run "yarn workspace @atlaskit/adf-schema build:schema:all" to regenerate this file.
 */
import { Mark } from '@atlaskit/editor-prosemirror/model';
export interface AlignmentMarkAttributes {
    align: 'center' | 'end';
}
export interface AlignmentDefinition {
    type: 'alignment';
    attrs: AlignmentMarkAttributes;
}
export interface AlignmentMark extends Mark {
    attrs: AlignmentMarkAttributes;
}
export declare const alignment: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<AlignmentMark>) => import("prosemirror-model").MarkSpec;
export interface AnnotationMarkAttributes {
    id: string;
    annotationType: 'inlineComment';
}
export interface AnnotationDefinition {
    type: 'annotation';
    attrs: AnnotationMarkAttributes;
}
export interface AnnotationMark extends Mark {
    attrs: AnnotationMarkAttributes;
}
export declare const annotation: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<AnnotationMark>) => import("prosemirror-model").MarkSpec;
export interface BackgroundColorMarkAttributes {
    color: string;
}
export interface BackgroundColorDefinition {
    type: 'backgroundColor';
    attrs: BackgroundColorMarkAttributes;
}
export interface BackgroundColorMark extends Mark {
    attrs: BackgroundColorMarkAttributes;
}
export declare const backgroundColor: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<BackgroundColorMark>) => import("prosemirror-model").MarkSpec;
export interface BorderMarkAttributes {
    size: number;
    color: string;
}
export interface BorderDefinition {
    type: 'border';
    attrs: BorderMarkAttributes;
}
export interface BorderMark extends Mark {
    attrs: BorderMarkAttributes;
}
export declare const border: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<BorderMark>) => import("prosemirror-model").MarkSpec;
export interface BreakoutMarkAttributes {
    mode: 'wide' | 'full-width';
    width?: number;
}
export interface BreakoutDefinition {
    type: 'breakout';
    attrs: BreakoutMarkAttributes;
}
export interface BreakoutMark extends Mark {
    attrs: BreakoutMarkAttributes;
}
export declare const breakout: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<BreakoutMark>) => import("prosemirror-model").MarkSpec;
export interface CodeDefinition {
    type: 'code';
}
export type CodeMark = Mark;
export declare const code: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<Omit<Mark, "parseDOM" | "toDOM">>) => import("prosemirror-model").MarkSpec;
export interface ConfluenceInlineCommentMarkAttributes {
    reference: string;
}
export interface ConfluenceInlineCommentDefinition {
    type: 'confluenceInlineComment';
    attrs: ConfluenceInlineCommentMarkAttributes;
}
export interface ConfluenceInlineCommentMark extends Mark {
    attrs: ConfluenceInlineCommentMarkAttributes;
}
export declare const confluenceInlineComment: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<ConfluenceInlineCommentMark>) => import("prosemirror-model").MarkSpec;
export interface DataConsumerMarkAttributes {
    sources: Array<string>;
}
export interface DataConsumerDefinition {
    type: 'dataConsumer';
    attrs: DataConsumerMarkAttributes;
}
export interface DataConsumerMark extends Mark {
    attrs: DataConsumerMarkAttributes;
}
export declare const dataConsumer: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<DataConsumerMark>) => import("prosemirror-model").MarkSpec;
export interface EmDefinition {
    type: 'em';
}
export type EmMark = Mark;
export declare const em: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<Omit<Mark, "parseDOM" | "toDOM">>) => import("prosemirror-model").MarkSpec;
export interface FragmentMarkAttributes {
    localId: string;
    name?: string;
}
export interface FragmentDefinition {
    type: 'fragment';
    attrs: FragmentMarkAttributes;
}
export interface FragmentMark extends Mark {
    attrs: FragmentMarkAttributes;
}
export declare const fragment: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<FragmentMark>) => import("prosemirror-model").MarkSpec;
export interface IndentationMarkAttributes {
    level: number;
}
export interface IndentationDefinition {
    type: 'indentation';
    attrs: IndentationMarkAttributes;
}
export interface IndentationMark extends Mark {
    attrs: IndentationMarkAttributes;
}
export declare const indentation: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<IndentationMark>) => import("prosemirror-model").MarkSpec;
export interface LinkMarkAttributes {
    href: string;
    title?: string;
    id?: string;
    collection?: string;
    occurrenceKey?: string;
    __confluenceMetadata?: Record<string, unknown>;
}
export interface LinkDefinition {
    type: 'link';
    attrs: LinkMarkAttributes;
}
export interface LinkMark extends Mark {
    attrs: LinkMarkAttributes;
}
export declare const link: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<LinkMark>) => import("prosemirror-model").MarkSpec;
export interface StrikeDefinition {
    type: 'strike';
}
export type StrikeMark = Mark;
export declare const strike: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<Omit<Mark, "parseDOM" | "toDOM">>) => import("prosemirror-model").MarkSpec;
export interface StrongDefinition {
    type: 'strong';
}
export type StrongMark = Mark;
export declare const strong: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<Omit<Mark, "parseDOM" | "toDOM">>) => import("prosemirror-model").MarkSpec;
export interface SubsupMarkAttributes {
    type: 'sub' | 'sup';
}
export interface SubsupDefinition {
    type: 'subsup';
    attrs: SubsupMarkAttributes;
}
export interface SubsupMark extends Mark {
    attrs: SubsupMarkAttributes;
}
export declare const subsup: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<SubsupMark>) => import("prosemirror-model").MarkSpec;
export interface TextColorMarkAttributes {
    color: string;
}
export interface TextColorDefinition {
    type: 'textColor';
    attrs: TextColorMarkAttributes;
}
export interface TextColorMark extends Mark {
    attrs: TextColorMarkAttributes;
}
export declare const textColor: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<TextColorMark>) => import("prosemirror-model").MarkSpec;
export interface TypeAheadQueryMarkAttributes {
    trigger: string;
}
export interface TypeAheadQueryDefinition {
    type: 'typeAheadQuery';
    attrs: TypeAheadQueryMarkAttributes;
}
export interface TypeAheadQueryMark extends Mark {
    attrs: TypeAheadQueryMarkAttributes;
}
export declare const typeAheadQuery: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<TypeAheadQueryMark>) => import("prosemirror-model").MarkSpec;
export interface UnderlineDefinition {
    type: 'underline';
}
export type UnderlineMark = Mark;
export declare const underline: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<Omit<Mark, "parseDOM" | "toDOM">>) => import("prosemirror-model").MarkSpec;
export interface UnsupportedMarkMarkAttributes {
    originalValue: Record<string, unknown>;
}
export interface UnsupportedMarkDefinition {
    type: 'unsupportedMark';
    attrs: UnsupportedMarkMarkAttributes;
}
export interface UnsupportedMarkMark extends Mark {
    attrs: UnsupportedMarkMarkAttributes;
}
export declare const unsupportedMark: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<UnsupportedMarkMark>) => import("prosemirror-model").MarkSpec;
export interface UnsupportedNodeAttributeMarkAttributes {
    unsupported: Record<string, unknown>;
    type: string;
}
export interface UnsupportedNodeAttributeDefinition {
    type: 'unsupportedNodeAttribute';
    attrs: UnsupportedNodeAttributeMarkAttributes;
}
export interface UnsupportedNodeAttributeMark extends Mark {
    attrs: UnsupportedNodeAttributeMarkAttributes;
}
export declare const unsupportedNodeAttribute: ({ parseDOM, toDOM, toDebugString }: import("../../schema/createPMSpecFactory").MarkSpecOptions<UnsupportedNodeAttributeMark>) => import("prosemirror-model").MarkSpec;
