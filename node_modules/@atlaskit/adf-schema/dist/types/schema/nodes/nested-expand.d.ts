import { NoMark } from './types/mark';
import { ParagraphDefinition as Paragraph } from './paragraph';
import { HeadingDefinition as Heading } from './heading';
import { MediaSingleDefinition as MediaSingle } from './media-single';
import { MediaGroupDefinition as MediaGroup } from './media-group';
import { CodeBlockDefinition as CodeBlock } from './code-block';
import { BulletListDefinition as BulletList, OrderedListDefinition as OrderedList } from './types/list';
import { TaskListDefinition as TaskList } from './task-list';
import { DecisionListDefinition as DecisionList } from './decision-list';
import { RuleDefinition as Rule } from './rule';
import { PanelDefinition as Panel } from './panel';
import { BlockQuoteDefinition as BlockQuote } from './blockquote';
/**
 * @name nestedExpand_content
 * @minItems 1
 * @allowUnsupportedBlock true
 */
export type NestedExpandContent = Array<Paragraph | Heading | MediaSingle | MediaGroup | CodeBlock | BulletList | OrderedList | TaskList | DecisionList | Rule | Panel | BlockQuote>;
/**
 * @name nestedExpand_node
 */
export interface NestedExpandBaseDefinition {
    type: 'nestedExpand';
    attrs: {
        title?: string;
        __expanded?: boolean;
    };
    content: NestedExpandContent;
}
/**
 * @name nestedExpand_with_no_marks_node
 */
export type NestedExpandDefinition = NestedExpandBaseDefinition & NoMark;
/**
 * @name nestedExpand
 * @description an expand that can be nested (eg. inside table, layout).
 */
export declare const nestedExpand: import("prosemirror-model").NodeSpec;
/**
 * @name nestedExpandWithNonBodiedMacros
 * @description an expand that can be nested (eg. inside table, layout).
 */
export declare const nestedExpandWithoutNonBodiedMacros: import("prosemirror-model").NodeSpec;
