import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { panel as panelFactory, panelWithoutNestedNonBodiedMacros as panelWithoutNestedNonBodiedMacrosFactory } from '../../next-schema/generated/nodeTypes';
export var PanelType = /*#__PURE__*/function (PanelType) {
  PanelType["INFO"] = "info";
  PanelType["NOTE"] = "note";
  PanelType["TIP"] = "tip";
  PanelType["WARNING"] = "warning";
  PanelType["ERROR"] = "error";
  PanelType["SUCCESS"] = "success";
  PanelType["CUSTOM"] = "custom";
  return PanelType;
}({});

/**
 * @name panel_node
 */

var getDomAttrs = function getDomAttrs(nodeAttrs) {
  var attrs = {
    'data-panel-type': nodeAttrs.panelType,
    'data-panel-icon': nodeAttrs.panelIcon,
    'data-panel-icon-id': nodeAttrs.panelIconId,
    'data-panel-icon-text': nodeAttrs.panelIconText,
    'data-panel-color': nodeAttrs.panelColor
  };
  return attrs;
};
var getParseDOMAttrs = function getParseDOMAttrs(allowCustomPanel, dom) {
  var parseDOMAttrs = {
    panelType: dom.getAttribute('data-panel-type')
  };
  if (allowCustomPanel) {
    parseDOMAttrs = _objectSpread(_objectSpread({}, parseDOMAttrs), {}, {
      panelIcon: dom.getAttribute('data-panel-icon'),
      panelIconId: dom.getAttribute('data-panel-icon-id'),
      panelIconText: dom.getAttribute('data-panel-icon-text'),
      panelColor: dom.getAttribute('data-panel-color')
    });
  } else {
    parseDOMAttrs.panelType = parseDOMAttrs.panelType === PanelType.CUSTOM ? PanelType.INFO : parseDOMAttrs.panelType;
  }
  return parseDOMAttrs;
};
var createPanelNodeSpecOptions = function createPanelNodeSpecOptions(allowCustomPanel) {
  return {
    parseDOM: [{
      tag: 'div[data-panel-type]',
      getAttrs: function getAttrs(dom) {
        return getParseDOMAttrs(allowCustomPanel, dom);
      }
    }],
    toDOM: function toDOM(node) {
      var attrs = getDomAttrs(node.attrs);
      var contentAttrs = {
        'data-panel-content': 'true'
      };
      return ['div', attrs, ['div', contentAttrs, 0]];
    }
  };
};

/**
 * @name extended_panel
 * @description it allows more content to be nested as compared to panel node.
 * Specifically, it allows Media, action, code-block, rule and decision nodes in
 * addition to content allowed inside panel
 */
export var extendedPanel = function extendedPanel(allowCustomPanel) {
  return panelFactory(createPanelNodeSpecOptions(allowCustomPanel));
};
export var panelWithoutNestedNonBodiedMacros = function panelWithoutNestedNonBodiedMacros(allowCustomPanel) {
  return panelWithoutNestedNonBodiedMacrosFactory(createPanelNodeSpecOptions(allowCustomPanel));
};