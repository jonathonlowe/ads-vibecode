"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extensionFrame = void 0;
var _adfSchemaGenerator = require("@atlaskit/adf-schema-generator");
var _dataConsumer = require("../marks/dataConsumer");
var _fragment = require("../marks/fragment");
var _unsupportedMark = require("../marks/unsupportedMark");
var _unsupportedNodeAttribute = require("../marks/unsupportedNodeAttribute");
var _blockCard = require("./blockCard");
var _blockquote = require("./blockquote");
var _bodiedExtension = require("./bodiedExtension");
var _codeBlock = require("./codeBlock");
var _decisionList = require("./decisionList");
var _embedCard = require("./embedCard");
var _extension = require("./extension");
var _heading = require("./heading");
var _list = require("./list");
var _mediaGroup = require("./mediaGroup");
var _mediaSingle = require("./mediaSingle");
var _panel = require("./panel");
var _paragraph = require("./paragraph");
var _rule = require("./rule");
var _tableNodes = require("./tableNodes");
var _task = require("./task");
var _unsupportedBlock = require("./unsupportedBlock");
var extensionFrame = exports.extensionFrame = (0, _adfSchemaGenerator.adfNode)('extensionFrame').define({
  stage0: true,
  isolating: true,
  definingAsContext: false,
  definingForContent: true,
  selectable: false,
  // Marks don't make it into the PM node spec, as they get overridden by the marks in
  // packages/adf-schema-generator/src/transforms/adfToPm/buildPmSpec.ts
  marks: [_dataConsumer.dataConsumer, _fragment.fragment, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  attrs: {},
  content: [(0, _adfSchemaGenerator.$onePlus)((0, _adfSchemaGenerator.$or)(_paragraph.paragraph.use('with_no_marks'), _panel.panel, _blockquote.blockquote, _list.orderedList, _list.bulletList, _rule.rule, _heading.heading.use('with_no_marks'), _codeBlock.codeBlock, _mediaGroup.mediaGroup, _mediaSingle.mediaSingle.use('full'), _mediaSingle.mediaSingle.use('caption'), _decisionList.decisionList, _task.taskList, _tableNodes.table,
  // @ts-expect-error - types don't deal well with circular references for the variant
  _tableNodes.table.use('with_nested_table'), _extension.extension.use('with_marks'), _bodiedExtension.bodiedExtension.use('with_marks'), _unsupportedBlock.unsupportedBlock, _blockCard.blockCard, _embedCard.embedCard))],
  DANGEROUS_MANUAL_OVERRIDE: {
    'validator-spec': {
      'props.content.allowUnsupportedBlock': {
        remove: true,
        reason: '@DSLCompatibilityException - mismatch for extensionFrame'
      }
    }
  }
});