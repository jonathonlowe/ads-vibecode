"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paragraph = void 0;
var _adfSchemaGenerator = require("@atlaskit/adf-schema-generator");
var _inlineContentGroup = require("../groups/inlineContentGroup");
var _inlineGroup = require("../groups/inlineGroup");
var _alignmentAndIndentation = require("../marks/alignmentAndIndentation");
var _unsupportedMark = require("../marks/unsupportedMark");
var _unsupportedNodeAttribute = require("../marks/unsupportedNodeAttribute");
var paragraph = exports.paragraph = (0, _adfSchemaGenerator.adfNode)('paragraph').define({
  attrs: {
    localId: {
      type: 'string',
      optional: true,
      default: null
    }
  },
  selectable: false,
  marks: [_unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  hasEmptyMarks: true,
  content: [(0, _adfSchemaGenerator.$zeroPlus)((0, _adfSchemaGenerator.$or)(_inlineGroup.inlineGroup, _inlineContentGroup.inlineContentGroup))]
}).variant('with_alignment', {
  marks: [_alignmentAndIndentation.alignment, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_indentation', {
  marks: [_alignmentAndIndentation.indentation, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_marks', {
  marks: [_alignmentAndIndentation.alignment, _unsupportedMark.unsupportedMark, _unsupportedNodeAttribute.unsupportedNodeAttribute],
  content: [],
  ignore: []
}).variant('with_no_marks', {
  content: [],
  marks: [],
  noMarks: true,
  ignore: []
});