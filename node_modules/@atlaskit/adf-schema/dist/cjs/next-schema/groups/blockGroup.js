"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockGroup = void 0;
var _adfSchemaGenerator = require("@atlaskit/adf-schema-generator");
var _blockCard = require("../nodes/blockCard");
var _blockquote = require("../nodes/blockquote");
var _bodiedExtension = require("../nodes/bodiedExtension");
var _codeBlock = require("../nodes/codeBlock");
var _confluenceUnsupportedBlock = require("../nodes/confluenceUnsupportedBlock");
var _decisionList = require("../nodes/decisionList");
var _embedCard = require("../nodes/embedCard");
var _expand = require("../nodes/expand");
var _extension = require("../nodes/extension");
var _heading = require("../nodes/heading");
var _list = require("../nodes/list");
var _mediaGroup = require("../nodes/mediaGroup");
var _mediaSingle = require("../nodes/mediaSingle");
var _panel = require("../nodes/panel");
var _paragraph = require("../nodes/paragraph");
var _rule = require("../nodes/rule");
var _tableNodes = require("../nodes/tableNodes");
var _task = require("../nodes/task");
var _unsupportedBlock = require("../nodes/unsupportedBlock");
var blockGroup = exports.blockGroup = (0, _adfSchemaGenerator.adfNodeGroup)('block', [_blockCard.blockCard, _codeBlock.codeBlock, _mediaSingle.mediaSingle, _mediaSingle.mediaSingle.use('caption'), _mediaSingle.mediaSingle.use('full'), _mediaSingle.mediaSingle.use('width_type'), _paragraph.paragraph, _paragraph.paragraph.use('with_alignment'), _paragraph.paragraph.use('with_indentation'), _paragraph.paragraph.use('with_no_marks'), _task.taskList, _list.orderedList, _list.bulletList, _blockquote.blockquote, _blockquote.blockquote.use('legacy'), _blockquote.blockquote.use('without_nested_codeblock_or_media'), _blockquote.blockquote.use('without_non_bodied_macros'), _decisionList.decisionList, _embedCard.embedCard, _extension.extension, _extension.extension.use('with_marks'), _heading.heading, _heading.heading.use('with_indentation'), _heading.heading.use('with_no_marks'), _heading.heading.use('with_alignment'), _mediaGroup.mediaGroup, _rule.rule, _panel.panel, _panel.panel.use('without_nested_non_bodied_macros'), _tableNodes.table,
// @ts-expect-error - types don't deal well with circular references for the variant
_tableNodes.table.use('with_nested_table'), _bodiedExtension.bodiedExtension, _bodiedExtension.bodiedExtension.use('with_marks'), _expand.expand, _expand.expand.use('without_nested_expand'), _confluenceUnsupportedBlock.confluenceUnsupportedBlock, _unsupportedBlock.unsupportedBlock], {
  // @DSLCompatibilityException
  // Block group in PM doesn't match ADF
  ignore: ['validator-spec', 'json-schema']
});