"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsupportedNodeAttribute = exports.unsupportedMark = exports.underline = exports.typeAheadQuery = exports.textColor = exports.subsup = exports.strong = exports.strike = exports.link = exports.indentation = exports.fragment = exports.em = exports.dataConsumer = exports.confluenceInlineComment = exports.code = exports.breakout = exports.border = exports.backgroundColor = exports.annotation = exports.alignment = void 0;
var _createPMSpecFactory = require("../../schema/createPMSpecFactory");
/**
 * This file was automatically generated by @atlaskit/adf-schema-generator
 * DO NOT MODIFY IT BY HAND. Instead, modify the source files in "packages/adf-schema/src/next-schema" ,
 * and run "yarn workspace @atlaskit/adf-schema build:schema:all" to regenerate this file.
 */

var alignment = exports.alignment = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    align: {}
  },
  excludes: 'alignment indentation',
  group: 'alignment'
});
var annotation = exports.annotation = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    id: {
      default: ''
    },
    annotationType: {
      default: 'inlineComment'
    }
  },
  inclusive: true,
  excludes: '',
  group: 'annotation'
});
var backgroundColor = exports.backgroundColor = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    color: {}
  },
  inclusive: true,
  excludes: 'color',
  group: 'color'
});
var border = exports.border = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    size: {},
    color: {}
  },
  inclusive: false
});
var breakout = exports.breakout = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    mode: {
      default: 'wide'
    },
    width: {
      default: null
    }
  },
  inclusive: false,
  spanning: false
});
var code = exports.code = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  inclusive: true,
  excludes: 'fontStyle link searchQuery color'
});
var confluenceInlineComment = exports.confluenceInlineComment = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    reference: {
      default: ''
    }
  },
  inclusive: false,
  excludes: ''
});
var dataConsumer = exports.dataConsumer = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    sources: {
      default: []
    }
  }
});
var em = exports.em = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  inclusive: true,
  group: 'fontStyle'
});
var fragment = exports.fragment = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    localId: {
      default: ''
    },
    name: {
      default: null
    }
  },
  inclusive: false,
  excludes: ''
});
var indentation = exports.indentation = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    level: {}
  },
  excludes: 'indentation alignment',
  group: 'indentation'
});
var link = exports.link = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    href: {},
    __confluenceMetadata: {
      default: null
    }
  },
  inclusive: false,
  excludes: 'link',
  group: 'link'
});
var strike = exports.strike = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  inclusive: true,
  group: 'fontStyle'
});
var strong = exports.strong = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  inclusive: true,
  group: 'fontStyle'
});
var subsup = exports.subsup = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    type: {
      default: 'sub'
    }
  },
  inclusive: true,
  group: 'fontStyle'
});
var textColor = exports.textColor = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    color: {}
  },
  inclusive: true,
  group: 'color'
});
var typeAheadQuery = exports.typeAheadQuery = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    trigger: {
      default: ''
    }
  },
  inclusive: true,
  group: 'searchQuery'
});
var underline = exports.underline = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  inclusive: true,
  group: 'fontStyle'
});
var unsupportedMark = exports.unsupportedMark = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    originalValue: {}
  },
  excludes: ''
});
var unsupportedNodeAttribute = exports.unsupportedNodeAttribute = (0, _createPMSpecFactory.createPMMarkSpecFactory)({
  attrs: {
    unsupported: {},
    type: {}
  }
});