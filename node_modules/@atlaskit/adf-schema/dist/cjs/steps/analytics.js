"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyticsStepType = exports.analyticsInvertStepType = exports.AnalyticsStep = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _transform = require("@atlaskit/editor-prosemirror/transform");
var _model = require("@atlaskit/editor-prosemirror/model");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var analyticsStepType = exports.analyticsStepType = 'atlaskit-analytics';
var analyticsInvertStepType = exports.analyticsInvertStepType = 'atlaskit-analytics-invert';
var HISTORY_ACTIONS = /*#__PURE__*/function (HISTORY_ACTIONS) {
  HISTORY_ACTIONS["UNDID"] = "undid";
  HISTORY_ACTIONS["REDID"] = "redid";
  return HISTORY_ACTIONS;
}(HISTORY_ACTIONS || {});
/** Creates undo event from a normal analytics event */
function createUndoEvent(analyticsEvent) {
  var _analyticsEvent$paylo;
  return _objectSpread(_objectSpread({}, analyticsEvent), {}, {
    payload: {
      action: HISTORY_ACTIONS.UNDID,
      actionSubject: analyticsEvent.payload.actionSubject,
      actionSubjectId: analyticsEvent.payload.action,
      attributes: _objectSpread(_objectSpread({}, analyticsEvent.payload.attributes), {}, {
        actionSubjectId: analyticsEvent.payload.actionSubjectId,
        inputMethod: ((_analyticsEvent$paylo = analyticsEvent.payload.attributes) === null || _analyticsEvent$paylo === void 0 ? void 0 : _analyticsEvent$paylo.inputMethod) || ''
      }),
      eventType: 'track'
    }
  });
}

/** Toggles event action between undo & redo */
var toggleEventAction = function toggleEventAction(analyticsEvent) {
  return _objectSpread(_objectSpread({}, analyticsEvent), {}, {
    payload: _objectSpread(_objectSpread({}, analyticsEvent.payload), {}, {
      action: analyticsEvent.payload.action === HISTORY_ACTIONS.UNDID ? HISTORY_ACTIONS.REDID : HISTORY_ACTIONS.UNDID
    })
  });
};
function isHistoryAnalyticsEvent(event) {
  return event.payload.action === HISTORY_ACTIONS.UNDID || event.payload.action === HISTORY_ACTIONS.REDID;
}
/**
 * Custom Prosemirror Step to fire our GAS V3 analytics events
 * Using a Step means that it will work with prosemirror-history and we get
 * undo/redo events for free
 */
var AnalyticsStep = exports.AnalyticsStep = /*#__PURE__*/function (_Step) {
  function AnalyticsStep(analyticsEvents) {
    var _this;
    var actionsToIgnore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var pos // Used to create the map, prevent splitting history.
    = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2.default)(this, AnalyticsStep);
    _this = _callSuper(this, AnalyticsStep);
    (0, _defineProperty2.default)(_this, "analyticsEvents", []);
    (0, _defineProperty2.default)(_this, "actionsToIgnore", []);
    _this.analyticsEvents = analyticsEvents;
    _this.actionsToIgnore = actionsToIgnore;
    _this.pos = pos;
    return _this;
  }

  /**
   * Generate new undo/redo analytics event when step is inverted
   */
  (0, _inherits2.default)(AnalyticsStep, _Step);
  return (0, _createClass2.default)(AnalyticsStep, [{
    key: "invert",
    value: function invert() {
      var _this2 = this;
      var analyticsEvents = this.analyticsEvents.filter(function (analyticsEvent) {
        return _this2.actionsToIgnore.indexOf(analyticsEvent.payload.action) === -1;
      }).map(function (analyticsEvent) {
        if (isHistoryAnalyticsEvent(analyticsEvent)) {
          return toggleEventAction(analyticsEvent);
        } else {
          return createUndoEvent(analyticsEvent);
        }
      });
      return new AnalyticsStep(analyticsEvents, []);
    }
  }, {
    key: "apply",
    value: function apply(doc) {
      return _transform.StepResult.ok(doc);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var newPos = this.pos;
      if (typeof newPos === 'number') {
        newPos = mapping.map(newPos);
      }
      // Return the same events, this step will never be removed
      return new AnalyticsStep(this.analyticsEvents, this.actionsToIgnore, newPos);
    }
  }, {
    key: "getMap",
    value: function getMap() {
      if (typeof this.pos === 'number') {
        return new _transform.StepMap([this.pos, 0, 0]);
      }
      return new _transform.StepMap([]);
    }
  }, {
    key: "merge",
    value: function merge(other) {
      if (other instanceof AnalyticsStep) {
        var otherAnalyticsEvents = other.analyticsEvents;
        return new AnalyticsStep([].concat((0, _toConsumableArray2.default)(otherAnalyticsEvents), (0, _toConsumableArray2.default)(this.analyticsEvents)));
      }
      return null;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        stepType: analyticsStepType
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON() {
      return new _transform.ReplaceStep(0, 0, _model.Slice.empty);
    }
  }]);
}(_transform.Step);
/** Register this step with Prosemirror */
_transform.Step.jsonID(analyticsStepType, AnalyticsStep);