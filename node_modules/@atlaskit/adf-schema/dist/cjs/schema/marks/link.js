"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.link = exports.getLinkAttrs = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _markTypes = require("../../next-schema/generated/markTypes");
var _url = require("../../utils/url");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @name link_mark
 */

var getLinkAttrs = exports.getLinkAttrs = function getLinkAttrs(attribute) {
  return function (domNode) {
    var dom = domNode;
    var href = dom.getAttribute(attribute) || '';
    var attrs = {
      __confluenceMetadata: dom.hasAttribute('__confluenceMetadata') ? JSON.parse(dom.getAttribute('__confluenceMetadata') || '') : undefined
    };
    if (!(0, _url.isSafeUrl)(href)) {
      return false;
    }
    if ((0, _url.isRootRelative)(href)) {
      attrs.href = href;
      return attrs;
    }
    attrs.href = (0, _url.normalizeUrl)(href);
    return attrs;
  };
};
var link = exports.link = (0, _markTypes.link)({
  parseDOM: [{
    tag: '[data-block-link]',
    getAttrs: getLinkAttrs('data-block-link'),
    contentElement: function contentElement(node) {
      var clone = node.cloneNode(true);
      clone.removeAttribute('data-block-link');
      clone.setAttribute('data-skip-paste', 'true');
      var wrapper = document.createElement('div');
      wrapper.appendChild(clone);
      return wrapper;
    }
  }, {
    tag: 'a[href]',
    getAttrs: getLinkAttrs('href')
  }],
  toDOM: function toDOM(node, isInline) {
    var attrs = Object.keys(node.attrs).reduce(function (attrs, key) {
      if (key === '__confluenceMetadata') {
        if (node.attrs[key] !== null) {
          attrs[key] = JSON.stringify(node.attrs[key]);
        }
      } else if (key === 'href') {
        attrs[key] = (0, _url.isSafeUrl)(node.attrs[key]) ? node.attrs[key] : undefined;
      } else {
        attrs[key] = node.attrs[key];
      }
      return attrs;
    }, {});
    if (isInline) {
      return ['a', attrs];
    }
    return ['a', _objectSpread(_objectSpread({}, attrs), {}, (0, _defineProperty2.default)((0, _defineProperty2.default)({}, 'data-block-link', 'true'), "class", 'blockLink')), 0];
  }
});
var OPTIONAL_ATTRS = ['title', 'id', 'collection', 'occurrenceKey', '__confluenceMetadata'];
var toJSON = exports.toJSON = function toJSON(mark) {
  return {
    type: mark.type.name,
    attrs: Object.keys(mark.attrs).reduce(function (attrs, key) {
      if (OPTIONAL_ATTRS.indexOf(key) === -1 || mark.attrs[key] !== null) {
        attrs[key] = mark.attrs[key];
      }
      return attrs;
    }, {})
  };
};