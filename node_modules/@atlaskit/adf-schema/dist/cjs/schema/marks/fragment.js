"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.fragment = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _markTypes = require("../../next-schema/generated/markTypes");
var _parseDOM = require("../../utils/parseDOM");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @name fragment_mark
 * @description Indicates that the elements decorated with this mark belong to a "fragment" entity, which represents a collection of ADF nodes.
 * This entity can be referred to later by its `localId` attribute.
 */

var parseFragment = function parseFragment(maybeValue) {
  var _maybeValue$getAttrib;
  if (!(0, _parseDOM.isDOMElement)(maybeValue)) {
    return false;
  }
  var name = (_maybeValue$getAttrib = maybeValue.getAttribute('data-name')) !== null && _maybeValue$getAttrib !== void 0 ? _maybeValue$getAttrib : undefined;
  var localId = maybeValue.getAttribute('data-localId');
  if (!localId) {
    return false;
  }
  return {
    localId: localId,
    name: name
  };
};
var fragment = exports.fragment = (0, _markTypes.fragment)({
  parseDOM: [{
    tag: '[data-mark-type="fragment"]',
    getAttrs: function getAttrs(maybeValue) {
      return parseFragment(maybeValue);
    }
  }],
  toDOM: function toDOM(mark, inline) {
    var wrapperStyle = inline ? 'span' : 'div';
    return [wrapperStyle, {
      'data-mark-type': 'fragment',
      'data-name': mark.attrs.name,
      'data-localId': mark.attrs.localId
    }];
  }
});
var toJSON = exports.toJSON = function toJSON(mark) {
  return {
    type: mark.type.name,
    attrs: _objectSpread({
      localId: mark.attrs.localId
    }, mark.attrs.name ? {
      name: mark.attrs.name
    } : {})
  };
};