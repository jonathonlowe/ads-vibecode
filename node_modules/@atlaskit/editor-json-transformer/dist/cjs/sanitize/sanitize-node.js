"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeNode = sanitizeNode;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _transforms = require("@atlaskit/adf-utils/transforms");
var _traverse = require("@atlaskit/adf-utils/traverse");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _removeMarks = require("./remove-marks");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var hasNestedTable = function hasNestedTable(tableCellNode) {
  var _tableCellNode$conten;
  return (_tableCellNode$conten = tableCellNode.content) === null || _tableCellNode$conten === void 0 ? void 0 : _tableCellNode$conten.some(function (node) {
    return (node === null || node === void 0 ? void 0 : node.type) === 'table';
  });
};
function sanitizeNode(json) {
  var sanitizedJSON = (0, _traverse.traverse)(json, {
    text: function text(node) {
      if (!node || !Array.isArray(node.marks)) {
        return node;
      }
      return _objectSpread(_objectSpread({}, node), {}, {
        marks: node.marks.filter(function (mark) {
          return mark.type !== 'typeAheadQuery';
        })
      });
    },
    status: function status(node) {
      if (node.attrs && !!node.attrs.text) {
        return (0, _removeMarks.removeNonAnnotationMarks)(node);
      }
      return false; // empty status
    },
    caption: function caption(node) {
      if (node.content) {
        return node;
      }
      return false; // empty caption
    },
    tableCell: function tableCell(node) {
      if (hasNestedTable(node) && (0, _platformFeatureFlags.fg)('platform_editor_use_nested_table_pm_nodes')) {
        return (0, _transforms.transformNestedTableNodeOutgoingDocument)(node);
      }
    },
    tableHeader: function tableHeader(node) {
      if (hasNestedTable(node) && (0, _platformFeatureFlags.fg)('platform_editor_use_nested_table_pm_nodes')) {
        return (0, _transforms.transformNestedTableNodeOutgoingDocument)(node);
      }
    },
    emoji: _removeMarks.removeNonAnnotationMarks,
    mention: _removeMarks.removeNonAnnotationMarks,
    date: _removeMarks.removeNonAnnotationMarks,
    hardBreak: _removeMarks.removeMarks,
    inlineCard: _removeMarks.removeNonAnnotationMarks
  });
  return sanitizedJSON;
}