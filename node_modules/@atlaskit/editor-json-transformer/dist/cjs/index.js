"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaStage = exports.JSONTransformer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _adfSchema = require("@atlaskit/adf-schema");
var _schemaDefault = require("@atlaskit/adf-schema/schema-default");
var _markOverrideRules = require("./markOverrideRules");
var _sanitizeNode = require("./sanitize/sanitize-node");
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof3(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof3(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof3(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // Disable no-re-export rule for entry point files
/* eslint-disable @atlaskit/editor/no-re-export */
var SchemaStage = exports.SchemaStage = /*#__PURE__*/function (SchemaStage) {
  SchemaStage["FINAL"] = "final";
  SchemaStage["STAGE_0"] = "stage0";
  return SchemaStage;
}({});
var isType = function isType(type) {
  return function (node) {
    return node.type.name === type;
  };
};
var isCodeBlock = isType('codeBlock');
var isMediaNode = isType('media');
var isMediaInline = isType('mediaInline');
var isMediaSingleNode = isType('mediaSingle');
var isMentionNode = isType('mention');
var isParagraph = isType('paragraph');
var isHeading = isType('heading');
var isTable = isType('table');
var isTableCell = isType('tableCell');
var isTableHeader = isType('tableHeader');
var isLinkMark = isType('link');
var isUnsupportedMark = isType('unsupportedMark');
var isUnsupportedNodeAttributeMark = isType('unsupportedNodeAttribute');
var isExpand = isType('expand');
var isNestedExpand = isType('nestedExpand');
var isUnsupportedNode = function isUnsupportedNode(node) {
  return isType('unsupportedBlock')(node) || isType('unsupportedInline')(node);
};
var isDataConsumer = isType('dataConsumer');
var isFragmentMark = isType('fragment');
var isHardBreak = isType('hardBreak');

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var _filterNull = function filterNull(subject) {
  var output = _objectSpread({}, subject);
  // eslint-disable-next-line guard-for-in
  for (var key in output) {
    var current = output[key];
    if (current === null) {
      var _output = output,
        unusedKey = _output[key],
        filteredObj = (0, _objectWithoutProperties2.default)(_output, [key].map(_toPropertyKey));
      output = filteredObj;
    } else if ((0, _typeof2.default)(current) === 'object' && !Array.isArray(current)) {
      output[key] = _filterNull(current);
    }
  }
  return output;
};
var createDocFromContent = function createDocFromContent(content) {
  return {
    version: 1,
    type: 'doc',
    content: content || []
  };
};
var emptyDoc = createDocFromContent([{
  type: 'paragraph',
  content: []
}]);
var _toJSON = function toJSON(node, mentionMap) {
  var obj = {
    type: node.type.name
  };
  if (isUnsupportedNode(node)) {
    return node.attrs.originalValue;
  } else if (isMediaNode(node)) {
    obj.attrs = (0, _adfSchema.mediaToJSON)(node).attrs;
  } else if (isMediaSingleNode(node)) {
    obj.attrs = (0, _adfSchema.mediaSingleToJSON)(node).attrs;
  } else if (isMediaInline(node)) {
    obj.attrs = (0, _adfSchema.mediaToJSON)(node).attrs;
  } else if (isMentionNode(node)) {
    obj.attrs = (0, _adfSchema.mentionToJSON)(node).attrs;
  } else if (isCodeBlock(node)) {
    obj.attrs = (0, _adfSchema.codeBlockToJSON)(node).attrs;
  } else if (isTable(node)) {
    obj.attrs = (0, _adfSchema.tableToJSON)(node).attrs;
  } else if (isTableCell(node)) {
    obj.attrs = (0, _adfSchema.toJSONTableCell)(node).attrs;
  } else if (isTableHeader(node)) {
    obj.attrs = (0, _adfSchema.toJSONTableHeader)(node).attrs;
  } else if (isExpand(node) || isNestedExpand(node)) {
    obj.attrs = (0, _adfSchema.expandToJSON)(node).attrs;
  } else if (node.attrs && Object.keys(node.attrs).length) {
    obj.attrs = node.attrs;
  }
  if (obj.attrs) {
    obj.attrs = _filterNull(obj.attrs);
  }
  if (isMentionNode(node) && mentionMap) {
    var _text, _obj$attrs;
    // If the mentionMap exists and has a name defined then we should use it and prepend @ to the begining of it.
    var name = !!(mentionMap !== null && mentionMap !== void 0 && mentionMap[node.attrs.id]) ? "@".concat(mentionMap[node.attrs.id]) : '';
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var text = (_text = (_obj$attrs = obj.attrs) === null || _obj$attrs === void 0 ? void 0 : _obj$attrs.text) !== null && _text !== void 0 ? _text : '';
    obj.attrs = _objectSpread(_objectSpread({}, obj.attrs), {}, {
      // If an explicit text value is set on the mention then that should take priority over the mentionMap value.
      text: !!text ? text : name
    });
  }

  // Remove the attrs property if it's empty, this is currently limited to paragraph nodes.
  if (isParagraph(node) && obj.attrs && !Object.keys(obj.attrs).length) {
    delete obj.attrs;
  }

  // Hard break has optional attr.text which was added for PM <-> ADF compatibility.
  // No need to preserve it.
  if (isHardBreak(node)) {
    delete obj.attrs;
  }
  if (node.isText) {
    obj.text = node.textContent;
  } else {
    node.content.forEach(function (child) {
      obj.content = obj.content || [];
      obj.content.push(_toJSON(child, mentionMap));
    });
  }
  if (isParagraph(node) || isHeading(node)) {
    obj.content = obj.content || [];
  }
  if (node.marks.length) {
    // Run any custom mark serialisers
    var parsedMarks = node.marks.map(function (mark) {
      if (isUnsupportedMark(mark)) {
        return canOverrideMark(mark, node.marks) ? null : mark.attrs.originalValue;
      } else if (isUnsupportedNodeAttributeMark(mark)) {
        return null;
      } else if (isLinkMark(mark)) {
        return (0, _adfSchema.linkToJSON)(mark);
      } else if (isDataConsumer(mark)) {
        var _serialised$attrs$sou;
        var serialised = (0, _adfSchema.dataConsumerToJSON)(mark);
        return !serialised.attrs.sources || ((_serialised$attrs$sou = serialised.attrs.sources) === null || _serialised$attrs$sou === void 0 ? void 0 : _serialised$attrs$sou.length) === 0 ? null : serialised;
      } else if (isFragmentMark(mark)) {
        var fragmentMark = (0, _adfSchema.fragmentToJSON)(mark);
        if (!fragmentMark.attrs.localId) {
          return null;
        }
        return fragmentMark;
      } else {
        return mark.toJSON();
      }
    }).filter(function (maybeMark) {
      return maybeMark !== null;
    });

    // Only set if we have a non-empty array, otherwise explicitly undefine it (as we only run this path if `node.marks.length`)
    obj.marks = (parsedMarks === null || parsedMarks === void 0 ? void 0 : parsedMarks.length) > 0 ? parsedMarks : undefined;
    var nodeAttributeMark = node.marks.find(isUnsupportedNodeAttributeMark);
    if (nodeAttributeMark && nodeAttributeMark.attrs.type.nodeType === obj.type) {
      obj.attrs = _objectSpread({}, getUnwrappedNodeAttributes(node, nodeAttributeMark, obj));
    }
  }
  return obj;
};
var canOverrideMark = function canOverrideMark(mark, existingMarks) {
  if (existingMarks.some(function (e) {
    return mark.attrs.originalValue.type === e.type.name;
  })) {
    return (0, _markOverrideRules.markOverrideRuleFor)(mark.attrs.originalValue.type).canOverrideUnsupportedMark();
  }
  return false;
};
var getUnwrappedNodeAttributes = function getUnwrappedNodeAttributes(node, mark, obj) {
  var nodeAttributes = node.type.spec.attrs;
  var attributes = _objectSpread(_objectSpread({}, mark.attrs.unsupported), obj.attrs);
  // Ignored via go/ees005
  // eslint-disable-next-line no-var
  for (var key in obj.attrs) {
    if (obj.attrs.hasOwnProperty(key)) {
      var attribute = nodeAttributes ? nodeAttributes[key] : null;
      if (attribute) {
        if (attribute.default === node.attrs[key] && mark.attrs.unsupported[key]) {
          return _objectSpread(_objectSpread({}, attributes), {}, (0, _defineProperty2.default)({}, key, mark.attrs.unsupported[key]));
        }
      }
    }
  }
  return attributes;
};
var JSONTransformer = exports.JSONTransformer = /*#__PURE__*/function () {
  /**
   * @param schema The current editor schema
   * @param mentionMap An optional mapping of user IDs to mention names. This is used by the encoder to substitute empty
   * mention node.attr.text values with mapped names.
   */
  function JSONTransformer() {
    var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _schemaDefault.defaultSchema;
    var mentionMap = arguments.length > 1 ? arguments[1] : undefined;
    (0, _classCallCheck2.default)(this, JSONTransformer);
    this.schema = schema;
    this.mentionMap = mentionMap;
  }
  return (0, _createClass2.default)(JSONTransformer, [{
    key: "encode",
    value: function encode(node) {
      var _this = this;
      var content = [];
      node.content.forEach(function (child) {
        content.push((0, _sanitizeNode.sanitizeNode)(_toJSON(child, _this.mentionMap)));
      });
      if (!content || (0, _isEqual.default)(content, emptyDoc.content)) {
        return createDocFromContent([]);
      }
      return createDocFromContent(content);
    }
  }, {
    key: "internalParse",
    value: function internalParse(content, schema) {
      var doc = schema.nodeFromJSON(content);
      doc.check();
      return doc;
    }
  }, {
    key: "parse",
    value: function parse(content, stage) {
      if (content.type !== 'doc') {
        throw new Error('Expected content format to be ADF');
      }
      var schema = !!stage ? (0, _schemaDefault.getSchemaBasedOnStage)(stage) : this.schema;
      if (!content.content || content.content.length === 0) {
        return this.internalParse(emptyDoc, schema);
      }
      return this.internalParse(content, schema);
    }

    /**
     * This method is used to encode a single node
     */
  }, {
    key: "encodeNode",
    value: function encodeNode(node) {
      return (0, _sanitizeNode.sanitizeNode)(_toJSON(node, this.mentionMap));
    }
  }]);
}();