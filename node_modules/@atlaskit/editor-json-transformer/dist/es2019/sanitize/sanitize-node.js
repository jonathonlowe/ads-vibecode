import { transformNestedTableNodeOutgoingDocument } from '@atlaskit/adf-utils/transforms';
import { traverse } from '@atlaskit/adf-utils/traverse';
import { fg } from '@atlaskit/platform-feature-flags';
import { removeMarks, removeNonAnnotationMarks } from './remove-marks';
const hasNestedTable = tableCellNode => {
  var _tableCellNode$conten;
  return (_tableCellNode$conten = tableCellNode.content) === null || _tableCellNode$conten === void 0 ? void 0 : _tableCellNode$conten.some(node => (node === null || node === void 0 ? void 0 : node.type) === 'table');
};
export function sanitizeNode(json) {
  const sanitizedJSON = traverse(json, {
    text: node => {
      if (!node || !Array.isArray(node.marks)) {
        return node;
      }
      return {
        ...node,
        marks: node.marks.filter(mark => mark.type !== 'typeAheadQuery')
      };
    },
    status: node => {
      if (node.attrs && !!node.attrs.text) {
        return removeNonAnnotationMarks(node);
      }
      return false; // empty status
    },
    caption: node => {
      if (node.content) {
        return node;
      }
      return false; // empty caption
    },
    tableCell: node => {
      if (hasNestedTable(node) && fg('platform_editor_use_nested_table_pm_nodes')) {
        return transformNestedTableNodeOutgoingDocument(node);
      }
    },
    tableHeader: node => {
      if (hasNestedTable(node) && fg('platform_editor_use_nested_table_pm_nodes')) {
        return transformNestedTableNodeOutgoingDocument(node);
      }
    },
    emoji: removeNonAnnotationMarks,
    mention: removeNonAnnotationMarks,
    date: removeNonAnnotationMarks,
    hardBreak: removeMarks,
    inlineCard: removeNonAnnotationMarks
  });
  return sanitizedJSON;
}