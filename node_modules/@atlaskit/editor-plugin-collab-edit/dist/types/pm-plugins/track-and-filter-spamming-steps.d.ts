import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey, type Transaction } from '@atlaskit/editor-prosemirror/state';
import { type Step } from '@atlaskit/editor-prosemirror/transform';
import type { TrackSpammingStepsMetadata } from '../types';
export type RecentTransactionTimestamp = {
    timestamp: number;
    steps: Step[];
};
export type RecentTransactionTimestamps = Map<string, RecentTransactionTimestamp>;
export type TrackFilteredTransaction = (tr: Transaction) => void;
export type SanitizedFilteredStep = {
    stepType: string;
    stepInstance?: string;
    attr?: string;
    markType?: string;
};
/**
 * Sanitizes a given ProseMirror step by extracting its type and non-UCG relevant attributes.
 *
 * @param {Step} step - The ProseMirror step to be sanitized.
 * @returns {SanitizedFilteredStep} - The sanitized step with only necessary information.
 *
 * @example
 * ```
 * const step = new AttrStep(10, 'colwidth', [123, 451] );
 * const sanitized = sanitizeFilteredStep(step);
 *
 * // Output: { stepType: 'attr', stepInstance: 'AttrStep', attr: 'example' }
 * ```
 */
export declare const sanitizeFilteredStep: (step: Step) => SanitizedFilteredStep;
export declare const createFilterTransaction: (recentTransactionsTimestamps: RecentTransactionTimestamps, trackFilteredTransaction: TrackFilteredTransaction) => (tr: Transaction) => boolean;
export declare function generateTransactionKey(tr: Transaction): string;
export declare const trackSpammingStepsPluginKey: PluginKey<TrackSpammingStepsMetadata>;
export declare const createPlugin: (trackFilteredTransaction: TrackFilteredTransaction) => SafePlugin<TrackSpammingStepsMetadata>;
