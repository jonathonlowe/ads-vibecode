import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import { Step as ProseMirrorStep } from '@atlaskit/editor-prosemirror/transform';
import type { Transform as ProseMirrorTransform } from '@atlaskit/editor-prosemirror/transform';
import type { CollabEditPlugin } from '../collabEditPluginType';
declare class LockableRebaseable {
    readonly step: ProseMirrorStep;
    readonly inverted: ProseMirrorStep;
    readonly origin: ProseMirrorTransform;
    constructor(step: ProseMirrorStep, inverted: ProseMirrorStep, origin: ProseMirrorTransform);
}
/**
 * Merge a set of steps together to reduce the total number of steps stored in memory.
 *
 * All steps passing through here should be "lockable" (ie. can be locked by the document service)
 * so that it can be indicated they have already been sent (or are about to be sent) to the backend
 * and cannot be merged.
 *
 * @param steps Rebaseable steps
 * @returns Rebaseable steps
 */
export declare function mergeUnconfirmedSteps(steps: LockableRebaseable[], api: ExtractInjectionAPI<CollabEditPlugin> | undefined): LockableRebaseable[];
export {};
