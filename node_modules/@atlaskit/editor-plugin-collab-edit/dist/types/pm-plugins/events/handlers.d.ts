import type { EditorAnalyticsAPI } from '@atlaskit/editor-common/analytics';
import type { CollabEditProvider, CollabEventConflictPayload, CollabEventConnectionData, CollabEventInitData, CollabEventLocalStepData, CollabEventPresenceData, CollabEventRemoteData, CollabTelepointerPayload } from '@atlaskit/editor-common/collab';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { FeatureFlags } from '@atlaskit/editor-common/types';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { PrivateCollabEditOptions } from '../../types';
export type SynchronyEntity = {
    on: (evt: 'disconnected' | 'error', handler: (...args: any) => void) => void;
    off: (evt: 'disconnected' | 'error', handler: (...args: any) => void) => void;
};
export interface CollabHandlers {
    initHandler: (data: CollabEventInitData) => void;
    connectedHandler: (data: CollabEventConnectionData) => void;
    dataHandler: (data: CollabEventRemoteData) => void;
    presenceHandler: (data: CollabEventPresenceData) => void;
    telepointerHandler: (data: CollabTelepointerPayload) => void;
    localStepsHandler: (data: CollabEventLocalStepData) => void;
    errorHandler: (error: any) => void;
    entityHandler: ({ entity }: {
        entity: SynchronyEntity;
    }) => void;
    dataConflictHandler: (data: CollabEventConflictPayload) => void;
}
export type Cleanup = () => void;
export declare const subscribe: (currentDeps_0: EditorView, currentDeps_1: CollabEditProvider<import("@atlaskit/editor-common/collab").CollabEvents>, currentDeps_2: PrivateCollabEditOptions, currentDeps_3: FeatureFlags, currentDeps_4?: ProviderFactory | undefined, currentDeps_5?: EditorAnalyticsAPI | undefined) => Cleanup;
