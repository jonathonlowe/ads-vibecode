"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trackLastOrganicChangePluginKey = exports.createPlugin = void 0;
var _collab = require("@atlaskit/editor-common/collab");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _transform = require("@atlaskit/editor-prosemirror/transform");
var _utils = require("./utils");
var trackLastOrganicChangePluginKey = exports.trackLastOrganicChangePluginKey = new _state.PluginKey('collabTrackLastOrganicChangePlugin');
var createPlugin = exports.createPlugin = function createPlugin() {
  return new _safePlugin.SafePlugin({
    key: trackLastOrganicChangePluginKey,
    state: {
      init: function init() {
        return {
          lastLocalOrganicChangeAt: null,
          lastRemoteOrganicChangeAt: null,
          lastLocalOrganicBodyChangeAt: null,
          lastRemoteOrganicBodyChangeAt: null
        };
      },
      apply: function apply(transaction, prevPluginState) {
        if (Boolean(transaction.getMeta('appendedTransaction'))) {
          return prevPluginState;
        }
        var isRemote = Boolean(transaction.getMeta('isRemote'));
        var isDocumentReplaceFromRemote = isRemote && Boolean(transaction.getMeta('replaceDocument'));

        // Inline comment annotations are not considered as edits to the document body
        var isAnnotationStep = !!transaction.steps.find(function (step) {
          var _step$mark;
          return (step instanceof _transform.AddMarkStep || step instanceof _transform.RemoveMarkStep) && ((_step$mark = step.mark) === null || _step$mark === void 0 || (_step$mark = _step$mark.type) === null || _step$mark === void 0 ? void 0 : _step$mark.name) === 'annotation';
        });
        if (isDocumentReplaceFromRemote) {
          return prevPluginState;
        }
        if ((0, _collab.isDirtyTransaction)(transaction)) {
          return prevPluginState;
        }
        if ((0, _utils.isOrganicChange)(transaction)) {
          if (isRemote) {
            return {
              lastLocalOrganicChangeAt: prevPluginState.lastLocalOrganicChangeAt,
              lastRemoteOrganicChangeAt: Date.now(),
              lastLocalOrganicBodyChangeAt: prevPluginState.lastLocalOrganicBodyChangeAt,
              lastRemoteOrganicBodyChangeAt: isAnnotationStep ? prevPluginState.lastRemoteOrganicBodyChangeAt : Date.now()
            };
          }
          return {
            lastLocalOrganicChangeAt: Date.now(),
            lastRemoteOrganicChangeAt: prevPluginState.lastRemoteOrganicChangeAt,
            lastLocalOrganicBodyChangeAt: isAnnotationStep ? prevPluginState.lastLocalOrganicBodyChangeAt : Date.now(),
            lastRemoteOrganicBodyChangeAt: prevPluginState.lastRemoteOrganicBodyChangeAt
          };
        }
        return prevPluginState;
      }
    }
  });
};