import { fg } from '@atlaskit/platform-feature-flags';
import { getSendableSelection } from '../actions';
import { pluginKey } from '../main/plugin-key';
export var sendTransaction = function sendTransaction(_ref) {
  var originalTransaction = _ref.originalTransaction,
    transactions = _ref.transactions,
    oldEditorState = _ref.oldEditorState,
    newEditorState = _ref.newEditorState,
    useNativePlugin = _ref.useNativePlugin,
    viewMode = _ref.viewMode,
    hideTelecursorOnLoad = _ref.hideTelecursorOnLoad;
  return function (provider) {
    var docChangedTransaction = transactions.find(function (tr) {
      return tr.docChanged;
    });
    var currentPluginState = pluginKey.getState(newEditorState);
    if (!(currentPluginState !== null && currentPluginState !== void 0 && currentPluginState.isReady)) {
      return;
    }
    var shouldSendStepForSynchronyCollabProvider = !originalTransaction.getMeta('isRemote') &&
    // TODO: ED-8995 - We need to do this check to reduce the number of race conditions when working with tables.
    // This metadata is coming from the scaleTable command in table-resizing plugin
    !originalTransaction.getMeta('scaleTable') && docChangedTransaction;
    if (useNativePlugin || shouldSendStepForSynchronyCollabProvider) {
      provider.send(docChangedTransaction, oldEditorState, newEditorState);
    }
    var prevPluginState = pluginKey.getState(oldEditorState);
    var _ref2 = prevPluginState || {},
      prevActiveParticipants = _ref2.activeParticipants;
    var activeParticipants = currentPluginState.activeParticipants,
      sessionId = currentPluginState.sessionId;
    var selectionChanged = !oldEditorState.selection.eq(newEditorState.selection);
    var participantsChanged = prevActiveParticipants && !prevActiveParticipants.eq(activeParticipants);
    if (sessionId && viewMode === 'edit' && (selectionChanged && !docChangedTransaction || (fg('platform_editor_no_telecursor_on_live_doc_init') ? participantsChanged && !hideTelecursorOnLoad : participantsChanged))) {
      var selection = getSendableSelection(newEditorState.selection);
      var message = {
        type: 'telepointer',
        selection: selection,
        sessionId: sessionId
      };
      provider.sendMessage(message);
    }
  };
};