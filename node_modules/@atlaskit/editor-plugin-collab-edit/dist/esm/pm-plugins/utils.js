import _typeof from "@babel/runtime/helpers/typeof";
import { AnalyticsStep, SetAttrsStep } from '@atlaskit/adf-schema/steps';
import { ACTION, ACTION_SUBJECT, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { processRawValueWithoutValidation } from '@atlaskit/editor-common/process-raw-value';
import { ZERO_WIDTH_JOINER } from '@atlaskit/editor-common/whitespace';
import { Transaction, Selection, TextSelection } from '@atlaskit/editor-prosemirror/state';
import { ReplaceStep } from '@atlaskit/editor-prosemirror/transform';
import { Decoration } from '@atlaskit/editor-prosemirror/view';
import { getParticipantColor } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
export var findPointers = function findPointers(id, decorations) {
  return decorations.find()
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  .reduce(function (arr, deco) {
    return deco.spec.pointer.sessionId === id ? arr.concat(deco) : arr;
  }, []);
};
function style(options) {
  var color = options && options.color || 'black';
  return "border-right: 2px solid ".concat(color, "; margin-right: -2px; z-index: 1");
}
export function getAvatarColor(str) {
  var participantColor = getParticipantColor(str);
  return {
    index: participantColor.index,
    backgroundColor: participantColor.color.backgroundColor,
    textColor: participantColor.color.textColor
  };
}
export var createTelepointers = function createTelepointers(from, to, sessionId, isSelection, initial, presenceId) {
  var decorations = [];
  var avatarColor = getAvatarColor(presenceId);
  var color = avatarColor.index.toString();
  if (isSelection) {
    var className = "telepointer color-".concat(color, " telepointer-selection");
    decorations.push(
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Decoration.inline(from, to, {
      class: className,
      'data-initial': initial
    }, {
      pointer: {
        sessionId: sessionId,
        presenceId: presenceId
      }
    }));
  }
  var spaceJoinerBefore = document.createElement('span');
  spaceJoinerBefore.textContent = ZERO_WIDTH_JOINER;
  var spaceJoinerAfter = document.createElement('span');
  spaceJoinerAfter.textContent = ZERO_WIDTH_JOINER;
  var cursor = document.createElement('span');
  cursor.textContent = ZERO_WIDTH_JOINER;
  cursor.className = "telepointer color-".concat(color, " telepointer-selection-badge");
  cursor.style.cssText = "".concat(style({
    color: avatarColor.backgroundColor
  }), ";");
  cursor.setAttribute('data-initial', initial);
  return decorations.concat(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  Decoration.widget(to, spaceJoinerAfter, {
    pointer: {
      sessionId: sessionId,
      presenceId: presenceId
    },
    key: "telepointer-".concat(sessionId, "-zero")
  })).concat(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  Decoration.widget(to, cursor, {
    pointer: {
      sessionId: sessionId,
      presenceId: presenceId
    },
    key: "telepointer-".concat(sessionId)
  })).concat(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  Decoration.widget(to, spaceJoinerBefore, {
    pointer: {
      sessionId: sessionId,
      presenceId: presenceId
    },
    key: "telepointer-".concat(sessionId, "-zero")
  }));
};
export var replaceDocument = function replaceDocument(doc, state, version, options, reserveCursor, editorAnalyticsAPI) {
  var schema = state.schema,
    tr = state.tr;
  var hasContent;
  var content;
  if (fg('platform_editor_use_nested_table_pm_nodes')) {
    var parsedDoc = processRawValueWithoutValidation(schema, doc, editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 ? void 0 : editorAnalyticsAPI.fireAnalyticsEvent);
    hasContent = !!(parsedDoc !== null && parsedDoc !== void 0 && parsedDoc.childCount);
    content = parsedDoc === null || parsedDoc === void 0 ? void 0 : parsedDoc.content;
  } else {
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    content = (doc.content || []).map(function (child) {
      return schema.nodeFromJSON(child);
    });
    hasContent = Array.isArray(content) && !!content.length;
  }
  if (hasContent) {
    tr.setMeta('addToHistory', false);
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    tr.replaceWith(0, state.doc.nodeSize - 2, content);
    var selection = state.selection;
    if (reserveCursor) {
      // If the cursor is still in the range of the new document,
      // keep where it was.
      if (selection.to < tr.doc.content.size - 2) {
        var $from = tr.doc.resolve(selection.from);
        var $to = tr.doc.resolve(selection.to);
        var newselection = new TextSelection($from, $to);
        tr.setSelection(newselection);
      }
    } else {
      tr.setSelection(Selection.atStart(tr.doc));
    }
    tr.setMeta('replaceDocument', true);
    if (_typeof(version) !== undefined && options && options.useNativePlugin) {
      var collabState = {
        version: version,
        unconfirmed: []
      };
      tr.setMeta('collab$', collabState);
    }
  }
  return tr;
};
export var scrollToCollabCursor = function scrollToCollabCursor(editorView, participants, sessionId, index, editorAnalyticsAPI) {
  var selectedUser = participants[index];
  if (selectedUser && selectedUser.cursorPos !== undefined && selectedUser.sessionId !== sessionId) {
    var state = editorView.state;
    var tr = state.tr;
    var analyticsPayload = {
      action: ACTION.MATCHED,
      actionSubject: ACTION_SUBJECT.SELECTION,
      eventType: EVENT_TYPE.TRACK
    };
    tr.setSelection(Selection.near(tr.doc.resolve(selectedUser.cursorPos)));
    editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent(analyticsPayload)(tr);
    tr.scrollIntoView();
    editorView.dispatch(tr);
    if (!editorView.hasFocus()) {
      editorView.focus();
    }
  }
};
export var getPositionOfTelepointer = function getPositionOfTelepointer(sessionId, decorationSet) {
  var scrollPosition;
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  decorationSet.find().forEach(function (deco) {
    if (deco.type.spec.pointer.sessionId === sessionId) {
      scrollPosition = deco.from;
    }
  });
  return scrollPosition;
};
export var isReplaceStep = function isReplaceStep(step) {
  return step instanceof ReplaceStep;
};
var _originalTransactionHasMeta = function originalTransactionHasMeta(transaction, metaTag) {
  var hasMetaTag = Boolean(transaction.getMeta(metaTag));
  if (hasMetaTag) {
    return true;
  }
  var appendedTransaction = transaction.getMeta('appendedTransaction');
  if (appendedTransaction instanceof Transaction) {
    return _originalTransactionHasMeta(appendedTransaction, metaTag);
  }
  return false;
};

/**
 * This list contains step attributes that do not result from a user action.
 * All steps that contain ONLY the blocked attribute are considered automated steps
 * and should not be recognised as organic change.
 *
 * `attr_colwidth` is an exception to above explanation. Resizing the column
 * currently creates too many steps and is therefore also on this list.
 *
 * Steps analycs dashboard: https://atlassian-discover.cloud.databricks.com/dashboardsv3/01ef4d3c8aa916c8b0cb5332a9f37caf/published?o=4482001201517624
 */
export { _originalTransactionHasMeta as originalTransactionHasMeta };
var blockedAttrsList = ['__contextId', 'localId', '__autoSize', 'attr_colwidth', 'originalHeight', 'originalWidth'];

/**
 * Takes the transaction and editor state and checks if the transaction is considered organic change
 * @param tr Transaction
 * @returns boolean
 */
export var isOrganicChange = function isOrganicChange(tr) {
  // If document has not been marked as `docChanged` by PM, skip the rest of the logic
  if (!tr.docChanged) {
    return false;
  }
  return tr.steps.some(function (step) {
    // If a step is an instance of AnalyticsStep, it is not considered organic
    if (step instanceof AnalyticsStep) {
      return false;
    }
    // If a step is not an instance of SetAttrsStep, it is considered organic
    if (!(step instanceof SetAttrsStep)) {
      return true;
    }
    var allAttributes = Object.keys(step.attrs);
    // If a step is an instance of SetAttrsStep, it checks if the attributes in the step
    // are not in the `blockedAttributes`. If one of the attributes not on the list, it considers the change
    // organic but only if the entire document is not equal to the previous state.
    return allAttributes.some(function (attr) {
      if (!blockedAttrsList.includes(attr)) {
        return true;
      }
    }) && !tr.doc.eq(tr.before);
  });
};