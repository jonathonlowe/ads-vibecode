import React, { type Ref } from 'react';
import { PureComponent } from 'react';
import { type Appearance, type ContentRef, type TaskDecisionProvider } from '../types';
export interface Props {
    taskId: string;
    isDone?: boolean;
    isRenderer?: boolean;
    isFocused?: boolean;
    onChange?: (taskId: string, isChecked: boolean) => void;
    onClick?: () => void;
    contentRef?: ContentRef;
    children?: any;
    taskDecisionProvider?: Promise<TaskDecisionProvider>;
    objectAri?: string;
    showPlaceholder?: boolean;
    placeholder?: string;
    appearance?: Appearance;
    disabled?: boolean;
    dataAttributes?: {
        [key: string]: string | number;
    };
    inputRef?: Ref<HTMLInputElement>;
    disableOnChange?: boolean;
}
export interface State {
    isDone?: boolean;
}
export default class ResourcedTaskItem extends PureComponent<Props, State> {
    static defaultProps: Partial<Props>;
    private mounted;
    constructor(props: Props);
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    private subscribe;
    private unsubscribe;
    private onUpdate;
    private handleOnChange;
    private handleOnClick;
    render(): React.JSX.Element;
}
