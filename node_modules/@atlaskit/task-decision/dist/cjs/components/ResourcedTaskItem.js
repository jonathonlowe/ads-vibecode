"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _TaskItem = _interopRequireDefault(require("./TaskItem"));
var _analyticsNamespacedContext = require("@atlaskit/analytics-namespaced-context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ResourcedTaskItem = exports.default = /*#__PURE__*/function (_PureComponent) {
  function ResourcedTaskItem(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ResourcedTaskItem);
    _this = _callSuper(this, ResourcedTaskItem, [props]);
    (0, _defineProperty2.default)(_this, "mounted", false);
    (0, _defineProperty2.default)(_this, "onUpdate", function (state) {
      _this.setState({
        isDone: state === 'DONE'
      });
    });
    (0, _defineProperty2.default)(_this, "handleOnChange", function (taskId, isDone) {
      var _this$props = _this.props,
        taskDecisionProvider = _this$props.taskDecisionProvider,
        objectAri = _this$props.objectAri,
        onChange = _this$props.onChange,
        disableOnChange = _this$props.disableOnChange;
      if (disableOnChange) {
        return;
      }

      // Optimistically update the task
      _this.setState({
        isDone: isDone
      });
      if (taskDecisionProvider && objectAri) {
        // Call provider to update task
        taskDecisionProvider.then(function (provider) {
          if (!_this.mounted) {
            return;
          }
          provider.toggleTask({
            localId: taskId,
            objectAri: objectAri
          }, isDone ? 'DONE' : 'TODO');

          // onChange could trigger a rerender, in order to get the correct state
          // we should only call onChange once the internal state have been modified
          if (onChange) {
            onChange(taskId, isDone);
          }
        });
      } else {
        // No provider - state managed by consumer
        if (onChange) {
          onChange(taskId, isDone);
        }
      }
    });
    (0, _defineProperty2.default)(_this, "handleOnClick", function () {
      var onClick = _this.props.onClick;
      if (onClick) {
        onClick();
      }
    });
    _this.state = {
      isDone: props.isDone
    };
    return _this;
  }
  (0, _inherits2.default)(ResourcedTaskItem, _PureComponent);
  return (0, _createClass2.default)(ResourcedTaskItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.subscribe(this.props.taskDecisionProvider, this.props.objectAri, this.props.isDone);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.isDone !== this.props.isDone) {
        // This only occurs for Actions (DONE vs TODO), since Decisions only support DECIDED.
        // If the document is refreshed or changed, we need to reset the local state to match the new
        // source of truth from the revised data.
        this.onUpdate(nextProps.isDone ? 'DONE' : 'TODO');
      }
      if (nextProps.taskDecisionProvider !== this.props.taskDecisionProvider || nextProps.objectAri !== this.props.objectAri) {
        this.unsubscribe();
        this.subscribe(nextProps.taskDecisionProvider, nextProps.objectAri, nextProps.isDone);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscribe();
      this.mounted = false;
    }
  }, {
    key: "subscribe",
    value: function subscribe(taskDecisionProvider, objectAri, isDone) {
      var _this2 = this;
      if (taskDecisionProvider && objectAri) {
        taskDecisionProvider.then(function (provider) {
          if (!_this2.mounted) {
            return;
          }
          var taskId = _this2.props.taskId;
          var objectKey = {
            localId: taskId,
            objectAri: objectAri
          };
          var item = _objectSpread(_objectSpread({}, objectKey), {}, {
            state: isDone ? 'DONE' : 'TODO',
            lastUpdateDate: new Date(),
            type: 'TASK'
          });
          provider.subscribe({
            localId: taskId,
            objectAri: objectAri
          }, _this2.onUpdate, item);
        });
      }
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      var _this3 = this;
      var _this$props2 = this.props,
        taskDecisionProvider = _this$props2.taskDecisionProvider,
        taskId = _this$props2.taskId,
        objectAri = _this$props2.objectAri;
      if (taskDecisionProvider && objectAri) {
        taskDecisionProvider.then(function (provider) {
          provider.unsubscribe({
            localId: taskId,
            objectAri: objectAri
          }, _this3.onUpdate);
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var isDone = this.state.isDone;
      var _this$props3 = this.props,
        appearance = _this$props3.appearance,
        children = _this$props3.children,
        contentRef = _this$props3.contentRef,
        objectAri = _this$props3.objectAri,
        showPlaceholder = _this$props3.showPlaceholder,
        placeholder = _this$props3.placeholder,
        taskId = _this$props3.taskId,
        disabled = _this$props3.disabled,
        dataAttributes = _this$props3.dataAttributes,
        isRenderer = _this$props3.isRenderer,
        isFocused = _this$props3.isFocused,
        inputRef = _this$props3.inputRef;
      return /*#__PURE__*/_react.default.createElement(_analyticsNamespacedContext.FabricElementsAnalyticsContext, {
        data: {
          objectAri: objectAri
        }
      }, /*#__PURE__*/_react.default.createElement(_TaskItem.default, {
        isDone: isDone,
        isRenderer: isRenderer,
        isFocused: isFocused,
        taskId: taskId,
        onChange: this.handleOnChange,
        onClick: this.handleOnClick,
        appearance: appearance,
        contentRef: contentRef,
        showPlaceholder: showPlaceholder,
        placeholder: placeholder,
        disabled: disabled,
        dataAttributes: dataAttributes,
        inputRef: inputRef
      }, children));
    }
  }]);
}(_react.PureComponent);
(0, _defineProperty2.default)(ResourcedTaskItem, "defaultProps", {
  appearance: 'inline'
});