/* TaskItem.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./TaskItem.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useMemo, useRef } from 'react';
// eslint-disable-next-line @atlassian/tangerine/import/entry-points
import { Icon } from '@atlaskit/icon/base-new';
// eslint-disable-next-line @atlassian/tangerine/import/entry-points

import CheckboxCheckedIcon from '@atlaskit/icon/core/checkbox-checked';
import Item from './Item';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireEventInElementsChannel } from '../analytics';
import { componentWithFG } from '@atlaskit/platform-feature-flags-react';
import { useMergeRefs } from 'use-callback-ref';
var CheckboxUncheckedIcon = function CheckboxUncheckedIcon(props) {
  return /*#__PURE__*/React.createElement(Icon, _extends({
    dangerouslySetGlyph: "<rect width=\"12.5\" height=\"12.5\" x=\"1.75\" y=\"1.75\" stroke=\"currentcolor\" stroke-width=\"1.5\" rx=\"1.25\"/>",
    type: 'core'
  }, props));
};

/**
 * References packages/design-system/checkbox/src/checkbox.tsx
 * To be used until mobile editor does not require legacy themed() API anymore,
 * which will allow migration to use @atlaskit/checkbox instead
 */
var checkboxStyles = null;
var taskCount = 0;
var getCheckBoxId = function getCheckBoxId(localId) {
  return "".concat(localId, "-").concat(taskCount++);
};
var TaskItemWithoutRefFix = function TaskItemWithoutRefFix(props) {
  var appearance = props.appearance,
    isDone = props.isDone,
    isFocused = props.isFocused,
    contentRef = props.contentRef,
    children = props.children,
    placeholder = props.placeholder,
    showPlaceholder = props.showPlaceholder,
    disabled = props.disabled,
    dataAttributes = props.dataAttributes,
    taskId = props.taskId,
    onChange = props.onChange,
    onClick = props.onClick,
    createAnalyticsEvent = props.createAnalyticsEvent;
  var inputRefFromProps = props.inputRef;
  var checkBoxId = useMemo(function () {
    return getCheckBoxId(taskId);
  }, [taskId]);
  var handleOnChange = useMemo(function () {
    return function (_evt) {
      var newIsDone = !isDone;
      if (onChange) {
        onChange(taskId, newIsDone);
      }
      var action = newIsDone ? 'checked' : 'unchecked';
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel({
          action: action,
          actionSubject: 'action',
          eventType: 'ui',
          attributes: {
            localId: taskId
          }
        })(createAnalyticsEvent);
      }
    };
  }, [onChange, taskId, isDone, createAnalyticsEvent]);
  var handleOnKeyPress = useMemo(function () {
    return function (event) {
      if (event.key === 'Enter') {
        handleOnChange(event);
      }
    };
  }, [handleOnChange]);
  var defaultInputRef = useRef(null);
  var inputRef = inputRefFromProps !== null && inputRefFromProps !== void 0 ? inputRefFromProps : defaultInputRef;
  var icon = /*#__PURE__*/React.createElement("span", {
    contentEditable: false,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1tcg _1bsb1tcg _4t3i1tcg _kqswh2mm _1wpzv2br _1snx1r31 _1746glyw _dx3f1o36 _1h5xidpf _sqizidpf _fs2cidpf _1smcidpf _oezm15vq _1l0615vq _1abj1mn3 _18a711so _16np1elr _a27kkb7n _q3p7usvi _qhqx1nu9 _10cr1ssb _zfav1ssb _m7eu1ooe _l9o0n7od _1efjn7od _1u2istnw _32ro1j9a _1wn015vq _den512j9 _zh8l1b66 _g5w3stnw _whhepxbi _1stbpxbi _18tob3bt _1awt1ule _haf81ssb _ra781ssb _cr751ooe _1q8r7vkz _9l2s7vkz _1mh7kb7n _s3uktlke _1davidpf _8bo8stnw _psnc1ssb _4k421ssb _1rvv1ooe _13vl73ad _1t711tcg _1nuz1tcg _cs4qstnw _9j2j1ssb _1mwj1ssb _19l51ooe _12yy1d5g _1miy1elr _1umo18hz _tpz25w2r _k6dg18hz _1qduewfl _q8ft1fvw _1y9t5w2r _ut031fvw _gi9hr01l _1qp6muej _wxkgr01l _wo245w2r _c8dpmuej _d2dcsyzs _1eulsyzs _1bc7syzs _16fmsyzs _bhkusyzs _czfesyzs _1gxgsyzs _19w0syzs _1x1y1lg7"]),
    style: {
      "--_toyvsf": ix("2px solid ".concat("var(--ds-border-focused, #388BFF)"))
    }
  }, /*#__PURE__*/React.createElement("input", {
    id: checkBoxId,
    "aria-labelledby": "".concat(checkBoxId, "-wrapper"),
    name: checkBoxId,
    type: "checkbox",
    onChange: handleOnChange,
    onClick: onClick,
    checked: !!isDone,
    disabled: !!disabled,
    suppressHydrationWarning: true,
    onKeyPress: handleOnKeyPress,
    ref: inputRef
  }), isDone ? /*#__PURE__*/React.createElement(CheckboxCheckedIcon, {
    label: ""
  }) : /*#__PURE__*/React.createElement(CheckboxUncheckedIcon, {
    label: ""
  }));
  React.useEffect(function () {
    if (isFocused && inputRef.current) {
      var _inputRef$current, _inputRef$current2;
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
      setTimeout(function () {
        var _inputRef$current3;
        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 || _inputRef$current3.focus();
      }, 100);
    }
  }, [isFocused, inputRef]);
  return /*#__PURE__*/React.createElement(Item, {
    appearance: appearance,
    contentRef: contentRef,
    icon: icon,
    placeholder: placeholder,
    showPlaceholder: showPlaceholder,
    itemType: "TASK",
    dataAttributes: dataAttributes,
    checkBoxId: checkBoxId
  }, children);
};
var TaskItemWithRefFix = function TaskItemWithRefFix(props) {
  var appearance = props.appearance,
    isDone = props.isDone,
    isFocused = props.isFocused,
    contentRef = props.contentRef,
    children = props.children,
    placeholder = props.placeholder,
    showPlaceholder = props.showPlaceholder,
    disabled = props.disabled,
    dataAttributes = props.dataAttributes,
    taskId = props.taskId,
    onChange = props.onChange,
    onClick = props.onClick,
    createAnalyticsEvent = props.createAnalyticsEvent,
    inputRefFromProps = props.inputRef;
  var checkBoxId = useMemo(function () {
    return getCheckBoxId(taskId);
  }, [taskId]);
  var handleOnChange = useMemo(function () {
    return function (_evt) {
      var newIsDone = !isDone;
      if (onChange) {
        onChange(taskId, newIsDone);
      }
      var action = newIsDone ? 'checked' : 'unchecked';
      if (createAnalyticsEvent) {
        createAndFireEventInElementsChannel({
          action: action,
          actionSubject: 'action',
          eventType: 'ui',
          attributes: {
            localId: taskId
          }
        })(createAnalyticsEvent);
      }
    };
  }, [onChange, taskId, isDone, createAnalyticsEvent]);
  var handleOnKeyPress = useMemo(function () {
    return function (event) {
      if (event.key === 'Enter') {
        handleOnChange(event);
      }
    };
  }, [handleOnChange]);
  var localInputRef = useRef(null);
  var inputRef = useMergeRefs(inputRefFromProps === undefined ? [localInputRef] : [inputRefFromProps, localInputRef]);
  var icon = /*#__PURE__*/React.createElement("span", {
    contentEditable: false,
    className: ax(["_16jlidpf _1o9zidpf _i0dl1tcg _1bsb1tcg _4t3i1tcg _kqswh2mm _1wpzv2br _1snx1r31 _1746glyw _dx3f1o36 _1h5xidpf _sqizidpf _fs2cidpf _1smcidpf _oezm15vq _1l0615vq _1abj1mn3 _18a711so _16np1elr _a27kkb7n _q3p7usvi _qhqx1nu9 _10cr1ssb _zfav1ssb _m7eu1ooe _l9o0n7od _1efjn7od _1u2istnw _32ro1j9a _1wn015vq _den512j9 _zh8l1b66 _g5w3stnw _whhepxbi _1stbpxbi _18tob3bt _1awt1ule _haf81ssb _ra781ssb _cr751ooe _1q8r7vkz _9l2s7vkz _1mh7kb7n _s3uktlke _1davidpf _8bo8stnw _psnc1ssb _4k421ssb _1rvv1ooe _13vl73ad _1t711tcg _1nuz1tcg _cs4qstnw _9j2j1ssb _1mwj1ssb _19l51ooe _12yy1d5g _1miy1elr _1umo18hz _tpz25w2r _k6dg18hz _1qduewfl _q8ft1fvw _1y9t5w2r _ut031fvw _gi9hr01l _1qp6muej _wxkgr01l _wo245w2r _c8dpmuej _d2dcsyzs _1eulsyzs _1bc7syzs _16fmsyzs _bhkusyzs _czfesyzs _1gxgsyzs _19w0syzs _1x1y1lg7"]),
    style: {
      "--_toyvsf": ix("2px solid ".concat("var(--ds-border-focused, #388BFF)"))
    }
  }, /*#__PURE__*/React.createElement("input", {
    id: checkBoxId,
    "aria-labelledby": "".concat(checkBoxId, "-wrapper"),
    name: checkBoxId,
    type: "checkbox",
    onChange: handleOnChange,
    onClick: onClick,
    checked: !!isDone,
    disabled: !!disabled,
    suppressHydrationWarning: true,
    onKeyPress: handleOnKeyPress,
    ref: inputRef
  }), isDone ? /*#__PURE__*/React.createElement(CheckboxCheckedIcon, {
    label: ""
  }) : /*#__PURE__*/React.createElement(CheckboxUncheckedIcon, {
    label: ""
  }));
  React.useEffect(function () {
    if (isFocused && inputRef.current) {
      var _inputRef$current4, _inputRef$current5;
      (_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 || _inputRef$current4.focus();
      (_inputRef$current5 = inputRef.current) === null || _inputRef$current5 === void 0 || _inputRef$current5.blur();
      setTimeout(function () {
        var _inputRef$current6;
        (_inputRef$current6 = inputRef.current) === null || _inputRef$current6 === void 0 || _inputRef$current6.focus();
      }, 100);
    }
  }, [isFocused, inputRef]);
  return /*#__PURE__*/React.createElement(Item, {
    appearance: appearance,
    contentRef: contentRef,
    icon: icon,
    placeholder: placeholder,
    showPlaceholder: showPlaceholder,
    itemType: "TASK",
    dataAttributes: dataAttributes,
    checkBoxId: checkBoxId
  }, children);
};

// This is to ensure that the "type" is exported, as it gets lost and not exported along with TaskItem after
// going through the high order component.

export default componentWithFG('platform_editor_task_item_ref_fix', withAnalyticsEvents()(TaskItemWithRefFix), withAnalyticsEvents()(TaskItemWithoutRefFix));