/* TaskList.tsx generated by @compiled/babel-plugin v0.36.1 */
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import "./TaskList.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { PureComponent } from 'react';
import { FabricElementsAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
var listStyles = null;
var taskListStyles = null;
var TaskList = /*#__PURE__*/function (_PureComponent) {
  function TaskList() {
    _classCallCheck(this, TaskList);
    return _callSuper(this, TaskList, arguments);
  }
  _inherits(TaskList, _PureComponent);
  return _createClass(TaskList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        listId = _this$props.listId,
        children = _this$props.children;
      var listSize = React.Children.count(children);
      if (!children) {
        return null;
      }

      // Data attributes are required for copy and paste from rendered content
      // to the editor to preserve the task.
      // This allows the editor to differentiate between numbered and ordered lists,
      // and action items, which all share the common `<li>` element.
      // The value of `data-task-local-id` should be discarded upon paste, with a
      // a new uuid generated by the editor for the cloned content.
      return /*#__PURE__*/React.createElement("div", {
        "data-task-list-local-id": "",
        className: ax(["_2mzuglyw _19bvidpf"])
      }, React.Children.map(children, function (child, idx) {
        var _ref = child.props,
          localId = _ref.localId;
        return /*#__PURE__*/React.createElement(FabricElementsAnalyticsContext, {
          data: {
            listLocalId: listId,
            listSize: listSize,
            position: idx
          }
        }, /*#__PURE__*/React.createElement("div", {
          key: idx,
          "data-task-local-id": localId || '',
          className: ax(["_19pk1b66"])
        }, child));
      }));
    }
  }]);
}(PureComponent);
export { TaskList as default };