/* PrimaryToolbarComponent.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrimaryToolbarComponent = PrimaryToolbarComponent;
require("./PrimaryToolbarComponent.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = _interopRequireDefault(require("@atlaskit/editor-common/messages"));
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _showMoreHorizontal = _interopRequireDefault(require("@atlaskit/icon/core/show-more-horizontal"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _overflowToolbarConfig = require("./overflow-toolbar-config");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DROPDOWN_WIDTH = 240;
var buttonStyles = null;
function PrimaryToolbarComponent(_ref) {
  var api = _ref.api,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsScrollableElement = _ref.popupsScrollableElement;
  var intl = (0, _reactIntlNext.useIntl)();
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var items = (0, _react.useMemo)(function () {
    return (0, _overflowToolbarConfig.getOverflowPrimaryToolbarConfig)({
      api: api,
      intl: intl
    });
  }, [api, intl]);
  var content = intl.formatMessage(_messages.default.viewMore);
  var onClick = (0, _react.useCallback)(function () {
    setIsOpen(!isOpen);
  }, [isOpen]);
  var onMenuItemActivated = (0, _react.useCallback)(function (_ref2) {
    var _item$onClick;
    var item = _ref2.item;
    item === null || item === void 0 || (_item$onClick = item.onClick) === null || _item$onClick === void 0 || _item$onClick.call(item);
  }, []);
  (0, _react.useEffect)(function () {
    if ((0, _platformFeatureFlags.fg)('platform_editor_controls_patch_4')) {
      var _api$analytics;
      api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 || _api$analytics.actions.fireAnalyticsEvent({
        action: _analytics.ACTION.RENDERED,
        actionSubject: _analytics.ACTION_SUBJECT.TOOLBAR,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.DOCKED_PRIMARY_TOOLBAR,
        eventType: _analytics.EVENT_TYPE.UI
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/React.createElement(_uiMenu.DropdownMenu, {
    isOpen: isOpen,
    onOpenChange: function onOpenChange(attrs) {
      return setIsOpen(attrs.isOpen);
    },
    items: items,
    arrowKeyNavigationProviderOptions: {
      type: _uiMenu.ArrowKeyNavigationType.MENU
    },
    boundariesElement: popupsBoundariesElement,
    mountTo: popupsMountPoint,
    scrollableElement: popupsScrollableElement,
    section: {
      hasSeparator: true
    },
    onItemActivated: onMenuItemActivated,
    fitWidth: DROPDOWN_WIDTH
  }, /*#__PURE__*/React.createElement(_uiMenu.ToolbarButton, {
    onClick: onClick,
    "aria-haspopup": "dialog",
    "aria-keyshortcuts": (0, _keymaps.getAriaKeyshortcuts)(_keymaps.addLink),
    "aria-label": content,
    title: content
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides -- Ignored via go/DSP-18766
    ,
    className: (0, _runtime.ax)(["_ca0q12x7 _n3td12x7 _19bv12x7 _u5f312x7"])
  }, /*#__PURE__*/React.createElement(_showMoreHorizontal.default, {
    label: content
  })));
}