/* PrimaryToolbarComponent.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./PrimaryToolbarComponent.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useIntl } from 'react-intl-next';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { addLink, getAriaKeyshortcuts } from '@atlaskit/editor-common/keymaps';
import messages from '@atlaskit/editor-common/messages';
import { ArrowKeyNavigationType, DropdownMenu, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import ShowMoreHorizontalIcon from '@atlaskit/icon/core/show-more-horizontal';
import { fg } from '@atlaskit/platform-feature-flags';
import { getOverflowPrimaryToolbarConfig } from './overflow-toolbar-config';
const DROPDOWN_WIDTH = 240;
const buttonStyles = null;
export function PrimaryToolbarComponent({
  api,
  popupsBoundariesElement,
  popupsMountPoint,
  popupsScrollableElement
}) {
  const intl = useIntl();
  const [isOpen, setIsOpen] = useState(false);
  const items = useMemo(() => getOverflowPrimaryToolbarConfig({
    api,
    intl
  }), [api, intl]);
  const content = intl.formatMessage(messages.viewMore);
  const onClick = useCallback(() => {
    setIsOpen(!isOpen);
  }, [isOpen]);
  const onMenuItemActivated = useCallback(({
    item
  }) => {
    var _item$onClick;
    item === null || item === void 0 ? void 0 : (_item$onClick = item.onClick) === null || _item$onClick === void 0 ? void 0 : _item$onClick.call(item);
  }, []);
  useEffect(() => {
    if (fg('platform_editor_controls_patch_4')) {
      var _api$analytics;
      api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions.fireAnalyticsEvent({
        action: ACTION.RENDERED,
        actionSubject: ACTION_SUBJECT.TOOLBAR,
        actionSubjectId: ACTION_SUBJECT_ID.DOCKED_PRIMARY_TOOLBAR,
        eventType: EVENT_TYPE.UI
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/React.createElement(DropdownMenu, {
    isOpen: isOpen,
    onOpenChange: attrs => setIsOpen(attrs.isOpen),
    items: items,
    arrowKeyNavigationProviderOptions: {
      type: ArrowKeyNavigationType.MENU
    },
    boundariesElement: popupsBoundariesElement,
    mountTo: popupsMountPoint,
    scrollableElement: popupsScrollableElement,
    section: {
      hasSeparator: true
    },
    onItemActivated: onMenuItemActivated,
    fitWidth: DROPDOWN_WIDTH
  }, /*#__PURE__*/React.createElement(ToolbarButton, {
    onClick: onClick,
    "aria-haspopup": "dialog",
    "aria-keyshortcuts": getAriaKeyshortcuts(addLink),
    "aria-label": content,
    title: content
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides -- Ignored via go/DSP-18766
    ,
    className: ax(["_ca0q12x7 _n3td12x7 _19bv12x7 _u5f312x7"])
  }, /*#__PURE__*/React.createElement(ShowMoreHorizontalIcon, {
    label: content
  })));
}