/* overflow-toolbar-config.tsx generated by @compiled/babel-plugin v0.36.1 */
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { selectionToolbarMessages } from '@atlaskit/editor-common/messages';
import DockToolbarTopIcon from '@atlaskit/icon-lab/core/dock-toolbar-top';
import MinusIcon from '@atlaskit/icon/core/minus';
import CheckMarkIcon from '@atlaskit/icon/utility/check-mark';
import { HeadingItem } from '@atlaskit/menu';
// New editor controls
export const getOverflowFloatingToolbarConfig = ({
  api,
  toolbarDocking,
  intl
}) => {
  const isDockedToTop = toolbarDocking === 'top';
  const dropdownOptions = [{
    type: 'overflow-dropdown-heading',
    title: intl.formatMessage(selectionToolbarMessages.toolbarAppears)
  }, {
    title: intl.formatMessage(selectionToolbarMessages.toolbarPositionInline),
    onClick: () => {
      var _api$selectionToolbar, _api$selectionToolbar2, _api$selectionToolbar3;
      return (_api$selectionToolbar = api === null || api === void 0 ? void 0 : (_api$selectionToolbar2 = api.selectionToolbar.actions) === null || _api$selectionToolbar2 === void 0 ? void 0 : (_api$selectionToolbar3 = _api$selectionToolbar2.setToolbarDocking) === null || _api$selectionToolbar3 === void 0 ? void 0 : _api$selectionToolbar3.call(_api$selectionToolbar2, 'none')) !== null && _api$selectionToolbar !== void 0 ? _api$selectionToolbar : false;
    },
    icon: MinusIcon({
      label: ''
    }),
    selected: !isDockedToTop,
    elemAfter: !isDockedToTop ? /*#__PURE__*/React.createElement(CheckMarkIcon, {
      label: ""
    }) : undefined
  }, {
    title: intl.formatMessage(selectionToolbarMessages.toolbarPositionFixedAtTop),
    onClick: () => {
      var _api$selectionToolbar4, _api$selectionToolbar5, _api$selectionToolbar6;
      return (_api$selectionToolbar4 = api === null || api === void 0 ? void 0 : (_api$selectionToolbar5 = api.selectionToolbar.actions) === null || _api$selectionToolbar5 === void 0 ? void 0 : (_api$selectionToolbar6 = _api$selectionToolbar5.setToolbarDocking) === null || _api$selectionToolbar6 === void 0 ? void 0 : _api$selectionToolbar6.call(_api$selectionToolbar5, 'top')) !== null && _api$selectionToolbar4 !== void 0 ? _api$selectionToolbar4 : false;
    },
    icon: DockToolbarTopIcon({
      label: ''
    }),
    selected: isDockedToTop,
    elemAfter: isDockedToTop ? /*#__PURE__*/React.createElement(CheckMarkIcon, {
      label: ""
    }) : undefined
  }];
  return [{
    type: 'separator',
    fullHeight: true
  }, {
    type: 'overflow-dropdown',
    dropdownWidth: 240,
    options: dropdownOptions
  }];
};
export const getOverflowPrimaryToolbarConfig = ({
  api,
  intl
}) => [{
  items: [{
    content: /*#__PURE__*/React.createElement(HeadingItem, null, intl.formatMessage(selectionToolbarMessages.toolbarAppears)),
    value: {
      name: ''
    },
    isDisabled: true
  }, {
    content: intl.formatMessage(selectionToolbarMessages.toolbarPositionInline),
    value: {
      name: 'contextual'
    },
    onClick: () => {
      var _api$selectionToolbar7, _api$selectionToolbar8, _api$selectionToolbar9;
      return (_api$selectionToolbar7 = api === null || api === void 0 ? void 0 : (_api$selectionToolbar8 = api.selectionToolbar.actions) === null || _api$selectionToolbar8 === void 0 ? void 0 : (_api$selectionToolbar9 = _api$selectionToolbar8.setToolbarDocking) === null || _api$selectionToolbar9 === void 0 ? void 0 : _api$selectionToolbar9.call(_api$selectionToolbar8, 'none')) !== null && _api$selectionToolbar7 !== void 0 ? _api$selectionToolbar7 : false;
    },
    elemBefore: MinusIcon({
      label: ''
    })
  }, {
    content: intl.formatMessage(selectionToolbarMessages.toolbarPositionFixedAtTop),
    value: {
      name: 'fixed'
    },
    onClick: () => {
      var _api$selectionToolbar10, _api$selectionToolbar11, _api$selectionToolbar12;
      return (_api$selectionToolbar10 = api === null || api === void 0 ? void 0 : (_api$selectionToolbar11 = api.selectionToolbar.actions) === null || _api$selectionToolbar11 === void 0 ? void 0 : (_api$selectionToolbar12 = _api$selectionToolbar11.setToolbarDocking) === null || _api$selectionToolbar12 === void 0 ? void 0 : _api$selectionToolbar12.call(_api$selectionToolbar11, 'top')) !== null && _api$selectionToolbar10 !== void 0 ? _api$selectionToolbar10 : false;
    },
    isActive: true,
    elemBefore: DockToolbarTopIcon({
      label: ''
    }),
    elemAfter: /*#__PURE__*/React.createElement(CheckMarkIcon, {
      label: ""
    })
  }]
}];