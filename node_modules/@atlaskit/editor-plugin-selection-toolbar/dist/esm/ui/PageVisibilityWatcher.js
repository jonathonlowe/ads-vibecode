import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useEffect } from 'react';
import { bind } from 'bind-event-listener';
import { logException } from '@atlaskit/editor-common/monitoring';
export var PageVisibilityWatcher = function PageVisibilityWatcher(_ref) {
  var api = _ref.api,
    userPreferencesProvider = _ref.userPreferencesProvider;
  useEffect(function () {
    if (!userPreferencesProvider || !api) {
      return;
    }
    return bind(document, {
      type: 'visibilitychange',
      listener: function () {
        var _listener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _api$selectionToolbar, _api$selectionToolbar2;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(document.visibilityState === 'visible')) {
                  _context.next = 10;
                  break;
                }
                _context.prev = 1;
                _context.next = 4;
                return userPreferencesProvider.loadPreferences();
              case 4:
                _context.next = 9;
                break;
              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](1);
                logException(_context.t0, {
                  location: 'editor-plugin-selection-toolbar/PageVisibilityWatcher'
                });
              case 9:
                api === null || api === void 0 || (_api$selectionToolbar = api.selectionToolbar) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.actions) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar2 = _api$selectionToolbar.refreshToolbarDocking) === null || _api$selectionToolbar2 === void 0 || _api$selectionToolbar2.call(_api$selectionToolbar);
              case 10:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[1, 6]]);
        }));
        function listener() {
          return _listener.apply(this, arguments);
        }
        return listener;
      }()
    });
  }, [api, userPreferencesProvider]);
  return null;
};