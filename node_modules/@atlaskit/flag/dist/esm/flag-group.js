/* flag-group.tsx generated by @compiled/babel-plugin v0.36.1 */
import _typeof from "@babel/runtime/helpers/typeof";
import "./flag-group.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Children, createContext, useContext, useMemo } from 'react';
import noop from '@atlaskit/ds-lib/noop';
import { ExitingPersistence, SlideIn } from '@atlaskit/motion';
import Portal from '@atlaskit/portal';
// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports
import { layers } from '@atlaskit/theme/constants';
import VisuallyHidden from '@atlaskit/visually-hidden';
export var flagWidth = 400;
var defaultFlagGroupContext = {
  onDismissed: noop,
  isDismissAllowed: false
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export var FlagGroupContext = /*#__PURE__*/createContext(defaultFlagGroupContext);

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export function useFlagGroup() {
  return useContext(FlagGroupContext);
}

// transition: none is set on first-of-type to prevent a bug in Firefox
// that causes a broken transition
var groupStyles = {
  root: "_v5641b8g _1bsb1kdj _kqswstnw _u7coidpf _1eqkauwl",
  first: "_v564glyw _t9ec1ygq _1pbyqfx8",
  second: "_1pbyegat",
  nth: "_5sag5cps _t9ec1hw2",
  hidden: "_3um015vq"
};

// Transform needed to push up while 1st flag is leaving
// Exiting time should match the exiting time of motion so is halved
var dismissAllowedStyles = null;
var flagGroupContainerStyles = null;

/**
 * __Flag group__
 *
 * A flag group is used to group a set of related flags, with entry and exit animations.
 *
 * - [Examples](https://atlassian.design/components/flag/flag-group/examples)
 * - [Code](https://atlassian.design/components/flag/flag-group/code)
 */
var FlagGroup = function FlagGroup(props) {
  var id = props.id,
    _props$label = props.label,
    label = _props$label === void 0 ? 'Flag notifications' : _props$label,
    _props$labelTag = props.labelTag,
    LabelTag = _props$labelTag === void 0 ? 'h2' : _props$labelTag,
    _props$shouldRenderTo = props.shouldRenderToParent,
    shouldRenderToParent = _props$shouldRenderTo === void 0 ? false : _props$shouldRenderTo,
    children = props.children,
    _props$onDismissed = props.onDismissed,
    onDismissed = _props$onDismissed === void 0 ? noop : _props$onDismissed;
  var hasFlags = Array.isArray(children) ? children.length > 0 : Boolean(children);
  var dismissFlagContext = useMemo(function () {
    return {
      onDismissed: onDismissed,
      isDismissAllowed: true
    };
  }, [onDismissed]);
  var renderChildren = function renderChildren() {
    return children && _typeof(children) === 'object' ? Children.map(children, function (flag, index) {
      var isDismissAllowed = index === 0;
      return /*#__PURE__*/React.createElement(SlideIn, {
        enterFrom: "left",
        fade: "inout",
        duration: "medium",
        animationTimingFunction: "ease-in"
      }, function (_ref) {
        var className = _ref.className,
          ref = _ref.ref;
        return /*#__PURE__*/React.createElement("div", {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          className: ax([groupStyles.root, index === 0 && groupStyles.first, index === 1 && groupStyles.second, index >= 1 && groupStyles.nth, index >= 2 && groupStyles.hidden, isDismissAllowed && "_12a7luct", className]),
          ref: ref
        }, /*#__PURE__*/React.createElement(FlagGroupContext.Provider, {
          value:
          // Only the first flag should be able to be dismissed.
          isDismissAllowed ? dismissFlagContext : defaultFlagGroupContext
        }, flag));
      });
    }) : false;
  };
  var flags = /*#__PURE__*/React.createElement("div", {
    id: id,
    className: ax(["_kqsw1n9t _1pbyxejw _u7cooahv _1e021epz _1iafidpf _il0widpf"])
  }, hasFlags ? /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(LabelTag, null, label)) : null, /*#__PURE__*/React.createElement(ExitingPersistence, {
    appear: false
  }, renderChildren()));
  return shouldRenderToParent ? flags : /*#__PURE__*/React.createElement(Portal, {
    zIndex: layers.flag()
  }, flags);
};
export default FlagGroup;