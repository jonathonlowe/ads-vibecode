import React from 'react';
import { type MessageDescriptor } from 'react-intl-next';
export type ConversationStarter = {
    message: string;
    type: ConversationStarterType;
};
type ConversationStarterType = 'static' | 'user-defined' | 'llm-generated';
type GetConversationStartersParams = {
    userDefinedConversationStarters?: ConversationStarter[] | null | undefined;
    isAgentDefault: boolean;
};
export type StaticAgentConversationStarter = {
    message: MessageDescriptor;
    type: ConversationStarterType;
};
type ConversationStarters = {
    userDefinedConversationStarters: ConversationStarter[];
    customAgentConversationStarters: StaticAgentConversationStarter[];
    defaultAgentConversationStarters: StaticAgentConversationStarter[];
    combinedConversationStarters: Array<ConversationStarter | StaticAgentConversationStarter>;
};
export declare const getConversationStarters: ({ userDefinedConversationStarters: userDefinedConversationStartersParam, isAgentDefault, }: GetConversationStartersParams) => ConversationStarters;
export type AgentConversationStartersProps = {
    userDefinedConversationStarters?: GetConversationStartersParams['userDefinedConversationStarters'];
    isAgentDefault: GetConversationStartersParams['isAgentDefault'];
} & Omit<ConversationStartersProps, 'starters'>;
export declare const AgentConversationStarters: ({ userDefinedConversationStarters, isAgentDefault, ...props }: AgentConversationStartersProps) => React.JSX.Element;
export type ConversationStartersProps = {
    starters: ConversationStarter[];
    onConversationStarterClick: (conversationStarter: ConversationStarter) => void;
    showReloadButton?: boolean;
    onReloadButtonClick?: () => void;
    onBrowseAgentsClick?: () => void;
};
export declare const ConversationStarters: ({ starters, onConversationStarterClick, showReloadButton, onReloadButtonClick, onBrowseAgentsClick, }: ConversationStartersProps) => React.JSX.Element;
export {};
