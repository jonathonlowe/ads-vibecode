"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConversationStarters = exports.ConversationStarters = exports.AgentConversationStarters = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _new = require("@atlaskit/button/new");
var _retry = _interopRequireDefault(require("@atlaskit/icon/core/retry"));
var _primitives = require("@atlaskit/primitives");
var _chatPill = require("../../common/ui/chat-pill");
var _messages = require("./messages");
var _excluded = ["userDefinedConversationStarters", "isAgentDefault"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var getConversationStarters = exports.getConversationStarters = function getConversationStarters(_ref) {
  var userDefinedConversationStartersParam = _ref.userDefinedConversationStarters,
    isAgentDefault = _ref.isAgentDefault;
  var type = 'static';
  var customAgentConversationStarters = [{
    message: _messages.messages.agentEmptyStateSuggestion1,
    type: type
  }, {
    message: _messages.messages.agentEmptyStateSuggestion2,
    type: type
  }, {
    message: _messages.messages.agentEmptyStateSuggestion3,
    type: type
  }];
  var userDefinedConversationStarters = userDefinedConversationStartersParam !== null && userDefinedConversationStartersParam !== void 0 ? userDefinedConversationStartersParam : [];
  var defaultAgentConversationStarters = [{
    message: _messages.messages.emptyStateSuggestion1,
    type: type
  }, {
    message: _messages.messages.emptyStateSuggestion2,
    type: type
  }, {
    message: _messages.messages.emptyStateSuggestion3,
    type: type
  }];
  var getCombinedConversationStarters = function getCombinedConversationStarters() {
    var shouldCombine = !isAgentDefault;
    if (shouldCombine) {
      // Return user defined suggestions + static fallback suggestions with a max of 3 suggestions (user defined taking precendence over fallback)
      return [].concat((0, _toConsumableArray2.default)(userDefinedConversationStarters), customAgentConversationStarters).slice(0, 3);
    }
    return defaultAgentConversationStarters;
  };
  return {
    userDefinedConversationStarters: userDefinedConversationStarters,
    customAgentConversationStarters: customAgentConversationStarters,
    defaultAgentConversationStarters: defaultAgentConversationStarters,
    combinedConversationStarters: getCombinedConversationStarters()
  };
};
var AgentConversationStarters = exports.AgentConversationStarters = function AgentConversationStarters(_ref2) {
  var userDefinedConversationStarters = _ref2.userDefinedConversationStarters,
    isAgentDefault = _ref2.isAgentDefault,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useMemo = (0, _react.useMemo)(function () {
      return getConversationStarters({
        userDefinedConversationStarters: userDefinedConversationStarters,
        isAgentDefault: isAgentDefault
      });
    }, [userDefinedConversationStarters, isAgentDefault]),
    combinedConversationStarters = _useMemo.combinedConversationStarters;
  var starters = (0, _react.useMemo)(function () {
    return combinedConversationStarters.map(function (starter) {
      return typeof starter.message === 'string' ? {
        message: starter.message,
        type: starter.type
      } : {
        message: formatMessage(starter.message),
        type: starter.type
      };
    });
  }, [combinedConversationStarters, formatMessage]);
  return /*#__PURE__*/_react.default.createElement(ConversationStarters, (0, _extends2.default)({
    starters: starters
  }, props));
};
var ConversationStarters = exports.ConversationStarters = function ConversationStarters(_ref3) {
  var starters = _ref3.starters,
    onConversationStarterClick = _ref3.onConversationStarterClick,
    _ref3$showReloadButto = _ref3.showReloadButton,
    showReloadButton = _ref3$showReloadButto === void 0 ? false : _ref3$showReloadButto,
    _ref3$onReloadButtonC = _ref3.onReloadButtonClick,
    onReloadButtonClick = _ref3$onReloadButtonC === void 0 ? function () {} : _ref3$onReloadButtonC,
    onBrowseAgentsClick = _ref3.onBrowseAgentsClick;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, starters.map(function (starter, index) {
    var isLastStarter = index === starters.length - 1;
    var chatPill = /*#__PURE__*/_react.default.createElement(_chatPill.ChatPill, {
      testId: "conversation-starter",
      key: starter.message,
      onClick: function onClick() {
        return onConversationStarterClick(starter);
      }
    }, starter.message);
    return isLastStarter && showReloadButton ? /*#__PURE__*/_react.default.createElement(_primitives.Inline, {
      space: "space.050",
      grow: "fill",
      alignInline: "end",
      key: starter.message
    }, chatPill, /*#__PURE__*/_react.default.createElement(_new.IconButton, {
      icon: _retry.default,
      onClick: onReloadButtonClick,
      appearance: "subtle",
      label: ""
    })) : chatPill;
  }), !!onBrowseAgentsClick && /*#__PURE__*/_react.default.createElement(_chatPill.BrowseAgentsPill, {
    onClick: onBrowseAgentsClick
  }));
};