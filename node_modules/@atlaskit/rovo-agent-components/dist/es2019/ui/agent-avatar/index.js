/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useIntl } from 'react-intl-next';
import { AVATAR_SIZES } from '@atlaskit/avatar';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { GeneratedAvatar } from './generated-avatars';
import { messages } from './messages';
const styles = {
  agentAvatar: "_1e0c1txw _1bah1h6o _4cvr1h6o _mkrz1k6g",
  agentAvatarPreventSquish: "_1e0c1txw _1bah1h6o _4cvr1h6o _mkrz1k6g _1ul9zwfg _1tkezwfg",
  image: "_5ral1dfr _4t3i1osq _1bsb1osq",
  avatarContentContainer: "_1bsb1osq _4t3i1osq _1e0c1txw _1bah1h6o _4cvr1h6o"
};
const stylesCompiled = {
  innerShape: "_4t3i1lk2 _1bsb1lk2 _mkrz1k6g"
};
/**
 * Agent avatar components that handles rendering correct avatar for different variations of agent types
 *
 * @param agentNamedId - This is agent.external_config_reference, this value exists for OOTB (out of the box) agents. This id is the first priority to generate avatar because each OOTB agents have its own fixed avatar
 * @param agentIdentityAccountId - This is Atlassian identity account ID for the agent(aaid). This id is prioritised to generate random avatar for non OOTB agents
 * @param agentId - This is agent.id
 */
export const AgentAvatar = ({
  imageUrl,
  size = 'medium',
  label,
  name,
  agentId,
  agentIdentityAccountId,
  agentNamedId,
  showBorder = true,
  isForgeAgent,
  forgeAgentIconUrl
}) => {
  const {
    formatMessage
  } = useIntl();
  const imgUrl = isForgeAgent && forgeAgentIconUrl ? forgeAgentIconUrl : imageUrl;
  return /*#__PURE__*/React.createElement(Box, {
    "aria-label": label,
    xcss: fg('rovo_chat_bugfix_agent_avatar_squish') ? styles.agentAvatarPreventSquish : styles.agentAvatar,
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values
      height: AVATAR_SIZES[size],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values
      width: AVATAR_SIZES[size],
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/design-system/ensure-design-token-usage
      ...(showBorder ? {
        backgroundColor: '#fff'
      } : {})
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: ax([stylesCompiled.innerShape])
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: styles.avatarContentContainer
  }, imgUrl ? /*#__PURE__*/React.createElement(Box, {
    as: "img",
    xcss: styles.image,
    src: imgUrl,
    alt: name || label || formatMessage(messages.agentAvatarLabel)
  }) : /*#__PURE__*/React.createElement(GeneratedAvatar, {
    agentId: agentId,
    agentNamedId: agentNamedId,
    agentIdentityAccountId: agentIdentityAccountId,
    size: size
  }))));
};