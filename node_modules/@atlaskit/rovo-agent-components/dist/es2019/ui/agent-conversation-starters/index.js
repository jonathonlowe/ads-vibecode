import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo } from 'react';
import { useIntl } from 'react-intl-next';
import { IconButton } from '@atlaskit/button/new';
import RetryIcon from '@atlaskit/icon/core/retry';
import { Inline } from '@atlaskit/primitives';
import { BrowseAgentsPill, ChatPill } from '../../common/ui/chat-pill';
import { messages } from './messages';
export const getConversationStarters = ({
  userDefinedConversationStarters: userDefinedConversationStartersParam,
  isAgentDefault
}) => {
  const type = 'static';
  const customAgentConversationStarters = [{
    message: messages.agentEmptyStateSuggestion1,
    type
  }, {
    message: messages.agentEmptyStateSuggestion2,
    type
  }, {
    message: messages.agentEmptyStateSuggestion3,
    type
  }];
  const userDefinedConversationStarters = userDefinedConversationStartersParam !== null && userDefinedConversationStartersParam !== void 0 ? userDefinedConversationStartersParam : [];
  const defaultAgentConversationStarters = [{
    message: messages.emptyStateSuggestion1,
    type
  }, {
    message: messages.emptyStateSuggestion2,
    type
  }, {
    message: messages.emptyStateSuggestion3,
    type
  }];
  const getCombinedConversationStarters = () => {
    const shouldCombine = !isAgentDefault;
    if (shouldCombine) {
      // Return user defined suggestions + static fallback suggestions with a max of 3 suggestions (user defined taking precendence over fallback)
      return [...userDefinedConversationStarters, ...customAgentConversationStarters].slice(0, 3);
    }
    return defaultAgentConversationStarters;
  };
  return {
    userDefinedConversationStarters,
    customAgentConversationStarters,
    defaultAgentConversationStarters,
    combinedConversationStarters: getCombinedConversationStarters()
  };
};
export const AgentConversationStarters = ({
  userDefinedConversationStarters,
  isAgentDefault,
  ...props
}) => {
  const {
    formatMessage
  } = useIntl();
  const {
    combinedConversationStarters
  } = useMemo(() => getConversationStarters({
    userDefinedConversationStarters,
    isAgentDefault
  }), [userDefinedConversationStarters, isAgentDefault]);
  const starters = useMemo(() => combinedConversationStarters.map(starter => typeof starter.message === 'string' ? {
    message: starter.message,
    type: starter.type
  } : {
    message: formatMessage(starter.message),
    type: starter.type
  }), [combinedConversationStarters, formatMessage]);
  return /*#__PURE__*/React.createElement(ConversationStarters, _extends({
    starters: starters
  }, props));
};
export const ConversationStarters = ({
  starters,
  onConversationStarterClick,
  showReloadButton = false,
  onReloadButtonClick = () => {},
  onBrowseAgentsClick
}) => {
  return /*#__PURE__*/React.createElement(React.Fragment, null, starters.map((starter, index) => {
    const isLastStarter = index === starters.length - 1;
    const chatPill = /*#__PURE__*/React.createElement(ChatPill, {
      testId: "conversation-starter",
      key: starter.message,
      onClick: () => onConversationStarterClick(starter)
    }, starter.message);
    return isLastStarter && showReloadButton ? /*#__PURE__*/React.createElement(Inline, {
      space: "space.050",
      grow: "fill",
      alignInline: "end",
      key: starter.message
    }, chatPill, /*#__PURE__*/React.createElement(IconButton, {
      icon: RetryIcon,
      onClick: onReloadButtonClick,
      appearance: "subtle",
      label: ""
    })) : chatPill;
  }), !!onBrowseAgentsClick && /*#__PURE__*/React.createElement(BrowseAgentsPill, {
    onClick: onBrowseAgentsClick
  }));
};