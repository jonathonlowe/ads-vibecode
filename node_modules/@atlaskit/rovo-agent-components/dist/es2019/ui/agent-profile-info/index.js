/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { useIntl } from 'react-intl-next';
import Heading from '@atlaskit/heading';
import { AtlassianIcon, RovoIcon } from '@atlaskit/logo';
import { Box, Inline, Stack } from '@atlaskit/primitives/compiled';
import Skeleton from '@atlaskit/skeleton';
import Tooltip from '@atlaskit/tooltip';
import { HiddenIcon } from '../../common/ui/hidden-icon';
import { StarIconButton } from '../../common/ui/star-icon-button';
import { messages } from './messages';
const styles = {
  clickableItem: "_zulp1b66 _1e0c1txw _4cvr1h6o",
  name: "_1bah1yb4 _4cvr1y6m",
  description: "_19pkze3t _otyru2gc",
  wrapper: "_otyru2gc",
  tooltipWrapper: "_195gu2gc _1e0c116y _kqswh2mm _94n5v77o",
  headingWrapper: "_kqswh2mm"
};
export const AgentProfileCreator = ({
  creator,
  onCreatorLinkClick,
  isLoading: isLoading
}) => {
  const {
    formatMessage
  } = useIntl();
  const getCreatorRender = () => {
    if (isLoading) {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement(Skeleton, {
          testId: "agent-profile-creator-skeleton",
          isShimmering: true,
          height: 18,
          width: 100,
          borderRadius: 3
        })
      });
    }
    if (!creator) {
      return null;
    }
    if (creator.type === 'SYSTEM' || creator.type === 'OOTB') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement(Inline, {
          alignBlock: "center",
          testId: "atlassian-icon"
        }, /*#__PURE__*/React.createElement(AtlassianIcon, {
          size: "small",
          appearance: "brand"
        }), /*#__PURE__*/React.createElement(Box, null, "Atlassian"))
      });
    }
    if (creator.type === 'CUSTOMER') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: /*#__PURE__*/React.createElement("a", {
          "aria-label": creator.name || formatMessage(messages.creatorLabel),
          href: creator.profileLink,
          onClick: () => onCreatorLinkClick(),
          target: "_blank"
        }, creator.name, ' ', creator.status === 'inactive' && formatMessage(messages.agentDeactivated))
      });
    }
    if (creator.type === 'THIRD_PARTY') {
      return formatMessage(messages.agentCreatedBy, {
        creatorNameWithLink: creator.name
      });
    }
    return null;
  };
  const creatorRender = getCreatorRender();
  return creatorRender ? /*#__PURE__*/React.createElement(Box, {
    xcss: styles.clickableItem
  }, /*#__PURE__*/React.createElement(RovoIcon, {
    appearance: "brand",
    size: "small"
  }), creatorRender) : null;
};
export const AgentProfileInfo = ({
  agentName,
  agentDescription,
  creatorRender,
  starCountRender,
  isStarred,
  isHidden,
  onStarToggle
}) => {
  const {
    formatMessage
  } = useIntl();
  return /*#__PURE__*/React.createElement(Stack, {
    space: "space.100",
    xcss: styles.wrapper
  }, /*#__PURE__*/React.createElement(Inline, {
    xcss: styles.name,
    space: "space.100",
    alignBlock: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: styles.headingWrapper
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "span",
    size: "xlarge"
  }, agentName), isHidden && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.tooltipWrapper
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: formatMessage(messages.hiddenTooltip),
    position: "top"
  }, /*#__PURE__*/React.createElement(HiddenIcon, {
    label: formatMessage(messages.hiddenIcon)
  })))), /*#__PURE__*/React.createElement(StarIconButton, {
    isStarred: isStarred,
    handleToggle: onStarToggle
  })), creatorRender, !!agentDescription && /*#__PURE__*/React.createElement(Box, {
    xcss: styles.description,
    as: "p"
  }, agentDescription), starCountRender);
};