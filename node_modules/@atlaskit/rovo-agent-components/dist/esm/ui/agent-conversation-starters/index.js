import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["userDefinedConversationStarters", "isAgentDefault"];
import React, { useMemo } from 'react';
import { useIntl } from 'react-intl-next';
import { IconButton } from '@atlaskit/button/new';
import RetryIcon from '@atlaskit/icon/core/retry';
import { Inline } from '@atlaskit/primitives';
import { BrowseAgentsPill, ChatPill } from '../../common/ui/chat-pill';
import { messages } from './messages';
export var getConversationStarters = function getConversationStarters(_ref) {
  var userDefinedConversationStartersParam = _ref.userDefinedConversationStarters,
    isAgentDefault = _ref.isAgentDefault;
  var type = 'static';
  var customAgentConversationStarters = [{
    message: messages.agentEmptyStateSuggestion1,
    type: type
  }, {
    message: messages.agentEmptyStateSuggestion2,
    type: type
  }, {
    message: messages.agentEmptyStateSuggestion3,
    type: type
  }];
  var userDefinedConversationStarters = userDefinedConversationStartersParam !== null && userDefinedConversationStartersParam !== void 0 ? userDefinedConversationStartersParam : [];
  var defaultAgentConversationStarters = [{
    message: messages.emptyStateSuggestion1,
    type: type
  }, {
    message: messages.emptyStateSuggestion2,
    type: type
  }, {
    message: messages.emptyStateSuggestion3,
    type: type
  }];
  var getCombinedConversationStarters = function getCombinedConversationStarters() {
    var shouldCombine = !isAgentDefault;
    if (shouldCombine) {
      // Return user defined suggestions + static fallback suggestions with a max of 3 suggestions (user defined taking precendence over fallback)
      return [].concat(_toConsumableArray(userDefinedConversationStarters), customAgentConversationStarters).slice(0, 3);
    }
    return defaultAgentConversationStarters;
  };
  return {
    userDefinedConversationStarters: userDefinedConversationStarters,
    customAgentConversationStarters: customAgentConversationStarters,
    defaultAgentConversationStarters: defaultAgentConversationStarters,
    combinedConversationStarters: getCombinedConversationStarters()
  };
};
export var AgentConversationStarters = function AgentConversationStarters(_ref2) {
  var userDefinedConversationStarters = _ref2.userDefinedConversationStarters,
    isAgentDefault = _ref2.isAgentDefault,
    props = _objectWithoutProperties(_ref2, _excluded);
  var _useIntl = useIntl(),
    formatMessage = _useIntl.formatMessage;
  var _useMemo = useMemo(function () {
      return getConversationStarters({
        userDefinedConversationStarters: userDefinedConversationStarters,
        isAgentDefault: isAgentDefault
      });
    }, [userDefinedConversationStarters, isAgentDefault]),
    combinedConversationStarters = _useMemo.combinedConversationStarters;
  var starters = useMemo(function () {
    return combinedConversationStarters.map(function (starter) {
      return typeof starter.message === 'string' ? {
        message: starter.message,
        type: starter.type
      } : {
        message: formatMessage(starter.message),
        type: starter.type
      };
    });
  }, [combinedConversationStarters, formatMessage]);
  return /*#__PURE__*/React.createElement(ConversationStarters, _extends({
    starters: starters
  }, props));
};
export var ConversationStarters = function ConversationStarters(_ref3) {
  var starters = _ref3.starters,
    onConversationStarterClick = _ref3.onConversationStarterClick,
    _ref3$showReloadButto = _ref3.showReloadButton,
    showReloadButton = _ref3$showReloadButto === void 0 ? false : _ref3$showReloadButto,
    _ref3$onReloadButtonC = _ref3.onReloadButtonClick,
    onReloadButtonClick = _ref3$onReloadButtonC === void 0 ? function () {} : _ref3$onReloadButtonC,
    onBrowseAgentsClick = _ref3.onBrowseAgentsClick;
  return /*#__PURE__*/React.createElement(React.Fragment, null, starters.map(function (starter, index) {
    var isLastStarter = index === starters.length - 1;
    var chatPill = /*#__PURE__*/React.createElement(ChatPill, {
      testId: "conversation-starter",
      key: starter.message,
      onClick: function onClick() {
        return onConversationStarterClick(starter);
      }
    }, starter.message);
    return isLastStarter && showReloadButton ? /*#__PURE__*/React.createElement(Inline, {
      space: "space.050",
      grow: "fill",
      alignInline: "end",
      key: starter.message
    }, chatPill, /*#__PURE__*/React.createElement(IconButton, {
      icon: RetryIcon,
      onClick: onReloadButtonClick,
      appearance: "subtle",
      label: ""
    })) : chatPill;
  }), !!onBrowseAgentsClick && /*#__PURE__*/React.createElement(BrowseAgentsPill, {
    onClick: onBrowseAgentsClick
  }));
};