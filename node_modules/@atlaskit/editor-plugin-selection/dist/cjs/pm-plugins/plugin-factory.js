"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPluginState = exports.createPluginState = exports.createCommand = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@atlaskit/editor-common/utils");
var _state = require("@atlaskit/editor-prosemirror/state");
var _view = require("@atlaskit/editor-prosemirror/view");
var _cellSelection = require("@atlaskit/editor-tables/cell-selection");
var _types = require("../types");
var _reducer = require("./reducer");
var _utils2 = require("./utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var handleDocChanged = function handleDocChanged(tr, pluginState) {
  // in some collab edge cases mapping decorations could throw an error
  try {
    if (pluginState.decorationSet.find().length === 0 && (!tr.selectionSet || (0, _utils2.getDecorations)(tr).find().length === 0)) {
      return pluginState;
    }
    var decorationSet = pluginState.decorationSet.map(tr.mapping, tr.doc);
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      decorationSet: decorationSet
    });
  } catch (error) {
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      decorationSet: _view.DecorationSet.empty
    });
  }
};
var handleSelectionChanged = function handleSelectionChanged(tr, pluginState) {
  // Reset relative selection pos when user clicks to select a node
  if ((tr.selection instanceof _state.NodeSelection && (0, _utils2.isSelectableContainerNode)(tr.selection.node) || tr.selection instanceof _cellSelection.CellSelection) && !tr.getMeta(_types.selectionPluginKey)) {
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      selectionRelativeToNode: undefined
    });
  }
  return pluginState;
};
var _pluginFactory = (0, _utils.pluginFactory)(_types.selectionPluginKey, _reducer.reducer, {
    onDocChanged: handleDocChanged,
    onSelectionChanged: handleSelectionChanged
  }),
  createCommand = exports.createCommand = _pluginFactory.createCommand,
  getPluginState = exports.getPluginState = _pluginFactory.getPluginState,
  createPluginState = exports.createPluginState = _pluginFactory.createPluginState;