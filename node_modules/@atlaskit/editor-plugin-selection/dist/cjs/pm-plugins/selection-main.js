"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInitialState = exports.createPlugin = void 0;
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _types = require("../types");
var _actions = require("./actions");
var _createSelectionBetween = require("./events/create-selection-between");
var _keydown = require("./events/keydown");
var _mouseout = require("./events/mouseout");
var _pluginFactory = require("./plugin-factory");
var _utils = require("./utils");
var getInitialState = exports.getInitialState = function getInitialState(state) {
  return {
    decorationSet: (0, _utils.getDecorations)(state.tr),
    selection: state.selection
  };
};
var createPlugin = exports.createPlugin = function createPlugin(dispatch, dispatchAnalyticsEvent) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return new _safePlugin.SafePlugin({
    key: _types.selectionPluginKey,
    state: (0, _pluginFactory.createPluginState)(dispatch, getInitialState),
    appendTransaction: function appendTransaction(transactions, oldEditorState, newEditorState) {
      var tr = newEditorState.tr;
      var manualSelection;
      if ((0, _experiments.editorExperiment)('platform_editor_element_drag_and_drop_multiselect', true)) {
        // Start at most recent transaction, look for manualSelection meta
        for (var i = transactions.length - 1; i >= 0; i--) {
          var _transactions$i$getMe;
          manualSelection = (_transactions$i$getMe = transactions[i].getMeta(_types.selectionPluginKey)) === null || _transactions$i$getMe === void 0 ? void 0 : _transactions$i$getMe.manualSelection;
          if (manualSelection) {
            break;
          }
        }
      }
      if (!(0, _utils.shouldRecalcDecorations)({
        oldEditorState: oldEditorState,
        newEditorState: newEditorState
      }) && !manualSelection) {
        return;
      }
      tr.setMeta(_types.selectionPluginKey, {
        type: _actions.SelectionActionTypes.SET_DECORATIONS,
        selection: tr.selection,
        decorationSet: (0, _utils.getDecorations)(tr, manualSelection)
      });
      return tr;
    },
    filterTransaction: function filterTransaction(tr, state) {
      // Prevent single click selecting atom nodes on mobile (we want to select with long press gesture instead)
      if (options.useLongPressSelection && tr.selectionSet && tr.selection instanceof _state.NodeSelection && !tr.getMeta(_types.selectionPluginKey)) {
        return false;
      }

      // Prevent prosemirror's mutation observer overriding a node selection with a text selection
      // for exact same range - this was cause of being unable to change dates in collab:
      // https://product-fabric.atlassian.net/browse/ED-10645
      if (state.selection instanceof _state.NodeSelection && tr.selection instanceof _state.TextSelection && state.selection.from === tr.selection.from && state.selection.to === tr.selection.to) {
        return false;
      }
      return true;
    },
    props: {
      createSelectionBetween: _createSelectionBetween.onCreateSelectionBetween,
      decorations: function decorations(state) {
        return (0, _pluginFactory.getPluginState)(state).decorationSet;
      },
      handleDOMEvents: {
        keydown: (0, _keydown.createOnKeydown)({
          __livePage: options.__livePage
        }),
        // Without this event, it is not possible to click and drag to select the first node in the
        // document if the node is a block with content (e.g. a panel with a paragraph inside).
        mouseout: _mouseout.onMouseOut
      }
    }
  });
};