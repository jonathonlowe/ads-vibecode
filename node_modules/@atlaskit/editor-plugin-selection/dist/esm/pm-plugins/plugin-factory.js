import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { NodeSelection } from '@atlaskit/editor-prosemirror/state';
import { DecorationSet } from '@atlaskit/editor-prosemirror/view';
import { CellSelection } from '@atlaskit/editor-tables/cell-selection';
import { selectionPluginKey } from '../types';
import { reducer } from './reducer';
import { getDecorations, isSelectableContainerNode } from './utils';
var handleDocChanged = function handleDocChanged(tr, pluginState) {
  // in some collab edge cases mapping decorations could throw an error
  try {
    if (pluginState.decorationSet.find().length === 0 && (!tr.selectionSet || getDecorations(tr).find().length === 0)) {
      return pluginState;
    }
    var decorationSet = pluginState.decorationSet.map(tr.mapping, tr.doc);
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      decorationSet: decorationSet
    });
  } catch (error) {
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      decorationSet: DecorationSet.empty
    });
  }
};
var handleSelectionChanged = function handleSelectionChanged(tr, pluginState) {
  // Reset relative selection pos when user clicks to select a node
  if ((tr.selection instanceof NodeSelection && isSelectableContainerNode(tr.selection.node) || tr.selection instanceof CellSelection) && !tr.getMeta(selectionPluginKey)) {
    return _objectSpread(_objectSpread({}, pluginState), {}, {
      selectionRelativeToNode: undefined
    });
  }
  return pluginState;
};
var _pluginFactory = pluginFactory(selectionPluginKey, reducer, {
    onDocChanged: handleDocChanged,
    onSelectionChanged: handleSelectionChanged
  }),
  createCommand = _pluginFactory.createCommand,
  getPluginState = _pluginFactory.getPluginState,
  createPluginState = _pluginFactory.createPluginState;
export { createCommand, getPluginState, createPluginState };