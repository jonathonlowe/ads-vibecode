import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { NodeSelection, TextSelection } from '@atlaskit/editor-prosemirror/state';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { selectionPluginKey } from '../types';
import { SelectionActionTypes } from './actions';
import { onCreateSelectionBetween } from './events/create-selection-between';
import { createOnKeydown } from './events/keydown';
import { onMouseOut } from './events/mouseout';
import { createPluginState, getPluginState } from './plugin-factory';
import { getDecorations, shouldRecalcDecorations } from './utils';
export var getInitialState = function getInitialState(state) {
  return {
    decorationSet: getDecorations(state.tr),
    selection: state.selection
  };
};
export var createPlugin = function createPlugin(dispatch, dispatchAnalyticsEvent) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return new SafePlugin({
    key: selectionPluginKey,
    state: createPluginState(dispatch, getInitialState),
    appendTransaction: function appendTransaction(transactions, oldEditorState, newEditorState) {
      var tr = newEditorState.tr;
      var manualSelection;
      if (editorExperiment('platform_editor_element_drag_and_drop_multiselect', true)) {
        // Start at most recent transaction, look for manualSelection meta
        for (var i = transactions.length - 1; i >= 0; i--) {
          var _transactions$i$getMe;
          manualSelection = (_transactions$i$getMe = transactions[i].getMeta(selectionPluginKey)) === null || _transactions$i$getMe === void 0 ? void 0 : _transactions$i$getMe.manualSelection;
          if (manualSelection) {
            break;
          }
        }
      }
      if (!shouldRecalcDecorations({
        oldEditorState: oldEditorState,
        newEditorState: newEditorState
      }) && !manualSelection) {
        return;
      }
      tr.setMeta(selectionPluginKey, {
        type: SelectionActionTypes.SET_DECORATIONS,
        selection: tr.selection,
        decorationSet: getDecorations(tr, manualSelection)
      });
      return tr;
    },
    filterTransaction: function filterTransaction(tr, state) {
      // Prevent single click selecting atom nodes on mobile (we want to select with long press gesture instead)
      if (options.useLongPressSelection && tr.selectionSet && tr.selection instanceof NodeSelection && !tr.getMeta(selectionPluginKey)) {
        return false;
      }

      // Prevent prosemirror's mutation observer overriding a node selection with a text selection
      // for exact same range - this was cause of being unable to change dates in collab:
      // https://product-fabric.atlassian.net/browse/ED-10645
      if (state.selection instanceof NodeSelection && tr.selection instanceof TextSelection && state.selection.from === tr.selection.from && state.selection.to === tr.selection.to) {
        return false;
      }
      return true;
    },
    props: {
      createSelectionBetween: onCreateSelectionBetween,
      decorations: function decorations(state) {
        return getPluginState(state).decorationSet;
      },
      handleDOMEvents: {
        keydown: createOnKeydown({
          __livePage: options.__livePage
        }),
        // Without this event, it is not possible to click and drag to select the first node in the
        // document if the node is a block with content (e.g. a panel with a paragraph inside).
        mouseout: onMouseOut
      }
    }
  });
};