"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectedExtension = exports.getSelectedDomElement = exports.getNodeTypesReferenced = exports.getDataConsumerMark = exports.findNodePosWithLocalId = exports.findExtensionWithLocalId = void 0;
var _utils = require("@atlaskit/editor-common/utils");
var _utils2 = require("@atlaskit/editor-prosemirror/utils");
var getSelectedExtension = exports.getSelectedExtension = function getSelectedExtension(state) {
  var searchParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var _state$schema$nodes = state.schema.nodes,
    inlineExtension = _state$schema$nodes.inlineExtension,
    extension = _state$schema$nodes.extension,
    bodiedExtension = _state$schema$nodes.bodiedExtension,
    multiBodiedExtension = _state$schema$nodes.multiBodiedExtension;
  var nodeTypes = [extension, bodiedExtension, inlineExtension, multiBodiedExtension];
  return (0, _utils2.findSelectedNodeOfType)(nodeTypes)(state.selection) || searchParent && (0, _utils2.findParentNodeOfType)(nodeTypes)(state.selection) || undefined;
};
var findExtensionWithLocalId = exports.findExtensionWithLocalId = function findExtensionWithLocalId(state, localId) {
  var selectedExtension = getSelectedExtension(state, true);
  if (!localId) {
    return selectedExtension;
  }
  if (selectedExtension && selectedExtension.node.attrs.localId === localId) {
    return selectedExtension;
  }
  var _state$schema$nodes2 = state.schema.nodes,
    inlineExtension = _state$schema$nodes2.inlineExtension,
    extension = _state$schema$nodes2.extension,
    bodiedExtension = _state$schema$nodes2.bodiedExtension,
    multiBodiedExtension = _state$schema$nodes2.multiBodiedExtension;
  var nodeTypes = [extension, bodiedExtension, inlineExtension, multiBodiedExtension];
  var matched;
  state.doc.descendants(function (node, pos) {
    if (nodeTypes.includes(node.type) && node.attrs.localId === localId) {
      matched = {
        node: node,
        pos: pos
      };
    }
  });
  return matched;
};
var getSelectedDomElement = exports.getSelectedDomElement = function getSelectedDomElement(schema, domAtPos, selectedExtensionNode) {
  // Ignored via go/ees005
  // eslint-disable-next-line @atlaskit/editor/no-as-casting
  var selectedExtensionDomNode = (0, _utils2.findDomRefAtPos)(selectedExtensionNode.pos, domAtPos);
  var isContentExtension = selectedExtensionNode.node.type !== schema.nodes.bodiedExtension;
  return (
    // Content extension can be nested in bodied-extension, the following check is necessary for that case
    (isContentExtension // Search down
    ? selectedExtensionDomNode.querySelector('.extension-container') // Try searching up and then down
    : (0, _utils.closestElement)(selectedExtensionDomNode, '.extension-container') || selectedExtensionDomNode.querySelector('.extension-container')) || selectedExtensionDomNode
  );
};
var getDataConsumerMark = exports.getDataConsumerMark = function getDataConsumerMark(newNode) {
  var _newNode$marks;
  return (_newNode$marks = newNode.marks) === null || _newNode$marks === void 0 ? void 0 : _newNode$marks.find(function (mark) {
    return mark.type.name === 'dataConsumer';
  });
};
var getNodeTypesReferenced = exports.getNodeTypesReferenced = function getNodeTypesReferenced(ids, state) {
  return (0, _utils.findNodePosByLocalIds)(state, ids, {
    includeDocNode: true
  }).map(function (_ref) {
    var node = _ref.node;
    return node.type.name;
  });
};
var findNodePosWithLocalId = exports.findNodePosWithLocalId = function findNodePosWithLocalId(state, localId) {
  var nodes = (0, _utils.findNodePosByLocalIds)(state, [localId]);
  return nodes.length >= 1 ? nodes[0] : undefined;
};