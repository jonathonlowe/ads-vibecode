"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _actions = require("./actions");
var _pluginKey = require("./plugin-key");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var createPlugin = exports.createPlugin = function createPlugin(dispatch, providerFactory) {
  return new _safePlugin.SafePlugin({
    state: {
      init: function init() {
        return {
          macroProvider: null
        };
      },
      apply: function apply(tr, state) {
        var meta = tr.getMeta(_pluginKey.pluginKey);
        if (meta) {
          var newState = _objectSpread(_objectSpread({}, state), meta);
          dispatch(_pluginKey.pluginKey, newState);
          return newState;
        }
        return state;
      }
    },
    key: _pluginKey.pluginKey,
    view: function view(_view) {
      var handleProvider = function handleProvider(_name, provider) {
        return provider && (0, _actions.setMacroProvider)(provider)(_view);
      };
      // make sure editable DOM node is mounted
      if (_view.dom.parentNode) {
        providerFactory.subscribe('macroProvider', handleProvider);
      }
      return {
        destroy: function destroy() {
          providerFactory.unsubscribe('macroProvider', handleProvider);
        }
      };
    }
  });
};