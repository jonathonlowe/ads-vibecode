"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _extensions = require("@atlaskit/editor-common/extensions");
var _sectionMessage = _interopRequireDefault(require("@atlaskit/section-message"));
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var spinnerWrapperStyles = (0, _react.css)({
  display: 'flex',
  justifyContent: 'center',
  marginTop: "var(--ds-space-800, 64px)"
});
var errorWrapperStyles = (0, _react.css)({
  marginTop: "var(--ds-space-400, 32px)" // Add some padding to the top to make sure we place this below the offline status banner
});
var LoadingStateWithErrorHandling = (0, _reactIntlNext.injectIntl)(function (props) {
  if (props.error) {
    return (0, _react.jsx)("div", {
      css: errorWrapperStyles,
      "data-testid": "ConfigPanelLoadingError"
    }, (0, _react.jsx)(_sectionMessage.default, {
      appearance: "error"
    }, props.intl.formatMessage(_extensions.messages.panelLoadingError)));
  }
  return (0, _react.jsx)("div", {
    css: spinnerWrapperStyles,
    "data-testid": "ConfigPanelLoading"
  }, (0, _react.jsx)(_spinner.default, {
    size: "small",
    interactionName: "config-panel-spinner"
  }));
});
var LoadingStateWithoutErrorHandling = function LoadingStateWithoutErrorHandling() {
  return (0, _react.jsx)("div", {
    css: spinnerWrapperStyles,
    "data-testid": "ConfigPanelLoading"
  }, (0, _react.jsx)(_spinner.default, {
    size: "small",
    interactionName: "config-panel-spinner"
  }));
};
var LoadingState = function LoadingState(props) {
  return (0, _experiments.editorExperiment)('platform_editor_offline_editing_web', true) ? LoadingStateWithErrorHandling(props) : LoadingStateWithoutErrorHandling();
};
var _default = exports.default = LoadingState;