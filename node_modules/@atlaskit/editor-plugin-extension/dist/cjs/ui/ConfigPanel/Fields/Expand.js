"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _new = require("@atlaskit/button/new");
var _extensions = require("@atlaskit/editor-common/extensions");
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-down"));
var _chevronRight = _interopRequireDefault(require("@atlaskit/icon/utility/chevron-right"));
var _colors = require("@atlaskit/theme/colors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var expandContainerStyles = (0, _react2.css)({
  borderBottom: "1px solid ".concat("var(--ds-border, ".concat(_colors.N40, ")"))
});
var expandControlStyles = (0, _react2.css)({
  display: 'flex',
  height: "var(--ds-space-600, 48px)",
  justifyContent: 'center',
  paddingRight: "var(--ds-space-100, 8px)"
});
var chevronContainerStyles = (0, _react2.css)({
  display: 'flex',
  alignItems: 'center',
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '& > button': {
    width: "var(--ds-space-300, 24px)",
    height: "var(--ds-space-300, 24px)"
  }
});
var labelContainerStyles = (0, _react2.css)({
  width: '100%',
  alignItems: 'center',
  display: 'flex',
  fontWeight: "var(--ds-font-weight-medium, 500)"
});
var expandContentContainerHiddenStyles = (0, _react2.css)({
  display: 'none',
  marginTop: "var(--ds-space-negative-100, -8px)"
});
var expandContentContainerVisibleStyles = (0, _react2.css)({
  display: 'block',
  marginTop: "var(--ds-space-negative-100, -8px)"
});
function Expand(_ref) {
  var field = _ref.field,
    children = _ref.children,
    _ref$isExpanded = _ref.isExpanded,
    isExpanded = _ref$isExpanded === void 0 ? false : _ref$isExpanded,
    intl = _ref.intl;
  var _useState = (0, _react.useState)(isExpanded),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    expanded = _useState2[0],
    setExpanded = _useState2[1];
  return (0, _react2.jsx)("div", {
    "data-testid": "expand-config-field",
    css: expandContainerStyles
  }, (0, _react2.jsx)("div", {
    css: expandControlStyles
  }, (0, _react2.jsx)("div", {
    css: labelContainerStyles
  }, field.label), (0, _react2.jsx)("div", {
    css: chevronContainerStyles
  }, (0, _react2.jsx)(_new.IconButton, {
    onClick: function onClick() {
      setExpanded(!expanded);
    },
    label: intl.formatMessage(expanded ? _extensions.configPanelMessages.collapse : _extensions.configPanelMessages.expand),
    testId: "form-expand-toggle",
    icon: expanded ? _chevronDown.default : _chevronRight.default
  }))), (0, _react2.jsx)("div", {
    "data-testid": "expand-content-container",
    css: expanded ? expandContentContainerVisibleStyles : expandContentContainerHiddenStyles
  }, children));
}
var _default = exports.default = (0, _reactIntlNext.injectIntl)(Expand);