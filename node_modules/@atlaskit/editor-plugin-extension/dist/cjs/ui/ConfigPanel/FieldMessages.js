"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _extensions = require("@atlaskit/editor-common/extensions");
var _form = require("@atlaskit/form");
var _compiled = require("@atlaskit/primitives/compiled");
var _types = require("./types");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// sidestep XSS issues
function makeMarkup(fragment, key) {
  var nodeName = fragment.nodeName,
    nodeType = fragment.nodeType,
    childNodes = fragment.childNodes,
    textContent = fragment.textContent;
  if (nodeType === Node.TEXT_NODE) {
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: key
    }, textContent);
  }

  // NOTE: NodeList doesn't have .map
  var children = [];
  childNodes.forEach(function (childNode, i) {
    var markup = makeMarkup(childNode, String(i));
    if (markup) {
      children.push(markup);
    }
  });
  switch (nodeName) {
    case 'B':
      return /*#__PURE__*/_react.default.createElement("b", {
        key: key
      }, children);
    case 'I':
      return /*#__PURE__*/_react.default.createElement("i", {
        key: key
      }, children);
    case 'STRONG':
      return /*#__PURE__*/_react.default.createElement(_compiled.Text, {
        as: "strong",
        color: "color.text.subtlest",
        size: "UNSAFE_small",
        key: key
      }, children);
    case 'EM':
      return /*#__PURE__*/_react.default.createElement(_compiled.Text, {
        as: "em",
        color: "color.text.subtlest",
        size: "UNSAFE_small",
        key: key
      }, children);
    case 'CODE':
      return /*#__PURE__*/_react.default.createElement("code", {
        key: key
      }, children);
  }
  if (children.length === 1) {
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: key
    }, children[0]);
  }
  if (children.length) {
    return /*#__PURE__*/_react.default.createElement("span", {
      key: key
    }, children);
  }
  return null;
}
function Description(_ref) {
  var description = _ref.description;
  var markup = (0, _react.useMemo)(function () {
    var dom = new DOMParser().parseFromString(description, 'text/html');
    return makeMarkup(dom);
  }, [description]);
  return /*#__PURE__*/_react.default.createElement(_form.HelperMessage, {
    testId: "field-message-description"
  }, markup);
}
var FieldMessages = function FieldMessages(_ref2) {
  var error = _ref2.error,
    description = _ref2.description,
    intl = _ref2.intl;
  if (!error && description) {
    return /*#__PURE__*/_react.default.createElement(Description, {
      description: description
    });
  }
  switch (error) {
    case _types.ValidationError.Required:
      return /*#__PURE__*/_react.default.createElement(_form.ErrorMessage, {
        testId: "config-panel-error-message"
      }, intl.formatMessage(_extensions.configPanelMessages.required));
    case _types.ValidationError.Invalid:
      return /*#__PURE__*/_react.default.createElement(_form.ErrorMessage, {
        testId: "config-panel-error-message"
      }, intl.formatMessage(_extensions.configPanelMessages.invalid));
    case _types.FieldTypeError.isMultipleAndRadio:
      return /*#__PURE__*/_react.default.createElement(_form.ErrorMessage, {
        testId: "config-panel-error-message"
      }, intl.formatMessage(_extensions.configPanelMessages.isMultipleAndRadio));
    default:
      return null;
  }
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(FieldMessages);