"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeSelectedNodeWithAnalytics = exports.removeExtension = exports.removeDescendantNodes = exports.forceAutoSave = exports.clearEditingContext = exports.checkAndRemoveExtensionNode = void 0;
exports.setEditingContextToContextPanel = setEditingContextToContextPanel;
exports.updateExtensionLayout = void 0;
exports.updateState = updateState;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _utils = require("@atlaskit/editor-common/utils");
var _state = require("@atlaskit/editor-prosemirror/state");
var _utils2 = require("@atlaskit/editor-prosemirror/utils");
var _pluginFactory = require("../pm-plugins/plugin-factory");
var _utils3 = require("../pm-plugins/utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// AFP-2532 TODO: Fix automatic suppressions below
// eslint-disable-next-line @atlassian/tangerine/import/entry-points

function updateState(state) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: state
  });
}
function setEditingContextToContextPanel(processParametersBefore, processParametersAfter, applyChangeToContextPanel) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: {
      showContextPanel: true,
      processParametersBefore: processParametersBefore,
      processParametersAfter: processParametersAfter
    }
  }, applyChangeToContextPanel);
}
var clearEditingContext = exports.clearEditingContext = function clearEditingContext(applyChangeToContextPanel) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: {
      showContextPanel: false,
      processParametersBefore: undefined,
      processParametersAfter: undefined
    }
  }, applyChangeToContextPanel);
};
var forceAutoSave = exports.forceAutoSave = function forceAutoSave(applyChangeToContextPanel) {
  return function (resolve, reject) {
    return (0, _pluginFactory.createCommand)({
      type: 'UPDATE_STATE',
      data: {
        autoSaveResolve: resolve,
        autoSaveReject: reject
      }
    }, applyChangeToContextPanel);
  };
};
var updateExtensionLayout = exports.updateExtensionLayout = function updateExtensionLayout(layout, analyticsApi) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: {
      layout: layout
    }
  }, function (tr, state) {
    var selectedExtension = (0, _utils3.getSelectedExtension)(state, true);
    if (selectedExtension) {
      var trWithNewNodeMarkup = tr.setNodeMarkup(selectedExtension.pos, undefined, _objectSpread(_objectSpread({}, selectedExtension.node.attrs), {}, {
        layout: layout
      }));
      trWithNewNodeMarkup.setMeta('scrollIntoView', false);
      if (analyticsApi) {
        analyticsApi.attachAnalyticsEvent({
          action: _analytics.ACTION.UPDATED,
          actionSubject: _analytics.ACTION_SUBJECT.EXTENSION,
          actionSubjectId: _analytics.ACTION_SUBJECT_ID.EXTENSION,
          eventType: _analytics.EVENT_TYPE.TRACK,
          attributes: {
            extensionType: selectedExtension.node.attrs.extensionType,
            extensionKey: selectedExtension.node.attrs.extensionKey,
            localId: selectedExtension.node.attrs.localId,
            layout: layout,
            selection: tr.selection.toJSON(),
            targetSelectionSource: _analytics.TARGET_SELECTION_SOURCE.CURRENT_SELECTION
          }
        })(tr);
      }
      return trWithNewNodeMarkup;
    }
    return tr;
  });
};
var removeExtension = exports.removeExtension = function removeExtension(editorAnalyticsAPI) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: {
      element: undefined
    }
  }, function (tr, state) {
    if ((0, _utils3.getSelectedExtension)(state)) {
      return removeSelectedNodeWithAnalytics(state, tr, editorAnalyticsAPI);
    } else {
      return checkAndRemoveExtensionNode(state, tr, editorAnalyticsAPI);
    }
  });
};
var removeDescendantNodes = exports.removeDescendantNodes = function removeDescendantNodes(sourceNode) {
  return (0, _pluginFactory.createCommand)({
    type: 'UPDATE_STATE',
    data: {
      element: undefined
    }
  }, function (tr, state) {
    return sourceNode ? (0, _utils.removeConnectedNodes)(state, sourceNode) : tr;
  });
};
var removeSelectedNodeWithAnalytics = exports.removeSelectedNodeWithAnalytics = function removeSelectedNodeWithAnalytics(state, tr, analyticsApi) {
  if (state.selection instanceof _state.NodeSelection) {
    var node = state.selection.node;
    if (analyticsApi) {
      analyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.DELETED,
        actionSubject: _analytics.ACTION_SUBJECT.EXTENSION,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.EXTENSION,
        eventType: _analytics.EVENT_TYPE.TRACK,
        attributes: {
          extensionType: node.attrs.extensionType,
          extensionKey: node.attrs.extensionKey,
          localId: node.attrs.localId
        }
      })(tr);
    }
  }
  return (0, _utils2.removeSelectedNode)(tr);
};
var checkAndRemoveExtensionNode = exports.checkAndRemoveExtensionNode = function checkAndRemoveExtensionNode(state, tr, analyticsApi) {
  var nodeType = state.schema.nodes.bodiedExtension;
  var maybeMBENode = (0, _utils2.findParentNodeOfType)(state.schema.nodes.multiBodiedExtension)(state.selection);
  if (maybeMBENode) {
    nodeType = state.schema.nodes.multiBodiedExtension;
    if (analyticsApi) {
      analyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.DELETED,
        actionSubject: _analytics.ACTION_SUBJECT.MULTI_BODIED_EXTENSION,
        eventType: _analytics.EVENT_TYPE.TRACK,
        attributes: {
          extensionType: maybeMBENode.node.attrs.extensionType,
          extensionKey: maybeMBENode.node.attrs.extensionKey,
          localId: maybeMBENode.node.attrs.localId,
          currentFramesCount: maybeMBENode.node.content.childCount
        }
      })(tr);
    }
  }
  var bodiedExtensionNode = (0, _utils2.findParentNodeOfType)(state.schema.nodes.bodiedExtension)(state.selection);
  if (bodiedExtensionNode) {
    if (analyticsApi) {
      analyticsApi.attachAnalyticsEvent({
        action: _analytics.ACTION.DELETED,
        actionSubject: _analytics.ACTION_SUBJECT.EXTENSION,
        actionSubjectId: _analytics.ACTION_SUBJECT_ID.EXTENSION_BODIED,
        eventType: _analytics.EVENT_TYPE.TRACK,
        attributes: {
          extensionType: bodiedExtensionNode.node.attrs.extensionType,
          extensionKey: bodiedExtensionNode.node.attrs.extensionKey,
          localId: bodiedExtensionNode.node.attrs.localId
        }
      })(tr);
    }
  }
  return (0, _utils2.removeParentNodeOfType)(nodeType)(tr);
};