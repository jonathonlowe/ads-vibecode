import type { FieldDefinition, Option, Parameters } from '@atlaskit/editor-common/extensions';
import type { GroupBase } from '@atlaskit/react-select';
import { ValidationError } from './types';
export declare const validate: <T>(field: Partial<FieldDefinition>, value: T) => ValidationError | undefined;
type ValidationProps = {
    isRequired?: boolean;
    isMultiple?: boolean;
};
export declare const validateRequired: <T>({ isRequired, isMultiple }: ValidationProps, value: T) => ValidationError | undefined;
export declare const getOptionFromValue: (options: Option[] | GroupBase<Option>[], value: string | string[] | undefined) => Option | Option[] | undefined;
export declare const getSafeParentedName: (name: string, parentName?: string) => string;
export declare const isDuplicateField: (key: string) => boolean;
export declare const getNameFromDuplicateField: (key: string) => string;
export declare const parseParamType: (paramValue: Parameters[string], paramField?: FieldDefinition) => any;
export declare const getLoggedParameters: (macroKey: string, currentParams: Parameters, macroFields?: FieldDefinition[]) => {};
export {};
