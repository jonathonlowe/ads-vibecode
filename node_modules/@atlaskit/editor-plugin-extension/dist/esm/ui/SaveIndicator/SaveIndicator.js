import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment, useCallback, useEffect, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { FormattedMessage } from 'react-intl-next';
import { messages } from '@atlaskit/editor-common/extensions';
import CheckCircleIcon from '@atlaskit/icon/core/migration/success--check-circle';
import { Box, Text, xcss } from '@atlaskit/primitives';
import { G300, N0 } from '@atlaskit/theme/colors';
var noop = function noop() {};
var saveIndicatorWrapperStyles = css({
  display: 'flex',
  justifyContent: 'center'
});
var saveIndicatorContentStyles = css({
  position: 'fixed',
  width: '256px',
  bottom: "var(--ds-space-250, 20px)",
  display: 'flex',
  flexDirection: 'row',
  alignItems: 'center',
  padding: "var(--ds-space-075, 6px)".concat(" ", "var(--ds-space-150, 12px)"),
  background: "var(--ds-surface-overlay, ".concat(N0, ")"),
  /* E300 */
  boxShadow: "var(--ds-shadow-overlay, ".concat("0px 8px 12px rgba(9, 30, 66, 0.15), 0px 0px 1px rgba(9, 30, 66, 0.31)", ")"),
  borderRadius: '16px'
});
var saveIndicatorTextStyles = xcss({
  paddingLeft: 'space.075'
});
export var SaveIndicator = function SaveIndicator(_ref) {
  var children = _ref.children,
    duration = _ref.duration,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? true : _ref$visible;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    saving = _useState2[0],
    setSaving = _useState2[1];
  var shown = useRef(false);
  var onSaveStarted = useCallback(function () {
    if (!shown.current) {
      setSaving(true);
      shown.current = true;
    }
  }, []);
  useEffect(function () {
    if (saving) {
      var handleId = setTimeout(function () {
        setSaving(false);
      }, duration);
      return function () {
        return clearTimeout(handleId);
      };
    }
  }, [saving, duration]);
  return jsx(Fragment, null, jsx("div", null, children({
    onSaveStarted: onSaveStarted,
    onSaveEnded: noop
  })), visible && saving && jsx("div", {
    css: saveIndicatorWrapperStyles
  }, jsx("div", {
    css: saveIndicatorContentStyles,
    "data-testid": "save-indicator-content"
  }, jsx(CheckCircleIcon, {
    label: "Saving",
    color: "var(--ds-icon-success, ".concat(G300, ")"),
    LEGACY_size: "small",
    spacing: "none"
  }), jsx(Box, {
    xcss: saveIndicatorTextStyles
  }, jsx(Text, null, jsx(FormattedMessage
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  , messages.saveIndicator))))));
};