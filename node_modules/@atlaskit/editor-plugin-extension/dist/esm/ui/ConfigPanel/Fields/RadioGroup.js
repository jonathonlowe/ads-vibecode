import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { Fragment } from 'react';
import { Field } from '@atlaskit/form';
import { RadioGroup } from '@atlaskit/radio';
import FieldMessages from '../FieldMessages';
import { FieldTypeError } from '../types';
import { validate as _validate } from '../utils';
export default function RadioField(_ref) {
  var name = _ref.name,
    field = _ref.field,
    onFieldChange = _ref.onFieldChange;
  if (field.isMultiple) {
    return /*#__PURE__*/React.createElement(FieldMessages, {
      error: FieldTypeError.isMultipleAndRadio
    });
  }
  return /*#__PURE__*/React.createElement(Field, {
    name: name,
    label: field.label,
    defaultValue: field.defaultValue,
    isRequired: field.isRequired,
    validate: function validate(value) {
      return _validate(field, value);
    },
    testId: "config-panel-radio-group-".concat(field.name),
    isDisabled: field.isDisabled
  }, function (_ref2) {
    var fieldProps = _ref2.fieldProps,
      error = _ref2.error;
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(RadioGroup
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, fieldProps, {
      options: (field.items || []).map(function (option) {
        return _objectSpread(_objectSpread({}, option), {}, {
          name: field.name
        });
      }),
      onChange: function onChange(value) {
        fieldProps.onChange(value);
        onFieldChange(field.name, true);
      }
    })), /*#__PURE__*/React.createElement(FieldMessages, {
      error: error
    }));
  });
}