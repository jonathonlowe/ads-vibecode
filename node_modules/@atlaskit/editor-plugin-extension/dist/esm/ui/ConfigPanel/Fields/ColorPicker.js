import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { chartsColorPaletteTooltipMessages, DEFAULT_BORDER_COLOR } from '@atlaskit/editor-common/ui-color';
import { ColorPickerButton } from '@atlaskit/editor-common/ui-menu';
import { Field } from '@atlaskit/form';
import { Text } from '@atlaskit/primitives/compiled';
import FieldMessages from '../FieldMessages';
import { validate as _validate } from '../utils';

/*
    NOTE: color used here are not yet in atlaskit code
    this is part of extended color pack from ADG, which is yet to be release
    at the time of writing this.

    Colour sequence source: https://product-fabric.atlassian.net/browse/ED-12650?focusedCommentId=204875
*/

export var colorPalette = [{
  label: 'Light Blue',
  value: "var(--ds-background-accent-blue-subtle, #7AB2FF)"
},
// 400
{
  label: 'Light Green',
  value: "var(--ds-background-accent-green-subtle, #6BE1B0)"
},
// 400
{
  label: 'Light Yellow',
  value: "var(--ds-background-accent-yellow-subtle, #FFDB57)"
},
// 400
{
  label: 'Light Red',
  value: "var(--ds-background-accent-red-subtle, #FF8F73)"
},
// 400
{
  label: 'Light Purple',
  value: "var(--ds-background-accent-purple-subtle, #B5A7FB)"
},
// 400

{
  label: 'Blue',
  value: "var(--ds-chart-blue-bold, #247FFF)"
},
// 600
{
  label: 'Green',
  value: "var(--ds-chart-green-bold, #23A971)"
},
// 600
{
  label: 'Yellow',
  value: "var(--ds-chart-yellow-bold, #FFBE33)"
},
// 600
{
  label: 'Red',
  value: "var(--ds-chart-red-bold, #FC552C)"
},
// 600
{
  label: 'Purple',
  value: "var(--ds-chart-purple-bold, #8B77EE)"
},
// 600

{
  label: 'Dark Blue',
  value: "var(--ds-chart-blue-bolder, #0055CC)"
},
// 800
{
  label: 'Dark Green',
  value: "var(--ds-chart-green-bolder, #177D52)"
},
// 800
{
  label: 'Dark Yellow',
  value: "var(--ds-chart-yellow-bolder, #FF9D00)"
},
// 800
{
  label: 'Dark Red',
  value: "var(--ds-chart-red-bolder, #D32D03)"
},
// 800
{
  label: 'Dark Purple',
  value: "var(--ds-chart-purple-bolder, #5A43D0)"
},
// 800

{
  label: 'Darker Blue',
  value: "var(--ds-chart-blue-boldest, #003884)"
},
// 1000
{
  label: 'Darker Green',
  value: "var(--ds-chart-green-boldest, #055C3F)"
},
// 1000
{
  label: 'Darker Yellow',
  value: "var(--ds-chart-yellow-boldest, #946104)"
},
// 1000
{
  label: 'Darker Red',
  value: "var(--ds-chart-red-boldest, #A32000)"
},
// 1000
{
  label: 'Darker Purple',
  value: "var(--ds-chart-purple-boldest, #44368B)"
} // 1000
].map(function (color) {
  return _objectSpread(_objectSpread({}, color), {}, {
    border: DEFAULT_BORDER_COLOR
  });
});

/**
 * Extended chart colors.
 * Decided here https://product-fabric.atlassian.net/wiki/spaces/EUXQ/pages/3477245015/Tokenising+table+charts+color
 */
export var extendedColorPalette = [{
  label: 'Darker Blue',
  value: "var(--ds-chart-blue-boldest, #003884)"
},
// 1000
{
  label: 'Darker Teal',
  value: "var(--ds-chart-teal-boldest, #206B74)"
},
// 1000
{
  label: 'Darker Green',
  value: "var(--ds-chart-green-boldest, #055C3F)"
},
// 1000
{
  label: 'Darker Yellow',
  value: "var(--ds-chart-yellow-boldest, #946104)"
},
// 1000
{
  label: 'Darker Orange',
  value: "var(--ds-chart-orange-boldest, #974F0C)"
},
// 1000
{
  label: 'Darker Red',
  value: "var(--ds-chart-red-boldest, #A32000)"
},
// 1000
{
  label: 'Darker Magenta',
  value: "var(--ds-chart-magenta-boldest, #943D73)"
},
// 1000
{
  label: 'Darker Purple',
  value: "var(--ds-chart-purple-boldest, #44368B)"
},
// 1000
{
  label: 'Darker Gray',
  value: "var(--ds-chart-gray-boldest, #44546F)"
},
// 1000

{
  label: 'Dark Blue',
  value: "var(--ds-chart-blue-bolder, #0055CC)"
},
// 800
{
  label: 'Dark Teal',
  value: "var(--ds-chart-teal-bolder, #1D7F8C)"
},
// 800
{
  label: 'Dark Green',
  value: "var(--ds-chart-green-bolder, #177D52)"
},
// 800
{
  label: 'Dark Yellow',
  value: "var(--ds-chart-yellow-bolder, #FF9D00)"
},
// 800
{
  label: 'Dark Orange',
  value: "var(--ds-chart-orange-bolder, #B65C02)"
},
// 800
{
  label: 'Dark Red',
  value: "var(--ds-chart-red-bolder, #D32D03)"
},
// 800
{
  label: 'Dark Magenta',
  value: "var(--ds-chart-magenta-bolder, #CD519D)"
},
// 800
{
  label: 'Dark Purple',
  value: "var(--ds-chart-purple-bolder, #5A43D0)"
},
// 800
{
  label: 'Dark Gray',
  value: "var(--ds-chart-gray-bolder, #758195)"
},
// 800

{
  label: 'Blue',
  value: "var(--ds-chart-blue-bold, #247FFF)"
},
// 600
{
  label: 'Teal',
  value: "var(--ds-chart-teal-bold, #1D9AAA)"
},
// 600
{
  label: 'Green',
  value: "var(--ds-chart-green-bold, #23A971)"
},
// 600
{
  label: 'Yellow',
  value: "var(--ds-chart-yellow-bold, #FFBE33)"
},
// 600
{
  label: 'Orange',
  value: "var(--ds-chart-orange-bold, #D97008)"
},
// 600
{
  label: 'Red',
  value: "var(--ds-chart-red-bold, #FC552C)"
},
// 600
{
  label: 'Magenta',
  value: "var(--ds-chart-magenta-bold, #DA62AC)"
},
// 600
{
  label: 'Purple',
  value: "var(--ds-chart-purple-bold, #8B77EE)"
},
// 600
{
  label: 'Gray',
  value: "var(--ds-chart-gray-bold, #8590A2)"
},
// 600

{
  label: 'Light Blue',
  value: "var(--ds-background-accent-blue-subtle, #7AB2FF)"
},
// 400
{
  label: 'Light Teal',
  value: "var(--ds-background-accent-teal-subtle, #60C6D2)"
},
// 400
{
  label: 'Light Green',
  value: "var(--ds-background-accent-green-subtle, #6BE1B0)"
},
// 400
{
  label: 'Light Yellow',
  value: "var(--ds-background-accent-yellow-subtle, #FFDB57)"
},
// 400
{
  label: 'Light Orange',
  value: "var(--ds-background-accent-orange-subtle, #FAA53D)"
},
// 400
{
  label: 'Light Red',
  value: "var(--ds-background-accent-red-subtle, #FF8F73)"
},
// 400
{
  label: 'Light Magenta',
  value: "var(--ds-background-accent-magenta-subtle, #E774BB)"
},
// 400
{
  label: 'Light Purple',
  value: "var(--ds-background-accent-purple-subtle, #B5A7FB)"
},
// 400
{
  label: 'Light Gray',
  value: "var(--ds-background-accent-gray-subtle, #8993A5)"
} // 400
].map(function (color) {
  return _objectSpread(_objectSpread({}, color), {}, {
    border: DEFAULT_BORDER_COLOR
  });
});
var colorPickerWrapperStyles = css({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  height: "var(--ds-space-400, 32px)",
  paddingRight: "var(--ds-space-100, 8px)"
});
var colorPickerLabelStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
});
export var EXPANDED_COLOR_PICKER_COLUMNS = 9;
export var ORIGINAL_COLOR_PICKER_COLUMNS = 5;
var ColorPicker = function ColorPicker(props) {
  var name = props.name,
    title = props.title,
    currentColor = props.currentColor,
    onChange = props.onChange,
    onFieldChange = props.onFieldChange;
  var onColorChange = function onColorChange(color) {
    var colorValue = color.value;
    onChange(colorValue);
    onFieldChange(name, currentColor !== colorValue);
  };
  return jsx(ColorPickerButton, {
    title: title,
    currentColor: currentColor,
    onChange: onColorChange,
    colorPalette: extendedColorPalette,
    paletteColorTooltipMessages: chartsColorPaletteTooltipMessages,
    cols: EXPANDED_COLOR_PICKER_COLUMNS,
    alignX: "right",
    placement: "ConfigPanel",
    size: {
      width: "var(--ds-space-300, 24px)",
      height: "var(--ds-space-300, 24px)"
    }
    /* ED-18288 We align the palette to the right edge which is 1.5rem spacing away to avoid
         excess overflow on left. Additional 1 is to mitigate 1px added by floating toolbar. */
    // Disabling design token check as this is a calculated value
    // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
    ,
    absoluteOffset: {
      right: Number(-1.5 * getCurrentRemSize() - 1)
    }
  });
};
var ColorPickerField = function ColorPickerField(_ref) {
  var name = _ref.name,
    field = _ref.field,
    onFieldChange = _ref.onFieldChange,
    featureFlags = _ref.featureFlags;
  var label = field.label,
    defaultValue = field.defaultValue,
    isRequired = field.isRequired,
    isDisabled = field.isDisabled;
  return jsx(Field, {
    name: name,
    isRequired: isRequired,
    defaultValue: defaultValue,
    testId: "config-panel-color-picker-".concat(name),
    validate: function validate(value) {
      return _validate(field, value || '');
    },
    isDisabled: isDisabled
  }, function (_ref2) {
    var fieldProps = _ref2.fieldProps,
      error = _ref2.error;
    return jsx(Fragment, null, jsx("div", {
      css: colorPickerWrapperStyles
    }, jsx("label", {
      css: colorPickerLabelStyles
    }, label, isRequired && jsx(Text, {
      color: "color.text.danger",
      "aria-hidden": "true"
    }, "*")), jsx(ColorPicker, {
      name: name,
      title: label,
      currentColor: fieldProps.value,
      onChange: fieldProps.onChange,
      onFieldChange: onFieldChange,
      featureFlags: featureFlags
    })), error && jsx(FieldMessages, {
      error: error,
      description: ""
    }));
  });
};
var getCurrentRemSize = function getCurrentRemSize() {
  var fallback = 16; // 16px is the default rem size for most browsers
  if (typeof document === 'undefined' || typeof getComputedStyle === 'undefined') {
    return fallback;
  }
  var value = parseFloat(getComputedStyle(document.documentElement).fontSize);
  return value || fallback;
};
export default ColorPickerField;