import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import Button from '@atlaskit/button/new';
import { configPanelMessages as messages } from '@atlaskit/editor-common/extensions';
import Heading from '@atlaskit/heading';
import AddCircleIcon from '@atlaskit/icon/core/migration/add--add-circle';
import { Box, Text, xcss } from '@atlaskit/primitives';
import SectionMessage from '@atlaskit/section-message';
import Select from '@atlaskit/select';
import { N40A } from '@atlaskit/theme/colors';
import { getNameFromDuplicateField, isDuplicateField } from '../utils';
var actionsWrapperStyles = css({
  borderTop: "1px solid ".concat("var(--ds-border, ".concat(N40A, ")")),
  marginTop: "var(--ds-space-200, 16px)",
  paddingTop: "var(--ds-space-200, 16px)"
});
var populateFromParameters = function populateFromParameters(parameters, fields) {
  if (Object.keys(parameters).length) {
    var keys = Object.keys(parameters);
    var existingFieldKeys = keys.filter(function (key) {
      return fields.find(function (field) {
        return field.name === getNameFromDuplicateField(key);
      });
    });
    if (existingFieldKeys.length > 0) {
      return existingFieldKeys;
    }
  }
};
var populateFromRequired = function populateFromRequired(fields) {
  return fields.filter(function (field) {
    return field.isRequired;
  }).map(function (field) {
    return field.name;
  });
};
var getInitialFields = function getInitialFields() {
  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var fields = arguments.length > 1 ? arguments[1] : undefined;
  var isDynamic = arguments.length > 2 ? arguments[2] : undefined;
  if (!isDynamic) {
    return new Set(fields.map(function (field) {
      return field.name;
    }));
  }
  var dynamicFields = [];
  var fromRequired = populateFromRequired(fields);
  if (fromRequired) {
    dynamicFields.push.apply(dynamicFields, _toConsumableArray(fromRequired));
  }
  var fromParameters = populateFromParameters(parameters, fields);
  if (fromParameters) {
    dynamicFields.push.apply(dynamicFields, _toConsumableArray(fromParameters));
  }
  if (dynamicFields.length === 0 && Array.isArray(fields) && fields.length > 0) {
    dynamicFields.push(fields[0].name);
  }
  return new Set(dynamicFields);
};
// eslint-disable-next-line @repo/internal/react/no-class-components
var FieldsetField = /*#__PURE__*/function (_React$Component) {
  function FieldsetField(props) {
    var _this;
    _classCallCheck(this, FieldsetField);
    _this = _callSuper(this, FieldsetField, [props]);
    _defineProperty(_this, "getSelectedFields", function (visibleFields) {
      var field = _this.props.field;
      return _toConsumableArray(visibleFields).map(function (fieldName) {
        var originalFieldDef = field.fields.find(function (field) {
          return field.name === getNameFromDuplicateField(fieldName);
        });
        var fieldDef = _objectSpread(_objectSpread({}, originalFieldDef), {}, {
          name: fieldName
        });
        // for duplicate fields we only want the first one to actually be required
        if (originalFieldDef.name !== fieldName && fieldDef.isRequired === true) {
          fieldDef.isRequired = false;
        }
        return fieldDef;
      });
    });
    _defineProperty(_this, "getSelectOptions", function (visibleFields) {
      var field = _this.props.field;
      return field.fields.filter(function (field) {
        return field.allowDuplicates || !visibleFields.has(field.name);
      }).map(function (field) {
        return {
          value: field.name,
          label: field.label
        };
      });
    });
    _defineProperty(_this, "setIsAdding", function (value) {
      _this.setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          isAdding: value
        });
      });
    });
    _defineProperty(_this, "setCurrentParameters", function (parameters) {
      _this.setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentParameters: parameters
        });
      },
      // callback required so autosave can be triggered on
      // the right moment if fields are being removed
      function () {
        return _this.props.onFieldChange(_this.props.field.name, true);
      });
    });
    _defineProperty(_this, "setVisibleFields", function (fields) {
      _this.setState(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          visibleFields: fields,
          selectedFields: _this.getSelectedFields(fields),
          selectOptions: _this.getSelectOptions(fields)
        });
      });
    });
    _defineProperty(_this, "onSelectItem", function (option) {
      var visibleFields = _this.state.visibleFields;
      var newItem = option.value;
      var duplicates = _toConsumableArray(visibleFields).filter(function (field) {
        return getNameFromDuplicateField(field) === newItem;
      });
      if (duplicates.length > 0) {
        newItem += ":".concat(duplicates.length);
      }
      _this.setVisibleFields(new Set([].concat(_toConsumableArray(visibleFields), [newItem])));
      _this.setIsAdding(false);
    });
    _defineProperty(_this, "onClickRemove", function (fieldName) {
      var _this$state = _this.state,
        visibleFields = _this$state.visibleFields,
        currentParameters = _this$state.currentParameters;
      visibleFields.delete(fieldName);
      _this.setVisibleFields(new Set(visibleFields));
      var newParameters = _objectSpread({}, currentParameters);
      delete newParameters[fieldName];
      // if any there are duplicate fields that come after the one removed, we want to reduce their
      // duplicate index eg. label:2 -> label:1
      if (isDuplicateField(fieldName)) {
        var _fieldName$split = fieldName.split(':'),
          _fieldName$split2 = _slicedToArray(_fieldName$split, 2),
          key = _fieldName$split2[0],
          idx = _fieldName$split2[1];
        var currentIdx = +idx;
        while (currentParameters["".concat(key, ":").concat(currentIdx + 1)]) {
          newParameters["".concat(key, ":").concat(currentIdx)] = currentParameters["".concat(key, ":").concat(currentIdx + 1)];
          currentIdx++;
        }
        delete newParameters["".concat(key, ":").concat(currentIdx)];
      }
      _this.setCurrentParameters(newParameters);
    });
    _defineProperty(_this, "renderActions", function () {
      var intl = _this.props.intl;
      var _this$state2 = _this.state,
        selectOptions = _this$state2.selectOptions,
        isAdding = _this$state2.isAdding;
      if (selectOptions.length === 0) {
        return null;
      }
      return jsx(React.Fragment, null, isAdding ? jsx(Select, {
        testId: "field-picker",
        defaultMenuIsOpen: true,
        autoFocus: true,
        placeholder: intl.formatMessage(messages.addField),
        options: selectOptions,
        onChange: function onChange(option) {
          if (option) {
            _this.onSelectItem(option);
          }
        }
      }) : jsx(Button, {
        testId: "add-more",
        appearance: "subtle",
        iconBefore: function iconBefore(iconProps) {
          return jsx(AddCircleIcon
          // Ignored via go/ees005
          // eslint-disable-next-line react/jsx-props-no-spreading
          , _extends({}, iconProps, {
            LEGACY_size: "small",
            spacing: "none",
            label: intl.formatMessage(messages.addField)
          }));
        },
        onClick: function onClick() {
          return _this.setIsAdding(true);
        }
      }, intl.formatMessage(messages.addField)));
    });
    var initialFields = getInitialFields(props.parameters, props.field.fields, props.field.options.isDynamic);
    _this.state = {
      isAdding: false,
      currentParameters: props.parameters || {},
      visibleFields: initialFields,
      selectedFields: _this.getSelectedFields(initialFields),
      selectOptions: _this.getSelectOptions(initialFields)
    };
    return _this;
  }
  _inherits(FieldsetField, _React$Component);
  return _createClass(FieldsetField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        name = _this$props.name,
        field = _this$props.field,
        extensionManifest = _this$props.extensionManifest,
        onFieldChange = _this$props.onFieldChange,
        firstVisibleFieldName = _this$props.firstVisibleFieldName,
        error = _this$props.error,
        FormComponent = _this$props.formComponent;
      var label = field.label,
        options = field.options;
      var _this$state3 = this.state,
        selectedFields = _this$state3.selectedFields,
        currentParameters = _this$state3.currentParameters,
        visibleFields = _this$state3.visibleFields;
      var children = this.renderActions();
      return jsx(Fragment, null, error && jsx(FieldsetError, {
        message: error
      }), jsx("div", null, (options === null || options === void 0 ? void 0 : options.showTitle) && jsx(Heading, {
        size: "xsmall"
      }, label), jsx(FormComponent, {
        fields: selectedFields,
        parentName: name,
        extensionManifest: extensionManifest,
        parameters: currentParameters,
        canRemoveFields: field.options.isDynamic && visibleFields.size > 1,
        onClickRemove: this.onClickRemove,
        onFieldChange: onFieldChange,
        firstVisibleFieldName: firstVisibleFieldName,
        isDisabled: field.isDisabled
      }), children && jsx("div", {
        css: actionsWrapperStyles,
        "data-testId": "fieldset-actions"
      }, children)));
    }
  }]);
}(React.Component);
function FieldsetError(_ref) {
  var message = _ref.message;
  return jsx(Box, {
    xcss: sectionMessageWrapperStyles
  }, jsx(SectionMessage, {
    appearance: "error"
  }, jsx(Text, {
    as: "p"
  }, message)));
}
var sectionMessageWrapperStyles = xcss({
  marginBottom: 'space.300'
});
export default injectIntl(FieldsetField);