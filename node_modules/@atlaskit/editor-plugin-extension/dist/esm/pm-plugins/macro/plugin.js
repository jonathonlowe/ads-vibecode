import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { setMacroProvider } from './actions';
import { pluginKey } from './plugin-key';
export var createPlugin = function createPlugin(dispatch, providerFactory) {
  return new SafePlugin({
    state: {
      init: function init() {
        return {
          macroProvider: null
        };
      },
      apply: function apply(tr, state) {
        var meta = tr.getMeta(pluginKey);
        if (meta) {
          var newState = _objectSpread(_objectSpread({}, state), meta);
          dispatch(pluginKey, newState);
          return newState;
        }
        return state;
      }
    },
    key: pluginKey,
    view: function view(_view) {
      var handleProvider = function handleProvider(_name, provider) {
        return provider && setMacroProvider(provider)(_view);
      };
      // make sure editable DOM node is mounted
      if (_view.dom.parentNode) {
        providerFactory.subscribe('macroProvider', handleProvider);
      }
      return {
        destroy: function destroy() {
          providerFactory.unsubscribe('macroProvider', handleProvider);
        }
      };
    }
  });
};