import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { pluginFactory } from '@atlaskit/editor-common/utils';
import { pluginKey } from './plugin-key';
import reducer from './reducer';
var factory = pluginFactory(pluginKey, reducer, {
  mapping: function mapping(tr, state) {
    var _ref = state,
      previousPositions = _ref.positions;
    if (!previousPositions) {
      return state;
    }
    var positions = _objectSpread({}, previousPositions);
    // eslint-disable-next-line guard-for-in
    for (var key in positions) {
      positions[key] = tr.mapping.map(positions[key]);
    }
    return _objectSpread(_objectSpread({}, state), {}, {
      positions: positions
    });
  }
});
export var createPluginState = factory.createPluginState;
export var createCommand = factory.createCommand;
export var getPluginState = factory.getPluginState;