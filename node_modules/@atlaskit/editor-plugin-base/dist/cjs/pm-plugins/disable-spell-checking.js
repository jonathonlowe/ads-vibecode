"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _browser = require("@atlaskit/editor-common/browser");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
function getCurrentBrowserAndVersion() {
  switch (true) {
    case _browser.browser.chrome === true:
      return {
        browser: 'chrome',
        version: _browser.browser.chrome_version
      };
    case _browser.browser.ie === true:
      return {
        browser: 'ie',
        version: _browser.browser.ie_version
      };
    case _browser.browser.gecko === true:
      return {
        browser: 'gecko',
        version: _browser.browser.gecko_version
      };
    case _browser.browser.safari === true:
      return {
        browser: 'safari',
        version: _browser.browser.safari_version
      };
  }
  return undefined;
}
var _default = exports.default = function _default(featureFlags) {
  return new _safePlugin.SafePlugin({
    key: new _state.PluginKey('disableSpellchecking'),
    props: {
      attributes: function attributes(editorState) {
        if (!featureFlags) {
          return {};
        }
        var browserConfigFeatureFlag = featureFlags.disableSpellcheckByBrowser;
        var userCurrentBrowserAndVersion = getCurrentBrowserAndVersion();
        if (!userCurrentBrowserAndVersion || !browserConfigFeatureFlag) {
          return {};
        }
        var browserVersionDisableRange =
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        browserConfigFeatureFlag[userCurrentBrowserAndVersion.browser];
        if (!browserVersionDisableRange || !_browser.browser[userCurrentBrowserAndVersion.browser]) {
          return {};
        }
        var shouldDisableSpellcheck = !!browserVersionDisableRange.maximum ? userCurrentBrowserAndVersion.version >= browserVersionDisableRange.minimum && userCurrentBrowserAndVersion.version <= browserVersionDisableRange.maximum : _browser.browser[userCurrentBrowserAndVersion.browser] && userCurrentBrowserAndVersion.version >= browserVersionDisableRange.minimum;
        if (shouldDisableSpellcheck) {
          return {
            spellcheck: 'false'
          };
        }
        return {};
      }
    }
  });
};