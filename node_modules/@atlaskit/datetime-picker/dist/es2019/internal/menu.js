/* menu.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./menu.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Fragment } from 'react';
import { isValid, parseISO } from 'date-fns';
import Calendar from '@atlaskit/calendar';
import { Layering } from '@atlaskit/layering';
import FixedLayer from '../internal/fixed-layer';

/**
 * @param isos A series of ISO dates.
 * @returns The last valid date within the array of ISO strings.
 */
function getValidDate(isos) {
  return isos.reduce((acc, iso) => {
    const date = parseISO(iso);
    return isValid(date) ? {
      day: date.getDate(),
      month: date.getMonth() + 1,
      year: date.getFullYear()
    } : acc;
  }, {});
}
const menuStyles = null;

/**
 * This is the menu used in the select of the date picker.
 */
export const Menu = ({
  selectProps,
  innerProps
}) => {
  const {
    calendarValue,
    calendarView,
    menuInnerWrapper: MenuInnerWrapper
  } = selectProps;
  const {
    day,
    month,
    year
  } = getValidDate([calendarValue, calendarView]);
  const onMenuMouseDown = event => {
    if (event.button !== 0) {
      return;
    }
    event.stopPropagation();
    event.preventDefault();
  };
  const Wrapper = typeof MenuInnerWrapper === 'function' ? MenuInnerWrapper : Fragment;
  return /*#__PURE__*/React.createElement(Layering, {
    isDisabled: false
  }, /*#__PURE__*/React.createElement(FixedLayer, {
    inputValue: selectProps.inputValue,
    containerRef: selectProps.calendarContainerRef,
    content: /*#__PURE__*/React.createElement("div", _extends({}, innerProps, {
      onMouseDown: onMenuMouseDown,
      className: ax(["_2rkoglpi _1reo15vq _18m915vq _1pbyowjs _bfhk1bhr _16qs1cd0"])
    }), /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(Calendar, {
      day: day,
      month: month,
      year: year,
      disabled: selectProps.calendarDisabled,
      disabledDateFilter: selectProps.calendarDisabledDateFilter,
      minDate: selectProps.calendarMinDate,
      maxDate: selectProps.calendarMaxDate,
      nextMonthLabel: selectProps.nextMonthLabel,
      onChange: selectProps.onCalendarChange,
      onSelect: selectProps.onCalendarSelect,
      previousMonthLabel: selectProps.previousMonthLabel,
      ref: selectProps.calendarRef,
      selected: [selectProps.calendarValue],
      shouldSetFocusOnCurrentDay: selectProps.shouldSetFocusOnCurrentDay,
      locale: selectProps.calendarLocale,
      testId: selectProps.testId && `${selectProps.testId}--calendar`,
      weekStartDay: selectProps.calendarWeekStartDay
    }))),
    testId: selectProps.testId
  }));
};