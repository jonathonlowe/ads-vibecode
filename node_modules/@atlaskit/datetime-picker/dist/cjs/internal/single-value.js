"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSingleValue = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _select = require("@atlaskit/select");
var _excluded = ["children", "className", "clearValue", "cx", "data", "getStyles", "getValue", "hasValue", "isDisabled", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue"];
/**
 * This creates a functional component that `react-select` will use to make the
 * SingleValue part of the different pickers.
 */
var makeSingleValue = exports.makeSingleValue = function makeSingleValue(_ref) {
  var lang = _ref.lang;
  return function (_ref2) {
    var children = _ref2.children,
      className = _ref2.className,
      clearValue = _ref2.clearValue,
      cx = _ref2.cx,
      data = _ref2.data,
      getStyles = _ref2.getStyles,
      getValue = _ref2.getValue,
      hasValue = _ref2.hasValue,
      isDisabled = _ref2.isDisabled,
      isMulti = _ref2.isMulti,
      isRtl = _ref2.isRtl,
      options = _ref2.options,
      selectOption = _ref2.selectOption,
      selectProps = _ref2.selectProps,
      setValue = _ref2.setValue,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    return /*#__PURE__*/_react.default.createElement(_select.components.SingleValue, (0, _extends2.default)({}, rest, {
      // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides, @atlaskit/ui-styling-standard/no-classname-prop
      className: className,
      clearValue: clearValue,
      cx: cx,
      data: data,
      getStyles: getStyles,
      getValue: getValue,
      hasValue: hasValue,
      innerProps: {
        lang: lang
      },
      isDisabled: isDisabled,
      isMulti: isMulti,
      isRtl: isRtl,
      options: options,
      selectOption: selectOption,
      selectProps: selectProps,
      setValue: setValue
    }), children);
  };
};