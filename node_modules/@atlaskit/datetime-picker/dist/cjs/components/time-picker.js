"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _dateFns = require("date-fns");
var _analyticsNext = require("@atlaskit/analytics-next");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _locale = require("@atlaskit/locale");
var _select = _interopRequireWildcard(require("@atlaskit/select"));
var _internal = require("../internal");
var _fixedLayerMenu = require("../internal/fixed-layer-menu");
var _parseTime = _interopRequireDefault(require("../internal/parse-time"));
var _parseTokens = require("../internal/parse-tokens");
var _singleValue = require("../internal/single-value");
var _excluded = ["styles"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var packageName = "@atlaskit/datetime-picker";
var packageVersion = "17.0.1";
var menuStyles = {
  /* Need to remove default absolute positioning as that causes issues with position fixed */
  position: 'static',
  /* Need to add overflow to the element with max-height, otherwise causes overflow issues in IE11 */
  overflowY: 'auto',
  /* React-Popper has already offset the menu so we need to reset the margin, otherwise the offset value is doubled */
  margin: 0
};
var analyticsAttributes = {
  componentName: 'timePicker',
  packageName: packageName,
  packageVersion: packageVersion
};

/**
 * __Time picker__
 *
 * A time picker allows the user to select a specific time.
 *
 * - [Examples](https://atlassian.design/components/datetime-picker/time-picker/examples)
 * - [Code](https://atlassian.design/components/datetime-picker/time-picker/code)
 * - [Usage](https://atlassian.design/components/datetime-picker/time-picker/usage)
 */
var TimePicker = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var ariaDescribedBy = _ref['aria-describedby'],
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$clearControlLabe = _ref.clearControlLabel,
    clearControlLabel = _ref$clearControlLabe === void 0 ? 'clear timepicker' : _ref$clearControlLabe,
    _ref$defaultIsOpen = _ref.defaultIsOpen,
    defaultIsOpen = _ref$defaultIsOpen === void 0 ? false : _ref$defaultIsOpen,
    _ref$defaultValue = _ref.defaultValue,
    defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
    formatDisplayLabel = _ref.formatDisplayLabel,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    _ref$id = _ref.id,
    id = _ref$id === void 0 ? '' : _ref$id,
    _ref$innerProps = _ref.innerProps,
    innerProps = _ref$innerProps === void 0 ? {} : _ref$innerProps,
    _ref$isDisabled = _ref.isDisabled,
    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isInvalid = _ref.isInvalid,
    isInvalid = _ref$isInvalid === void 0 ? false : _ref$isInvalid,
    _ref$isRequired = _ref.isRequired,
    isRequired = _ref$isRequired === void 0 ? false : _ref$isRequired,
    providedIsOpen = _ref.isOpen,
    _ref$label = _ref.label,
    label = _ref$label === void 0 ? '' : _ref$label,
    _ref$locale = _ref.locale,
    locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? '' : _ref$name,
    _ref$onBlur = _ref.onBlur,
    providedOnBlur = _ref$onBlur === void 0 ? _noop.default : _ref$onBlur,
    _ref$onChange = _ref.onChange,
    providedOnChange = _ref$onChange === void 0 ? _noop.default : _ref$onChange,
    _ref$onFocus = _ref.onFocus,
    providedOnFocus = _ref$onFocus === void 0 ? _noop.default : _ref$onFocus,
    _ref$parseInputValue = _ref.parseInputValue,
    parseInputValue = _ref$parseInputValue === void 0 ? function (time, _timeFormat) {
      return (0, _parseTime.default)(time);
    } : _ref$parseInputValue,
    placeholder = _ref.placeholder,
    _ref$selectProps = _ref.selectProps,
    selectProps = _ref$selectProps === void 0 ? {} : _ref$selectProps,
    _ref$spacing = _ref.spacing,
    spacing = _ref$spacing === void 0 ? 'default' : _ref$spacing,
    testId = _ref.testId,
    timeFormat = _ref.timeFormat,
    _ref$timeIsEditable = _ref.timeIsEditable,
    timeIsEditable = _ref$timeIsEditable === void 0 ? false : _ref$timeIsEditable,
    _ref$times = _ref.times,
    times = _ref$times === void 0 ? _internal.defaultTimes : _ref$times,
    providedValue = _ref.value;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    containerRef = _useState2[0],
    setContainerRef = _useState2[1];
  /**
   * When being cleared from the icon the TimePicker is blurred.
   * This variable defines whether the default onMenuOpen or onMenuClose
   * events should behave as normal
   */
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    clearingFromIcon = _useState4[0],
    setClearingFromIcon = _useState4[1];
  // TODO: Remove isFocused? Does it do anything?
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    _ = _useState6[0],
    setIsFocused = _useState6[1];
  var _useState7 = (0, _react.useState)(defaultIsOpen),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isOpen = _useState8[0],
    setIsOpen = _useState8[1];
  var _useState9 = (0, _react.useState)(defaultValue),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    value = _useState10[0],
    setValue = _useState10[1];

  // Hack to force update: https://legacy.reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate
  var _useReducer = (0, _react.useReducer)(function (x) {
      return x + 1;
    }, 0),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    forceUpdate = _useReducer2[1];
  var providedOnChangeWithAnalytics = (0, _analyticsNext.usePlatformLeafEventHandler)(_objectSpread({
    fn: providedOnChange,
    action: 'selectedTime'
  }, analyticsAttributes));
  (0, _react.useEffect)(function () {
    if (providedValue) {
      setValue(providedValue);
    }
  }, [providedValue]);
  (0, _react.useEffect)(function () {
    if (providedIsOpen) {
      setIsOpen(providedIsOpen);
    }
  }, [providedIsOpen]);
  var onChange = (0, _react.useCallback)(function (newValue, action) {
    var rawValue = newValue ? newValue.value || newValue : '';
    var finalValue = rawValue.toString();
    setValue(finalValue);
    if (action && action.action === 'clear') {
      setClearingFromIcon(true);
    }
    providedOnChangeWithAnalytics(finalValue);
  }, [providedOnChangeWithAnalytics]);

  /**
   * Only allow custom times if timeIsEditable prop is true
   */
  var onCreateOption = function onCreateOption(inputValue) {
    if (timeIsEditable) {
      var sanitizedInput;
      try {
        sanitizedInput = parseInputValue(inputValue, timeFormat || _internal.defaultTimeFormat);
      } catch (e) {
        return; // do nothing, the main validation should happen in the form
      }
      var includesSeconds = !!(timeFormat && /[:.]?(s|ss)/.test(timeFormat));
      var formatFormat = includesSeconds ? 'HH:mm:ss' : 'HH:mm';
      var formattedValue = (0, _dateFns.format)(sanitizedInput, formatFormat) || '';
      setValue(formattedValue);
      providedOnChangeWithAnalytics(formattedValue);
    } else {
      providedOnChangeWithAnalytics(inputValue);
    }
  };
  var onMenuOpen = function onMenuOpen() {
    // Don't open menu after the user has clicked clear
    if (clearingFromIcon) {
      setClearingFromIcon(false);
    } else {
      setIsOpen(true);
    }
  };
  var onMenuClose = function onMenuClose() {
    // Don't close menu after the user has clicked clear
    if (clearingFromIcon) {
      setClearingFromIcon(false);
    } else {
      setIsOpen(false);
    }
  };
  var setInternalContainerRef = function setInternalContainerRef(ref) {
    var oldRef = containerRef;
    setContainerRef(ref);
    // Cause a re-render if we're getting the container ref for the first time
    // as the layered menu requires it for dimension calculation
    if (oldRef === null && ref !== null) {
      forceUpdate();
    }
  };
  var onBlur = function onBlur(event) {
    setIsFocused(false);
    providedOnBlur(event);
  };
  var onFocus = function onFocus(event) {
    setIsFocused(true);
    providedOnFocus(event);
  };
  var onSelectKeyDown = function onSelectKeyDown(event) {
    var key = event.key;
    var keyPressed = key.toLowerCase();
    if (clearingFromIcon && (keyPressed === 'backspace' || keyPressed === 'delete')) {
      // If being cleared from keyboard, don't change behaviour
      setClearingFromIcon(false);
    }
  };
  var ICON_PADDING = 2;
  var GRID_SIZE = 8;
  var l10n = (0, _locale.createLocalizationProvider)(locale);
  var _selectProps$styles = selectProps.styles,
    selectStyles = _selectProps$styles === void 0 ? {} : _selectProps$styles,
    otherSelectProps = (0, _objectWithoutProperties2.default)(selectProps, _excluded);
  var SelectComponent = timeIsEditable ? _select.CreatableSelect : _select.default;

  /**
   * There are multiple props that can change how the time is formatted.
   * The priority of props used is:
   *   1. formatDisplayLabel
   *   2. timeFormat
   *   3. locale
   */
  var formatTime = function formatTime(time) {
    if (formatDisplayLabel) {
      return formatDisplayLabel(time, timeFormat || _internal.defaultTimeFormat);
    }
    var date = (0, _parseTime.default)(time);
    if (!(date instanceof Date)) {
      return '';
    }
    if (!(0, _dateFns.isValid)(date)) {
      return time;
    }
    if (timeFormat) {
      return (0, _dateFns.format)(date, (0, _parseTokens.convertTokens)(timeFormat));
    }
    return l10n.formatTime(date);
  };
  var options = times.map(function (time) {
    return {
      label: formatTime(time),
      value: time
    };
  });
  var initialValue;
  if (providedValue !== null && providedValue !== undefined && providedValue !== '') {
    initialValue = {
      label: formatTime(providedValue),
      value: providedValue
    };
  } else if (providedValue !== '' && value) {
    initialValue = {
      label: formatTime(value),
      value: value
    };
  } else {
    initialValue = null;
  }
  var SingleValue = (0, _singleValue.makeSingleValue)({
    lang: locale
  });
  var selectComponents = _objectSpread({
    DropdownIndicator: _internal.EmptyComponent,
    Menu: _fixedLayerMenu.FixedLayerMenu,
    SingleValue: SingleValue
  }, hideIcon && {
    ClearIndicator: _internal.EmptyComponent
  });
  var renderIconContainer = Boolean(!hideIcon && value);

  // @ts-ignore -- Argument of type 'StylesConfig<OptionType, false, GroupBase<OptionType>>' is not assignable to parameter of type 'StylesConfig<OptionType, boolean, GroupBase<OptionType>>'.
  var mergedStyles = (0, _select.mergeStyles)(selectStyles, {
    control: function control(base) {
      return _objectSpread({}, base);
    },
    menu: function menu(base) {
      return _objectSpread(_objectSpread(_objectSpread({}, base), menuStyles), {}, {
        // Fixed positioned elements no longer inherit width from their parent, so we must explicitly set the
        // menu width to the width of our container
        width: containerRef ? containerRef.getBoundingClientRect().width : 'auto'
      });
    },
    indicatorsContainer: function indicatorsContainer(base) {
      return _objectSpread(_objectSpread({}, base), {}, {
        paddingLeft: renderIconContainer ? ICON_PADDING : 0,
        paddingRight: renderIconContainer ? GRID_SIZE - ICON_PADDING : 0
      });
    }
  });
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, innerProps, {
    ref: setInternalContainerRef,
    "data-testid": testId && "".concat(testId, "--container")
  }), /*#__PURE__*/_react.default.createElement("input", {
    name: name,
    type: "hidden",
    value: value,
    "data-testid": testId && "".concat(testId, "--input"),
    onKeyDown: onSelectKeyDown
  }), /*#__PURE__*/_react.default.createElement(SelectComponent, (0, _extends2.default)({
    "aria-describedby": ariaDescribedBy,
    "aria-label": label || undefined,
    appearance: appearance,
    autoFocus: autoFocus,
    clearControlLabel: clearControlLabel,
    components: selectComponents,
    inputId: id,
    isClearable: true,
    isDisabled: isDisabled,
    isRequired: isRequired,
    menuIsOpen: isOpen && !isDisabled,
    menuPlacement: "auto",
    openMenuOnFocus: true,
    onBlur: onBlur,
    onCreateOption: onCreateOption,
    onChange: onChange,
    options: options,
    onFocus: onFocus,
    onMenuOpen: onMenuOpen,
    onMenuClose: onMenuClose,
    placeholder: placeholder || l10n.formatTime(_internal.placeholderDatetime),
    styles: mergedStyles,
    value: initialValue,
    spacing: spacing
    // We need this to get things to work, even though it's not supported.
    // @ts-ignore
    ,
    fixedLayerRef: containerRef,
    isInvalid: isInvalid,
    testId: testId
  }, otherSelectProps)));
});
var _default = exports.default = TimePicker;