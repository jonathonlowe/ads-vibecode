/// <reference types="react" />
declare const DatePicker: import("react").FC<Omit<Omit<import("./date-picker-fc").DatePickerProps, "ref"> & import("react").RefAttributes<unknown>, "ref"> & Omit<Omit<Pick<Omit<{
    defaultIsOpen: boolean;
    defaultValue: string;
    disabled: string[];
    disabledDateFilter: (_: string) => boolean;
    locale: string;
    onBlur: (_event: import("react").FocusEvent<HTMLInputElement, Element>) => void;
    onChange: (_value: string) => void;
    onFocus: (_event: import("react").FocusEvent<HTMLInputElement, Element>) => void;
} & import("..").DatePickerProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "label" | "parseInputValue" | "dateFormat" | "formatDisplayLabel" | "placeholder" | "icon" | "appearance" | "isDisabled" | "innerProps" | "selectProps" | "autoFocus" | "id" | "aria-describedby" | "value" | "name" | "spacing" | "testId" | "clearControlLabel" | "isInvalid" | "isRequired" | "menuInnerWrapper" | "maxDate" | "minDate" | "nextMonthLabel" | "previousMonthLabel" | "weekStartDay" | "isOpen" | "inputLabel" | "inputLabelId" | "openCalendarLabel" | "shouldShowCalendarButton" | "hideIcon"> & {
    disabled?: string[] | undefined;
    defaultValue?: string | undefined;
    onFocus?: (((_event: import("react").FocusEvent<HTMLInputElement, Element>) => void) & import("react").FocusEventHandler<HTMLInputElement>) | undefined;
    onBlur?: (((_event: import("react").FocusEvent<HTMLInputElement, Element>) => void) & import("react").FocusEventHandler<HTMLInputElement>) | undefined;
    onChange?: (((_value: string) => void) & ((value: string) => void)) | undefined;
    disabledDateFilter?: (((_: string) => boolean) & ((date: string) => boolean)) | undefined;
    locale?: string | undefined;
    defaultIsOpen?: boolean | undefined;
} & {} & import("react").RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "ref"> & import("react").RefAttributes<any>, "ref"> & import("react").RefAttributes<any>>;
export default DatePicker;
