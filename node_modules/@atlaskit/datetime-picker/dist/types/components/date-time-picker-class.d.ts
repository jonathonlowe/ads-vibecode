/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { type DateTimePickerBaseProps } from '../types';
interface State {
    dateValue: string;
    isFocused: boolean;
    timeValue: string;
    value: string;
    zoneValue: string;
}
export declare const datePickerDefaultAriaLabel = "Date";
export declare const timePickerDefaultAriaLabel = "Time";
declare class DateTimePickerComponent extends React.Component<DateTimePickerBaseProps, State> {
    static defaultProps: DateTimePickerBaseProps;
    state: State;
    getParsedValues: () => {
        dateValue: string;
        timeValue: string;
        zoneValue: string;
    };
    getValue: () => string;
    parseValue(value: string, dateValue: string, timeValue: string, zoneValue: string): {
        dateValue: string;
        timeValue: string;
        zoneValue: string;
    };
    onDateBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onTimeBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onDateFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    onTimeFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    onDateChange: (dateValue: string) => void;
    onTimeChange: (timeValue: string) => void;
    onClear: () => void;
    onValueChange({ dateValue, timeValue, zoneValue, }: {
        dateValue: string;
        timeValue: string;
        zoneValue: string;
    }): void;
    render(): JSX.Element;
}
export { DateTimePickerComponent as DateTimePickerWithoutAnalytics };
/**
 * __Date time picker__
 *
 * A date time picker allows the user to select an associated date and time.
 *
 * - [Examples](https://atlassian.design/components/datetime-picker/examples)
 * - [Code](https://atlassian.design/components/datetime-picker/code)
 * - [Usage](https://atlassian.design/components/datetime-picker/usage)
 */
declare const DateTimePicker: React.ForwardRefExoticComponent<Omit<Omit<Pick<Omit<DateTimePickerBaseProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, never> & {
    appearance?: import("../types").Appearance | undefined;
    isDisabled?: boolean | undefined;
    innerProps?: React.AllHTMLAttributes<HTMLElement> | undefined;
    defaultValue?: string | undefined;
    autoFocus?: boolean | undefined;
    id?: string | undefined;
    'aria-describedby'?: string | undefined;
    onFocus?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: ((value: string) => void) | undefined;
    value?: string | undefined;
    name?: string | undefined;
    spacing?: import("../types").Spacing | undefined;
    testId?: string | undefined;
    clearControlLabel?: string | undefined;
    isInvalid?: boolean | undefined;
    isRequired?: boolean | undefined;
    locale?: string | undefined;
    datePickerProps?: import("../types").DatePickerBaseProps | undefined;
    timePickerProps?: import("../types").TimePickerBaseProps | undefined;
    parseValue?: ((dateTimeValue: string, date: string, time: string, timezone: string) => {
        dateValue: string;
        timeValue: string;
        zoneValue: string;
    }) | undefined;
} & {
    ref?: React.Ref<any> | undefined;
    createAnalyticsEvent?: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | undefined;
}, "ref"> & React.RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "ref"> & React.RefAttributes<any>>;
export default DateTimePicker;
