/// <reference types="react" />
declare const DateTimePicker: import("react").FC<Omit<Omit<import("..").DateTimePickerProps, "ref"> & import("react").RefAttributes<unknown>, "ref"> & Omit<Omit<Omit<Pick<Omit<import("..").DateTimePickerProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, never> & {
    appearance?: import("..").Appearance | undefined;
    isDisabled?: boolean | undefined;
    innerProps?: import("react").AllHTMLAttributes<HTMLElement> | undefined;
    defaultValue?: string | undefined;
    autoFocus?: boolean | undefined;
    id?: string | undefined;
    'aria-describedby'?: string | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: ((value: string) => void) | undefined;
    value?: string | undefined;
    name?: string | undefined;
    spacing?: import("..").Spacing | undefined;
    testId?: string | undefined;
    clearControlLabel?: string | undefined;
    isInvalid?: boolean | undefined;
    isRequired?: boolean | undefined;
    locale?: string | undefined;
    datePickerProps?: import("..").DatePickerProps | undefined;
    timePickerProps?: import("..").TimePickerProps | undefined;
    parseValue?: ((dateTimeValue: string, date: string, time: string, timezone: string) => {
        dateValue: string;
        timeValue: string;
        zoneValue: string;
    }) | undefined;
} & {
    ref?: import("react").Ref<any> | undefined;
    createAnalyticsEvent?: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | undefined;
}, "ref"> & import("react").RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "ref"> & import("react").RefAttributes<any>, "ref"> & import("react").RefAttributes<any>>;
export default DateTimePicker;
