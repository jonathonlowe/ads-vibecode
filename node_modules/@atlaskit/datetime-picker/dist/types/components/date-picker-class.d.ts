/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Component } from 'react';
import { type LocalizationProvider } from '@atlaskit/locale';
import { type ActionMeta, type InputActionMeta } from '@atlaskit/select';
import { type DatePickerBaseProps } from '../types';
type DatePickerProps = typeof datePickerDefaultProps & DatePickerBaseProps;
interface State {
    isKeyDown: boolean;
    isOpen: boolean;
    /**
     * When being cleared from the icon the DatePicker is blurred.
     * This variable defines whether the default onSelectBlur or onSelectFocus
     * events should behave as normal.
     */
    isFocused: boolean;
    clearingFromIcon: boolean;
    value: string;
    calendarValue: string;
    selectInputValue: string;
    l10n: LocalizationProvider;
    locale: string;
    shouldSetFocusOnCurrentDay: boolean;
    wasOpenedFromCalendarButton: boolean;
}
declare const datePickerDefaultProps: {
    defaultIsOpen: boolean;
    defaultValue: string;
    disabled: string[];
    disabledDateFilter: (_: string) => boolean;
    locale: string;
    onBlur: (_event: React.FocusEvent<HTMLInputElement>) => void;
    onChange: (_value: string) => void;
    onFocus: (_event: React.FocusEvent<HTMLInputElement>) => void;
};
declare class DatePickerComponent extends Component<DatePickerProps, State> {
    static defaultProps: {
        defaultIsOpen: boolean;
        defaultValue: string;
        disabled: string[];
        disabledDateFilter: (_: string) => boolean;
        locale: string;
        onBlur: (_event: import("react").FocusEvent<HTMLInputElement, Element>) => void;
        onChange: (_value: string) => void;
        onFocus: (_event: import("react").FocusEvent<HTMLInputElement, Element>) => void;
    };
    containerRef: HTMLElement | null;
    calendarRef: React.RefObject<HTMLDivElement | null>;
    calendarButtonRef: React.RefObject<HTMLButtonElement>;
    constructor(props: any);
    static getDerivedStateFromProps(nextProps: Readonly<DatePickerProps>, prevState: State): {
        l10n: LocalizationProvider;
        locale: string;
    } | null;
    getValue: () => string;
    getIsOpen: () => boolean;
    onCalendarChange: ({ iso }: {
        iso: string;
    }) => void;
    onCalendarSelect: ({ iso }: {
        iso: string;
    }) => void;
    onInputClick: () => void;
    onContainerBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onContainerFocus: () => void;
    onSelectBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onSelectFocus: (event: React.FocusEvent<HTMLInputElement>) => void;
    onTextInput: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onInputKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
    onCalendarButtonKeyDown: (e: React.KeyboardEvent<HTMLButtonElement>) => void;
    onCalendarButtonClick: (e: React.MouseEvent<HTMLButtonElement>) => void;
    onClear: () => void;
    onSelectChange: (_value: unknown, action: ActionMeta) => void;
    handleSelectInputChange: (selectInputValue: string, actionMeta: InputActionMeta) => void;
    getContainerRef: (ref: HTMLElement | null) => void;
    render(): JSX.Element;
}
export { DatePickerComponent as DatePickerWithoutAnalytics };
/**
 * __Date picker__
 *
 * A date picker allows the user to select a particular date.
 *
 * - [Examples](https://atlassian.design/components/datetime-picker/date-picker/examples)
 * - [Code](https://atlassian.design/components/datetime-picker/date-picker/code)
 * - [Usage](https://atlassian.design/components/datetime-picker/date-picker/usage)
 */
declare const DatePicker: import("react").ForwardRefExoticComponent<Omit<Pick<Omit<{
    defaultIsOpen: boolean;
    defaultValue: string;
    disabled: string[];
    disabledDateFilter: (_: string) => boolean;
    locale: string;
    onBlur: (_event: React.FocusEvent<HTMLInputElement>) => void;
    onChange: (_value: string) => void;
    onFocus: (_event: React.FocusEvent<HTMLInputElement>) => void;
} & DatePickerBaseProps, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "label" | "parseInputValue" | "dateFormat" | "formatDisplayLabel" | "placeholder" | "icon" | "appearance" | "isDisabled" | "innerProps" | "selectProps" | "autoFocus" | "id" | "aria-describedby" | "value" | "name" | "spacing" | "testId" | "clearControlLabel" | "isInvalid" | "isRequired" | "menuInnerWrapper" | "maxDate" | "minDate" | "nextMonthLabel" | "previousMonthLabel" | "weekStartDay" | "isOpen" | "inputLabel" | "inputLabelId" | "openCalendarLabel" | "shouldShowCalendarButton" | "hideIcon"> & {
    disabled?: string[] | undefined;
    defaultValue?: string | undefined;
    onFocus?: (((_event: React.FocusEvent<HTMLInputElement>) => void) & import("react").FocusEventHandler<HTMLInputElement>) | undefined;
    onBlur?: (((_event: React.FocusEvent<HTMLInputElement>) => void) & import("react").FocusEventHandler<HTMLInputElement>) | undefined;
    onChange?: (((_value: string) => void) & ((value: string) => void)) | undefined;
    disabledDateFilter?: (((_: string) => boolean) & ((date: string) => boolean)) | undefined;
    locale?: string | undefined;
    defaultIsOpen?: boolean | undefined;
} & {} & import("react").RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "ref"> & import("react").RefAttributes<any>>;
export default DatePicker;
