"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeduplicatedFilmStrip = void 0;
exports.usePrevious = usePrevious;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _mediaClientReact = require("@atlaskit/media-client-react");
var _mediaCard = require("@atlaskit/media-card");
var _filmstripView = require("./filmstripView");
var _generateIdentifierKey = require("./utils/generateIdentifierKey");
var _mediaClient = require("@atlaskit/media-client");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function usePrevious(value) {
  var ref = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var DeduplicatedFilmStripInternal = function DeduplicatedFilmStripInternal(_ref) {
  var items = _ref.items,
    mediaClientConfig = _ref.mediaClientConfig,
    shouldOpenMediaViewer = _ref.shouldOpenMediaViewer,
    featureFlags = _ref.featureFlags,
    viewerOptions = _ref.viewerOptions,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'media-filmstrip' : _ref$testId,
    isLazy = _ref.isLazy;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    animate = _useState2[0],
    setAnimate = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    offset = _useState4[0],
    setOffset = _useState4[1];
  var handleSize = function handleSize(_ref2) {
    var offset = _ref2.offset;
    setOffset(offset);
  };
  var handleScroll = function handleScroll(_ref3) {
    var animate = _ref3.animate,
      offset = _ref3.offset;
    setAnimate(animate);
    setOffset(offset);
  };
  var ids = (0, _react.useMemo)(function () {
    return items.map(function (_ref4) {
      var identifier = _ref4.identifier;
      return identifier;
    }).filter(_mediaClient.isFileIdentifier);
  }, [items]);
  var fileHashes = (0, _mediaClientReact.useFileHashes)(ids);
  var cards = (0, _react.useMemo)(function () {
    // filters only the first item when encountering duplicated hashes
    var uniqueItems = items.filter(function (_ref5, i) {
      var identifier = _ref5.identifier;
      return identifier.mediaItemType !== 'file' || !fileHashes[identifier.id] || !items.some(function (currentItem, currI) {
        return currentItem.identifier.mediaItemType === 'file' && currI < i && fileHashes[identifier.id] === fileHashes[currentItem.identifier.id];
      });
    });
    return uniqueItems.map(function (item) {
      var key = (0, _generateIdentifierKey.generateIdentifierKey)(item.identifier);
      if (!mediaClientConfig) {
        return /*#__PURE__*/_react.default.createElement(_mediaCard.CardLoading, {
          key: key,
          dimensions: _mediaCard.defaultImageCardDimensions,
          interactionName: "media-filmstrip-card-loading"
        });
      }
      var mediaViewerItems = shouldOpenMediaViewer ? uniqueItems.map(function (item) {
        return item.identifier;
      }) : undefined;
      return /*#__PURE__*/_react.default.createElement(_mediaCard.Card, (0, _extends2.default)({
        key: key,
        mediaClientConfig: mediaClientConfig,
        dimensions: _mediaCard.defaultImageCardDimensions,
        useInlinePlayer: false,
        shouldOpenMediaViewer: shouldOpenMediaViewer,
        mediaViewerItems: mediaViewerItems,
        featureFlags: featureFlags,
        viewerOptions: viewerOptions,
        includeHashForDuplicateFiles: true,
        isLazy: isLazy
      }, item));
    });
  }, [items, fileHashes, mediaClientConfig, shouldOpenMediaViewer, featureFlags, viewerOptions, isLazy]);
  return /*#__PURE__*/_react.default.createElement(_filmstripView.FilmstripView, {
    animate: animate,
    offset: offset,
    onSize: handleSize,
    onScroll: handleScroll,
    testId: testId
  }, cards);
};
var EmptyFilmstripView = function EmptyFilmstripView(_ref6) {
  var items = _ref6.items,
    testId = _ref6.testId;
  return /*#__PURE__*/_react.default.createElement(_filmstripView.FilmstripView, {
    animate: false,
    offset: 0,
    onSize: function onSize() {},
    onScroll: function onScroll() {},
    testId: testId
  }, items.map(function (item, i) {
    return /*#__PURE__*/_react.default.createElement(_mediaCard.CardLoading, {
      key: (0, _generateIdentifierKey.generateIdentifierKey)(item.identifier),
      dimensions: _mediaCard.defaultImageCardDimensions,
      interactionName: "media-filmstrip-card-loading"
    });
  }));
};
var DeduplicatedFilmStrip = exports.DeduplicatedFilmStrip = function DeduplicatedFilmStrip(props) {
  return /*#__PURE__*/_react.default.createElement(_mediaClientReact.MediaClientContext.Consumer, null, function (value) {
    return value ? /*#__PURE__*/_react.default.createElement(DeduplicatedFilmStripInternal, props) : !props.mediaClientConfig ? /*#__PURE__*/_react.default.createElement(EmptyFilmstripView, props) : /*#__PURE__*/_react.default.createElement(_mediaClientReact.MediaClientProvider, {
      clientConfig: props.mediaClientConfig
    }, /*#__PURE__*/_react.default.createElement(DeduplicatedFilmStripInternal, props));
  });
};