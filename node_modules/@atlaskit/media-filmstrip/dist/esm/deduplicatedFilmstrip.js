import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useRef } from 'react';
import React, { useMemo, useState, useEffect } from 'react';
import { MediaClientContext, MediaClientProvider, useFileHashes } from '@atlaskit/media-client-react';
import { Card, defaultImageCardDimensions, CardLoading } from '@atlaskit/media-card';
import { FilmstripView } from './filmstripView';
import { generateIdentifierKey } from './utils/generateIdentifierKey';
import { isFileIdentifier } from '@atlaskit/media-client';
export function usePrevious(value) {
  var ref = useRef();
  useEffect(function () {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var DeduplicatedFilmStripInternal = function DeduplicatedFilmStripInternal(_ref) {
  var items = _ref.items,
    mediaClientConfig = _ref.mediaClientConfig,
    shouldOpenMediaViewer = _ref.shouldOpenMediaViewer,
    featureFlags = _ref.featureFlags,
    viewerOptions = _ref.viewerOptions,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'media-filmstrip' : _ref$testId,
    isLazy = _ref.isLazy;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    animate = _useState2[0],
    setAnimate = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    offset = _useState4[0],
    setOffset = _useState4[1];
  var handleSize = function handleSize(_ref2) {
    var offset = _ref2.offset;
    setOffset(offset);
  };
  var handleScroll = function handleScroll(_ref3) {
    var animate = _ref3.animate,
      offset = _ref3.offset;
    setAnimate(animate);
    setOffset(offset);
  };
  var ids = useMemo(function () {
    return items.map(function (_ref4) {
      var identifier = _ref4.identifier;
      return identifier;
    }).filter(isFileIdentifier);
  }, [items]);
  var fileHashes = useFileHashes(ids);
  var cards = useMemo(function () {
    // filters only the first item when encountering duplicated hashes
    var uniqueItems = items.filter(function (_ref5, i) {
      var identifier = _ref5.identifier;
      return identifier.mediaItemType !== 'file' || !fileHashes[identifier.id] || !items.some(function (currentItem, currI) {
        return currentItem.identifier.mediaItemType === 'file' && currI < i && fileHashes[identifier.id] === fileHashes[currentItem.identifier.id];
      });
    });
    return uniqueItems.map(function (item) {
      var key = generateIdentifierKey(item.identifier);
      if (!mediaClientConfig) {
        return /*#__PURE__*/React.createElement(CardLoading, {
          key: key,
          dimensions: defaultImageCardDimensions,
          interactionName: "media-filmstrip-card-loading"
        });
      }
      var mediaViewerItems = shouldOpenMediaViewer ? uniqueItems.map(function (item) {
        return item.identifier;
      }) : undefined;
      return /*#__PURE__*/React.createElement(Card, _extends({
        key: key,
        mediaClientConfig: mediaClientConfig,
        dimensions: defaultImageCardDimensions,
        useInlinePlayer: false,
        shouldOpenMediaViewer: shouldOpenMediaViewer,
        mediaViewerItems: mediaViewerItems,
        featureFlags: featureFlags,
        viewerOptions: viewerOptions,
        includeHashForDuplicateFiles: true,
        isLazy: isLazy
      }, item));
    });
  }, [items, fileHashes, mediaClientConfig, shouldOpenMediaViewer, featureFlags, viewerOptions, isLazy]);
  return /*#__PURE__*/React.createElement(FilmstripView, {
    animate: animate,
    offset: offset,
    onSize: handleSize,
    onScroll: handleScroll,
    testId: testId
  }, cards);
};
var EmptyFilmstripView = function EmptyFilmstripView(_ref6) {
  var items = _ref6.items,
    testId = _ref6.testId;
  return /*#__PURE__*/React.createElement(FilmstripView, {
    animate: false,
    offset: 0,
    onSize: function onSize() {},
    onScroll: function onScroll() {},
    testId: testId
  }, items.map(function (item, i) {
    return /*#__PURE__*/React.createElement(CardLoading, {
      key: generateIdentifierKey(item.identifier),
      dimensions: defaultImageCardDimensions,
      interactionName: "media-filmstrip-card-loading"
    });
  }));
};
export var DeduplicatedFilmStrip = function DeduplicatedFilmStrip(props) {
  return /*#__PURE__*/React.createElement(MediaClientContext.Consumer, null, function (value) {
    return value ? /*#__PURE__*/React.createElement(DeduplicatedFilmStripInternal, props) : !props.mediaClientConfig ? /*#__PURE__*/React.createElement(EmptyFilmstripView, props) : /*#__PURE__*/React.createElement(MediaClientProvider, {
      clientConfig: props.mediaClientConfig
    }, /*#__PURE__*/React.createElement(DeduplicatedFilmStripInternal, props));
  });
};