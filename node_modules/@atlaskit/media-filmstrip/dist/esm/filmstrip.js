import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Component } from 'react';
import { Card, defaultImageCardDimensions, CardLoading } from '@atlaskit/media-card';
import { FilmstripView } from './filmstripView';
import { generateIdentifierKey } from './utils/generateIdentifierKey';
import { DeduplicatedFilmStrip } from './deduplicatedFilmstrip';
export var Filmstrip = /*#__PURE__*/function (_Component) {
  function Filmstrip() {
    var _this;
    _classCallCheck(this, Filmstrip);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Filmstrip, [].concat(args));
    _defineProperty(_this, "state", {
      animate: false,
      offset: 0
    });
    _defineProperty(_this, "handleSize", function (_ref) {
      var offset = _ref.offset;
      return _this.setState({
        offset: offset
      });
    });
    _defineProperty(_this, "handleScroll", function (_ref2) {
      var animate = _ref2.animate,
        offset = _ref2.offset;
      return _this.setState({
        animate: animate,
        offset: offset
      });
    });
    return _this;
  }
  _inherits(Filmstrip, _Component);
  return _createClass(Filmstrip, [{
    key: "renderCards",
    value: function renderCards() {
      var _this$props = this.props,
        items = _this$props.items,
        mediaClientConfig = _this$props.mediaClientConfig,
        shouldOpenMediaViewer = _this$props.shouldOpenMediaViewer,
        featureFlags = _this$props.featureFlags,
        viewerOptions = _this$props.viewerOptions,
        isLazy = _this$props.isLazy;
      return items.map(function (item) {
        var key = generateIdentifierKey(item.identifier);
        if (!mediaClientConfig) {
          return /*#__PURE__*/React.createElement(CardLoading, {
            key: key,
            dimensions: defaultImageCardDimensions,
            interactionName: "media-filmstrip-card-loading"
          });
        }
        var mediaViewerItems = shouldOpenMediaViewer ? items.map(function (item) {
          return item.identifier;
        }) : undefined;
        return /*#__PURE__*/React.createElement(Card, _extends({
          key: key,
          mediaClientConfig: mediaClientConfig,
          dimensions: defaultImageCardDimensions,
          useInlinePlayer: false,
          shouldOpenMediaViewer: shouldOpenMediaViewer,
          mediaViewerItems: mediaViewerItems,
          featureFlags: featureFlags,
          viewerOptions: viewerOptions,
          isLazy: isLazy
        }, item));
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        _this$props2$testId = _this$props2.testId,
        testId = _this$props2$testId === void 0 ? 'media-filmstrip' : _this$props2$testId,
        includeHashForDuplicateFiles = _this$props2.includeHashForDuplicateFiles;
      if (includeHashForDuplicateFiles) {
        return /*#__PURE__*/React.createElement(DeduplicatedFilmStrip, this.props);
      }
      var _this$state = this.state,
        animate = _this$state.animate,
        offset = _this$state.offset;
      return /*#__PURE__*/React.createElement(FilmstripView, {
        animate: animate,
        offset: offset,
        onSize: this.handleSize,
        onScroll: this.handleScroll,
        testId: testId
      }, this.renderCards());
    }
  }]);
}(Component);