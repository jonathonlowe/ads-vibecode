import _extends from "@babel/runtime/helpers/extends";
import { useRef } from 'react';
import React, { useMemo, useState, useEffect } from 'react';
import { MediaClientContext, MediaClientProvider, useFileHashes } from '@atlaskit/media-client-react';
import { Card, defaultImageCardDimensions, CardLoading } from '@atlaskit/media-card';
import { FilmstripView } from './filmstripView';
import { generateIdentifierKey } from './utils/generateIdentifierKey';
import { isFileIdentifier } from '@atlaskit/media-client';
export function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
const DeduplicatedFilmStripInternal = ({
  items,
  mediaClientConfig,
  shouldOpenMediaViewer,
  featureFlags,
  viewerOptions,
  testId = 'media-filmstrip',
  isLazy
}) => {
  const [animate, setAnimate] = useState(false);
  const [offset, setOffset] = useState(0);
  const handleSize = ({
    offset
  }) => {
    setOffset(offset);
  };
  const handleScroll = ({
    animate,
    offset
  }) => {
    setAnimate(animate);
    setOffset(offset);
  };
  const ids = useMemo(() => items.map(({
    identifier
  }) => identifier).filter(isFileIdentifier), [items]);
  const fileHashes = useFileHashes(ids);
  const cards = useMemo(() => {
    // filters only the first item when encountering duplicated hashes
    const uniqueItems = items.filter(({
      identifier
    }, i) => identifier.mediaItemType !== 'file' || !fileHashes[identifier.id] || !items.some((currentItem, currI) => currentItem.identifier.mediaItemType === 'file' && currI < i && fileHashes[identifier.id] === fileHashes[currentItem.identifier.id]));
    return uniqueItems.map(item => {
      const key = generateIdentifierKey(item.identifier);
      if (!mediaClientConfig) {
        return /*#__PURE__*/React.createElement(CardLoading, {
          key: key,
          dimensions: defaultImageCardDimensions,
          interactionName: "media-filmstrip-card-loading"
        });
      }
      const mediaViewerItems = shouldOpenMediaViewer ? uniqueItems.map(item => item.identifier) : undefined;
      return /*#__PURE__*/React.createElement(Card, _extends({
        key: key,
        mediaClientConfig: mediaClientConfig,
        dimensions: defaultImageCardDimensions,
        useInlinePlayer: false,
        shouldOpenMediaViewer: shouldOpenMediaViewer,
        mediaViewerItems: mediaViewerItems,
        featureFlags: featureFlags,
        viewerOptions: viewerOptions,
        includeHashForDuplicateFiles: true,
        isLazy: isLazy
      }, item));
    });
  }, [items, fileHashes, mediaClientConfig, shouldOpenMediaViewer, featureFlags, viewerOptions, isLazy]);
  return /*#__PURE__*/React.createElement(FilmstripView, {
    animate: animate,
    offset: offset,
    onSize: handleSize,
    onScroll: handleScroll,
    testId: testId
  }, cards);
};
const EmptyFilmstripView = ({
  items,
  testId
}) => {
  return /*#__PURE__*/React.createElement(FilmstripView, {
    animate: false,
    offset: 0,
    onSize: () => {},
    onScroll: () => {},
    testId: testId
  }, items.map((item, i) => /*#__PURE__*/React.createElement(CardLoading, {
    key: generateIdentifierKey(item.identifier),
    dimensions: defaultImageCardDimensions,
    interactionName: "media-filmstrip-card-loading"
  })));
};
export const DeduplicatedFilmStrip = props => /*#__PURE__*/React.createElement(MediaClientContext.Consumer, null, value => value ? /*#__PURE__*/React.createElement(DeduplicatedFilmStripInternal, props) : !props.mediaClientConfig ? /*#__PURE__*/React.createElement(EmptyFilmstripView, props) : /*#__PURE__*/React.createElement(MediaClientProvider, {
  clientConfig: props.mediaClientConfig
}, /*#__PURE__*/React.createElement(DeduplicatedFilmStripInternal, props)));