import React, { type ReactNode } from 'react';
import { type CommonPropsAndClassName, type CSSObjectWithLabel, type GroupBase } from '../types';
export interface DropdownIndicatorProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> extends CommonPropsAndClassName<Option, IsMulti, Group> {
    /**
     * The children to be rendered inside the indicator.
     */
    children?: ReactNode;
    /**
     * Props that will be passed on to the children.
     */
    innerProps: JSX.IntrinsicElements['div'];
    /**
     * The focused state of the select.
     */
    isFocused: boolean;
    isDisabled: boolean;
    /**
     * Whether the select is compact.
     */
    isCompact?: boolean;
}
export declare const dropdownIndicatorCSS: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: DropdownIndicatorProps<Option, IsMulti, Group>) => CSSObjectWithLabel;
export declare const DropdownIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: DropdownIndicatorProps<Option, IsMulti, Group>) => React.JSX.Element;
export interface ClearIndicatorProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> extends CommonPropsAndClassName<Option, IsMulti, Group> {
    /**
     * The children to be rendered inside the indicator.
     */
    children?: ReactNode;
    /**
     * Sets the `aria-label` for the clear icon button
     */
    clearControlLabel?: string;
    /**
     * Props that will be passed on to the children.
     */
    innerProps: JSX.IntrinsicElements['div'];
    /**
     * The focused state of the select.
     */
    isFocused: boolean;
    /**
     * Whether the select is compact.
     */
    isCompact?: boolean;
}
export declare const clearIndicatorCSS: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ClearIndicatorProps<Option, IsMulti, Group>) => CSSObjectWithLabel;
export declare const ClearIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ClearIndicatorProps<Option, IsMulti, Group>) => React.JSX.Element;
export declare const loadingIndicatorCSS: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: LoadingIndicatorProps<Option, IsMulti, Group>) => CSSObjectWithLabel;
export interface LoadingIndicatorProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> extends CommonPropsAndClassName<Option, IsMulti, Group> {
    /**
     * Props that will be passed on to the children.
     */
    innerProps: JSX.IntrinsicElements['div'];
    /**
     * The focused state of the select.
     */
    isFocused: boolean;
    isDisabled: boolean;
    /**
     * Set size of the container.
     */
    size: number;
    /**
     * Whether the select is compact.
     */
    isCompact?: boolean;
}
export declare const LoadingIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: LoadingIndicatorProps<Option, IsMulti, Group>) => React.JSX.Element;
