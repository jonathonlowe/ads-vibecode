"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadingIndicatorCSS = exports.dropdownIndicatorCSS = exports.clearIndicatorCSS = exports.LoadingIndicator = exports.DropdownIndicator = exports.ClearIndicator = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _crossCircleSelectClear = _interopRequireDefault(require("@atlaskit/icon/utility/migration/cross-circle--select-clear"));
var _primitives = require("@atlaskit/primitives");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _utils = require("../../utils");
var _excluded = ["innerProps", "isRtl", "size"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// ==============================
// Dropdown & Clear Icons
// ==============================

var iconContainerStyles = (0, _primitives.xcss)({
  all: 'unset',
  outline: 'revert',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  padding: 'space.025'
});
var dropdownWrapperStyles = (0, _primitives.xcss)({
  padding: 'space.075'
});

// ==============================
// Dropdown & Clear Buttons
// ==============================

var dropdownIndicatorCSS = exports.dropdownIndicatorCSS = function dropdownIndicatorCSS(_ref) {
  var isCompact = _ref.isCompact,
    isDisabled = _ref.isDisabled;
  return {
    label: 'indicatorContainer',
    display: 'flex',
    transition: 'color 150ms',
    color: isDisabled ? "var(--ds-text-disabled, #091E424F)" : "var(--ds-text-subtle, #44546F)",
    padding: "".concat(isCompact ? 0 : "var(--ds-space-075, 6px)", " ", "var(--ds-space-025, 2px)"),
    ':hover': {
      color: "var(--ds-text-subtle, #44546F)"
    }
  };
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var DropdownIndicator = exports.DropdownIndicator = function DropdownIndicator(props) {
  var innerProps = props.innerProps,
    children = props.children;
  return (0, _react.jsx)("div", (0, _extends2.default)({}, (0, _utils.getStyleProps)(props, 'dropdownIndicator', {
    indicator: true,
    'dropdown-indicator': true
  }), innerProps), children ? children : (0, _react.jsx)(_primitives.Inline, {
    as: "span",
    xcss: dropdownWrapperStyles
  }, (0, _react.jsx)(_chevronDown.default, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)"
  })));
};
var clearIndicatorCSS = exports.clearIndicatorCSS = function clearIndicatorCSS(_ref2) {
  var isCompact = _ref2.isCompact;
  return {
    label: 'indicatorContainer',
    display: 'flex',
    transition: 'color 150ms',
    color: "var(--ds-text-subtlest, #626F86)",
    padding: "".concat(isCompact ? 0 : "var(--ds-space-075, 6px)", " ", "var(--ds-space-025, 2px)"),
    ':hover': {
      color: "var(--ds-text-subtle, #44546F)"
    }
  };
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var ClearIndicator = exports.ClearIndicator = function ClearIndicator(props) {
  var innerProps = props.innerProps,
    _props$clearControlLa = props.clearControlLabel,
    clearControlLabel = _props$clearControlLa === void 0 ? 'clear' : _props$clearControlLa;
  return (0, _react.jsx)("div", (0, _extends2.default)({}, (0, _utils.getStyleProps)(props, 'clearIndicator', {
    indicator: true,
    'clear-indicator': true
  }), innerProps), (0, _react.jsx)(_primitives.Pressable, {
    xcss: iconContainerStyles,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, (0, _react.jsx)(_crossCircleSelectClear.default, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)"
  })));
};

// ==============================
// Loading
// ==============================

var loadingIndicatorCSS = exports.loadingIndicatorCSS = function loadingIndicatorCSS(_ref3) {
  var isCompact = _ref3.isCompact;
  return {
    label: 'loadingIndicator',
    padding: "".concat(isCompact ? 0 : "var(--ds-space-075, 6px)", " ", "var(--ds-space-100, 8px)")
  };
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
var LoadingIndicator = exports.LoadingIndicator = function LoadingIndicator(_ref4) {
  var innerProps = _ref4.innerProps,
    isRtl = _ref4.isRtl,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? 4 : _ref4$size,
    restProps = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
  return (0, _react.jsx)("div", (0, _extends2.default)({}, (0, _utils.getStyleProps)(_objectSpread(_objectSpread({}, restProps), {}, {
    innerProps: innerProps,
    isRtl: isRtl,
    size: size
  }), 'loadingIndicator', {
    indicator: true,
    'loading-indicator': true
  }), innerProps), (0, _react.jsx)(_spinner.default, {
    size: "small"
  }));
};