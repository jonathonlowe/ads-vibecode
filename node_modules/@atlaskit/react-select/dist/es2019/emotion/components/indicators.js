import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { jsx } from '@emotion/react';
import DownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import CrossIcon from '@atlaskit/icon/utility/migration/cross-circle--select-clear';
import { Inline, Pressable, xcss } from '@atlaskit/primitives';
import Spinner from '@atlaskit/spinner';
import { getStyleProps } from '../../utils';

// ==============================
// Dropdown & Clear Icons
// ==============================

const iconContainerStyles = xcss({
  all: 'unset',
  outline: 'revert',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  padding: 'space.025'
});
const dropdownWrapperStyles = xcss({
  padding: 'space.075'
});

// ==============================
// Dropdown & Clear Buttons
// ==============================

export const dropdownIndicatorCSS = ({
  isCompact,
  isDisabled
}) => ({
  label: 'indicatorContainer',
  display: 'flex',
  transition: 'color 150ms',
  color: isDisabled ? "var(--ds-text-disabled, #091E424F)" : "var(--ds-text-subtle, #44546F)",
  padding: `${isCompact ? 0 : "var(--ds-space-075, 6px)"} ${"var(--ds-space-025, 2px)"}`,
  ':hover': {
    color: "var(--ds-text-subtle, #44546F)"
  }
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const DropdownIndicator = props => {
  const {
    innerProps,
    children
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'dropdownIndicator', {
    indicator: true,
    'dropdown-indicator': true
  }), innerProps), children ? children : jsx(Inline, {
    as: "span",
    xcss: dropdownWrapperStyles
  }, jsx(DownIcon, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)"
  })));
};
export const clearIndicatorCSS = ({
  isCompact
}) => ({
  label: 'indicatorContainer',
  display: 'flex',
  transition: 'color 150ms',
  color: "var(--ds-text-subtlest, #626F86)",
  padding: `${isCompact ? 0 : "var(--ds-space-075, 6px)"} ${"var(--ds-space-025, 2px)"}`,
  ':hover': {
    color: "var(--ds-text-subtle, #44546F)"
  }
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const ClearIndicator = props => {
  const {
    innerProps,
    clearControlLabel = 'clear'
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'clearIndicator', {
    indicator: true,
    'clear-indicator': true
  }), innerProps), jsx(Pressable, {
    xcss: iconContainerStyles,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, jsx(CrossIcon, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)"
  })));
};

// ==============================
// Loading
// ==============================

export const loadingIndicatorCSS = ({
  isCompact
}) => ({
  label: 'loadingIndicator',
  padding: `${isCompact ? 0 : "var(--ds-space-075, 6px)"} ${"var(--ds-space-100, 8px)"}`
});
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const LoadingIndicator = ({
  innerProps,
  isRtl,
  size = 4,
  ...restProps
}) => {
  return jsx("div", _extends({}, getStyleProps({
    ...restProps,
    innerProps,
    isRtl,
    size
  }, 'loadingIndicator', {
    indicator: true,
    'loading-indicator': true
  }), innerProps), jsx(Spinner, {
    size: "small"
  }));
};