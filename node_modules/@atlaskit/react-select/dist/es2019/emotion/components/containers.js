import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { jsx } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
import { media } from '@atlaskit/primitives';
import { getStyleProps } from '../../utils';

// ==============================
// Root Container
// ==============================

export const containerCSS = ({
  isDisabled,
  isRtl
}) => ({
  label: 'container',
  direction: isRtl ? 'rtl' : undefined,
  position: 'relative',
  font: fg('platform_design_system_team_safari_input_fix') ? "var(--ds-font-body-large, normal 400 16px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)" : "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  pointerEvents: 'all',
  cursor: isDisabled ? 'not-allowed' : undefined,
  [`${media.above.xs}`]: {
    font: fg('platform_design_system_team_safari_input_fix') ? "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)" : undefined
  }
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const SelectContainer = props => {
  const {
    children,
    innerProps,
    isDisabled,
    isRtl
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'container', {
    '--is-disabled': isDisabled,
    '--is-rtl': isRtl
  }), innerProps), children);
};

// ==============================
// Value Container
// ==============================

export const valueContainerCSS = ({
  isMulti,
  hasValue,
  isCompact,
  selectProps: {
    controlShouldRenderValue
  }
}) => ({
  alignItems: 'center',
  display: isMulti && hasValue && controlShouldRenderValue ? 'flex' : 'grid',
  flex: 1,
  flexWrap: 'wrap',
  WebkitOverflowScrolling: 'touch',
  position: 'relative',
  overflow: 'hidden',
  padding: `${isCompact ? 0 : "var(--ds-space-025, 2px)"} ${"var(--ds-space-075, 6px)"}`
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const ValueContainer = props => {
  const {
    children,
    innerProps,
    isMulti,
    hasValue
  } = props;
  const styles = getStyleProps(props, 'valueContainer', {
    'value-container': true,
    'value-container--is-multi': isMulti,
    'value-container--has-value': hasValue
  });
  return jsx("div", _extends({
    css: styles.css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: styles.className || 'value-container'
  }, innerProps), children);
};

// ==============================
// Indicator Container
// ==============================

export const indicatorsContainerCSS = () => ({
  alignItems: 'center',
  alignSelf: 'stretch',
  display: 'flex',
  flexShrink: 0,
  paddingRight: "var(--ds-space-050, 4px)"
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const IndicatorsContainer = props => {
  const {
    children,
    innerProps
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'indicatorsContainer', {
    indicators: true
  }), innerProps), children);
};