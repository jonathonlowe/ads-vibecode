import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { createContext, useCallback, useContext, useMemo, useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { jsx } from '@emotion/react';
import { autoUpdate } from '@floating-ui/dom';
import { createPortal } from 'react-dom';
import useLayoutEffect from 'use-isomorphic-layout-effect';
import { fg } from '@atlaskit/platform-feature-flags';
import { Text } from '@atlaskit/primitives';
import { animatedScrollTo, getBoundingClientObj, getScrollParent, getScrollTop, getStyleProps, normalizedHeight, scrollTo } from '../../utils';

// ==============================
// Menu
// ==============================

// Get Menu Placement
// ------------------------------

function getMenuPlacement({
  maxHeight: preferredMaxHeight,
  menuEl,
  minHeight,
  placement: preferredPlacement,
  shouldScroll,
  isFixedPosition,
  controlHeight
}) {
  const scrollParent = getScrollParent(menuEl);
  const defaultState = {
    placement: 'bottom',
    maxHeight: preferredMaxHeight
  };

  // something went wrong, return default state
  if (!menuEl || !menuEl.offsetParent) {
    return defaultState;
  }

  // we can't trust `scrollParent.scrollHeight` --> it may increase when
  // the menu is rendered
  const {
    height: scrollHeight,
    top: scrollParentTop
  } = scrollParent.getBoundingClientRect();
  const {
    bottom: menuBottom,
    height: menuHeight,
    top: menuTop
  } = menuEl.getBoundingClientRect();
  const {
    top: containerTop
  } = menuEl.offsetParent.getBoundingClientRect();
  const viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
  const scrollTop = getScrollTop(scrollParent);
  // use menuTop - scrollParentTop for the actual top space of menu in the scroll container
  const menuTopFromParent = fg('design-system-select-fix-placement') ? menuTop - scrollParentTop : menuTop;
  const marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  const marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  const viewSpaceAbove = containerTop - marginTop;
  const viewSpaceBelow = viewHeight - menuTopFromParent;
  const scrollSpaceAbove = viewSpaceAbove + scrollTop;
  const scrollSpaceBelow = scrollHeight - scrollTop - menuTopFromParent;
  const scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  const scrollUp = scrollTop + menuTop - marginTop;
  const scrollDuration = 160;
  switch (preferredPlacement) {
    case 'auto':
    case 'bottom':
      // 1: the menu will fit, do nothing
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        const constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: 'bottom',
          maxHeight: constrainedHeight
        };
      }

      // 4. Forked beviour when there isn't enough space below

      // AUTO: flip the menu, render above
      if (preferredPlacement === 'auto' || isFixedPosition) {
        // may need to be constrained after flipping
        let constrainedHeight = preferredMaxHeight;
        const spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
        }
        return {
          placement: 'top',
          maxHeight: constrainedHeight
        };
      }

      // BOTTOM: allow browser to increase scrollable area and immediately set scroll
      if (preferredPlacement === 'bottom') {
        if (shouldScroll) {
          scrollTo(scrollParent, scrollDown);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case 'top':
      // 1: the menu will fit, do nothing
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        let constrainedHeight = preferredMaxHeight;

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          constrainedHeight = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: constrainedHeight
        };
      }

      // 4. not enough space, the browser WILL NOT increase scrollable area when
      // absolutely positioned element rendered above the viewport (only below).
      // Flip the menu, render below
      return {
        placement: 'bottom',
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error(`Invalid placement provided "${preferredPlacement}".`);
  }
  return defaultState;
}

// Menu Component
// ------------------------------

function alignToControl(placement) {
  const placementToCSSProp = {
    bottom: 'top',
    top: 'bottom'
  };
  return placement ? placementToCSSProp[placement] : 'bottom';
}
const coercePlacement = p => p === 'auto' ? 'bottom' : p;
export const menuCSS = ({
  placement
}) => ({
  label: 'menu',
  [alignToControl(placement)]: '100%',
  position: 'absolute',
  width: '100%',
  zIndex: 1,
  borderRadius: "var(--ds-border-radius, 4px)",
  marginBottom: "var(--ds-space-100, 8px)",
  marginTop: "var(--ds-space-100, 8px)",
  backgroundColor: "var(--ds-surface-overlay, white)",
  boxShadow: "var(--ds-shadow-overlay, 0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%))"
});
const PortalPlacementContext = /*#__PURE__*/createContext(null);

// NOTE: internal only
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const MenuPlacer = props => {
  const {
    children,
    minMenuHeight,
    maxMenuHeight,
    menuPlacement,
    menuPosition,
    menuShouldScrollIntoView
  } = props;
  const {
    setPortalPlacement
  } = useContext(PortalPlacementContext) || {};
  const ref = useRef(null);
  const [maxHeight, setMaxHeight] = useState(maxMenuHeight);
  const [placement, setPlacement] = useState(null);
  // The minimum height of the control
  const controlHeight = 38;
  useLayoutEffect(() => {
    const menuEl = ref.current;
    if (!menuEl) {
      return;
    }

    // DO NOT scroll if position is fixed
    const isFixedPosition = menuPosition === 'fixed';
    const shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    const state = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll,
      isFixedPosition,
      controlHeight
    });
    setMaxHeight(state.maxHeight);
    setPlacement(state.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
  return children({
    ref,
    placerProps: {
      ...props,
      placement: placement || coercePlacement(menuPlacement),
      maxHeight
    }
  });
};
const Menu = props => {
  const {
    children,
    innerRef,
    innerProps
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'menu', {
    menu: true
  }), {
    ref: innerRef
  }, innerProps), children);
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Menu;

// ==============================
// Menu List
// ==============================

export const menuListCSS = ({
  maxHeight
}) => ({
  maxHeight,
  overflowY: 'auto',
  position: 'relative',
  // required for offset[Height, Top] > keyboard scroll
  WebkitOverflowScrolling: 'touch',
  paddingTop: "var(--ds-space-100, 8px)",
  paddingBottom: "var(--ds-space-100, 8px)"
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const MenuList = props => {
  const {
    children,
    innerProps,
    innerRef,
    isMulti
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'menuList', {
    'menu-list': true,
    'menu-list--is-multi': isMulti
  }), {
    ref: innerRef
  }, innerProps, {
    tabIndex: -1
  }), children);
};

// ==============================
// Menu Notices
// ==============================

const noticeCSS = ({}) => ({
  textAlign: 'center',
  padding: `${"var(--ds-space-100, 8px)"} ${"var(--ds-space-150, 12px)"}`
});
export const noOptionsMessageCSS = noticeCSS;
export const loadingMessageCSS = noticeCSS;
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const NoOptionsMessage = ({
  children = 'No options',
  innerProps,
  ...restProps
}) => {
  return jsx("div", _extends({}, getStyleProps({
    ...restProps,
    children,
    innerProps
  }, 'noOptionsMessage', {
    'menu-notice': true,
    'menu-notice--no-options': true
  }), {
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    role: "option"
  }, innerProps), jsx(Text, {
    color: "color.text.subtle"
  }, children));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const LoadingMessage = ({
  children = 'Loading...',
  innerProps,
  ...restProps
}) => {
  return jsx("div", _extends({}, getStyleProps({
    ...restProps,
    children,
    innerProps
  }, 'loadingMessage', {
    'menu-notice': true,
    'menu-notice--loading': true
  }), innerProps, {
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    role: "option"
  }), jsx(Text, {
    color: "color.text.subtle"
  }, children));
};

// ==============================
// Menu Portal
// ==============================

export const menuPortalCSS = ({
  rect,
  offset,
  position
}) => ({
  left: rect.left,
  position: position,
  top: offset,
  width: rect.width,
  zIndex: 1
});
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const MenuPortal = props => {
  const {
    appendTo,
    children,
    controlElement,
    innerProps,
    menuPlacement,
    menuPosition
  } = props;
  const menuPortalRef = useRef(null);
  const cleanupRef = useRef(null);
  const [placement, setPortalPlacement] = useState(coercePlacement(menuPlacement));
  const portalPlacementContext = useMemo(() => ({
    setPortalPlacement
  }), []);
  const [computedPosition, setComputedPosition] = useState(null);
  const updateComputedPosition = useCallback(() => {
    if (!controlElement) {
      return;
    }
    const rect = getBoundingClientObj(controlElement);
    const scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset;
    const offset = rect[placement] + scrollDistance;
    if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset,
        rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  useLayoutEffect(() => {
    updateComputedPosition();
  }, [updateComputedPosition]);
  const runAutoUpdate = useCallback(() => {
    if (typeof cleanupRef.current === 'function') {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: 'ResizeObserver' in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  useLayoutEffect(() => {
    runAutoUpdate();
  }, [runAutoUpdate]);
  const setMenuPortalElement = useCallback(menuPortalElement => {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);

  // bail early if required elements aren't present
  if (!appendTo && menuPosition !== 'fixed' || !computedPosition) {
    return null;
  }

  // same wrapper element whether fixed or portalled
  const menuWrapper = jsx("div", _extends({
    ref: setMenuPortalElement
  }, getStyleProps({
    ...props,
    offset: computedPosition.offset,
    position: menuPosition,
    rect: computedPosition.rect
  }, 'menuPortal', {
    'menu-portal': true
  }), innerProps), children);
  return jsx(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? /*#__PURE__*/createPortal(menuWrapper, appendTo) : menuWrapper);
};