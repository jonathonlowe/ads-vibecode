import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { jsx } from '@emotion/react';
import { getStyleProps } from '../../utils';
export const optionCSS = ({
  isDisabled,
  isFocused,
  isSelected
}) => {
  let color = "var(--ds-text, #172B4D)";
  if (isDisabled) {
    color = "var(--ds-text-disabled, #091E424F)";
  } else if (isSelected) {
    color = "var(--ds-text-selected, #0C66E4)";
  }
  let boxShadow;
  let backgroundColor;
  if (isDisabled) {
    backgroundColor = undefined;
  } else if (isSelected && isFocused) {
    backgroundColor = "var(--ds-background-selected-hovered, #CCE0FF)";
  } else if (isSelected) {
    backgroundColor = "var(--ds-background-selected, #E9F2FF)";
  } else if (isFocused) {
    backgroundColor = "var(--ds-background-neutral-subtle-hovered, #091E420F)";
  }
  if (!isDisabled && (isFocused || isSelected)) {
    boxShadow = `inset 2px 0px 0px ${"var(--ds-border-selected, #0C66E4)"}`;
  }
  const cursor = isDisabled ? 'not-allowed' : 'default';
  return {
    label: 'option',
    display: 'block',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    fontSize: 'inherit',
    width: '100%',
    userSelect: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    padding: `${"var(--ds-space-075, 6px)"} ${"var(--ds-space-150, 12px)"}`,
    backgroundColor,
    color,
    cursor,
    boxShadow,
    ':active': {
      backgroundColor: !isDisabled ? isSelected ? "var(--ds-background-selected-pressed, #85B8FF)" : "var(--ds-background-neutral-subtle-pressed, #091E4224)" : undefined
    },
    '@media screen and (-ms-high-contrast: active)': {
      borderLeft: !isDisabled && (isFocused || isSelected) ? '2px solid transparent' : ''
    }
  };
};
const Option = props => {
  const {
    children,
    isDisabled,
    isFocused,
    isSelected,
    innerRef,
    innerProps
  } = props;
  return jsx("div", _extends({}, getStyleProps(props, 'option', {
    option: true,
    'option--is-disabled': isDisabled,
    'option--is-focused': isFocused,
    'option--is-selected': isSelected
  }), {
    ref: innerRef
  }, innerProps, {
    tabIndex: -1
  }), children);
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Option;