"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsupportedContentPlugin = void 0;
var _adfSchema = require("@atlaskit/adf-schema");
var _reactNodeView = _interopRequireWildcard(require("@atlaskit/editor-common/react-node-view"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _ui = require("@atlaskit/editor-common/ui");
var _state = require("@atlaskit/editor-prosemirror/state");
var _unsupportedInlineNodeView = require("./nodeviews/unsupported-inline-node-view");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var pluginKey = new _state.PluginKey('unsupportedContentPlugin');
var createPlugin = function createPlugin(pmPluginFactoryParams) {
  var portalProviderAPI = pmPluginFactoryParams.portalProviderAPI,
    eventDispatcher = pmPluginFactoryParams.eventDispatcher,
    dispatchAnalyticsEvent = pmPluginFactoryParams.dispatchAnalyticsEvent;
  return new _safePlugin.SafePlugin({
    key: pluginKey,
    props: {
      nodeViews: {
        confluenceUnsupportedBlock: _reactNodeView.default.fromComponent(_ui.UnsupportedBlock, portalProviderAPI, eventDispatcher, {
          dispatchAnalyticsEvent: dispatchAnalyticsEvent
        }, undefined),
        confluenceUnsupportedInline: (0, _reactNodeView.getInlineNodeViewProducer)({
          pmPluginFactoryParams: pmPluginFactoryParams,
          Component: _unsupportedInlineNodeView.UnsupportedInlineNodeView,
          extraComponentProps: {
            dispatchAnalyticsEvent: dispatchAnalyticsEvent
          }
        }),
        unsupportedBlock: _reactNodeView.default.fromComponent(_ui.UnsupportedBlock, portalProviderAPI, eventDispatcher, {
          dispatchAnalyticsEvent: dispatchAnalyticsEvent
        }, undefined),
        unsupportedInline: (0, _reactNodeView.getInlineNodeViewProducer)({
          pmPluginFactoryParams: pmPluginFactoryParams,
          Component: _unsupportedInlineNodeView.UnsupportedInlineNodeView,
          extraComponentProps: {
            dispatchAnalyticsEvent: dispatchAnalyticsEvent
          }
        })
      }
    }
  });
};

/**
 * Unsupported content plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
var unsupportedContentPlugin = exports.unsupportedContentPlugin = function unsupportedContentPlugin() {
  return {
    name: 'unsupportedContent',
    marks: function marks() {
      return [{
        name: 'unsupportedMark',
        mark: _adfSchema.unsupportedMark
      }, {
        name: 'unsupportedNodeAttribute',
        mark: _adfSchema.unsupportedNodeAttribute
      }];
    },
    nodes: function nodes() {
      return [{
        name: 'confluenceUnsupportedBlock',
        node: _adfSchema.confluenceUnsupportedBlock
      }, {
        name: 'confluenceUnsupportedInline',
        node: _adfSchema.confluenceUnsupportedInline
      }, {
        name: 'unsupportedBlock',
        node: _adfSchema.unsupportedBlock
      }, {
        name: 'unsupportedInline',
        node: _adfSchema.unsupportedInline
      }];
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'unsupportedContent',
        plugin: createPlugin
      }];
    }
  };
};