/* truncateText-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["fontSizePX", "startFixedChars", "endFixedChars", "children"],
  _excluded2 = ["fontSizePX", "startFixedChars", "endFixedChars", "children"];
import "./truncateText-compiled.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { Fragment } from 'react';
export var calculateTruncation = function calculateTruncation(text, startFixedChars, endFixedChars) {
  var minAllowedLength = endFixedChars + startFixedChars;
  if (text.length <= minAllowedLength) {
    // if no truncation return same value for left and right
    return {
      left: text,
      right: text
    };
  }
  var splitAt = text.length - endFixedChars;
  var left = text.substr(0, splitAt);
  var right = text.substr(splitAt);
  return {
    left: left,
    right: right
  };
};
var truncateCommonStyles = null;
var truncateLeftStyles = null;
export var TruncateLeft = function TruncateLeft(_ref) {
  var fontSizePX = _ref.fontSizePX,
    startFixedChars = _ref.startFixedChars,
    endFixedChars = _ref.endFixedChars,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement("span", _extends({
    style: {
      maxWidth: "calc(\n\t\t100% -\n\t\t\t".concat(fontFaceScaleFactor(fontSizePX) * endFixedChars + 1, "em\n\t)"),
      minWidth: fontFaceScaleFactor(fontSizePX) * startFixedChars
    },
    "data-testid": "truncate-left"
  }, props, {
    className: ax(["_1reo15vq _18m915vq _1e0c1o8l _s7n4yfq0 _o5721q9c", "_1bto1l2s"])
  }), children);
};
var truncateRightStyles = null;
export var TruncateRight = function TruncateRight(_ref2) {
  var fontSizePX = _ref2.fontSizePX,
    startFixedChars = _ref2.startFixedChars,
    endFixedChars = _ref2.endFixedChars,
    children = _ref2.children,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement("span", _extends({
    style: {
      maxWidth: "calc(\n\t\t\t\t100% -\n\t\t\t\t\t".concat(function (_ref3) {
        var fontSizePX = _ref3.fontSizePX,
          startFixedChars = _ref3.startFixedChars;
        return fontFaceScaleFactor(fontSizePX) * startFixedChars;
      }, "\n\t\t\t)")
    },
    "data-testid": "truncate-right"
  }, props, {
    className: ax(["_1reo15vq _18m915vq _1e0c1o8l _s7n4yfq0 _o5721q9c", "_kqswh2mm"])
  }), children);
};
var fontFaceScaleFactor = function fontFaceScaleFactor(fontSizePX) {
  return fontSizePX / 11 * 0.46;
}; /* factor for fontSize of 11px */

var placeholder = ' ';
export var Truncate = function Truncate(_ref4) {
  var text = _ref4.text,
    _ref4$fontSizePX = _ref4.fontSizePX,
    fontSizePX = _ref4$fontSizePX === void 0 ? 11 : _ref4$fontSizePX,
    _ref4$startFixedChars = _ref4.startFixedChars,
    startFixedChars = _ref4$startFixedChars === void 0 ? 4 : _ref4$startFixedChars,
    _ref4$endFixedChars = _ref4.endFixedChars,
    endFixedChars = _ref4$endFixedChars === void 0 ? 7 : _ref4$endFixedChars;
  var _calculateTruncation = calculateTruncation(text, startFixedChars, endFixedChars),
    leftStr = _calculateTruncation.left,
    rightStr = _calculateTruncation.right;
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(TruncateLeft, {
    fontSizePX: fontSizePX,
    startFixedChars: startFixedChars,
    endFixedChars: endFixedChars
  }, leftStr), /*#__PURE__*/React.createElement(TruncateRight, {
    fontSizePX: fontSizePX,
    startFixedChars: startFixedChars,
    endFixedChars: endFixedChars
  }, leftStr === rightStr ? placeholder : rightStr));
};