import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import styled from '@emotion/styled';
import ImageIcon from '@atlaskit/icon-file-type/glyph/image/24';
import AudioIcon from '@atlaskit/icon-file-type/glyph/audio/24';
import VideoIcon from '@atlaskit/icon-file-type/glyph/video/24';
import DocIcon from '@atlaskit/icon-file-type/glyph/document/24';
import ArchiveIcon from '@atlaskit/icon-file-type/glyph/archive/24';
import GenericIcon from '@atlaskit/icon-file-type/glyph/generic/24';
import ImageIconSmall from '@atlaskit/icon-file-type/glyph/image/16';
import AudioIconSmall from '@atlaskit/icon-file-type/glyph/audio/16';
import VideoIconSmall from '@atlaskit/icon-file-type/glyph/video/16';
import DocIconSmall from '@atlaskit/icon-file-type/glyph/document/16';
import ArchiveIconSmall from '@atlaskit/icon-file-type/glyph/archive/16';
import GenericIconSmall from '@atlaskit/icon-file-type/glyph/generic/16';
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var IconWrapper = styled.span({
  display: 'inline-flex'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
function (_ref) {
  var size = _ref.size;
  return size === 'large' ? "padding: 4px;" : '';
});
IconWrapper.displayName = 'IconWrapper';
var largeIcons = {
  image: ImageIcon,
  audio: AudioIcon,
  video: VideoIcon,
  doc: DocIcon,
  archive: ArchiveIcon,
  unknown: GenericIcon
};
var smallIcons = {
  image: ImageIconSmall,
  audio: AudioIconSmall,
  video: VideoIconSmall,
  doc: DocIconSmall,
  archive: ArchiveIconSmall,
  unknown: GenericIconSmall
};
var defaultType = 'unknown';
export var MediaTypeIcon = /*#__PURE__*/function (_React$Component) {
  function MediaTypeIcon() {
    _classCallCheck(this, MediaTypeIcon);
    return _callSuper(this, MediaTypeIcon, arguments);
  }
  _inherits(MediaTypeIcon, _React$Component);
  return _createClass(MediaTypeIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        type = _this$props.type,
        size = _this$props.size,
        testId = _this$props.testId;
      var typeWithDefault = type || defaultType;
      var icons = size === 'large' ? largeIcons : smallIcons;
      var Icon = icons[typeWithDefault] || icons[defaultType];
      return /*#__PURE__*/React.createElement(IconWrapper, {
        "data-testid": testId,
        "data-type": type,
        size: size
      }, /*#__PURE__*/React.createElement(Icon, {
        label: "media-type"
      }));
    }
  }]);
}(React.Component);
_defineProperty(MediaTypeIcon, "defaultProps", {
  type: defaultType,
  testId: 'file-type-icon',
  size: 'large'
});