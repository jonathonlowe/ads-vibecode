/* mime-type-icon.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./mime-type-icon.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { getMimeIcon } from './util';
import { IconWrapper, MediaTypeIcon } from './media-type-icon';
import { fg } from '@atlaskit/platform-feature-flags';
var iconWrapperStyleMap = {
  small: "",
  large: "_ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66"
};
var iconWrapperStyles = null;

/*
 * Renders an icon. First, check if the mimeType corresponds to any of the special mimeType icons (.gif, .sketch, .exe, ect). If so, render that icon.
 * Else, render an icon corresponding to its mediaType (doc/audio/image/video/unknown)
 */
export var MimeTypeIcon = function MimeTypeIcon(_ref) {
  var _ref$mediaType = _ref.mediaType,
    mediaType = _ref$mediaType === void 0 ? 'unknown' : _ref$mediaType,
    _ref$mimeType = _ref.mimeType,
    mimeType = _ref$mimeType === void 0 ? 'unknown' : _ref$mimeType,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? 'unknown' : _ref$name,
    testId = _ref.testId,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  // retrieve mimetype icon and label
  var iconInfo = getMimeIcon(mimeType, name);

  // a corresponding mimetype icon and label was found.
  if (iconInfo) {
    var Icon = iconInfo.icon;
    return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement("div", {
      "data-testid": testId,
      "data-type": iconInfo.label,
      className: ax(["_1e0c116y", iconWrapperStyleMap[size !== null && size !== void 0 ? size : 'small']])
    }, /*#__PURE__*/React.createElement(Icon, {
      label: iconInfo.label
    })) : /*#__PURE__*/React.createElement(IconWrapper, {
      "data-testid": testId,
      "data-type": iconInfo.label,
      size: size
    }, /*#__PURE__*/React.createElement(Icon, {
      label: iconInfo.label
    }));
  }

  // no corresponding mimetype icon/label was found.
  // Hence, return a mediatype (image/doc/audio/video/unknown) icon
  return /*#__PURE__*/React.createElement(MediaTypeIcon, {
    testId: testId,
    type: mediaType,
    size: size
  });
};