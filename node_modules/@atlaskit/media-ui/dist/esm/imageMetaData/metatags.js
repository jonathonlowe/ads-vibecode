import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ImageType } from './types';
import { readJPEGExifMetaData } from './parseJPEG';
import { readPNGXMPMetaData } from './parsePNG';
import { parseXMPMetaData } from './parsePNGXMP';
export function readImageMetaTags(_x) {
  return _readImageMetaTags.apply(this, arguments);
}
function _readImageMetaTags() {
  _readImageMetaTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
    var type, _yield$readPNGXMPMeta, iTXt, pHYs, xmpMetaData;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          type = file.type;
          _context.prev = 1;
          if (!(type === ImageType.PNG)) {
            _context.next = 12;
            break;
          }
          _context.next = 5;
          return readPNGXMPMetaData(file);
        case 5:
          _yield$readPNGXMPMeta = _context.sent;
          iTXt = _yield$readPNGXMPMeta.iTXt;
          pHYs = _yield$readPNGXMPMeta.pHYs;
          xmpMetaData = _objectSpread(_objectSpread({}, parseXMPMetaData(iTXt)), pHYs);
          return _context.abrupt("return", xmpMetaData);
        case 12:
          if (!(file.type === ImageType.JPEG)) {
            _context.next = 16;
            break;
          }
          _context.next = 15;
          return readJPEGExifMetaData(file);
        case 15:
          return _context.abrupt("return", _context.sent);
        case 16:
          _context.next = 20;
          break;
        case 18:
          _context.prev = 18;
          _context.t0 = _context["catch"](1);
        case 20:
          return _context.abrupt("return", null);
        case 21:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 18]]);
  }));
  return _readImageMetaTags.apply(this, arguments);
}