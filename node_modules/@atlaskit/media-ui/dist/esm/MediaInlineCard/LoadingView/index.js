import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Frame } from '../Frame';
import Spinner from '@atlaskit/spinner';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { SpinnerWrapper } from './styled';
import { IconTitleWrapper, RightIconPositionWrapper } from '../IconAndTitleLayout/styled';
export var MediaInlineCardLoadingView = /*#__PURE__*/function (_React$Component) {
  function MediaInlineCardLoadingView() {
    _classCallCheck(this, MediaInlineCardLoadingView);
    return _callSuper(this, MediaInlineCardLoadingView, arguments);
  }
  _inherits(MediaInlineCardLoadingView, _React$Component);
  return _createClass(MediaInlineCardLoadingView, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        message = _this$props.message,
        onClick = _this$props.onClick,
        isSelected = _this$props.isSelected,
        inlinePreloaderStyle = _this$props.inlinePreloaderStyle,
        innerRef = _this$props.innerRef,
        _this$props$testId = _this$props.testId,
        testId = _this$props$testId === void 0 ? 'media-inline-card-loading-view' : _this$props$testId;
      if (inlinePreloaderStyle === 'on-right-without-skeleton') {
        return /*#__PURE__*/React.createElement(Frame, {
          innerRef: innerRef,
          testId: testId,
          onClick: onClick,
          isSelected: isSelected
        }, /*#__PURE__*/React.createElement(IconTitleWrapper, null, message, /*#__PURE__*/React.createElement(RightIconPositionWrapper, null, /*#__PURE__*/React.createElement(SpinnerWrapper, {
          className: "inline-loading-spinner"
        }, /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        })))));
      } else {
        return /*#__PURE__*/React.createElement(Frame, {
          innerRef: innerRef,
          testId: testId,
          onClick: onClick,
          isSelected: isSelected
        }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
          title: message
        }, /*#__PURE__*/React.createElement(SpinnerWrapper, {
          className: "inline-loading-spinner"
        }, /*#__PURE__*/React.createElement(Spinner, {
          size: 14
        }))));
      }
    }
  }]);
}(React.Component);