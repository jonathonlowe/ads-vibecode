import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Frame } from '../Frame';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
export var MediaInlineCardLoadedView = /*#__PURE__*/function (_React$Component) {
  function MediaInlineCardLoadedView() {
    _classCallCheck(this, MediaInlineCardLoadedView);
    return _callSuper(this, MediaInlineCardLoadedView, arguments);
  }
  _inherits(MediaInlineCardLoadedView, _React$Component);
  return _createClass(MediaInlineCardLoadedView, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        _this$props$title = _this$props.title,
        title = _this$props$title === void 0 ? '' : _this$props$title,
        isSelected = _this$props.isSelected,
        onClick = _this$props.onClick,
        icon = _this$props.icon,
        _this$props$testId = _this$props.testId,
        testId = _this$props$testId === void 0 ? 'media-inline-card-loaded-view' : _this$props$testId,
        titlePrefix = _this$props.titlePrefix,
        innerRef = _this$props.innerRef;
      return /*#__PURE__*/React.createElement(Frame, {
        innerRef: innerRef,
        testId: testId,
        isSelected: isSelected,
        onClick: onClick
      }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
        emoji: titlePrefix,
        icon: icon,
        title: title
      }));
    }
  }]);
}(React.Component);