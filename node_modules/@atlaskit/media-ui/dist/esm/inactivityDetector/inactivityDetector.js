import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Component } from 'react';
import { hideControlsClassName } from '../classNames';
import { findParentByClassname } from '../util';
import { InactivityDetectorWrapper } from './styled';
var mouseMovementDelay = 2000;

/**
 * Hides all the child elements with `hideControlsClassName` classname when user is inactive,
 * which means they haven't moved mouse over the component for `mouseMovementDelay` ms.
 * Exception is if user holding mouse over one of the hideable elements (those that have specified classname).
 *
 */
export var InactivityDetector = /*#__PURE__*/function (_Component) {
  function InactivityDetector() {
    var _this;
    _classCallCheck(this, InactivityDetector);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, InactivityDetector, [].concat(args));
    _defineProperty(_this, "contentWrapperElement", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "state", {
      controlsAreVisible: true
    });
    _defineProperty(_this, "clearTimeout", function () {
      if (_this.checkActivityTimeout) {
        window.clearTimeout(_this.checkActivityTimeout);
      }
    });
    _defineProperty(_this, "hideControls", function (element) {
      return function () {
        if (element) {
          var isOverHideableElement = findParentByClassname(element, hideControlsClassName, _this.contentWrapperElement.current || undefined);
          if (!isOverHideableElement) {
            _this.setState({
              controlsAreVisible: false
            });
          }
        } else {
          _this.setState({
            controlsAreVisible: false
          });
        }
      };
    });
    _defineProperty(_this, "checkMouseMovement", function (e) {
      var controlsAreVisible = _this.state.controlsAreVisible;
      _this.clearTimeout();
      // This check is needed to not trigger a render call on every movement.
      // Even if nothing will be re-renderer since the value is the same, it
      // will go into any children render method for nothing.
      if (!controlsAreVisible) {
        _this.setState({
          controlsAreVisible: true
        });
      }
      _this.checkActivityTimeout = window.setTimeout(_this.hideControls(e && e.target), mouseMovementDelay);
    });
    return _this;
  }
  _inherits(InactivityDetector, _Component);
  return _createClass(InactivityDetector, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkMouseMovement();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearTimeout();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var controlsAreVisible = this.state.controlsAreVisible;
      var children = this.props.children;
      return /*#__PURE__*/React.createElement(InactivityDetectorWrapper, {
        ref: this.contentWrapperElement,
        controlsAreVisible: controlsAreVisible,
        onMouseMove: this.checkMouseMovement,
        onMouseOut: function onMouseOut() {
          return (
            // Do not pass element, hence forcing elements to be hidden.
            _this2.checkMouseMovement()
          );
        },
        onClick: this.checkMouseMovement,
        "data-testid": "inactivity-detector-wrapper"
      }, children(this.checkMouseMovement));
    }
  }]);
}(Component);