import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MockFileReader = /*#__PURE__*/_createClass(function MockFileReader() {
  var _this = this;
  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mockResult';
  _classCallCheck(this, MockFileReader);
  _defineProperty(this, "loadEvent", function () {});
  _defineProperty(this, "errorEvent", function (_) {});
  _defineProperty(this, "addEventListener", jest.fn().mockImplementation(function (eventName, fn) {
    if (eventName === 'load') {
      _this.loadEvent = fn;
    } else if (eventName === 'error') {
      _this.errorEvent = fn;
    }
  }));
  _defineProperty(this, "readAsDataURL", jest.fn().mockImplementation(function () {
    _this.loadEvent();
  }));
  _defineProperty(this, "readAsArrayBuffer", jest.fn().mockImplementation(function () {
    _this.loadEvent();
  }));
  this.result = result;
});
var mockFileReaderError = {
  message: 'error'
};
var MockFileReaderWithError = /*#__PURE__*/function (_MockFileReader2) {
  function MockFileReaderWithError() {
    var _this2;
    _classCallCheck(this, MockFileReaderWithError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _callSuper(this, MockFileReaderWithError, [].concat(args));
    _defineProperty(_this2, "readAsDataURL", jest.fn().mockImplementation(function () {
      _this2.errorEvent(mockFileReaderError);
    }));
    return _this2;
  }
  _inherits(MockFileReaderWithError, _MockFileReader2);
  return _createClass(MockFileReaderWithError);
}(MockFileReader);
var GlobalFileReader = global.FileReader;
var FileReader;
if (global.FileReader && typeof jest !== 'undefined') {
  FileReader = jest.spyOn(global, 'FileReader').mockImplementation(function () {
    return new GlobalFileReader();
  });
}
var mockFileReader = function mockFileReader(result) {
  var fileReader = new MockFileReader(result);
  FileReader.mockImplementation(function () {
    return fileReader;
  });
  return fileReader;
};
var mockFileReaderWithError = function mockFileReaderWithError() {
  var fileReader = new MockFileReaderWithError();
  FileReader.mockImplementation(function () {
    return fileReader;
  });
  return fileReader;
};
var unmockFileReader = function unmockFileReader() {
  return FileReader.mockImplementation(function () {
    return new GlobalFileReader();
  });
};
export { mockFileReader, mockFileReaderWithError, unmockFileReader, mockFileReaderError };