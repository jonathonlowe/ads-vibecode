import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["context", "childContextTypes"],
  _excluded2 = ["context"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { RawIntlProvider, createIntl, IntlProvider } from 'react-intl-next';
// eslint-disable-next-line import/no-extraneous-dependencies
import { mount, shallow } from 'enzyme';
var mockIntl = createIntl({
  locale: 'en'
});

/**
 * When using React-Intl `injectIntl` on components, props.intl is required.
 */
function nodeWithIntlProp(node) {
  var intl = !!node.props.intl ? node.props.intl : mockIntl;
  return /*#__PURE__*/React.createElement(RawIntlProvider, {
    value: intl
  }, /*#__PURE__*/React.cloneElement(node, {
    intl: intl
  }));
}

/* TODO: We are explicitly using the third arg of ReactWrapper to work around the following TS issue which prevents a d.ts from being generated
 * and therefore fails the build:
 * error TS2742: The inferred type of 'mountWithIntlContext' cannot be named without a reference to 'react-transition-group/node_modules/@types/react'. This is likely not portable. A type annotation is necessary.
 * TS is resolving enzyme's usage of react to react-transition-group???
 */
export var mountWithIntlContext = function mountWithIntlContext(node) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _ref$context = _ref.context,
    context = _ref$context === void 0 ? {} : _ref$context,
    _ref$childContextType = _ref.childContextTypes,
    childContextTypes = _ref$childContextType === void 0 ? {} : _ref$childContextType,
    additionalOptions = _objectWithoutProperties(_ref, _excluded);
  var intl = !!node.props.intl ? node.props.intl : mockIntl;
  return mount(nodeWithIntlProp(node), _objectSpread({
    context: _objectSpread({
      intl: intl
    }, context)
  }, additionalOptions));
};
export var shallowWithIntlContext = function shallowWithIntlContext(node) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _ref2$context = _ref2.context,
    context = _ref2$context === void 0 ? {} : _ref2$context,
    additionalOptions = _objectWithoutProperties(_ref2, _excluded2);
  var intl = !!node.props.intl ? node.props.intl : mockIntl;
  return shallow(nodeWithIntlProp(node), _objectSpread({
    context: _objectSpread({
      intl: intl
    }, context)
  }, additionalOptions));
};
export var mountWithIntlWrapper = function mountWithIntlWrapper(node) {
  return mount( /*#__PURE__*/React.createElement(function (props) {
    return /*#__PURE__*/React.createElement(IntlProvider, {
      locale: "en"
    }, /*#__PURE__*/React.cloneElement(node, _objectSpread({}, props)));
  }));
};