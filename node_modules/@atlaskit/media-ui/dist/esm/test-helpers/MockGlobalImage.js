import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var globalImage = global.Image;
var isErrorInsteadOfLoad;
var MockImage = /*#__PURE__*/function (_global$Image) {
  function MockImage() {
    var _this;
    _classCallCheck(this, MockImage);
    _this = _callSuper(this, MockImage);
    window.setTimeout(function () {
      return _this[isErrorInsteadOfLoad ? 'onerror' : 'onload']();
    });
    return _this;
  }
  _inherits(MockImage, _global$Image);
  return _createClass(MockImage);
}(global.Image);
export function enableMockGlobalImage() {
  var isError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  global.Image = MockImage;
  isErrorInsteadOfLoad = isError;
}
export function disableMockGlobalImage() {
  global.Image = globalImage;
}