import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import PdfDocumentIcon from '@atlaskit/icon-file-type/glyph/pdf-document/24';
import GifIcon from '@atlaskit/icon-file-type/glyph/gif/24';
import PowerpointPresentationIcon from '@atlaskit/icon-file-type/glyph/powerpoint-presentation/24';
import WordDocumentIcon from '@atlaskit/icon-file-type/glyph/word-document/24';
import SketchIcon from '@atlaskit/icon-file-type/glyph/sketch/24';
import FigmaIcon from '@atlaskit/icon-file-type/glyph/figma/24';
import ExecutableIcon from '@atlaskit/icon-file-type/glyph/executable/24';
import GoogleDocIcon from '@atlaskit/icon-file-type/glyph/google-doc/24';
import GoogleFormIcon from '@atlaskit/icon-file-type/glyph/google-form/24';
import GoogleSheetIcon from '@atlaskit/icon-file-type/glyph/google-sheet/24';
import GoogleSlideIcon from '@atlaskit/icon-file-type/glyph/google-slide/24';
import ExcelSpreadsheetIcon from '@atlaskit/icon-file-type/glyph/excel-spreadsheet/24';
import SpreadsheetIcon from '@atlaskit/icon-file-type/glyph/spreadsheet/24';
import PresentationIcon from '@atlaskit/icon-file-type/glyph/presentation/24';
import SourceCodeIcon from '@atlaskit/icon-file-type/glyph/source-code/24';
import { isCodeViewerItem } from './codeViewer';
export function dataURItoFile(dataURI) {
  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'untitled';
  if (dataURI.length === 0) {
    throw new Error('dataURI not found');
  }

  // convert base64/URLEncoded data component to raw binary data held in a string
  var dataURIParts = dataURI.split(',');
  var byteString = dataURIParts[0].indexOf('base64') >= 0 ? atob(dataURIParts[1]) : decodeURIComponent(dataURIParts[1]);

  // separate out the mime component
  var mimeString;
  try {
    mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
  } catch (e) {
    // https://stackoverflow.com/questions/1176022/unknown-file-type-mime
    mimeString = 'application/octet-stream';
  }

  // write the bytes of the string to a typed array
  var intArray = new Uint8Array(byteString.length);
  for (var i = 0; i < byteString.length; i++) {
    intArray[i] = byteString.charCodeAt(i);
  }
  var blob = new Blob([intArray], {
    type: mimeString
  });
  try {
    return new File([blob], filename, {
      type: mimeString
    });
  } catch (e) {
    // IE11 does not allow the File constructor (yay!)
    // we get around this by decorating the blob instance with File properties
    // effectively casting up from Blob to File.
    var ie11File = blob;
    var date = new Date();
    ie11File.lastModified = date.getTime();
    ie11File.lastModifiedDate = date;
    ie11File.name = filename;
    ie11File.webkitRelativePath = '';
    return ie11File;
  }
}
export function fileToDataURI(blob) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.addEventListener('load', function () {
      var result = reader.result;
      if (typeof result === 'string') {
        resolve(result);
      } else if (result === null) {
        reject();
      }
    });
    reader.addEventListener('error', reject);
    reader.readAsDataURL(blob);
  });
}
export function getFileInfo(_x, _x2) {
  return _getFileInfo.apply(this, arguments);
}
function _getFileInfo() {
  _getFileInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, src) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = file;
          _context.t1 = src;
          if (_context.t1) {
            _context.next = 6;
            break;
          }
          _context.next = 5;
          return fileToDataURI(file);
        case 5:
          _context.t1 = _context.sent;
        case 6:
          _context.t2 = _context.t1;
          return _context.abrupt("return", {
            file: _context.t0,
            src: _context.t2
          });
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getFileInfo.apply(this, arguments);
}
export function getFileInfoFromSrc(_x3, _x4) {
  return _getFileInfoFromSrc.apply(this, arguments);
}
function _getFileInfoFromSrc() {
  _getFileInfoFromSrc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(src, file) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.t0 = file;
          if (_context2.t0) {
            _context2.next = 5;
            break;
          }
          _context2.next = 4;
          return dataURItoFile(src);
        case 4:
          _context2.t0 = _context2.sent;
        case 5:
          _context2.t1 = _context2.t0;
          _context2.t2 = src;
          return _context2.abrupt("return", {
            file: _context2.t1,
            src: _context2.t2
          });
        case 8:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _getFileInfoFromSrc.apply(this, arguments);
}
export function fileToArrayBuffer(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.addEventListener('load', function () {
      var array = new Uint8Array(reader.result);
      resolve(array);
    });
    reader.addEventListener('error', reject);
    reader.readAsArrayBuffer(file);
  });
}
export function loadImage(src) {
  return new Promise(function (resolve, reject) {
    var img = new Image();
    img.src = src;
    img.onload = function () {
      resolve(img);
    };
    img.onerror = reject;
  });
}
export function readImageNaturalOrientationFromDOM(img) {
  img.style.position = 'absolute';
  img.style.visibility = 'hidden';
  document.body.appendChild(img);
  var _img$getBoundingClien = img.getBoundingClientRect(),
    width = _img$getBoundingClien.width,
    height = _img$getBoundingClien.height;
  document.body.removeChild(img);
  return {
    width: width,
    height: height
  };
}
export var findParentByClassname = function findParentByClassname(element, className) {
  var maxParentElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;
  if (element.classList.contains(className)) {
    return element;
  }
  var currentElement = element;
  while (currentElement.parentElement !== maxParentElement) {
    if (currentElement.parentElement) {
      currentElement = currentElement.parentElement;
      if (currentElement.classList.contains(className)) {
        return currentElement;
      }
    } else {
      return undefined;
    }
  }
  return undefined;
};
var mimeTypes = [{
  label: 'pdf',
  mimeTypes: ['application/pdf'],
  icon: PdfDocumentIcon
}, {
  label: 'google-form',
  mimeTypes: ['application/vnd.google-apps.form'],
  icon: GoogleFormIcon
}, {
  label: 'google-slides',
  mimeTypes: ['application/vnd.google-apps.presentation'],
  icon: GoogleSlideIcon
}, {
  label: 'google-form',
  mimeTypes: ['application/vnd.google-apps.form'],
  icon: GoogleFormIcon
}, {
  label: 'google-sheets',
  mimeTypes: ['application/vnd.google-apps.spreadsheet'],
  icon: GoogleSheetIcon
}, {
  label: 'google-docs',
  mimeTypes: ['application/vnd.google-apps.document', 'application/vnd.google-apps.kix'],
  icon: GoogleDocIcon
}, {
  label: 'microsoft-word',
  mimeTypes: ['application/msword', 'application/vnd.openxmlformats-officedocument.word'],
  icon: WordDocumentIcon
}, {
  label: 'presentation',
  mimeTypes: ['application/x-iwork-keynote-sffkey', 'application/vnd.oasis.opendocument.presentation'],
  icon: PresentationIcon
}, {
  label: 'powerpoint-presentation',
  mimeTypes: ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.ms-powerpoint'],
  icon: PowerpointPresentationIcon
}, {
  label: 'giphy',
  mimeTypes: ['image/gif'],
  icon: GifIcon
}, {
  label: 'spreadsheet',
  mimeTypes: ['text/csv'],
  icon: SpreadsheetIcon
}, {
  label: 'excel-spreadsheet',
  mimeTypes: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'application/x-iwork-keynote-sffnumbers'],
  icon: ExcelSpreadsheetIcon
}];

/*
 * Returns a label and icon
 */
export function getMimeIcon(mimeType, fileName) {
  // based on the mimeType, determine the corresponding icon and label
  var iconInfo = mimeTypes.find(function (file) {
    return file.mimeTypes.indexOf(mimeType) > -1;
  });

  //return the appropriate icon and its label if we have it
  if (iconInfo) {
    return iconInfo;
  }
  if (isCodeViewerItem(fileName, mimeType)) {
    return {
      label: 'source-code',
      icon: SourceCodeIcon
    };
  }

  // we are not able to determine what icon to render based on the mimeType
  // hence we render the icon based on the filename
  if (fileName.match(/.*\.sketch$/)) {
    return {
      label: 'sketch',
      icon: SketchIcon
    };
  }
  if (fileName.match(/.*\.fig$/)) {
    return {
      label: 'figma',
      icon: FigmaIcon
    };
  }
  if (fileName.match(/.*\.exe$/) || fileName.match(/.*\.dmg$/)) {
    return {
      label: 'executable',
      icon: ExecutableIcon
    };
  }

  // cannot find a corresponding mimeType icon.
  return undefined;
}