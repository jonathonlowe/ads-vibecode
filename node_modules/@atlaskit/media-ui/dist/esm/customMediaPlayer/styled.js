import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef } from 'react';
import { VolumeWrapper as EmotionVolumeWrapper, CurrentTime as EmotionCurrentTime, TimeLine as EmotionTimeLine, CurrentTimeLine as EmotionCurrentTimeLine, Thumb as EmotionThumb, CurrentTimeLineThumb as EmotionCurrentTimeLineThumb, BufferedTime as EmotionBufferedTime, LeftControls as EmotionLeftControls, RightControls as EmotionRightControls, VolumeToggleWrapper as EmotionVolumeToggleWrapper, VolumeTimeRangeWrapper as EmotionVolumeTimeRangeWrapper, MutedIndicator as EmotionMutedIndicator } from './styled-emotion';
import { VolumeWrapper as CompiledVolumeWrapper, CurrentTime as CompiledCurrentTime, TimeLine as CompiledTimeLine, CurrentTimeLine as CompiledCurrentTimeLine, Thumb as CompiledThumb, CurrentTimeLineThumb as CompiledCurrentTimeLineThumb, BufferedTime as CompiledBufferedTime, LeftControls as CompiledLeftControls, RightControls as CompiledRightControls, VolumeToggleWrapper as CompiledVolumeToggleWrapper, VolumeTimeRangeWrapper as CompiledVolumeTimeRangeWrapper, MutedIndicator as CompiledMutedIndicator } from './styled-compiled';
import { fg } from '@atlaskit/platform-feature-flags';
export var VolumeWrapper = function VolumeWrapper(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledVolumeWrapper, props) : /*#__PURE__*/React.createElement(EmotionVolumeWrapper, props);
};
export var CurrentTime = function CurrentTime(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledCurrentTime, props) : /*#__PURE__*/React.createElement(EmotionCurrentTime, props);
};
export var TimeLine = /*#__PURE__*/forwardRef(function (props, ref) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledTimeLine, _extends({}, props, {
    ref: ref
  })) : /*#__PURE__*/React.createElement(EmotionTimeLine, _extends({}, props, {
    ref: ref
  }));
});
export var CurrentTimeLine = function CurrentTimeLine(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledCurrentTimeLine, props) : /*#__PURE__*/React.createElement(EmotionCurrentTimeLine, props);
};
export var Thumb = function Thumb(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledThumb, props) : /*#__PURE__*/React.createElement(EmotionThumb, props);
};
export var CurrentTimeLineThumb = /*#__PURE__*/forwardRef(function (props, ref) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledCurrentTimeLineThumb, _extends({}, props, {
    ref: ref
  })) : /*#__PURE__*/React.createElement(EmotionCurrentTimeLineThumb, _extends({}, props, {
    ref: ref
  }));
});
export var BufferedTime = function BufferedTime(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledBufferedTime, props) : /*#__PURE__*/React.createElement(EmotionBufferedTime, props);
};
export var LeftControls = function LeftControls(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledLeftControls, props) : /*#__PURE__*/React.createElement(EmotionLeftControls, props);
};
export var RightControls = function RightControls(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledRightControls, props) : /*#__PURE__*/React.createElement(EmotionRightControls, props);
};
export var VolumeToggleWrapper = function VolumeToggleWrapper(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledVolumeToggleWrapper, props) : /*#__PURE__*/React.createElement(EmotionVolumeToggleWrapper, props);
};
export var VolumeTimeRangeWrapper = function VolumeTimeRangeWrapper(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledVolumeTimeRangeWrapper, props) : /*#__PURE__*/React.createElement(EmotionVolumeTimeRangeWrapper, props);
};
export var MutedIndicator = function MutedIndicator(props) {
  return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledMutedIndicator, props) : /*#__PURE__*/React.createElement(EmotionMutedIndicator, props);
};