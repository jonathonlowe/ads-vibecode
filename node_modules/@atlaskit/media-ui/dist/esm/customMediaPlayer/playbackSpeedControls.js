import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
// Keep PlaybackSpeedControls to use static colors from the new color palette to support the hybrid
// theming in media viewer https://product-fabric.atlassian.net/browse/DSP-6067
import React from 'react';
import { Component } from 'react';
import { PopupSelect } from '@atlaskit/select';
import { DN900 } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import Tooltip from '@atlaskit/tooltip';
import MediaButton from '../MediaButton';
import { messages } from '../messages';
import { WidthObserver } from '@atlaskit/width-detector';
export var PlaybackSpeedControls = /*#__PURE__*/function (_Component) {
  function PlaybackSpeedControls() {
    var _this;
    _classCallCheck(this, PlaybackSpeedControls);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, PlaybackSpeedControls, [].concat(args));
    _defineProperty(_this, "state", {
      popupHeight: 255
    });
    _defineProperty(_this, "onPlaybackSpeedChange", function (option, _actionMeta) {
      var onPlaybackSpeedChange = _this.props.onPlaybackSpeedChange;
      if (!option) {
        return;
      }
      var playbackSpeed = parseFloat("".concat(option.value));
      onPlaybackSpeedChange(playbackSpeed);
    });
    _defineProperty(_this, "speedOptions", function () {
      return [{
        // @ts-ignore: FormattedMessage is returning an Element which is a type mismatch with what OptionType wants. This can be fix by using 'intl' object once this packages gets refactor later.
        label: /*#__PURE__*/React.createElement(FormattedMessage, messages.playbackSpeed),
        options: [{
          label: '0.75x',
          value: 0.75
        }, {
          label: '1x',
          value: 1
        }, {
          label: '1.25x',
          value: 1.25
        }, {
          label: '1.5x',
          value: 1.5
        }, {
          label: '2x',
          value: 2
        }]
      }];
    });
    _defineProperty(_this, "popupCustomStyles", {
      container: function container(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: '#22272b',
          boxShadow: 'inset 0px 0px 0px 1px #bcd6f00a,0px 8px 12px #0304045c,0px 0px 1px #03040480'
        });
      },
      // added these overrides to keep the look of the current design
      // however this does not benefit from the DS a11y changes
      menuList: function menuList(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          padding: '4px 0px'
        });
      },
      option: function option(styles, _ref) {
        var isFocused = _ref.isFocused,
          isSelected = _ref.isSelected;
        return _objectSpread(_objectSpread({}, styles), {}, {
          color: isSelected ? '#579dff' : DN900,
          backgroundColor: isSelected ? '#082145' : isFocused ? '#a1bdd914' : '#22272b',
          ':active': {
            backgroundColor: '#a6c5e229'
          }
        });
      },
      groupHeading: function groupHeading(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          color: '#9fadbc'
        });
      }
    });
    _defineProperty(_this, "onResize", function (width) {
      var originalDimensions = _this.props.originalDimensions;
      if (originalDimensions) {
        var aspectRatio = originalDimensions.height / originalDimensions.width;
        var controlsSize = 60;
        var minimumHeight = 100;
        var popupHeight = Math.max(aspectRatio * width - controlsSize, minimumHeight);
        _this.setState({
          popupHeight: popupHeight
        });
      }
      // This is a hacky solution. Please replace with a better one if you find one.
      // There is something inside popper.js that recalc position on scroll.
      // We enable this functionality with `eventListeners` modifier.
      // Here we simulate scroll even to trick popper.js to recalc position.
      window.dispatchEvent(new CustomEvent('scroll'));
    });
    return _this;
  }
  _inherits(PlaybackSpeedControls, _Component);
  return _createClass(PlaybackSpeedControls, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        playbackSpeed = _this$props.playbackSpeed,
        intl = _this$props.intl,
        onClick = _this$props.onClick;
      var popupHeight = this.state.popupHeight;
      var value = this.speedOptions()[0].options.find(function (option) {
        return option.value === playbackSpeed;
      });
      var popperProps = {
        strategy: 'fixed',
        modifiers: [{
          name: 'preventOverflow',
          enabled: true
        }, {
          name: 'eventListeners',
          options: {
            scroll: true,
            resize: true
          }
        }, {
          name: 'offset',
          enabled: true,
          options: {
            offset: [0, 10]
          }
        }],
        placement: 'top'
      };
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(WidthObserver, {
        setWidth: this.onResize
      }), /*#__PURE__*/React.createElement(PopupSelect, {
        minMenuWidth: 140,
        maxMenuHeight: popupHeight,
        options: this.speedOptions(),
        value: value,
        closeMenuOnScroll: true,
        onChange: this.onPlaybackSpeedChange,
        target: function target(_ref2) {
          var ref = _ref2.ref,
            isOpen = _ref2.isOpen,
            popupKeydown = _ref2.onKeyDown;
          return /*#__PURE__*/React.createElement(Tooltip, {
            content: intl.formatMessage(messages.playbackSpeed),
            position: "top"
          }, /*#__PURE__*/React.createElement(MediaButton, {
            testId: "custom-media-player-playback-speed-toggle-button",
            buttonRef: ref,
            isSelected: isOpen,
            onClick: onClick,
            onKeyDown: function onKeyDown(event) {
              popupKeydown(event);
            }
          }, playbackSpeed, "x"));
        },
        styles: this.popupCustomStyles,
        popperProps: popperProps
      }));
    }
  }]);
}(Component);
export default injectIntl(PlaybackSpeedControls);