import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { Component } from 'react';
import { CurrentTimeTooltip as EmotionCurrentTimeTooltip, TimeRangeWrapper as EmotionTimeRangeWrapper } from './styled-emotion';
import { CurrentTimeTooltip as CompiledCurrentTimeTooltip, TimeRangeWrapper as CompiledTimeRangeWrapper } from './styled-compiled';
import { formatDuration, secondsToTime } from '../formatDuration';
import { injectIntl } from 'react-intl-next';
import { messages } from '../messages';
import { fg } from '@atlaskit/platform-feature-flags';
import { BufferedTime, CurrentTimeLine, CurrentTimeLineThumb, TimeLine } from './styled';
export var TimeRangeBase = /*#__PURE__*/function (_Component) {
  function TimeRangeBase(props) {
    var _this;
    _classCallCheck(this, TimeRangeBase);
    _this = _callSuper(this, TimeRangeBase, [props]);
    _defineProperty(_this, "thumbElement", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "wrapperElement", /*#__PURE__*/React.createRef());
    _defineProperty(_this, "wrapperElementWidth", 0);
    _defineProperty(_this, "state", {
      isDragging: false,
      timeLineThumbIsHover: false,
      timeLineThumbIsFocus: false,
      dragStartClientX: 0
    });
    _defineProperty(_this, "setWrapperWidth", function () {
      if (!_this.wrapperElement.current) {
        return;
      }
      _this.wrapperElementWidth = _this.wrapperElement.current.getBoundingClientRect().width;
    });
    _defineProperty(_this, "onMouseMove", function (e) {
      var _this$state = _this.state,
        isDragging = _this$state.isDragging,
        dragStartClientX = _this$state.dragStartClientX;
      if (!isDragging) {
        return;
      }
      e.stopPropagation();
      var _this$props = _this.props,
        onChange = _this$props.onChange,
        duration = _this$props.duration,
        currentTime = _this$props.currentTime;
      var clientX = e.clientX;
      var absolutePosition = clientX - dragStartClientX;
      var isOutsideToRight = absolutePosition > _this.wrapperElementWidth;
      var isOutsideToLeft = absolutePosition < 0;

      // Next to conditions take care of situation where user moves mouse very quickly out to the side
      // left or right. It's very easy to leave thumb not at the end/beginning of a timeline.
      // This will guarantee that in this case thumb will move to appropriate extreme.
      if (isOutsideToRight) {
        absolutePosition = _this.wrapperElementWidth;
      }
      if (isOutsideToLeft) {
        absolutePosition = 0;
      }
      var newTimeWithBoundaries = absolutePosition * duration / _this.wrapperElementWidth;
      if (currentTime !== newTimeWithBoundaries) {
        // If value hasn't changed we don't want to call "change"
        onChange(newTimeWithBoundaries);
      }
    });
    _defineProperty(_this, "onMouseUp", function () {
      var onChanged = _this.props.onChanged;
      // As soon as user finished dragging, we should clean up events.
      document.removeEventListener('mouseup', _this.onMouseUp);
      document.removeEventListener('mousemove', _this.onMouseMove);
      if (onChanged) {
        onChanged();
      }
      _this.setState({
        isDragging: false
      });
    });
    _defineProperty(_this, "onThumbMouseDown", function (e) {
      e.preventDefault();

      // We need to recalculate every time, because width can change (thanks, editor ;-)
      _this.setWrapperWidth();

      // We are implementing drag and drop here. There is no reason to start listening for mouseUp or move
      // before that. Also if we start listening for mouseup before that we could pick up someone else's event
      // For example editors resizing of a inline video player.
      document.addEventListener('mouseup', _this.onMouseUp);
      document.addEventListener('mousemove', _this.onMouseMove);
      var _this$props2 = _this.props,
        duration = _this$props2.duration,
        onChange = _this$props2.onChange;
      var event = e.nativeEvent;
      var x = event.offsetX;
      var currentTime = x * duration / _this.wrapperElementWidth;
      _this.setState({
        isDragging: true,
        dragStartClientX: event.clientX - x
      });

      // As soon as user clicks timeline we want to move thumb over to that place.
      onChange(currentTime);
    });
    _defineProperty(_this, "onTimeLineThumbKeydown", function (event) {
      if (!_this.props.skipBackward || !_this.props.skipForward) {
        return;
      }
      if (event.key === 'ArrowRight') {
        event.preventDefault();
        event.stopPropagation();
        if (event.shiftKey) {
          _this.props.skipForward(10);
        } else {
          _this.props.skipForward(1);
        }
      }
      if (event.key === 'ArrowLeft') {
        event.preventDefault();
        event.stopPropagation();
        if (event.shiftKey) {
          _this.props.skipBackward(10);
        } else {
          _this.props.skipBackward(1);
        }
      }
    });
    _this.numberFormatterHours = new Intl.NumberFormat(_this.props.intl.locale, {
      style: 'unit',
      unit: 'hour'
    });
    _this.numberFormatterMinutes = new Intl.NumberFormat(_this.props.intl.locale, {
      style: 'unit',
      unit: 'minute'
    });
    _this.numberFormatterSeconds = new Intl.NumberFormat(_this.props.intl.locale, {
      style: 'unit',
      unit: 'second'
    });
    return _this;
  }
  _inherits(TimeRangeBase, _Component);
  return _createClass(TimeRangeBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('resize', this.setWrapperWidth);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.intl.locale !== prevProps.intl.locale) {
        this.numberFormatterHours = new Intl.NumberFormat(this.props.intl.locale, {
          style: 'unit',
          unit: 'hour'
        });
        this.numberFormatterMinutes = new Intl.NumberFormat(this.props.intl.locale, {
          style: 'unit',
          unit: 'minute'
        });
        this.numberFormatterSeconds = new Intl.NumberFormat(this.props.intl.locale, {
          style: 'unit',
          unit: 'second'
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('mousemove', this.onMouseMove);
      document.removeEventListener('mouseup', this.onMouseUp);
      window.removeEventListener('resize', this.setWrapperWidth);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$state2 = this.state,
        isDragging = _this$state2.isDragging,
        timeLineThumbIsHover = _this$state2.timeLineThumbIsHover,
        timeLineThumbIsFocus = _this$state2.timeLineThumbIsFocus;
      var _this$props3 = this.props,
        currentTime = _this$props3.currentTime,
        duration = _this$props3.duration,
        bufferedTime = _this$props3.bufferedTime,
        disableThumbTooltip = _this$props3.disableThumbTooltip,
        isAlwaysActive = _this$props3.isAlwaysActive,
        intl = _this$props3.intl;
      var currentPosition = currentTime * 100 / duration;
      var bufferedTimePercentage = bufferedTime * 100 / duration;
      var _secondsToTime = secondsToTime(currentTime),
        currentTimeSeconds = _secondsToTime.seconds,
        currentTimeMinutes = _secondsToTime.minutes,
        currentTimeHours = _secondsToTime.hours;
      var _secondsToTime2 = secondsToTime(duration),
        videoTotalSeconds = _secondsToTime2.seconds,
        videoTotalMinutes = _secondsToTime2.minutes,
        videoTotalHours = _secondsToTime2.hours;
      var timelineThumbText = intl.formatMessage(messages.video_seeker_assistive_text_time_value, {
        currentTimeHours: currentTimeHours ? this.numberFormatterHours.format(currentTimeHours) : '',
        currentTimeMinutes: this.numberFormatterMinutes.format(currentTimeMinutes),
        currentTimeSeconds: this.numberFormatterSeconds.format(currentTimeSeconds),
        videoTotalHours: videoTotalHours ? this.numberFormatterHours.format(videoTotalHours) : '',
        videoTotalMinutes: this.numberFormatterMinutes.format(videoTotalMinutes),
        videoTotalSeconds: this.numberFormatterSeconds.format(videoTotalSeconds)
      });
      var currentTimeTooltip = fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledCurrentTimeTooltip, {
        draggable: false,
        isDragging: isDragging,
        timeLineThumbIsHover: timeLineThumbIsHover,
        timeLineThumbIsFocus: timeLineThumbIsFocus
      }, formatDuration(currentTime)) : /*#__PURE__*/React.createElement(EmotionCurrentTimeTooltip, {
        draggable: false,
        isDragging: isDragging
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        ,
        className: "current-time-tooltip"
      }, formatDuration(currentTime));
      var timeline = /*#__PURE__*/React.createElement(TimeLine, {
        ref: this.wrapperElement
      }, /*#__PURE__*/React.createElement(BufferedTime, {
        style: {
          width: "".concat(bufferedTimePercentage, "%")
        },
        "data-testid": "buffered-time"
      }), /*#__PURE__*/React.createElement(CurrentTimeLine, {
        style: {
          width: "".concat(currentPosition, "%")
        },
        "data-testid": "current-timeline"
      }, /*#__PURE__*/React.createElement(CurrentTimeLineThumb, {
        role: "slider",
        ref: this.thumbElement,
        onKeyDown: this.onTimeLineThumbKeydown,
        tabIndex: 0,
        "aria-orientation": "horizontal",
        "aria-label": intl.formatMessage(messages.video_seeker_label_assistive_text),
        "aria-valuemin": 0,
        "aria-valuemax": Math.floor(duration),
        "aria-valuenow": Math.floor(currentTime),
        "aria-valuetext": timelineThumbText,
        onMouseOver: function onMouseOver() {
          return _this2.setState({
            timeLineThumbIsHover: true
          });
        },
        onMouseOut: function onMouseOut() {
          return _this2.setState({
            timeLineThumbIsHover: false
          });
        },
        onFocus: function onFocus() {
          return _this2.setState({
            timeLineThumbIsFocus: true
          });
        },
        onBlur: function onBlur() {
          return _this2.setState({
            timeLineThumbIsFocus: false
          });
        }
      }, disableThumbTooltip ? null : currentTimeTooltip)));
      return fg('platform_media_compiled') ? /*#__PURE__*/React.createElement(CompiledTimeRangeWrapper, {
        onMouseDown: this.onThumbMouseDown,
        "data-testid": "time-range-wrapper"
      }, timeline) : /*#__PURE__*/React.createElement(EmotionTimeRangeWrapper, {
        showAsActive: isAlwaysActive,
        onMouseDown: this.onThumbMouseDown,
        "data-testid": "time-range-wrapper"
      }, timeline);
    }
  }]);
}(Component);
_defineProperty(TimeRangeBase, "defaultProps", {
  disableThumbTooltip: false,
  isAlwaysActive: false
});
export var TimeRange = injectIntl(TimeRangeBase);