"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MediaButton;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireDefault(require("react"));
var _customThemeButton = _interopRequireDefault(require("@atlaskit/button/custom-theme-button"));
var _excluded = ["appearance", "buttonRef"],
  _excluded2 = ["buttonStyles"];
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
// Keep Media buttons to use static colors from the new color palette to support the hybrid
// theming in media viewer https://product-fabric.atlassian.net/browse/DSP-6067
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var buttonTheme = {
  default: {
    background: {
      default: {
        light: 'transparent'
      },
      hover: {
        light: '#a1bdd914'
      },
      active: {
        light: '#a6c5e229'
      }
    },
    boxShadowColor: {
      focus: {
        light: '#85b8ff'
      }
    },
    color: {
      default: {
        light: '#c7d1db'
      },
      hover: {
        light: '#c7d1db'
      },
      active: {
        light: '#c7d1db'
      },
      disabled: {
        light: '#bfdbf847'
      },
      focus: {
        light: '#c7d1db'
      }
    }
  },
  primary: {
    background: {
      default: {
        light: '#579dff'
      },
      hover: {
        light: '#85b8ff'
      },
      active: {
        light: '#cce0ff'
      },
      disabled: {
        light: '#bcd6f00a'
      }
    },
    boxShadowColor: {
      focus: {
        light: '#85b8ff'
      }
    },
    color: {
      default: {
        light: '#161a1d'
      }
    }
  },
  selected: {
    color: {
      default: {
        light: 'red'
      }
    }
  }
};
function extract(newTheme, _ref) {
  var appearance = _ref.appearance,
    state = _ref.state,
    mode = _ref.mode;
  // @ts-ignore
  if (!newTheme[appearance]) {
    return;
  }
  // @ts-ignore
  var root = newTheme[appearance];
  return Object.keys(root).reduce(function (acc, val) {
    var node = root;
    [val, state, mode].forEach(function (item) {
      if (!node[item]) {
        return;
      }
      if ((0, _typeof2.default)(node[item]) !== 'object') {
        acc[val] = node[item];
        return;
      }
      node = node[item];
      return;
    });
    return acc;
  }, {});
}
function MediaButton(_ref2) {
  var _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,
    buttonRef = _ref2.buttonRef,
    rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  return /*#__PURE__*/_react.default.createElement(_customThemeButton.default, (0, _extends2.default)({}, rest, {
    ref: buttonRef
    // Giving button the 'default' appearance so it can calculate the base styles
    ,
    appearance: appearance,
    theme: function theme(currentTheme, themeProps) {
      var _currentTheme = currentTheme(themeProps),
        buttonStyles = _currentTheme.buttonStyles,
        rest = (0, _objectWithoutProperties2.default)(_currentTheme, _excluded2);
      return _objectSpread({
        buttonStyles: _objectSpread(_objectSpread({}, buttonStyles), extract(buttonTheme, _objectSpread(_objectSpread({}, themeProps), {}, {
          appearance: appearance
        })))
      }, rest);
    }
  }));
}