"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaTypeIcon = exports.IconWrapper = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _ = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/image/24"));
var _2 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/audio/24"));
var _3 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/video/24"));
var _4 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/document/24"));
var _5 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/archive/24"));
var _6 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/generic/24"));
var _7 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/image/16"));
var _8 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/audio/16"));
var _9 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/video/16"));
var _10 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/document/16"));
var _11 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/archive/16"));
var _12 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/generic/16"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var IconWrapper = exports.IconWrapper = _styled.default.span({
  display: 'inline-flex'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
function (_ref) {
  var size = _ref.size;
  return size === 'large' ? "padding: 4px;" : '';
});
IconWrapper.displayName = 'IconWrapper';
var largeIcons = {
  image: _.default,
  audio: _2.default,
  video: _3.default,
  doc: _4.default,
  archive: _5.default,
  unknown: _6.default
};
var smallIcons = {
  image: _7.default,
  audio: _8.default,
  video: _9.default,
  doc: _10.default,
  archive: _11.default,
  unknown: _12.default
};
var defaultType = 'unknown';
var MediaTypeIcon = exports.MediaTypeIcon = /*#__PURE__*/function (_React$Component) {
  function MediaTypeIcon() {
    (0, _classCallCheck2.default)(this, MediaTypeIcon);
    return _callSuper(this, MediaTypeIcon, arguments);
  }
  (0, _inherits2.default)(MediaTypeIcon, _React$Component);
  return (0, _createClass2.default)(MediaTypeIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        type = _this$props.type,
        size = _this$props.size,
        testId = _this$props.testId;
      var typeWithDefault = type || defaultType;
      var icons = size === 'large' ? largeIcons : smallIcons;
      var Icon = icons[typeWithDefault] || icons[defaultType];
      return /*#__PURE__*/_react.default.createElement(IconWrapper, {
        "data-testid": testId,
        "data-type": type,
        size: size
      }, /*#__PURE__*/_react.default.createElement(Icon, {
        label: "media-type"
      }));
    }
  }]);
}(_react.default.Component);
(0, _defineProperty2.default)(MediaTypeIcon, "defaultProps", {
  type: defaultType,
  testId: 'file-type-icon',
  size: 'large'
});