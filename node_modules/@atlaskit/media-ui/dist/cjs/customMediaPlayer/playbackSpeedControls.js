"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlaybackSpeedControls = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _select = require("@atlaskit/select");
var _colors = require("@atlaskit/theme/colors");
var _reactIntlNext = require("react-intl-next");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _MediaButton = _interopRequireDefault(require("../MediaButton"));
var _messages = require("../messages");
var _widthDetector = require("@atlaskit/width-detector");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /* eslint-disable @atlaskit/design-system/ensure-design-token-usage */ // Keep PlaybackSpeedControls to use static colors from the new color palette to support the hybrid
// theming in media viewer https://product-fabric.atlassian.net/browse/DSP-6067
var PlaybackSpeedControls = exports.PlaybackSpeedControls = /*#__PURE__*/function (_Component) {
  function PlaybackSpeedControls() {
    var _this;
    (0, _classCallCheck2.default)(this, PlaybackSpeedControls);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, PlaybackSpeedControls, [].concat(args));
    (0, _defineProperty2.default)(_this, "state", {
      popupHeight: 255
    });
    (0, _defineProperty2.default)(_this, "onPlaybackSpeedChange", function (option, _actionMeta) {
      var onPlaybackSpeedChange = _this.props.onPlaybackSpeedChange;
      if (!option) {
        return;
      }
      var playbackSpeed = parseFloat("".concat(option.value));
      onPlaybackSpeedChange(playbackSpeed);
    });
    (0, _defineProperty2.default)(_this, "speedOptions", function () {
      return [{
        // @ts-ignore: FormattedMessage is returning an Element which is a type mismatch with what OptionType wants. This can be fix by using 'intl' object once this packages gets refactor later.
        label: /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, _messages.messages.playbackSpeed),
        options: [{
          label: '0.75x',
          value: 0.75
        }, {
          label: '1x',
          value: 1
        }, {
          label: '1.25x',
          value: 1.25
        }, {
          label: '1.5x',
          value: 1.5
        }, {
          label: '2x',
          value: 2
        }]
      }];
    });
    (0, _defineProperty2.default)(_this, "popupCustomStyles", {
      container: function container(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: '#22272b',
          boxShadow: 'inset 0px 0px 0px 1px #bcd6f00a,0px 8px 12px #0304045c,0px 0px 1px #03040480'
        });
      },
      // added these overrides to keep the look of the current design
      // however this does not benefit from the DS a11y changes
      menuList: function menuList(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          padding: '4px 0px'
        });
      },
      option: function option(styles, _ref) {
        var isFocused = _ref.isFocused,
          isSelected = _ref.isSelected;
        return _objectSpread(_objectSpread({}, styles), {}, {
          color: isSelected ? '#579dff' : _colors.DN900,
          backgroundColor: isSelected ? '#082145' : isFocused ? '#a1bdd914' : '#22272b',
          ':active': {
            backgroundColor: '#a6c5e229'
          }
        });
      },
      groupHeading: function groupHeading(styles) {
        return _objectSpread(_objectSpread({}, styles), {}, {
          color: '#9fadbc'
        });
      }
    });
    (0, _defineProperty2.default)(_this, "onResize", function (width) {
      var originalDimensions = _this.props.originalDimensions;
      if (originalDimensions) {
        var aspectRatio = originalDimensions.height / originalDimensions.width;
        var controlsSize = 60;
        var minimumHeight = 100;
        var popupHeight = Math.max(aspectRatio * width - controlsSize, minimumHeight);
        _this.setState({
          popupHeight: popupHeight
        });
      }
      // This is a hacky solution. Please replace with a better one if you find one.
      // There is something inside popper.js that recalc position on scroll.
      // We enable this functionality with `eventListeners` modifier.
      // Here we simulate scroll even to trick popper.js to recalc position.
      window.dispatchEvent(new CustomEvent('scroll'));
    });
    return _this;
  }
  (0, _inherits2.default)(PlaybackSpeedControls, _Component);
  return (0, _createClass2.default)(PlaybackSpeedControls, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        playbackSpeed = _this$props.playbackSpeed,
        intl = _this$props.intl,
        onClick = _this$props.onClick;
      var popupHeight = this.state.popupHeight;
      var value = this.speedOptions()[0].options.find(function (option) {
        return option.value === playbackSpeed;
      });
      var popperProps = {
        strategy: 'fixed',
        modifiers: [{
          name: 'preventOverflow',
          enabled: true
        }, {
          name: 'eventListeners',
          options: {
            scroll: true,
            resize: true
          }
        }, {
          name: 'offset',
          enabled: true,
          options: {
            offset: [0, 10]
          }
        }],
        placement: 'top'
      };
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_widthDetector.WidthObserver, {
        setWidth: this.onResize
      }), /*#__PURE__*/_react.default.createElement(_select.PopupSelect, {
        minMenuWidth: 140,
        maxMenuHeight: popupHeight,
        options: this.speedOptions(),
        value: value,
        closeMenuOnScroll: true,
        onChange: this.onPlaybackSpeedChange,
        target: function target(_ref2) {
          var ref = _ref2.ref,
            isOpen = _ref2.isOpen,
            popupKeydown = _ref2.onKeyDown;
          return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
            content: intl.formatMessage(_messages.messages.playbackSpeed),
            position: "top"
          }, /*#__PURE__*/_react.default.createElement(_MediaButton.default, {
            testId: "custom-media-player-playback-speed-toggle-button",
            buttonRef: ref,
            isSelected: isOpen,
            onClick: onClick,
            onKeyDown: function onKeyDown(event) {
              popupKeydown(event);
            }
          }, playbackSpeed, "x"));
        },
        styles: this.popupCustomStyles,
        popperProps: popperProps
      }));
    }
  }]);
}(_react.Component);
var _default = exports.default = (0, _reactIntlNext.injectIntl)(PlaybackSpeedControls);