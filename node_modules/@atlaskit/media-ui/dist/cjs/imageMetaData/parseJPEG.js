"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readJPEGExifMetaData = readJPEGExifMetaData;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _types = require("./types");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var XResolution = _types.SupportedImageMetaTag.XResolution,
  YResolution = _types.SupportedImageMetaTag.YResolution;
var loadImage;
function readJPEGExifMetaData(file) {
  return new Promise( /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, reject) {
      var module;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (loadImage) {
              _context.next = 5;
              break;
            }
            _context.next = 3;
            return Promise.resolve().then(function () {
              return _interopRequireWildcard(require('blueimp-load-image'));
            });
          case 3:
            module = _context.sent;
            loadImage = module.default || module;
          case 5:
            loadImage.parseMetaData(file, function (data) {
              try {
                var tags = data && data.exif ? data.exif.getAll() : {};
                Object.keys(tags).forEach(function (key) {
                  var value = tags[key];
                  if ((0, _typeof2.default)(value) === 'object' && (key === XResolution || key === YResolution) && 'numerator' in value) {
                    // some test images had this structure, so just take the numerator value to simplify returned value
                    tags[key] = value.numerator;
                  }
                  if (typeof tags[key] === 'number') {
                    // in case numbers types were auto-converted, keep everything the same between jpeg & png we keep as strings
                    tags[key] = "".concat(tags[key]);
                  }
                });
                resolve(tags);
              } catch (e) {
                reject(e);
              }
            });
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
}