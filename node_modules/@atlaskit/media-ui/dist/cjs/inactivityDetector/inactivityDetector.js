"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InactivityDetector = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _classNames = require("../classNames");
var _util = require("../util");
var _styled = require("./styled");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var mouseMovementDelay = 2000;

/**
 * Hides all the child elements with `hideControlsClassName` classname when user is inactive,
 * which means they haven't moved mouse over the component for `mouseMovementDelay` ms.
 * Exception is if user holding mouse over one of the hideable elements (those that have specified classname).
 *
 */
var InactivityDetector = exports.InactivityDetector = /*#__PURE__*/function (_Component) {
  function InactivityDetector() {
    var _this;
    (0, _classCallCheck2.default)(this, InactivityDetector);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, InactivityDetector, [].concat(args));
    (0, _defineProperty2.default)(_this, "contentWrapperElement", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(_this, "state", {
      controlsAreVisible: true
    });
    (0, _defineProperty2.default)(_this, "clearTimeout", function () {
      if (_this.checkActivityTimeout) {
        window.clearTimeout(_this.checkActivityTimeout);
      }
    });
    (0, _defineProperty2.default)(_this, "hideControls", function (element) {
      return function () {
        if (element) {
          var isOverHideableElement = (0, _util.findParentByClassname)(element, _classNames.hideControlsClassName, _this.contentWrapperElement.current || undefined);
          if (!isOverHideableElement) {
            _this.setState({
              controlsAreVisible: false
            });
          }
        } else {
          _this.setState({
            controlsAreVisible: false
          });
        }
      };
    });
    (0, _defineProperty2.default)(_this, "checkMouseMovement", function (e) {
      var controlsAreVisible = _this.state.controlsAreVisible;
      _this.clearTimeout();
      // This check is needed to not trigger a render call on every movement.
      // Even if nothing will be re-renderer since the value is the same, it
      // will go into any children render method for nothing.
      if (!controlsAreVisible) {
        _this.setState({
          controlsAreVisible: true
        });
      }
      _this.checkActivityTimeout = window.setTimeout(_this.hideControls(e && e.target), mouseMovementDelay);
    });
    return _this;
  }
  (0, _inherits2.default)(InactivityDetector, _Component);
  return (0, _createClass2.default)(InactivityDetector, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkMouseMovement();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearTimeout();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var controlsAreVisible = this.state.controlsAreVisible;
      var children = this.props.children;
      return /*#__PURE__*/_react.default.createElement(_styled.InactivityDetectorWrapper, {
        ref: this.contentWrapperElement,
        controlsAreVisible: controlsAreVisible,
        onMouseMove: this.checkMouseMovement,
        onMouseOut: function onMouseOut() {
          return (
            // Do not pass element, hence forcing elements to be hidden.
            _this2.checkMouseMovement()
          );
        },
        onClick: this.checkMouseMovement,
        "data-testid": "inactivity-detector-wrapper"
      }, children(this.checkMouseMovement));
    }
  }]);
}(_react.Component);