"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unmockFileReader = exports.mockFileReaderWithError = exports.mockFileReaderError = exports.mockFileReader = void 0;
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MockFileReader = /*#__PURE__*/(0, _createClass2.default)(function MockFileReader() {
  var _this = this;
  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mockResult';
  (0, _classCallCheck2.default)(this, MockFileReader);
  (0, _defineProperty2.default)(this, "loadEvent", function () {});
  (0, _defineProperty2.default)(this, "errorEvent", function (_) {});
  (0, _defineProperty2.default)(this, "addEventListener", jest.fn().mockImplementation(function (eventName, fn) {
    if (eventName === 'load') {
      _this.loadEvent = fn;
    } else if (eventName === 'error') {
      _this.errorEvent = fn;
    }
  }));
  (0, _defineProperty2.default)(this, "readAsDataURL", jest.fn().mockImplementation(function () {
    _this.loadEvent();
  }));
  (0, _defineProperty2.default)(this, "readAsArrayBuffer", jest.fn().mockImplementation(function () {
    _this.loadEvent();
  }));
  this.result = result;
});
var mockFileReaderError = exports.mockFileReaderError = {
  message: 'error'
};
var MockFileReaderWithError = /*#__PURE__*/function (_MockFileReader2) {
  function MockFileReaderWithError() {
    var _this2;
    (0, _classCallCheck2.default)(this, MockFileReaderWithError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _callSuper(this, MockFileReaderWithError, [].concat(args));
    (0, _defineProperty2.default)(_this2, "readAsDataURL", jest.fn().mockImplementation(function () {
      _this2.errorEvent(mockFileReaderError);
    }));
    return _this2;
  }
  (0, _inherits2.default)(MockFileReaderWithError, _MockFileReader2);
  return (0, _createClass2.default)(MockFileReaderWithError);
}(MockFileReader);
var GlobalFileReader = global.FileReader;
var FileReader;
if (global.FileReader && typeof jest !== 'undefined') {
  FileReader = jest.spyOn(global, 'FileReader').mockImplementation(function () {
    return new GlobalFileReader();
  });
}
var mockFileReader = exports.mockFileReader = function mockFileReader(result) {
  var fileReader = new MockFileReader(result);
  FileReader.mockImplementation(function () {
    return fileReader;
  });
  return fileReader;
};
var mockFileReaderWithError = exports.mockFileReaderWithError = function mockFileReaderWithError() {
  var fileReader = new MockFileReaderWithError();
  FileReader.mockImplementation(function () {
    return fileReader;
  });
  return fileReader;
};
var unmockFileReader = exports.unmockFileReader = function unmockFileReader() {
  return FileReader.mockImplementation(function () {
    return new GlobalFileReader();
  });
};