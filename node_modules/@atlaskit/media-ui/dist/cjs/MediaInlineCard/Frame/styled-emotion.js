"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wrapper = void 0;
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _colors = require("@atlaskit/theme/colors");
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var selected = "\n  cursor: pointer;\n  box-shadow: 0 0 0 1px ".concat("var(--ds-border-selected, ".concat(_colors.B300, ")"), ";\n  outline: none;\n  user-select: none;\n  border-color: transparent;\n  &, :hover, :focus, :active {\n    text-decoration: none;\n  }\n");
var isSelected = function isSelected(_ref) {
  var isSelected = _ref.isSelected;
  if (isSelected) {
    return selected;
  } else {
    return 'user-select: text';
  }
};

/*
  Media Inline cards should have the following layout:
  -----------------
  | icon | title |
  -----------------
  The aim is to ensure (1) all children are
  in line with each other, (2) are vertically
  centered.
*/
// NB: `padding` consistent with @mentions.
// NB: `display: inline` required for `box-decoration-break` to work.
// NB: `box-decoration-break` required for retaining properties (border-radius) on wrap.
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var Wrapper = exports.Wrapper = _styled.default.span({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '16px',
  padding: "var(--ds-space-025, 2px)".concat(" ", "var(--ds-space-050, 4px)", " ", "var(--ds-space-025, 2px)", " ", "var(--ds-space-050, 4px)"),
  boxDecorationBreak: 'clone',
  display: 'inline',
  borderRadius: "var(--ds-border-radius, 3px)",
  color: "var(--ds-text, ".concat(_colors.N900, ")"),
  backgroundColor: "var(--ds-background-neutral, ".concat(_colors.N30A, ")")
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
function (props) {
  return isSelected(props);
}, {
  transition: '0.1s all ease-in-out',
  MozUserSelect: 'none',
  cursor: 'pointer',
  '&:hover': {
    backgroundColor: "var(--ds-background-neutral-hovered, ".concat(_colors.N40A, ")")
  }
});