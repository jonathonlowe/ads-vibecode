"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Ellipsify = void 0;
var _react = _interopRequireWildcard(require("react"));
var _styled = _interopRequireDefault(require("@emotion/styled"));
var exenv = _interopRequireWildcard(require("exenv"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-dynamic-styles -- Ignored via go/DSP-18766
var Wrapper = _styled.default.div(function (_ref) {
  var inline = _ref.inline;
  return {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    display: inline ? 'inline' : undefined
  };
});
Wrapper.displayName = 'Ellipsify';
var Ellipsify = exports.Ellipsify = function Ellipsify(_ref2) {
  var text = _ref2.text,
    lines = _ref2.lines,
    endLength = _ref2.endLength,
    inline = _ref2.inline,
    testId = _ref2.testId;
  var element = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (!element.current) {
      return;
    }
    setEllipsis(element.current, {
      lines: lines,
      endLength: endLength
    });
  }, [element, lines, endLength]);
  return /*#__PURE__*/_react.default.createElement(Wrapper
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: "ellipsed-text",
    ref: element,
    "aria-label": text,
    inline: inline,
    "data-testid": testId
  }, text);
};
var setEllipsis = function setEllipsis(element, props) {
  var maximumLines = props.lines;
  var height = element.getBoundingClientRect().height;
  var text = element.textContent;
  element.textContent = 'a';
  var lineHeight = element.getBoundingClientRect().height;
  var lineCount = height / lineHeight;
  var maximumHeight = lineHeight * maximumLines;
  if (lineCount <= maximumLines) {
    element.textContent = text;
    return;
  }
  var textContent = text;
  var endLength = typeof props.endLength === 'number' && props.endLength >= 0 ? props.endLength : 8;
  var beginningText = text.substr(0, text.length * maximumLines / lineCount - endLength);
  var endText = text.substr(text.length - endLength, endLength);
  element.textContent = textContent = "".concat(beginningText, "...").concat(endText);
  var finalHeight = element.getBoundingClientRect().height;
  if (finalHeight > maximumHeight) {
    var adjustedBeginningText = beginningText.substr(0, beginningText.length - beginningText.length / maximumLines * 0.25);
    textContent = "".concat(adjustedBeginningText, "...").concat(endText);
  }
  delayRun(function () {
    return element.textContent = textContent;
  });
};
var timeout = function timeout(fn) {
  return setTimeout(fn, 1);
};
var delayRun = exenv.canUseDOM && window.requestAnimationFrame ? window.requestAnimationFrame : timeout;
var _default = exports.default = Ellipsify;