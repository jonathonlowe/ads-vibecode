/* mime-type-icon.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MimeTypeIcon = void 0;
require("./mime-type-icon.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _util = require("./util");
var _mediaTypeIcon = require("./media-type-icon");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var iconWrapperStyleMap = {
  small: "",
  large: "_ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66"
};
var iconWrapperStyles = null;

/*
 * Renders an icon. First, check if the mimeType corresponds to any of the special mimeType icons (.gif, .sketch, .exe, ect). If so, render that icon.
 * Else, render an icon corresponding to its mediaType (doc/audio/image/video/unknown)
 */
var MimeTypeIcon = exports.MimeTypeIcon = function MimeTypeIcon(_ref) {
  var _ref$mediaType = _ref.mediaType,
    mediaType = _ref$mediaType === void 0 ? 'unknown' : _ref$mediaType,
    _ref$mimeType = _ref.mimeType,
    mimeType = _ref$mimeType === void 0 ? 'unknown' : _ref$mimeType,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? 'unknown' : _ref$name,
    testId = _ref.testId,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'large' : _ref$size;
  // retrieve mimetype icon and label
  var iconInfo = (0, _util.getMimeIcon)(mimeType, name);

  // a corresponding mimetype icon and label was found.
  if (iconInfo) {
    var Icon = iconInfo.icon;
    return (0, _platformFeatureFlags.fg)('platform_media_compiled') ? /*#__PURE__*/React.createElement("div", {
      "data-testid": testId,
      "data-type": iconInfo.label,
      className: (0, _runtime.ax)(["_1e0c116y", iconWrapperStyleMap[size !== null && size !== void 0 ? size : 'small']])
    }, /*#__PURE__*/React.createElement(Icon, {
      label: iconInfo.label
    })) : /*#__PURE__*/React.createElement(_mediaTypeIcon.IconWrapper, {
      "data-testid": testId,
      "data-type": iconInfo.label,
      size: size
    }, /*#__PURE__*/React.createElement(Icon, {
      label: iconInfo.label
    }));
  }

  // no corresponding mimetype icon/label was found.
  // Hence, return a mediatype (image/doc/audio/video/unknown) icon
  return /*#__PURE__*/React.createElement(_mediaTypeIcon.MediaTypeIcon, {
    testId: testId,
    type: mediaType,
    size: size
  });
};