"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vector2 = exports.Rectangle = exports.Camera = exports.Bounds = void 0;
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var Vector2 = exports.Vector2 = /*#__PURE__*/function () {
  function Vector2(x, y) {
    (0, _classCallCheck2.default)(this, Vector2);
    this.x = x;
    this.y = y;
  }
  return (0, _createClass2.default)(Vector2, [{
    key: "add",
    value: function add(_ref) {
      var thatX = _ref.x,
        thatY = _ref.y;
      var thisX = this.x,
        thisY = this.y;
      return new Vector2(thisX + thatX, thisY + thatY);
    }
  }, {
    key: "sub",
    value: function sub(_ref2) {
      var thatX = _ref2.x,
        thatY = _ref2.y;
      var thisX = this.x,
        thisY = this.y;
      return new Vector2(thisX - thatX, thisY - thatY);
    }
  }, {
    key: "scaled",
    value: function scaled(scalar) {
      var x = this.x,
        y = this.y;
      return new Vector2(x * scalar, y * scalar);
    }
  }, {
    key: "map",
    value: function map(fn) {
      return new Vector2(fn(this.x), fn(this.y));
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Vector2(this.x, this.y);
    }
  }, {
    key: "rounded",
    value: function rounded() {
      return new Vector2(Math.round(this.x), Math.round(this.y));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "[".concat(this.x, ", ").concat(this.y, "]");
    }
  }]);
}();
var Rectangle = exports.Rectangle = /*#__PURE__*/function () {
  function Rectangle(width, height) {
    (0, _classCallCheck2.default)(this, Rectangle);
    this.width = width;
    this.height = height;
  }
  return (0, _createClass2.default)(Rectangle, [{
    key: "aspectRatio",
    get: function get() {
      return this.width / this.height;
    }
  }, {
    key: "center",
    get: function get() {
      return new Vector2(this.width / 2, this.height / 2);
    }
  }, {
    key: "scaled",
    value: function scaled(scale) {
      return new Rectangle(this.width * scale, this.height * scale);
    }
  }, {
    key: "resized",
    value: function resized(width, height) {
      return new Rectangle(width, height);
    }
  }, {
    key: "flipped",
    value: function flipped() {
      return new Rectangle(this.height, this.width);
    }

    // Computes the scaling factor that needs to be applied to this
    // Rectangle so that it
    // - is fully visible inside of the containing Rectangle
    // - is the LARGEST possible size
    // - maintains the original aspect ratio (no distortion)
  }, {
    key: "scaleToFit",
    value: function scaleToFit(containing) {
      var widthRatio = containing.width / this.width;
      var heightRatio = containing.height / this.height;
      if (widthRatio <= heightRatio) {
        return widthRatio;
      } else {
        return heightRatio;
      }
    }
  }, {
    key: "scaleToFitLargestSide",
    value: function scaleToFitLargestSide(containing) {
      return this.scaleToFit(containing);
    }

    // Computes the scaling factor that needs to be applied to this
    // Rectangle so that it
    // - is fully visible inside of the containing Rectangle
    // - is the SMALLEST possible size
    // - maintains the original aspect ratio (no distortion)
  }, {
    key: "scaleToFitSmallestSide",
    value: function scaleToFitSmallestSide(containing) {
      var widthRatio = containing.width / this.width;
      var heightRatio = containing.height / this.height;
      if (widthRatio >= heightRatio) {
        return widthRatio;
      } else {
        return heightRatio;
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Rectangle(this.width, this.height);
    }
  }]);
}();
var Bounds = exports.Bounds = /*#__PURE__*/function (_Rectangle) {
  function Bounds(x, y, width, height) {
    var _this;
    (0, _classCallCheck2.default)(this, Bounds);
    _this = _callSuper(this, Bounds, [width, height]);
    _this.x = x;
    _this.y = y;
    _this.width = width;
    _this.height = height;
    return _this;
  }
  (0, _inherits2.default)(Bounds, _Rectangle);
  return (0, _createClass2.default)(Bounds, [{
    key: "origin",
    get: function get() {
      return new Vector2(this.x, this.y);
    }
  }, {
    key: "corner",
    get: function get() {
      return new Vector2(this.x + this.width, this.y + this.height);
    }
  }, {
    key: "center",
    get: function get() {
      return new Vector2(this.x + this.width * 0.5, this.y + this.height * 0.5);
    }
  }, {
    key: "rect",
    get: function get() {
      return new Rectangle(this.width, this.height);
    }
  }, {
    key: "left",
    get: function get() {
      return this.x;
    }
  }, {
    key: "top",
    get: function get() {
      return this.y;
    }
  }, {
    key: "right",
    get: function get() {
      return this.x + this.width;
    }
  }, {
    key: "bottom",
    get: function get() {
      return this.y + this.height;
    }
  }, {
    key: "flipped",
    value: function flipped() {
      var rect = this.rect.flipped();
      return new Bounds(this.x, this.y, rect.width, rect.height);
    }
  }, {
    key: "scaled",
    value: function scaled(scale) {
      return new Bounds(this.x * scale, this.y * scale, this.width * scale, this.height * scale);
    }
  }, {
    key: "relativeTo",
    value: function relativeTo(bounds) {
      return new Bounds(this.x - bounds.x, this.y - bounds.y, this.width, this.height);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Bounds(this.x, this.y, this.width, this.height);
    }
  }, {
    key: "map",
    value: function map(fn) {
      return new Bounds(fn(this.x), fn(this.y), fn(this.width), fn(this.height));
    }
  }, {
    key: "hFlipWithin",
    value: function hFlipWithin(containerBounds) {
      var hGap = containerBounds.right - this.right;
      return new Bounds(containerBounds.left + hGap, this.top, this.width, this.height);
    }
  }, {
    key: "vFlipWithin",
    value: function vFlipWithin(containerBounds) {
      var vGap = this.top - containerBounds.top;
      return new Bounds(this.left, containerBounds.bottom - vGap - this.height, this.width, this.height);
    }
  }, {
    key: "rotate90DegWithin",
    value: function rotate90DegWithin(containerBounds) {
      var hGap = containerBounds.right - this.right;
      var vGap = this.top - containerBounds.top;
      return new Bounds(containerBounds.left + vGap, containerBounds.top + hGap, this.height, this.width);
    }
  }, {
    key: "translated",
    value: function translated(xDelta, yDelta) {
      return new Bounds(this.x + xDelta, this.y + yDelta, this.width, this.height);
    }
  }, {
    key: "equals",
    value: function equals(bounds) {
      return this.x === bounds.x && this.y === bounds.y && this.width === bounds.width && this.height === bounds.height;
    }
  }]);
}(Rectangle);
var Camera = exports.Camera = /*#__PURE__*/function () {
  function Camera(viewport, originalImg) {
    (0, _classCallCheck2.default)(this, Camera);
    this.viewport = viewport;
    this.originalImg = originalImg;
  }
  return (0, _createClass2.default)(Camera, [{
    key: "resizedViewport",
    value: function resizedViewport(newViewport) {
      return new Camera(newViewport, this.originalImg);
    }
  }, {
    key: "scaleToFit",
    get: function get() {
      return this.originalImg.scaleToFitLargestSide(this.viewport);
    }

    // If the image is smaller than or equal to the viewport, it won't be scaled.
    // If the image is larger than the viewport, it will be scaled down to fit.
  }, {
    key: "scaleDownToFit",
    get: function get() {
      return Math.min(1, this.scaleToFit);
    }
  }, {
    key: "fittedImg",
    get: function get() {
      return this.originalImg.scaled(this.scaleDownToFit);
    }
  }, {
    key: "scaledImg",
    value: function scaledImg(newScale) {
      return this.originalImg.scaled(newScale);
    }
  }, {
    key: "scaledOffset",
    value: function scaledOffset(prevOffset, prevScale, newScale) {
      var viewport = this.viewport;
      return prevOffset.add(viewport.center).scaled(newScale / prevScale).sub(viewport.center);
    }
  }]);
}();