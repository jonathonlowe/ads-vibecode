import React from 'react';
import { Component } from 'react';
import { type WrappedComponentProps } from 'react-intl-next';
export interface TimeRangeProps {
    currentTime: number;
    bufferedTime: number;
    duration: number;
    onChange: (newTime: number) => void;
    disableThumbTooltip: boolean;
    isAlwaysActive: boolean;
    onChanged?: () => void;
    skipBackward?: (skipAmount: number) => void;
    skipForward?: (skipAmount: number) => void;
}
export interface TimeRangeState {
    isDragging: boolean;
    timeLineThumbIsHover: boolean;
    timeLineThumbIsFocus: boolean;
    dragStartClientX: number;
}
export declare class TimeRangeBase extends Component<TimeRangeProps & WrappedComponentProps<'intl'>, TimeRangeState> {
    thumbElement: React.RefObject<HTMLDivElement>;
    wrapperElement: React.RefObject<HTMLDivElement>;
    wrapperElementWidth: number;
    state: TimeRangeState;
    static defaultProps: Partial<TimeRangeProps>;
    private numberFormatterHours;
    private numberFormatterMinutes;
    private numberFormatterSeconds;
    constructor(props: TimeRangeProps & WrappedComponentProps<'intl'>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: TimeRangeProps & WrappedComponentProps): void;
    componentWillUnmount(): void;
    private setWrapperWidth;
    onMouseMove: (e: MouseEvent) => void;
    onMouseUp: () => void;
    onThumbMouseDown: (e: React.SyntheticEvent<HTMLDivElement>) => void;
    onTimeLineThumbKeydown: (event: React.KeyboardEvent<HTMLDivElement>) => void;
    render(): React.JSX.Element;
}
export declare const TimeRange: React.FC<import("react-intl-next").WithIntlProps<TimeRangeProps & WrappedComponentProps<"intl">>> & {
    WrappedComponent: React.ComponentType<TimeRangeProps & WrappedComponentProps<"intl">>;
};
