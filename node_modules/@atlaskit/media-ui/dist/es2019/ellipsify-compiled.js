/* ellipsify-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./ellipsify-compiled.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useRef, useEffect } from 'react';
import * as exenv from 'exenv';
const styleMap = {
  inline: "_1e0c1nu9",
  notInline: ""
};
export const Ellipsify = ({
  text,
  lines,
  endLength,
  inline,
  testId
}) => {
  const element = useRef(null);
  useEffect(() => {
    if (!element.current) {
      return;
    }
    setEllipsis(element.current, {
      lines,
      endLength
    });
  }, [element, lines, endLength]);
  return /*#__PURE__*/React.createElement("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax([styleMap[inline ? 'inline' : 'notInline'], "ellipsed-text"]),
    ref: element,
    "aria-label": text,
    "data-testid": testId
  }, text);
};
const setEllipsis = (element, props) => {
  const maximumLines = props.lines;
  const height = element.getBoundingClientRect().height;
  const text = element.textContent;
  element.textContent = 'a';
  const lineHeight = element.getBoundingClientRect().height;
  const lineCount = height / lineHeight;
  const maximumHeight = lineHeight * maximumLines;
  if (lineCount <= maximumLines) {
    element.textContent = text;
    return;
  }
  let textContent = text;
  const endLength = typeof props.endLength === 'number' && props.endLength >= 0 ? props.endLength : 8;
  const beginningText = text.substr(0, text.length * maximumLines / lineCount - endLength);
  const endText = text.substr(text.length - endLength, endLength);
  element.textContent = textContent = `${beginningText}...${endText}`;
  const finalHeight = element.getBoundingClientRect().height;
  if (finalHeight > maximumHeight) {
    const adjustedBeginningText = beginningText.substr(0, beginningText.length - beginningText.length / maximumLines * 0.25);
    textContent = `${adjustedBeginningText}...${endText}`;
  }
  delayRun(() => element.textContent = textContent);
};
const timeout = fn => setTimeout(fn, 1);
const delayRun = exenv.canUseDOM && window.requestAnimationFrame ? window.requestAnimationFrame : timeout;
export default Ellipsify;