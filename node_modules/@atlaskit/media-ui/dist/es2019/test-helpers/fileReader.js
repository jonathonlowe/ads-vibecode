import _defineProperty from "@babel/runtime/helpers/defineProperty";
class MockFileReader {
  constructor(result = 'mockResult') {
    _defineProperty(this, "loadEvent", () => {});
    _defineProperty(this, "errorEvent", _ => {});
    _defineProperty(this, "addEventListener", jest.fn().mockImplementation((eventName, fn) => {
      if (eventName === 'load') {
        this.loadEvent = fn;
      } else if (eventName === 'error') {
        this.errorEvent = fn;
      }
    }));
    _defineProperty(this, "readAsDataURL", jest.fn().mockImplementation(() => {
      this.loadEvent();
    }));
    _defineProperty(this, "readAsArrayBuffer", jest.fn().mockImplementation(() => {
      this.loadEvent();
    }));
    this.result = result;
  }
}
const mockFileReaderError = {
  message: 'error'
};
class MockFileReaderWithError extends MockFileReader {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "readAsDataURL", jest.fn().mockImplementation(() => {
      this.errorEvent(mockFileReaderError);
    }));
  }
}
const GlobalFileReader = global.FileReader;
let FileReader;
if (global.FileReader && typeof jest !== 'undefined') {
  FileReader = jest.spyOn(global, 'FileReader').mockImplementation(() => new GlobalFileReader());
}
const mockFileReader = result => {
  const fileReader = new MockFileReader(result);
  FileReader.mockImplementation(() => fileReader);
  return fileReader;
};
const mockFileReaderWithError = () => {
  const fileReader = new MockFileReaderWithError();
  FileReader.mockImplementation(() => fileReader);
  return fileReader;
};
const unmockFileReader = () => FileReader.mockImplementation(() => new GlobalFileReader());
export { mockFileReader, mockFileReaderWithError, unmockFileReader, mockFileReaderError };