import React from 'react';
import { RawIntlProvider, createIntl, IntlProvider } from 'react-intl-next';
// eslint-disable-next-line import/no-extraneous-dependencies
import { mount, shallow } from 'enzyme';
const mockIntl = createIntl({
  locale: 'en'
});

/**
 * When using React-Intl `injectIntl` on components, props.intl is required.
 */
function nodeWithIntlProp(node) {
  const intl = !!node.props.intl ? node.props.intl : mockIntl;
  return /*#__PURE__*/React.createElement(RawIntlProvider, {
    value: intl
  }, /*#__PURE__*/React.cloneElement(node, {
    intl
  }));
}

/* TODO: We are explicitly using the third arg of ReactWrapper to work around the following TS issue which prevents a d.ts from being generated
 * and therefore fails the build:
 * error TS2742: The inferred type of 'mountWithIntlContext' cannot be named without a reference to 'react-transition-group/node_modules/@types/react'. This is likely not portable. A type annotation is necessary.
 * TS is resolving enzyme's usage of react to react-transition-group???
 */
export const mountWithIntlContext = (node, {
  context = {},
  childContextTypes = {},
  ...additionalOptions
} = {}) => {
  const intl = !!node.props.intl ? node.props.intl : mockIntl;
  return mount(nodeWithIntlProp(node), {
    context: {
      intl,
      ...context
    },
    ...additionalOptions
  });
};
export const shallowWithIntlContext = (node, {
  context = {},
  ...additionalOptions
} = {}) => {
  const intl = !!node.props.intl ? node.props.intl : mockIntl;
  return shallow(nodeWithIntlProp(node), {
    context: {
      intl,
      ...context
    },
    ...additionalOptions
  });
};
export const mountWithIntlWrapper = node => {
  return mount( /*#__PURE__*/React.createElement(props => /*#__PURE__*/React.createElement(IntlProvider, {
    locale: "en"
  }, /*#__PURE__*/React.cloneElement(node, {
    ...props
  }))));
};