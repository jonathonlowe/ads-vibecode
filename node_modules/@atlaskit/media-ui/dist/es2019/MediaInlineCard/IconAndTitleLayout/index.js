import React from 'react';
import ImageLoader from 'react-render-image';
import { Icon } from '../Icon';
import { IconEmptyWrapper, IconPositionWrapper, IconTitleWrapper, IconWrapper, EmojiWrapper } from './styled';
import LinkIcon from '@atlaskit/icon/core/migration/link';
export class IconAndTitleLayout extends React.Component {
  renderAtlaskitIcon() {
    const {
      icon,
      emoji
    } = this.props;
    if (emoji) {
      return /*#__PURE__*/React.createElement(EmojiWrapper, null, emoji);
    }
    if (!icon || typeof icon === 'string') {
      return null;
    }
    return /*#__PURE__*/React.createElement(IconWrapper, null, icon);
  }
  renderImageIcon(errored, testId) {
    const {
      icon: url
    } = this.props;
    if (!url || typeof url !== 'string') {
      return null;
    }
    return /*#__PURE__*/React.createElement(ImageLoader, {
      src: url,
      loaded: /*#__PURE__*/React.createElement(Icon
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      , {
        className: "smart-link-icon",
        src: url,
        "data-testid": `${testId}-image`
      }),
      errored: errored
    });
  }
  renderIconPlaceholder(testId) {
    const {
      defaultIcon
    } = this.props;
    if (defaultIcon) {
      return /*#__PURE__*/React.createElement(IconWrapper, null, defaultIcon);
    }
    return /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(LinkIcon, {
      color: "currentColor",
      label: "link",
      LEGACY_size: "small",
      testId: `${testId}-default`
    }));
  }
  renderIcon(testId) {
    // We render two kinds of icons here:
    // - Image: acquired from either DAC or Teamwork Platform Apps;
    // - Atlaskit Icon: an Atlaskit SVG;
    // Each of these are scaled down to 12x12.
    const icon = this.renderAtlaskitIcon();
    if (icon) {
      return icon;
    }
    const placeholder = this.renderIconPlaceholder(testId);
    const image = this.renderImageIcon(placeholder, testId);
    return image || placeholder;
  }
  render() {
    const {
      children,
      title,
      titleColor,
      testId = 'media-inline-card-icon-and-title'
    } = this.props;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconTitleWrapper
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    , {
      style: titleColor ? {
        color: titleColor
      } : undefined
    }, /*#__PURE__*/React.createElement(IconPositionWrapper, null, children || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconEmptyWrapper, null), this.renderIcon(testId))), /*#__PURE__*/React.createElement("span", {
      "data-test-id": "title"
    }, title)));
  }
}