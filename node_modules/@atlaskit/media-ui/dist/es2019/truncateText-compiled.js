/* truncateText-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./truncateText-compiled.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { Fragment } from 'react';
export const calculateTruncation = (text, startFixedChars, endFixedChars) => {
  const minAllowedLength = endFixedChars + startFixedChars;
  if (text.length <= minAllowedLength) {
    // if no truncation return same value for left and right
    return {
      left: text,
      right: text
    };
  }
  const splitAt = text.length - endFixedChars;
  const left = text.substr(0, splitAt);
  const right = text.substr(splitAt);
  return {
    left,
    right
  };
};
const truncateCommonStyles = null;
const truncateLeftStyles = null;
export const TruncateLeft = ({
  fontSizePX,
  startFixedChars,
  endFixedChars,
  children,
  ...props
}) => /*#__PURE__*/React.createElement("span", _extends({
  style: {
    maxWidth: `calc(
		100% -
			${fontFaceScaleFactor(fontSizePX) * endFixedChars + 1}em
	)`,
    minWidth: fontFaceScaleFactor(fontSizePX) * startFixedChars
  },
  "data-testid": "truncate-left"
}, props, {
  className: ax(["_1reo15vq _18m915vq _1e0c1o8l _s7n4yfq0 _o5721q9c", "_1bto1l2s"])
}), children);
const truncateRightStyles = null;
export const TruncateRight = ({
  fontSizePX,
  startFixedChars,
  endFixedChars,
  children,
  ...props
}) => /*#__PURE__*/React.createElement("span", _extends({
  style: {
    maxWidth: `calc(
				100% -
					${({
      fontSizePX,
      startFixedChars
    }) => fontFaceScaleFactor(fontSizePX) * startFixedChars}
			)`
  },
  "data-testid": "truncate-right"
}, props, {
  className: ax(["_1reo15vq _18m915vq _1e0c1o8l _s7n4yfq0 _o5721q9c", "_kqswh2mm"])
}), children);
const fontFaceScaleFactor = fontSizePX => fontSizePX / 11 * 0.46; /* factor for fontSize of 11px */

const placeholder = ' ';
export const Truncate = ({
  text,
  fontSizePX = 11,
  // Must be calibrated with fontSize
  startFixedChars = 4,
  // 1 char + 3 dots
  endFixedChars = 7 // file extension 3/4 chars + a fraction of the name
}) => {
  const {
    left: leftStr,
    right: rightStr
  } = calculateTruncation(text, startFixedChars, endFixedChars);
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(TruncateLeft, {
    fontSizePX: fontSizePX,
    startFixedChars: startFixedChars,
    endFixedChars: endFixedChars
  }, leftStr), /*#__PURE__*/React.createElement(TruncateRight, {
    fontSizePX: fontSizePX,
    startFixedChars: startFixedChars,
    endFixedChars: endFixedChars
  }, leftStr === rightStr ? placeholder : rightStr));
};