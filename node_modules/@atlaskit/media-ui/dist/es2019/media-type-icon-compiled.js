/* media-type-icon-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./media-type-icon-compiled.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import ImageIcon from '@atlaskit/icon-file-type/glyph/image/24';
import AudioIcon from '@atlaskit/icon-file-type/glyph/audio/24';
import VideoIcon from '@atlaskit/icon-file-type/glyph/video/24';
import DocIcon from '@atlaskit/icon-file-type/glyph/document/24';
import ArchiveIcon from '@atlaskit/icon-file-type/glyph/archive/24';
import GenericIcon from '@atlaskit/icon-file-type/glyph/generic/24';
import ImageIconSmall from '@atlaskit/icon-file-type/glyph/image/16';
import AudioIconSmall from '@atlaskit/icon-file-type/glyph/audio/16';
import VideoIconSmall from '@atlaskit/icon-file-type/glyph/video/16';
import DocIconSmall from '@atlaskit/icon-file-type/glyph/document/16';
import ArchiveIconSmall from '@atlaskit/icon-file-type/glyph/archive/16';
import GenericIconSmall from '@atlaskit/icon-file-type/glyph/generic/16';
const iconStyleMap = {
  small: "",
  large: "_ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66"
};
const iconStyles = null;
const largeIcons = {
  image: ImageIcon,
  audio: AudioIcon,
  video: VideoIcon,
  doc: DocIcon,
  archive: ArchiveIcon,
  unknown: GenericIcon
};
const smallIcons = {
  image: ImageIconSmall,
  audio: AudioIconSmall,
  video: VideoIconSmall,
  doc: DocIconSmall,
  archive: ArchiveIconSmall,
  unknown: GenericIconSmall
};
const defaultType = 'unknown';
export class MediaTypeIcon extends React.Component {
  render() {
    const {
      type,
      size,
      testId
    } = this.props;
    const typeWithDefault = type || defaultType;
    const icons = size === 'large' ? largeIcons : smallIcons;
    const Icon = icons[typeWithDefault] || icons[defaultType];
    return /*#__PURE__*/React.createElement("span", {
      "data-testid": testId,
      "data-type": type,
      className: ax(["_1e0c116y", iconStyleMap[size !== null && size !== void 0 ? size : 'small']])
    }, /*#__PURE__*/React.createElement(Icon, {
      label: "media-type"
    }));
  }
}
_defineProperty(MediaTypeIcon, "defaultProps", {
  type: defaultType,
  testId: 'file-type-icon',
  size: 'large'
});