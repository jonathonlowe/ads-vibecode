import _defineProperty from "@babel/runtime/helpers/defineProperty";
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
// Keep PlaybackSpeedControls to use static colors from the new color palette to support the hybrid
// theming in media viewer https://product-fabric.atlassian.net/browse/DSP-6067
import React from 'react';
import { Component } from 'react';
import { PopupSelect } from '@atlaskit/select';
import { DN900 } from '@atlaskit/theme/colors';
import { FormattedMessage, injectIntl } from 'react-intl-next';
import Tooltip from '@atlaskit/tooltip';
import MediaButton from '../MediaButton';
import { messages } from '../messages';
import { WidthObserver } from '@atlaskit/width-detector';
export class PlaybackSpeedControls extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      popupHeight: 255
    });
    _defineProperty(this, "onPlaybackSpeedChange", (option, _actionMeta) => {
      const {
        onPlaybackSpeedChange
      } = this.props;
      if (!option) {
        return;
      }
      const playbackSpeed = parseFloat(`${option.value}`);
      onPlaybackSpeedChange(playbackSpeed);
    });
    _defineProperty(this, "speedOptions", () => [{
      // @ts-ignore: FormattedMessage is returning an Element which is a type mismatch with what OptionType wants. This can be fix by using 'intl' object once this packages gets refactor later.
      label: /*#__PURE__*/React.createElement(FormattedMessage, messages.playbackSpeed),
      options: [{
        label: '0.75x',
        value: 0.75
      }, {
        label: '1x',
        value: 1
      }, {
        label: '1.25x',
        value: 1.25
      }, {
        label: '1.5x',
        value: 1.5
      }, {
        label: '2x',
        value: 2
      }]
    }]);
    _defineProperty(this, "popupCustomStyles", {
      container: styles => ({
        ...styles,
        backgroundColor: '#22272b',
        boxShadow: 'inset 0px 0px 0px 1px #bcd6f00a,0px 8px 12px #0304045c,0px 0px 1px #03040480'
      }),
      // added these overrides to keep the look of the current design
      // however this does not benefit from the DS a11y changes
      menuList: styles => ({
        ...styles,
        padding: '4px 0px'
      }),
      option: (styles, {
        isFocused,
        isSelected
      }) => ({
        ...styles,
        color: isSelected ? '#579dff' : DN900,
        backgroundColor: isSelected ? '#082145' : isFocused ? '#a1bdd914' : '#22272b',
        ':active': {
          backgroundColor: '#a6c5e229'
        }
      }),
      groupHeading: styles => ({
        ...styles,
        color: '#9fadbc'
      })
    });
    _defineProperty(this, "onResize", width => {
      const {
        originalDimensions
      } = this.props;
      if (originalDimensions) {
        const aspectRatio = originalDimensions.height / originalDimensions.width;
        const controlsSize = 60;
        const minimumHeight = 100;
        const popupHeight = Math.max(aspectRatio * width - controlsSize, minimumHeight);
        this.setState({
          popupHeight
        });
      }
      // This is a hacky solution. Please replace with a better one if you find one.
      // There is something inside popper.js that recalc position on scroll.
      // We enable this functionality with `eventListeners` modifier.
      // Here we simulate scroll even to trick popper.js to recalc position.
      window.dispatchEvent(new CustomEvent('scroll'));
    });
  }
  render() {
    const {
      playbackSpeed,
      intl,
      onClick
    } = this.props;
    const {
      popupHeight
    } = this.state;
    const value = this.speedOptions()[0].options.find(option => option.value === playbackSpeed);
    const popperProps = {
      strategy: 'fixed',
      modifiers: [{
        name: 'preventOverflow',
        enabled: true
      }, {
        name: 'eventListeners',
        options: {
          scroll: true,
          resize: true
        }
      }, {
        name: 'offset',
        enabled: true,
        options: {
          offset: [0, 10]
        }
      }],
      placement: 'top'
    };
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(WidthObserver, {
      setWidth: this.onResize
    }), /*#__PURE__*/React.createElement(PopupSelect, {
      minMenuWidth: 140,
      maxMenuHeight: popupHeight,
      options: this.speedOptions(),
      value: value,
      closeMenuOnScroll: true,
      onChange: this.onPlaybackSpeedChange,
      target: ({
        ref,
        isOpen,
        onKeyDown: popupKeydown
      }) => /*#__PURE__*/React.createElement(Tooltip, {
        content: intl.formatMessage(messages.playbackSpeed),
        position: "top"
      }, /*#__PURE__*/React.createElement(MediaButton, {
        testId: "custom-media-player-playback-speed-toggle-button",
        buttonRef: ref,
        isSelected: isOpen,
        onClick: onClick,
        onKeyDown: event => {
          popupKeydown(event);
        }
      }, playbackSpeed, "x")),
      styles: this.popupCustomStyles,
      popperProps: popperProps
    }));
  }
}
export default injectIntl(PlaybackSpeedControls);