import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { Component } from 'react';
import { hideControlsClassName } from '../classNames';
import { findParentByClassname } from '../util';
import { InactivityDetectorWrapper } from './styled';
const mouseMovementDelay = 2000;

/**
 * Hides all the child elements with `hideControlsClassName` classname when user is inactive,
 * which means they haven't moved mouse over the component for `mouseMovementDelay` ms.
 * Exception is if user holding mouse over one of the hideable elements (those that have specified classname).
 *
 */
export class InactivityDetector extends Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "contentWrapperElement", /*#__PURE__*/React.createRef());
    _defineProperty(this, "state", {
      controlsAreVisible: true
    });
    _defineProperty(this, "clearTimeout", () => {
      if (this.checkActivityTimeout) {
        window.clearTimeout(this.checkActivityTimeout);
      }
    });
    _defineProperty(this, "hideControls", element => () => {
      if (element) {
        const isOverHideableElement = findParentByClassname(element, hideControlsClassName, this.contentWrapperElement.current || undefined);
        if (!isOverHideableElement) {
          this.setState({
            controlsAreVisible: false
          });
        }
      } else {
        this.setState({
          controlsAreVisible: false
        });
      }
    });
    _defineProperty(this, "checkMouseMovement", e => {
      const {
        controlsAreVisible
      } = this.state;
      this.clearTimeout();
      // This check is needed to not trigger a render call on every movement.
      // Even if nothing will be re-renderer since the value is the same, it
      // will go into any children render method for nothing.
      if (!controlsAreVisible) {
        this.setState({
          controlsAreVisible: true
        });
      }
      this.checkActivityTimeout = window.setTimeout(this.hideControls(e && e.target), mouseMovementDelay);
    });
  }
  componentDidMount() {
    this.checkMouseMovement();
  }
  componentWillUnmount() {
    this.clearTimeout();
  }
  render() {
    const {
      controlsAreVisible
    } = this.state;
    const {
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(InactivityDetectorWrapper, {
      ref: this.contentWrapperElement,
      controlsAreVisible: controlsAreVisible,
      onMouseMove: this.checkMouseMovement,
      onMouseOut: () =>
      // Do not pass element, hence forcing elements to be hidden.
      this.checkMouseMovement(),
      onClick: this.checkMouseMovement,
      "data-testid": "inactivity-detector-wrapper"
    }, children(this.checkMouseMovement));
  }
}