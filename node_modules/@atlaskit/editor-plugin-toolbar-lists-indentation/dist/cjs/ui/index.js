/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToolbarListsIndentation;
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _analytics = require("@atlaskit/editor-common/analytics");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _types = require("../types");
var _onItemActivated = require("./onItemActivated");
var _Toolbar = require("./Toolbar");
var _ToolbarDropdown = require("./ToolbarDropdown");
var _inputMethod = require("./utils/input-method");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ToolbarListsIndentation(props) {
  var disabled = props.disabled,
    isSmall = props.isSmall,
    isReducedSpacing = props.isReducedSpacing,
    bulletListActive = props.bulletListActive,
    bulletListDisabled = props.bulletListDisabled,
    orderedListActive = props.orderedListActive,
    orderedListDisabled = props.orderedListDisabled,
    showIndentationButtons = props.showIndentationButtons,
    popupsMountPoint = props.popupsMountPoint,
    popupsBoundariesElement = props.popupsBoundariesElement,
    popupsScrollableElement = props.popupsScrollableElement,
    indentDisabled = props.indentDisabled,
    outdentDisabled = props.outdentDisabled,
    indentationStateNode = props.indentationStateNode,
    featureFlags = props.featureFlags,
    pluginInjectionApi = props.pluginInjectionApi,
    toolbarType = props.toolbarType;
  var inputMethod = toolbarType ? (0, _inputMethod.getInputMethod)(toolbarType) : _analytics.INPUT_METHOD.TOOLBAR;
  if (isSmall || toolbarType === _types.ToolbarType.FLOATING || (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6')) {
    var areAllOptionsDisabled = [bulletListDisabled, orderedListDisabled, indentDisabled, outdentDisabled].every(function (item) {
      return Boolean(item) === true;
    });
    var isDisabled = disabled || areAllOptionsDisabled;
    return /*#__PURE__*/React.createElement(_ToolbarDropdown.ToolbarDropdown, {
      editorView: props.editorView,
      isReducedSpacing: isReducedSpacing,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      bulletListActive: bulletListActive,
      bulletListDisabled: bulletListDisabled,
      showIndentationButtons: showIndentationButtons,
      orderedListActive: orderedListActive,
      orderedListDisabled: orderedListDisabled,
      indentDisabled: indentDisabled,
      outdentDisabled: outdentDisabled,
      disabled: isDisabled,
      onItemActivated: (0, _onItemActivated.onItemActivated)(pluginInjectionApi, indentationStateNode, inputMethod),
      featureFlags: featureFlags,
      pluginInjectionApi: pluginInjectionApi,
      toolbarType: toolbarType
    });
  }
  return /*#__PURE__*/React.createElement(_Toolbar.Toolbar, {
    editorView: props.editorView,
    isReducedSpacing: isReducedSpacing,
    bulletListActive: bulletListActive,
    bulletListDisabled: bulletListDisabled,
    showIndentationButtons: showIndentationButtons,
    orderedListActive: orderedListActive,
    orderedListDisabled: orderedListDisabled,
    indentDisabled: indentDisabled,
    outdentDisabled: outdentDisabled,
    disabled: disabled,
    onItemActivated: (0, _onItemActivated.onItemActivated)(pluginInjectionApi, indentationStateNode, inputMethod),
    featureFlags: featureFlags,
    pluginInjectionApi: pluginInjectionApi
  });
}