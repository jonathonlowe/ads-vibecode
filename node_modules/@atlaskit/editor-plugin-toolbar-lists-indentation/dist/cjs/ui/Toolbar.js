/* Toolbar.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toolbar = Toolbar;
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _reactIntlNext = require("react-intl-next");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _listBulletedEditorBulletList = _interopRequireDefault(require("@atlaskit/icon/core/migration/list-bulleted--editor-bullet-list"));
var _listNumberedEditorNumberList = _interopRequireDefault(require("@atlaskit/icon/core/migration/list-numbered--editor-number-list"));
var _textIndentLeftEditorOutdent = _interopRequireDefault(require("@atlaskit/icon/core/migration/text-indent-left--editor-outdent"));
var _textIndentRightEditorIndent = _interopRequireDefault(require("@atlaskit/icon/core/migration/text-indent-right--editor-indent"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function Toolbar(props) {
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var indentButtonRef = (0, _react.useRef)(null);
  var outdentButtonRef = (0, _react.useRef)(null);
  var disabled = props.disabled,
    isReducedSpacing = props.isReducedSpacing,
    bulletListActive = props.bulletListActive,
    bulletListDisabled = props.bulletListDisabled,
    orderedListActive = props.orderedListActive,
    orderedListDisabled = props.orderedListDisabled,
    showIndentationButtons = props.showIndentationButtons,
    indentDisabled = props.indentDisabled,
    outdentDisabled = props.outdentDisabled,
    onItemActivated = props.onItemActivated,
    pluginInjectionApi = props.pluginInjectionApi;
  var labelUnorderedList = formatMessage(_messages.listMessages.unorderedList);
  var labelOrderedList = formatMessage(_messages.listMessages.orderedList);
  var labelListsFormat = formatMessage(_messages.listMessages.listsFormat);
  var indentMessage = formatMessage(_messages.indentationMessages.indent);
  var outdentMessage = formatMessage(_messages.indentationMessages.outdent);
  var isIndentButtonFocused = document.activeElement === indentButtonRef.current;
  var isOutdentButtonFocused = document.activeElement === outdentButtonRef.current;
  var handleOnItemActivated = function handleOnItemActivated(buttonName) {
    return function (event) {
      return onItemActivated({
        editorView: props.editorView,
        buttonName: buttonName
      });
    };
  };
  (0, _react.useEffect)(function () {
    if (isIndentButtonFocused && indentDisabled && outdentButtonRef.current) {
      outdentButtonRef.current.focus();
    }
  }, [indentButtonRef, indentDisabled, isIndentButtonFocused]);
  (0, _react.useEffect)(function () {
    if (isOutdentButtonFocused && outdentDisabled && indentButtonRef.current) {
      indentButtonRef.current.focus();
    }
  }, [outdentButtonRef, outdentDisabled, isOutdentButtonFocused]);
  return /*#__PURE__*/React.createElement(_ui.ToolbarButtonGroup, null, /*#__PURE__*/React.createElement("div", {
    role: "group",
    "aria-label": labelListsFormat
  }, /*#__PURE__*/React.createElement(_uiMenu.ToolbarButton, {
    buttonId: _uiMenu.TOOLBAR_BUTTON.BULLET_LIST,
    testId: labelUnorderedList,
    spacing: isReducedSpacing ? 'none' : 'default',
    onClick: handleOnItemActivated('bullet_list'),
    selected: bulletListActive,
    "aria-pressed": bulletListActive,
    "aria-label": (0, _keymaps.tooltip)(_keymaps.toggleBulletList, labelUnorderedList),
    "aria-keyshortcuts": (0, _keymaps.getAriaKeyshortcuts)(_keymaps.toggleBulletList),
    disabled: bulletListDisabled || disabled,
    title: /*#__PURE__*/React.createElement(_keymaps.ToolTipContent, {
      description: labelUnorderedList,
      keymap: _keymaps.toggleBulletList
    }),
    iconBefore: /*#__PURE__*/React.createElement(_listBulletedEditorBulletList.default, {
      label: "",
      color: "currentColor",
      spacing: "spacious"
    })
  }), /*#__PURE__*/React.createElement(_uiMenu.ToolbarButton, {
    buttonId: _uiMenu.TOOLBAR_BUTTON.ORDERED_LIST,
    testId: labelOrderedList,
    spacing: isReducedSpacing ? 'none' : 'default',
    onClick: handleOnItemActivated('ordered_list'),
    selected: orderedListActive,
    "aria-pressed": orderedListActive,
    "aria-label": (0, _keymaps.tooltip)(_keymaps.toggleOrderedList, labelOrderedList),
    "aria-keyshortcuts": (0, _keymaps.getAriaKeyshortcuts)(_keymaps.toggleOrderedList),
    disabled: orderedListDisabled || disabled,
    title: /*#__PURE__*/React.createElement(_keymaps.ToolTipContent, {
      description: labelOrderedList,
      keymap: _keymaps.toggleOrderedList
    }),
    iconBefore: /*#__PURE__*/React.createElement(_listNumberedEditorNumberList.default, {
      color: "currentColor",
      spacing: "spacious",
      label: ""
    })
  }), showIndentationButtons && /*#__PURE__*/React.createElement(_uiMenu.ToolbarButton, {
    buttonId: _uiMenu.TOOLBAR_BUTTON.OUTDENT,
    testId: _uiMenu.TOOLBAR_BUTTON.OUTDENT,
    ref: outdentButtonRef,
    spacing: isReducedSpacing ? 'none' : 'default',
    onClick: handleOnItemActivated('outdent'),
    iconBefore: /*#__PURE__*/React.createElement(_textIndentLeftEditorOutdent.default, {
      color: "currentColor",
      spacing: "spacious",
      label: ""
    }),
    disabled: outdentDisabled || disabled,
    "aria-label": (0, _keymaps.tooltip)(_keymaps.outdent, outdentMessage),
    "aria-keyshortcuts": (0, _keymaps.getAriaKeyshortcuts)(_keymaps.outdent),
    title: /*#__PURE__*/React.createElement(_keymaps.ToolTipContent, {
      description: outdentMessage,
      keymap: _keymaps.outdent
    })
  }), showIndentationButtons && /*#__PURE__*/React.createElement(_uiMenu.ToolbarButton, {
    buttonId: _uiMenu.TOOLBAR_BUTTON.INDENT,
    testId: _uiMenu.TOOLBAR_BUTTON.INDENT,
    ref: indentButtonRef,
    spacing: isReducedSpacing ? 'none' : 'default',
    onClick: handleOnItemActivated('indent'),
    iconBefore: /*#__PURE__*/React.createElement(_textIndentRightEditorIndent.default, {
      color: "currentColor",
      spacing: "spacious",
      label: ""
    }),
    disabled: indentDisabled || disabled,
    "aria-label": (0, _keymaps.tooltip)(_keymaps.indent, indentMessage),
    "aria-keyshortcuts": (0, _keymaps.getAriaKeyshortcuts)(_keymaps.indent),
    title: /*#__PURE__*/React.createElement(_keymaps.ToolTipContent, {
      description: indentMessage,
      keymap: _keymaps.indent
    })
  })), !(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.primaryToolbar) && /*#__PURE__*/React.createElement(_ui.ToolbarSeparator, null));
}