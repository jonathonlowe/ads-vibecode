/* ToolbarDropdown.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarDropdown = ToolbarDropdown;
var _runtime = require("@compiled/react/runtime");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _listBulleted = _interopRequireDefault(require("@atlaskit/icon/core/list-bulleted"));
var _listNumbered = _interopRequireDefault(require("@atlaskit/icon/core/list-numbered"));
var _listBulletedEditorBulletList = _interopRequireDefault(require("@atlaskit/icon/core/migration/list-bulleted--editor-bullet-list"));
var _textIndentLeft = _interopRequireDefault(require("@atlaskit/icon/core/text-indent-left"));
var _textIndentRight = _interopRequireDefault(require("@atlaskit/icon/core/text-indent-right"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _types = require("../types");
function ToolbarDropdown(props) {
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var disabled = props.disabled,
    isReducedSpacing = props.isReducedSpacing,
    bulletListActive = props.bulletListActive,
    orderedListActive = props.orderedListActive,
    popupsMountPoint = props.popupsMountPoint,
    popupsBoundariesElement = props.popupsBoundariesElement,
    popupsScrollableElement = props.popupsScrollableElement,
    onItemActivated = props.onItemActivated,
    pluginInjectionApi = props.pluginInjectionApi;
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isDropdownOpen = _React$useState2[0],
    setIsDropdownOpen = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    isOpenedByKeyboard = _React$useState4[0],
    setOpenedByKeyboard = _React$useState4[1];
  var labelLists = formatMessage(_messages.listMessages.lists);

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var onOpenChange = function onOpenChange(attrs) {
    setIsDropdownOpen(attrs.isDropdownOpen);
  };
  var handleTriggerClick = function handleTriggerClick() {
    onOpenChange({
      isDropdownOpen: !isDropdownOpen
    });
  };
  var handleOnKeyDown = function handleOnKeyDown(event) {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      setIsDropdownOpen(!isDropdownOpen);
      setOpenedByKeyboard(true);
    }
  };
  var items = useItems(props);
  var handleOnItemActivated = function handleOnItemActivated(_ref) {
    var item = _ref.item,
      _ref$shouldCloseMenu = _ref.shouldCloseMenu,
      shouldCloseMenu = _ref$shouldCloseMenu === void 0 ? true : _ref$shouldCloseMenu;
    setIsDropdownOpen(!shouldCloseMenu);
    return onItemActivated({
      editorView: props.editorView,
      buttonName: item.value.name
    });
  };
  var reducedSpacing = props.toolbarType === _types.ToolbarType.FLOATING ? 'compact' : 'none';
  var activeListIcon = null;
  var isSelected = isDropdownOpen;
  if ((0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6')) {
    activeListIcon = orderedListActive ? /*#__PURE__*/_react.default.createElement(_listNumbered.default, {
      spacing: "spacious",
      label: ""
    }) : /*#__PURE__*/_react.default.createElement(_listBulleted.default, {
      spacing: "spacious",
      label: ""
    });
  } else {
    activeListIcon = /*#__PURE__*/_react.default.createElement(_listBulletedEditorBulletList.default, {
      color: "currentColor",
      spacing: "spacious",
      label: labelLists
    });
    isSelected = bulletListActive || orderedListActive || isDropdownOpen;
  }
  return /*#__PURE__*/_react.default.createElement(_ui.ToolbarDropdownWrapper, null, /*#__PURE__*/_react.default.createElement(_uiMenu.DropdownMenuWithKeyboardNavigation, {
    items: items,
    onItemActivated: handleOnItemActivated,
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    isOpen: isDropdownOpen,
    onOpenChange: onOpenChange,
    fitHeight: 188,
    fitWidth: 175,
    shouldUseDefaultRole: true,
    shouldFocusFirstItem: function shouldFocusFirstItem() {
      if (isOpenedByKeyboard) {
        setOpenedByKeyboard(false);
      }
      return isOpenedByKeyboard;
    }
  }, /*#__PURE__*/_react.default.createElement(_uiMenu.ToolbarButton, {
    spacing: isReducedSpacing ? reducedSpacing : 'default',
    selected: isSelected,
    "aria-expanded": isDropdownOpen,
    "aria-haspopup": true,
    "aria-label": labelLists,
    disabled: disabled,
    onClick: handleTriggerClick,
    onKeyDown: handleOnKeyDown,
    title: labelLists,
    iconBefore: /*#__PURE__*/_react.default.createElement(_ui.ToolbarDropdownTriggerWrapper, null, activeListIcon, /*#__PURE__*/_react.default.createElement(_ui.ToolbarExpandIcon, null))
  })), !(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.primaryToolbar) && /*#__PURE__*/_react.default.createElement(_ui.ToolbarSeparator, null));
}
function useItems(props) {
  var _useIntl2 = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl2.formatMessage;
  var labelUnorderedList = formatMessage(_messages.listMessages.unorderedList);
  var labelOrderedList = formatMessage(_messages.listMessages.orderedList);
  var items = [{
    key: 'unorderedList',
    content: labelUnorderedList,
    value: {
      name: 'bullet_list'
    },
    isDisabled: props.bulletListDisabled,
    isActive: Boolean(props.bulletListActive),
    elemAfter: /*#__PURE__*/_react.default.createElement(_ui.Shortcut, null, (0, _keymaps.tooltip)(_keymaps.toggleBulletList)),
    elemBefore: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6') ? /*#__PURE__*/_react.default.createElement(_listBulleted.default, {
      label: ""
    }) : undefined
  }, {
    key: 'orderedList',
    content: labelOrderedList,
    value: {
      name: 'ordered_list'
    },
    isDisabled: props.orderedListDisabled,
    isActive: Boolean(props.orderedListActive),
    elemAfter: /*#__PURE__*/_react.default.createElement(_ui.Shortcut, null, (0, _keymaps.tooltip)(_keymaps.toggleOrderedList)),
    elemBefore: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6') ? /*#__PURE__*/_react.default.createElement(_listNumbered.default, {
      label: ""
    }) : undefined
  }];
  if (props.showIndentationButtons) {
    var labelIndent = formatMessage(_messages.indentationMessages.indent);
    var labelOutdent = formatMessage(_messages.indentationMessages.outdent);
    items.push({
      key: 'outdent',
      content: labelOutdent,
      value: {
        name: 'outdent'
      },
      isDisabled: props.outdentDisabled,
      isActive: false,
      elemAfter: /*#__PURE__*/_react.default.createElement(_ui.Shortcut, null, (0, _keymaps.tooltip)(_keymaps.outdent)),
      elemBefore: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6') ? /*#__PURE__*/_react.default.createElement(_textIndentLeft.default, {
        label: ""
      }) : undefined
    }, {
      key: 'indent',
      content: labelIndent,
      value: {
        name: 'indent'
      },
      isDisabled: props.indentDisabled,
      isActive: false,
      elemAfter: /*#__PURE__*/_react.default.createElement(_ui.Shortcut, null, (0, _keymaps.tooltip)(_keymaps.indent)),
      elemBefore: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') && (0, _platformFeatureFlags.fg)('platform_editor_controls_patch_6') ? /*#__PURE__*/_react.default.createElement(_textIndentRight.default, {
        label: ""
      }) : undefined
    });
  }
  return [{
    items: items
  }];
}