import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { ToolbarSize } from '@atlaskit/editor-common/types';
import { usePluginStateEffect } from '@atlaskit/editor-common/use-plugin-state-effect';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { getIndentationButtonsState } from './pm-plugins/indentation-buttons';
import { ToolbarType } from './types';
import ToolbarListsIndentation from './ui';
import { FloatingToolbarComponent } from './ui/FloatingToolbarComponent';
export var toolbarListsIndentationPlugin = function toolbarListsIndentationPlugin(_ref) {
  var _api$featureFlags, _api$primaryToolbar;
  var config = _ref.config,
    api = _ref.api;
  var _ref2 = config !== null && config !== void 0 ? config : {},
    _ref2$showIndentation = _ref2.showIndentationButtons,
    showIndentationButtons = _ref2$showIndentation === void 0 ? false : _ref2$showIndentation,
    _ref2$allowHeadingAnd = _ref2.allowHeadingAndParagraphIndentation,
    allowHeadingAndParagraphIndentation = _ref2$allowHeadingAnd === void 0 ? false : _ref2$allowHeadingAnd;
  var featureFlags = (api === null || api === void 0 || (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState()) || {};
  var primaryToolbarComponent = function primaryToolbarComponent(_ref3) {
    var editorView = _ref3.editorView,
      popupsMountPoint = _ref3.popupsMountPoint,
      popupsBoundariesElement = _ref3.popupsBoundariesElement,
      popupsScrollableElement = _ref3.popupsScrollableElement,
      toolbarSize = _ref3.toolbarSize,
      disabled = _ref3.disabled,
      isToolbarReducedSpacing = _ref3.isToolbarReducedSpacing;
    return /*#__PURE__*/React.createElement(PrimaryToolbarComponent, {
      featureFlags: featureFlags,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      isSmall: toolbarSize < ToolbarSize.L,
      isToolbarReducedSpacing: isToolbarReducedSpacing,
      disabled: disabled,
      editorView: editorView,
      showIndentationButtons: showIndentationButtons,
      pluginInjectionApi: api,
      allowHeadingAndParagraphIndentation: allowHeadingAndParagraphIndentation
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'toolbarListsIndentation',
    component: primaryToolbarComponent
  });
  return {
    name: 'toolbarListsIndentation',
    pluginsOptions: {
      selectionToolbar: function selectionToolbar() {
        var _api$selectionToolbar;
        if ((api === null || api === void 0 || (_api$selectionToolbar = api.selectionToolbar) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.sharedState) === null || _api$selectionToolbar === void 0 || (_api$selectionToolbar = _api$selectionToolbar.currentState()) === null || _api$selectionToolbar === void 0 ? void 0 : _api$selectionToolbar.toolbarDocking) === 'none' && editorExperiment('platform_editor_controls', 'variant1', {
          exposure: true
        })) {
          var toolbarCustom = {
            type: 'custom',
            render: function render(view) {
              if (!view) {
                return;
              }
              return /*#__PURE__*/React.createElement(FloatingToolbarComponent, {
                editorView: view,
                featureFlags: featureFlags,
                pluginInjectionApi: api,
                showIndentationButtons: showIndentationButtons,
                allowHeadingAndParagraphIndentation: allowHeadingAndParagraphIndentation
              });
            },
            fallback: []
          };
          return {
            rank: 3,
            isToolbarAbove: true,
            items: [toolbarCustom],
            pluginName: 'toolbarListsIndentation'
          };
        } else {
          return undefined;
        }
      }
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
};
export function PrimaryToolbarComponent(_ref4) {
  var _pluginInjectionApi$l;
  var featureFlags = _ref4.featureFlags,
    popupsMountPoint = _ref4.popupsMountPoint,
    popupsBoundariesElement = _ref4.popupsBoundariesElement,
    popupsScrollableElement = _ref4.popupsScrollableElement,
    isSmall = _ref4.isSmall,
    isToolbarReducedSpacing = _ref4.isToolbarReducedSpacing,
    disabled = _ref4.disabled,
    editorView = _ref4.editorView,
    showIndentationButtons = _ref4.showIndentationButtons,
    pluginInjectionApi = _ref4.pluginInjectionApi,
    allowHeadingAndParagraphIndentation = _ref4.allowHeadingAndParagraphIndentation;
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['list', 'indentation']),
    listState = _useSharedPluginState.listState,
    indentationState = _useSharedPluginState.indentationState;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    taskDecisionState = _useState2[0],
    setTaskDecisionState = _useState2[1];
  usePluginStateEffect(pluginInjectionApi, ['taskDecision'], function (_ref5) {
    var newTaskDecisionState = _ref5.taskDecisionState;
    if ((newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.outdentDisabled) !== (taskDecisionState === null || taskDecisionState === void 0 ? void 0 : taskDecisionState.outdentDisabled) || (newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.indentDisabled) !== (taskDecisionState === null || taskDecisionState === void 0 ? void 0 : taskDecisionState.indentDisabled) || (newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.isInsideTask) !== (taskDecisionState === null || taskDecisionState === void 0 ? void 0 : taskDecisionState.isInsideTask)) {
      setTaskDecisionState({
        isInsideTask: Boolean(newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.isInsideTask),
        indentDisabled: Boolean(newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.indentDisabled),
        outdentDisabled: Boolean(newTaskDecisionState === null || newTaskDecisionState === void 0 ? void 0 : newTaskDecisionState.outdentDisabled)
      });
    }
  });
  var toolbarListsIndentationState = getIndentationButtonsState(editorView.state, allowHeadingAndParagraphIndentation, taskDecisionState, indentationState, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$l = pluginInjectionApi.list) === null || _pluginInjectionApi$l === void 0 ? void 0 : _pluginInjectionApi$l.actions.isInsideListItem);
  if (!listState) {
    return null;
  }
  return /*#__PURE__*/React.createElement(ToolbarListsIndentation, {
    featureFlags: featureFlags,
    isSmall: isSmall,
    isReducedSpacing: isToolbarReducedSpacing,
    disabled: disabled,
    editorView: editorView,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    bulletListActive: listState.bulletListActive
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    bulletListDisabled: listState.bulletListDisabled
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    orderedListActive: listState.orderedListActive
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    orderedListDisabled: listState.orderedListDisabled,
    showIndentationButtons: !!showIndentationButtons
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    indentDisabled: toolbarListsIndentationState.indentDisabled
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    outdentDisabled: toolbarListsIndentationState.outdentDisabled,
    indentationStateNode: toolbarListsIndentationState === null || toolbarListsIndentationState === void 0 ? void 0 : toolbarListsIndentationState.node,
    pluginInjectionApi: pluginInjectionApi,
    toolbarType: ToolbarType.PRIMARY
  });
}