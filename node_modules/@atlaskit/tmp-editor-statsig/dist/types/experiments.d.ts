import { type EditorExperimentsConfig } from './experiments-config';
/**
 * Check the value of an editor experiment.
 *
 * Note: By default this will not fire an [exposure event](https://hello.atlassian.net/wiki/spaces/~732385844/pages/3187295823/Exposure+Events+101).
 *
 * You need explicitly call it using the exposure property when you need an exposure event to be fired (all experiments should fire exposure events).
 *
 * @example Boolean experiment
 * ```ts
 * if (editorExperiment('example-boolean', true)) {
 *   // Run code for on variant
 * } else {
 *   // Run code for off variant
 * }
 * ```
 *
 * @example Multivariate experiment
 * ```ts
 * switch (true) {
 * 	 case editorExperiment('example-multivariate', 'one'):
 *   	 // Run code for variant one
 *   break;
 *   case editorExperiment('example-multivariate', 'two'):
 *     // Run code for variant two
 *     break;
 *   case editorExperiment('example-multivariate', 'three'):
 *     // Run code for variant three
 *     break;
 *   }
 * }
 *```

 @example Experiment with exposure event
 * ```ts
 * // Inside feature surface where either the control or variant should be shown
 * if (editorExperiment('example-boolean', true, { exposure: true })) {
 * 	// Run code for on variant
 * } else {
 * 	// Run code for off variant
 * }
 * ```
 */
export declare function editorExperiment<ExperimentName extends keyof EditorExperimentsConfig>(experimentName: ExperimentName, expectedExperimentValue: EditorExperimentsConfig[ExperimentName]['defaultValue'], options?: {
    exposure: boolean;
}): boolean;
type Unstable_EditorExperimentParams = {
    live_pages_graceful_edit: {
        params: 'view-mode-intent-to-edit' | 'delay' | 'intent-mode' | 'toolbar-entry';
    };
    platform_editor_ai_proactive_ai_nudge_parameters: {
        params: 'min_final_confidence' | 'min_length_percentage_difference' | 'max_length_percentage_difference' | 'min_input_readability_score' | 'min_output_readability_score' | 'max_readability_score_delta' | 'min_readability_score_delta' | 'min_alternative_confidence';
    };
};
/**
 * @warning This currently lacks type safety on the param names and return values
 * and has limited associated test tooling.
 *
 * It also only works for experiments where the key matches the productKey used.
 *
 * The typeguard and default value is also expected to move to the experiment config
 */
export declare function unstable_editorExperimentParam<ExperimentName extends keyof Unstable_EditorExperimentParams, ParamKey extends Unstable_EditorExperimentParams[ExperimentName]['params'], ParamValue = unknown>(experimentName: ExperimentName, paramName: ParamKey, options: {
    exposure?: boolean;
    typeGuard: (value: unknown) => value is ParamValue;
    defaultValue: ParamValue;
}): ParamValue;
export {};
