import { isBoolean } from './type-guards';
export type EditorExperimentsConfig = typeof editorExperimentsConfig;
/**
 * When adding a new experiment, you need to add it here.
 * Please follow the pattern established in the examples and any
 * existing experiments.
 */
export declare const editorExperimentsConfig: {
    'example-boolean': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'example-multivariate': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "one" | "two" | "three";
        defaultValue: "one" | "two" | "three";
    };
    'test-new-experiments-package': {
        productKeys: {
            confluence: string;
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    support_table_in_comment: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_exp_lazy_node_views: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_renderer_table_sticky_scrollbar: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    comment_on_bodied_extensions: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    advanced_layouts: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    single_column_layouts: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    support_table_in_comment_jira: {
        productKeys: {
            jira: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    'platform_editor_ai-prompts-placeholder': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    'nested-tables-in-tables': {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_ai_unsplash_page_header: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_blockquote_in_text_formatting_menu: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_advanced_code_blocks: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_element_drag_and_drop_multiselect: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    live_pages_graceful_edit: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
        defaultValue: "control" | "text-click-delayed" | "text-click-no-delay" | "initially-hide-toolbar";
    };
    platform_editor_ai_edit_response_in_preview: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_controls: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1";
        defaultValue: "control" | "variant1";
    };
    platform_editor_controls_shadow: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1";
        defaultValue: "control" | "variant1";
    };
    platform_editor_nested_non_bodied_macros: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    platform_editor_insertion: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1";
        defaultValue: "control" | "variant1";
    };
    platform_editor_inline_node_virtualization: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "off" | "fallback-small" | "fallback-large";
        defaultValue: "off" | "fallback-small" | "fallback-large";
    };
    platform_editor_vanilla_dom: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    editor_text_highlight_orange_to_yellow: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    platform_editor_ai_proactive_ai_nudge_parameters: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "control" | "variant1";
        defaultValue: "control" | "variant1";
    };
    platform_editor_offline_editing_web: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_markdown_next_media_plugin_exp: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    editor_ai_inline_suggestion_date_v2: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: (value: unknown) => value is "test" | "control";
        defaultValue: "test" | "control";
    };
    platform_editor_tables_drag_and_drop: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_tables_table_selector: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
    platform_editor_usesharedpluginstateselector: {
        productKeys: {
            confluence: string;
        };
        param: string;
        typeGuard: typeof isBoolean;
        defaultValue: boolean;
    };
};
