"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._product = exports._paramOverrides = exports._overrides = void 0;
exports.setupEditorExperiments = setupEditorExperiments;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _experimentsConfig = require("./experiments-config");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable @atlaskit/editor/no-re-export */ // Entry file in package.json
var _overrides = exports._overrides = {};
var _paramOverrides = exports._paramOverrides = {};
var _product;

/**
 * This function is used to set up the editor experiments for testing purposes.
 * It should be called before running code that depends on editor experiments.
 *
 * @example
 * ```ts
 * setupEditorExperiments('confluence', {
 *  'experiment-name': 'value',
 * });
 * ```
 */
function setupEditorExperiments(product,
/**
 * Overrides are used to set the group of an experiment for testing purposes.
 * This is useful when you want to test a specific experiment group.
 */
groupOverrides,
/**
 * Param overrides are used to set the experiment parameters for testing purposes.
 * This is useful when you want to tweak the experiment parameters for testing.
 */
paramOverrides) {
  if (groupOverrides) {
    // When setting up overrides, we want to ensure that experiments don't end up with invalid
    // values.
    // For production usage -- this is done via the feature flag client which takes the type
    // and performs equivalent logic.
    // @ts-ignore
    groupOverrides = Object.entries(groupOverrides).reduce(function (acc, _ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      var config = _experimentsConfig.editorExperimentsConfig[key];
      if (config) {
        acc = _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2.default)({}, key, config.typeGuard(value) ? value : config.defaultValue));
      }
      return acc;
    }, {});
    exports._overrides = _overrides = groupOverrides;
  }
  exports._product = _product = product;
  if (paramOverrides) {
    exports._paramOverrides = _paramOverrides = paramOverrides;
  }
}