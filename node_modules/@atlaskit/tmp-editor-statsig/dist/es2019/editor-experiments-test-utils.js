/* eslint-disable @atlaskit/editor/no-re-export */
// Entry file in package.json

// This is loosely based on the `ffTest` util from `@atlassian/feature-flags-test-utils` package.

import { setupEditorExperiments } from './setup';
import { editorExperimentsConfig } from './experiments-config';
/**
 * This is a utility function for testing editor experiments.
 *
 * @example Boolean experiment
 * ```ts
 * eeTest('example-boolean', {
 *   true: () => {
 *     expect(editorExperiment('example-boolean', true)).toBe(true);
 *     expect(editorExperiment('example-boolean', false)).toBe(false);
 *   },
 *   false: () => {
 *     expect(editorExperiment('example-boolean', false)).toBe(true);
 *     expect(editorExperiment('example-boolean', true)).toBe(false);
 *   },
 * })
 * ```
 *
 * @example Multivariate experiment
 * ```ts
 * eeTest('example-multivariate', {
 *   one: () => {
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(false);
 *   },
 *   two: () => {
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 *   three: () => {
 *     expect(editorExperiment('example-multivariate', 'three')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 * })
 * ```
 *
 * API based on Legacy ffTest API
 * - https://hello.atlassian.net/wiki/spaces/AF/pages/2569505829/Task+Testing+your+feature+flag+in+platform+and+product#Legacy-API-lEGACY
 */
function eeTest(experimentName, cases, otherExperiments) {
  setupEditorExperiments('test', {});
  describe(`eeTest: ${experimentName}`, () => {
    afterEach(() => {
      setupEditorExperiments('test', {});
    });
    const isBooleanExperiment = typeof editorExperimentsConfig[experimentName].defaultValue === 'boolean';
    if (isBooleanExperiment && Object.keys(cases).length !== 2) {
      throw new Error(`Expected exactly 2 cases for boolean experiment ${experimentName}, got ${Object.keys(cases).length}`);
    }
    test.each(Object.keys(cases))(`${experimentName}: %s`, async value => {
      const testCaseKey = value;

      // For boolean experiments, we need to convert the 'on' and 'off' cases to boolean `true` and `false` values.
      const convertedValue = isBooleanExperiment ? testCaseKey === 'true' ? true : false : testCaseKey;
      setupEditorExperiments('test', {
        [experimentName]: convertedValue,
        ...otherExperiments
      });
      const testCase = cases[testCaseKey];

      // @ts-ignore
      await Promise.resolve(testCase());
    });
  });
}

/**
 * eeTest.describe() Wrapper utility for describe() that runs a test with a editor experiment overides.
 *
 * @example Single experiment
 * ```ts
 * eeTest.describe('Description of test "suite" containing nested suites and tests.', { 'example-boolean': true }, () => {
 *  it('should do the thing', () => {
 * 		expect(editorExperiment('example-boolean', true)).toBe(true);
 * 	});
 * });
 * ```
 *
 *
 * @example Multiple experiment
 * ```ts
 * eeTest.describe('Description of test "suite" containing nested suites and tests.', { 'example-boolean': true, 'example-multivariate': 'three' }, () => {
 *  it('should do the thing', () => {
 * 		expect(editorExperiment('example-boolean', true)).toBe(true);
 * 	});
 * });
 * ```
 *
 * API based on next gen ffTest API
 * - https://hello.atlassian.net/wiki/spaces/AF/pages/2569505829/Task+Testing+your+feature+flag+in+platform+and+product#Next-Generation-API-%E2%9C%A8
 */
eeTest.describe = function eeTestDescribe(experimentName, describeName) {
  function eeTest(value, describeBody = () => {}) {
    describe(`${describeName} [${value}]`, () => {
      beforeEach(() => {
        setupEditorExperiments('test', {
          [experimentName]: value
        });
      });
      afterEach(() => {
        setupEditorExperiments('test', {});
      });
      describeBody();
    });
    setupEditorExperiments('test', {});
  }
  function variant(value, describeBody) {
    eeTest(value, describeBody);
  }
  function each(describeBody) {
    const possibleValues =
    // @ts-ignore
    editorExperimentsConfig[experimentName].typeGuard.values;
    if (possibleValues) {
      for (const value of possibleValues) {
        eeTest(value, describeBody);
      }
    } else {
      // if there are no possible values, it's a boolean experiment
      eeTest(true, describeBody);
      eeTest(false, describeBody);
    }
  }
  return {
    variant,
    each
  };
};
export { eeTest };