/* eslint-disable @atlaskit/editor/no-re-export */
// Entry file in package.json

import FeatureGates from '@atlaskit/feature-gate-js-client';
import { editorExperimentsConfig } from './experiments-config';
import { _overrides, _paramOverrides, _product } from './setup';

/**
 * Check the value of an editor experiment.
 *
 * Note: By default this will not fire an [exposure event](https://hello.atlassian.net/wiki/spaces/~732385844/pages/3187295823/Exposure+Events+101).
 *
 * You need explicitly call it using the exposure property when you need an exposure event to be fired (all experiments should fire exposure events).
 *
 * @example Boolean experiment
 * ```ts
 * if (editorExperiment('example-boolean', true)) {
 *   // Run code for on variant
 * } else {
 *   // Run code for off variant
 * }
 * ```
 *
 * @example Multivariate experiment
 * ```ts
 * switch (true) {
 * 	 case editorExperiment('example-multivariate', 'one'):
 *   	 // Run code for variant one
 *   break;
 *   case editorExperiment('example-multivariate', 'two'):
 *     // Run code for variant two
 *     break;
 *   case editorExperiment('example-multivariate', 'three'):
 *     // Run code for variant three
 *     break;
 *   }
 * }
 *```

 @example Experiment with exposure event
 * ```ts
 * // Inside feature surface where either the control or variant should be shown
 * if (editorExperiment('example-boolean', true, { exposure: true })) {
 * 	// Run code for on variant
 * } else {
 * 	// Run code for off variant
 * }
 * ```
 */
export function editorExperiment(experimentName, expectedExperimentValue) {
  var _experimentConfig$pro;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    exposure: false
  };
  var experimentConfig = editorExperimentsConfig[experimentName];
  if (_overrides[experimentName] !== undefined) {
    // This will be hit in the case of a test setting an override
    return _overrides[experimentName] === expectedExperimentValue;
  }
  if (!_product) {
    // This will be hit in the case of a product not having setup the editor experiment tooling
    return (experimentConfig === null || experimentConfig === void 0 ? void 0 : experimentConfig.defaultValue) === expectedExperimentValue;
  }

  // Typescript is complaining here about accessing the productKeys property
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var experimentKey = experimentConfig === null || experimentConfig === void 0 || (_experimentConfig$pro = experimentConfig.productKeys) === null || _experimentConfig$pro === void 0 ? void 0 : _experimentConfig$pro[_product];
  if (!experimentKey) {
    var _editorExperimentsCon;
    // This will be hit in the case of an experiment not being set up for the product
    return ((_editorExperimentsCon = editorExperimentsConfig[experimentName]) === null || _editorExperimentsCon === void 0 ? void 0 : _editorExperimentsCon.defaultValue) === expectedExperimentValue;
  }

  // eslint-disable-next-line @atlaskit/platform/use-recommended-utils
  var experimentValue = FeatureGates.getExperimentValue(
  // @ts-ignore
  experimentKey, experimentConfig.param, experimentConfig.defaultValue, {
    typeGuard: experimentConfig.typeGuard,
    fireExperimentExposure: options.exposure
  });
  return expectedExperimentValue === experimentValue;
}
// type Unstable_EditorExperimentParams = {};
/**
 * @warning This currently lacks type safety on the param names and return values
 * and has limited associated test tooling.
 *
 * It also only works for experiments where the key matches the productKey used.
 *
 * The typeguard and default value is also expected to move to the experiment config
 */
export function unstable_editorExperimentParam(experimentName, paramName, options) {
  var _paramOverrides$exper, _options$exposure;
  if (((_paramOverrides$exper = _paramOverrides[experimentName]) === null || _paramOverrides$exper === void 0 ? void 0 : _paramOverrides$exper[paramName]) !== undefined) {
    // This will be hit in the case of a test setting an override

    return _paramOverrides[experimentName][paramName];
  }

  // eslint-disable-next-line @atlaskit/platform/use-recommended-utils
  var experimentValue = FeatureGates.getExperimentValue(experimentName, paramName, options.defaultValue, {
    typeGuard: options.typeGuard,
    fireExperimentExposure: (_options$exposure = options.exposure) !== null && _options$exposure !== void 0 ? _options$exposure : false
  });
  return experimentValue;
}