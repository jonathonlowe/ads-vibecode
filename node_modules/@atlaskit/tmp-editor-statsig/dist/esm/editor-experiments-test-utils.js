import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlaskit/editor/no-re-export */
// Entry file in package.json

// This is loosely based on the `ffTest` util from `@atlassian/feature-flags-test-utils` package.

import { setupEditorExperiments } from './setup';
import { editorExperimentsConfig } from './experiments-config';
/**
 * This is a utility function for testing editor experiments.
 *
 * @example Boolean experiment
 * ```ts
 * eeTest('example-boolean', {
 *   true: () => {
 *     expect(editorExperiment('example-boolean', true)).toBe(true);
 *     expect(editorExperiment('example-boolean', false)).toBe(false);
 *   },
 *   false: () => {
 *     expect(editorExperiment('example-boolean', false)).toBe(true);
 *     expect(editorExperiment('example-boolean', true)).toBe(false);
 *   },
 * })
 * ```
 *
 * @example Multivariate experiment
 * ```ts
 * eeTest('example-multivariate', {
 *   one: () => {
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(false);
 *   },
 *   two: () => {
 *     expect(editorExperiment('example-multivariate', 'two')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 *   three: () => {
 *     expect(editorExperiment('example-multivariate', 'three')).toBe(true);
 *     expect(editorExperiment('example-multivariate', 'one')).toBe(false);
 *   },
 * })
 * ```
 *
 * API based on Legacy ffTest API
 * - https://hello.atlassian.net/wiki/spaces/AF/pages/2569505829/Task+Testing+your+feature+flag+in+platform+and+product#Legacy-API-lEGACY
 */
function eeTest(experimentName, cases, otherExperiments) {
  setupEditorExperiments('test', {});
  describe("eeTest: ".concat(experimentName), function () {
    afterEach(function () {
      setupEditorExperiments('test', {});
    });
    var isBooleanExperiment = typeof editorExperimentsConfig[experimentName].defaultValue === 'boolean';
    if (isBooleanExperiment && Object.keys(cases).length !== 2) {
      throw new Error("Expected exactly 2 cases for boolean experiment ".concat(experimentName, ", got ").concat(Object.keys(cases).length));
    }
    test.each(Object.keys(cases))("".concat(experimentName, ": %s"), /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {
        var testCaseKey, convertedValue, testCase;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              testCaseKey = value; // For boolean experiments, we need to convert the 'on' and 'off' cases to boolean `true` and `false` values.
              convertedValue = isBooleanExperiment ? testCaseKey === 'true' ? true : false : testCaseKey;
              setupEditorExperiments('test', _objectSpread(_defineProperty({}, experimentName, convertedValue), otherExperiments));
              testCase = cases[testCaseKey]; // @ts-ignore
              _context.next = 6;
              return Promise.resolve(testCase());
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
}

/**
 * eeTest.describe() Wrapper utility for describe() that runs a test with a editor experiment overides.
 *
 * @example Single experiment
 * ```ts
 * eeTest.describe('Description of test "suite" containing nested suites and tests.', { 'example-boolean': true }, () => {
 *  it('should do the thing', () => {
 * 		expect(editorExperiment('example-boolean', true)).toBe(true);
 * 	});
 * });
 * ```
 *
 *
 * @example Multiple experiment
 * ```ts
 * eeTest.describe('Description of test "suite" containing nested suites and tests.', { 'example-boolean': true, 'example-multivariate': 'three' }, () => {
 *  it('should do the thing', () => {
 * 		expect(editorExperiment('example-boolean', true)).toBe(true);
 * 	});
 * });
 * ```
 *
 * API based on next gen ffTest API
 * - https://hello.atlassian.net/wiki/spaces/AF/pages/2569505829/Task+Testing+your+feature+flag+in+platform+and+product#Next-Generation-API-%E2%9C%A8
 */
eeTest.describe = function eeTestDescribe(experimentName, describeName) {
  function eeTest(value) {
    var describeBody = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    describe("".concat(describeName, " [").concat(value, "]"), function () {
      beforeEach(function () {
        setupEditorExperiments('test', _defineProperty({}, experimentName, value));
      });
      afterEach(function () {
        setupEditorExperiments('test', {});
      });
      describeBody();
    });
    setupEditorExperiments('test', {});
  }
  function variant(value, describeBody) {
    eeTest(value, describeBody);
  }
  function each(describeBody) {
    var possibleValues =
    // @ts-ignore
    editorExperimentsConfig[experimentName].typeGuard.values;
    if (possibleValues) {
      var _iterator = _createForOfIteratorHelper(possibleValues),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;
          eeTest(value, describeBody);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      // if there are no possible values, it's a boolean experiment
      eeTest(true, describeBody);
      eeTest(false, describeBody);
    }
  }
  return {
    variant: variant,
    each: each
  };
};
export { eeTest };