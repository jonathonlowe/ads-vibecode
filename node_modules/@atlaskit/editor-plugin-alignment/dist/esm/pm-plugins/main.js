import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { isAlignable } from '../editor-commands';
import { getActiveAlignment } from './utils';
export function createInitialPluginState(editorState, pluginConfig) {
  return {
    align: getActiveAlignment(editorState) || pluginConfig.align,
    isEnabled: true
  };
}
export var pluginKey = new PluginKey('alignmentPlugin');
export function createPlugin(dispatch, pluginConfig) {
  return new SafePlugin({
    key: pluginKey,
    state: {
      init: function init(_, editorState) {
        return createInitialPluginState(editorState, pluginConfig);
      },
      apply: function apply(_tr, state, _prevState, nextState) {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var nextPluginState = getActiveAlignment(nextState);
        var isEnabled = isAlignable(nextPluginState)(nextState);
        var newState = _objectSpread(_objectSpread({}, state), {}, {
          align: nextPluginState,
          isEnabled: isEnabled
        });
        if (nextPluginState !== state.align || isEnabled !== state.isEnabled) {
          dispatch(pluginKey, newState);
        }
        return newState;
      }
    }
  });
}