"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAlignable = exports.changeAlignment = void 0;
var _analytics = require("@atlaskit/editor-common/analytics");
var _commands = require("@atlaskit/editor-common/commands");
var _editorAnalytics = require("@atlaskit/editor-common/editor-analytics");
var _state = require("@atlaskit/editor-prosemirror/state");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
/**
 * Iterates over the commands one after the other,
 * passes the tr through and dispatches the cumulated transaction
 */
function cascadeCommands(cmds) {
  return function (state, dispatch) {
    var baseTr = state.tr;
    var shouldDispatch = false;
    var onDispatchAction = function onDispatchAction(tr) {
      var selectionJSON = tr.selection.toJSON();
      baseTr.setSelection(_state.Selection.fromJSON(baseTr.doc, selectionJSON));
      tr.steps.forEach(function (st) {
        baseTr.step(st);
      });
      shouldDispatch = true;
    };
    cmds.forEach(function (cmd) {
      return cmd(state, onDispatchAction);
    });
    if (dispatch && shouldDispatch) {
      dispatch(baseTr);
      return true;
    }
    return false;
  };
}
var isAlignable = exports.isAlignable = function isAlignable(align) {
  return function (state, dispatch) {
    var _state$schema = state.schema,
      _state$schema$nodes = _state$schema.nodes,
      paragraph = _state$schema$nodes.paragraph,
      heading = _state$schema$nodes.heading,
      alignment = _state$schema.marks.alignment;
    return (0, _commands.toggleBlockMark)(alignment, function () {
      return !align ? undefined : align === 'start' ? false : {
        align: align
      };
    }, [paragraph, heading])(state, dispatch);
  };
};
var changeBlockAlignmentWithAnalytics = function changeBlockAlignmentWithAnalytics(editorAnalyticsApi, align, inputMethod) {
  return function (state, dispatch) {
    var _state$schema2 = state.schema,
      _state$schema2$nodes = _state$schema2.nodes,
      paragraph = _state$schema2$nodes.paragraph,
      heading = _state$schema2$nodes.heading,
      alignment = _state$schema2.marks.alignment;
    return (0, _editorAnalytics.withAnalytics)(editorAnalyticsApi, {
      eventType: _analytics.EVENT_TYPE.TRACK,
      actionSubject: _analytics.ACTION_SUBJECT.ALIGNMENT,
      action: _analytics.ACTION.UPDATED,
      actionSubjectId: _analytics.ACTION_SUBJECT_ID.TEXT,
      attributes: {
        alignmentType: align,
        inputMethod: inputMethod
      }
    })((0, _commands.toggleBlockMark)(alignment, function () {
      return !align ? undefined : align === 'start' ? false : {
        align: align
      };
    }, [paragraph, heading]))(state, dispatch);
  };
};
var changeImageAlignmentWithAnalytics = function changeImageAlignmentWithAnalytics(editorAnalyticsApi, align, inputMethod) {
  return function (state, dispatch) {
    return (0, _editorAnalytics.withAnalytics)(editorAnalyticsApi, {
      eventType: _analytics.EVENT_TYPE.TRACK,
      actionSubject: _analytics.ACTION_SUBJECT.ALIGNMENT,
      action: _analytics.ACTION.UPDATED,
      actionSubjectId: _analytics.ACTION_SUBJECT_ID.MEDIA_SINGLE,
      attributes: {
        alignmentType: align,
        inputMethod: inputMethod
      }
    })((0, _commands.changeImageAlignment)(align))(state, dispatch);
  };
};
var changeAlignment = exports.changeAlignment = function changeAlignment(align, api, inputMethod) {
  return function (state, dispatch) {
    var _api$analytics, _api$analytics2;
    var _state$schema3 = state.schema,
      _state$schema3$nodes = _state$schema3.nodes,
      paragraph = _state$schema3$nodes.paragraph,
      heading = _state$schema3$nodes.heading,
      alignment = _state$schema3.marks.alignment;
    return cascadeCommands((0, _platformFeatureFlags.fg)('platform_editor_add_alignment_tracking') ? [changeImageAlignmentWithAnalytics(api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions, align, inputMethod), changeBlockAlignmentWithAnalytics(api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions, align, inputMethod)] : [(0, _commands.changeImageAlignment)(align), (0, _commands.toggleBlockMark)(alignment, function () {
      return !align ? undefined : align === 'start' ? false : {
        align: align
      };
    }, [paragraph, heading])])(state, dispatch);
  };
};