"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInitialPluginState = createInitialPluginState;
exports.createPlugin = createPlugin;
exports.pluginKey = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _editorCommands = require("../editor-commands");
var _utils = require("./utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function createInitialPluginState(editorState, pluginConfig) {
  return {
    align: (0, _utils.getActiveAlignment)(editorState) || pluginConfig.align,
    isEnabled: true
  };
}
var pluginKey = exports.pluginKey = new _state.PluginKey('alignmentPlugin');
function createPlugin(dispatch, pluginConfig) {
  return new _safePlugin.SafePlugin({
    key: pluginKey,
    state: {
      init: function init(_, editorState) {
        return createInitialPluginState(editorState, pluginConfig);
      },
      apply: function apply(_tr, state, _prevState, nextState) {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var nextPluginState = (0, _utils.getActiveAlignment)(nextState);
        var isEnabled = (0, _editorCommands.isAlignable)(nextPluginState)(nextState);
        var newState = _objectSpread(_objectSpread({}, state), {}, {
          align: nextPluginState,
          isEnabled: isEnabled
        });
        if (nextPluginState !== state.align || isEnabled !== state.isEnabled) {
          dispatch(pluginKey, newState);
        }
        return newState;
      }
    }
  });
}