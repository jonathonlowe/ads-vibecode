import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import React from 'react';
import rafSchedule from 'raf-schd';
const containerDivStyle = {
  width: '100%',
  position: 'relative'
};

// Not using styled-components here for performance
// and framework-agnostic reasons.
const sizerStyle = {
  display: 'block',
  position: 'absolute',
  top: 0,
  left: 0,
  height: 0,
  width: '100%',
  opacity: 0,
  overflow: 'hidden',
  pointerEvents: 'none',
  zIndex: -1
};

// add a definition for a data field to the resize object
// since HTMLElements do not have this.

/**
 * @deprecated use WidthObserver instead
 *
 * This component uses iframes for rendering and is currently
 * not performant. It will be DEPRECATED in the future.
 * It is recommended that you instead use WidthObserver from @atlaskit/width-detector
 */
export default class WidthDetector extends React.Component {
  constructor(props) {
    super(props);

    // eslint-disable-next-line no-console
    _defineProperty(this, "state", {});
    _defineProperty(this, "handleResize", rafSchedule(() => {
      const {
        container
      } = this;
      if (!container) {
        return;
      }
      const width = container.offsetWidth;
      this.setState({
        width
      });
      if (this.props.onResize) {
        this.props.onResize(width);
      }
    }));
    _defineProperty(this, "handleContainerRef", ref => {
      if (!ref) {
        return;
      }
      this.container = ref;
    });
    _defineProperty(this, "handleObjectRef", ref => {
      if (!ref) {
        return;
      }
      this.resizeObject = ref;
    });
    _defineProperty(this, "handleObjectLoad", () => {
      if (!this.resizeObject) {
        return;
      }
      this.resizeObjectDocument = this.resizeObject.contentDocument.defaultView;
      this.resizeObjectDocument.addEventListener('resize', this.handleResize);
      this.handleResize();
    });
    console.warn('WidthDetector will be deprecated, please use WidthObserver from @atlaskit/width-detector instead.');
  }
  componentDidMount() {
    if (this.resizeObject) {
      this.resizeObject.data = 'about:blank';
    }
    // Calculate width first time, after object has loaded.
    // Prevents it from getting in a weird state where width is always 0.
    this.handleResize();
  }
  componentWillUnmount() {
    this.handleResize.cancel();
    if (this.resizeObjectDocument) {
      this.resizeObjectDocument.removeEventListener('resize', this.handleResize);
    }
  }
  render() {
    // @TODO: Add alternative method using IntersectionObserver or ResizeObserver

    const sizerEl = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("object", {
      type: "text/html"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: sizerStyle,
      ref: this.handleObjectRef,
      onLoad: this.handleObjectLoad,
      "aria-hidden": true,
      tabIndex: -1
    }));
    // pluck non-DOM props off the props so we can safely spread remaining items
    const {
      containerStyle,
      onResize,
      children,
      ...props
    } = this.props;
    return /*#__PURE__*/React.createElement("div", _extends({}, props, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: {
        ...containerDivStyle,
        ...containerStyle
      },
      ref: this.handleContainerRef
    }), children(this.state.width), sizerEl);
  }
}
_defineProperty(WidthDetector, "defaultProps", {
  containerStyle: {}
});