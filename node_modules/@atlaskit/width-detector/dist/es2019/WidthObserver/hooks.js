import React from 'react';
export function useInView(options = {}) {
  const ref = React.useRef();
  const observerInstance = React.useRef();
  const [state, setState] = React.useState({
    inView: false,
    entry: undefined,
    target: undefined
  });
  const {
    threshold,
    root,
    rootMargin
  } = options;
  const setRef = React.useCallback(node => {
    observerInstance.current = new IntersectionObserver(entries => {
      if (entries && entries.length) {
        const intersection = entries[0];
        const {
          isIntersecting,
          intersectionRatio
        } = intersection;
        if (intersectionRatio >= 0) {
          // Note: `0` will be used here when an array of numbers is passed as the threshold, which doesn't feel right
          const numericThreshold = typeof threshold === 'number' ? threshold : 0;
          let inView = intersectionRatio >= numericThreshold;
          if (isIntersecting !== undefined) {
            inView = inView && isIntersecting;
          }
          setState({
            inView,
            entry: intersection,
            target: node
          });
        }
      }
    }, {
      threshold,
      root,
      rootMargin
    });
    if (ref.current) {
      observerInstance.current.unobserve(ref.current);
    }
    if (node) {
      observerInstance.current.observe(node);
    }

    // Store a reference to the node
    ref.current = node;
  }, [threshold, root, rootMargin]);

  /**
   * Unsubscribe IntersectionObserver before unmounting a component.
   */
  React.useEffect(() => {
    return () => {
      if (observerInstance.current && ref.current) {
        observerInstance.current.unobserve(ref.current);
      }
    };
  }, []);
  return [setRef, state.inView, state.target, state.entry];
}