"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _rafSchd = _interopRequireDefault(require("raf-schd"));
var _excluded = ["containerStyle", "onResize", "children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // eslint-disable-next-line @repo/internal/fs/filename-pattern-match
var containerDivStyle = {
  width: '100%',
  position: 'relative'
};

// Not using styled-components here for performance
// and framework-agnostic reasons.
var sizerStyle = {
  display: 'block',
  position: 'absolute',
  top: 0,
  left: 0,
  height: 0,
  width: '100%',
  opacity: 0,
  overflow: 'hidden',
  pointerEvents: 'none',
  zIndex: -1
};

// add a definition for a data field to the resize object
// since HTMLElements do not have this.
/**
 * @deprecated use WidthObserver instead
 *
 * This component uses iframes for rendering and is currently
 * not performant. It will be DEPRECATED in the future.
 * It is recommended that you instead use WidthObserver from @atlaskit/width-detector
 */
var WidthDetector = exports.default = /*#__PURE__*/function (_React$Component) {
  function WidthDetector(props) {
    var _this;
    (0, _classCallCheck2.default)(this, WidthDetector);
    _this = _callSuper(this, WidthDetector, [props]);

    // eslint-disable-next-line no-console
    (0, _defineProperty2.default)(_this, "state", {});
    (0, _defineProperty2.default)(_this, "handleResize", (0, _rafSchd.default)(function () {
      var _this2 = _this,
        container = _this2.container;
      if (!container) {
        return;
      }
      var width = container.offsetWidth;
      _this.setState({
        width: width
      });
      if (_this.props.onResize) {
        _this.props.onResize(width);
      }
    }));
    (0, _defineProperty2.default)(_this, "handleContainerRef", function (ref) {
      if (!ref) {
        return;
      }
      _this.container = ref;
    });
    (0, _defineProperty2.default)(_this, "handleObjectRef", function (ref) {
      if (!ref) {
        return;
      }
      _this.resizeObject = ref;
    });
    (0, _defineProperty2.default)(_this, "handleObjectLoad", function () {
      if (!_this.resizeObject) {
        return;
      }
      _this.resizeObjectDocument = _this.resizeObject.contentDocument.defaultView;
      _this.resizeObjectDocument.addEventListener('resize', _this.handleResize);
      _this.handleResize();
    });
    console.warn('WidthDetector will be deprecated, please use WidthObserver from @atlaskit/width-detector instead.');
    return _this;
  }
  (0, _inherits2.default)(WidthDetector, _React$Component);
  return (0, _createClass2.default)(WidthDetector, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.resizeObject) {
        this.resizeObject.data = 'about:blank';
      }
      // Calculate width first time, after object has loaded.
      // Prevents it from getting in a weird state where width is always 0.
      this.handleResize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleResize.cancel();
      if (this.resizeObjectDocument) {
        this.resizeObjectDocument.removeEventListener('resize', this.handleResize);
      }
    }
  }, {
    key: "render",
    value: function render() {
      // @TODO: Add alternative method using IntersectionObserver or ResizeObserver

      var sizerEl = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("object", {
        type: "text/html"
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        ,
        style: sizerStyle,
        ref: this.handleObjectRef,
        onLoad: this.handleObjectLoad,
        "aria-hidden": true,
        tabIndex: -1
      }));
      // pluck non-DOM props off the props so we can safely spread remaining items
      var _this$props = this.props,
        containerStyle = _this$props.containerStyle,
        onResize = _this$props.onResize,
        children = _this$props.children,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, props, {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        style: _objectSpread(_objectSpread({}, containerDivStyle), containerStyle),
        ref: this.handleContainerRef
      }), children(this.state.width), sizerEl);
    }
  }]);
}(_react.default.Component);
(0, _defineProperty2.default)(WidthDetector, "defaultProps", {
  containerStyle: {}
});