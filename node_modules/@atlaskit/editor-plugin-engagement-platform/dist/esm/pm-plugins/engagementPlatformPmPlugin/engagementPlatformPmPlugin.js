import _typeof from "@babel/runtime/helpers/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { engagementPlatformPmPluginKey } from './engagementPlatformPmPluginKey';
export var engagementPlatformPmPlugin = function engagementPlatformPmPlugin(pluginConfig) {
  return new SafePlugin({
    key: engagementPlatformPmPluginKey,
    state: {
      init: function init() {
        return {
          messageStates: {},
          startMessagePromises: {},
          stopMessagePromises: {},
          epComponents: pluginConfig.epComponents,
          epHooks: pluginConfig.epHooks,
          coordinationClient: pluginConfig.coordinationClient
        };
      },
      apply: function apply(tr, pluginState) {
        var meta = tr.getMeta(engagementPlatformPmPluginKey);
        if (!meta) {
          return pluginState;
        }
        var state = _objectSpread({}, pluginState);
        var _iterator = _createForOfIteratorHelper(meta.commands),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var command = _step.value;
            switch (command.type) {
              case 'setMessageState':
                state = _objectSpread(_objectSpread({}, state), {}, {
                  messageStates: _objectSpread(_objectSpread({}, state.messageStates), {}, _defineProperty({}, command.messageId, command.state))
                });
                break;
              case 'setStartMessagePromise':
                if (command.promise !== undefined) {
                  state = _objectSpread(_objectSpread({}, state), {}, {
                    startMessagePromises: _objectSpread(_objectSpread({}, state.startMessagePromises), {}, _defineProperty({}, command.messageId, command.promise))
                  });
                  break;
                } else {
                  // If the promise is undefined, remove it from the state
                  var _state$startMessagePr = state.startMessagePromises,
                    _command$messageId = command.messageId,
                    _ = _state$startMessagePr[_command$messageId],
                    startMessagePromises = _objectWithoutProperties(_state$startMessagePr, [_command$messageId].map(_toPropertyKey));
                  state = _objectSpread(_objectSpread({}, state), {}, {
                    startMessagePromises: startMessagePromises
                  });
                }
                break;
              case 'setStopMessagePromise':
                if (command.promise !== undefined) {
                  state = _objectSpread(_objectSpread({}, state), {}, {
                    stopMessagePromises: _objectSpread(_objectSpread({}, state.stopMessagePromises), {}, _defineProperty({}, command.messageId, command.promise))
                  });
                  break;
                } else {
                  // If the promise is undefined, remove it from the state
                  var _state$stopMessagePro = state.stopMessagePromises,
                    _command$messageId2 = command.messageId,
                    _2 = _state$stopMessagePro[_command$messageId2],
                    stopMessagePromises = _objectWithoutProperties(_state$stopMessagePro, [_command$messageId2].map(_toPropertyKey));
                  state = _objectSpread(_objectSpread({}, state), {}, {
                    stopMessagePromises: stopMessagePromises
                  });
                }
                break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return state;
      }
    }
  });
};