import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { CreateUIAnalyticsEvent } from '@atlaskit/analytics-next/types';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import type { PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { AllEditorPresetPluginTypes, EditorPresetBuilder } from '@atlaskit/editor-common/preset';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { PublicPluginAPI, Transformer } from '@atlaskit/editor-common/types';
import { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { EditorConfig, EditorProps } from '../types';
import type { EditorNextProps } from '../types/editor-props';
export interface EditorViewProps extends WrappedComponentProps {
    editorProps: (EditorProps | EditorNextProps) & {
        preset?: EditorNextProps['preset'];
    };
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
    providerFactory: ProviderFactory;
    portalProviderAPI: PortalProviderAPI;
    nodeViewPortalProviderAPI: PortalProviderAPI;
    disabled?: boolean;
    render?: (props: {
        editor: JSX.Element;
        view?: EditorView;
        config: EditorConfig;
        eventDispatcher: EventDispatcher;
        transformer?: Transformer<string>;
        dispatchAnalyticsEvent: DispatchAnalyticsEvent;
        editorRef: React.RefObject<HTMLDivElement>;
        editorAPI: PublicPluginAPI<any> | undefined;
    }) => JSX.Element;
    onEditorCreated: (instance: {
        view: EditorView;
        config: EditorConfig;
        eventDispatcher: EventDispatcher;
        transformer?: Transformer<string>;
    }) => void;
    onEditorDestroyed: (instance: {
        view: EditorView;
        config: EditorConfig;
        eventDispatcher: EventDispatcher;
        transformer?: Transformer<string>;
    }) => void;
    preset: EditorPresetBuilder<string[], AllEditorPresetPluginTypes[]>;
}
export declare function ReactEditorView(props: EditorViewProps): React.JSX.Element;
declare const _default: React.FC<import("react-intl-next").WithIntlProps<EditorViewProps>> & {
    WrappedComponent: React.ComponentType<EditorViewProps>;
};
export default _default;
