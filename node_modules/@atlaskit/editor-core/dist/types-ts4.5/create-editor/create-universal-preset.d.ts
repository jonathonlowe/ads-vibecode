/// <reference types="react" />
import { type InitialPluginConfiguration } from '../presets/universal';
import type { EditorProps } from '../types';
export declare function createUniversalPreset({ props, prevProps, initialPluginConfiguration, }: {
    props: EditorProps;
    prevProps?: EditorProps;
    initialPluginConfiguration?: InitialPluginConfiguration;
}): import("@atlaskit/editor-common/preset").EditorPresetBuilder<[
    "codeBidiWarning",
    "pasteOptionsToolbarPlugin",
    import("@atlaskit/editor-common/preset").MaybePluginName<"fragmentPlugin">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"border">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"findReplace">,
    "avatarGroup",
    import("@atlaskit/editor-common/preset").MaybePluginName<"beforePrimaryToolbar">,
    "insertBlock",
    "toolbarListsIndentation",
    import("@atlaskit/editor-common/preset").MaybePluginName<"scrollIntoView">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"indentation">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"status">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"customAutoformat">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"card">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"layout">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"placeholderText">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"date">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"annotation">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"extension">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"contextPanel">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"panel">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"maxContentSize">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"collabEdit">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"media">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"imageUpload">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"saveOnEnter">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"helpDialog">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"feedbackDialog">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"taskDecision">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"table">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"emoji">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"mention">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"caption">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"mediaInsert">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"media">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"annotation">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"grid">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"guideline">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"expand">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"rule">,
    "list",
    import("@atlaskit/editor-common/preset").MaybePluginName<"textColor">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"alignment">,
    import("@atlaskit/editor-common/preset").MaybePluginName<"breakout">,
    "batchAttributeUpdates",
    "contentInsertion",
    "accessibilityUtils",
    "dataConsumer",
    "ufo",
    "codeBlock",
    "selection",
    "floatingToolbar",
    "copyButton",
    "submitEditor",
    "editorDisabled",
    "unsupportedContent",
    "placeholder",
    "quickInsert",
    "width",
    "textFormatting",
    "hyperlink",
    "selectionToolbar",
    "clearMarksOnEmptyDoc",
    "blockType",
    string,
    "primaryToolbar",
    string,
    "typeAhead",
    "decorations",
    "base",
    "contextIdentifier",
    "composition",
    string,
    "focus",
    "clipboard",
    "paste",
    "betterTypeHistory",
    string,
    "featureFlags"
], [
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"codeBidiWarning", {
        pluginConfiguration: import("@atlaskit/editor-plugins/code-bidi-warning").CodeBidiWarningPluginOptions | undefined;
    }, import("@atlaskit/editor-plugins/code-bidi-warning").CodeBidiWarningPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"pasteOptionsToolbarPlugin", {
        dependencies: import("packages/editor/editor-plugin-paste-options-toolbar/dist/types/pasteOptionsToolbarPluginType").PasteOptionsToolbarPluginDependencies;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"fragmentPlugin", {}, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"border", {}, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"findReplace", {
        pluginConfiguration: import("@atlaskit/editor-plugins/find-replace").FindReplacePluginOptions;
        sharedState: import("@atlaskit/editor-plugins/find-replace").FindReplacePluginState | undefined;
        dependencies: import("packages/editor/editor-plugin-find-replace/dist/types/findReplacePluginType").FindReplacePluginDependencies;
        actions: {
            registerToolbarButton: (params: import("@atlaskit/editor-plugins/find-replace").FindReplaceToolbarButtonActionProps) => import("react").ReactNode;
            activateFindReplace: (triggerMethod?: import("@atlaskit/editor-common/analytics").TRIGGER_METHOD.SHORTCUT | import("@atlaskit/editor-common/analytics").TRIGGER_METHOD.TOOLBAR | import("@atlaskit/editor-common/analytics").TRIGGER_METHOD.EXTERNAL | undefined) => boolean;
        };
    }, import("@atlaskit/editor-plugins/find-replace").FindReplacePluginOptions> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"avatarGroup", {
        pluginConfiguration: import("@atlaskit/editor-plugins/avatar-group").AvatarGroupPluginOptions;
        dependencies: import("packages/editor/editor-plugin-avatar-group/dist/types/avatarGroupPluginType").AvatarGroupPluginDependencies;
        actions: {
            getToolbarItem: ({ inviteToEditHandler, isInviteToEditButtonSelected, inviteToEditComponent, }: import("@atlaskit/editor-common/collab").CollabInviteToEditProps) => JSX.Element | null;
        };
    }, import("@atlaskit/editor-plugins/avatar-group").AvatarGroupPluginOptions>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"beforePrimaryToolbar", {
        pluginConfiguration: {
            beforePrimaryToolbarComponents?: import("@atlaskit/editor-plugins/before-primary-toolbar").ReactComponents | undefined;
        };
        dependencies: import("packages/editor/editor-plugin-before-primary-toolbar/dist/types/beforePrimaryToolbarPluginType").BeforePrimaryToolbarPluginDependencies;
    }, {
        beforePrimaryToolbarComponents?: import("@atlaskit/editor-plugins/before-primary-toolbar").ReactComponents | undefined;
    }> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"insertBlock", {
        pluginConfiguration: import("@atlaskit/editor-plugins/insert-block").InsertBlockPluginOptions | undefined;
        dependencies: import("@atlaskit/editor-plugins/insert-block").InsertBlockPluginDependencies;
        actions: {
            toggleAdditionalMenu: () => void;
        };
        sharedState: import("@atlaskit/editor-plugins/insert-block").InsertBlockPluginState | undefined;
    }, import("@atlaskit/editor-plugins/insert-block").InsertBlockPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"toolbarListsIndentation", {
        pluginConfiguration: import("@atlaskit/editor-plugins/toolbar-lists-indentation").ToolbarListsIndentationPluginOptions;
        dependencies: import("packages/editor/editor-plugin-toolbar-lists-indentation/dist/types/toolbarListsIndentationPluginType").ToolbarListsIndentationPluginDependencies;
    }, import("@atlaskit/editor-plugins/toolbar-lists-indentation").ToolbarListsIndentationPluginOptions>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"scrollIntoView", {}, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"indentation", {
        dependencies: import("packages/editor/editor-plugin-indentation/dist/types/indentationPluginType").IndentationPluginDependencies;
        actions: import("packages/editor/editor-plugin-indentation/dist/types/indentationPluginType").IndentationPluginActions;
        sharedState: {
            isIndentationAllowed: boolean;
            indentDisabled: boolean;
            outdentDisabled: boolean;
        } | undefined;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"status", {
        dependencies: import("packages/editor/editor-plugin-status/dist/types/statusPluginType").StatusPluginDependencies;
        pluginConfiguration: import("@atlaskit/editor-plugins/status").StatusPluginOptions | undefined;
        actions: import("packages/editor/editor-plugin-status/dist/types/statusPluginType").StatusPluginActions;
        commands: import("packages/editor/editor-plugin-status/dist/types/statusPluginType").StatusPluginCommands;
        sharedState: import("@atlaskit/editor-plugins/status").StatusState | undefined;
    }, import("@atlaskit/editor-plugins/status").StatusPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"customAutoformat", {
        sharedState: import("@atlaskit/editor-plugins/custom-autoformat").CustomAutoformatPluginSharedState | undefined;
        pluginConfiguration: import("@atlaskit/editor-plugins/custom-autoformat").CustomAutoformatPluginOptions;
        actions: {
            setProvider: (provider: Promise<import("@atlaskit/editor-common/provider-factory").AutoformattingProvider>) => Promise<boolean>;
        };
    }, import("@atlaskit/editor-plugins/custom-autoformat").CustomAutoformatPluginOptions> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"card", {
        pluginConfiguration: import("@atlaskit/editor-plugins/card").CardPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-card/dist/types/cardPluginType").CardPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/card").CardPluginState | null;
        actions: import("@atlaskit/editor-common/card").CardPluginActions;
    }, import("@atlaskit/editor-plugins/card").CardPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"layout", {
        pluginConfiguration: import("@atlaskit/editor-plugins/layout").LayoutPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-layout/dist/types/layoutPluginType").LayoutPluginDependencies;
        actions: {
            insertLayoutColumns: (inputMethod: import("@atlaskit/editor-common/types").TOOLBAR_MENU_TYPE) => import("@atlaskit/editor-common/types").Command;
        };
    }, import("@atlaskit/editor-plugins/layout").LayoutPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"placeholderText", {
        dependencies: import("packages/editor/editor-plugin-placeholder-text/dist/types/placeholderTextPluginType").PlaceholderTextPluginDependencies;
        pluginConfiguration: import("@atlaskit/editor-plugins/placeholder-text").PlaceholderTextPluginOptions;
        sharedState: import("@atlaskit/editor-plugins/placeholder-text").PlaceholderTextPluginState | undefined;
        actions: {
            showPlaceholderFloatingToolbar: (state: import("prosemirror-state").EditorState, dispatch: (tr: import("prosemirror-state").Transaction) => void) => boolean;
        };
    }, import("@atlaskit/editor-plugins/placeholder-text").PlaceholderTextPluginOptions> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"date", {
        pluginConfiguration: import("@atlaskit/editor-plugins/date").DatePluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-date/dist/types/datePluginType").DatePluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/date").DatePluginSharedState;
        commands: {
            insertDate: import("@atlaskit/editor-plugins/date").InsertDate;
            deleteDate: import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/date").DatePluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"annotation", {
        pluginConfiguration: import("@atlaskit/editor-plugins/annotation").AnnotationProviders | undefined;
        sharedState: import("@atlaskit/editor-plugins/annotation").InlineCommentPluginState | undefined;
        dependencies: import("packages/editor/editor-plugin-annotation/dist/types/annotationPluginType").AnnotationPluginDependencies;
        actions: {
            stripNonExistingAnnotations: (slice: import("prosemirror-model").Slice, state: import("prosemirror-state").EditorState) => boolean | undefined;
            setInlineCommentDraftState: (drafting: boolean, inputMethod: import("@atlaskit/editor-plugins/annotation").InlineCommentInputMethod, targetType?: import("@atlaskit/editor-plugins/annotation").TargetType | undefined, targetNodeId?: string | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => import("@atlaskit/editor-common/types").Command;
            showCommentForBlockNode: (node: import("prosemirror-model").Node | null, viewMethod?: import("@atlaskit/editor-common/analytics").VIEW_METHOD | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => import("@atlaskit/editor-common/types").Command;
            hasAnyUnResolvedAnnotationInPage: (state: import("prosemirror-state").EditorState) => boolean;
        };
    }, import("@atlaskit/editor-plugins/annotation").AnnotationProviders | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"extension", {
        pluginConfiguration: import("@atlaskit/editor-plugins/extension").ExtensionPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-extension/dist/types/extensionPluginType").ExtensionPluginDependencies;
        sharedState: {
            showContextPanel: boolean | undefined;
            extensionProvider?: import("@atlaskit/editor-common/extensions").ExtensionProvider<import("@atlaskit/editor-common/extensions").Parameters> | undefined;
            processParametersAfter?: import("@atlaskit/editor-common/extensions").TransformAfter<import("@atlaskit/editor-common/extensions").Parameters> | undefined;
        } | undefined;
        actions: import("packages/editor/editor-plugin-extension/dist/types/extensionPluginType").ExtensionPluginActions;
    }, import("@atlaskit/editor-plugins/extension").ExtensionPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextPanel", {
        pluginConfiguration: import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined;
        actions: {
            applyChange: (tr: import("prosemirror-state").Transaction) => import("prosemirror-state").Transaction;
            showPanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").ShowObjectSidebar | undefined;
            closePanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebar | undefined;
            closePanelById?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebarById | undefined;
        };
        sharedState: {
            contents: import("react").ReactNode[] | undefined;
        } | undefined;
    }, import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"panel", {
        pluginConfiguration: import("@atlaskit/editor-plugins/panel").PanelPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-panel/dist/types/panelPluginType").PanelPluginDependencies;
        actions: {
            insertPanel: (inputMethod: import("@atlaskit/editor-common/analytics").INPUT_METHOD) => import("@atlaskit/editor-common/types").Command;
        };
    }, import("@atlaskit/editor-plugins/panel").PanelPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"maxContentSize", {
        sharedState: import("@atlaskit/editor-plugins/max-content-size").MaxContentSizePluginState | undefined;
        pluginConfiguration: number | undefined;
    }, number | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"collabEdit", {
        pluginConfiguration: import("@atlaskit/editor-plugins/collab-edit").PrivateCollabEditOptions;
        dependencies: import("packages/editor/editor-plugin-collab-edit/dist/types/collabEditPluginType").CollabEditPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/collab-edit").CollabEditPluginSharedState;
        actions: {
            getAvatarColor: (str: string) => {
                index: number;
                backgroundColor: string;
                textColor: string;
            };
            addInlineCommentMark: (props: {
                from: number;
                to: number;
                mark: import("prosemirror-model").Mark;
            }) => boolean;
            addInlineCommentNodeMark: (props: {
                pos: number;
                mark: import("prosemirror-model").Mark;
            }) => boolean;
            isRemoteReplaceDocumentTransaction: (tr: import("prosemirror-state").Transaction) => boolean;
            getCurrentCollabState: () => {
                version: number | undefined;
                sendableSteps: import("@atlaskit/editor-plugins/collab-edit").CollabSendableSteps | null | undefined;
                content: import("@atlaskit/editor-json-transformer").JSONNode | undefined;
            };
            validatePMJSONDocument: (doc: any) => boolean;
        };
    }, import("@atlaskit/editor-plugins/collab-edit").PrivateCollabEditOptions> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"media", {
        pluginConfiguration: import("@atlaskit/editor-plugins/media").MediaPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-media/dist/types/mediaPluginType").MediaPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/media/types").MediaPluginState | null;
        actions: {
            insertMediaAsMediaSingle: import("@atlaskit/editor-plugins/media/types").InsertMediaAsMediaSingle;
            setProvider: (provider: Promise<import("@atlaskit/editor-common/provider-factory").MediaProvider>) => boolean;
        };
        commands: {
            showMediaViewer: (media: import("@atlaskit/adf-schema").MediaADFAttrs) => import("@atlaskit/editor-common/types").EditorCommand;
            hideMediaViewer: import("@atlaskit/editor-common/types").EditorCommand;
            trackMediaPaste: (attrs: import("@atlaskit/adf-schema").MediaADFAttrs) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/media").MediaPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"imageUpload", {
        actions: {
            startUpload: () => import("@atlaskit/editor-common/types").Command;
        };
        sharedState: {
            active: boolean;
            enabled: boolean;
            hidden: boolean;
        } | undefined;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"saveOnEnter", {
        pluginConfiguration: import("packages/editor/editor-plugin-save-on-enter/dist/types/saveOnEnterPluginType").Config | undefined;
    }, import("packages/editor/editor-plugin-save-on-enter/dist/types/saveOnEnterPluginType").Config | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"helpDialog", {
        dependencies: import("packages/editor/editor-plugin-help-dialog/dist/types/helpDialogPluginType").HelpDialogDependencies;
        pluginConfiguration: boolean;
        sharedState: import("@atlaskit/editor-plugins/help-dialog").HelpDialogSharedState | null;
        actions: {
            openHelp(): void;
            closeHelp(): void;
        };
    }, boolean> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"feedbackDialog", {
        pluginConfiguration: import("@atlaskit/editor-common/types").FeedbackInfo;
        dependencies: import("packages/editor/editor-plugin-feedback-dialog/dist/types/feedbackDialogPluginType").FeedbackDialogPluginDependencies;
        actions: {
            openFeedbackDialog: (feedbackInfo?: import("@atlaskit/editor-common/types").FeedbackInfo | undefined) => Promise<unknown>;
        };
    }, import("@atlaskit/editor-common/types").FeedbackInfo> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"taskDecision", {
        pluginConfiguration: import("@atlaskit/editor-plugins/tasks-and-decisions").TasksAndDecisionsPluginOptions | undefined;
        sharedState: import("@atlaskit/editor-plugins/tasks-and-decisions").TaskAndDecisionsSharedState | undefined;
        dependencies: import("packages/editor/editor-plugin-tasks-and-decisions/dist/types/tasksAndDecisionsPluginType").TasksAndDecisionsPluginDependencies;
        actions: {
            insertTaskDecision: (listType: import("@atlaskit/editor-plugins/tasks-and-decisions").TaskDecisionListType, inputMethod?: import("@atlaskit/editor-common/analytics").INPUT_METHOD.FORMATTING | import("@atlaskit/editor-common/analytics").INPUT_METHOD.QUICK_INSERT | import("@atlaskit/editor-common/types").TOOLBAR_MENU_TYPE | undefined, addItem?: import("@atlaskit/editor-plugins/tasks-and-decisions").AddItemTransactionCreator | undefined, listLocalId?: string | undefined, itemLocalId?: string | undefined) => import("@atlaskit/editor-common/types").Command;
            indentTaskList: (inputMethod?: (import("@atlaskit/editor-common/analytics").INPUT_METHOD.FLOATING_TB | import("@atlaskit/editor-common/analytics").INPUT_METHOD.KEYBOARD | import("@atlaskit/editor-common/analytics").INPUT_METHOD.TOOLBAR) | undefined) => import("@atlaskit/editor-common/types").Command;
            outdentTaskList: (inputMethod?: (import("@atlaskit/editor-common/analytics").INPUT_METHOD.FLOATING_TB | import("@atlaskit/editor-common/analytics").INPUT_METHOD.KEYBOARD | import("@atlaskit/editor-common/analytics").INPUT_METHOD.TOOLBAR) | undefined) => import("@atlaskit/editor-common/types").Command;
            setProvider: (provider: Promise<import("@atlaskit/task-decision").TaskDecisionProvider>) => Promise<boolean>;
        };
        commands: {
            updateEditPermission: (hasEditPermission: boolean | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
            updateHasRequestedEditPermission: (hasRequestedEditPermission: boolean) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/tasks-and-decisions").TasksAndDecisionsPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"table", {
        pluginConfiguration: import("@atlaskit/editor-plugins/table").TablePluginOptions | undefined;
        actions: import("packages/editor/editor-plugin-table/dist/types/tablePluginType").TablePluginActions;
        sharedState?: import("@atlaskit/editor-plugins/table/types").TableSharedState | undefined;
        commands: import("packages/editor/editor-plugin-table/dist/types/tablePluginType").TablePluginCommands;
        dependencies: import("packages/editor/editor-plugin-table/dist/types/tablePluginType").TablePluginDependencies;
    }, import("@atlaskit/editor-plugins/table").TablePluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"emoji", {
        pluginConfiguration: import("@atlaskit/editor-plugins/emoji").EmojiPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-emoji/dist/types/emojiPluginType").EmojiPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/emoji").EmojiPluginSharedState | undefined;
        commands: import("packages/editor/editor-plugin-emoji/dist/types/emojiPluginType").EmojiPluginCommands;
        actions: import("packages/editor/editor-plugin-emoji/dist/types/emojiPluginType").EmojiPluginActions;
    }, import("@atlaskit/editor-plugins/emoji").EmojiPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"mention", {
        pluginConfiguration: import("@atlaskit/editor-plugins/mentions").MentionsPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-mentions/dist/types/mentionsPluginType").MentionPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/mentions").MentionSharedState | undefined;
        actions: import("packages/editor/editor-plugin-mentions/dist/types/mentionsPluginType").MentionActions;
    }, import("@atlaskit/editor-plugins/mentions").MentionsPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"caption", {
        dependencies: import("packages/editor/editor-plugin-caption/dist/types/captionPluginType").CaptionPluginDependencies;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"mediaInsert", {
        dependencies: import("packages/editor/editor-plugin-media-insert/dist/types/mediaInsertPluginType").MediaInsertPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/media-insert").MediaInsertPluginState;
        commands: import("packages/editor/editor-plugin-media-insert/dist/types/mediaInsertPluginType").MediaInsertPluginCommands;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"media", {
        pluginConfiguration: import("@atlaskit/editor-plugins/media").MediaPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-media/dist/types/mediaPluginType").MediaPluginDependencies;
        sharedState: import("@atlaskit/editor-plugins/media/types").MediaPluginState | null;
        actions: {
            insertMediaAsMediaSingle: import("@atlaskit/editor-plugins/media/types").InsertMediaAsMediaSingle;
            setProvider: (provider: Promise<import("@atlaskit/editor-common/provider-factory").MediaProvider>) => boolean;
        };
        commands: {
            showMediaViewer: (media: import("@atlaskit/adf-schema").MediaADFAttrs) => import("@atlaskit/editor-common/types").EditorCommand;
            hideMediaViewer: import("@atlaskit/editor-common/types").EditorCommand;
            trackMediaPaste: (attrs: import("@atlaskit/adf-schema").MediaADFAttrs) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/media").MediaPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"annotation", {
        pluginConfiguration: import("@atlaskit/editor-plugins/annotation").AnnotationProviders | undefined;
        sharedState: import("@atlaskit/editor-plugins/annotation").InlineCommentPluginState | undefined;
        dependencies: import("packages/editor/editor-plugin-annotation/dist/types/annotationPluginType").AnnotationPluginDependencies;
        actions: {
            stripNonExistingAnnotations: (slice: import("prosemirror-model").Slice, state: import("prosemirror-state").EditorState) => boolean | undefined;
            setInlineCommentDraftState: (drafting: boolean, inputMethod: import("@atlaskit/editor-plugins/annotation").InlineCommentInputMethod, targetType?: import("@atlaskit/editor-plugins/annotation").TargetType | undefined, targetNodeId?: string | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => import("@atlaskit/editor-common/types").Command;
            showCommentForBlockNode: (node: import("prosemirror-model").Node | null, viewMethod?: import("@atlaskit/editor-common/analytics").VIEW_METHOD | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => import("@atlaskit/editor-common/types").Command;
            hasAnyUnResolvedAnnotationInPage: (state: import("prosemirror-state").EditorState) => boolean;
        };
    }, import("@atlaskit/editor-plugins/annotation").AnnotationProviders | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"grid", {
        pluginConfiguration: import("packages/editor/editor-plugin-grid/dist/types/gridPluginType").GridPluginConfiguration;
        dependencies: import("packages/editor/editor-plugin-grid/dist/types/gridPluginType").GridPluginDependencies;
        sharedState: import("packages/editor/editor-plugin-grid/dist/types/gridPluginType").GridPluginSharedState;
        actions: import("packages/editor/editor-plugin-grid/dist/types/gridPluginType").GridPluginActions;
    }, import("packages/editor/editor-plugin-grid/dist/types/gridPluginType").GridPluginConfiguration> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"guideline", {
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"width", {
                sharedState: import("@atlaskit/editor-common/types").EditorContainerWidth | undefined;
            }, undefined>
        ];
        sharedState: import("@atlaskit/editor-common/guideline").GuidelinePluginState | null;
        actions: {
            displayGuideline: import("@atlaskit/editor-common/guideline").DisplayGuideline;
        };
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"expand", {
        pluginConfiguration: import("@atlaskit/editor-plugins/expand").ExpandPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-expand/dist/types/types").ExpandPluginDependencies;
        actions: {
            insertExpand: import("@atlaskit/editor-common/types").Command;
            insertExpandWithInputMethod: (inputMethod: import("@atlaskit/editor-plugins/expand").InsertMethod) => import("@atlaskit/editor-common/types").Command;
        };
    }, import("@atlaskit/editor-plugins/expand").ExpandPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"rule", {
        pluginConfiguration: undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
        ];
        actions: {
            insertHorizontalRule: (inputMethod: import("@atlaskit/editor-common/analytics").INPUT_METHOD.FORMATTING | import("@atlaskit/editor-common/analytics").INPUT_METHOD.INSERT_MENU | import("@atlaskit/editor-common/analytics").INPUT_METHOD.QUICK_INSERT | import("@atlaskit/editor-common/analytics").INPUT_METHOD.SHORTCUT | import("@atlaskit/editor-common/analytics").INPUT_METHOD.TOOLBAR) => import("@atlaskit/editor-common/types").Command;
        };
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"list", {
        dependencies: import("packages/editor/editor-plugin-list/dist/types/listPluginType").ListPluginDependencies;
        actions: import("packages/editor/editor-plugin-list/dist/types/listPluginType").ListPluginActions;
        commands: import("packages/editor/editor-plugin-list/dist/types/listPluginType").ListPluginCommands;
        sharedState: import("packages/editor/editor-plugin-list/dist/types/listPluginType").ListPluginSharedState;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"textColor", {
        pluginConfiguration: import("@atlaskit/editor-plugins/text-color").TextColorPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-text-color/dist/types/textColorPluginType").Dependencies;
        actions: {
            changeColor: (color: string, inputMethod?: import("@atlaskit/editor-plugins/text-color").TextColorInputMethod | undefined) => import("@atlaskit/editor-common/types").Command;
        };
        sharedState: import("@atlaskit/editor-plugins/text-color").TextColorPluginState | undefined;
    }, import("@atlaskit/editor-plugins/text-color").TextColorPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"alignment", {
        sharedState: import("@atlaskit/editor-plugins/alignment").AlignmentPluginState | undefined;
        dependencies: import("packages/editor/editor-plugin-alignment/dist/types/alignmentPluginType").AlignmentPluginDependencies;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"breakout", {
        pluginConfiguration: import("@atlaskit/editor-plugins/breakout").BreakoutPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-breakout/dist/types/breakoutPluginType").BreakoutPluginDependencies;
        sharedState: Partial<import("@atlaskit/editor-plugins/breakout").BreakoutPluginState>;
    }, import("@atlaskit/editor-plugins/breakout").BreakoutPluginOptions | undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"batchAttributeUpdates", {
        actions: {
            batchSteps: import("@atlaskit/editor-plugins/batch-attribute-updates").BatchStepsAction;
        };
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contentInsertion", {
        dependencies: import("packages/editor/editor-plugin-content-insertion/dist/types/contentInsertionPluginType").ContentInsertionDependencies;
    } & import("@atlaskit/editor-plugins/content-insertion").InsertNodeAPI, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"accessibilityUtils", {
        dependencies: [
        ];
        actions: {
            ariaNotify: (message: string, ariaLiveElementAttributes?: import("@atlaskit/editor-plugins/accessibility-utils").AriaLiveElementAttributes | undefined) => void;
        };
        sharedState: import("@atlaskit/editor-plugins/accessibility-utils").AccessibilityUtilsPluginState;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"dataConsumer", {}, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"ufo", Object, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"codeBlock", {
        pluginConfiguration: import("@atlaskit/editor-plugins/code-block").CodeBlockPluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"decorations", {
                sharedState: import("@atlaskit/editor-plugins/decorations").DecorationState;
                actions: {
                    hoverDecoration: (nodeType: import("prosemirror-model").NodeType | import("prosemirror-model").NodeType[], add: boolean, className?: string | undefined) => import("@atlaskit/editor-common/types").Command;
                    removeDecoration: import("@atlaskit/editor-common/types").Command;
                };
            }, undefined>,
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"composition", {
                sharedState: import("@atlaskit/editor-plugins/composition").CompositionState;
            }, undefined>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorDisabled", {
                sharedState: import("@atlaskit/editor-plugins/editor-disabled").EditorDisabledPluginState;
            }, undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
            }, import("@atlaskit/editor-common/types").FeatureFlags>>
        ];
        sharedState: {
            copyButtonHoverNode: import("prosemirror-model").Node;
        } | undefined;
        actions: {
            insertCodeBlock: (inputMethod: import("@atlaskit/editor-common/analytics").INPUT_METHOD) => import("@atlaskit/editor-common/types").Command;
        };
    }, import("@atlaskit/editor-plugins/code-block").CodeBlockPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"selection", {
        pluginConfiguration: import("@atlaskit/editor-plugins/selection").SelectionPluginOptions | undefined;
        actions: import("@atlaskit/editor-plugins/selection").EditorSelectionAPI;
        commands: {
            displayGapCursor: (toggle: boolean) => import("@atlaskit/editor-common/types").EditorCommand;
            clearManualSelection: () => import("@atlaskit/editor-common/types").EditorCommand;
            setManualSelection: (anchor: number, head: number) => import("@atlaskit/editor-common/types").EditorCommand;
        };
        sharedState: import("@atlaskit/editor-common/selection").SelectionSharedState;
    }, import("@atlaskit/editor-plugins/selection").SelectionPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"floatingToolbar", {
        dependencies: import("packages/editor/editor-plugin-floating-toolbar/dist/types/floatingToolbarPluginType").FloatingToolbarPluginDependencies;
        actions: {
            forceFocusSelector: import("@atlaskit/editor-plugins/floating-toolbar").ForceFocusSelector;
        };
        sharedState: {
            configWithNodeInfo: import("@atlaskit/editor-plugins/floating-toolbar").ConfigWithNodeInfo | undefined;
            floatingToolbarData: import("@atlaskit/editor-plugins/floating-toolbar").FloatingToolbarPluginData | undefined;
        } | undefined;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"copyButton", {
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"accessibilityUtils", {
                dependencies: [
                ];
                actions: {
                    ariaNotify: (message: string, ariaLiveElementAttributes?: import("@atlaskit/editor-plugins/accessibility-utils").AriaLiveElementAttributes | undefined) => void;
                };
                sharedState: import("@atlaskit/editor-plugins/accessibility-utils").AccessibilityUtilsPluginState;
            }, undefined>>
        ];
        actions: {
            processCopyButtonItems: (state: import("prosemirror-state").EditorState) => (items: import("@atlaskit/editor-common/types").FloatingToolbarItem<import("@atlaskit/editor-common/types").Command>[], hoverDecoration: ((nodeType: import("prosemirror-model").NodeType | import("prosemirror-model").NodeType[], add: boolean, className?: string | undefined) => import("@atlaskit/editor-common/types").Command) | undefined) => import("@atlaskit/editor-common/types").FloatingToolbarItem<import("@atlaskit/editor-common/types").Command>[];
        };
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"submitEditor", {
        pluginConfiguration: import("@atlaskit/editor-plugins/submit-editor").SubmitEditorPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-submit-editor/dist/types/submitEditorPluginType").SubmitEditorPluginDependencies;
    }, import("@atlaskit/editor-plugins/submit-editor").SubmitEditorPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorDisabled", {
        sharedState: import("@atlaskit/editor-plugins/editor-disabled").EditorDisabledPluginState;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"unsupportedContent", {}, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"placeholder", {
        pluginConfiguration: import("@atlaskit/editor-plugins/placeholder").PlaceholderPluginOptions | undefined;
        commands: {
            setPlaceholder: (placeholder: string) => import("@atlaskit/editor-common/types").EditorCommand;
        };
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"focus", {
                sharedState: import("@atlaskit/editor-plugins/focus").FocusState;
            }, undefined>,
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"composition", {
                sharedState: import("@atlaskit/editor-plugins/composition").CompositionState;
            }, undefined>,
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"typeAhead", {
                pluginConfiguration: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"connectivity", {
                        sharedState: import("packages/editor/editor-plugin-connectivity/dist/types/connectivityPluginType").PublicPluginState;
                        commands: {
                            setMode: (mode: import("@atlaskit/editor-plugins/connectivity").Mode | null) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextPanel", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined;
                        actions: {
                            applyChange: (tr: import("prosemirror-state").Transaction) => import("prosemirror-state").Transaction;
                            showPanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").ShowObjectSidebar | undefined;
                            closePanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebar | undefined;
                            closePanelById?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebarById | undefined;
                        };
                        sharedState: {
                            contents: import("react").ReactNode[] | undefined;
                        } | undefined;
                    }, import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"metrics", {
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                                sharedState: {
                                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                                };
                                dependencies: [
                                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                                ];
                                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
                        ];
                        sharedState: import("@atlaskit/editor-plugins/metrics").MetricsState;
                        commands: {
                            setContentMoved: () => import("@atlaskit/editor-common/types").EditorCommand;
                            startActiveSessionTimer: () => import("@atlaskit/editor-common/types").EditorCommand;
                            stopActiveSession: () => import("@atlaskit/editor-common/types").EditorCommand;
                            handleIntentToStartEdit: ({ newSelection, shouldStartTimer, shouldPersistActiveSession, }: {
                                newSelection?: import("prosemirror-state").Selection | undefined;
                                shouldStartTimer?: boolean | undefined;
                                shouldPersistActiveSession?: boolean | undefined;
                            }) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>
                ];
                sharedState: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginSharedState;
                actions: {
                    isOpen: (editorState: import("prosemirror-state").EditorState) => boolean;
                    isAllowed: (editorState: import("prosemirror-state").EditorState) => boolean;
                    insert: (props: {
                        triggerHandler: import("@atlaskit/editor-common/types").TypeAheadHandler;
                        contentItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem;
                        query: string;
                        sourceListItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem[];
                        mode?: import("@atlaskit/editor-common/type-ahead").SelectItemMode | undefined;
                    }) => boolean;
                    findHandlerByTrigger: (trigger: string) => import("@atlaskit/editor-common/types").TypeAheadHandler | null;
                    open: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => boolean;
                    close: (props: {
                        insertCurrentQueryAsRawText: boolean;
                        attachCommand?: import("@atlaskit/editor-common/types").Command | undefined;
                    }) => boolean;
                    openAtTransaction: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => (tr: import("prosemirror-state").Transaction) => boolean;
                };
            }, import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined>
        ];
    }, import("@atlaskit/editor-plugins/placeholder").PlaceholderPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"quickInsert", {
        pluginConfiguration: import("@atlaskit/editor-common/types").QuickInsertPluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"typeAhead", {
                pluginConfiguration: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"connectivity", {
                        sharedState: import("packages/editor/editor-plugin-connectivity/dist/types/connectivityPluginType").PublicPluginState;
                        commands: {
                            setMode: (mode: import("@atlaskit/editor-plugins/connectivity").Mode | null) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextPanel", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined;
                        actions: {
                            applyChange: (tr: import("prosemirror-state").Transaction) => import("prosemirror-state").Transaction;
                            showPanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").ShowObjectSidebar | undefined;
                            closePanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebar | undefined;
                            closePanelById?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebarById | undefined;
                        };
                        sharedState: {
                            contents: import("react").ReactNode[] | undefined;
                        } | undefined;
                    }, import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"metrics", {
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                                sharedState: {
                                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                                };
                                dependencies: [
                                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                                ];
                                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
                        ];
                        sharedState: import("@atlaskit/editor-plugins/metrics").MetricsState;
                        commands: {
                            setContentMoved: () => import("@atlaskit/editor-common/types").EditorCommand;
                            startActiveSessionTimer: () => import("@atlaskit/editor-common/types").EditorCommand;
                            stopActiveSession: () => import("@atlaskit/editor-common/types").EditorCommand;
                            handleIntentToStartEdit: ({ newSelection, shouldStartTimer, shouldPersistActiveSession, }: {
                                newSelection?: import("prosemirror-state").Selection | undefined;
                                shouldStartTimer?: boolean | undefined;
                                shouldPersistActiveSession?: boolean | undefined;
                            }) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>
                ];
                sharedState: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginSharedState;
                actions: {
                    isOpen: (editorState: import("prosemirror-state").EditorState) => boolean;
                    isAllowed: (editorState: import("prosemirror-state").EditorState) => boolean;
                    insert: (props: {
                        triggerHandler: import("@atlaskit/editor-common/types").TypeAheadHandler;
                        contentItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem;
                        query: string;
                        sourceListItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem[];
                        mode?: import("@atlaskit/editor-common/type-ahead").SelectItemMode | undefined;
                    }) => boolean;
                    findHandlerByTrigger: (trigger: string) => import("@atlaskit/editor-common/types").TypeAheadHandler | null;
                    open: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => boolean;
                    close: (props: {
                        insertCurrentQueryAsRawText: boolean;
                        attachCommand?: import("@atlaskit/editor-common/types").Command | undefined;
                    }) => boolean;
                    openAtTransaction: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => (tr: import("prosemirror-state").Transaction) => boolean;
                };
            }, import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"connectivity", {
                sharedState: import("packages/editor/editor-plugin-connectivity/dist/types/connectivityPluginType").PublicPluginState;
                commands: {
                    setMode: (mode: import("@atlaskit/editor-plugins/connectivity").Mode | null) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"metrics", {
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
                ];
                sharedState: import("@atlaskit/editor-plugins/metrics").MetricsState;
                commands: {
                    setContentMoved: () => import("@atlaskit/editor-common/types").EditorCommand;
                    startActiveSessionTimer: () => import("@atlaskit/editor-common/types").EditorCommand;
                    stopActiveSession: () => import("@atlaskit/editor-common/types").EditorCommand;
                    handleIntentToStartEdit: ({ newSelection, shouldStartTimer, shouldPersistActiveSession, }: {
                        newSelection?: import("prosemirror-state").Selection | undefined;
                        shouldStartTimer?: boolean | undefined;
                        shouldPersistActiveSession?: boolean | undefined;
                    }) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>>
        ];
        sharedState: import("@atlaskit/editor-plugin-quick-insert").QuickInsertSharedState | null;
        actions: {
            openTypeAhead: (inputMethod: import("@atlaskit/editor-plugins/type-ahead").TypeAheadInputMethod, removePrefixTriggerOnCancel?: boolean | undefined) => boolean;
            insertItem: (item: import("@atlaskit/editor-common/provider-factory").QuickInsertItem, source?: import("@atlaskit/editor-common/analytics").INPUT_METHOD.QUICK_INSERT | import("@atlaskit/editor-common/analytics").INPUT_METHOD.TOOLBAR | undefined) => import("@atlaskit/editor-common/types").Command;
            getSuggestions: (searchOptions: import("@atlaskit/editor-common/types").QuickInsertSearchOptions) => import("@atlaskit/editor-common/provider-factory").QuickInsertItem[];
        };
        commands: {
            openElementBrowserModal: import("@atlaskit/editor-common/types").EditorCommand;
            addQuickInsertItem: (item: import("@atlaskit/editor-common/types").QuickInsertHandler) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-common/types").QuickInsertPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"width", {
        sharedState: import("@atlaskit/editor-common/types").EditorContainerWidth | undefined;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"textFormatting", {
        pluginConfiguration: import("@atlaskit/editor-common/types").TextFormattingOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                actions: {
                    registerComponent: ({ name, component, }: {
                        name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                        component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                    }) => void;
                };
                pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
            }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"base", {
                pluginConfiguration: import("@atlaskit/editor-plugins/base").BasePluginOptions | undefined;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextIdentifier", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined;
                        sharedState: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration | undefined;
                        commands: {
                            setProvider: (config: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined>>
                ];
                sharedState: import("@atlaskit/editor-plugins/base").BasePluginState;
                actions: {
                    setKeyboardHeight: (keyboardHeight: number) => import("@atlaskit/editor-common/types").Command;
                    registerMarks: (callback: import("packages/editor/editor-plugin-base/dist/types/basePluginType").Callback) => void;
                    resolveMarks: (from: number, to: number, tr: import("prosemirror-state").Transaction) => void;
                };
            }, import("@atlaskit/editor-plugins/base").BasePluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"selectionToolbar", {
                sharedState: {
                    toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking;
                };
                pluginConfiguration: import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorViewMode", {
                        sharedState: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginState | null;
                        dependencies: [
                        ];
                        pluginConfiguration?: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined;
                        commands: {
                            updateViewMode: (mode: import("@atlaskit/editor-plugins/editor-viewmode").ViewMode) => import("@atlaskit/editor-common/types").EditorCommand;
                            updateContentMode: (action: import("packages/editor/editor-plugin-editor-viewmode/dist/types/editorViewmodePluginType").UpdateContentModeAction) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                        sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                        actions: {
                            registerComponent: ({ name, component, }: {
                                name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                                component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                            }) => void;
                        };
                        pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
                    }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"blockControls", {
                        dependencies: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").BlockControlsPluginDependencies;
                        sharedState: import("@atlaskit/editor-plugins/block-controls").BlockControlsSharedState;
                        commands: {
                            moveToLayout: (start: number, to: number, options?: {
                                moveToEnd?: boolean | undefined;
                                selectMovedNode?: boolean | undefined;
                                moveNodeAtCursorPos?: boolean | undefined;
                            } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            moveNode: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").MoveNode;
                            showDragHandleAt: (pos: number, anchorName: string, nodeType: string, handleOptions?: import("@atlaskit/editor-plugins/block-controls").HandleOptions, rootPos?: number | undefined, rootAnchorName?: string | undefined, rootNodeType?: string | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            toggleBlockMenu: (options?: {
                                closeMenu?: boolean | undefined;
                                anchorName?: string | undefined;
                            } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            setNodeDragged: (getPos: () => number | undefined, anchorName: string, nodeType: string) => import("@atlaskit/editor-common/types").EditorCommand;
                            setMultiSelectPositions: (anchor?: number | undefined, head?: number | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            setSelectedViaDragHandle: (isSelectedViaDragHandle?: boolean | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>
                ];
                actions?: {
                    suppressToolbar?: (() => boolean) | undefined;
                    unsuppressToolbar?: (() => boolean) | undefined;
                    setToolbarDocking?: ((toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking) => boolean) | undefined;
                    refreshToolbarDocking?: (() => boolean) | undefined;
                } | undefined;
            }, import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions>>
        ];
        commands: {
            toggleSuperscript: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleSubscript: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleStrike: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleCode: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleUnderline: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleEm: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
            toggleStrong: import("@atlaskit/editor-plugins/text-formatting").ToggleMarkEditorCommand;
        };
        sharedState: import("@atlaskit/editor-common/types").TextFormattingState | undefined;
    }, import("@atlaskit/editor-common/types").TextFormattingOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"hyperlink", {
        pluginConfiguration: import("@atlaskit/editor-common/types").HyperlinkPluginOptions | undefined;
        dependencies: import("packages/editor/editor-plugin-hyperlink/dist/types/hyperlinkPluginType").HyperlinkPluginDependencies;
        actions: import("packages/editor/editor-plugin-hyperlink/dist/types/hyperlinkPluginType").HyperlinkPluginActions;
        commands: {
            showLinkToolbar: import("@atlaskit/editor-plugins/hyperlink").ShowLinkToolbar;
            updateLink: (href: string, text: string) => import("@atlaskit/editor-common/types").EditorCommand;
            removeLink: () => import("@atlaskit/editor-common/types").EditorCommand;
        };
        sharedState: import("packages/editor/editor-plugin-hyperlink/dist/types/hyperlinkPluginType").HyperlinkPluginSharedState;
    }, import("@atlaskit/editor-common/types").HyperlinkPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"selectionToolbar", {
        sharedState: {
            toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking;
        };
        pluginConfiguration: import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorViewMode", {
                sharedState: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginState | null;
                dependencies: [
                ];
                pluginConfiguration?: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined;
                commands: {
                    updateViewMode: (mode: import("@atlaskit/editor-plugins/editor-viewmode").ViewMode) => import("@atlaskit/editor-common/types").EditorCommand;
                    updateContentMode: (action: import("packages/editor/editor-plugin-editor-viewmode/dist/types/editorViewmodePluginType").UpdateContentModeAction) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                actions: {
                    registerComponent: ({ name, component, }: {
                        name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                        component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                    }) => void;
                };
                pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
            }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"blockControls", {
                dependencies: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").BlockControlsPluginDependencies;
                sharedState: import("@atlaskit/editor-plugins/block-controls").BlockControlsSharedState;
                commands: {
                    moveToLayout: (start: number, to: number, options?: {
                        moveToEnd?: boolean | undefined;
                        selectMovedNode?: boolean | undefined;
                        moveNodeAtCursorPos?: boolean | undefined;
                    } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                    moveNode: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").MoveNode;
                    showDragHandleAt: (pos: number, anchorName: string, nodeType: string, handleOptions?: import("@atlaskit/editor-plugins/block-controls").HandleOptions, rootPos?: number | undefined, rootAnchorName?: string | undefined, rootNodeType?: string | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                    toggleBlockMenu: (options?: {
                        closeMenu?: boolean | undefined;
                        anchorName?: string | undefined;
                    } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                    setNodeDragged: (getPos: () => number | undefined, anchorName: string, nodeType: string) => import("@atlaskit/editor-common/types").EditorCommand;
                    setMultiSelectPositions: (anchor?: number | undefined, head?: number | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                    setSelectedViaDragHandle: (isSelectedViaDragHandle?: boolean | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>>
        ];
        actions?: {
            suppressToolbar?: (() => boolean) | undefined;
            unsuppressToolbar?: (() => boolean) | undefined;
            setToolbarDocking?: ((toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking) => boolean) | undefined;
            refreshToolbarDocking?: (() => boolean) | undefined;
        } | undefined;
    }, import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"clearMarksOnEmptyDoc", {}, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"blockType", {
        pluginConfiguration: import("@atlaskit/editor-plugins/block-type").BlockTypePluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                actions: {
                    registerComponent: ({ name, component, }: {
                        name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                        component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                    }) => void;
                };
                pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
            }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"selectionToolbar", {
                sharedState: {
                    toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking;
                };
                pluginConfiguration: import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorViewMode", {
                        sharedState: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginState | null;
                        dependencies: [
                        ];
                        pluginConfiguration?: import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined;
                        commands: {
                            updateViewMode: (mode: import("@atlaskit/editor-plugins/editor-viewmode").ViewMode) => import("@atlaskit/editor-common/types").EditorCommand;
                            updateContentMode: (action: import("packages/editor/editor-plugin-editor-viewmode/dist/types/editorViewmodePluginType").UpdateContentModeAction) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, import("@atlaskit/editor-plugins/editor-viewmode").EditorViewModePluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                        sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                        actions: {
                            registerComponent: ({ name, component, }: {
                                name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                                component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                            }) => void;
                        };
                        pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
                    }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"blockControls", {
                        dependencies: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").BlockControlsPluginDependencies;
                        sharedState: import("@atlaskit/editor-plugins/block-controls").BlockControlsSharedState;
                        commands: {
                            moveToLayout: (start: number, to: number, options?: {
                                moveToEnd?: boolean | undefined;
                                selectMovedNode?: boolean | undefined;
                                moveNodeAtCursorPos?: boolean | undefined;
                            } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            moveNode: import("packages/editor/editor-plugin-block-controls/dist/types/blockControlsPluginType").MoveNode;
                            showDragHandleAt: (pos: number, anchorName: string, nodeType: string, handleOptions?: import("@atlaskit/editor-plugins/block-controls").HandleOptions, rootPos?: number | undefined, rootAnchorName?: string | undefined, rootNodeType?: string | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            toggleBlockMenu: (options?: {
                                closeMenu?: boolean | undefined;
                                anchorName?: string | undefined;
                            } | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            setNodeDragged: (getPos: () => number | undefined, anchorName: string, nodeType: string) => import("@atlaskit/editor-common/types").EditorCommand;
                            setMultiSelectPositions: (anchor?: number | undefined, head?: number | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                            setSelectedViaDragHandle: (isSelectedViaDragHandle?: boolean | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>
                ];
                actions?: {
                    suppressToolbar?: (() => boolean) | undefined;
                    unsuppressToolbar?: (() => boolean) | undefined;
                    setToolbarDocking?: ((toolbarDocking: import("packages/editor/editor-plugin-selection-toolbar/dist/types/types").ToolbarDocking) => boolean) | undefined;
                    refreshToolbarDocking?: (() => boolean) | undefined;
                } | undefined;
            }, import("@atlaskit/editor-plugins/selection-toolbar").SelectionToolbarPluginOptions>>
        ];
        sharedState: import("@atlaskit/editor-plugins/block-type").BlockTypeState | undefined;
        actions: {
            insertBlockQuote: (inputMethod: import("@atlaskit/editor-plugins/block-type").InputMethod) => import("@atlaskit/editor-common/types").Command;
        };
        commands: {
            setTextLevel: (level: import("@atlaskit/editor-plugins/block-type").TextBlockTypes, inputMethod: import("@atlaskit/editor-plugins/block-type").InputMethod, fromBlockQuote?: boolean | undefined) => import("@atlaskit/editor-common/types").EditorCommand;
            insertBlockQuote: (inputMethod: import("@atlaskit/editor-plugins/block-type").InputMethod) => import("@atlaskit/editor-common/types").EditorCommand;
            clearFormatting: (inputMethod: import("packages/editor/editor-plugin-block-type/dist/types/pm-plugins/commands/block-type").ClearFormattingInputMethod) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/block-type").BlockTypePluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"undoRedoPlugin", {
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"typeAhead", {
                pluginConfiguration: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined;
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"connectivity", {
                        sharedState: import("packages/editor/editor-plugin-connectivity/dist/types/connectivityPluginType").PublicPluginState;
                        commands: {
                            setMode: (mode: import("@atlaskit/editor-plugins/connectivity").Mode | null) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextPanel", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined;
                        actions: {
                            applyChange: (tr: import("prosemirror-state").Transaction) => import("prosemirror-state").Transaction;
                            showPanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").ShowObjectSidebar | undefined;
                            closePanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebar | undefined;
                            closePanelById?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebarById | undefined;
                        };
                        sharedState: {
                            contents: import("react").ReactNode[] | undefined;
                        } | undefined;
                    }, import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined>>,
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"metrics", {
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                                sharedState: {
                                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                                };
                                dependencies: [
                                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                                ];
                                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
                        ];
                        sharedState: import("@atlaskit/editor-plugins/metrics").MetricsState;
                        commands: {
                            setContentMoved: () => import("@atlaskit/editor-common/types").EditorCommand;
                            startActiveSessionTimer: () => import("@atlaskit/editor-common/types").EditorCommand;
                            stopActiveSession: () => import("@atlaskit/editor-common/types").EditorCommand;
                            handleIntentToStartEdit: ({ newSelection, shouldStartTimer, shouldPersistActiveSession, }: {
                                newSelection?: import("prosemirror-state").Selection | undefined;
                                shouldStartTimer?: boolean | undefined;
                                shouldPersistActiveSession?: boolean | undefined;
                            }) => import("@atlaskit/editor-common/types").EditorCommand;
                        };
                    }, undefined>>
                ];
                sharedState: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginSharedState;
                actions: {
                    isOpen: (editorState: import("prosemirror-state").EditorState) => boolean;
                    isAllowed: (editorState: import("prosemirror-state").EditorState) => boolean;
                    insert: (props: {
                        triggerHandler: import("@atlaskit/editor-common/types").TypeAheadHandler;
                        contentItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem;
                        query: string;
                        sourceListItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem[];
                        mode?: import("@atlaskit/editor-common/type-ahead").SelectItemMode | undefined;
                    }) => boolean;
                    findHandlerByTrigger: (trigger: string) => import("@atlaskit/editor-common/types").TypeAheadHandler | null;
                    open: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => boolean;
                    close: (props: {
                        insertCurrentQueryAsRawText: boolean;
                        attachCommand?: import("@atlaskit/editor-common/types").Command | undefined;
                    }) => boolean;
                    openAtTransaction: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => (tr: import("prosemirror-state").Transaction) => boolean;
                };
            }, import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined>,
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"history", {
                sharedState: import("packages/editor/editor-plugin-history/dist/types/historyPluginType").HistoryPluginSharedState | undefined;
                commands: {
                    updatePluginState: import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
                sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
                actions: {
                    registerComponent: ({ name, component, }: {
                        name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                        component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
                    }) => void;
                };
                pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
            }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>>
        ];
        actions: {
            undo: import("packages/editor/editor-plugin-undo-redo/dist/types/undoRedoPluginType").UndoRedoAction;
            redo: import("packages/editor/editor-plugin-undo-redo/dist/types/undoRedoPluginType").UndoRedoAction;
        };
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"primaryToolbar", {
        sharedState: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginState | undefined;
        actions: {
            registerComponent: ({ name, component, }: {
                name: import("@atlaskit/editor-plugins/primary-toolbar").ToolbarElementNames;
                component: import("@atlaskit/editor-common/types").ToolbarUIComponentFactory;
            }) => void;
        };
        pluginConfiguration?: import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined;
    }, import("@atlaskit/editor-plugins/primary-toolbar").PrimaryToolbarPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"history", {
        sharedState: import("packages/editor/editor-plugin-history/dist/types/historyPluginType").HistoryPluginSharedState | undefined;
        commands: {
            updatePluginState: import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"typeAhead", {
        pluginConfiguration: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
            }, import("@atlaskit/editor-common/types").FeatureFlags>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"connectivity", {
                sharedState: import("packages/editor/editor-plugin-connectivity/dist/types/connectivityPluginType").PublicPluginState;
                commands: {
                    setMode: (mode: import("@atlaskit/editor-plugins/connectivity").Mode | null) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextPanel", {
                pluginConfiguration: import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined;
                actions: {
                    applyChange: (tr: import("prosemirror-state").Transaction) => import("prosemirror-state").Transaction;
                    showPanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").ShowObjectSidebar | undefined;
                    closePanel?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebar | undefined;
                    closePanelById?: import("packages/editor/editor-plugin-context-panel/dist/types/types/object-siderbar-types").HideObjectSidebarById | undefined;
                };
                sharedState: {
                    contents: import("react").ReactNode[] | undefined;
                } | undefined;
            }, import("@atlaskit/editor-plugins/context-panel").ContextPanelPluginOptions | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"metrics", {
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
                        sharedState: {
                            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
                            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
                            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                        };
                        dependencies: [
                            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                            }, import("@atlaskit/editor-common/types").FeatureFlags>>
                        ];
                        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
                    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions>>
                ];
                sharedState: import("@atlaskit/editor-plugins/metrics").MetricsState;
                commands: {
                    setContentMoved: () => import("@atlaskit/editor-common/types").EditorCommand;
                    startActiveSessionTimer: () => import("@atlaskit/editor-common/types").EditorCommand;
                    stopActiveSession: () => import("@atlaskit/editor-common/types").EditorCommand;
                    handleIntentToStartEdit: ({ newSelection, shouldStartTimer, shouldPersistActiveSession, }: {
                        newSelection?: import("prosemirror-state").Selection | undefined;
                        shouldStartTimer?: boolean | undefined;
                        shouldPersistActiveSession?: boolean | undefined;
                    }) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, undefined>>
        ];
        sharedState: import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginSharedState;
        actions: {
            isOpen: (editorState: import("prosemirror-state").EditorState) => boolean;
            isAllowed: (editorState: import("prosemirror-state").EditorState) => boolean;
            insert: (props: {
                triggerHandler: import("@atlaskit/editor-common/types").TypeAheadHandler;
                contentItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem;
                query: string;
                sourceListItem: import("@atlaskit/editor-common/provider-factory").TypeAheadItem[];
                mode?: import("@atlaskit/editor-common/type-ahead").SelectItemMode | undefined;
            }) => boolean;
            findHandlerByTrigger: (trigger: string) => import("@atlaskit/editor-common/types").TypeAheadHandler | null;
            open: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => boolean;
            close: (props: {
                insertCurrentQueryAsRawText: boolean;
                attachCommand?: import("@atlaskit/editor-common/types").Command | undefined;
            }) => boolean;
            openAtTransaction: (props: import("packages/editor/editor-plugin-type-ahead/dist/types/types").OpenTypeAheadProps) => (tr: import("prosemirror-state").Transaction) => boolean;
        };
    }, import("@atlaskit/editor-plugins/type-ahead").TypeAheadPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"decorations", {
        sharedState: import("@atlaskit/editor-plugins/decorations").DecorationState;
        actions: {
            hoverDecoration: (nodeType: import("prosemirror-model").NodeType | import("prosemirror-model").NodeType[], add: boolean, className?: string | undefined) => import("@atlaskit/editor-common/types").Command;
            removeDecoration: import("@atlaskit/editor-common/types").Command;
        };
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"base", {
        pluginConfiguration: import("@atlaskit/editor-plugins/base").BasePluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
            }, import("@atlaskit/editor-common/types").FeatureFlags>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextIdentifier", {
                pluginConfiguration: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined;
                sharedState: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration | undefined;
                commands: {
                    setProvider: (config: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined>>
        ];
        sharedState: import("@atlaskit/editor-plugins/base").BasePluginState;
        actions: {
            setKeyboardHeight: (keyboardHeight: number) => import("@atlaskit/editor-common/types").Command;
            registerMarks: (callback: import("packages/editor/editor-plugin-base/dist/types/basePluginType").Callback) => void;
            resolveMarks: (from: number, to: number, tr: import("prosemirror-state").Transaction) => void;
        };
    }, import("@atlaskit/editor-plugins/base").BasePluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"contextIdentifier", {
        pluginConfiguration: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined;
        sharedState: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration | undefined;
        commands: {
            setProvider: (config: import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierConfiguration) => import("@atlaskit/editor-common/types").EditorCommand;
        };
    }, import("@atlaskit/editor-plugins/context-identifier").ContextIdentifierPluginOptions | undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"composition", {
        sharedState: import("@atlaskit/editor-plugins/composition").CompositionState;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"interaction", {
        sharedState: import("@atlaskit/editor-plugins/interaction").InteractionState;
    }, undefined> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"focus", {
        sharedState: import("@atlaskit/editor-plugins/focus").FocusState;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"clipboard", {}, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"paste", {
        pluginConfiguration: import("@atlaskit/editor-plugins/paste").PastePluginOptions;
        dependencies: import("packages/editor/editor-plugin-paste/dist/types/pastePluginType").PastePluginDependencies;
        sharedState: {
            lastContentPasted: import("@atlaskit/editor-plugins/paste").LastContentPasted | null;
        };
    }, import("@atlaskit/editor-plugins/paste").PastePluginOptions>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"betterTypeHistory", {
        actions: import("@atlaskit/editor-plugins/better-type-history").BetterTypeHistoryAPI;
    }, undefined>,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
        pluginConfiguration: import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions;
        sharedState: {
            createAnalyticsEvent: import("@atlaskit/analytics-next").CreateUIAnalyticsEvent | null;
            attachAnalyticsEvent: import("@atlaskit/editor-plugins/analytics").CreateAttachPayloadIntoTransaction | null;
            performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
        };
        dependencies: [
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
            }, import("@atlaskit/editor-common/types").FeatureFlags>>
        ];
        actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
    }, import("@atlaskit/editor-plugins/analytics").AnalyticsPluginOptions> | undefined,
    import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
    }, import("@atlaskit/editor-common/types").FeatureFlags>
]>;
