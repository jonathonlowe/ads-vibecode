import type { AnalyticsEventPayload } from '@atlaskit/analytics-next/AnalyticsEvent';
import type { ResolvedEditorState } from '@atlaskit/editor-common/collab';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import type { ContextUpdateHandler, EditorActionsOptions, FeatureFlags, ReplaceRawValue, GetResolvedEditorStateReason, Transformer } from '@atlaskit/editor-common/types';
import { Node } from '@atlaskit/editor-prosemirror/model';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
/**
 * @deprecated {@link https://hello.atlassian.net/browse/ENGHEALTH-26729 Internal documentation for deprecation (no external access)} Editor actions is no longer supported and will be removed in a future version. Please use the core actions, or Plugin APIs directly instead
 * @example If you were using editorActions.getValue() replace with:
    const { editorApi, preset } = usePreset(...);
    editorApi?.core.actions.requestDocument((doc) => {
        // use doc as desired
    })
 */
export default class EditorActions<T = any> implements EditorActionsOptions<T> {
    private editorView?;
    private contentTransformer?;
    private contentEncode?;
    private eventDispatcher?;
    private listeners;
    static from<T>(view: EditorView, eventDispatcher: EventDispatcher, transformer?: Transformer<T>): EditorActions<T>;
    _privateGetEditorView(): EditorView | undefined;
    _privateGetEventDispatcher(): EventDispatcher | undefined;
    private getFeatureFlags;
    _privateRegisterEditor(editorView: EditorView, eventDispatcher: EventDispatcher, contentTransformer?: Transformer<T>, getFeatureFlags?: () => FeatureFlags): void;
    _privateUnregisterEditor(): void;
    _privateSubscribe(cb: ContextUpdateHandler): void;
    _privateUnsubscribe(cb: ContextUpdateHandler): void;
    focus({ scrollIntoView }?: {
        scrollIntoView: boolean;
    }): boolean;
    blur(): boolean;
    clear(): boolean;
    /**
     * @deprecated This is deprecated and is no longer maintained.
     *
     * Use the `requestDocument` API from `editorAPI` (ie. `editorApi?.core?.actions.requestDocument( ... ))
     * it has inbuilt throttling and is designed for use with `ComposableEditor`.
     *
     * Docs on its usage are available from: https://atlaskit.atlassian.com/packages/editor/editor-core
     *
     * WARNING: this may be called repeatedly, async with care
     */
    getValue(): Promise<import("@atlaskit/editor-json-transformer").JSONDocNode | T | undefined>;
    getNodeByLocalId(id: string): Node | undefined;
    getNodeByFragmentLocalId(id: string): Node | undefined;
    /**
     * This method will return the currently selected `Node` if the selection is a `Node`.
     * Otherwise, if the selection is textual or a non-selectable `Node` within another selectable `Node`, the closest selectable parent `Node` will be returned.
     */
    getSelectedNode(): Node | undefined;
    isDocumentEmpty(): boolean;
    /**
     * @deprecated - please use `replaceDocument` found in the core plugin actions instead
     * using this will reset your Editor State which could cause some things to break (like emojis)
     * @example - use the `replaceDocument` from the core plugin actions instead
     * ```ts
     * const { editorApi, preset } = usePreset(...);
        // where you need it
        editorApi?.core.actions.replaceDocument(value);
        return <ComposableEditor preset={preset} ... />
     */
    replaceDocument(rawValue: any, shouldScrollToBottom?: boolean, 
    /** @deprecated [ED-14158] shouldAddToHistory is not being used in this function */
    shouldAddToHistory?: boolean): boolean;
    replaceSelection(rawValue: ReplaceRawValue | Array<ReplaceRawValue>, tryToReplace?: boolean, position?: number): boolean;
    appendText(text: string): boolean;
    dispatchAnalyticsEvent: (payload: AnalyticsEventPayload) => void;
    /**
     * If editor is using new collab service,
     * we want editor to call the collab provider to
     * retrieve the final acknowledged state of the
     * editor. The final acknowledged editor state
     * refers to the latest state of editor with confirmed
     * steps.
     */
    getResolvedEditorState: (reason: GetResolvedEditorStateReason) => Promise<ResolvedEditorState | undefined>;
}
