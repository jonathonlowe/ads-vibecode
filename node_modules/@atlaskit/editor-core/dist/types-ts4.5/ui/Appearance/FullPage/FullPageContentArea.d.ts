/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import type { ReactElement } from 'react';
import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { DispatchAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import type { EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import type { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import type { EditorAppearance, FeatureFlags, OptionalPlugin, PublicPluginAPI, ReactHookFactory, UIComponentFactory } from '@atlaskit/editor-common/types';
import { type ContextPanelPlugin } from '@atlaskit/editor-plugins/context-panel';
import { type ViewMode } from '@atlaskit/editor-plugins/editor-viewmode';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type EditorActions from '../../../actions';
import type { ContentComponents, ReactComponents } from '../../../types';
import type { ScrollContainerRefs } from './types';
interface FullPageEditorContentAreaProps {
    editorAPI: PublicPluginAPI<[
        OptionalPlugin<ContextPanelPlugin>
    ]> | undefined;
    appearance: EditorAppearance | undefined;
    contentComponents: UIComponentFactory[] | undefined;
    pluginHooks: ReactHookFactory[] | undefined;
    contextPanel: ReactComponents | undefined;
    customContentComponents: ContentComponents | undefined;
    disabled: boolean | undefined;
    dispatchAnalyticsEvent: DispatchAnalyticsEvent | undefined;
    editorActions: EditorActions | undefined;
    editorDOMElement: ReactElement;
    editorView: EditorView;
    eventDispatcher: EventDispatcher | undefined;
    popupsMountPoint: HTMLElement | undefined;
    popupsBoundariesElement: HTMLElement | undefined;
    popupsScrollableElement: HTMLElement | undefined;
    providerFactory: ProviderFactory;
    wrapperElement: HTMLElement | null;
    featureFlags?: FeatureFlags;
    viewMode: ViewMode | undefined;
    isEditorToolbarHidden?: boolean;
    hasHadInteraction?: boolean;
}
export declare const CONTENT_AREA_TEST_ID = "ak-editor-fp-content-area";
export declare const EDITOR_CONTAINER = "ak-editor-container";
export declare const FullPageContentArea: React.ForwardRefExoticComponent<Omit<import("react-intl-next").WithIntlProps<React.PropsWithChildren<FullPageEditorContentAreaProps & WrappedComponentProps & React.RefAttributes<ScrollContainerRefs>>>, "ref"> & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<FullPageEditorContentAreaProps & WrappedComponentProps & React.RefAttributes<ScrollContainerRefs>>;
};
export {};
