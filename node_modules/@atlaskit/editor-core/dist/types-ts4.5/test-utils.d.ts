import type { EditorPluginInjectionAPI } from '@atlaskit/editor-common/preset';
import { EditorPresetBuilder } from '@atlaskit/editor-common/preset';
import type { MarkConfig, NodeConfig, ReactHookFactory, UIComponentFactory } from '@atlaskit/editor-common/types';
import type { Schema } from '@atlaskit/editor-prosemirror/model';
import type { Plugin } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { LightPMPlugin, LightPMPluginFactoryParams, OnEditorViewStateUpdated } from './create-editor/get-plugins';
export type { LightEditorPlugin } from './create-editor/get-plugins';
export interface LightEditorConfig {
    nodes: NodeConfig[];
    marks: MarkConfig[];
    plugins: Array<LightPMPlugin>;
    contentComponents: UIComponentFactory[];
    pluginHooks: ReactHookFactory[];
    onEditorViewStateUpdatedCallbacks: Array<OnEditorViewStateUpdated>;
}
type PluginData = {
    plugins: Plugin[];
    schema: Schema;
    onEditorViewStateUpdatedCallbacks: Array<OnEditorViewStateUpdated>;
    editorConfig: LightEditorConfig;
};
export declare const createPMSchemaAndPlugins: (inputPreset?: EditorPresetBuilder) => (pluginFactoryParams: Omit<LightPMPluginFactoryParams, 'schema'> & {
    pluginInjectionAPI: EditorPluginInjectionAPI;
}) => PluginData;
export declare function setTextSelection(view: EditorView, anchor: number, head?: number): void;
/**
 * Given a selector, checks if an element matching the selector exists in the
 * document.
 * @param selector
 * @returns true if element matching selector exists in document, false otherwise
 */
export declare const isElementBySelectorInDocument: (selector: string) => boolean;
