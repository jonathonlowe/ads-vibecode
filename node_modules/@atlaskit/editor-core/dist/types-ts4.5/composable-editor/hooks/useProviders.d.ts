import type { AutoformattingProvider, CardProvider, ContextIdentifierProvider, MediaProvider } from '@atlaskit/editor-common/provider-factory';
import type { OptionalPlugin, PublicPluginAPI } from '@atlaskit/editor-common/types';
import type { CardPlugin } from '@atlaskit/editor-plugins/card';
import type { ContextIdentifierPlugin } from '@atlaskit/editor-plugins/context-identifier';
import type { CustomAutoformatPlugin } from '@atlaskit/editor-plugins/custom-autoformat';
import type { EmojiPlugin } from '@atlaskit/editor-plugins/emoji';
import type { MediaPlugin } from '@atlaskit/editor-plugins/media';
import type { MentionsPlugin } from '@atlaskit/editor-plugins/mentions';
import type { TasksAndDecisionsPlugin } from '@atlaskit/editor-plugins/tasks-and-decisions';
import type { EmojiProvider } from '@atlaskit/emoji';
import type { MentionProvider } from '@atlaskit/mention/resource';
import type { TaskDecisionProvider } from '@atlaskit/task-decision/types';
interface UseProvidersProps {
    editorApi: PublicPluginAPI<[
        OptionalPlugin<ContextIdentifierPlugin>,
        OptionalPlugin<MediaPlugin>,
        OptionalPlugin<MentionsPlugin>,
        OptionalPlugin<CardPlugin>,
        OptionalPlugin<EmojiPlugin>,
        OptionalPlugin<CustomAutoformatPlugin>,
        OptionalPlugin<TasksAndDecisionsPlugin>
    ]> | undefined;
    contextIdentifierProvider: Promise<ContextIdentifierProvider> | undefined;
    mediaProvider: Promise<MediaProvider> | undefined;
    mentionProvider: Promise<MentionProvider> | undefined;
    cardProvider: Promise<CardProvider> | undefined;
    emojiProvider: Promise<EmojiProvider> | undefined;
    autoformattingProvider: Promise<AutoformattingProvider> | undefined;
    taskDecisionProvider: Promise<TaskDecisionProvider> | undefined;
}
/**
 * This hook is used to replace the old approach of using the `providerFactory`.
 *
 * Because plugins can't update their initial configuration, this hook listens to changes
 * and calls a command to push the update to the plugins shared state.
 *
 * In the future ideally consumers implement this behaviour themselves.
 */
export declare const useProviders: ({ editorApi, contextIdentifierProvider, mediaProvider, mentionProvider, cardProvider, emojiProvider, autoformattingProvider, taskDecisionProvider, }: UseProvidersProps) => void;
export {};
