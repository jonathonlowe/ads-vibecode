import type { DependencyList } from 'react';
import { type AllEditorPresetPluginTypes, EditorPresetBuilder, type ExtractPresetAPI } from '@atlaskit/editor-common/preset';
interface PresetAPI<Preset extends EditorPresetBuilder<any, any>> {
    editorApi: // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Preset extends EditorPresetBuilder<any, any> ? ExtractPresetAPI<Preset> : never) | undefined;
    preset: Preset;
}
/**
 * Creates a preset.
 *
 * Takes an input function that returns a preset (and memoizes it) depending
 * on the dependency array provided.
 *
 * Returns a pluginInjectionApi in order to apply actions and subscribe to plugin
 * changes outside of the editor.
 *
 * @param createPreset
 * @param dependencies
 * @returns PresetAPI ({ pluginInjectionApi, preset, actionBuilder })
 *
 * Example:
 * ```ts
 * function ExampleEditor() {
 *   const { preset, editorApi } = usePreset((builder) =>
 *     builder.add(plugin1).add(plugin2)
 *   , []);
 *
 *   // Can execute typesafe commands based on plugin1 or 2
 *   const runCommand = () => editorApi.core.actions.execute(
 *     editorApi.plugin1.commands.doSomething()
 *   )
 *   return (
 *     <>
 *       <Editor preset={preset} />
 *       <Button onClick={runCommand}>Run command</Button>
 *     </>
 *   )
 * }
 * ```
 */
export declare function usePreset<PluginNames extends string[], StackPlugins extends AllEditorPresetPluginTypes[], Preset extends EditorPresetBuilder<PluginNames, StackPlugins>>(createPreset: (builder: EditorPresetBuilder) => Preset, dependencies?: DependencyList): PresetAPI<Preset>;
export {};
