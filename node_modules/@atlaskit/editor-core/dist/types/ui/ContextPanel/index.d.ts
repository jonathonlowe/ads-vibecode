/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { jsx } from '@emotion/react';
import type { OptionalPlugin, PublicPluginAPI } from '@atlaskit/editor-common/types';
import { type ContextPanelPlugin } from '@atlaskit/editor-plugins/context-panel';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
export type Props = {
    visible: boolean;
    editorAPI: PublicPluginAPI<[OptionalPlugin<ContextPanelPlugin>]> | undefined;
    children?: React.ReactElement;
    hasPadding?: boolean;
    customWidth?: number;
};
export declare const panel: import("@emotion/react").SerializedStyles;
export declare const content: import("@emotion/react").SerializedStyles;
type SwappableContentAreaProps = {
    pluginContent?: React.ReactNode;
    editorView?: EditorView;
} & Props;
type State = {
    mounted: boolean;
    currentPluginContent?: React.ReactNode;
};
export declare class SwappableContentArea extends React.PureComponent<SwappableContentAreaProps, State> {
    state: {
        mounted: boolean;
        currentPluginContent: undefined;
    };
    static getDerivedStateFromProps(props: SwappableContentAreaProps, state: State): State | null;
    private unsetPluginContent;
    focusEditor: () => void;
    componentDidMount(): void;
    showPluginContent: () => jsx.JSX.Element | undefined;
    showProvidedContent: (isVisible: boolean) => jsx.JSX.Element | undefined;
    render(): jsx.JSX.Element;
}
export declare function ContextPanel(props: Props): jsx.JSX.Element;
export {};
