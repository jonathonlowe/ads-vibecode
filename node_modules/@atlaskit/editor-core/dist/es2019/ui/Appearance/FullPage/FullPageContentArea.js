/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React, { useImperativeHandle, useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx, useTheme } from '@emotion/react';
import classnames from 'classnames';
import { injectIntl } from 'react-intl-next';
import { fullPageMessages as messages } from '@atlaskit/editor-common/messages';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import ClickAreaBlock from '../../Addon/ClickAreaBlock';
import { contentComponentClickWrapper } from '../../Addon/ClickAreaBlock/contentComponentWrapper';
import { ContextPanel } from '../../ContextPanel';
import PluginSlot from '../../PluginSlot';
import { contentArea, contentAreaHeightNoToolbar, contentAreaWrapper, editorContentAreaStyle, editorContentGutterStyle, ScrollContainer, sidebarArea } from './StyledComponents';
export const CONTENT_AREA_TEST_ID = 'ak-editor-fp-content-area';
export const EDITOR_CONTAINER = 'ak-editor-container';
const Content = /*#__PURE__*/React.forwardRef((props, ref) => {
  var _contentAreaRef$curre;
  const theme = useTheme();
  const fullWidthMode = props.appearance === 'full-width';
  const scrollContainerRef = useRef(null);
  const contentAreaRef = useRef(null);
  const containerRef = useRef(null);
  useImperativeHandle(ref, () => ({
    get scrollContainer() {
      return scrollContainerRef.current;
    },
    get contentArea() {
      return contentAreaRef.current;
    },
    get containerArea() {
      return containerRef.current;
    }
  }), []);
  let interactionClassName;
  if (props.hasHadInteraction !== undefined && fg('platform_editor_no_selection_until_interaction')) {
    interactionClassName = props.hasHadInteraction ? 'ak-editor-has-interaction' : 'ak-editor-no-interaction';
  }
  return jsx("div", {
    css: [
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    contentArea,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
    editorExperiment('live_pages_graceful_edit', 'control') && props.isEditorToolbarHidden &&
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    contentAreaHeightNoToolbar],
    "data-testid": CONTENT_AREA_TEST_ID,
    ref: containerRef
    // eslint-disable-next-line  @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: !editorExperiment('live_pages_graceful_edit', 'control') && props.isEditorToolbarHidden ? 'ak-editor-content-area-no-toolbar' : undefined
  }, jsx("div", {
    css:
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
    contentAreaWrapper,
    "data-testid": EDITOR_CONTAINER,
    "data-editor-container": 'true'
  }, jsx(ScrollContainer
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
  , {
    className: "fabric-editor-popup-scroll-parent",
    featureFlags: props.featureFlags,
    ref: scrollContainerRef,
    viewMode: props === null || props === void 0 ? void 0 : props.viewMode,
    isScrollable: true
  }, jsx(ClickAreaBlock, {
    editorView: props.editorView,
    editorDisabled: props.disabled
  }, jsx("div", {
    css: [
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ...editorContentAreaStyle({
      fullWidthMode,
      layoutMaxWidth: theme.layoutMaxWidth,
      isEditorToolbarHidden: props.isEditorToolbarHidden
    })]
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: fg('platform_editor_lcm_styling_uplift') ? 'ak-editor-content-area-region' : undefined,
    "data-editor-editable-content": true,
    "data-editor-primary-toolbar-hidden": props.isEditorToolbarHidden && editorExperiment('platform_editor_controls', 'variant1') ? 'true' : undefined,
    role: "region",
    "aria-label": props.intl.formatMessage(messages.editableContentLabel),
    ref: contentAreaRef
  }, jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: editorContentGutterStyle()
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: fg('platform_editor_no_selection_until_interaction') ? classnames('ak-editor-content-area', 'appearance-full-page', interactionClassName, {
      'fabric-editor--full-width-mode': fullWidthMode
    }) : ['ak-editor-content-area', 'appearance-full-page', fullWidthMode ? 'fabric-editor--full-width-mode' : ''].join(' '),
    ref: contentAreaRef
  }, !!props.customContentComponents && 'before' in props.customContentComponents ? contentComponentClickWrapper(props.customContentComponents.before) : contentComponentClickWrapper(props.customContentComponents), jsx(PluginSlot, {
    editorView: props.editorView,
    editorActions: props.editorActions,
    eventDispatcher: props.eventDispatcher,
    providerFactory: props.providerFactory,
    appearance: props.appearance,
    items: props.contentComponents,
    pluginHooks: props.pluginHooks,
    contentArea: (_contentAreaRef$curre = contentAreaRef.current) !== null && _contentAreaRef$curre !== void 0 ? _contentAreaRef$curre : undefined,
    popupsMountPoint: props.popupsMountPoint,
    popupsBoundariesElement: props.popupsBoundariesElement,
    popupsScrollableElement: props.popupsScrollableElement,
    disabled: !!props.disabled,
    containerElement: scrollContainerRef.current,
    dispatchAnalyticsEvent: props.dispatchAnalyticsEvent,
    wrapperElement: props.wrapperElement
  }), props.editorDOMElement, !!props.customContentComponents && 'after' in props.customContentComponents ? contentComponentClickWrapper(props.customContentComponents.after) : null))))), jsx("div", {
    css: sidebarArea
  }, props.contextPanel || jsx(ContextPanel, {
    editorAPI: props.editorAPI,
    visible: false
  })));
});
export const FullPageContentArea = injectIntl(Content, {
  forwardRef: true
});