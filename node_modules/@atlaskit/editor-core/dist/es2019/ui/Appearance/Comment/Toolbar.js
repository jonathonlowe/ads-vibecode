import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React, { useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { akEditorMenuZIndex, akEditorToolbarKeylineHeight } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
const MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT = 490;

/* eslint-disable @atlaskit/platform/ensure-feature-flag-registration */
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Needs manual remediation
const mainToolbarWrapperStyle = (isTwoLineEditorToolbar = false) => css`
	position: relative;
	align-items: center;
	padding: ${"var(--ds-space-100, 8px)"} ${"var(--ds-space-100, 8px)"} 0;
	display: flex;
	height: auto;
	background-color: ${"var(--ds-surface, white)"};
	box-shadow: none;
	padding-left: ${"var(--ds-space-250, 20px)"};

	& > div {
		> :first-child:not(style),
		> style:first-child + * {
			margin-left: 0;
		}
		${isTwoLineEditorToolbar && `
        @media (max-width: ${MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT}px) {
          flex-direction: column-reverse;
          align-items: end;
          display: flex;
          justify-content: flex-end;
        }

        //make this more explicit for a toolbar
        > *:nth-child(1) {
          @media (max-width: ${MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT}px) {
            > div:nth-child(2) {
              justify-content: flex-end;
              display: flex;
            }
          }
        }
    `}
	}

	.block-type-btn {
		padding-left: 0;
	}

	${fg('platform-visual-refresh-icons') && 'span svg { max-width: 100%; }'}
`;
/* eslint-enable @atlaskit/platform/ensure-feature-flag-registration */

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
const stickyToolbarWrapperStyle = css`
	/* stylelint-disable declaration-block-no-duplicate-properties */
	position: relative;
	position: sticky;
	/* stylelint-enable declaration-block-no-duplicate-properties */
	padding-bottom: ${"var(--ds-space-100, 8px)"};
	z-index: ${akEditorMenuZIndex};
	transition: box-shadow ease-in-out 0.2s;
	&.show-keyline {
		box-shadow: 0 ${akEditorToolbarKeylineHeight}px 0 0
			${"var(--ds-background-accent-gray-subtlest, #F1F2F4)"};
	}
`;
const StickyToolbar = props => {
  const [top, setTop] = useState(0);

  // ED-15802: if externalToolbarRef is passed in, set top to externalToolbarRef?.current?.clientHeight
  // else if offsetTop is a number set top to offsetTop
  // otherwise top is 0 as initial state
  useEffect(() => {
    var _props$externalToolba, _props$externalToolba2;
    if ((_props$externalToolba = props.externalToolbarRef) !== null && _props$externalToolba !== void 0 && (_props$externalToolba2 = _props$externalToolba.current) !== null && _props$externalToolba2 !== void 0 && _props$externalToolba2.clientHeight) {
      setTop(props.externalToolbarRef.current.clientHeight);
    } else {
      setTop(props.offsetTop || 0);
    }
  }, [props.externalToolbarRef, props.offsetTop]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/prefer-primitives
    jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      css: [mainToolbarWrapperStyle(props.twoLineEditorToolbar), stickyToolbarWrapperStyle]
      // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
      ,
      style: {
        top: `${top}px`
      },
      "data-testid": "ak-editor-main-toolbar"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: 'show-keyline'
    }, props.children)
  );
};
const FixedToolbar = props =>
// eslint-disable-next-line @atlaskit/design-system/prefer-primitives
jsx("div", {
  // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
  css: mainToolbarWrapperStyle(props.twoLineEditorToolbar),
  "data-testid": "ak-editor-main-toolbar"
}, props.children);

/**
 * ED-15802: Scenarios when a sticky bar is used:
 * 1. useStickyToolbar is true
 * 2. useStickyToolbar is a DOM element
 * 3. useStickyToolbar is an object and has offsetTop key;
 */
const getStickyParameters = configuration => {
  // const isUsingStickyOffset, isHTMLElement is used so TS can properly infer types.
  const isHTMLElement = typeof configuration === 'object' && !('offsetTop' in configuration);
  const isUsingStickyOffset = typeof configuration === 'object' && 'offsetTop' in configuration;
  if (typeof configuration !== 'object') {
    return {
      externalToolbarRef: undefined,
      offsetTop: undefined
    };
  }
  if (isUsingStickyOffset) {
    return {
      offsetTop: configuration.offsetTop
    };
  }
  if (isHTMLElement) {
    return {
      externalToolbarRef: configuration
    };
  }
};
export const MainToolbar = ({
  useStickyToolbar,
  twoLineEditorToolbar,
  children
}) => {
  if (useStickyToolbar) {
    return jsx(StickyToolbar
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, getStickyParameters(useStickyToolbar), {
      twoLineEditorToolbar: twoLineEditorToolbar
    }), children);
  }
  return jsx(FixedToolbar, {
    twoLineEditorToolbar: twoLineEditorToolbar
  }, children);
};
export const mainToolbarCustomComponentsSlotStyle = (isTwoLineEditorToolbar = false) =>
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Needs manual remediation
css`
		display: flex;
		justify-content: flex-end;
		align-items: center;
		flex-grow: 1;
		padding-right: ${"var(--ds-space-250, 20px)"};
		> div {
			display: flex;
			flex-shrink: 0;
		}
		${isTwoLineEditorToolbar && `
    @media (max-width: ${MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT}px) {
      {
        padding-right: 0;
      }
    }
  `}
	`;