import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Transition from 'react-transition-group/Transition';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { ContextPanelConsumer } from '@atlaskit/editor-common/ui';
import { akEditorContextPanelWidth, akEditorSwoopCubicBezier } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
const ANIM_SPEED_MS = 500;
const panelHidden = css({
  width: 0
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const panel = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: `${akEditorContextPanelWidth}px`,
  height: '100%',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: `width ${ANIM_SPEED_MS}ms ${akEditorSwoopCubicBezier}`,
  overflow: 'hidden',
  boxShadow: `inset 2px 0 0 0 ${"var(--ds-border, #091E4224)"}`
});
const disablePanelAnimation = css({
  transition: 'none'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const content = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: `width 600ms ${akEditorSwoopCubicBezier}`,
  boxSizing: 'border-box',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: `${akEditorContextPanelWidth}px`,
  height: '100%',
  overflowY: 'auto'
});
const paddingStyles = css({
  padding: `${"var(--ds-space-200, 16px)"} ${"var(--ds-space-200, 16px)"} 0px`
});
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
export class SwappableContentArea extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      mounted: false,
      currentPluginContent: undefined
    });
    _defineProperty(this, "focusEditor", () => {
      var _editorAPI$core;
      const {
        editorAPI
      } = this.props;
      editorAPI === null || editorAPI === void 0 ? void 0 : (_editorAPI$core = editorAPI.core) === null || _editorAPI$core === void 0 ? void 0 : _editorAPI$core.actions.focus({
        scrollIntoView: false
      });
    });
    _defineProperty(this, "showPluginContent", () => {
      const {
        pluginContent
      } = this.props;
      const {
        currentPluginContent
      } = this.state;
      if (!currentPluginContent) {
        return;
      }
      const animSpeedMs = fg('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return jsx(Transition, {
        timeout: this.state.mounted ? animSpeedMs : 0,
        in: !!pluginContent,
        mountOnEnter: true,
        unmountOnExit: true,
        onExited: () => this.unsetPluginContent()
      }, currentPluginContent);
    });
    _defineProperty(this, "showProvidedContent", isVisible => {
      const {
        children
      } = this.props;
      if (!children) {
        return;
      }
      const animSpeedMs = fg('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return jsx(Transition, {
        timeout: this.state.mounted ? animSpeedMs : 0,
        in: isVisible,
        mountOnEnter: true,
        unmountOnExit: true,
        onExiting: this.focusEditor
      }, children);
    });
  }
  static getDerivedStateFromProps(props, state) {
    if (props.pluginContent !== state.currentPluginContent) {
      return {
        ...state,
        currentPluginContent: props.pluginContent
      };
    }
    return null;
  }
  unsetPluginContent() {
    this.setState({
      currentPluginContent: undefined
    });
  }
  componentDidMount() {
    // use this to trigger an animation
    this.setState({
      mounted: true
    });
  }
  render() {
    var _this$props$customWid;
    const width = (_this$props$customWid = this.props.customWidth) !== null && _this$props$customWid !== void 0 ? _this$props$customWid : akEditorContextPanelWidth;
    const userVisible = !!this.props.visible;
    const visible = userVisible || !!this.state.currentPluginContent;
    const hasPadding = this.props.hasPadding === undefined ? true : this.props.hasPadding;
    const customPanelWidthStyles = css({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @repo/internal/react/no-class-components
      width: `${this.props.customWidth}px`,
      overflowX: 'hidden'
    });
    return jsx(ContextPanelConsumer, null, ({
      broadcastWidth
    }) => {
      const contextPanelWidth = visible ? width : 0;
      broadcastWidth(contextPanelWidth);
      return jsx("div", {
        css: [panel,
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
        this.props.customWidth && customPanelWidthStyles, !visible && panelHidden, fg('platform_editor_disable_context_panel_animation') && disablePanelAnimation],
        "data-testid": "context-panel-panel",
        "aria-labelledby": "context-panel-title",
        role: "dialog"
      }, jsx("div", {
        "data-testid": "context-panel-content",
        css: [content, hasPadding && paddingStyles,
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
        this.props.customWidth && customPanelWidthStyles, !visible && panelHidden, fg('platform_editor_disable_context_panel_animation') && disablePanelAnimation]
      }, this.showPluginContent() || this.showProvidedContent(userVisible)));
    });
  }
}
export function ContextPanel(props) {
  var _contextPanelState$co;
  const {
    contextPanelState
  } = useSharedPluginState(props.editorAPI, ['contextPanel']);
  const firstContent = contextPanelState && (contextPanelState === null || contextPanelState === void 0 ? void 0 : (_contextPanelState$co = contextPanelState.contents) === null || _contextPanelState$co === void 0 ? void 0 : _contextPanelState$co.find(Boolean));
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx(SwappableContentArea, _extends({}, props, {
      editorAPI: props.editorAPI,
      pluginContent: firstContent
    }))
  );
}