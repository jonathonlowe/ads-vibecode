import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { fg } from '@atlaskit/platform-feature-flags';
var key = new PluginKey('editorStateNotificationPlugin');
export var createEditorStateNotificationPlugin = function createEditorStateNotificationPlugin(onEditorStateUpdated, onEditorViewStateUpdatedCallbacks) {
  var transactions = [];
  return new SafePlugin({
    key: key,
    state: {
      init: function init() {
        return {
          latestTransaction: undefined
        };
      },
      apply: function apply(tr) {
        transactions.push(tr);
        return {
          latestTransaction: tr
        };
      }
    },
    view: function view() {
      return {
        update: function update(view, oldEditorState) {
          var _key$getState;
          var originalTransaction = (_key$getState = key.getState(view.state)) === null || _key$getState === void 0 ? void 0 : _key$getState.latestTransaction;
          if (originalTransaction && fg('platform_editor_migrate_state_updates')) {
            onEditorViewStateUpdatedCallbacks.forEach(function (entry) {
              entry.callback({
                originalTransaction: originalTransaction,
                transactions: transactions,
                oldEditorState: oldEditorState,
                newEditorState: view.state
              });
            });
            transactions = [];
          }
          onEditorStateUpdated({
            oldEditorState: oldEditorState,
            newEditorState: view.state
          });
        }
      };
    }
  });
};