import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useCallback, useState, useRef, Fragment, memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next/useAnalyticsEvents';
import { ACTION_SUBJECT, EVENT_TYPE, fireAnalyticsEvent } from '@atlaskit/editor-common/analytics';
import { PerformanceMetrics } from '@atlaskit/editor-performance-metrics/react';
import UFOLoadHold from '@atlaskit/react-ufo/load-hold';
export var EditorUFOBridge = /*#__PURE__*/memo(function () {
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    hold = _useState2[0],
    setHold = _useState2[1];
  var onTTAI = useCallback(function () {
    setHold(false);
  }, []);
  return jsx(Fragment, null, jsx(UFOLoadHold, {
    name: "editor-core",
    hold: hold
  }), jsx(PerformanceMetrics, {
    onTTAI: onTTAI
  }));
});
export var EditorPerformanceMetrics = /*#__PURE__*/memo(function () {
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    ttai = _useState4[0],
    setTTAI = _useState4[1];
  var _useState5 = useState(null),
    _useState6 = _slicedToArray(_useState5, 2),
    ttvc = _useState6[0],
    setTTVC = _useState6[1];
  var _useState7 = useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    latency = _useState8[0],
    setUserLatency = _useState8[1];
  var ttvcSentRef = useRef(false);
  var latencySentRef = useRef(false);
  var handleAnalyticsEvent = useCallback(function (data) {
    fireAnalyticsEvent(createAnalyticsEvent)(data);
  }, [createAnalyticsEvent]);
  var onTTAI = useCallback(function (_ref) {
    var idleAt = _ref.idleAt;
    setTTAI(idleAt);
  }, []);
  var onTTVC = useCallback(function (_ref2) {
    var ttvc = _ref2.ttvc;
    setTTVC(ttvc);
  }, []);
  var onUserLatency = useCallback(function (_ref3) {
    var latency = _ref3.latency;
    setUserLatency(latency);
  }, []);
  useEffect(function () {
    if (!ttai || !ttvc || ttvcSentRef.current) {
      return;
    }
    ttvcSentRef.current = true;
    handleAnalyticsEvent({
      payload: {
        // @ts-expect-error Temporary data - let's not extend the public analytics enum
        action: 'ttvc',
        actionSubject: ACTION_SUBJECT.EDITOR,
        eventType: EVENT_TYPE.OPERATIONAL,
        attributes: {
          ttvc: ttvc,
          ttai: ttai
        }
      }
    });
  }, [handleAnalyticsEvent, ttai, ttvc]);
  useEffect(function () {
    if (!latency || latencySentRef.current) {
      return;
    }
    latencySentRef.current = true;
    handleAnalyticsEvent({
      payload: {
        // @ts-expect-error Temporary data - let's not extend the public analytics enum
        action: 'latency',
        actionSubject: ACTION_SUBJECT.EDITOR,
        eventType: EVENT_TYPE.OPERATIONAL,
        attributes: {
          latency: latency
        }
      }
    });
  }, [handleAnalyticsEvent, latency]);
  return jsx(PerformanceMetrics, {
    onTTAI: onTTAI,
    onTTVC: onTTVC,
    onUserLatency: onUserLatency
  });
});