import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Transition from 'react-transition-group/Transition';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { ContextPanelConsumer } from '@atlaskit/editor-common/ui';
import { akEditorContextPanelWidth, akEditorSwoopCubicBezier } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
var ANIM_SPEED_MS = 500;
var panelHidden = css({
  width: 0
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var panel = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: "".concat(akEditorContextPanelWidth, "px"),
  height: '100%',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: "width ".concat(ANIM_SPEED_MS, "ms ").concat(akEditorSwoopCubicBezier),
  overflow: 'hidden',
  boxShadow: "inset 2px 0 0 0 ".concat("var(--ds-border, #091E4224)")
});
var disablePanelAnimation = css({
  transition: 'none'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var content = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: "width 600ms ".concat(akEditorSwoopCubicBezier),
  boxSizing: 'border-box',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: "".concat(akEditorContextPanelWidth, "px"),
  height: '100%',
  overflowY: 'auto'
});
var paddingStyles = css({
  padding: "var(--ds-space-200, 16px)".concat(" ", "var(--ds-space-200, 16px)", " 0px")
});
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
export var SwappableContentArea = /*#__PURE__*/function (_React$PureComponent) {
  function SwappableContentArea() {
    var _this;
    _classCallCheck(this, SwappableContentArea);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SwappableContentArea, [].concat(args));
    _defineProperty(_this, "state", {
      mounted: false,
      currentPluginContent: undefined
    });
    _defineProperty(_this, "focusEditor", function () {
      var _editorAPI$core;
      var editorAPI = _this.props.editorAPI;
      editorAPI === null || editorAPI === void 0 || (_editorAPI$core = editorAPI.core) === null || _editorAPI$core === void 0 || _editorAPI$core.actions.focus({
        scrollIntoView: false
      });
    });
    _defineProperty(_this, "showPluginContent", function () {
      var pluginContent = _this.props.pluginContent;
      var currentPluginContent = _this.state.currentPluginContent;
      if (!currentPluginContent) {
        return;
      }
      var animSpeedMs = fg('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return jsx(Transition, {
        timeout: _this.state.mounted ? animSpeedMs : 0,
        in: !!pluginContent,
        mountOnEnter: true,
        unmountOnExit: true,
        onExited: function onExited() {
          return _this.unsetPluginContent();
        }
      }, currentPluginContent);
    });
    _defineProperty(_this, "showProvidedContent", function (isVisible) {
      var children = _this.props.children;
      if (!children) {
        return;
      }
      var animSpeedMs = fg('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return jsx(Transition, {
        timeout: _this.state.mounted ? animSpeedMs : 0,
        in: isVisible,
        mountOnEnter: true,
        unmountOnExit: true,
        onExiting: _this.focusEditor
      }, children);
    });
    return _this;
  }
  _inherits(SwappableContentArea, _React$PureComponent);
  return _createClass(SwappableContentArea, [{
    key: "unsetPluginContent",
    value: function unsetPluginContent() {
      this.setState({
        currentPluginContent: undefined
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      // use this to trigger an animation
      this.setState({
        mounted: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$customWid,
        _this2 = this;
      var width = (_this$props$customWid = this.props.customWidth) !== null && _this$props$customWid !== void 0 ? _this$props$customWid : akEditorContextPanelWidth;
      var userVisible = !!this.props.visible;
      var visible = userVisible || !!this.state.currentPluginContent;
      var hasPadding = this.props.hasPadding === undefined ? true : this.props.hasPadding;
      var customPanelWidthStyles = css({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @repo/internal/react/no-class-components
        width: "".concat(this.props.customWidth, "px"),
        overflowX: 'hidden'
      });
      return jsx(ContextPanelConsumer, null, function (_ref) {
        var broadcastWidth = _ref.broadcastWidth;
        var contextPanelWidth = visible ? width : 0;
        broadcastWidth(contextPanelWidth);
        return jsx("div", {
          css: [panel,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
          _this2.props.customWidth && customPanelWidthStyles, !visible && panelHidden, fg('platform_editor_disable_context_panel_animation') && disablePanelAnimation],
          "data-testid": "context-panel-panel",
          "aria-labelledby": "context-panel-title",
          role: "dialog"
        }, jsx("div", {
          "data-testid": "context-panel-content",
          css: [content, hasPadding && paddingStyles,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
          _this2.props.customWidth && customPanelWidthStyles, !visible && panelHidden, fg('platform_editor_disable_context_panel_animation') && disablePanelAnimation]
        }, _this2.showPluginContent() || _this2.showProvidedContent(userVisible)));
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.pluginContent !== state.currentPluginContent) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentPluginContent: props.pluginContent
        });
      }
      return null;
    }
  }]);
}(React.PureComponent);
export function ContextPanel(props) {
  var _contextPanelState$co;
  var _useSharedPluginState = useSharedPluginState(props.editorAPI, ['contextPanel']),
    contextPanelState = _useSharedPluginState.contextPanelState;
  var firstContent = contextPanelState && (contextPanelState === null || contextPanelState === void 0 || (_contextPanelState$co = contextPanelState.contents) === null || _contextPanelState$co === void 0 ? void 0 : _contextPanelState$co.find(Boolean));
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx(SwappableContentArea, _extends({}, props, {
      editorAPI: props.editorAPI,
      pluginContent: firstContent
    }))
  );
}