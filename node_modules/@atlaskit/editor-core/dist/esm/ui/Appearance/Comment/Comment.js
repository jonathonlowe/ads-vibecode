import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useEffect, useMemo, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import classnames from 'classnames';
import { useIntl } from 'react-intl-next';
import ButtonGroup from '@atlaskit/button/button-group';
import Button from '@atlaskit/button/new';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import messages from '@atlaskit/editor-common/messages';
import { GRID_GUTTER } from '@atlaskit/editor-common/styles';
import { WidthConsumer, WidthProvider } from '@atlaskit/editor-common/ui';
import { ToolbarArrowKeyNavigationProvider } from '@atlaskit/editor-common/ui-menu';
import { tableCommentEditorStyles } from '@atlaskit/editor-plugins/table/ui/common-styles';
import { akEditorMobileBreakoutPoint } from '@atlaskit/editor-shared-styles';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import ClickAreaBlock from '../../Addon/ClickAreaBlock';
import { contentComponentClickWrapper } from '../../Addon/ClickAreaBlock/contentComponentWrapper';
import { createEditorContentStyle } from '../../ContentStyles';
import PluginSlot from '../../PluginSlot';
import { ToolbarWithSizeDetector as Toolbar } from '../../Toolbar/ToolbarWithSizeDetector';
import WithFlash from '../../WithFlash';
import { MainToolbar, mainToolbarCustomComponentsSlotStyle } from './Toolbar';
var CommentEditorMargin = 14;
var commentEditorStyles = css({
  display: 'flex',
  flexDirection: 'column',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.less-margin .ProseMirror': {
    margin: "var(--ds-space-150, 12px)".concat(" ", "var(--ds-space-100, 8px)", " ", "var(--ds-space-100, 8px)")
  },
  minWidth: '272px',
  height: 'auto',
  backgroundColor: "var(--ds-background-input, white)",
  border: "1px solid ".concat("var(--ds-border-input, #8590A2)"),
  boxSizing: 'border-box',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  borderRadius: "var(--ds-border-radius, 3px)",
  maxWidth: 'inherit',
  wordWrap: 'break-word'
});
var ContentArea = createEditorContentStyle(css({
  flexGrow: 1,
  overflowX: 'clip',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '24px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.ProseMirror': {
    margin: "var(--ds-space-150, 12px)"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.gridParent': {
    marginLeft: "var(--ds-space-025, 2px)",
    marginRight: "var(--ds-space-025, 2px)",
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: "calc(100% + ".concat(CommentEditorMargin - GRID_GUTTER, "px)")
  },
  padding: "var(--ds-space-250, 20px)"
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
tableCommentEditorStyles));
ContentArea.displayName = 'ContentArea';
var secondaryToolbarStyles = css({
  boxSizing: 'border-box',
  justifyContent: 'flex-end',
  alignItems: 'center',
  display: 'flex',
  padding: "var(--ds-space-150, 12px)".concat(" ", "var(--ds-space-025, 2px)")
});
var appearance = 'comment';
export var CommentEditorWithIntl = function CommentEditorWithIntl(props) {
  var editorAPI = props.editorAPI;
  var _useSharedPluginState = useSharedPluginState(editorAPI, ['media', 'maxContentSize', 'primaryToolbar', 'editorViewMode']),
    mediaState = _useSharedPluginState.mediaState,
    maxContentSizeState = _useSharedPluginState.maxContentSizeState,
    primaryToolbarState = _useSharedPluginState.primaryToolbarState,
    editorViewModeState = _useSharedPluginState.editorViewModeState;
  var intl = useIntl();
  var editorDOMElement = props.editorDOMElement,
    editorView = props.editorView,
    editorActions = props.editorActions,
    eventDispatcher = props.eventDispatcher,
    providerFactory = props.providerFactory,
    contentComponents = props.contentComponents,
    customContentComponents = props.customContentComponents,
    customPrimaryToolbarComponents = props.customPrimaryToolbarComponents,
    primaryToolbarComponentsProp = props.primaryToolbarComponents,
    customSecondaryToolbarComponents = props.customSecondaryToolbarComponents,
    popupsMountPoint = props.popupsMountPoint,
    popupsBoundariesElement = props.popupsBoundariesElement,
    popupsScrollableElement = props.popupsScrollableElement,
    maxHeight = props.maxHeight,
    _props$minHeight = props.minHeight,
    minHeight = _props$minHeight === void 0 ? 150 : _props$minHeight,
    onSave = props.onSave,
    onCancel = props.onCancel,
    disabled = props.disabled,
    dispatchAnalyticsEvent = props.dispatchAnalyticsEvent,
    useStickyToolbar = props.useStickyToolbar,
    pluginHooks = props.pluginHooks,
    featureFlags = props.featureFlags,
    innerRef = props.innerRef;
  var maxContentSizeReached = Boolean(maxContentSizeState === null || maxContentSizeState === void 0 ? void 0 : maxContentSizeState.maxContentSizeReached);
  var showSecondaryToolbar = !!onSave || !!onCancel || !!customSecondaryToolbarComponents;
  var containerElement = React.useRef(null);

  // Wrapper container for toolbar and content area
  var wrapperElementRef = useMemo(function () {
    return innerRef || /*#__PURE__*/React.createRef();
  }, [innerRef]);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    saveButtonDisabled = _useState2[0],
    setSaveButtonDisabled = _useState2[1];
  useEffect(function () {
    if (mediaState) {
      mediaState.subscribeToUploadInProgressState(setSaveButtonDisabled);
    }
    return function () {
      return mediaState === null || mediaState === void 0 ? void 0 : mediaState.unsubscribeFromUploadInProgressState(setSaveButtonDisabled);
    };
  }, [mediaState]);
  var handleSave = useCallback(function () {
    if (editorView && onSave) {
      onSave(editorView);
    }
  }, [editorView, onSave]);
  var handleCancel = useCallback(function () {
    if (editorView && onCancel) {
      onCancel(editorView);
    }
  }, [editorView, onCancel]);
  var isShortcutToFocusToolbar = useCallback(function (event) {
    //Alt + F9 to reach first element in this main toolbar
    return event.altKey && (event.key === 'F9' || event.keyCode === 120);
  }, []);

  // When primary toolbar components is undefined, do not show two line editor toolbar
  var isTwoLineToolbarEnabled = !!customPrimaryToolbarComponents;
  var handleEscape = useCallback(function (event) {
    if (!(editorView !== null && editorView !== void 0 && editorView.hasFocus())) {
      editorView === null || editorView === void 0 || editorView.focus();
    }
    event.preventDefault();
    event.stopPropagation();
  }, [editorView]);
  var primaryToolbarComponents = primaryToolbarComponentsProp;
  if (Array.isArray(primaryToolbarState === null || primaryToolbarState === void 0 ? void 0 : primaryToolbarState.components) && Array.isArray(primaryToolbarComponents)) {
    primaryToolbarComponents = primaryToolbarState.components.concat(primaryToolbarComponents);
  }
  return jsx(WithFlash, {
    animate: maxContentSizeReached
  }, jsx(WidthProvider, null, jsx("div", {
    css: [commentEditorStyles,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      minHeight: "".concat(minHeight, "px")
    })]
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: "akEditor",
    ref: wrapperElementRef
  }, jsx(MainToolbar, {
    useStickyToolbar: useStickyToolbar,
    twoLineEditorToolbar: isTwoLineToolbarEnabled
  }, jsx(ToolbarArrowKeyNavigationProvider, {
    editorView: editorView,
    childComponentSelector: "[data-testid='ak-editor-main-toolbar']",
    isShortcutToFocusToolbar: isShortcutToFocusToolbar,
    handleEscape: handleEscape,
    editorAppearance: appearance,
    useStickyToolbar: useStickyToolbar,
    intl: intl
  }, jsx(Toolbar
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  , {
    editorView: editorView,
    editorActions: editorActions
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    eventDispatcher: eventDispatcher
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    providerFactory: providerFactory,
    appearance: appearance,
    items: primaryToolbarComponents,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    disabled: !!disabled,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    containerElement: containerElement.current,
    twoLineEditorToolbar: isTwoLineToolbarEnabled
  }), jsx("div", {
    css: mainToolbarCustomComponentsSlotStyle(isTwoLineToolbarEnabled)
  }, customPrimaryToolbarComponents))), jsx(ClickAreaBlock, {
    editorView: editorView,
    editorDisabled: disabled
  }, jsx(WidthConsumer, null, function (_ref) {
    var width = _ref.width;
    return jsx(ContentArea, {
      ref: containerElement,
      css: maxHeight ?
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      css({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        maxHeight: "".concat(maxHeight, "px"),
        // When maxHeight is set, content area should have overflow-y explicitly set as auto
        // As we have overflow-x: clip for the content area, and when maxHeight prop is set, overflow-y will be computed as visible by default.
        // This will cause the content area to have content overflowing the container
        // so need to set overflow-y as auto to make sure the content area is scrollable
        overflowY: 'auto'
      }) : null
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: classnames('ak-editor-content-area', {
        'less-margin': width < akEditorMobileBreakoutPoint
      }),
      featureFlags: featureFlags,
      viewMode: editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode
    }, customContentComponents && 'before' in customContentComponents ? contentComponentClickWrapper(customContentComponents.before) : contentComponentClickWrapper(customContentComponents), jsx(PluginSlot, {
      editorView: editorView,
      editorActions: editorActions,
      eventDispatcher: eventDispatcher,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      providerFactory: providerFactory,
      appearance: appearance,
      items: contentComponents,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      containerElement: containerElement.current,
      disabled: !!disabled,
      wrapperElement: wrapperElementRef.current,
      pluginHooks: pluginHooks
    }), editorDOMElement, customContentComponents && 'after' in customContentComponents ? contentComponentClickWrapper(customContentComponents.after) : null);
  }))), showSecondaryToolbar && jsx("div", {
    css: secondaryToolbarStyles,
    "data-testid": "ak-editor-secondary-toolbar"
  }, jsx(ButtonGroup, null, !!onSave && jsx(Button, {
    appearance: "primary",
    onClick: handleSave,
    testId: "comment-save-button",
    isDisabled: disabled || saveButtonDisabled,
    interactionName: "editor-comment-save-button"
  }, intl.formatMessage(messages.saveButton)), !!onCancel && jsx(Button, {
    appearance: "subtle",
    onClick: handleCancel,
    isDisabled: disabled,
    interactionName: "editor-comment-cancel-button"
  }, intl.formatMessage(messages.cancelButton))), jsx("span", {
    style: {
      flexGrow: 1
    }
  }), customSecondaryToolbarComponents)));
};
CommentEditorWithIntl.displayName = 'CommentEditorAppearance';