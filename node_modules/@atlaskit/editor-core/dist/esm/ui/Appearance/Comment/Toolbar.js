import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject, _templateObject2, _templateObject3;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React, { useEffect, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { akEditorMenuZIndex, akEditorToolbarKeylineHeight } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
var MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT = 490;

/* eslint-disable @atlaskit/platform/ensure-feature-flag-registration */
// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Needs manual remediation
var mainToolbarWrapperStyle = function mainToolbarWrapperStyle() {
  var isTwoLineEditorToolbar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\tposition: relative;\n\talign-items: center;\n\tpadding: ", " ", " 0;\n\tdisplay: flex;\n\theight: auto;\n\tbackground-color: ", ";\n\tbox-shadow: none;\n\tpadding-left: ", ";\n\n\t& > div {\n\t\t> :first-child:not(style),\n\t\t> style:first-child + * {\n\t\t\tmargin-left: 0;\n\t\t}\n\t\t", "\n\t}\n\n\t.block-type-btn {\n\t\tpadding-left: 0;\n\t}\n\n\t", "\n"])), "var(--ds-space-100, 8px)", "var(--ds-space-100, 8px)", "var(--ds-surface, white)", "var(--ds-space-250, 20px)", isTwoLineEditorToolbar && "\n        @media (max-width: ".concat(MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT, "px) {\n          flex-direction: column-reverse;\n          align-items: end;\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        //make this more explicit for a toolbar\n        > *:nth-child(1) {\n          @media (max-width: ").concat(MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT, "px) {\n            > div:nth-child(2) {\n              justify-content: flex-end;\n              display: flex;\n            }\n          }\n        }\n    "), fg('platform-visual-refresh-icons') && 'span svg { max-width: 100%; }');
};
/* eslint-enable @atlaskit/platform/ensure-feature-flag-registration */

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var stickyToolbarWrapperStyle = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n\t/* stylelint-disable declaration-block-no-duplicate-properties */\n\tposition: relative;\n\tposition: sticky;\n\t/* stylelint-enable declaration-block-no-duplicate-properties */\n\tpadding-bottom: ", ";\n\tz-index: ", ";\n\ttransition: box-shadow ease-in-out 0.2s;\n\t&.show-keyline {\n\t\tbox-shadow: 0 ", "px 0 0\n\t\t\t", ";\n\t}\n"])), "var(--ds-space-100, 8px)", akEditorMenuZIndex, akEditorToolbarKeylineHeight, "var(--ds-background-accent-gray-subtlest, #F1F2F4)");
var StickyToolbar = function StickyToolbar(props) {
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    top = _useState2[0],
    setTop = _useState2[1];

  // ED-15802: if externalToolbarRef is passed in, set top to externalToolbarRef?.current?.clientHeight
  // else if offsetTop is a number set top to offsetTop
  // otherwise top is 0 as initial state
  useEffect(function () {
    var _props$externalToolba;
    if ((_props$externalToolba = props.externalToolbarRef) !== null && _props$externalToolba !== void 0 && (_props$externalToolba = _props$externalToolba.current) !== null && _props$externalToolba !== void 0 && _props$externalToolba.clientHeight) {
      setTop(props.externalToolbarRef.current.clientHeight);
    } else {
      setTop(props.offsetTop || 0);
    }
  }, [props.externalToolbarRef, props.offsetTop]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/prefer-primitives
    jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      css: [mainToolbarWrapperStyle(props.twoLineEditorToolbar), stickyToolbarWrapperStyle]
      // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage/preview
      ,
      style: {
        top: "".concat(top, "px")
      },
      "data-testid": "ak-editor-main-toolbar"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: 'show-keyline'
    }, props.children)
  );
};
var FixedToolbar = function FixedToolbar(props) {
  return (
    // eslint-disable-next-line @atlaskit/design-system/prefer-primitives
    jsx("div", {
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      css: mainToolbarWrapperStyle(props.twoLineEditorToolbar),
      "data-testid": "ak-editor-main-toolbar"
    }, props.children)
  );
};

/**
 * ED-15802: Scenarios when a sticky bar is used:
 * 1. useStickyToolbar is true
 * 2. useStickyToolbar is a DOM element
 * 3. useStickyToolbar is an object and has offsetTop key;
 */
var getStickyParameters = function getStickyParameters(configuration) {
  // const isUsingStickyOffset, isHTMLElement is used so TS can properly infer types.
  var isHTMLElement = _typeof(configuration) === 'object' && !('offsetTop' in configuration);
  var isUsingStickyOffset = _typeof(configuration) === 'object' && 'offsetTop' in configuration;
  if (_typeof(configuration) !== 'object') {
    return {
      externalToolbarRef: undefined,
      offsetTop: undefined
    };
  }
  if (isUsingStickyOffset) {
    return {
      offsetTop: configuration.offsetTop
    };
  }
  if (isHTMLElement) {
    return {
      externalToolbarRef: configuration
    };
  }
};
export var MainToolbar = function MainToolbar(_ref) {
  var useStickyToolbar = _ref.useStickyToolbar,
    twoLineEditorToolbar = _ref.twoLineEditorToolbar,
    children = _ref.children;
  if (useStickyToolbar) {
    return jsx(StickyToolbar
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, getStickyParameters(useStickyToolbar), {
      twoLineEditorToolbar: twoLineEditorToolbar
    }), children);
  }
  return jsx(FixedToolbar, {
    twoLineEditorToolbar: twoLineEditorToolbar
  }, children);
};
export var mainToolbarCustomComponentsSlotStyle = function mainToolbarCustomComponentsSlotStyle() {
  var isTwoLineEditorToolbar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return (// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Needs manual remediation
    css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t\talign-items: center;\n\t\tflex-grow: 1;\n\t\tpadding-right: ", ";\n\t\t> div {\n\t\t\tdisplay: flex;\n\t\t\tflex-shrink: 0;\n\t\t}\n\t\t", "\n\t"])), "var(--ds-space-250, 20px)", isTwoLineEditorToolbar && "\n    @media (max-width: ".concat(MAXIMUM_TWO_LINE_TOOLBAR_BREAKPOINT, "px) {\n      {\n        padding-right: 0;\n      }\n    }\n  "))
  );
};