import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useMemo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { isSSR } from '@atlaskit/editor-common/core-utils';
import { ToolbarSize } from '@atlaskit/editor-common/types';
import { akEditorMobileMaxWidth } from '@atlaskit/editor-shared-styles';
import { WidthObserver } from '@atlaskit/width-detector';
import { isFullPage } from '../../utils/is-full-page';
import { useElementWidth } from './hooks';
import { Toolbar } from './Toolbar';
import { toolbarSizeToWidth, widthToToolbarSize } from './toolbar-size';
var toolbar = css(_defineProperty({
  width: '100%',
  position: 'relative'
}, "@media (max-width: ".concat(akEditorMobileMaxWidth, "px)"), {
  gridColumn: '1 / 2',
  gridRow: 2,
  width: 'calc(100% - 30px)',
  margin: "0 ".concat("var(--ds-space-200, 16px)")
}));
export var ToolbarWithSizeDetector = function ToolbarWithSizeDetector(props) {
  var ref = React.useRef(null);
  var _React$useState = React.useState(undefined),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    width = _React$useState2[0],
    setWidth = _React$useState2[1];
  var elementWidth = useElementWidth(ref, {
    skip: typeof width !== 'undefined'
  });
  var defaultToolbarSize = isSSR() && isFullPage(props.appearance) ? ToolbarSize.XXL : undefined;
  var toolbarSize = typeof width === 'undefined' && typeof elementWidth === 'undefined' ? defaultToolbarSize :
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  widthToToolbarSize(width || elementWidth, props.appearance);
  var toolbarStyle = useMemo(function () {
    var toolbarWidth = isFullPage(props.appearance) && props.twoLineEditorToolbar ? ToolbarSize.S : ToolbarSize.M;
    var toolbarMinWidth = toolbarSizeToWidth(toolbarWidth, props.appearance);
    var minWidth = "min-width: ".concat(props.hasMinWidth ? toolbarMinWidth : '254', "px");
    return [toolbar, minWidth];
  }, [props.appearance, props.hasMinWidth, props.twoLineEditorToolbar]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    jsx("div", {
      css: toolbarStyle
    }, jsx(WidthObserver, {
      setWidth: setWidth
    }), props.editorView && toolbarSize ?
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx(Toolbar, _extends({}, props, {
      toolbarSize: toolbarSize
    })) : jsx("div", {
      ref: ref
    }))
  );
};