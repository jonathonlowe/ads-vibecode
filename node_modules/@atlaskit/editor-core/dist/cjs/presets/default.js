"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultPreset = createDefaultPreset;
exports.useDefaultPreset = useDefaultPreset;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _preset = require("@atlaskit/editor-common/preset");
var _analytics = require("@atlaskit/editor-plugins/analytics");
var _base = require("@atlaskit/editor-plugins/base");
var _betterTypeHistory = require("@atlaskit/editor-plugins/better-type-history");
var _blockType = require("@atlaskit/editor-plugins/block-type");
var _clearMarksOnEmptyDoc = require("@atlaskit/editor-plugins/clear-marks-on-empty-doc");
var _clipboard = require("@atlaskit/editor-plugins/clipboard");
var _codeBlock = require("@atlaskit/editor-plugins/code-block");
var _composition = require("@atlaskit/editor-plugins/composition");
var _contextIdentifier = require("@atlaskit/editor-plugins/context-identifier");
var _copyButton = require("@atlaskit/editor-plugins/copy-button");
var _decorations = require("@atlaskit/editor-plugins/decorations");
var _editorDisabled = require("@atlaskit/editor-plugins/editor-disabled");
var _featureFlags = require("@atlaskit/editor-plugins/feature-flags");
var _floatingToolbar = require("@atlaskit/editor-plugins/floating-toolbar");
var _focus = require("@atlaskit/editor-plugins/focus");
var _history = require("@atlaskit/editor-plugins/history");
var _hyperlink = require("@atlaskit/editor-plugins/hyperlink");
var _interaction = require("@atlaskit/editor-plugins/interaction");
var _paste = require("@atlaskit/editor-plugins/paste");
var _placeholder = require("@atlaskit/editor-plugins/placeholder");
var _primaryToolbar = require("@atlaskit/editor-plugins/primary-toolbar");
var _quickInsert = require("@atlaskit/editor-plugins/quick-insert");
var _selection = require("@atlaskit/editor-plugins/selection");
var _selectionToolbar = require("@atlaskit/editor-plugins/selection-toolbar");
var _submitEditor = require("@atlaskit/editor-plugins/submit-editor");
var _textFormatting = require("@atlaskit/editor-plugins/text-formatting");
var _typeAhead = require("@atlaskit/editor-plugins/type-ahead");
var _undoRedo = require("@atlaskit/editor-plugins/undo-redo");
var _unsupportedContent = require("@atlaskit/editor-plugins/unsupported-content");
var _width = require("@atlaskit/editor-plugins/width");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _isFullPage = require("../utils/is-full-page");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // #region Imports
// #endregion

/**
 * Note: The order that presets are added determines
 * their placement in the editor toolbar
 */
function createDefaultPreset(options) {
  var _options$featureFlags, _options$featureFlags2;
  var isFullPage = (0, _isFullPage.isFullPage)(options.appearance);
  var preset = new _preset.EditorPresetBuilder().add([_featureFlags.featureFlagsPlugin, options.featureFlags || {}]).maybeAdd([_analytics.analyticsPlugin, {
    createAnalyticsEvent: options.createAnalyticsEvent,
    performanceTracking: options.performanceTracking
  }], Boolean(options.allowAnalyticsGASV3)).add(_betterTypeHistory.betterTypeHistoryPlugin).add([_paste.pastePlugin, _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.paste), {}, {
    isFullPage: isFullPage
  })]).add(_clipboard.clipboardPlugin).add(_focus.focusPlugin).maybeAdd(_interaction.interactionPlugin, Boolean(options === null || options === void 0 ? void 0 : options.__livePage) && (0, _platformFeatureFlags.fg)('platform_editor_no_selection_until_interaction')).add(_composition.compositionPlugin).add([_contextIdentifier.contextIdentifierPlugin, {
    contextIdentifierProvider: options.contextIdentifierProvider
  }]).add([_base.basePlugin, options.base]).add(_decorations.decorationsPlugin).add([_typeAhead.typeAheadPlugin, options.typeAhead]).maybeAdd(_history.historyPlugin, Boolean(options.allowUndoRedoButtons)).add([_primaryToolbar.primaryToolbarPlugin, {
    contextualFormattingEnabled: isFullPage
  }]).maybeAdd(_undoRedo.undoRedoPlugin, Boolean((_options$featureFlags = (_options$featureFlags2 = options.featureFlags) === null || _options$featureFlags2 === void 0 ? void 0 : _options$featureFlags2.undoRedoButtons) !== null && _options$featureFlags !== void 0 ? _options$featureFlags : options.allowUndoRedoButtons)).add([_blockType.blockTypePlugin, _objectSpread(_objectSpread({}, options.blockType), {}, {
    includeBlockQuoteAsTextstyleOption: isFullPage
  })]).add(_clearMarksOnEmptyDoc.clearMarksOnEmptyDocPlugin).add([_selectionToolbar.selectionToolbarPlugin, {
    preferenceToolbarAboveSelection: !!options.preferenceToolbarAboveSelection,
    contextualFormattingEnabled: isFullPage
  }]).add([_hyperlink.hyperlinkPlugin, _objectSpread(_objectSpread({}, options.hyperlinkOptions), {}, {
    // @ts-ignore Temporary solution to check for Live Page editor.
    __livePage: options.__livePage
  })]).add([_textFormatting.textFormattingPlugin, options.textFormatting]).add(_width.widthPlugin).add([_quickInsert.quickInsertPlugin, options.quickInsert]).add([_placeholder.placeholderPlugin, options.placeholder]).add(_unsupportedContent.unsupportedContentPlugin).add(_editorDisabled.editorDisabledPlugin).add([_submitEditor.submitEditorPlugin, options.submitEditor]).add(_copyButton.copyButtonPlugin).add(_floatingToolbar.floatingToolbarPlugin).add([_selection.selectionPlugin, _objectSpread(_objectSpread({}, options.selection), {}, {
    __livePage: options.__livePage
  })]).add([_codeBlock.codeBlockPlugin, options.codeBlock]);
  return preset;
}
function useDefaultPreset(props) {
  var preset = createDefaultPreset(props);
  return [preset];
}