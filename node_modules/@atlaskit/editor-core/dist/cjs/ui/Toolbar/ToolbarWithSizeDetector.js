"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarWithSizeDetector = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _coreUtils = require("@atlaskit/editor-common/core-utils");
var _types = require("@atlaskit/editor-common/types");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _widthDetector = require("@atlaskit/width-detector");
var _isFullPage = require("../../utils/is-full-page");
var _hooks = require("./hooks");
var _Toolbar = require("./Toolbar");
var _toolbarSize = require("./toolbar-size");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var toolbar = (0, _react2.css)((0, _defineProperty2.default)({
  width: '100%',
  position: 'relative'
}, "@media (max-width: ".concat(_editorSharedStyles.akEditorMobileMaxWidth, "px)"), {
  gridColumn: '1 / 2',
  gridRow: 2,
  width: 'calc(100% - 30px)',
  margin: "0 ".concat("var(--ds-space-200, 16px)")
}));
var ToolbarWithSizeDetector = exports.ToolbarWithSizeDetector = function ToolbarWithSizeDetector(props) {
  var ref = _react.default.useRef(null);
  var _React$useState = _react.default.useState(undefined),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    width = _React$useState2[0],
    setWidth = _React$useState2[1];
  var elementWidth = (0, _hooks.useElementWidth)(ref, {
    skip: typeof width !== 'undefined'
  });
  var defaultToolbarSize = (0, _coreUtils.isSSR)() && (0, _isFullPage.isFullPage)(props.appearance) ? _types.ToolbarSize.XXL : undefined;
  var toolbarSize = typeof width === 'undefined' && typeof elementWidth === 'undefined' ? defaultToolbarSize :
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _toolbarSize.widthToToolbarSize)(width || elementWidth, props.appearance);
  var toolbarStyle = (0, _react.useMemo)(function () {
    var toolbarWidth = (0, _isFullPage.isFullPage)(props.appearance) && props.twoLineEditorToolbar ? _types.ToolbarSize.S : _types.ToolbarSize.M;
    var toolbarMinWidth = (0, _toolbarSize.toolbarSizeToWidth)(toolbarWidth, props.appearance);
    var minWidth = "min-width: ".concat(props.hasMinWidth ? toolbarMinWidth : '254', "px");
    return [toolbar, minWidth];
  }, [props.appearance, props.hasMinWidth, props.twoLineEditorToolbar]);
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: toolbarStyle
    }, (0, _react2.jsx)(_widthDetector.WidthObserver, {
      setWidth: setWidth
    }), props.editorView && toolbarSize ?
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    (0, _react2.jsx)(_Toolbar.Toolbar, (0, _extends2.default)({}, props, {
      toolbarSize: toolbarSize
    })) : (0, _react2.jsx)("div", {
      ref: ref
    }))
  );
};