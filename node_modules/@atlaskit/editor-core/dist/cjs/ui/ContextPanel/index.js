"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextPanel = ContextPanel;
exports.panel = exports.content = exports.SwappableContentArea = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _Transition = _interopRequireDefault(require("react-transition-group/Transition"));
var _hooks = require("@atlaskit/editor-common/hooks");
var _ui = require("@atlaskit/editor-common/ui");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var ANIM_SPEED_MS = 500;
var panelHidden = (0, _react2.css)({
  width: 0
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var panel = exports.panel = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: "".concat(_editorSharedStyles.akEditorContextPanelWidth, "px"),
  height: '100%',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: "width ".concat(ANIM_SPEED_MS, "ms ").concat(_editorSharedStyles.akEditorSwoopCubicBezier),
  overflow: 'hidden',
  boxShadow: "inset 2px 0 0 0 ".concat("var(--ds-border, #091E4224)")
});
var disablePanelAnimation = (0, _react2.css)({
  transition: 'none'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var content = exports.content = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  transition: "width 600ms ".concat(_editorSharedStyles.akEditorSwoopCubicBezier),
  boxSizing: 'border-box',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  width: "".concat(_editorSharedStyles.akEditorContextPanelWidth, "px"),
  height: '100%',
  overflowY: 'auto'
});
var paddingStyles = (0, _react2.css)({
  padding: "var(--ds-space-200, 16px)".concat(" ", "var(--ds-space-200, 16px)", " 0px")
});
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var SwappableContentArea = exports.SwappableContentArea = /*#__PURE__*/function (_React$PureComponent) {
  function SwappableContentArea() {
    var _this;
    (0, _classCallCheck2.default)(this, SwappableContentArea);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SwappableContentArea, [].concat(args));
    (0, _defineProperty2.default)(_this, "state", {
      mounted: false,
      currentPluginContent: undefined
    });
    (0, _defineProperty2.default)(_this, "focusEditor", function () {
      var _editorAPI$core;
      var editorAPI = _this.props.editorAPI;
      editorAPI === null || editorAPI === void 0 || (_editorAPI$core = editorAPI.core) === null || _editorAPI$core === void 0 || _editorAPI$core.actions.focus({
        scrollIntoView: false
      });
    });
    (0, _defineProperty2.default)(_this, "showPluginContent", function () {
      var pluginContent = _this.props.pluginContent;
      var currentPluginContent = _this.state.currentPluginContent;
      if (!currentPluginContent) {
        return;
      }
      var animSpeedMs = (0, _platformFeatureFlags.fg)('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return (0, _react2.jsx)(_Transition.default, {
        timeout: _this.state.mounted ? animSpeedMs : 0,
        in: !!pluginContent,
        mountOnEnter: true,
        unmountOnExit: true,
        onExited: function onExited() {
          return _this.unsetPluginContent();
        }
      }, currentPluginContent);
    });
    (0, _defineProperty2.default)(_this, "showProvidedContent", function (isVisible) {
      var children = _this.props.children;
      if (!children) {
        return;
      }
      var animSpeedMs = (0, _platformFeatureFlags.fg)('platform_editor_disable_context_panel_animation') ? 0 : ANIM_SPEED_MS;
      return (0, _react2.jsx)(_Transition.default, {
        timeout: _this.state.mounted ? animSpeedMs : 0,
        in: isVisible,
        mountOnEnter: true,
        unmountOnExit: true,
        onExiting: _this.focusEditor
      }, children);
    });
    return _this;
  }
  (0, _inherits2.default)(SwappableContentArea, _React$PureComponent);
  return (0, _createClass2.default)(SwappableContentArea, [{
    key: "unsetPluginContent",
    value: function unsetPluginContent() {
      this.setState({
        currentPluginContent: undefined
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      // use this to trigger an animation
      this.setState({
        mounted: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$customWid,
        _this2 = this;
      var width = (_this$props$customWid = this.props.customWidth) !== null && _this$props$customWid !== void 0 ? _this$props$customWid : _editorSharedStyles.akEditorContextPanelWidth;
      var userVisible = !!this.props.visible;
      var visible = userVisible || !!this.state.currentPluginContent;
      var hasPadding = this.props.hasPadding === undefined ? true : this.props.hasPadding;
      var customPanelWidthStyles = (0, _react2.css)({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @repo/internal/react/no-class-components
        width: "".concat(this.props.customWidth, "px"),
        overflowX: 'hidden'
      });
      return (0, _react2.jsx)(_ui.ContextPanelConsumer, null, function (_ref) {
        var broadcastWidth = _ref.broadcastWidth;
        var contextPanelWidth = visible ? width : 0;
        broadcastWidth(contextPanelWidth);
        return (0, _react2.jsx)("div", {
          css: [panel,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
          _this2.props.customWidth && customPanelWidthStyles, !visible && panelHidden, (0, _platformFeatureFlags.fg)('platform_editor_disable_context_panel_animation') && disablePanelAnimation],
          "data-testid": "context-panel-panel",
          "aria-labelledby": "context-panel-title",
          role: "dialog"
        }, (0, _react2.jsx)("div", {
          "data-testid": "context-panel-content",
          css: [content, hasPadding && paddingStyles,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/consistent-css-prop-usage
          _this2.props.customWidth && customPanelWidthStyles, !visible && panelHidden, (0, _platformFeatureFlags.fg)('platform_editor_disable_context_panel_animation') && disablePanelAnimation]
        }, _this2.showPluginContent() || _this2.showProvidedContent(userVisible)));
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.pluginContent !== state.currentPluginContent) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentPluginContent: props.pluginContent
        });
      }
      return null;
    }
  }]);
}(_react.default.PureComponent);
function ContextPanel(props) {
  var _contextPanelState$co;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(props.editorAPI, ['contextPanel']),
    contextPanelState = _useSharedPluginState.contextPanelState;
  var firstContent = contextPanelState && (contextPanelState === null || contextPanelState === void 0 || (_contextPanelState$co = contextPanelState.contents) === null || _contextPanelState$co === void 0 ? void 0 : _contextPanelState$co.find(Boolean));
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    (0, _react2.jsx)(SwappableContentArea, (0, _extends2.default)({}, props, {
      editorAPI: props.editorAPI,
      pluginContent: firstContent
    }))
  );
}