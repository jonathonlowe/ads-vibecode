"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommentEditorWithIntl = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _reactIntlNext = require("react-intl-next");
var _buttonGroup = _interopRequireDefault(require("@atlaskit/button/button-group"));
var _new = _interopRequireDefault(require("@atlaskit/button/new"));
var _hooks = require("@atlaskit/editor-common/hooks");
var _messages = _interopRequireDefault(require("@atlaskit/editor-common/messages"));
var _styles = require("@atlaskit/editor-common/styles");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _commonStyles = require("@atlaskit/editor-plugins/table/ui/common-styles");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _ClickAreaBlock = _interopRequireDefault(require("../../Addon/ClickAreaBlock"));
var _contentComponentWrapper = require("../../Addon/ClickAreaBlock/contentComponentWrapper");
var _ContentStyles = require("../../ContentStyles");
var _PluginSlot = _interopRequireDefault(require("../../PluginSlot"));
var _ToolbarWithSizeDetector = require("../../Toolbar/ToolbarWithSizeDetector");
var _WithFlash = _interopRequireDefault(require("../../WithFlash"));
var _Toolbar = require("./Toolbar");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default

var CommentEditorMargin = 14;
var commentEditorStyles = (0, _react2.css)({
  display: 'flex',
  flexDirection: 'column',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.less-margin .ProseMirror': {
    margin: "var(--ds-space-150, 12px)".concat(" ", "var(--ds-space-100, 8px)", " ", "var(--ds-space-100, 8px)")
  },
  minWidth: '272px',
  height: 'auto',
  backgroundColor: "var(--ds-background-input, white)",
  border: "1px solid ".concat("var(--ds-border-input, #8590A2)"),
  boxSizing: 'border-box',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  borderRadius: "var(--ds-border-radius, 3px)",
  maxWidth: 'inherit',
  wordWrap: 'break-word'
});
var ContentArea = (0, _ContentStyles.createEditorContentStyle)((0, _react2.css)({
  flexGrow: 1,
  overflowX: 'clip',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '24px',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.ProseMirror': {
    margin: "var(--ds-space-150, 12px)"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '.gridParent': {
    marginLeft: "var(--ds-space-025, 2px)",
    marginRight: "var(--ds-space-025, 2px)",
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: "calc(100% + ".concat(CommentEditorMargin - _styles.GRID_GUTTER, "px)")
  },
  padding: "var(--ds-space-250, 20px)"
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
_commonStyles.tableCommentEditorStyles));
ContentArea.displayName = 'ContentArea';
var secondaryToolbarStyles = (0, _react2.css)({
  boxSizing: 'border-box',
  justifyContent: 'flex-end',
  alignItems: 'center',
  display: 'flex',
  padding: "var(--ds-space-150, 12px)".concat(" ", "var(--ds-space-025, 2px)")
});
var appearance = 'comment';
var CommentEditorWithIntl = exports.CommentEditorWithIntl = function CommentEditorWithIntl(props) {
  var editorAPI = props.editorAPI;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(editorAPI, ['media', 'maxContentSize', 'primaryToolbar', 'editorViewMode']),
    mediaState = _useSharedPluginState.mediaState,
    maxContentSizeState = _useSharedPluginState.maxContentSizeState,
    primaryToolbarState = _useSharedPluginState.primaryToolbarState,
    editorViewModeState = _useSharedPluginState.editorViewModeState;
  var intl = (0, _reactIntlNext.useIntl)();
  var editorDOMElement = props.editorDOMElement,
    editorView = props.editorView,
    editorActions = props.editorActions,
    eventDispatcher = props.eventDispatcher,
    providerFactory = props.providerFactory,
    contentComponents = props.contentComponents,
    customContentComponents = props.customContentComponents,
    customPrimaryToolbarComponents = props.customPrimaryToolbarComponents,
    primaryToolbarComponentsProp = props.primaryToolbarComponents,
    customSecondaryToolbarComponents = props.customSecondaryToolbarComponents,
    popupsMountPoint = props.popupsMountPoint,
    popupsBoundariesElement = props.popupsBoundariesElement,
    popupsScrollableElement = props.popupsScrollableElement,
    maxHeight = props.maxHeight,
    _props$minHeight = props.minHeight,
    minHeight = _props$minHeight === void 0 ? 150 : _props$minHeight,
    onSave = props.onSave,
    onCancel = props.onCancel,
    disabled = props.disabled,
    dispatchAnalyticsEvent = props.dispatchAnalyticsEvent,
    useStickyToolbar = props.useStickyToolbar,
    pluginHooks = props.pluginHooks,
    featureFlags = props.featureFlags,
    innerRef = props.innerRef;
  var maxContentSizeReached = Boolean(maxContentSizeState === null || maxContentSizeState === void 0 ? void 0 : maxContentSizeState.maxContentSizeReached);
  var showSecondaryToolbar = !!onSave || !!onCancel || !!customSecondaryToolbarComponents;
  var containerElement = _react.default.useRef(null);

  // Wrapper container for toolbar and content area
  var wrapperElementRef = (0, _react.useMemo)(function () {
    return innerRef || /*#__PURE__*/_react.default.createRef();
  }, [innerRef]);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    saveButtonDisabled = _useState2[0],
    setSaveButtonDisabled = _useState2[1];
  (0, _react.useEffect)(function () {
    if (mediaState) {
      mediaState.subscribeToUploadInProgressState(setSaveButtonDisabled);
    }
    return function () {
      return mediaState === null || mediaState === void 0 ? void 0 : mediaState.unsubscribeFromUploadInProgressState(setSaveButtonDisabled);
    };
  }, [mediaState]);
  var handleSave = (0, _react.useCallback)(function () {
    if (editorView && onSave) {
      onSave(editorView);
    }
  }, [editorView, onSave]);
  var handleCancel = (0, _react.useCallback)(function () {
    if (editorView && onCancel) {
      onCancel(editorView);
    }
  }, [editorView, onCancel]);
  var isShortcutToFocusToolbar = (0, _react.useCallback)(function (event) {
    //Alt + F9 to reach first element in this main toolbar
    return event.altKey && (event.key === 'F9' || event.keyCode === 120);
  }, []);

  // When primary toolbar components is undefined, do not show two line editor toolbar
  var isTwoLineToolbarEnabled = !!customPrimaryToolbarComponents;
  var handleEscape = (0, _react.useCallback)(function (event) {
    if (!(editorView !== null && editorView !== void 0 && editorView.hasFocus())) {
      editorView === null || editorView === void 0 || editorView.focus();
    }
    event.preventDefault();
    event.stopPropagation();
  }, [editorView]);
  var primaryToolbarComponents = primaryToolbarComponentsProp;
  if (Array.isArray(primaryToolbarState === null || primaryToolbarState === void 0 ? void 0 : primaryToolbarState.components) && Array.isArray(primaryToolbarComponents)) {
    primaryToolbarComponents = primaryToolbarState.components.concat(primaryToolbarComponents);
  }
  return (0, _react2.jsx)(_WithFlash.default, {
    animate: maxContentSizeReached
  }, (0, _react2.jsx)(_ui.WidthProvider, null, (0, _react2.jsx)("div", {
    css: [commentEditorStyles,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _react2.css)({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      minHeight: "".concat(minHeight, "px")
    })]
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: "akEditor",
    ref: wrapperElementRef
  }, (0, _react2.jsx)(_Toolbar.MainToolbar, {
    useStickyToolbar: useStickyToolbar,
    twoLineEditorToolbar: isTwoLineToolbarEnabled
  }, (0, _react2.jsx)(_uiMenu.ToolbarArrowKeyNavigationProvider, {
    editorView: editorView,
    childComponentSelector: "[data-testid='ak-editor-main-toolbar']",
    isShortcutToFocusToolbar: isShortcutToFocusToolbar,
    handleEscape: handleEscape,
    editorAppearance: appearance,
    useStickyToolbar: useStickyToolbar,
    intl: intl
  }, (0, _react2.jsx)(_ToolbarWithSizeDetector.ToolbarWithSizeDetector
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  , {
    editorView: editorView,
    editorActions: editorActions
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    eventDispatcher: eventDispatcher
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    providerFactory: providerFactory,
    appearance: appearance,
    items: primaryToolbarComponents,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    disabled: !!disabled,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    containerElement: containerElement.current,
    twoLineEditorToolbar: isTwoLineToolbarEnabled
  }), (0, _react2.jsx)("div", {
    css: (0, _Toolbar.mainToolbarCustomComponentsSlotStyle)(isTwoLineToolbarEnabled)
  }, customPrimaryToolbarComponents))), (0, _react2.jsx)(_ClickAreaBlock.default, {
    editorView: editorView,
    editorDisabled: disabled
  }, (0, _react2.jsx)(_ui.WidthConsumer, null, function (_ref) {
    var width = _ref.width;
    return (0, _react2.jsx)(ContentArea, {
      ref: containerElement,
      css: maxHeight ?
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      (0, _react2.css)({
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
        maxHeight: "".concat(maxHeight, "px"),
        // When maxHeight is set, content area should have overflow-y explicitly set as auto
        // As we have overflow-x: clip for the content area, and when maxHeight prop is set, overflow-y will be computed as visible by default.
        // This will cause the content area to have content overflowing the container
        // so need to set overflow-y as auto to make sure the content area is scrollable
        overflowY: 'auto'
      }) : null
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: (0, _classnames.default)('ak-editor-content-area', {
        'less-margin': width < _editorSharedStyles.akEditorMobileBreakoutPoint
      }),
      featureFlags: featureFlags,
      viewMode: editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode
    }, customContentComponents && 'before' in customContentComponents ? (0, _contentComponentWrapper.contentComponentClickWrapper)(customContentComponents.before) : (0, _contentComponentWrapper.contentComponentClickWrapper)(customContentComponents), (0, _react2.jsx)(_PluginSlot.default, {
      editorView: editorView,
      editorActions: editorActions,
      eventDispatcher: eventDispatcher,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      providerFactory: providerFactory,
      appearance: appearance,
      items: contentComponents,
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      containerElement: containerElement.current,
      disabled: !!disabled,
      wrapperElement: wrapperElementRef.current,
      pluginHooks: pluginHooks
    }), editorDOMElement, customContentComponents && 'after' in customContentComponents ? (0, _contentComponentWrapper.contentComponentClickWrapper)(customContentComponents.after) : null);
  }))), showSecondaryToolbar && (0, _react2.jsx)("div", {
    css: secondaryToolbarStyles,
    "data-testid": "ak-editor-secondary-toolbar"
  }, (0, _react2.jsx)(_buttonGroup.default, null, !!onSave && (0, _react2.jsx)(_new.default, {
    appearance: "primary",
    onClick: handleSave,
    testId: "comment-save-button",
    isDisabled: disabled || saveButtonDisabled,
    interactionName: "editor-comment-save-button"
  }, intl.formatMessage(_messages.default.saveButton)), !!onCancel && (0, _react2.jsx)(_new.default, {
    appearance: "subtle",
    onClick: handleCancel,
    isDisabled: disabled,
    interactionName: "editor-comment-cancel-button"
  }, intl.formatMessage(_messages.default.cancelButton))), (0, _react2.jsx)("span", {
    style: {
      flexGrow: 1
    }
  }), customSecondaryToolbarComponents)));
};
CommentEditorWithIntl.displayName = 'CommentEditorAppearance';