"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _hooks = require("@atlaskit/editor-common/hooks");
var _scrollbar = require("@atlaskit/editor-shared-styles/scrollbar");
var _ContentStyles = require("../ContentStyles");
var _PluginSlot = _interopRequireDefault(require("../PluginSlot"));
var _WithFlash = _interopRequireDefault(require("../WithFlash"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var chromelessEditorStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '20px',
  height: 'auto',
  overflowX: 'hidden',
  overflowY: 'auto'
},
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
_scrollbar.scrollbarStyles, {
  maxWidth: 'inherit',
  boxSizing: 'border-box',
  wordWrap: 'break-word',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  'div > .ProseMirror': {
    outline: 'none',
    whiteSpace: 'pre-wrap',
    padding: 0,
    margin: 0,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    '& > :last-child': {
      paddingBottom: "var(--ds-space-100, 0.5em)"
    }
  }
});
var ContentArea = (0, _ContentStyles.createEditorContentStyle)();
ContentArea.displayName = 'ContentArea';
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var Editor = exports.default = /*#__PURE__*/function (_React$Component) {
  function Editor() {
    var _this;
    (0, _classCallCheck2.default)(this, Editor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Editor, [].concat(args));
    (0, _defineProperty2.default)(_this, "appearance", 'chromeless');
    (0, _defineProperty2.default)(_this, "containerElement", null);
    (0, _defineProperty2.default)(_this, "renderChrome", function (_ref) {
      var maxContentSize = _ref.maxContentSize;
      var _this$props = _this.props,
        editorDOMElement = _this$props.editorDOMElement,
        editorView = _this$props.editorView,
        editorActions = _this$props.editorActions,
        eventDispatcher = _this$props.eventDispatcher,
        providerFactory = _this$props.providerFactory,
        contentComponents = _this$props.contentComponents,
        customContentComponents = _this$props.customContentComponents,
        maxHeight = _this$props.maxHeight,
        _this$props$minHeight = _this$props.minHeight,
        minHeight = _this$props$minHeight === void 0 ? 30 : _this$props$minHeight,
        popupsMountPoint = _this$props.popupsMountPoint,
        popupsBoundariesElement = _this$props.popupsBoundariesElement,
        popupsScrollableElement = _this$props.popupsScrollableElement,
        disabled = _this$props.disabled,
        dispatchAnalyticsEvent = _this$props.dispatchAnalyticsEvent,
        pluginHooks = _this$props.pluginHooks,
        featureFlags = _this$props.featureFlags;
      var maxContentSizeReached = Boolean(maxContentSize === null || maxContentSize === void 0 ? void 0 : maxContentSize.maxContentSizeReached);
      var _useSharedPluginState = (0, _hooks.useSharedPluginState)(_this.props.editorAPI, ['editorViewMode']),
        editorViewModeState = _useSharedPluginState.editorViewModeState;
      return (0, _react2.jsx)(_WithFlash.default, {
        animate: maxContentSizeReached
      }, (0, _react2.jsx)("div", {
        css: [chromelessEditorStyles, maxHeight &&
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react2.css)({
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
          maxHeight: "".concat(maxHeight, "px")
        }),
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
        (0, _react2.css)({
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
          minHeight: "".concat(minHeight, "px")
        })],
        "data-testid": "chromeless-editor",
        ref: function ref(_ref2) {
          return _this.containerElement = _ref2;
        }
      }, (0, _react2.jsx)(ContentArea
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      , {
        className: "ak-editor-content-area",
        featureFlags: featureFlags,
        viewMode: editorViewModeState === null || editorViewModeState === void 0 ? void 0 : editorViewModeState.mode
      }, customContentComponents && 'before' in customContentComponents ? customContentComponents.before : customContentComponents, (0, _react2.jsx)(_PluginSlot.default, {
        editorView: editorView,
        editorActions: editorActions,
        eventDispatcher: eventDispatcher,
        providerFactory: providerFactory,
        appearance: _this.appearance,
        items: contentComponents,
        popupsMountPoint: popupsMountPoint,
        popupsBoundariesElement: popupsBoundariesElement,
        popupsScrollableElement: popupsScrollableElement,
        containerElement: _this.containerElement,
        disabled: !!disabled,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        wrapperElement: _this.containerElement,
        pluginHooks: pluginHooks
      }), editorDOMElement, customContentComponents && 'after' in customContentComponents ? customContentComponents.after : null)));
    });
    return _this;
  }
  (0, _inherits2.default)(Editor, _React$Component);
  return (0, _createClass2.default)(Editor, [{
    key: "render",
    value: function render() {
      return (0, _react2.jsx)(RenderWithPluginState, {
        editorAPI: this.props.editorAPI,
        renderChrome: this.renderChrome
      });
    }
  }]);
}(_react.default.Component);
(0, _defineProperty2.default)(Editor, "displayName", 'ChromelessEditorAppearance');
function RenderWithPluginState(_ref3) {
  var renderChrome = _ref3.renderChrome,
    editorAPI = _ref3.editorAPI;
  var _useSharedPluginState2 = (0, _hooks.useSharedPluginState)(editorAPI, ['maxContentSize']),
    maxContentSizeState = _useSharedPluginState2.maxContentSizeState;
  return (0, _react2.jsx)(_react.Fragment, null, renderChrome({
    maxContentSize: maxContentSizeState
  }));
}