"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _composableEditor = require("./composable-editor");
var _useUniversalPreset = _interopRequireDefault(require("./presets/useUniversalPreset"));
var _editorDeprecationWarnings = _interopRequireDefault(require("./utils/editorDeprecationWarnings"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // Disable no-re-export rule for entry point files
/* eslint-disable @atlaskit/editor/no-re-export */ /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var ComposableEditorWrapper = function ComposableEditorWrapper(_ref) {
  var props = _ref.props,
    initialPluginConfiguration = _ref.initialPluginConfiguration;
  var preset = (0, _useUniversalPreset.default)({
    props: props,
    initialPluginConfiguration: initialPluginConfiguration
  });
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  return (0, _react2.jsx)(_composableEditor.ComposableEditor, (0, _extends2.default)({
    preset: preset
  }, props));
};
// eslint-disable-next-line @repo/internal/deprecations/deprecation-ticket-required -- Ignored via go/ED-25883
/**
 * @deprecated - Please use the `ComposableEditor` component instead.
 * We strongly encourage the use of custom presets, however your easiest migration path is to use the `useUniversalPreset` hook.
 * The `ComposableEditor` component is a more flexible and customizable alternative to the `Editor` component.
 * It allows you to create an editor with a custom set of plugins and configurations.
 * For more information, see the documentation for the `ComposableEditor` component here: https://atlaskit.atlassian.com/packages/editor/editor-core
 */
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var Editor = exports.default = /*#__PURE__*/function (_React$Component) {
  function Editor(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Editor);
    _this = _callSuper(this, Editor, [props]);
    (0, _editorDeprecationWarnings.default)(props);
    return _this;
  }
  (0, _inherits2.default)(Editor, _React$Component);
  return (0, _createClass2.default)(Editor, [{
    key: "render",
    value: function render() {
      return (0, _react2.jsx)(ComposableEditorWrapper, {
        props: this.props,
        initialPluginConfiguration: this.props.initialPluginConfiguration
      });
    }
  }]);
}(_react.default.Component);
(0, _defineProperty2.default)(Editor, "defaultProps", {
  appearance: 'comment',
  disabled: false,
  extensionHandlers: {},
  allowHelpDialog: true,
  quickInsert: true
});