"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorUFOBridge = exports.EditorPerformanceMetrics = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _useAnalyticsEvents2 = require("@atlaskit/analytics-next/useAnalyticsEvents");
var _analytics = require("@atlaskit/editor-common/analytics");
var _react3 = require("@atlaskit/editor-performance-metrics/react");
var _loadHold = _interopRequireDefault(require("@atlaskit/react-ufo/load-hold"));
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var EditorUFOBridge = exports.EditorUFOBridge = /*#__PURE__*/(0, _react.memo)(function () {
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hold = _useState2[0],
    setHold = _useState2[1];
  var onTTAI = (0, _react.useCallback)(function () {
    setHold(false);
  }, []);
  return (0, _react2.jsx)(_react.Fragment, null, (0, _react2.jsx)(_loadHold.default, {
    name: "editor-core",
    hold: hold
  }), (0, _react2.jsx)(_react3.PerformanceMetrics, {
    onTTAI: onTTAI
  }));
});
var EditorPerformanceMetrics = exports.EditorPerformanceMetrics = /*#__PURE__*/(0, _react.memo)(function () {
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    ttai = _useState4[0],
    setTTAI = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ttvc = _useState6[0],
    setTTVC = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    latency = _useState8[0],
    setUserLatency = _useState8[1];
  var ttvcSentRef = (0, _react.useRef)(false);
  var latencySentRef = (0, _react.useRef)(false);
  var handleAnalyticsEvent = (0, _react.useCallback)(function (data) {
    (0, _analytics.fireAnalyticsEvent)(createAnalyticsEvent)(data);
  }, [createAnalyticsEvent]);
  var onTTAI = (0, _react.useCallback)(function (_ref) {
    var idleAt = _ref.idleAt;
    setTTAI(idleAt);
  }, []);
  var onTTVC = (0, _react.useCallback)(function (_ref2) {
    var ttvc = _ref2.ttvc;
    setTTVC(ttvc);
  }, []);
  var onUserLatency = (0, _react.useCallback)(function (_ref3) {
    var latency = _ref3.latency;
    setUserLatency(latency);
  }, []);
  (0, _react.useEffect)(function () {
    if (!ttai || !ttvc || ttvcSentRef.current) {
      return;
    }
    ttvcSentRef.current = true;
    handleAnalyticsEvent({
      payload: {
        // @ts-expect-error Temporary data - let's not extend the public analytics enum
        action: 'ttvc',
        actionSubject: _analytics.ACTION_SUBJECT.EDITOR,
        eventType: _analytics.EVENT_TYPE.OPERATIONAL,
        attributes: {
          ttvc: ttvc,
          ttai: ttai
        }
      }
    });
  }, [handleAnalyticsEvent, ttai, ttvc]);
  (0, _react.useEffect)(function () {
    if (!latency || latencySentRef.current) {
      return;
    }
    latencySentRef.current = true;
    handleAnalyticsEvent({
      payload: {
        // @ts-expect-error Temporary data - let's not extend the public analytics enum
        action: 'latency',
        actionSubject: _analytics.ACTION_SUBJECT.EDITOR,
        eventType: _analytics.EVENT_TYPE.OPERATIONAL,
        attributes: {
          latency: latency
        }
      }
    });
  }, [handleAnalyticsEvent, latency]);
  return (0, _react2.jsx)(_react3.PerformanceMetrics, {
    onTTAI: onTTAI,
    onTTVC: onTTVC,
    onUserLatency: onUserLatency
  });
});