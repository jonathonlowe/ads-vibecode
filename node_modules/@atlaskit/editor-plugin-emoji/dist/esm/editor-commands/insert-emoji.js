import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { getAnnotationMarksForPos } from '@atlaskit/editor-common/utils';
import { Fragment } from '@atlaskit/editor-prosemirror/model';
import { Selection } from '@atlaskit/editor-prosemirror/state';
import { safeInsert } from '@atlaskit/editor-prosemirror/utils';
import { fg } from '@atlaskit/platform-feature-flags';
export var createEmojiFragment = function createEmojiFragment(doc, pos, emoji) {
  var _emoji$id = emoji.id,
    id = _emoji$id === void 0 ? '' : _emoji$id,
    fallback = emoji.fallback,
    shortName = emoji.shortName;
  var annotationMarksForPos = getAnnotationMarksForPos(pos);
  var emojiNode = doc.type.schema.nodes.emoji.createChecked({
    shortName: shortName,
    id: id,
    text: fallback || shortName
  }, null, annotationMarksForPos);
  var space = doc.type.schema.text(' ', annotationMarksForPos);
  return Fragment.fromArray([emojiNode, space]);
};
export var insertEmoji = function insertEmoji(editorAnalyticsAPI) {
  return function (emojiId, inputMethod) {
    return function (_ref) {
      var tr = _ref.tr;
      var doc = tr.doc,
        selection = tr.selection;
      var emoji = tr.doc.type.schema.nodes.emoji;
      if (emoji && emojiId) {
        var fragment;
        if (fg('editor_inline_comments_paste_insert_nodes')) {
          fragment = createEmojiFragment(doc, selection.$head, emojiId);
        } else {
          var node = emoji.createChecked(_objectSpread(_objectSpread({}, emojiId), {}, {
            text: emojiId.fallback || emojiId.shortName
          }));
          var textNode = doc.type.schema.text(' ');
          fragment = Fragment.fromArray([node, textNode]);
        }
        var newTr = safeInsert(fragment)(tr);
        if (inputMethod) {
          editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent({
            action: ACTION.INSERTED,
            actionSubject: ACTION_SUBJECT.DOCUMENT,
            actionSubjectId: ACTION_SUBJECT_ID.EMOJI,
            attributes: {
              inputMethod: inputMethod
            },
            eventType: EVENT_TYPE.TRACK
          })(newTr);
        }
        newTr.setSelection(Selection.near(newTr.doc.resolve(selection.$from.pos + fragment.size)));
        return newTr;
      }
      return null;
    };
  };
};