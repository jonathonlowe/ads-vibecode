import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { emoji } from '@atlaskit/adf-schema';
import { convertToInlineCss } from '@atlaskit/editor-common/lazy-node-view';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
var isSSR = Boolean(process.env.REACT_SSR);

/**
 * Wrapper for ADF emoji node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @nodeSpecException:toDOM patch
 * @returns
 */
export var emojiNodeSpec = function emojiNodeSpec() {
  if (isSSR || editorExperiment('platform_editor_inline_node_virtualization', 'off')) {
    return emoji;
  }
  return _objectSpread(_objectSpread({}, emoji), {}, {
    toDOM: function toDOM(node) {
      return emojiToDom(node);
    }
  });
};
export function emojiToDom(node) {
  // From packages/elements/emoji/src/components/common/EmojiPlaceholder.tsx
  var _node$attrs = node.attrs,
    shortName = _node$attrs.shortName,
    id = _node$attrs.id,
    text = _node$attrs.text;
  var attrs = {
    'data-emoji-short-name': shortName,
    'data-emoji-id': id,
    'data-emoji-text': text,
    contenteditable: 'false',
    style: convertToInlineCss({
      content: "''",
      fill: "var(--ds-background-neutral, #091E420F)",
      minWidth: "20px",
      width: "20px",
      height: "20px",
      position: 'relative',
      margin: '-1px 0',
      display: 'inline-block',
      background: "var(--ds-background-neutral, #091E420F)",
      borderRadius: "var(--ds-border-radius-100, 3px)",
      overflow: 'hidden',
      verticalAlign: 'middle',
      whiteSpace: 'nowrap',
      textAlign: 'center'
    }),
    'aria-busy': 'true',
    'aria-label': shortName,
    class: 'emoji-common-placeholder'
  };
  return ['span', attrs];
}