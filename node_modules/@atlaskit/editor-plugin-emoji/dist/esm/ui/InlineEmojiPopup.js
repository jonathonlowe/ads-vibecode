import React, { useCallback, useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { OutsideClickTargetRefContext, withReactEditorViewOuterListeners as withOuterListeners } from '@atlaskit/editor-common/ui-react';
import { findDomRefAtPos } from '@atlaskit/editor-prosemirror/utils';
import { akEditorFloatingDialogZIndex } from '@atlaskit/editor-shared-styles';
import { EmojiPicker } from '@atlaskit/emoji';
import { fg } from '@atlaskit/platform-feature-flags';
var PopupWithListeners = withOuterListeners(Popup);
var getDomRefFromSelection = function getDomRefFromSelection(view) {
  var domRef = findDomRefAtPos(view.state.selection.from, view.domAtPos.bind(view));
  if (domRef instanceof HTMLElement) {
    if (domRef.nodeName !== 'P') {
      var paragraphRef = domRef.closest('p');
      if (paragraphRef) {
        return paragraphRef;
      }
    }
    return domRef;
  }
  throw new Error('Invalid DOM reference');
};
var emojiPopupMessages = {
  emojiPickerAriaLabel: {
    id: 'fabric.emoji.picker.aria.label',
    defaultMessage: 'Emoji picker',
    description: 'Accessible label for the emoji picker popup'
  }
};
export var InlineEmojiPopup = function InlineEmojiPopup(_ref) {
  var _useSharedPluginState, _useSharedPluginState2;
  var api = _ref.api,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsScrollableElement = _ref.popupsScrollableElement,
    editorView = _ref.editorView,
    onClose = _ref.onClose;
  var _ref2 = (_useSharedPluginState = (_useSharedPluginState2 = useSharedPluginState(api, ['emoji'])) === null || _useSharedPluginState2 === void 0 ? void 0 : _useSharedPluginState2.emojiState) !== null && _useSharedPluginState !== void 0 ? _useSharedPluginState : {},
    emojiProvider = _ref2.emojiProvider,
    isOpen = _ref2.inlineEmojiPopupOpen;
  var intl = useIntl();
  var handleOnClose = useCallback(function () {
    if (fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.startActiveSessionTimer());
    }
    onClose();
  }, [onClose, api]);
  useEffect(function () {
    if (isOpen && fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics2;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics2 = api.metrics) === null || _api$metrics2 === void 0 ? void 0 : _api$metrics2.commands.handleIntentToStartEdit({
        shouldStartTimer: false,
        shouldPersistActiveSession: true
      }));
    }
  }, [isOpen, api]);
  var focusEditor = useCallback(function () {
    // use requestAnimationFrame to run this async after the call
    requestAnimationFrame(function () {
      return editorView.focus();
    });
  }, [editorView]);
  var handleSelection = useCallback(function (emojiId) {
    api.core.actions.execute(api.emoji.commands.insertEmoji(emojiId, INPUT_METHOD.PICKER));
    handleOnClose();
  }, [api.core.actions, api.emoji.commands, handleOnClose]);
  if (!isOpen || !emojiProvider) {
    return null;
  }
  var domRef = getDomRefFromSelection(editorView);
  return /*#__PURE__*/React.createElement(PopupWithListeners, {
    ariaLabel: intl.formatMessage(emojiPopupMessages.emojiPickerAriaLabel),
    offset: [0, 12],
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    zIndex: akEditorFloatingDialogZIndex,
    fitHeight: 350,
    fitWidth: 350,
    target: domRef,
    onUnmount: focusEditor,
    focusTrap: true,
    preventOverflow: true,
    handleClickOutside: handleOnClose,
    handleEscapeKeydown: handleOnClose,
    captureClick: true
  }, /*#__PURE__*/React.createElement(OutsideClickTargetRefContext.Consumer, null, function (setOutsideClickTargetRef) {
    return /*#__PURE__*/React.createElement(EmojiPicker, {
      emojiProvider: Promise.resolve(emojiProvider),
      onPickerRef: setOutsideClickTargetRef,
      onSelection: handleSelection
    });
  }));
};