import React, { useCallback, useEffect } from 'react';
import { useIntl } from 'react-intl-next';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { Popup } from '@atlaskit/editor-common/ui';
import { OutsideClickTargetRefContext, withReactEditorViewOuterListeners as withOuterListeners } from '@atlaskit/editor-common/ui-react';
import { findDomRefAtPos } from '@atlaskit/editor-prosemirror/utils';
import { akEditorFloatingDialogZIndex } from '@atlaskit/editor-shared-styles';
import { EmojiPicker } from '@atlaskit/emoji';
import { fg } from '@atlaskit/platform-feature-flags';
const PopupWithListeners = withOuterListeners(Popup);
const getDomRefFromSelection = view => {
  const domRef = findDomRefAtPos(view.state.selection.from, view.domAtPos.bind(view));
  if (domRef instanceof HTMLElement) {
    if (domRef.nodeName !== 'P') {
      const paragraphRef = domRef.closest('p');
      if (paragraphRef) {
        return paragraphRef;
      }
    }
    return domRef;
  }
  throw new Error('Invalid DOM reference');
};
const emojiPopupMessages = {
  emojiPickerAriaLabel: {
    id: 'fabric.emoji.picker.aria.label',
    defaultMessage: 'Emoji picker',
    description: 'Accessible label for the emoji picker popup'
  }
};
export const InlineEmojiPopup = ({
  api,
  popupsMountPoint,
  popupsBoundariesElement,
  popupsScrollableElement,
  editorView,
  onClose
}) => {
  var _useSharedPluginState, _useSharedPluginState2;
  const {
    emojiProvider,
    inlineEmojiPopupOpen: isOpen
  } = (_useSharedPluginState = (_useSharedPluginState2 = useSharedPluginState(api, ['emoji'])) === null || _useSharedPluginState2 === void 0 ? void 0 : _useSharedPluginState2.emojiState) !== null && _useSharedPluginState !== void 0 ? _useSharedPluginState : {};
  const intl = useIntl();
  const handleOnClose = useCallback(() => {
    if (fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.startActiveSessionTimer());
    }
    onClose();
  }, [onClose, api]);
  useEffect(() => {
    if (isOpen && fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics2;
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : (_api$metrics2 = api.metrics) === null || _api$metrics2 === void 0 ? void 0 : _api$metrics2.commands.handleIntentToStartEdit({
        shouldStartTimer: false,
        shouldPersistActiveSession: true
      }));
    }
  }, [isOpen, api]);
  const focusEditor = useCallback(() => {
    // use requestAnimationFrame to run this async after the call
    requestAnimationFrame(() => editorView.focus());
  }, [editorView]);
  const handleSelection = useCallback(emojiId => {
    api.core.actions.execute(api.emoji.commands.insertEmoji(emojiId, INPUT_METHOD.PICKER));
    handleOnClose();
  }, [api.core.actions, api.emoji.commands, handleOnClose]);
  if (!isOpen || !emojiProvider) {
    return null;
  }
  const domRef = getDomRefFromSelection(editorView);
  return /*#__PURE__*/React.createElement(PopupWithListeners, {
    ariaLabel: intl.formatMessage(emojiPopupMessages.emojiPickerAriaLabel),
    offset: [0, 12],
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    zIndex: akEditorFloatingDialogZIndex,
    fitHeight: 350,
    fitWidth: 350,
    target: domRef,
    onUnmount: focusEditor,
    focusTrap: true,
    preventOverflow: true,
    handleClickOutside: handleOnClose,
    handleEscapeKeydown: handleOnClose,
    captureClick: true
  }, /*#__PURE__*/React.createElement(OutsideClickTargetRefContext.Consumer, null, setOutsideClickTargetRef => /*#__PURE__*/React.createElement(EmojiPicker, {
    emojiProvider: Promise.resolve(emojiProvider),
    onPickerRef: setOutsideClickTargetRef,
    onSelection: handleSelection
  })));
};