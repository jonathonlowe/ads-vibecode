/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled
import { css, jsx } from '@emotion/react';
import { useIntl } from 'react-intl-next';
import { messages } from '@atlaskit/editor-common/emoji';
import { useNodeDataProviderGet } from '@atlaskit/node-data-provider/plugin-hooks';
import { LoadableSimpleEmoji, LoadableSimpleEmojiPlaceholder } from './LoadableSimpleEmoji';
export function NdpEmoji(props) {
  const emojiNode = props.node;
  const value = useNodeDataProviderGet({
    node: emojiNode,
    provider: props.emojiNodeDataProvider
  });
  if (value.state === 'loading') {
    return jsx(EmojiCommonWrapper, {
      emojiNode: emojiNode
    }, jsx(LoadableSimpleEmojiPlaceholder, {
      shortName: emojiNode.attrs.shortName
    }));
  }
  if (value.state === 'failed') {
    return jsx(EmojiCommonWrapper, {
      emojiNode: emojiNode
    }, jsx(Fragment, null, emojiNode.attrs.text || emojiNode.attrs.shortName));
  }
  return jsx(EmojiCommonWrapper, {
    emojiNode: emojiNode
  }, jsx(LoadableSimpleEmoji, {
    emojiDescription: value.result
  }));
}
const clickSelectWrapperStyle = css({
  userSelect: 'all'
});
const EmojiAssistiveTextComponent = /*#__PURE__*/React.memo(({
  emojiShortName
}) => {
  const intl = useIntl();
  return (
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
    jsx("span", {
      style: {
        fontSize: 0
      }
    }, `${intl.formatMessage(messages.emojiNodeLabel)} ${emojiShortName}`)
  );
});
function EmojiCommonWrapper({
  emojiNode,
  children
}) {
  return jsx(Fragment, null, jsx(EmojiAssistiveTextComponent, {
    emojiShortName: emojiNode.attrs.shortName
  }), jsx("span", null, jsx("span", {
    css: clickSelectWrapperStyle
  }, jsx("span", {
    "data-emoji-id": emojiNode.attrs.id,
    "data-emoji-short-name": emojiNode.attrs.shortName,
    "data-emoji-text": emojiNode.attrs.text || emojiNode.attrs.shortName
  }, children))));
}