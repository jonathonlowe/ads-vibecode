"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emojiNodeSpec = void 0;
exports.emojiToDom = emojiToDom;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _adfSchema = require("@atlaskit/adf-schema");
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isSSR = Boolean(process.env.REACT_SSR);

/**
 * Wrapper for ADF emoji node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @nodeSpecException:toDOM patch
 * @returns
 */
var emojiNodeSpec = exports.emojiNodeSpec = function emojiNodeSpec() {
  if (isSSR || (0, _experiments.editorExperiment)('platform_editor_inline_node_virtualization', 'off')) {
    return _adfSchema.emoji;
  }
  return _objectSpread(_objectSpread({}, _adfSchema.emoji), {}, {
    toDOM: function toDOM(node) {
      return emojiToDom(node);
    }
  });
};
function emojiToDom(node) {
  // From packages/elements/emoji/src/components/common/EmojiPlaceholder.tsx
  var _node$attrs = node.attrs,
    shortName = _node$attrs.shortName,
    id = _node$attrs.id,
    text = _node$attrs.text;
  var attrs = {
    'data-emoji-short-name': shortName,
    'data-emoji-id': id,
    'data-emoji-text': text,
    contenteditable: 'false',
    style: (0, _lazyNodeView.convertToInlineCss)({
      content: "''",
      fill: "var(--ds-background-neutral, #091E420F)",
      minWidth: "20px",
      width: "20px",
      height: "20px",
      position: 'relative',
      margin: '-1px 0',
      display: 'inline-block',
      background: "var(--ds-background-neutral, #091E420F)",
      borderRadius: "var(--ds-border-radius-100, 3px)",
      overflow: 'hidden',
      verticalAlign: 'middle',
      whiteSpace: 'nowrap',
      textAlign: 'center'
    }),
    'aria-busy': 'true',
    'aria-label': shortName,
    class: 'emoji-common-placeholder'
  };
  return ['span', attrs];
}