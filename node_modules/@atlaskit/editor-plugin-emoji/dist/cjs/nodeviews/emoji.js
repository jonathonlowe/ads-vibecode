"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmojiNodeView = EmojiNodeView;
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _emoji = require("@atlaskit/editor-common/emoji");
var _hooks = require("@atlaskit/editor-common/hooks");
var _Emoji = _interopRequireDefault(require("../ui/Emoji"));
var _NdpEmoji = require("../ui/NdpEmoji");
var EmojiAssistiveTextComponent = /*#__PURE__*/_react.default.memo(function (_ref) {
  var emojiShortName = _ref.emojiShortName;
  var intl = (0, _reactIntlNext.useIntl)();
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/design-system/use-tokens-typography -- Ignored via go/DSP-18766
    _react.default.createElement("span", {
      style: {
        fontSize: 0
      }
    }, "".concat(intl.formatMessage(_emoji.messages.emojiNodeLabel), " ").concat(emojiShortName))
  );
});
var useEmojiProvider = function useEmojiProvider(pluginInjectionApi) {
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['emoji']),
    emojiState = _useSharedPluginState.emojiState;
  return emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider;
};
function EmojiNodeView(props) {
  var _props$options;
  var _props$node$attrs = props.node.attrs,
    shortName = _props$node$attrs.shortName,
    id = _props$node$attrs.id,
    text = _props$node$attrs.text;
  var emojiProvider = useEmojiProvider(props.api);
  if ((_props$options = props.options) !== null && _props$options !== void 0 && _props$options.emojiNodeDataProvider) {
    return /*#__PURE__*/_react.default.createElement(_NdpEmoji.NdpEmoji, {
      node: props.node,
      emojiNodeDataProvider: props.options.emojiNodeDataProvider
    });
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(EmojiAssistiveTextComponent, {
    emojiShortName: shortName
  }), /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_Emoji.default, {
    emojiProvider: emojiProvider,
    providers: props.providerFactory,
    id: id,
    shortName: shortName,
    fallback: text
  })));
}