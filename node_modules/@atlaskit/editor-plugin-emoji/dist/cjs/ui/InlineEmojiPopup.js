"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineEmojiPopup = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _hooks = require("@atlaskit/editor-common/hooks");
var _ui = require("@atlaskit/editor-common/ui");
var _uiReact = require("@atlaskit/editor-common/ui-react");
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _emoji = require("@atlaskit/emoji");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var PopupWithListeners = (0, _uiReact.withReactEditorViewOuterListeners)(_ui.Popup);
var getDomRefFromSelection = function getDomRefFromSelection(view) {
  var domRef = (0, _utils.findDomRefAtPos)(view.state.selection.from, view.domAtPos.bind(view));
  if (domRef instanceof HTMLElement) {
    if (domRef.nodeName !== 'P') {
      var paragraphRef = domRef.closest('p');
      if (paragraphRef) {
        return paragraphRef;
      }
    }
    return domRef;
  }
  throw new Error('Invalid DOM reference');
};
var emojiPopupMessages = {
  emojiPickerAriaLabel: {
    id: 'fabric.emoji.picker.aria.label',
    defaultMessage: 'Emoji picker',
    description: 'Accessible label for the emoji picker popup'
  }
};
var InlineEmojiPopup = exports.InlineEmojiPopup = function InlineEmojiPopup(_ref) {
  var _useSharedPluginState, _useSharedPluginState2;
  var api = _ref.api,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsScrollableElement = _ref.popupsScrollableElement,
    editorView = _ref.editorView,
    onClose = _ref.onClose;
  var _ref2 = (_useSharedPluginState = (_useSharedPluginState2 = (0, _hooks.useSharedPluginState)(api, ['emoji'])) === null || _useSharedPluginState2 === void 0 ? void 0 : _useSharedPluginState2.emojiState) !== null && _useSharedPluginState !== void 0 ? _useSharedPluginState : {},
    emojiProvider = _ref2.emojiProvider,
    isOpen = _ref2.inlineEmojiPopupOpen;
  var intl = (0, _reactIntlNext.useIntl)();
  var handleOnClose = (0, _react.useCallback)(function () {
    if ((0, _platformFeatureFlags.fg)('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.startActiveSessionTimer());
    }
    onClose();
  }, [onClose, api]);
  (0, _react.useEffect)(function () {
    if (isOpen && (0, _platformFeatureFlags.fg)('platform_editor_ease_of_use_metrics')) {
      var _api$metrics2;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics2 = api.metrics) === null || _api$metrics2 === void 0 ? void 0 : _api$metrics2.commands.handleIntentToStartEdit({
        shouldStartTimer: false,
        shouldPersistActiveSession: true
      }));
    }
  }, [isOpen, api]);
  var focusEditor = (0, _react.useCallback)(function () {
    // use requestAnimationFrame to run this async after the call
    requestAnimationFrame(function () {
      return editorView.focus();
    });
  }, [editorView]);
  var handleSelection = (0, _react.useCallback)(function (emojiId) {
    api.core.actions.execute(api.emoji.commands.insertEmoji(emojiId, _analytics.INPUT_METHOD.PICKER));
    handleOnClose();
  }, [api.core.actions, api.emoji.commands, handleOnClose]);
  if (!isOpen || !emojiProvider) {
    return null;
  }
  var domRef = getDomRefFromSelection(editorView);
  return /*#__PURE__*/_react.default.createElement(PopupWithListeners, {
    ariaLabel: intl.formatMessage(emojiPopupMessages.emojiPickerAriaLabel),
    offset: [0, 12],
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    zIndex: _editorSharedStyles.akEditorFloatingDialogZIndex,
    fitHeight: 350,
    fitWidth: 350,
    target: domRef,
    onUnmount: focusEditor,
    focusTrap: true,
    preventOverflow: true,
    handleClickOutside: handleOnClose,
    handleEscapeKeydown: handleOnClose,
    captureClick: true
  }, /*#__PURE__*/_react.default.createElement(_uiReact.OutsideClickTargetRefContext.Consumer, null, function (setOutsideClickTargetRef) {
    return /*#__PURE__*/_react.default.createElement(_emoji.EmojiPicker, {
      emojiProvider: Promise.resolve(emojiProvider),
      onPickerRef: setOutsideClickTargetRef,
      onSelection: handleSelection
    });
  }));
};