import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import type { Command, ExtractInjectionAPI, PMPluginFactoryParams, TypeAheadItem } from '@atlaskit/editor-common/types';
import type { EditorState, Transaction } from '@atlaskit/editor-prosemirror/state';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import type { EmojiDescription, EmojiProvider } from '@atlaskit/emoji';
import type { EmojiPlugin, EmojiPluginOptions, EmojiPluginState } from './emojiPluginType';
export declare const emojiToTypeaheadItem: (emoji: EmojiDescription, emojiProvider?: EmojiProvider) => TypeAheadItem;
export declare function memoize<ResultFn extends (emoji: EmojiDescription, emojiProvider?: EmojiProvider) => TypeAheadItem>(fn: ResultFn): {
    call: ResultFn;
    clear(): void;
};
export declare const defaultListLimit = 50;
/**
 * Emoji plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
export declare const emojiPlugin: EmojiPlugin;
/**
 *
 * Wrapper to call `onLimitReached` when a specified number of calls of that function
 * have been made within a time period.
 *
 * Note: It does not rate limit
 *
 * @param fn Function to wrap
 * @param limitTime Time limit in milliseconds
 * @param limitCount Number of function calls before `onRateReached` is called (per time period)
 * @returns Wrapped function
 */
export declare function createRateLimitReachedFunction<LimitedFunction extends (...args: any[]) => any>(fn: Function, limitTime: number, limitCount: number, onLimitReached: () => void): (...args: Parameters<LimitedFunction>) => ReturnType<LimitedFunction> | undefined;
export declare const setProviderTr: (provider?: EmojiProvider) => (tr: Transaction) => Transaction;
export declare const setProvider: ((provider?: EmojiProvider) => Command) | undefined;
export declare const emojiPluginKey: PluginKey<EmojiPluginState>;
export declare function getEmojiPluginState(state: EditorState): EmojiPluginState;
export declare function createEmojiPlugin(pmPluginFactoryParams: PMPluginFactoryParams, options?: EmojiPluginOptions, api?: ExtractInjectionAPI<EmojiPlugin>): SafePlugin<EmojiPluginState>;
