import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { Token } from 'antlr4ts/Token';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { JQLParserListener } from './JQLParserListener';
import { JQLParserVisitor } from './JQLParserVisitor';
export declare class JQLParser extends Parser {
    static readonly LPAREN = 1;
    static readonly RPAREN = 2;
    static readonly COMMA = 3;
    static readonly LBRACKET = 4;
    static readonly RBRACKET = 5;
    static readonly BANG = 6;
    static readonly LT = 7;
    static readonly GT = 8;
    static readonly GTEQ = 9;
    static readonly LTEQ = 10;
    static readonly EQUALS = 11;
    static readonly NOT_EQUALS = 12;
    static readonly LIKE = 13;
    static readonly NOT_LIKE = 14;
    static readonly IN = 15;
    static readonly IS = 16;
    static readonly AND = 17;
    static readonly OR = 18;
    static readonly NOT = 19;
    static readonly EMPTY = 20;
    static readonly WAS = 21;
    static readonly CHANGED = 22;
    static readonly BEFORE = 23;
    static readonly AFTER = 24;
    static readonly FROM = 25;
    static readonly TO = 26;
    static readonly ON = 27;
    static readonly DURING = 28;
    static readonly ORDER = 29;
    static readonly BY = 30;
    static readonly ASC = 31;
    static readonly DESC = 32;
    static readonly POSNUMBER = 33;
    static readonly NEGNUMBER = 34;
    static readonly CUSTOMFIELD = 35;
    static readonly RESERVED_WORD = 36;
    static readonly STRING = 37;
    static readonly MATCHWS = 38;
    static readonly ERROR_RESERVED = 39;
    static readonly ERRORCHAR = 40;
    static readonly QUOTE_STRING = 41;
    static readonly UNCLOSED_QUOTE_STRING = 42;
    static readonly INVALID_QUOTE_STRING = 43;
    static readonly SQUOTE_STRING = 44;
    static readonly UNCLOSED_SQUOTE_STRING = 45;
    static readonly INVALID_SQUOTE_STRING = 46;
    static readonly RULE_jqlQuery = 0;
    static readonly RULE_jqlWhere = 1;
    static readonly RULE_jqlOrClause = 2;
    static readonly RULE_jqlAndClause = 3;
    static readonly RULE_jqlNotClause = 4;
    static readonly RULE_jqlSubClause = 5;
    static readonly RULE_jqlTerminalClause = 6;
    static readonly RULE_jqlTerminalClauseRhs = 7;
    static readonly RULE_jqlEqualsOperator = 8;
    static readonly RULE_jqlLikeOperator = 9;
    static readonly RULE_jqlComparisonOperator = 10;
    static readonly RULE_jqlInOperator = 11;
    static readonly RULE_jqlIsOperator = 12;
    static readonly RULE_jqlWasOperator = 13;
    static readonly RULE_jqlWasInOperator = 14;
    static readonly RULE_jqlChangedOperator = 15;
    static readonly RULE_jqlField = 16;
    static readonly RULE_jqlFieldProperty = 17;
    static readonly RULE_jqlCustomField = 18;
    static readonly RULE_jqlString = 19;
    static readonly RULE_jqlNumber = 20;
    static readonly RULE_jqlOperand = 21;
    static readonly RULE_jqlEmpty = 22;
    static readonly RULE_jqlValue = 23;
    static readonly RULE_jqlFunction = 24;
    static readonly RULE_jqlFunctionName = 25;
    static readonly RULE_jqlArgumentList = 26;
    static readonly RULE_jqlList = 27;
    static readonly RULE_jqlListStart = 28;
    static readonly RULE_jqlListEnd = 29;
    static readonly RULE_jqlPropertyArgument = 30;
    static readonly RULE_jqlArgument = 31;
    static readonly RULE_jqlWasPredicate = 32;
    static readonly RULE_jqlChangedPredicate = 33;
    static readonly RULE_jqlDatePredicateOperator = 34;
    static readonly RULE_jqlDateRangePredicateOperator = 35;
    static readonly RULE_jqlUserPredicateOperator = 36;
    static readonly RULE_jqlValuePredicateOperator = 37;
    static readonly RULE_jqlPredicateOperand = 38;
    static readonly RULE_jqlOrderBy = 39;
    static readonly RULE_jqlSearchSort = 40;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    constructor(input: TokenStream);
    jqlQuery(): JqlQueryContext;
    jqlWhere(): JqlWhereContext;
    jqlOrClause(): JqlOrClauseContext;
    jqlAndClause(): JqlAndClauseContext;
    jqlNotClause(): JqlNotClauseContext;
    jqlSubClause(): JqlSubClauseContext;
    jqlTerminalClause(): JqlTerminalClauseContext;
    jqlTerminalClauseRhs(): JqlTerminalClauseRhsContext;
    jqlEqualsOperator(): JqlEqualsOperatorContext;
    jqlLikeOperator(): JqlLikeOperatorContext;
    jqlComparisonOperator(): JqlComparisonOperatorContext;
    jqlInOperator(): JqlInOperatorContext;
    jqlIsOperator(): JqlIsOperatorContext;
    jqlWasOperator(): JqlWasOperatorContext;
    jqlWasInOperator(): JqlWasInOperatorContext;
    jqlChangedOperator(): JqlChangedOperatorContext;
    jqlField(): JqlFieldContext;
    jqlFieldProperty(): JqlFieldPropertyContext;
    jqlCustomField(): JqlCustomFieldContext;
    jqlString(): JqlStringContext;
    jqlNumber(): JqlNumberContext;
    jqlOperand(): JqlOperandContext;
    jqlEmpty(): JqlEmptyContext;
    jqlValue(): JqlValueContext;
    jqlFunction(): JqlFunctionContext;
    jqlFunctionName(): JqlFunctionNameContext;
    jqlArgumentList(): JqlArgumentListContext;
    jqlList(): JqlListContext;
    jqlListStart(): JqlListStartContext;
    jqlListEnd(): JqlListEndContext;
    jqlPropertyArgument(): JqlPropertyArgumentContext;
    jqlArgument(): JqlArgumentContext;
    jqlWasPredicate(): JqlWasPredicateContext;
    jqlChangedPredicate(): JqlChangedPredicateContext;
    jqlDatePredicateOperator(): JqlDatePredicateOperatorContext;
    jqlDateRangePredicateOperator(): JqlDateRangePredicateOperatorContext;
    jqlUserPredicateOperator(): JqlUserPredicateOperatorContext;
    jqlValuePredicateOperator(): JqlValuePredicateOperatorContext;
    jqlPredicateOperand(): JqlPredicateOperandContext;
    jqlOrderBy(): JqlOrderByContext;
    jqlSearchSort(): JqlSearchSortContext;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class JqlQueryContext extends ParserRuleContext {
    EOF(): TerminalNode;
    jqlWhere(): JqlWhereContext | undefined;
    jqlOrderBy(): JqlOrderByContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWhereContext extends ParserRuleContext {
    jqlOrClause(): JqlOrClauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlOrClauseContext extends ParserRuleContext {
    jqlAndClause(): JqlAndClauseContext[];
    jqlAndClause(i: number): JqlAndClauseContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlAndClauseContext extends ParserRuleContext {
    jqlNotClause(): JqlNotClauseContext[];
    jqlNotClause(i: number): JqlNotClauseContext;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlNotClauseContext extends ParserRuleContext {
    jqlNotClause(): JqlNotClauseContext | undefined;
    NOT(): TerminalNode | undefined;
    BANG(): TerminalNode | undefined;
    jqlSubClause(): JqlSubClauseContext | undefined;
    jqlTerminalClause(): JqlTerminalClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlSubClauseContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    jqlOrClause(): JqlOrClauseContext;
    RPAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlTerminalClauseContext extends ParserRuleContext {
    jqlField(): JqlFieldContext;
    jqlTerminalClauseRhs(): JqlTerminalClauseRhsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlTerminalClauseRhsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: JqlTerminalClauseRhsContext): void;
}
export declare class JqlEqualsClauseContext extends JqlTerminalClauseRhsContext {
    jqlEqualsOperator(): JqlEqualsOperatorContext;
    jqlEmpty(): JqlEmptyContext | undefined;
    jqlValue(): JqlValueContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlLikeClauseContext extends JqlTerminalClauseRhsContext {
    jqlLikeOperator(): JqlLikeOperatorContext;
    jqlEmpty(): JqlEmptyContext | undefined;
    jqlValue(): JqlValueContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlComparisonClauseContext extends JqlTerminalClauseRhsContext {
    jqlComparisonOperator(): JqlComparisonOperatorContext;
    jqlValue(): JqlValueContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlInClauseContext extends JqlTerminalClauseRhsContext {
    jqlInOperator(): JqlInOperatorContext;
    jqlList(): JqlListContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlIsClauseContext extends JqlTerminalClauseRhsContext {
    jqlIsOperator(): JqlIsOperatorContext;
    jqlEmpty(): JqlEmptyContext;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWasClauseContext extends JqlTerminalClauseRhsContext {
    jqlWasOperator(): JqlWasOperatorContext;
    jqlEmpty(): JqlEmptyContext | undefined;
    jqlValue(): JqlValueContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    jqlWasPredicate(): JqlWasPredicateContext[];
    jqlWasPredicate(i: number): JqlWasPredicateContext;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWasInClauseContext extends JqlTerminalClauseRhsContext {
    jqlWasInOperator(): JqlWasInOperatorContext;
    jqlList(): JqlListContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    jqlWasPredicate(): JqlWasPredicateContext[];
    jqlWasPredicate(i: number): JqlWasPredicateContext;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlChangedClauseContext extends JqlTerminalClauseRhsContext {
    jqlChangedOperator(): JqlChangedOperatorContext;
    jqlChangedPredicate(): JqlChangedPredicateContext[];
    jqlChangedPredicate(i: number): JqlChangedPredicateContext;
    constructor(ctx: JqlTerminalClauseRhsContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlEqualsOperatorContext extends ParserRuleContext {
    EQUALS(): TerminalNode | undefined;
    NOT_EQUALS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlLikeOperatorContext extends ParserRuleContext {
    LIKE(): TerminalNode | undefined;
    NOT_LIKE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlComparisonOperatorContext extends ParserRuleContext {
    LT(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    LTEQ(): TerminalNode | undefined;
    GTEQ(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlInOperatorContext extends ParserRuleContext {
    IN(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlIsOperatorContext extends ParserRuleContext {
    IS(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWasOperatorContext extends ParserRuleContext {
    WAS(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWasInOperatorContext extends ParserRuleContext {
    WAS(): TerminalNode;
    IN(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlChangedOperatorContext extends ParserRuleContext {
    CHANGED(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlFieldContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: JqlFieldContext): void;
}
export declare class JqlNumberFieldContext extends JqlFieldContext {
    jqlNumber(): JqlNumberContext;
    constructor(ctx: JqlFieldContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlNonNumberFieldContext extends JqlFieldContext {
    jqlString(): JqlStringContext | undefined;
    jqlCustomField(): JqlCustomFieldContext | undefined;
    jqlFieldProperty(): JqlFieldPropertyContext[];
    jqlFieldProperty(i: number): JqlFieldPropertyContext;
    constructor(ctx: JqlFieldContext);
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlFieldPropertyContext extends ParserRuleContext {
    LBRACKET(): TerminalNode | undefined;
    RBRACKET(): TerminalNode | undefined;
    jqlPropertyArgument(): JqlPropertyArgumentContext[];
    jqlPropertyArgument(i: number): JqlPropertyArgumentContext;
    jqlArgument(): JqlArgumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlCustomFieldContext extends ParserRuleContext {
    CUSTOMFIELD(): TerminalNode;
    LBRACKET(): TerminalNode;
    POSNUMBER(): TerminalNode;
    RBRACKET(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlStringContext extends ParserRuleContext {
    STRING(): TerminalNode | undefined;
    QUOTE_STRING(): TerminalNode | undefined;
    SQUOTE_STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlNumberContext extends ParserRuleContext {
    _jqlNum: Token;
    POSNUMBER(): TerminalNode | undefined;
    NEGNUMBER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlOperandContext extends ParserRuleContext {
    jqlEmpty(): JqlEmptyContext | undefined;
    jqlValue(): JqlValueContext | undefined;
    jqlFunction(): JqlFunctionContext | undefined;
    jqlList(): JqlListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlEmptyContext extends ParserRuleContext {
    EMPTY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlValueContext extends ParserRuleContext {
    jqlString(): JqlStringContext | undefined;
    jqlNumber(): JqlNumberContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlFunctionContext extends ParserRuleContext {
    jqlFunctionName(): JqlFunctionNameContext;
    LPAREN(): TerminalNode;
    RPAREN(): TerminalNode;
    jqlArgumentList(): JqlArgumentListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlFunctionNameContext extends ParserRuleContext {
    jqlString(): JqlStringContext | undefined;
    jqlNumber(): JqlNumberContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlArgumentListContext extends ParserRuleContext {
    jqlArgument(): JqlArgumentContext[];
    jqlArgument(i: number): JqlArgumentContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlListContext extends ParserRuleContext {
    jqlListStart(): JqlListStartContext;
    jqlOperand(): JqlOperandContext[];
    jqlOperand(i: number): JqlOperandContext;
    jqlListEnd(): JqlListEndContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlListStartContext extends ParserRuleContext {
    LPAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlListEndContext extends ParserRuleContext {
    RPAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlPropertyArgumentContext extends ParserRuleContext {
    jqlArgument(): JqlArgumentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlArgumentContext extends ParserRuleContext {
    jqlString(): JqlStringContext | undefined;
    jqlNumber(): JqlNumberContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlWasPredicateContext extends ParserRuleContext {
    jqlPredicateOperand(): JqlPredicateOperandContext;
    jqlDatePredicateOperator(): JqlDatePredicateOperatorContext | undefined;
    jqlDateRangePredicateOperator(): JqlDateRangePredicateOperatorContext | undefined;
    jqlUserPredicateOperator(): JqlUserPredicateOperatorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlChangedPredicateContext extends ParserRuleContext {
    jqlPredicateOperand(): JqlPredicateOperandContext;
    jqlDatePredicateOperator(): JqlDatePredicateOperatorContext | undefined;
    jqlDateRangePredicateOperator(): JqlDateRangePredicateOperatorContext | undefined;
    jqlUserPredicateOperator(): JqlUserPredicateOperatorContext | undefined;
    jqlValuePredicateOperator(): JqlValuePredicateOperatorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlDatePredicateOperatorContext extends ParserRuleContext {
    AFTER(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlDateRangePredicateOperatorContext extends ParserRuleContext {
    DURING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlUserPredicateOperatorContext extends ParserRuleContext {
    BY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlValuePredicateOperatorContext extends ParserRuleContext {
    FROM(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlPredicateOperandContext extends ParserRuleContext {
    jqlOperand(): JqlOperandContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlOrderByContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    jqlSearchSort(): JqlSearchSortContext[];
    jqlSearchSort(i: number): JqlSearchSortContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
export declare class JqlSearchSortContext extends ParserRuleContext {
    jqlField(): JqlFieldContext;
    DESC(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: JQLParserListener): void;
    exitRule(listener: JQLParserListener): void;
    accept<Result>(visitor: JQLParserVisitor<Result>): Result;
}
