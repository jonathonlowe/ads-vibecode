import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _class;
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

// Generated from JQLParser.g4 by ANTLR 4.7.3-SNAPSHOT

import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { NoViableAltException } from 'antlr4ts/NoViableAltException';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { ParserATNSimulator } from 'antlr4ts/atn/ParserATNSimulator';
import { RecognitionException } from 'antlr4ts/RecognitionException';

//import { RuleVersion } from "antlr4ts/RuleVersion";

import { Token } from 'antlr4ts/Token';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';
import * as Utils from 'antlr4ts/misc/Utils';
export class JQLParser extends Parser {
  // @Override
  // @NotNull
  get vocabulary() {
    return JQLParser.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  // @Override
  get grammarFileName() {
    return 'JQLParser.g4';
  }

  // @Override
  get ruleNames() {
    return JQLParser.ruleNames;
  }

  // @Override
  get serializedATN() {
    return JQLParser._serializedATN;
  }
  constructor(input) {
    super(input);
    this._interp = new ParserATNSimulator(JQLParser._ATN, this);
  }
  // @RuleVersion(0)
  jqlQuery() {
    let _localctx = new JqlQueryContext(this._ctx, this.state);
    this.enterRule(_localctx, 0, JQLParser.RULE_jqlQuery);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 83;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.LPAREN | 1 << JQLParser.BANG | 1 << JQLParser.NOT)) !== 0 || (_la - 33 & ~0x1f) === 0 && (1 << _la - 33 & (1 << JQLParser.POSNUMBER - 33 | 1 << JQLParser.NEGNUMBER - 33 | 1 << JQLParser.CUSTOMFIELD - 33 | 1 << JQLParser.STRING - 33 | 1 << JQLParser.QUOTE_STRING - 33 | 1 << JQLParser.SQUOTE_STRING - 33)) !== 0) {
          {
            this.state = 82;
            this.jqlWhere();
          }
        }
        this.state = 86;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === JQLParser.ORDER) {
          {
            this.state = 85;
            this.jqlOrderBy();
          }
        }
        this.state = 88;
        this.match(JQLParser.EOF);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlWhere() {
    let _localctx = new JqlWhereContext(this._ctx, this.state);
    this.enterRule(_localctx, 2, JQLParser.RULE_jqlWhere);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 90;
        this.jqlOrClause();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlOrClause() {
    let _localctx = new JqlOrClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 4, JQLParser.RULE_jqlOrClause);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 92;
        this.jqlAndClause();
        this.state = 97;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === JQLParser.OR) {
          {
            {
              this.state = 93;
              this.match(JQLParser.OR);
              this.state = 94;
              this.jqlAndClause();
            }
          }
          this.state = 99;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlAndClause() {
    let _localctx = new JqlAndClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 6, JQLParser.RULE_jqlAndClause);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 100;
        this.jqlNotClause();
        this.state = 105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === JQLParser.AND) {
          {
            {
              this.state = 101;
              this.match(JQLParser.AND);
              this.state = 102;
              this.jqlNotClause();
            }
          }
          this.state = 107;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlNotClause() {
    let _localctx = new JqlNotClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 8, JQLParser.RULE_jqlNotClause);
    let _la;
    try {
      this.state = 112;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.BANG:
        case JQLParser.NOT:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 108;
            _la = this._input.LA(1);
            if (!(_la === JQLParser.BANG || _la === JQLParser.NOT)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 109;
            this.jqlNotClause();
          }
          break;
        case JQLParser.LPAREN:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 110;
            this.jqlSubClause();
          }
          break;
        case JQLParser.POSNUMBER:
        case JQLParser.NEGNUMBER:
        case JQLParser.CUSTOMFIELD:
        case JQLParser.STRING:
        case JQLParser.QUOTE_STRING:
        case JQLParser.SQUOTE_STRING:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 111;
            this.jqlTerminalClause();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlSubClause() {
    let _localctx = new JqlSubClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 10, JQLParser.RULE_jqlSubClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 114;
        this.match(JQLParser.LPAREN);
        this.state = 115;
        this.jqlOrClause();
        this.state = 116;
        this.match(JQLParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlTerminalClause() {
    let _localctx = new JqlTerminalClauseContext(this._ctx, this.state);
    this.enterRule(_localctx, 12, JQLParser.RULE_jqlTerminalClause);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 118;
        this.jqlField();
        this.state = 119;
        this.jqlTerminalClauseRhs();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlTerminalClauseRhs() {
    let _localctx = new JqlTerminalClauseRhsContext(this._ctx, this.state);
    this.enterRule(_localctx, 14, JQLParser.RULE_jqlTerminalClauseRhs);
    let _la;
    try {
      this.state = 176;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {
        case 1:
          _localctx = new JqlEqualsClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 121;
            this.jqlEqualsOperator();
            this.state = 125;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
              case 1:
                {
                  this.state = 122;
                  this.jqlEmpty();
                }
                break;
              case 2:
                {
                  this.state = 123;
                  this.jqlValue();
                }
                break;
              case 3:
                {
                  this.state = 124;
                  this.jqlFunction();
                }
                break;
            }
          }
          break;
        case 2:
          _localctx = new JqlLikeClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 127;
            this.jqlLikeOperator();
            this.state = 131;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
              case 1:
                {
                  this.state = 128;
                  this.jqlEmpty();
                }
                break;
              case 2:
                {
                  this.state = 129;
                  this.jqlValue();
                }
                break;
              case 3:
                {
                  this.state = 130;
                  this.jqlFunction();
                }
                break;
            }
          }
          break;
        case 3:
          _localctx = new JqlComparisonClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 133;
            this.jqlComparisonOperator();
            this.state = 136;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
              case 1:
                {
                  this.state = 134;
                  this.jqlValue();
                }
                break;
              case 2:
                {
                  this.state = 135;
                  this.jqlFunction();
                }
                break;
            }
          }
          break;
        case 4:
          _localctx = new JqlInClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 138;
            this.jqlInOperator();
            this.state = 141;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case JQLParser.LPAREN:
                {
                  this.state = 139;
                  this.jqlList();
                }
                break;
              case JQLParser.POSNUMBER:
              case JQLParser.NEGNUMBER:
              case JQLParser.STRING:
              case JQLParser.QUOTE_STRING:
              case JQLParser.SQUOTE_STRING:
                {
                  this.state = 140;
                  this.jqlFunction();
                }
                break;
              default:
                throw new NoViableAltException(this);
            }
          }
          break;
        case 5:
          _localctx = new JqlIsClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 5);
          {
            this.state = 143;
            this.jqlIsOperator();
            this.state = 144;
            this.jqlEmpty();
          }
          break;
        case 6:
          _localctx = new JqlWasClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 6);
          {
            this.state = 146;
            this.jqlWasOperator();
            this.state = 150;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
              case 1:
                {
                  this.state = 147;
                  this.jqlEmpty();
                }
                break;
              case 2:
                {
                  this.state = 148;
                  this.jqlValue();
                }
                break;
              case 3:
                {
                  this.state = 149;
                  this.jqlFunction();
                }
                break;
            }
            this.state = 155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.BEFORE | 1 << JQLParser.AFTER | 1 << JQLParser.ON | 1 << JQLParser.DURING | 1 << JQLParser.BY)) !== 0) {
              {
                {
                  this.state = 152;
                  this.jqlWasPredicate();
                }
              }
              this.state = 157;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;
        case 7:
          _localctx = new JqlWasInClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 7);
          {
            this.state = 158;
            this.jqlWasInOperator();
            this.state = 161;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case JQLParser.LPAREN:
                {
                  this.state = 159;
                  this.jqlList();
                }
                break;
              case JQLParser.POSNUMBER:
              case JQLParser.NEGNUMBER:
              case JQLParser.STRING:
              case JQLParser.QUOTE_STRING:
              case JQLParser.SQUOTE_STRING:
                {
                  this.state = 160;
                  this.jqlFunction();
                }
                break;
              default:
                throw new NoViableAltException(this);
            }
            this.state = 166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.BEFORE | 1 << JQLParser.AFTER | 1 << JQLParser.ON | 1 << JQLParser.DURING | 1 << JQLParser.BY)) !== 0) {
              {
                {
                  this.state = 163;
                  this.jqlWasPredicate();
                }
              }
              this.state = 168;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;
        case 8:
          _localctx = new JqlChangedClauseContext(_localctx);
          this.enterOuterAlt(_localctx, 8);
          {
            this.state = 169;
            this.jqlChangedOperator();
            this.state = 173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.BEFORE | 1 << JQLParser.AFTER | 1 << JQLParser.FROM | 1 << JQLParser.TO | 1 << JQLParser.ON | 1 << JQLParser.DURING | 1 << JQLParser.BY)) !== 0) {
              {
                {
                  this.state = 170;
                  this.jqlChangedPredicate();
                }
              }
              this.state = 175;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlEqualsOperator() {
    let _localctx = new JqlEqualsOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 16, JQLParser.RULE_jqlEqualsOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 178;
        _la = this._input.LA(1);
        if (!(_la === JQLParser.EQUALS || _la === JQLParser.NOT_EQUALS)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlLikeOperator() {
    let _localctx = new JqlLikeOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 18, JQLParser.RULE_jqlLikeOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 180;
        _la = this._input.LA(1);
        if (!(_la === JQLParser.LIKE || _la === JQLParser.NOT_LIKE)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlComparisonOperator() {
    let _localctx = new JqlComparisonOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 20, JQLParser.RULE_jqlComparisonOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 182;
        _la = this._input.LA(1);
        if (!((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.LT | 1 << JQLParser.GT | 1 << JQLParser.GTEQ | 1 << JQLParser.LTEQ)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlInOperator() {
    let _localctx = new JqlInOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 22, JQLParser.RULE_jqlInOperator);
    try {
      this.state = 187;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.IN:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 184;
            this.match(JQLParser.IN);
          }
          break;
        case JQLParser.NOT:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 185;
            this.match(JQLParser.NOT);
            this.state = 186;
            this.match(JQLParser.IN);
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlIsOperator() {
    let _localctx = new JqlIsOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 24, JQLParser.RULE_jqlIsOperator);
    try {
      this.state = 192;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 189;
            this.match(JQLParser.IS);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 190;
            this.match(JQLParser.IS);
            this.state = 191;
            this.match(JQLParser.NOT);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlWasOperator() {
    let _localctx = new JqlWasOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 26, JQLParser.RULE_jqlWasOperator);
    try {
      this.state = 197;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 17, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 194;
            this.match(JQLParser.WAS);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 195;
            this.match(JQLParser.WAS);
            this.state = 196;
            this.match(JQLParser.NOT);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlWasInOperator() {
    let _localctx = new JqlWasInOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 28, JQLParser.RULE_jqlWasInOperator);
    try {
      this.state = 204;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 18, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 199;
            this.match(JQLParser.WAS);
            this.state = 200;
            this.match(JQLParser.IN);
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 201;
            this.match(JQLParser.WAS);
            this.state = 202;
            this.match(JQLParser.NOT);
            this.state = 203;
            this.match(JQLParser.IN);
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlChangedOperator() {
    let _localctx = new JqlChangedOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 30, JQLParser.RULE_jqlChangedOperator);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 206;
        this.match(JQLParser.CHANGED);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlField() {
    let _localctx = new JqlFieldContext(this._ctx, this.state);
    this.enterRule(_localctx, 32, JQLParser.RULE_jqlField);
    let _la;
    try {
      this.state = 219;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.POSNUMBER:
        case JQLParser.NEGNUMBER:
          _localctx = new JqlNumberFieldContext(_localctx);
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 208;
            this.jqlNumber();
          }
          break;
        case JQLParser.CUSTOMFIELD:
        case JQLParser.STRING:
        case JQLParser.QUOTE_STRING:
        case JQLParser.SQUOTE_STRING:
          _localctx = new JqlNonNumberFieldContext(_localctx);
          this.enterOuterAlt(_localctx, 2);
          {
            {
              this.state = 211;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case JQLParser.STRING:
                case JQLParser.QUOTE_STRING:
                case JQLParser.SQUOTE_STRING:
                  {
                    this.state = 209;
                    this.jqlString();
                  }
                  break;
                case JQLParser.CUSTOMFIELD:
                  {
                    this.state = 210;
                    this.jqlCustomField();
                  }
                  break;
                default:
                  throw new NoViableAltException(this);
              }
              this.state = 216;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === JQLParser.LBRACKET) {
                {
                  {
                    this.state = 213;
                    this.jqlFieldProperty();
                  }
                }
                this.state = 218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlFieldProperty() {
    let _localctx = new JqlFieldPropertyContext(this._ctx, this.state);
    this.enterRule(_localctx, 34, JQLParser.RULE_jqlFieldProperty);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        {
          this.state = 221;
          this.match(JQLParser.LBRACKET);
          {
            this.state = 222;
            this.jqlArgument();
          }
          this.state = 223;
          this.match(JQLParser.RBRACKET);
        }
        this.state = 228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la - 33 & ~0x1f) === 0 && (1 << _la - 33 & (1 << JQLParser.POSNUMBER - 33 | 1 << JQLParser.NEGNUMBER - 33 | 1 << JQLParser.STRING - 33 | 1 << JQLParser.QUOTE_STRING - 33 | 1 << JQLParser.SQUOTE_STRING - 33)) !== 0) {
          {
            {
              this.state = 225;
              this.jqlPropertyArgument();
            }
          }
          this.state = 230;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlCustomField() {
    let _localctx = new JqlCustomFieldContext(this._ctx, this.state);
    this.enterRule(_localctx, 36, JQLParser.RULE_jqlCustomField);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 231;
        this.match(JQLParser.CUSTOMFIELD);
        this.state = 232;
        this.match(JQLParser.LBRACKET);
        this.state = 233;
        this.match(JQLParser.POSNUMBER);
        this.state = 234;
        this.match(JQLParser.RBRACKET);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlString() {
    let _localctx = new JqlStringContext(this._ctx, this.state);
    this.enterRule(_localctx, 38, JQLParser.RULE_jqlString);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 236;
        _la = this._input.LA(1);
        if (!((_la - 37 & ~0x1f) === 0 && (1 << _la - 37 & (1 << JQLParser.STRING - 37 | 1 << JQLParser.QUOTE_STRING - 37 | 1 << JQLParser.SQUOTE_STRING - 37)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlNumber() {
    let _localctx = new JqlNumberContext(this._ctx, this.state);
    this.enterRule(_localctx, 40, JQLParser.RULE_jqlNumber);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 238;
        _localctx._jqlNum = this._input.LT(1);
        _la = this._input.LA(1);
        if (!(_la === JQLParser.POSNUMBER || _la === JQLParser.NEGNUMBER)) {
          _localctx._jqlNum = this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlOperand() {
    let _localctx = new JqlOperandContext(this._ctx, this.state);
    this.enterRule(_localctx, 42, JQLParser.RULE_jqlOperand);
    try {
      this.state = 244;
      this._errHandler.sync(this);
      switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
        case 1:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 240;
            this.jqlEmpty();
          }
          break;
        case 2:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 241;
            this.jqlValue();
          }
          break;
        case 3:
          this.enterOuterAlt(_localctx, 3);
          {
            this.state = 242;
            this.jqlFunction();
          }
          break;
        case 4:
          this.enterOuterAlt(_localctx, 4);
          {
            this.state = 243;
            this.jqlList();
          }
          break;
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlEmpty() {
    let _localctx = new JqlEmptyContext(this._ctx, this.state);
    this.enterRule(_localctx, 44, JQLParser.RULE_jqlEmpty);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 246;
        this.match(JQLParser.EMPTY);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlValue() {
    let _localctx = new JqlValueContext(this._ctx, this.state);
    this.enterRule(_localctx, 46, JQLParser.RULE_jqlValue);
    try {
      this.state = 250;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.STRING:
        case JQLParser.QUOTE_STRING:
        case JQLParser.SQUOTE_STRING:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 248;
            this.jqlString();
          }
          break;
        case JQLParser.POSNUMBER:
        case JQLParser.NEGNUMBER:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 249;
            this.jqlNumber();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlFunction() {
    let _localctx = new JqlFunctionContext(this._ctx, this.state);
    this.enterRule(_localctx, 48, JQLParser.RULE_jqlFunction);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 252;
        this.jqlFunctionName();
        this.state = 253;
        this.match(JQLParser.LPAREN);
        this.state = 255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 33 & ~0x1f) === 0 && (1 << _la - 33 & (1 << JQLParser.POSNUMBER - 33 | 1 << JQLParser.NEGNUMBER - 33 | 1 << JQLParser.STRING - 33 | 1 << JQLParser.QUOTE_STRING - 33 | 1 << JQLParser.SQUOTE_STRING - 33)) !== 0) {
          {
            this.state = 254;
            this.jqlArgumentList();
          }
        }
        this.state = 257;
        this.match(JQLParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlFunctionName() {
    let _localctx = new JqlFunctionNameContext(this._ctx, this.state);
    this.enterRule(_localctx, 50, JQLParser.RULE_jqlFunctionName);
    try {
      this.state = 261;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.STRING:
        case JQLParser.QUOTE_STRING:
        case JQLParser.SQUOTE_STRING:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 259;
            this.jqlString();
          }
          break;
        case JQLParser.POSNUMBER:
        case JQLParser.NEGNUMBER:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 260;
            this.jqlNumber();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlArgumentList() {
    let _localctx = new JqlArgumentListContext(this._ctx, this.state);
    this.enterRule(_localctx, 52, JQLParser.RULE_jqlArgumentList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 263;
        this.jqlArgument();
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === JQLParser.COMMA) {
          {
            {
              this.state = 264;
              this.match(JQLParser.COMMA);
              this.state = 265;
              this.jqlArgument();
            }
          }
          this.state = 270;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlList() {
    let _localctx = new JqlListContext(this._ctx, this.state);
    this.enterRule(_localctx, 54, JQLParser.RULE_jqlList);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 271;
        this.jqlListStart();
        this.state = 272;
        this.jqlOperand();
        this.state = 277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === JQLParser.COMMA) {
          {
            {
              this.state = 273;
              this.match(JQLParser.COMMA);
              this.state = 274;
              this.jqlOperand();
            }
          }
          this.state = 279;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 280;
        this.jqlListEnd();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlListStart() {
    let _localctx = new JqlListStartContext(this._ctx, this.state);
    this.enterRule(_localctx, 56, JQLParser.RULE_jqlListStart);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 282;
        this.match(JQLParser.LPAREN);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlListEnd() {
    let _localctx = new JqlListEndContext(this._ctx, this.state);
    this.enterRule(_localctx, 58, JQLParser.RULE_jqlListEnd);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 284;
        this.match(JQLParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlPropertyArgument() {
    let _localctx = new JqlPropertyArgumentContext(this._ctx, this.state);
    this.enterRule(_localctx, 60, JQLParser.RULE_jqlPropertyArgument);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 286;
        this.jqlArgument();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlArgument() {
    let _localctx = new JqlArgumentContext(this._ctx, this.state);
    this.enterRule(_localctx, 62, JQLParser.RULE_jqlArgument);
    try {
      this.state = 290;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case JQLParser.STRING:
        case JQLParser.QUOTE_STRING:
        case JQLParser.SQUOTE_STRING:
          this.enterOuterAlt(_localctx, 1);
          {
            this.state = 288;
            this.jqlString();
          }
          break;
        case JQLParser.POSNUMBER:
        case JQLParser.NEGNUMBER:
          this.enterOuterAlt(_localctx, 2);
          {
            this.state = 289;
            this.jqlNumber();
          }
          break;
        default:
          throw new NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlWasPredicate() {
    let _localctx = new JqlWasPredicateContext(this._ctx, this.state);
    this.enterRule(_localctx, 64, JQLParser.RULE_jqlWasPredicate);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 295;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case JQLParser.BEFORE:
          case JQLParser.AFTER:
          case JQLParser.ON:
            {
              this.state = 292;
              this.jqlDatePredicateOperator();
            }
            break;
          case JQLParser.DURING:
            {
              this.state = 293;
              this.jqlDateRangePredicateOperator();
            }
            break;
          case JQLParser.BY:
            {
              this.state = 294;
              this.jqlUserPredicateOperator();
            }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this.state = 297;
        this.jqlPredicateOperand();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlChangedPredicate() {
    let _localctx = new JqlChangedPredicateContext(this._ctx, this.state);
    this.enterRule(_localctx, 66, JQLParser.RULE_jqlChangedPredicate);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 303;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case JQLParser.BEFORE:
          case JQLParser.AFTER:
          case JQLParser.ON:
            {
              this.state = 299;
              this.jqlDatePredicateOperator();
            }
            break;
          case JQLParser.DURING:
            {
              this.state = 300;
              this.jqlDateRangePredicateOperator();
            }
            break;
          case JQLParser.BY:
            {
              this.state = 301;
              this.jqlUserPredicateOperator();
            }
            break;
          case JQLParser.FROM:
          case JQLParser.TO:
            {
              this.state = 302;
              this.jqlValuePredicateOperator();
            }
            break;
          default:
            throw new NoViableAltException(this);
        }
        this.state = 305;
        this.jqlPredicateOperand();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlDatePredicateOperator() {
    let _localctx = new JqlDatePredicateOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 68, JQLParser.RULE_jqlDatePredicateOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 307;
        _la = this._input.LA(1);
        if (!((_la & ~0x1f) === 0 && (1 << _la & (1 << JQLParser.BEFORE | 1 << JQLParser.AFTER | 1 << JQLParser.ON)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlDateRangePredicateOperator() {
    let _localctx = new JqlDateRangePredicateOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 70, JQLParser.RULE_jqlDateRangePredicateOperator);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 309;
        this.match(JQLParser.DURING);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlUserPredicateOperator() {
    let _localctx = new JqlUserPredicateOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 72, JQLParser.RULE_jqlUserPredicateOperator);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 311;
        this.match(JQLParser.BY);
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlValuePredicateOperator() {
    let _localctx = new JqlValuePredicateOperatorContext(this._ctx, this.state);
    this.enterRule(_localctx, 74, JQLParser.RULE_jqlValuePredicateOperator);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 313;
        _la = this._input.LA(1);
        if (!(_la === JQLParser.FROM || _la === JQLParser.TO)) {
          this._errHandler.recoverInline(this);
        } else {
          if (this._input.LA(1) === Token.EOF) {
            this.matchedEOF = true;
          }
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlPredicateOperand() {
    let _localctx = new JqlPredicateOperandContext(this._ctx, this.state);
    this.enterRule(_localctx, 76, JQLParser.RULE_jqlPredicateOperand);
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 315;
        this.jqlOperand();
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlOrderBy() {
    let _localctx = new JqlOrderByContext(this._ctx, this.state);
    this.enterRule(_localctx, 78, JQLParser.RULE_jqlOrderBy);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 317;
        this.match(JQLParser.ORDER);
        this.state = 318;
        this.match(JQLParser.BY);
        this.state = 319;
        this.jqlSearchSort();
        this.state = 324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === JQLParser.COMMA) {
          {
            {
              this.state = 320;
              this.match(JQLParser.COMMA);
              this.state = 321;
              this.jqlSearchSort();
            }
          }
          this.state = 326;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  // @RuleVersion(0)
  jqlSearchSort() {
    let _localctx = new JqlSearchSortContext(this._ctx, this.state);
    this.enterRule(_localctx, 80, JQLParser.RULE_jqlSearchSort);
    let _la;
    try {
      this.enterOuterAlt(_localctx, 1);
      {
        this.state = 327;
        this.jqlField();
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === JQLParser.ASC || _la === JQLParser.DESC) {
          {
            this.state = 328;
            _la = this._input.LA(1);
            if (!(_la === JQLParser.ASC || _la === JQLParser.DESC)) {
              this._errHandler.recoverInline(this);
            } else {
              if (this._input.LA(1) === Token.EOF) {
                this.matchedEOF = true;
              }
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
        }
      }
    } catch (re) {
      if (re instanceof RecognitionException) {
        _localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return _localctx;
  }
  static get _ATN() {
    if (!JQLParser.__ATN) {
      JQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JQLParser._serializedATN));
    }
    return JQLParser.__ATN;
  }
}
_class = JQLParser;
_defineProperty(JQLParser, "LPAREN", 1);
_defineProperty(JQLParser, "RPAREN", 2);
_defineProperty(JQLParser, "COMMA", 3);
_defineProperty(JQLParser, "LBRACKET", 4);
_defineProperty(JQLParser, "RBRACKET", 5);
_defineProperty(JQLParser, "BANG", 6);
_defineProperty(JQLParser, "LT", 7);
_defineProperty(JQLParser, "GT", 8);
_defineProperty(JQLParser, "GTEQ", 9);
_defineProperty(JQLParser, "LTEQ", 10);
_defineProperty(JQLParser, "EQUALS", 11);
_defineProperty(JQLParser, "NOT_EQUALS", 12);
_defineProperty(JQLParser, "LIKE", 13);
_defineProperty(JQLParser, "NOT_LIKE", 14);
_defineProperty(JQLParser, "IN", 15);
_defineProperty(JQLParser, "IS", 16);
_defineProperty(JQLParser, "AND", 17);
_defineProperty(JQLParser, "OR", 18);
_defineProperty(JQLParser, "NOT", 19);
_defineProperty(JQLParser, "EMPTY", 20);
_defineProperty(JQLParser, "WAS", 21);
_defineProperty(JQLParser, "CHANGED", 22);
_defineProperty(JQLParser, "BEFORE", 23);
_defineProperty(JQLParser, "AFTER", 24);
_defineProperty(JQLParser, "FROM", 25);
_defineProperty(JQLParser, "TO", 26);
_defineProperty(JQLParser, "ON", 27);
_defineProperty(JQLParser, "DURING", 28);
_defineProperty(JQLParser, "ORDER", 29);
_defineProperty(JQLParser, "BY", 30);
_defineProperty(JQLParser, "ASC", 31);
_defineProperty(JQLParser, "DESC", 32);
_defineProperty(JQLParser, "POSNUMBER", 33);
_defineProperty(JQLParser, "NEGNUMBER", 34);
_defineProperty(JQLParser, "CUSTOMFIELD", 35);
_defineProperty(JQLParser, "RESERVED_WORD", 36);
_defineProperty(JQLParser, "STRING", 37);
_defineProperty(JQLParser, "MATCHWS", 38);
_defineProperty(JQLParser, "ERROR_RESERVED", 39);
_defineProperty(JQLParser, "ERRORCHAR", 40);
_defineProperty(JQLParser, "QUOTE_STRING", 41);
_defineProperty(JQLParser, "UNCLOSED_QUOTE_STRING", 42);
_defineProperty(JQLParser, "INVALID_QUOTE_STRING", 43);
_defineProperty(JQLParser, "SQUOTE_STRING", 44);
_defineProperty(JQLParser, "UNCLOSED_SQUOTE_STRING", 45);
_defineProperty(JQLParser, "INVALID_SQUOTE_STRING", 46);
_defineProperty(JQLParser, "RULE_jqlQuery", 0);
_defineProperty(JQLParser, "RULE_jqlWhere", 1);
_defineProperty(JQLParser, "RULE_jqlOrClause", 2);
_defineProperty(JQLParser, "RULE_jqlAndClause", 3);
_defineProperty(JQLParser, "RULE_jqlNotClause", 4);
_defineProperty(JQLParser, "RULE_jqlSubClause", 5);
_defineProperty(JQLParser, "RULE_jqlTerminalClause", 6);
_defineProperty(JQLParser, "RULE_jqlTerminalClauseRhs", 7);
_defineProperty(JQLParser, "RULE_jqlEqualsOperator", 8);
_defineProperty(JQLParser, "RULE_jqlLikeOperator", 9);
_defineProperty(JQLParser, "RULE_jqlComparisonOperator", 10);
_defineProperty(JQLParser, "RULE_jqlInOperator", 11);
_defineProperty(JQLParser, "RULE_jqlIsOperator", 12);
_defineProperty(JQLParser, "RULE_jqlWasOperator", 13);
_defineProperty(JQLParser, "RULE_jqlWasInOperator", 14);
_defineProperty(JQLParser, "RULE_jqlChangedOperator", 15);
_defineProperty(JQLParser, "RULE_jqlField", 16);
_defineProperty(JQLParser, "RULE_jqlFieldProperty", 17);
_defineProperty(JQLParser, "RULE_jqlCustomField", 18);
_defineProperty(JQLParser, "RULE_jqlString", 19);
_defineProperty(JQLParser, "RULE_jqlNumber", 20);
_defineProperty(JQLParser, "RULE_jqlOperand", 21);
_defineProperty(JQLParser, "RULE_jqlEmpty", 22);
_defineProperty(JQLParser, "RULE_jqlValue", 23);
_defineProperty(JQLParser, "RULE_jqlFunction", 24);
_defineProperty(JQLParser, "RULE_jqlFunctionName", 25);
_defineProperty(JQLParser, "RULE_jqlArgumentList", 26);
_defineProperty(JQLParser, "RULE_jqlList", 27);
_defineProperty(JQLParser, "RULE_jqlListStart", 28);
_defineProperty(JQLParser, "RULE_jqlListEnd", 29);
_defineProperty(JQLParser, "RULE_jqlPropertyArgument", 30);
_defineProperty(JQLParser, "RULE_jqlArgument", 31);
_defineProperty(JQLParser, "RULE_jqlWasPredicate", 32);
_defineProperty(JQLParser, "RULE_jqlChangedPredicate", 33);
_defineProperty(JQLParser, "RULE_jqlDatePredicateOperator", 34);
_defineProperty(JQLParser, "RULE_jqlDateRangePredicateOperator", 35);
_defineProperty(JQLParser, "RULE_jqlUserPredicateOperator", 36);
_defineProperty(JQLParser, "RULE_jqlValuePredicateOperator", 37);
_defineProperty(JQLParser, "RULE_jqlPredicateOperand", 38);
_defineProperty(JQLParser, "RULE_jqlOrderBy", 39);
_defineProperty(JQLParser, "RULE_jqlSearchSort", 40);
// tslint:disable:no-trailing-whitespace
_defineProperty(JQLParser, "ruleNames", ['jqlQuery', 'jqlWhere', 'jqlOrClause', 'jqlAndClause', 'jqlNotClause', 'jqlSubClause', 'jqlTerminalClause', 'jqlTerminalClauseRhs', 'jqlEqualsOperator', 'jqlLikeOperator', 'jqlComparisonOperator', 'jqlInOperator', 'jqlIsOperator', 'jqlWasOperator', 'jqlWasInOperator', 'jqlChangedOperator', 'jqlField', 'jqlFieldProperty', 'jqlCustomField', 'jqlString', 'jqlNumber', 'jqlOperand', 'jqlEmpty', 'jqlValue', 'jqlFunction', 'jqlFunctionName', 'jqlArgumentList', 'jqlList', 'jqlListStart', 'jqlListEnd', 'jqlPropertyArgument', 'jqlArgument', 'jqlWasPredicate', 'jqlChangedPredicate', 'jqlDatePredicateOperator', 'jqlDateRangePredicateOperator', 'jqlUserPredicateOperator', 'jqlValuePredicateOperator', 'jqlPredicateOperand', 'jqlOrderBy', 'jqlSearchSort']);
_defineProperty(JQLParser, "_LITERAL_NAMES", [undefined, "'('", "')'", "','", "'['", "']'", "'!'", "'<'", "'>'", "'>='", "'<='", "'='", "'!='", "'~'", "'!~'"]);
_defineProperty(JQLParser, "_SYMBOLIC_NAMES", [undefined, 'LPAREN', 'RPAREN', 'COMMA', 'LBRACKET', 'RBRACKET', 'BANG', 'LT', 'GT', 'GTEQ', 'LTEQ', 'EQUALS', 'NOT_EQUALS', 'LIKE', 'NOT_LIKE', 'IN', 'IS', 'AND', 'OR', 'NOT', 'EMPTY', 'WAS', 'CHANGED', 'BEFORE', 'AFTER', 'FROM', 'TO', 'ON', 'DURING', 'ORDER', 'BY', 'ASC', 'DESC', 'POSNUMBER', 'NEGNUMBER', 'CUSTOMFIELD', 'RESERVED_WORD', 'STRING', 'MATCHWS', 'ERROR_RESERVED', 'ERRORCHAR', 'QUOTE_STRING', 'UNCLOSED_QUOTE_STRING', 'INVALID_QUOTE_STRING', 'SQUOTE_STRING', 'UNCLOSED_SQUOTE_STRING', 'INVALID_SQUOTE_STRING']);
_defineProperty(JQLParser, "VOCABULARY", new VocabularyImpl(_class._LITERAL_NAMES, _class._SYMBOLIC_NAMES, []));
_defineProperty(JQLParser, "_serializedATN", '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x030\u014E\x04\x02' + '\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07' + '\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04' + '\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04' + '\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04' + '\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04' + '\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04#' + "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x03\x02" + '\x05\x02V\n\x02\x03\x02\x05\x02Y\n\x02\x03\x02\x03\x02\x03\x03\x03\x03' + '\x03\x04\x03\x04\x03\x04\x07\x04b\n\x04\f\x04\x0E\x04e\v\x04\x03\x05\x03' + '\x05\x03\x05\x07\x05j\n\x05\f\x05\x0E\x05m\v\x05\x03\x06\x03\x06\x03\x06' + '\x03\x06\x05\x06s\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03' + '\b\x03\t\x03\t\x03\t\x03\t\x05\t\x80\n\t\x03\t\x03\t\x03\t\x03\t\x05\t' + '\x86\n\t\x03\t\x03\t\x03\t\x05\t\x8B\n\t\x03\t\x03\t\x03\t\x05\t\x90\n' + '\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\x99\n\t\x03\t\x07\t' + '\x9C\n\t\f\t\x0E\t\x9F\v\t\x03\t\x03\t\x03\t\x05\t\xA4\n\t\x03\t\x07\t' + '\xA7\n\t\f\t\x0E\t\xAA\v\t\x03\t\x03\t\x07\t\xAE\n\t\f\t\x0E\t\xB1\v\t' + '\x05\t\xB3\n\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x05' + '\r\xBE\n\r\x03\x0E\x03\x0E\x03\x0E\x05\x0E\xC3\n\x0E\x03\x0F\x03\x0F\x03' + '\x0F\x05\x0F\xC8\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10' + '\xCF\n\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x05\x12\xD6\n\x12\x03' + '\x12\x07\x12\xD9\n\x12\f\x12\x0E\x12\xDC\v\x12\x05\x12\xDE\n\x12\x03\x13' + '\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\xE5\n\x13\f\x13\x0E\x13\xE8\v' + '\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03' + '\x16\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\xF7\n\x17\x03\x18\x03\x18' + '\x03\x19\x03\x19\x05\x19\xFD\n\x19\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0102' + '\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B\u0108\n\x1B\x03\x1C\x03' + '\x1C\x03\x1C\x07\x1C\u010D\n\x1C\f\x1C\x0E\x1C\u0110\v\x1C\x03\x1D\x03' + '\x1D\x03\x1D\x03\x1D\x07\x1D\u0116\n\x1D\f\x1D\x0E\x1D\u0119\v\x1D\x03' + '\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x05!' + '\u0125\n!\x03"\x03"\x03"\x05"\u012A\n"\x03"\x03"\x03#\x03#\x03' + "#\x03#\x05#\u0132\n#\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03'\x03" + "'\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x07)\u0145\n)\f)\x0E)\u0148\v)\x03" + '*\x03*\x05*\u014C\n*\x03*\x02\x02\x02+\x02\x02\x04\x02\x06\x02\b\x02\n' + '\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C' + '\x02\x1E\x02 \x02"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026' + '\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02' + 'R\x02\x02\v\x04\x02\b\b\x15\x15\x03\x02\r\x0E\x03\x02\x0F\x10\x03\x02' + "\t\f\x05\x02''++..\x03\x02#$\x04\x02\x19\x1A\x1D\x1D\x03\x02\x1B\x1C" + '\x03\x02!"\x02\u0155\x02U\x03\x02\x02\x02\x04\\\x03\x02\x02\x02\x06^' + '\x03\x02\x02\x02\bf\x03\x02\x02\x02\nr\x03\x02\x02\x02\ft\x03\x02\x02' + '\x02\x0Ex\x03\x02\x02\x02\x10\xB2\x03\x02\x02\x02\x12\xB4\x03\x02\x02' + '\x02\x14\xB6\x03\x02\x02\x02\x16\xB8\x03\x02\x02\x02\x18\xBD\x03\x02\x02' + '\x02\x1A\xC2\x03\x02\x02\x02\x1C\xC7\x03\x02\x02\x02\x1E\xCE\x03\x02\x02' + '\x02 \xD0\x03\x02\x02\x02"\xDD\x03\x02\x02\x02$\xDF\x03\x02\x02\x02&' + '\xE9\x03\x02\x02\x02(\xEE\x03\x02\x02\x02*\xF0\x03\x02\x02\x02,\xF6\x03' + '\x02\x02\x02.\xF8\x03\x02\x02\x020\xFC\x03\x02\x02\x022\xFE\x03\x02\x02' + '\x024\u0107\x03\x02\x02\x026\u0109\x03\x02\x02\x028\u0111\x03\x02\x02' + '\x02:\u011C\x03\x02\x02\x02<\u011E\x03\x02\x02\x02>\u0120\x03\x02\x02' + '\x02@\u0124\x03\x02\x02\x02B\u0129\x03\x02\x02\x02D\u0131\x03\x02\x02' + '\x02F\u0135\x03\x02\x02\x02H\u0137\x03\x02\x02\x02J\u0139\x03\x02\x02' + '\x02L\u013B\x03\x02\x02\x02N\u013D\x03\x02\x02\x02P\u013F\x03\x02\x02' + '\x02R\u0149\x03\x02\x02\x02TV\x05\x04\x03\x02UT\x03\x02\x02\x02UV\x03' + '\x02\x02\x02VX\x03\x02\x02\x02WY\x05P)\x02XW\x03\x02\x02\x02XY\x03\x02' + '\x02\x02YZ\x03\x02\x02\x02Z[\x07\x02\x02\x03[\x03\x03\x02\x02\x02\\]\x05' + '\x06\x04\x02]\x05\x03\x02\x02\x02^c\x05\b\x05\x02_`\x07\x14\x02\x02`b' + '\x05\b\x05\x02a_\x03\x02\x02\x02be\x03\x02\x02\x02ca\x03\x02\x02\x02c' + 'd\x03\x02\x02\x02d\x07\x03\x02\x02\x02ec\x03\x02\x02\x02fk\x05\n\x06\x02' + 'gh\x07\x13\x02\x02hj\x05\n\x06\x02ig\x03\x02\x02\x02jm\x03\x02\x02\x02' + 'ki\x03\x02\x02\x02kl\x03\x02\x02\x02l\t\x03\x02\x02\x02mk\x03\x02\x02' + '\x02no\t\x02\x02\x02os\x05\n\x06\x02ps\x05\f\x07\x02qs\x05\x0E\b\x02r' + 'n\x03\x02\x02\x02rp\x03\x02\x02\x02rq\x03\x02\x02\x02s\v\x03\x02\x02\x02' + 'tu\x07\x03\x02\x02uv\x05\x06\x04\x02vw\x07\x04\x02\x02w\r\x03\x02\x02' + '\x02xy\x05"\x12\x02yz\x05\x10\t\x02z\x0F\x03\x02\x02\x02{\x7F\x05\x12' + '\n\x02|\x80\x05.\x18\x02}\x80\x050\x19\x02~\x80\x052\x1A\x02\x7F|\x03' + '\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F~\x03\x02\x02\x02\x80\xB3\x03\x02' + '\x02\x02\x81\x85\x05\x14\v\x02\x82\x86\x05.\x18\x02\x83\x86\x050\x19\x02' + '\x84\x86\x052\x1A\x02\x85\x82\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02' + '\x85\x84\x03\x02\x02\x02\x86\xB3\x03\x02\x02\x02\x87\x8A\x05\x16\f\x02' + '\x88\x8B\x050\x19\x02\x89\x8B\x052\x1A\x02\x8A\x88\x03\x02\x02\x02\x8A' + '\x89\x03\x02\x02\x02\x8B\xB3\x03\x02\x02\x02\x8C\x8F\x05\x18\r\x02\x8D' + '\x90\x058\x1D\x02\x8E\x90\x052\x1A\x02\x8F\x8D\x03\x02\x02\x02\x8F\x8E' + '\x03\x02\x02\x02\x90\xB3\x03\x02\x02\x02\x91\x92\x05\x1A\x0E\x02\x92\x93' + '\x05.\x18\x02\x93\xB3\x03\x02\x02\x02\x94\x98\x05\x1C\x0F\x02\x95\x99' + '\x05.\x18\x02\x96\x99\x050\x19\x02\x97\x99\x052\x1A\x02\x98\x95\x03\x02' + '\x02\x02\x98\x96\x03\x02\x02\x02\x98\x97\x03\x02\x02\x02\x99\x9D\x03\x02' + '\x02\x02\x9A\x9C\x05B"\x02\x9B\x9A\x03\x02\x02\x02\x9C\x9F\x03\x02\x02' + '\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\xB3\x03\x02\x02' + '\x02\x9F\x9D\x03\x02\x02\x02\xA0\xA3\x05\x1E\x10\x02\xA1\xA4\x058\x1D' + '\x02\xA2\xA4\x052\x1A\x02\xA3\xA1\x03\x02\x02\x02\xA3\xA2\x03\x02\x02' + '\x02\xA4\xA8\x03\x02\x02\x02\xA5\xA7\x05B"\x02\xA6\xA5\x03\x02\x02\x02' + '\xA7\xAA\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02' + '\xA9\xB3\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAB\xAF\x05 \x11\x02' + '\xAC\xAE\x05D#\x02\xAD\xAC\x03\x02\x02\x02\xAE\xB1\x03\x02\x02\x02\xAF' + '\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xB3\x03\x02\x02\x02\xB1' + '\xAF\x03\x02\x02\x02\xB2{\x03\x02\x02\x02\xB2\x81\x03\x02\x02\x02\xB2' + '\x87\x03\x02\x02\x02\xB2\x8C\x03\x02\x02\x02\xB2\x91\x03\x02\x02\x02\xB2' + '\x94\x03\x02\x02\x02\xB2\xA0\x03\x02\x02\x02\xB2\xAB\x03\x02\x02\x02\xB3' + '\x11\x03\x02\x02\x02\xB4\xB5\t\x03\x02\x02\xB5\x13\x03\x02\x02\x02\xB6' + '\xB7\t\x04\x02\x02\xB7\x15\x03\x02\x02\x02\xB8\xB9\t\x05\x02\x02\xB9\x17' + '\x03\x02\x02\x02\xBA\xBE\x07\x11\x02\x02\xBB\xBC\x07\x15\x02\x02\xBC\xBE' + '\x07\x11\x02\x02\xBD\xBA\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBE\x19' + '\x03\x02\x02\x02\xBF\xC3\x07\x12\x02\x02\xC0\xC1\x07\x12\x02\x02\xC1\xC3' + '\x07\x15\x02\x02\xC2\xBF\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC3\x1B' + '\x03\x02\x02\x02\xC4\xC8\x07\x17\x02\x02\xC5\xC6\x07\x17\x02\x02\xC6\xC8' + '\x07\x15\x02\x02\xC7\xC4\x03\x02\x02\x02\xC7\xC5\x03\x02\x02\x02\xC8\x1D' + '\x03\x02\x02\x02\xC9\xCA\x07\x17\x02\x02\xCA\xCF\x07\x11\x02\x02\xCB\xCC' + '\x07\x17\x02\x02\xCC\xCD\x07\x15\x02\x02\xCD\xCF\x07\x11\x02\x02\xCE\xC9' + '\x03\x02\x02\x02\xCE\xCB\x03\x02\x02\x02\xCF\x1F\x03\x02\x02\x02\xD0\xD1' + '\x07\x18\x02\x02\xD1!\x03\x02\x02\x02\xD2\xDE\x05*\x16\x02\xD3\xD6\x05' + '(\x15\x02\xD4\xD6\x05&\x14\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD4\x03\x02' + '\x02\x02\xD6\xDA\x03\x02\x02\x02\xD7\xD9\x05$\x13\x02\xD8\xD7\x03\x02' + '\x02\x02\xD9\xDC\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02\xDA\xDB\x03\x02' + '\x02\x02\xDB\xDE\x03\x02\x02\x02\xDC\xDA\x03\x02\x02\x02\xDD\xD2\x03\x02' + '\x02\x02\xDD\xD5\x03\x02\x02\x02\xDE#\x03\x02\x02\x02\xDF\xE0\x07\x06' + '\x02\x02\xE0\xE1\x05@!\x02\xE1\xE2\x07\x07\x02\x02\xE2\xE6\x03\x02\x02' + '\x02\xE3\xE5\x05> \x02\xE4\xE3\x03\x02\x02\x02\xE5\xE8\x03\x02\x02\x02' + '\xE6\xE4\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7%\x03\x02\x02\x02' + '\xE8\xE6\x03\x02\x02\x02\xE9\xEA\x07%\x02\x02\xEA\xEB\x07\x06\x02\x02' + "\xEB\xEC\x07#\x02\x02\xEC\xED\x07\x07\x02\x02\xED'\x03\x02\x02\x02\xEE" + '\xEF\t\x06\x02\x02\xEF)\x03\x02\x02\x02\xF0\xF1\t\x07\x02\x02\xF1+\x03' + '\x02\x02\x02\xF2\xF7\x05.\x18\x02\xF3\xF7\x050\x19\x02\xF4\xF7\x052\x1A' + '\x02\xF5\xF7\x058\x1D\x02\xF6\xF2\x03\x02\x02\x02\xF6\xF3\x03\x02\x02' + '\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF5\x03\x02\x02\x02\xF7-\x03\x02\x02' + '\x02\xF8\xF9\x07\x16\x02\x02\xF9/\x03\x02\x02\x02\xFA\xFD\x05(\x15\x02' + '\xFB\xFD\x05*\x16\x02\xFC\xFA\x03\x02\x02\x02\xFC\xFB\x03\x02\x02\x02' + '\xFD1\x03\x02\x02\x02\xFE\xFF\x054\x1B\x02\xFF\u0101\x07\x03\x02\x02\u0100' + '\u0102\x056\x1C\x02\u0101\u0100\x03\x02\x02\x02\u0101\u0102\x03\x02\x02' + '\x02\u0102\u0103\x03\x02\x02\x02\u0103\u0104\x07\x04\x02\x02\u01043\x03' + '\x02\x02\x02\u0105\u0108\x05(\x15\x02\u0106\u0108\x05*\x16\x02\u0107\u0105' + '\x03\x02\x02\x02\u0107\u0106\x03\x02\x02\x02\u01085\x03\x02\x02\x02\u0109' + '\u010E\x05@!\x02\u010A\u010B\x07\x05\x02\x02\u010B\u010D\x05@!\x02\u010C' + '\u010A\x03\x02\x02\x02\u010D\u0110\x03\x02\x02\x02\u010E\u010C\x03\x02' + '\x02\x02\u010E\u010F\x03\x02\x02\x02\u010F7\x03\x02\x02\x02\u0110\u010E' + '\x03\x02\x02\x02\u0111\u0112\x05:\x1E\x02\u0112\u0117\x05,\x17\x02\u0113' + '\u0114\x07\x05\x02\x02\u0114\u0116\x05,\x17\x02\u0115\u0113\x03\x02\x02' + '\x02\u0116\u0119\x03\x02\x02\x02\u0117\u0115\x03\x02\x02\x02\u0117\u0118' + '\x03\x02\x02\x02\u0118\u011A\x03\x02\x02\x02\u0119\u0117\x03\x02\x02\x02' + '\u011A\u011B\x05<\x1F\x02\u011B9\x03\x02\x02\x02\u011C\u011D\x07\x03\x02' + '\x02\u011D;\x03\x02\x02\x02\u011E\u011F\x07\x04\x02\x02\u011F=\x03\x02' + '\x02\x02\u0120\u0121\x05@!\x02\u0121?\x03\x02\x02\x02\u0122\u0125\x05' + '(\x15\x02\u0123\u0125\x05*\x16\x02\u0124\u0122\x03\x02\x02\x02\u0124\u0123' + '\x03\x02\x02\x02\u0125A\x03\x02\x02\x02\u0126\u012A\x05F$\x02\u0127\u012A' + '\x05H%\x02\u0128\u012A\x05J&\x02\u0129\u0126\x03\x02\x02\x02\u0129\u0127' + '\x03\x02\x02\x02\u0129\u0128\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02' + '\u012B\u012C\x05N(\x02\u012CC\x03\x02\x02\x02\u012D\u0132\x05F$\x02\u012E' + "\u0132\x05H%\x02\u012F\u0132\x05J&\x02\u0130\u0132\x05L'\x02\u0131\u012D" + '\x03\x02\x02\x02\u0131\u012E\x03\x02\x02\x02\u0131\u012F\x03\x02\x02\x02' + '\u0131\u0130\x03\x02\x02\x02\u0132\u0133\x03\x02\x02\x02\u0133\u0134\x05' + 'N(\x02\u0134E\x03\x02\x02\x02\u0135\u0136\t\b\x02\x02\u0136G\x03\x02\x02' + '\x02\u0137\u0138\x07\x1E\x02\x02\u0138I\x03\x02\x02\x02\u0139\u013A\x07' + ' \x02\x02\u013AK\x03\x02\x02\x02\u013B\u013C\t\t\x02\x02\u013CM\x03\x02' + '\x02\x02\u013D\u013E\x05,\x17\x02\u013EO\x03\x02\x02\x02\u013F\u0140\x07' + '\x1F\x02\x02\u0140\u0141\x07 \x02\x02\u0141\u0146\x05R*\x02\u0142\u0143' + '\x07\x05\x02\x02\u0143\u0145\x05R*\x02\u0144\u0142\x03\x02\x02\x02\u0145' + '\u0148\x03\x02\x02\x02\u0146\u0144\x03\x02\x02\x02\u0146\u0147\x03\x02' + '\x02\x02\u0147Q\x03\x02\x02\x02\u0148\u0146\x03\x02\x02\x02\u0149\u014B' + '\x05"\x12\x02\u014A\u014C\t\n\x02\x02\u014B\u014A\x03\x02\x02\x02\u014B' + '\u014C\x03\x02\x02\x02\u014CS\x03\x02\x02\x02$UXckr\x7F\x85\x8A\x8F\x98' + '\x9D\xA3\xA8\xAF\xB2\xBD\xC2\xC7\xCE\xD5\xDA\xDD\xE6\xF6\xFC\u0101\u0107' + '\u010E\u0117\u0124\u0129\u0131\u0146\u014B');
export class JqlQueryContext extends ParserRuleContext {
  EOF() {
    return this.getToken(JQLParser.EOF, 0);
  }
  jqlWhere() {
    return this.tryGetRuleContext(0, JqlWhereContext);
  }
  jqlOrderBy() {
    return this.tryGetRuleContext(0, JqlOrderByContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlQuery;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlQuery) {
      listener.enterJqlQuery(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlQuery) {
      listener.exitJqlQuery(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlQuery) {
      return visitor.visitJqlQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWhereContext extends ParserRuleContext {
  jqlOrClause() {
    return this.getRuleContext(0, JqlOrClauseContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlWhere;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWhere) {
      listener.enterJqlWhere(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWhere) {
      listener.exitJqlWhere(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWhere) {
      return visitor.visitJqlWhere(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlOrClauseContext extends ParserRuleContext {
  jqlAndClause(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlAndClauseContext);
    } else {
      return this.getRuleContext(i, JqlAndClauseContext);
    }
  }
  OR(i) {
    if (i === undefined) {
      return this.getTokens(JQLParser.OR);
    } else {
      return this.getToken(JQLParser.OR, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlOrClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlOrClause) {
      listener.enterJqlOrClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlOrClause) {
      listener.exitJqlOrClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlOrClause) {
      return visitor.visitJqlOrClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlAndClauseContext extends ParserRuleContext {
  jqlNotClause(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlNotClauseContext);
    } else {
      return this.getRuleContext(i, JqlNotClauseContext);
    }
  }
  AND(i) {
    if (i === undefined) {
      return this.getTokens(JQLParser.AND);
    } else {
      return this.getToken(JQLParser.AND, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlAndClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlAndClause) {
      listener.enterJqlAndClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlAndClause) {
      listener.exitJqlAndClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlAndClause) {
      return visitor.visitJqlAndClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlNotClauseContext extends ParserRuleContext {
  jqlNotClause() {
    return this.tryGetRuleContext(0, JqlNotClauseContext);
  }
  NOT() {
    return this.tryGetToken(JQLParser.NOT, 0);
  }
  BANG() {
    return this.tryGetToken(JQLParser.BANG, 0);
  }
  jqlSubClause() {
    return this.tryGetRuleContext(0, JqlSubClauseContext);
  }
  jqlTerminalClause() {
    return this.tryGetRuleContext(0, JqlTerminalClauseContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlNotClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlNotClause) {
      listener.enterJqlNotClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlNotClause) {
      listener.exitJqlNotClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlNotClause) {
      return visitor.visitJqlNotClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlSubClauseContext extends ParserRuleContext {
  LPAREN() {
    return this.getToken(JQLParser.LPAREN, 0);
  }
  jqlOrClause() {
    return this.getRuleContext(0, JqlOrClauseContext);
  }
  RPAREN() {
    return this.getToken(JQLParser.RPAREN, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlSubClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlSubClause) {
      listener.enterJqlSubClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlSubClause) {
      listener.exitJqlSubClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlSubClause) {
      return visitor.visitJqlSubClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlTerminalClauseContext extends ParserRuleContext {
  jqlField() {
    return this.getRuleContext(0, JqlFieldContext);
  }
  jqlTerminalClauseRhs() {
    return this.getRuleContext(0, JqlTerminalClauseRhsContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlTerminalClause;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlTerminalClause) {
      listener.enterJqlTerminalClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlTerminalClause) {
      listener.exitJqlTerminalClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlTerminalClause) {
      return visitor.visitJqlTerminalClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlTerminalClauseRhsContext extends ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlTerminalClauseRhs;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
export class JqlEqualsClauseContext extends JqlTerminalClauseRhsContext {
  jqlEqualsOperator() {
    return this.getRuleContext(0, JqlEqualsOperatorContext);
  }
  jqlEmpty() {
    return this.tryGetRuleContext(0, JqlEmptyContext);
  }
  jqlValue() {
    return this.tryGetRuleContext(0, JqlValueContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlEqualsClause) {
      listener.enterJqlEqualsClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlEqualsClause) {
      listener.exitJqlEqualsClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlEqualsClause) {
      return visitor.visitJqlEqualsClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlLikeClauseContext extends JqlTerminalClauseRhsContext {
  jqlLikeOperator() {
    return this.getRuleContext(0, JqlLikeOperatorContext);
  }
  jqlEmpty() {
    return this.tryGetRuleContext(0, JqlEmptyContext);
  }
  jqlValue() {
    return this.tryGetRuleContext(0, JqlValueContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlLikeClause) {
      listener.enterJqlLikeClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlLikeClause) {
      listener.exitJqlLikeClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlLikeClause) {
      return visitor.visitJqlLikeClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlComparisonClauseContext extends JqlTerminalClauseRhsContext {
  jqlComparisonOperator() {
    return this.getRuleContext(0, JqlComparisonOperatorContext);
  }
  jqlValue() {
    return this.tryGetRuleContext(0, JqlValueContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlComparisonClause) {
      listener.enterJqlComparisonClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlComparisonClause) {
      listener.exitJqlComparisonClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlComparisonClause) {
      return visitor.visitJqlComparisonClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlInClauseContext extends JqlTerminalClauseRhsContext {
  jqlInOperator() {
    return this.getRuleContext(0, JqlInOperatorContext);
  }
  jqlList() {
    return this.tryGetRuleContext(0, JqlListContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlInClause) {
      listener.enterJqlInClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlInClause) {
      listener.exitJqlInClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlInClause) {
      return visitor.visitJqlInClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlIsClauseContext extends JqlTerminalClauseRhsContext {
  jqlIsOperator() {
    return this.getRuleContext(0, JqlIsOperatorContext);
  }
  jqlEmpty() {
    return this.getRuleContext(0, JqlEmptyContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlIsClause) {
      listener.enterJqlIsClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlIsClause) {
      listener.exitJqlIsClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlIsClause) {
      return visitor.visitJqlIsClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWasClauseContext extends JqlTerminalClauseRhsContext {
  jqlWasOperator() {
    return this.getRuleContext(0, JqlWasOperatorContext);
  }
  jqlEmpty() {
    return this.tryGetRuleContext(0, JqlEmptyContext);
  }
  jqlValue() {
    return this.tryGetRuleContext(0, JqlValueContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  jqlWasPredicate(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlWasPredicateContext);
    } else {
      return this.getRuleContext(i, JqlWasPredicateContext);
    }
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWasClause) {
      listener.enterJqlWasClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWasClause) {
      listener.exitJqlWasClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWasClause) {
      return visitor.visitJqlWasClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWasInClauseContext extends JqlTerminalClauseRhsContext {
  jqlWasInOperator() {
    return this.getRuleContext(0, JqlWasInOperatorContext);
  }
  jqlList() {
    return this.tryGetRuleContext(0, JqlListContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  jqlWasPredicate(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlWasPredicateContext);
    } else {
      return this.getRuleContext(i, JqlWasPredicateContext);
    }
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWasInClause) {
      listener.enterJqlWasInClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWasInClause) {
      listener.exitJqlWasInClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWasInClause) {
      return visitor.visitJqlWasInClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlChangedClauseContext extends JqlTerminalClauseRhsContext {
  jqlChangedOperator() {
    return this.getRuleContext(0, JqlChangedOperatorContext);
  }
  jqlChangedPredicate(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlChangedPredicateContext);
    } else {
      return this.getRuleContext(i, JqlChangedPredicateContext);
    }
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlChangedClause) {
      listener.enterJqlChangedClause(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlChangedClause) {
      listener.exitJqlChangedClause(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlChangedClause) {
      return visitor.visitJqlChangedClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlEqualsOperatorContext extends ParserRuleContext {
  EQUALS() {
    return this.tryGetToken(JQLParser.EQUALS, 0);
  }
  NOT_EQUALS() {
    return this.tryGetToken(JQLParser.NOT_EQUALS, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlEqualsOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlEqualsOperator) {
      listener.enterJqlEqualsOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlEqualsOperator) {
      listener.exitJqlEqualsOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlEqualsOperator) {
      return visitor.visitJqlEqualsOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlLikeOperatorContext extends ParserRuleContext {
  LIKE() {
    return this.tryGetToken(JQLParser.LIKE, 0);
  }
  NOT_LIKE() {
    return this.tryGetToken(JQLParser.NOT_LIKE, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlLikeOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlLikeOperator) {
      listener.enterJqlLikeOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlLikeOperator) {
      listener.exitJqlLikeOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlLikeOperator) {
      return visitor.visitJqlLikeOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlComparisonOperatorContext extends ParserRuleContext {
  LT() {
    return this.tryGetToken(JQLParser.LT, 0);
  }
  GT() {
    return this.tryGetToken(JQLParser.GT, 0);
  }
  LTEQ() {
    return this.tryGetToken(JQLParser.LTEQ, 0);
  }
  GTEQ() {
    return this.tryGetToken(JQLParser.GTEQ, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlComparisonOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlComparisonOperator) {
      listener.enterJqlComparisonOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlComparisonOperator) {
      listener.exitJqlComparisonOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlComparisonOperator) {
      return visitor.visitJqlComparisonOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlInOperatorContext extends ParserRuleContext {
  IN() {
    return this.getToken(JQLParser.IN, 0);
  }
  NOT() {
    return this.tryGetToken(JQLParser.NOT, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlInOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlInOperator) {
      listener.enterJqlInOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlInOperator) {
      listener.exitJqlInOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlInOperator) {
      return visitor.visitJqlInOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlIsOperatorContext extends ParserRuleContext {
  IS() {
    return this.getToken(JQLParser.IS, 0);
  }
  NOT() {
    return this.tryGetToken(JQLParser.NOT, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlIsOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlIsOperator) {
      listener.enterJqlIsOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlIsOperator) {
      listener.exitJqlIsOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlIsOperator) {
      return visitor.visitJqlIsOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWasOperatorContext extends ParserRuleContext {
  WAS() {
    return this.getToken(JQLParser.WAS, 0);
  }
  NOT() {
    return this.tryGetToken(JQLParser.NOT, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlWasOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWasOperator) {
      listener.enterJqlWasOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWasOperator) {
      listener.exitJqlWasOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWasOperator) {
      return visitor.visitJqlWasOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWasInOperatorContext extends ParserRuleContext {
  WAS() {
    return this.getToken(JQLParser.WAS, 0);
  }
  IN() {
    return this.getToken(JQLParser.IN, 0);
  }
  NOT() {
    return this.tryGetToken(JQLParser.NOT, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlWasInOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWasInOperator) {
      listener.enterJqlWasInOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWasInOperator) {
      listener.exitJqlWasInOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWasInOperator) {
      return visitor.visitJqlWasInOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlChangedOperatorContext extends ParserRuleContext {
  CHANGED() {
    return this.getToken(JQLParser.CHANGED, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlChangedOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlChangedOperator) {
      listener.enterJqlChangedOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlChangedOperator) {
      listener.exitJqlChangedOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlChangedOperator) {
      return visitor.visitJqlChangedOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlFieldContext extends ParserRuleContext {
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlField;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
export class JqlNumberFieldContext extends JqlFieldContext {
  jqlNumber() {
    return this.getRuleContext(0, JqlNumberContext);
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlNumberField) {
      listener.enterJqlNumberField(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlNumberField) {
      listener.exitJqlNumberField(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlNumberField) {
      return visitor.visitJqlNumberField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlNonNumberFieldContext extends JqlFieldContext {
  jqlString() {
    return this.tryGetRuleContext(0, JqlStringContext);
  }
  jqlCustomField() {
    return this.tryGetRuleContext(0, JqlCustomFieldContext);
  }
  jqlFieldProperty(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlFieldPropertyContext);
    } else {
      return this.getRuleContext(i, JqlFieldPropertyContext);
    }
  }
  constructor(ctx) {
    super(ctx.parent, ctx.invokingState);
    this.copyFrom(ctx);
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlNonNumberField) {
      listener.enterJqlNonNumberField(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlNonNumberField) {
      listener.exitJqlNonNumberField(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlNonNumberField) {
      return visitor.visitJqlNonNumberField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlFieldPropertyContext extends ParserRuleContext {
  LBRACKET() {
    return this.tryGetToken(JQLParser.LBRACKET, 0);
  }
  RBRACKET() {
    return this.tryGetToken(JQLParser.RBRACKET, 0);
  }
  jqlPropertyArgument(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlPropertyArgumentContext);
    } else {
      return this.getRuleContext(i, JqlPropertyArgumentContext);
    }
  }
  jqlArgument() {
    return this.tryGetRuleContext(0, JqlArgumentContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlFieldProperty;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlFieldProperty) {
      listener.enterJqlFieldProperty(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlFieldProperty) {
      listener.exitJqlFieldProperty(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlFieldProperty) {
      return visitor.visitJqlFieldProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlCustomFieldContext extends ParserRuleContext {
  CUSTOMFIELD() {
    return this.getToken(JQLParser.CUSTOMFIELD, 0);
  }
  LBRACKET() {
    return this.getToken(JQLParser.LBRACKET, 0);
  }
  POSNUMBER() {
    return this.getToken(JQLParser.POSNUMBER, 0);
  }
  RBRACKET() {
    return this.getToken(JQLParser.RBRACKET, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlCustomField;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlCustomField) {
      listener.enterJqlCustomField(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlCustomField) {
      listener.exitJqlCustomField(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlCustomField) {
      return visitor.visitJqlCustomField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlStringContext extends ParserRuleContext {
  STRING() {
    return this.tryGetToken(JQLParser.STRING, 0);
  }
  QUOTE_STRING() {
    return this.tryGetToken(JQLParser.QUOTE_STRING, 0);
  }
  SQUOTE_STRING() {
    return this.tryGetToken(JQLParser.SQUOTE_STRING, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlString;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlString) {
      listener.enterJqlString(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlString) {
      listener.exitJqlString(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlString) {
      return visitor.visitJqlString(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlNumberContext extends ParserRuleContext {
  POSNUMBER() {
    return this.tryGetToken(JQLParser.POSNUMBER, 0);
  }
  NEGNUMBER() {
    return this.tryGetToken(JQLParser.NEGNUMBER, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlNumber;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlNumber) {
      listener.enterJqlNumber(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlNumber) {
      listener.exitJqlNumber(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlNumber) {
      return visitor.visitJqlNumber(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlOperandContext extends ParserRuleContext {
  jqlEmpty() {
    return this.tryGetRuleContext(0, JqlEmptyContext);
  }
  jqlValue() {
    return this.tryGetRuleContext(0, JqlValueContext);
  }
  jqlFunction() {
    return this.tryGetRuleContext(0, JqlFunctionContext);
  }
  jqlList() {
    return this.tryGetRuleContext(0, JqlListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlOperand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlOperand) {
      listener.enterJqlOperand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlOperand) {
      listener.exitJqlOperand(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlOperand) {
      return visitor.visitJqlOperand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlEmptyContext extends ParserRuleContext {
  EMPTY() {
    return this.getToken(JQLParser.EMPTY, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlEmpty;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlEmpty) {
      listener.enterJqlEmpty(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlEmpty) {
      listener.exitJqlEmpty(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlEmpty) {
      return visitor.visitJqlEmpty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlValueContext extends ParserRuleContext {
  jqlString() {
    return this.tryGetRuleContext(0, JqlStringContext);
  }
  jqlNumber() {
    return this.tryGetRuleContext(0, JqlNumberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlValue;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlValue) {
      listener.enterJqlValue(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlValue) {
      listener.exitJqlValue(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlValue) {
      return visitor.visitJqlValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlFunctionContext extends ParserRuleContext {
  jqlFunctionName() {
    return this.getRuleContext(0, JqlFunctionNameContext);
  }
  LPAREN() {
    return this.getToken(JQLParser.LPAREN, 0);
  }
  RPAREN() {
    return this.getToken(JQLParser.RPAREN, 0);
  }
  jqlArgumentList() {
    return this.tryGetRuleContext(0, JqlArgumentListContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlFunction;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlFunction) {
      listener.enterJqlFunction(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlFunction) {
      listener.exitJqlFunction(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlFunction) {
      return visitor.visitJqlFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlFunctionNameContext extends ParserRuleContext {
  jqlString() {
    return this.tryGetRuleContext(0, JqlStringContext);
  }
  jqlNumber() {
    return this.tryGetRuleContext(0, JqlNumberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlFunctionName;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlFunctionName) {
      listener.enterJqlFunctionName(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlFunctionName) {
      listener.exitJqlFunctionName(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlFunctionName) {
      return visitor.visitJqlFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlArgumentListContext extends ParserRuleContext {
  jqlArgument(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlArgumentContext);
    } else {
      return this.getRuleContext(i, JqlArgumentContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(JQLParser.COMMA);
    } else {
      return this.getToken(JQLParser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlArgumentList;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlArgumentList) {
      listener.enterJqlArgumentList(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlArgumentList) {
      listener.exitJqlArgumentList(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlArgumentList) {
      return visitor.visitJqlArgumentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlListContext extends ParserRuleContext {
  jqlListStart() {
    return this.getRuleContext(0, JqlListStartContext);
  }
  jqlOperand(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlOperandContext);
    } else {
      return this.getRuleContext(i, JqlOperandContext);
    }
  }
  jqlListEnd() {
    return this.getRuleContext(0, JqlListEndContext);
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(JQLParser.COMMA);
    } else {
      return this.getToken(JQLParser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlList;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlList) {
      listener.enterJqlList(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlList) {
      listener.exitJqlList(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlList) {
      return visitor.visitJqlList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlListStartContext extends ParserRuleContext {
  LPAREN() {
    return this.getToken(JQLParser.LPAREN, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlListStart;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlListStart) {
      listener.enterJqlListStart(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlListStart) {
      listener.exitJqlListStart(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlListStart) {
      return visitor.visitJqlListStart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlListEndContext extends ParserRuleContext {
  RPAREN() {
    return this.getToken(JQLParser.RPAREN, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlListEnd;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlListEnd) {
      listener.enterJqlListEnd(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlListEnd) {
      listener.exitJqlListEnd(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlListEnd) {
      return visitor.visitJqlListEnd(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlPropertyArgumentContext extends ParserRuleContext {
  jqlArgument() {
    return this.getRuleContext(0, JqlArgumentContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlPropertyArgument;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlPropertyArgument) {
      listener.enterJqlPropertyArgument(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlPropertyArgument) {
      listener.exitJqlPropertyArgument(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlPropertyArgument) {
      return visitor.visitJqlPropertyArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlArgumentContext extends ParserRuleContext {
  jqlString() {
    return this.tryGetRuleContext(0, JqlStringContext);
  }
  jqlNumber() {
    return this.tryGetRuleContext(0, JqlNumberContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlArgument;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlArgument) {
      listener.enterJqlArgument(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlArgument) {
      listener.exitJqlArgument(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlArgument) {
      return visitor.visitJqlArgument(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlWasPredicateContext extends ParserRuleContext {
  jqlPredicateOperand() {
    return this.getRuleContext(0, JqlPredicateOperandContext);
  }
  jqlDatePredicateOperator() {
    return this.tryGetRuleContext(0, JqlDatePredicateOperatorContext);
  }
  jqlDateRangePredicateOperator() {
    return this.tryGetRuleContext(0, JqlDateRangePredicateOperatorContext);
  }
  jqlUserPredicateOperator() {
    return this.tryGetRuleContext(0, JqlUserPredicateOperatorContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlWasPredicate;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlWasPredicate) {
      listener.enterJqlWasPredicate(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlWasPredicate) {
      listener.exitJqlWasPredicate(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlWasPredicate) {
      return visitor.visitJqlWasPredicate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlChangedPredicateContext extends ParserRuleContext {
  jqlPredicateOperand() {
    return this.getRuleContext(0, JqlPredicateOperandContext);
  }
  jqlDatePredicateOperator() {
    return this.tryGetRuleContext(0, JqlDatePredicateOperatorContext);
  }
  jqlDateRangePredicateOperator() {
    return this.tryGetRuleContext(0, JqlDateRangePredicateOperatorContext);
  }
  jqlUserPredicateOperator() {
    return this.tryGetRuleContext(0, JqlUserPredicateOperatorContext);
  }
  jqlValuePredicateOperator() {
    return this.tryGetRuleContext(0, JqlValuePredicateOperatorContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlChangedPredicate;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlChangedPredicate) {
      listener.enterJqlChangedPredicate(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlChangedPredicate) {
      listener.exitJqlChangedPredicate(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlChangedPredicate) {
      return visitor.visitJqlChangedPredicate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlDatePredicateOperatorContext extends ParserRuleContext {
  AFTER() {
    return this.tryGetToken(JQLParser.AFTER, 0);
  }
  BEFORE() {
    return this.tryGetToken(JQLParser.BEFORE, 0);
  }
  ON() {
    return this.tryGetToken(JQLParser.ON, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlDatePredicateOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlDatePredicateOperator) {
      listener.enterJqlDatePredicateOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlDatePredicateOperator) {
      listener.exitJqlDatePredicateOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlDatePredicateOperator) {
      return visitor.visitJqlDatePredicateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlDateRangePredicateOperatorContext extends ParserRuleContext {
  DURING() {
    return this.getToken(JQLParser.DURING, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlDateRangePredicateOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlDateRangePredicateOperator) {
      listener.enterJqlDateRangePredicateOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlDateRangePredicateOperator) {
      listener.exitJqlDateRangePredicateOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlDateRangePredicateOperator) {
      return visitor.visitJqlDateRangePredicateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlUserPredicateOperatorContext extends ParserRuleContext {
  BY() {
    return this.getToken(JQLParser.BY, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlUserPredicateOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlUserPredicateOperator) {
      listener.enterJqlUserPredicateOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlUserPredicateOperator) {
      listener.exitJqlUserPredicateOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlUserPredicateOperator) {
      return visitor.visitJqlUserPredicateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlValuePredicateOperatorContext extends ParserRuleContext {
  FROM() {
    return this.tryGetToken(JQLParser.FROM, 0);
  }
  TO() {
    return this.tryGetToken(JQLParser.TO, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlValuePredicateOperator;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlValuePredicateOperator) {
      listener.enterJqlValuePredicateOperator(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlValuePredicateOperator) {
      listener.exitJqlValuePredicateOperator(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlValuePredicateOperator) {
      return visitor.visitJqlValuePredicateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlPredicateOperandContext extends ParserRuleContext {
  jqlOperand() {
    return this.getRuleContext(0, JqlOperandContext);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlPredicateOperand;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlPredicateOperand) {
      listener.enterJqlPredicateOperand(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlPredicateOperand) {
      listener.exitJqlPredicateOperand(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlPredicateOperand) {
      return visitor.visitJqlPredicateOperand(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlOrderByContext extends ParserRuleContext {
  ORDER() {
    return this.getToken(JQLParser.ORDER, 0);
  }
  BY() {
    return this.getToken(JQLParser.BY, 0);
  }
  jqlSearchSort(i) {
    if (i === undefined) {
      return this.getRuleContexts(JqlSearchSortContext);
    } else {
      return this.getRuleContext(i, JqlSearchSortContext);
    }
  }
  COMMA(i) {
    if (i === undefined) {
      return this.getTokens(JQLParser.COMMA);
    } else {
      return this.getToken(JQLParser.COMMA, i);
    }
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlOrderBy;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlOrderBy) {
      listener.enterJqlOrderBy(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlOrderBy) {
      listener.exitJqlOrderBy(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlOrderBy) {
      return visitor.visitJqlOrderBy(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}
export class JqlSearchSortContext extends ParserRuleContext {
  jqlField() {
    return this.getRuleContext(0, JqlFieldContext);
  }
  DESC() {
    return this.tryGetToken(JQLParser.DESC, 0);
  }
  ASC() {
    return this.tryGetToken(JQLParser.ASC, 0);
  }
  constructor(parent, invokingState) {
    super(parent, invokingState);
  }
  // @Override
  get ruleIndex() {
    return JQLParser.RULE_jqlSearchSort;
  }
  // @Override
  enterRule(listener) {
    if (listener.enterJqlSearchSort) {
      listener.enterJqlSearchSort(this);
    }
  }
  // @Override
  exitRule(listener) {
    if (listener.exitJqlSearchSort) {
      listener.exitJqlSearchSort(this);
    }
  }
  // @Override
  accept(visitor) {
    if (visitor.visitJqlSearchSort) {
      return visitor.visitJqlSearchSort(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}