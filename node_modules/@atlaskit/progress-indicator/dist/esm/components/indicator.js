/* indicator.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./indicator.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { cx } from '@compiled/react';
import { Box, Pressable } from '@atlaskit/primitives/compiled';
import VisuallyHidden from '@atlaskit/visually-hidden';
var commonStyles = {
  common: "_2rko14q2 _1bsbg7kr _4t3ig7kr _kqswh2mm _cfu11ule _1mp41th6 _kfgt1th6 _1cs8stnw _1kt9b3bt _iajm1yh4 _z5wt1yh4"
};
var colorBorderMap = {
  default: "_19itt9ly",
  help: "_19itt9ly",
  inverted: "_19it1ps9",
  primary: "_19itt9ly"
};
var buttonStyle = {
  root: "_12ji1r31 _1qu2glyw _12y3idpf _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _80omtlke"
};
var backgroundColor = function backgroundColor(isSelected) {
  if (!isSelected) {
    return {
      default: "var(--ds-surface, #FFFFFF)",
      help: "var(--ds-surface, #FFFFFF)",
      inverted: "var(--ds-background-neutral-subtle, #00000000)",
      primary: "var(--ds-surface, #FFFFFF)"
    };
  }
  return {
    default: "var(--ds-icon, #44546F)",
    help: "var(--ds-icon-discovery, #8270DB)",
    inverted: "var(--ds-icon-inverse, #FFFFFF)",
    primary: "var(--ds-icon-brand, #0C66E4)"
  };
};

/**
 * __Presentational indicator__
 *
 * A presentational indicator with no interactivity
 */
export var PresentationalIndicator = function PresentationalIndicator(_ref) {
  var appearance = _ref.appearance,
    isSelected = _ref.isSelected,
    testId = _ref.testId;
  return /*#__PURE__*/React.createElement(Box, {
    testId: testId
    // here we set it dynamic because that backgroundColor and xcss don't support the colors we need here eg. token('color.icon')
    ,
    style: {
      backgroundColor: backgroundColor(isSelected)[appearance]
    },
    xcss: cx(commonStyles.common, colorBorderMap[appearance])
  });
};
/**
 * __Button indicator__
 *
 * An interactive indicator.
 */
export var ButtonIndicator = function ButtonIndicator(_ref2) {
  var appearance = _ref2.appearance,
    panelId = _ref2.panelId,
    tabId = _ref2.tabId,
    isSelected = _ref2.isSelected,
    onClick = _ref2.onClick,
    testId = _ref2.testId;
  return /*#__PURE__*/React.createElement(Pressable, {
    role: "tab",
    style: {
      backgroundColor: backgroundColor(isSelected)[appearance]
    },
    xcss: cx(commonStyles.common, buttonStyle.root, colorBorderMap[appearance]),
    "aria-controls": panelId,
    "aria-selected": isSelected,
    id: tabId,
    onClick: onClick,
    tabIndex: isSelected ? -1 : undefined,
    testId: testId
  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, tabId));
};