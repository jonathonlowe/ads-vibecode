import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { withTheme } from '@emotion/react';
import classnames from 'classnames';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import { akEditorBreakoutPadding, akEditorFullPageMaxWidth, breakoutWideScaleRatio } from '@atlaskit/editor-shared-styles';
export const GRID_SIZE = 12;
const key = new PluginKey('gridPlugin');
const createDisplayGrid = view => props => {
  const {
    dispatch,
    state
  } = view;
  const tr = state.tr.setMeta(key, props);
  dispatch(tr);
  return true;
};
const sides = ['left', 'right'];
const overflowHighlight = (highlights, side, start, size) => {
  if (!highlights.length) {
    return false;
  }
  const numericHighlights = highlights.filter(highlight => typeof highlight === 'number');
  const minHighlight = Math.min(...numericHighlights);
  const maxHighlight = Math.max(...numericHighlights);
  if (side === 'left') {
    return minHighlight < 0 && minHighlight <= -start && (typeof size === 'number' ? minHighlight >= -(start + size) : true);
  } else {
    return maxHighlight > GRID_SIZE && maxHighlight >= GRID_SIZE + start && (typeof size === 'number' ? maxHighlight <= GRID_SIZE + size : true);
  }
};
const gutterGridLines = (editorMaxWidth, editorWidth, highlights, shouldCalcBreakoutGridLines) => {
  const gridLines = [];
  if (!shouldCalcBreakoutGridLines) {
    return gridLines;
  }
  const wideSpacing = (editorMaxWidth * breakoutWideScaleRatio - editorMaxWidth) / 2;
  sides.forEach(side => {
    gridLines.push( /*#__PURE__*/React.createElement("div", {
      key: side
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: classnames('gridLine', overflowHighlight(highlights, side, 0, 4) ? 'highlight' : '')
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: {
        position: 'absolute',
        [side]: `-${wideSpacing}px`
      }
    }));
    gridLines.push( /*#__PURE__*/React.createElement("div", {
      key: side + '-bk'
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: classnames('gridLine', highlights.indexOf('full-width') > -1 ? 'highlight' : ''),
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        position: 'absolute',
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        [side]: `-${(editorWidth - editorMaxWidth - akEditorBreakoutPadding) / 2}px`
      }
    }));
  });
  return gridLines;
};
const lineLengthGridLines = highlights => {
  const gridLines = [];
  const gridSpacing = 100 / GRID_SIZE;
  for (let i = 0; i <= GRID_SIZE; i++) {
    const style = {
      paddingLeft: `${gridSpacing}%`
    };
    gridLines.push( /*#__PURE__*/React.createElement("div", {
      key: i
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: classnames('gridLine', highlights.indexOf(i) > -1 ? 'highlight' : '')
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: i < GRID_SIZE ? style : undefined
    }));
  }
  return gridLines;
};
const Grid = ({
  highlight,
  shouldCalcBreakoutGridLines,
  theme,
  containerElement,
  editorWidth,
  gridType,
  visible
}) => {
  const editorMaxWidth = theme.layoutMaxWidth;
  const gridLines = [...lineLengthGridLines(highlight), ...gutterGridLines(editorMaxWidth, editorWidth, highlight, shouldCalcBreakoutGridLines)];
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    React.createElement("div", {
      className: "gridParent"
    }, /*#__PURE__*/React.createElement("div", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: classnames('gridContainer', gridType),
      style: {
        height: `${containerElement.scrollHeight}px`,
        display: visible ? 'block' : 'none'
      },
      "data-testid": "gridContainer"
    }, gridLines))
  );
};
const ThemedGrid = withTheme(Grid);
const ContentComponent = ({
  api,
  editorView,
  options
}) => {
  var _widthState$width, _gridState$gridType;
  const {
    widthState,
    gridState
  } = useSharedPluginState(api, ['width', 'grid']);
  if (!gridState) {
    return null;
  }
  return /*#__PURE__*/React.createElement(ThemedGrid, {
    shouldCalcBreakoutGridLines: options && options.shouldCalcBreakoutGridLines,
    editorWidth: (_widthState$width = widthState === null || widthState === void 0 ? void 0 : widthState.width) !== null && _widthState$width !== void 0 ? _widthState$width : akEditorFullPageMaxWidth
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    ,
    containerElement: editorView.dom,
    visible: gridState.visible,
    gridType: (_gridState$gridType = gridState.gridType) !== null && _gridState$gridType !== void 0 ? _gridState$gridType : 'full',
    highlight: gridState.highlight
  });
};
const EMPTY_STATE = {
  visible: false,
  highlight: []
};
const gridPMPlugin = new SafePlugin({
  key,
  state: {
    init() {
      return EMPTY_STATE;
    },
    apply(tr, currentPluginState) {
      const nextPluginState = tr.getMeta(key);
      if (nextPluginState) {
        return nextPluginState;
      }
      return currentPluginState;
    }
  }
});

/**
 * Grid plugin to be added to an `EditorPresetBuilder` and used with `ComposableEditor`
 * from `@atlaskit/editor-core`.
 */
export const gridPlugin = ({
  config: options,
  api
}) => {
  return {
    name: 'grid',
    getSharedState(editorState) {
      if (!editorState) {
        return null;
      }
      return key.getState(editorState) || null;
    },
    actions: {
      displayGrid: createDisplayGrid
    },
    pmPlugins() {
      return [{
        name: 'grid',
        plugin: () => gridPMPlugin
      }];
    },
    contentComponent: ({
      editorView
    }) => /*#__PURE__*/React.createElement(ContentComponent, {
      editorView: editorView,
      options: options,
      api: api
    })
  };
};