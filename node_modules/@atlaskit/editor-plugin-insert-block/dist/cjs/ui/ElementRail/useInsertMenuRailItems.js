"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInsertMenuRailItems = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _createItems = require("../ToolbarInsertBlock/create-items");
var useInsertMenuRailItems = exports.useInsertMenuRailItems = function useInsertMenuRailItems(editorView, options, api) {
  var _useIntl = (0, _reactIntlNext.useIntl)(),
    formatMessage = _useIntl.formatMessage;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['hyperlink', 'date', 'imageUpload', 'mention', 'emoji', 'blockType', 'media', 'typeAhead', 'placeholderText']),
    dateState = _useSharedPluginState.dateState,
    hyperlinkState = _useSharedPluginState.hyperlinkState,
    imageUploadState = _useSharedPluginState.imageUploadState,
    mentionState = _useSharedPluginState.mentionState,
    emojiState = _useSharedPluginState.emojiState,
    blockTypeState = _useSharedPluginState.blockTypeState,
    mediaState = _useSharedPluginState.mediaState,
    typeAheadState = _useSharedPluginState.typeAheadState,
    placeholderTextState = _useSharedPluginState.placeholderTextState;
  var _useMemo = (0, _react.useMemo)(function () {
      var _ref;
      return (0, _createItems.createItems)({
        isTypeAheadAllowed: Boolean(typeAheadState === null || typeAheadState === void 0 ? void 0 : typeAheadState.isAllowed),
        tableSupported: !!editorView.state.schema.nodes.table,
        tableSelectorSupported: options.tableSelectorSupported && !!editorView.state.schema.nodes.table,
        mediaUploadsEnabled: (_ref = mediaState && mediaState.allowsUploads) !== null && _ref !== void 0 ? _ref : undefined,
        mediaSupported: !!mediaState,
        imageUploadSupported: !!(api !== null && api !== void 0 && api.imageUpload),
        imageUploadEnabled: imageUploadState === null || imageUploadState === void 0 ? void 0 : imageUploadState.enabled,
        mentionsSupported: !!(mentionState && mentionState.mentionProvider),
        mentionsDisabled: !!(mentionState && !mentionState.canInsertMention),
        actionSupported: !!editorView.state.schema.nodes.taskItem,
        decisionSupported: !!editorView.state.schema.nodes.decisionItem,
        linkSupported: !!hyperlinkState,
        linkDisabled: !hyperlinkState || !hyperlinkState.canInsertLink || !!hyperlinkState.activeLinkMark,
        emojiDisabled: !emojiState || !emojiState.emojiProvider,
        nativeStatusSupported: options.nativeStatusSupported,
        dateEnabled: !!dateState,
        placeholderTextEnabled: placeholderTextState && placeholderTextState.allowInserting,
        horizontalRuleEnabled: options.horizontalRuleEnabled,
        layoutSectionEnabled: Boolean(api === null || api === void 0 ? void 0 : api.layout),
        expandEnabled: !!options.allowExpand,
        showElementBrowserLink: options.showElementBrowserLink,
        emojiProvider: emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider,
        availableWrapperBlockTypes: blockTypeState && blockTypeState.availableWrapperBlockTypes,
        insertMenuItems: options.insertMenuItems,
        schema: editorView.state.schema,
        // numberOfButtons controls what items are returned and eventually display in the insert menu - but it relies on the main toolbar width which
        // is not easily available here. I've used 7 as it's the value used for most widths see toolbarSizeToButtons
        numberOfButtons: 7,
        formatMessage: formatMessage,
        isNewMenuEnabled: true
      });
    }, [api === null || api === void 0 ? void 0 : api.imageUpload, api === null || api === void 0 ? void 0 : api.layout, blockTypeState, dateState, editorView.state.schema, emojiState, formatMessage, hyperlinkState, imageUploadState === null || imageUploadState === void 0 ? void 0 : imageUploadState.enabled, mediaState, mentionState, options.allowExpand, options.horizontalRuleEnabled, options.insertMenuItems, options.nativeStatusSupported, options.showElementBrowserLink, options.tableSelectorSupported, placeholderTextState, typeAheadState === null || typeAheadState === void 0 ? void 0 : typeAheadState.isAllowed]),
    _useMemo2 = (0, _slicedToArray2.default)(_useMemo, 2),
    _ = _useMemo2[0],
    dropdownItems = _useMemo2[1];
  return dropdownItems;
};