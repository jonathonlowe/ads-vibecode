"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockInsertElementBrowser = void 0;
var _react = _interopRequireDefault(require("react"));
var _ui = require("@atlaskit/editor-common/ui");
var _InsertMenu = _interopRequireWildcard(require("../ElementBrowser/InsertMenu"));
var _dropdownButton = require("./dropdown-button");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// This determines how the popup should fit. We prefer the insert menu
// opening on the bottom as we have a search bar and should only open on
// top if there is more than sufficient room.
var FIT_HEIGHT_BUFFER = 100;
var BlockInsertElementBrowser = exports.BlockInsertElementBrowser = function BlockInsertElementBrowser(props) {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.open && /*#__PURE__*/_react.default.createElement(_ui.Popup, {
    target: props.plusButtonRef,
    fitHeight: _InsertMenu.DEFAULT_HEIGHT + FIT_HEIGHT_BUFFER,
    fitWidth: 350,
    offset: [0, 3],
    mountTo: props.popupsMountPoint,
    boundariesElement: props.popupsBoundariesElement,
    scrollableElement: props.popupsScrollableElement,
    preventOverflow: true,
    alignX: "right"
  }, /*#__PURE__*/_react.default.createElement(_InsertMenu.default, {
    editorView: props.editorView,
    dropdownItems: props.items,
    onInsert: props.onInsert,
    toggleVisiblity: props.togglePlusMenuVisibility,
    showElementBrowserLink: props.showElementBrowserLink,
    pluginInjectionApi: props.pluginInjectionApi,
    isFullPageAppearance: props.isFullPageAppearance
  })), /*#__PURE__*/_react.default.createElement(_dropdownButton.DropDownButton, {
    "aria-expanded": props.open,
    "aria-haspopup": true,
    handleRef: props.onRef,
    selected: props.open,
    disabled: props.disabled,
    onClick: props.onClick,
    onKeyDown: props.onKeyDown,
    spacing: props.spacing,
    label: props.label,
    "aria-keyshortcuts": "/"
  }));
};