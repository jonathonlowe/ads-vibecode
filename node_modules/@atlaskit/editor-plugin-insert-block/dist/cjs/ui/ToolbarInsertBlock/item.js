"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tableSelector = exports.table = exports.status = exports.placeholder = exports.panel = exports.more = exports.mention = exports.media = exports.link = exports.layout = exports.imageUpload = exports.horizontalrule = exports.expand = exports.emoji = exports.decision = exports.date = exports.codeblock = exports.blockquote = exports.action = void 0;
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@emotion/react");
var _memoizeOne = _interopRequireDefault(require("memoize-one"));
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _shortcut = require("@atlaskit/editor-shared-styles/shortcut");
var _fieldText = _interopRequireDefault(require("@atlaskit/icon-lab/core/field-text"));
var _lozenge = _interopRequireDefault(require("@atlaskit/icon-lab/core/lozenge"));
var _angleBracketsEditorCode = _interopRequireDefault(require("@atlaskit/icon/core/migration/angle-brackets--editor-code"));
var _calendarEditorDate = _interopRequireDefault(require("@atlaskit/icon/core/migration/calendar--editor-date"));
var _decisionEditorDecision = _interopRequireDefault(require("@atlaskit/icon/core/migration/decision--editor-decision"));
var _emojiEditorEmoji = _interopRequireDefault(require("@atlaskit/icon/core/migration/emoji--editor-emoji"));
var _gridEditorTable = _interopRequireDefault(require("@atlaskit/icon/core/migration/grid--editor-table"));
var _imageEditorImage = _interopRequireDefault(require("@atlaskit/icon/core/migration/image--editor-image"));
var _informationEditorInfo = _interopRequireDefault(require("@atlaskit/icon/core/migration/information--editor-info"));
var _layoutTwoColumnsEditorLayoutTwoEqual = _interopRequireDefault(require("@atlaskit/icon/core/migration/layout-two-columns--editor-layout-two-equal"));
var _linkEditorLink = _interopRequireDefault(require("@atlaskit/icon/core/migration/link--editor-link"));
var _mentionEditorMention = _interopRequireDefault(require("@atlaskit/icon/core/migration/mention--editor-mention"));
var _minusEditorHorizontalRule = _interopRequireDefault(require("@atlaskit/icon/core/migration/minus--editor-horizontal-rule"));
var _quotationMarkQuote = _interopRequireDefault(require("@atlaskit/icon/core/migration/quotation-mark--quote"));
var _showMoreHorizontalEditorMore = _interopRequireDefault(require("@atlaskit/icon/core/migration/show-more-horizontal--editor-more"));
var _task = _interopRequireDefault(require("@atlaskit/icon/core/task"));
var _task2 = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/task"));
var _text = _interopRequireDefault(require("@atlaskit/icon/glyph/media-services/text"));
var _status = _interopRequireDefault(require("@atlaskit/icon/glyph/status"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _chevronRightChevronRightCircle = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-right--chevron-right-circle"));
var _shallowEquals = require("./shallow-equals");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var from = function from(init) {
  return {
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    value: {
      name: init.name
    },
    elemBefore: (0, _react2.jsx)(init.Icon, {
      label: "",
      color: "currentColor",
      spacing: "spacious"
    }),
    elemAfter: init.shortcut ?
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: _shortcut.shortcutStyle
    }, init.shortcut) : undefined,
    'aria-label': init.shortcut ? init.content + ' ' + init.shortcut : init.content,
    'aria-haspopup': init['aria-haspopup'],
    'aria-keyshortcuts': init['aria-keyshortcuts'],
    shortcut: init.shortcut,
    isDisabled: init.disabled
  };
};
var mem = function mem(fn) {
  return (0, _memoizeOne.default)(fn, _shallowEquals.shallowEquals);
};
var action = exports.action = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'action',
    shortcut: '[]',
    Icon: function Icon() {
      return (0, _react2.jsx)(_task.default, {
        label: "",
        color: "currentColor",
        spacing: "spacious",
        LEGACY_fallbackIcon: _task2.default
      });
    },
    'aria-keyshortcuts': '[ ] Space'
  });
});
var link = exports.link = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'link',
    shortcut: (0, _keymaps.tooltip)(_keymaps.addLink),
    Icon: _linkEditorLink.default,
    'aria-haspopup': init['aria-haspopup'],
    'aria-keyshortcuts': (0, _keymaps.getAriaKeyshortcuts)(_keymaps.addLink)
  });
});
var media = exports.media = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'media',
    Icon: _imageEditorImage.default
  });
});
var imageUpload = exports.imageUpload = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'image upload',
    Icon: _imageEditorImage.default
  });
});
var mention = exports.mention = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'mention',
    Icon: _mentionEditorMention.default,
    shortcut: '@',
    'aria-haspopup': init['aria-haspopup'],
    'aria-keyshortcuts': 'Shift+2 Space'
  });
});
var emoji = exports.emoji = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'emoji',
    Icon: _emojiEditorEmoji.default,
    shortcut: ':',
    'aria-haspopup': init['aria-haspopup'],
    'aria-keyshortcuts': 'Shift+;'
  });
});
var table = exports.table = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'table',
    Icon: _gridEditorTable.default,
    shortcut: (0, _keymaps.tooltip)(_keymaps.toggleTable),
    'aria-keyshortcuts': (0, _keymaps.getAriaKeyshortcuts)(_keymaps.toggleTable)
  });
});
var tableSelector = exports.tableSelector = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'table selector',
    Icon: function Icon() {
      return (0, _react2.jsx)(_chevronDown.default, {
        label: "",
        color: "currentColor"
      });
    }
  });
});
var layout = exports.layout = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'layout',
    Icon: _layoutTwoColumnsEditorLayoutTwoEqual.default
  });
});
var codeblock = exports.codeblock = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'codeblock',
    Icon: _angleBracketsEditorCode.default,
    shortcut: init.shortcut,
    'aria-keyshortcuts': (0, _keymaps.getAriaKeyshortcuts)(init.shortcut)
  });
});
var panel = exports.panel = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'panel',
    Icon: _informationEditorInfo.default,
    shortcut: init.shortcut,
    'aria-keyshortcuts': (0, _keymaps.getAriaKeyshortcuts)(init.shortcut)
  });
});
var blockquote = exports.blockquote = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'blockquote',
    Icon: _quotationMarkQuote.default,
    shortcut: init.shortcut,
    'aria-keyshortcuts': 'Shift+. Space'
  });
});
var decision = exports.decision = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'decision',
    Icon: _decisionEditorDecision.default,
    shortcut: '<>',
    'aria-keyshortcuts': 'Shift+, Shift+. Space'
  });
});
var horizontalrule = exports.horizontalrule = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'horizontalrule',
    Icon: _minusEditorHorizontalRule.default,
    shortcut: '---',
    'aria-keyshortcuts': '- - -'
  });
});
var expand = exports.expand = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'expand',
    Icon: _chevronRightChevronRightCircle.default
  });
});
var date = exports.date = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'date',
    Icon: _calendarEditorDate.default,
    shortcut: '//',
    'aria-keyshortcuts': '/ / Enter'
  });
});
var placeholder = exports.placeholder = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'placeholder text',
    Icon: function Icon() {
      return (0, _react2.jsx)(_fieldText.default, {
        label: "",
        spacing: "spacious",
        color: "currentColor",
        LEGACY_fallbackIcon: _text.default
      });
    }
  });
});
var status = exports.status = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'status',
    Icon: function Icon() {
      return (0, _react2.jsx)(_lozenge.default, {
        label: "",
        color: "currentColor",
        spacing: "spacious",
        LEGACY_fallbackIcon: _status.default
      });
    }
  });
});
var more = exports.more = mem(function (init) {
  return from({
    content: init.content,
    tooltipDescription: init.tooltipDescription,
    disabled: init.disabled,
    name: 'macro',
    Icon: function Icon() {
      return (0, _react2.jsx)(_showMoreHorizontalEditorMore.default, {
        label: "",
        color: "currentColor"
      });
    }
  });
});