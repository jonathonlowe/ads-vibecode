"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toolbarSizeToButtons = exports.insertBlockPlugin = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _elementBrowser = require("@atlaskit/editor-common/element-browser");
var _hooks = require("@atlaskit/editor-common/hooks");
var _providerFactory = require("@atlaskit/editor-common/provider-factory");
var _types = require("@atlaskit/editor-common/types");
var _consts = require("@atlaskit/editor-plugin-block-type/consts");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _toggleInsertBlock = require("./pm-plugins/toggleInsertBlock");
var _ToolbarInsertBlock = _interopRequireDefault(require("./ui/ToolbarInsertBlock"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default

var toolbarSizeToButtons = exports.toolbarSizeToButtons = function toolbarSizeToButtons(toolbarSize, appearance) {
  // Different button numbers for full-page to better match full page toolbar breakpoints
  if (appearance === 'full-page' && (0, _platformFeatureFlags.fg)('platform_editor_toolbar_responsive_fixes')) {
    switch (toolbarSize) {
      case _types.ToolbarSize.XXL:
      case _types.ToolbarSize.XL:
      case _types.ToolbarSize.L:
        return 7;
      case _types.ToolbarSize.M:
        return 3;
      default:
        return 0;
    }
  }
  if ((0, _platformFeatureFlags.fg)('platform_editor_toolbar_responsive_fixes')) {
    switch (toolbarSize) {
      case _types.ToolbarSize.XXL:
      case _types.ToolbarSize.XL:
        return 7;
      case _types.ToolbarSize.L:
        return 5;
      case _types.ToolbarSize.M:
      case _types.ToolbarSize.S:
        return 2;
      default:
        return 0;
    }
  } else {
    switch (toolbarSize) {
      case _types.ToolbarSize.XXL:
      case _types.ToolbarSize.XL:
      case _types.ToolbarSize.L:
      case _types.ToolbarSize.M:
        return 7;
      case _types.ToolbarSize.S:
        return 2;
      default:
        return 0;
    }
  }
};

/**
 * Wrapper over insertBlockTypeWithAnalytics to autobind toolbar input method
 * @param name Block name
 */
function handleInsertBlockType(insertCodeBlock, insertPanel, insertBlockQuote) {
  return function (name) {
    if (name === _consts.CODE_BLOCK.name && insertCodeBlock) {
      return insertCodeBlock(_analytics.INPUT_METHOD.TOOLBAR);
    }
    if (name === _consts.PANEL.name && insertPanel) {
      return insertPanel(_analytics.INPUT_METHOD.TOOLBAR);
    }
    if (name === _consts.BLOCK_QUOTE.name && insertBlockQuote) {
      return insertBlockQuote(_analytics.INPUT_METHOD.INSERT_MENU);
    }
    return function () {
      return false;
    };
  };
}
function delayUntilIdle(cb) {
  if (typeof window === 'undefined') {
    return;
  }
  // eslint-disable-next-line compat/compat
  if (window.requestIdleCallback !== undefined) {
    // eslint-disable-next-line compat/compat
    return window.requestIdleCallback(function () {
      return cb();
    }, {
      timeout: 500
    });
  }
  return window.requestAnimationFrame(function () {
    return cb();
  });
}
var insertBlockPlugin = exports.insertBlockPlugin = function insertBlockPlugin(_ref) {
  var _api$primaryToolbar;
  var _ref$config = _ref.config,
    options = _ref$config === void 0 ? {} : _ref$config,
    api = _ref.api;
  var primaryToolbarComponent = function primaryToolbarComponent(_ref2) {
    var editorView = _ref2.editorView,
      editorActions = _ref2.editorActions,
      dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
      providerFactory = _ref2.providerFactory,
      popupsMountPoint = _ref2.popupsMountPoint,
      popupsBoundariesElement = _ref2.popupsBoundariesElement,
      popupsScrollableElement = _ref2.popupsScrollableElement,
      toolbarSize = _ref2.toolbarSize,
      disabled = _ref2.disabled,
      isToolbarReducedSpacing = _ref2.isToolbarReducedSpacing,
      isLastItem = _ref2.isLastItem;
    var renderNode = function renderNode(providers) {
      return /*#__PURE__*/_react.default.createElement(ToolbarInsertBlockWithInjectionApi, {
        pluginInjectionApi: api,
        editorView: editorView,
        editorActions: editorActions,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        providerFactory: providerFactory,
        popupsMountPoint: popupsMountPoint,
        popupsBoundariesElement: popupsBoundariesElement,
        popupsScrollableElement: popupsScrollableElement,
        toolbarSize: toolbarSize,
        disabled: disabled,
        isToolbarReducedSpacing: isToolbarReducedSpacing,
        isLastItem: isLastItem,
        providers: providers,
        options: options,
        appearance: options.appearance
      });
    };
    return /*#__PURE__*/_react.default.createElement(_providerFactory.WithProviders, {
      providerFactory: providerFactory,
      providers: ['emojiProvider'],
      renderNode: renderNode
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'insertBlock',
    component: primaryToolbarComponent
  });
  var plugin = {
    name: 'insertBlock',
    actions: {
      toggleAdditionalMenu: function toggleAdditionalMenu() {
        var _api$core;
        api === null || api === void 0 || (_api$core = api.core) === null || _api$core === void 0 || _api$core.actions.execute(function (_ref3) {
          var tr = _ref3.tr;
          return tr.setMeta(_toggleInsertBlock.toggleInsertBlockPmKey, true);
        });
      }
    },
    getSharedState: function getSharedState(editorState) {
      var _options$appearance;
      if (!editorState || !['full-page', 'full-width'].includes((_options$appearance = options.appearance) !== null && _options$appearance !== void 0 ? _options$appearance : '')) {
        return;
      }
      var toggleInsertBlockPluginState = _toggleInsertBlock.toggleInsertBlockPmKey.getState(editorState);
      return {
        showElementBrowser: (toggleInsertBlockPluginState === null || toggleInsertBlockPluginState === void 0 ? void 0 : toggleInsertBlockPluginState.showElementBrowser) || false
      };
    },
    usePluginHook: function usePluginHook() {
      (0, _react.useEffect)(function () {
        // This is to optimise the UI so that when the user first clicks on the insert
        // menu it opens instantly. As we're delaying the loading this won't affect the
        // initial editor rendering metrics.
        delayUntilIdle(function () {
          _elementBrowser.ElementBrowser.preload();
        });
      }, []);
    },
    pmPlugins: function pmPlugins() {
      var _options$appearance2;
      if (!['full-page', 'full-width'].includes((_options$appearance2 = options.appearance) !== null && _options$appearance2 !== void 0 ? _options$appearance2 : '')) {
        [];
      }
      var plugins = [];
      plugins.push({
        name: 'toggleInsertBlockPmPlugin',
        plugin: function plugin() {
          return (0, _toggleInsertBlock.toggleInsertBlockPmPlugin)();
        }
      });
      return plugins;
    },
    pluginsOptions: {},
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
  return plugin;
};
function ToolbarInsertBlockWithInjectionApi(_ref4) {
  var _ref5, _pluginInjectionApi$i, _pluginInjectionApi$c2, _pluginInjectionApi$p, _pluginInjectionApi$b, _pluginInjectionApi$e;
  var editorView = _ref4.editorView,
    editorActions = _ref4.editorActions,
    dispatchAnalyticsEvent = _ref4.dispatchAnalyticsEvent,
    popupsMountPoint = _ref4.popupsMountPoint,
    popupsBoundariesElement = _ref4.popupsBoundariesElement,
    popupsScrollableElement = _ref4.popupsScrollableElement,
    toolbarSize = _ref4.toolbarSize,
    disabled = _ref4.disabled,
    isToolbarReducedSpacing = _ref4.isToolbarReducedSpacing,
    isLastItem = _ref4.isLastItem,
    providers = _ref4.providers,
    pluginInjectionApi = _ref4.pluginInjectionApi,
    options = _ref4.options,
    appearance = _ref4.appearance;
  var buttons = toolbarSizeToButtons(toolbarSize, appearance);
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['hyperlink', 'date', 'imageUpload', 'mention', 'emoji', 'blockType', 'media', 'typeAhead', 'placeholderText', 'insertBlock', 'connectivity']),
    dateState = _useSharedPluginState.dateState,
    hyperlinkState = _useSharedPluginState.hyperlinkState,
    imageUploadState = _useSharedPluginState.imageUploadState,
    mentionState = _useSharedPluginState.mentionState,
    emojiState = _useSharedPluginState.emojiState,
    blockTypeState = _useSharedPluginState.blockTypeState,
    mediaState = _useSharedPluginState.mediaState,
    typeAheadState = _useSharedPluginState.typeAheadState,
    placeholderTextState = _useSharedPluginState.placeholderTextState,
    insertBlockState = _useSharedPluginState.insertBlockState,
    connectivityState = _useSharedPluginState.connectivityState;
  var getEmojiProvider = function getEmojiProvider() {
    if (emojiState !== null && emojiState !== void 0 && emojiState.emojiProvider) {
      return Promise.resolve(emojiState === null || emojiState === void 0 ? void 0 : emojiState.emojiProvider);
    }
  };
  var emojiProvider = getEmojiProvider();
  var onShowMediaPicker = function onShowMediaPicker(mountInfo) {
    if (!mediaState) {
      return;
    }
    if ((0, _platformFeatureFlags.fg)('platform_editor_add_media_from_url_rollout')) {
      var _pluginInjectionApi$c, _pluginInjectionApi$m;
      pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c = pluginInjectionApi.core) === null || _pluginInjectionApi$c === void 0 || _pluginInjectionApi$c.actions.execute(pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$m = pluginInjectionApi.mediaInsert) === null || _pluginInjectionApi$m === void 0 ? void 0 : _pluginInjectionApi$m.commands.showMediaInsertPopup(mountInfo));
    } else {
      mediaState.showMediaPicker();
    }
  };
  return /*#__PURE__*/_react.default.createElement(_ToolbarInsertBlock.default, {
    showElementBrowser: (insertBlockState === null || insertBlockState === void 0 ? void 0 : insertBlockState.showElementBrowser) || false,
    pluginInjectionApi: pluginInjectionApi,
    buttons: buttons,
    isReducedSpacing: isToolbarReducedSpacing,
    isDisabled: disabled,
    isTypeAheadAllowed: Boolean(typeAheadState === null || typeAheadState === void 0 ? void 0 : typeAheadState.isAllowed),
    editorView: editorView,
    tableSupported: !!editorView.state.schema.nodes.table,
    tableSelectorSupported: options.tableSelectorSupported && !!editorView.state.schema.nodes.table,
    actionSupported: !!editorView.state.schema.nodes.taskItem,
    mentionsSupported: !!(mentionState && mentionState.mentionProvider),
    mentionsDisabled: !!(mentionState && !mentionState.canInsertMention),
    decisionSupported: !!editorView.state.schema.nodes.decisionItem,
    dateEnabled: !!dateState,
    placeholderTextEnabled: placeholderTextState && placeholderTextState.allowInserting,
    layoutSectionEnabled: Boolean(pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : pluginInjectionApi.layout),
    expandEnabled: !!options.allowExpand,
    mediaUploadsEnabled: (_ref5 = mediaState && mediaState.allowsUploads) !== null && _ref5 !== void 0 ? _ref5 : undefined,
    onShowMediaPicker: onShowMediaPicker,
    mediaSupported: !!mediaState,
    isEditorOffline: (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
    imageUploadSupported: !!(pluginInjectionApi !== null && pluginInjectionApi !== void 0 && pluginInjectionApi.imageUpload),
    imageUploadEnabled: imageUploadState === null || imageUploadState === void 0 ? void 0 : imageUploadState.enabled,
    handleImageUpload: pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$i = pluginInjectionApi.imageUpload) === null || _pluginInjectionApi$i === void 0 ? void 0 : _pluginInjectionApi$i.actions.startUpload,
    availableWrapperBlockTypes: blockTypeState && blockTypeState.availableWrapperBlockTypes,
    linkSupported: !!hyperlinkState,
    linkDisabled: !hyperlinkState || !hyperlinkState.canInsertLink || !!hyperlinkState.activeLinkMark,
    emojiDisabled: !emojiState || !emojiProvider,
    emojiProvider: emojiProvider,
    nativeStatusSupported: options.nativeStatusSupported,
    horizontalRuleEnabled: options.horizontalRuleEnabled,
    onInsertBlockType: handleInsertBlockType(pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c2 = pluginInjectionApi.codeBlock) === null || _pluginInjectionApi$c2 === void 0 ? void 0 : _pluginInjectionApi$c2.actions.insertCodeBlock, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$p = pluginInjectionApi.panel) === null || _pluginInjectionApi$p === void 0 ? void 0 : _pluginInjectionApi$p.actions.insertPanel, pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$b = pluginInjectionApi.blockType) === null || _pluginInjectionApi$b === void 0 ? void 0 : _pluginInjectionApi$b.actions.insertBlockQuote),
    onInsertMacroFromMacroBrowser: pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$e = pluginInjectionApi.extension) === null || _pluginInjectionApi$e === void 0 ? void 0 : _pluginInjectionApi$e.actions.insertMacroFromMacroBrowser,
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    insertMenuItems: options.insertMenuItems,
    editorActions: editorActions,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    showElementBrowserLink: options.showElementBrowserLink,
    showSeparator: !isLastItem && toolbarSize <= _types.ToolbarSize.S,
    editorAppearance: options.appearance
  });
}