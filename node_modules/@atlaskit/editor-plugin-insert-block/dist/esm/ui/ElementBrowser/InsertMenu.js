import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { useCallback, useContext, useLayoutEffect, useMemo, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { CellMeasurerCache } from 'react-virtualized/dist/commonjs/CellMeasurer';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { ELEMENT_ITEM_HEIGHT, ElementBrowser } from '@atlaskit/editor-common/element-browser';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { IconCode, IconDate, IconDecision, IconDivider, IconExpand, IconPanel, IconQuote, IconStatus } from '@atlaskit/editor-common/quick-insert';
import { OutsideClickTargetRefContext, withReactEditorViewOuterListeners as withOuterListeners } from '@atlaskit/editor-common/ui-react';
// AFP-2532 TODO: Fix automatic suppressions below
// eslint-disable-next-line @atlassian/tangerine/import/entry-points
import { fg } from '@atlaskit/platform-feature-flags';
import { borderRadius } from '@atlaskit/theme';
import { N0, N30A, N60A } from '@atlaskit/theme/colors';
export var DEFAULT_HEIGHT = 560;
var InsertMenu = function InsertMenu(_ref) {
  var _pluginInjectionApi$q6, _pluginInjectionApi$q7;
  var editorView = _ref.editorView,
    dropdownItems = _ref.dropdownItems,
    showElementBrowserLink = _ref.showElementBrowserLink,
    onInsert = _ref.onInsert,
    toggleVisiblity = _ref.toggleVisiblity,
    pluginInjectionApi = _ref.pluginInjectionApi,
    isFullPageAppearance = _ref.isFullPageAppearance;
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    itemCount = _useState2[0],
    setItemCount = _useState2[1];
  var _useState3 = useState(DEFAULT_HEIGHT),
    _useState4 = _slicedToArray(_useState3, 2),
    height = _useState4[0],
    setHeight = _useState4[1];
  var cache = useMemo(function () {
    return new CellMeasurerCache({
      fixedWidth: true,
      defaultHeight: ELEMENT_ITEM_HEIGHT,
      minHeight: ELEMENT_ITEM_HEIGHT
    });
  }, []);
  useLayoutEffect(function () {
    // Figure based on visuals to exclude the searchbar, padding/margin, and the ViewMore item.
    var EXTRA_SPACE_EXCLUDING_ELEMENTLIST = 128;
    var totalItemHeight = _toConsumableArray(Array(itemCount)).reduce(function (sum, _, index) {
      return sum + cache.rowHeight({
        index: index
      });
    }, 0) + EXTRA_SPACE_EXCLUDING_ELEMENTLIST;
    if (itemCount > 0 && totalItemHeight < DEFAULT_HEIGHT) {
      setHeight(totalItemHeight);
    } else {
      setHeight(DEFAULT_HEIGHT);
    }
  }, [cache, itemCount]);
  var transform = useCallback(function (item) {
    return {
      title: item.content,
      description: item.tooltipDescription,
      keyshortcut: item.shortcut,
      icon: function icon() {
        return getSvgIconForItem({
          name: item.value.name
        }) || item.elemBefore;
      },
      /**
       * @note This transformed items action is only used when a quick insert item has been
       * called from the quick insert menu and a search has not been performed.
       */
      action: function action() {
        return onInsert({
          item: item
        });
      },
      // "insertInsertMenuItem" expects these 2 properties.
      onClick: item.onClick,
      value: item.value
    };
  }, [onInsert]);
  var quickInsertDropdownItems = dropdownItems.map(transform);
  var viewMoreItem = showElementBrowserLink ? quickInsertDropdownItems.pop() : undefined;
  var onInsertItem = useCallback(function (item) {
    var _pluginInjectionApi$q;
    toggleVisiblity();
    if (!editorView.hasFocus()) {
      editorView.focus();
    }
    pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$q = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q === void 0 || _pluginInjectionApi$q.actions.insertItem(item, INPUT_METHOD.TOOLBAR)(editorView.state, editorView.dispatch);
  }, [editorView, toggleVisiblity, pluginInjectionApi]);
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['connectivity']),
    connectivityState = _useSharedPluginState.connectivityState;
  var getItems = useCallback(function (query, category) {
    var result;
    /**
     * @warning The results if there is a query are not the same as the results if there is no query.
     * For example: If you have a typed panel and then select the panel item then it will call a different action
     * than is specified on the editor plugins quick insert
     * @see above transform function for more details.
     */
    if (query) {
      var _pluginInjectionApi$q2, _pluginInjectionApi$q3;
      result = (_pluginInjectionApi$q2 = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$q3 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q3 === void 0 || (_pluginInjectionApi$q3 = _pluginInjectionApi$q3.actions.getSuggestions({
        query: query,
        category: category
      })) === null || _pluginInjectionApi$q3 === void 0 ? void 0 : _pluginInjectionApi$q3.map(function (item) {
        return (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && item.isDisabledOffline ? _objectSpread(_objectSpread({}, item), {}, {
          isDisabled: true
        }) : item;
      })) !== null && _pluginInjectionApi$q2 !== void 0 ? _pluginInjectionApi$q2 : [];
    } else {
      var _pluginInjectionApi$q4, _pluginInjectionApi$q5;
      var featuredQuickInsertSuggestions = (_pluginInjectionApi$q4 = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$q5 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q5 === void 0 || (_pluginInjectionApi$q5 = _pluginInjectionApi$q5.actions.getSuggestions({
        category: category,
        featuredItems: true
      })) === null || _pluginInjectionApi$q5 === void 0 ? void 0 : _pluginInjectionApi$q5.map(function (item) {
        return (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && item.isDisabledOffline ? _objectSpread(_objectSpread({}, item), {}, {
          isDisabled: true
        }) : item;
      })) !== null && _pluginInjectionApi$q4 !== void 0 ? _pluginInjectionApi$q4 : [];
      result = quickInsertDropdownItems.concat(featuredQuickInsertSuggestions);
    }
    setItemCount(result.length);
    return result;
  }, [pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$q6 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q6 === void 0 ? void 0 : _pluginInjectionApi$q6.actions, quickInsertDropdownItems, connectivityState]);
  var emptyStateHandler = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$q7 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q7 === void 0 || (_pluginInjectionApi$q7 = _pluginInjectionApi$q7.sharedState.currentState()) === null || _pluginInjectionApi$q7 === void 0 ? void 0 : _pluginInjectionApi$q7.emptyStateHandler;
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    jsx("div", {
      css: insertMenuWrapper(height, isFullPageAppearance)
    }, jsx(ElementBrowserWrapper, {
      handleClickOutside: toggleVisiblity,
      handleEscapeKeydown: toggleVisiblity,
      closeOnTab: !fg('editor_a11y_tab_does_not_close_menus')
    }, jsx(ElementBrowser, {
      mode: "inline",
      getItems: getItems,
      emptyStateHandler: emptyStateHandler,
      onInsertItem: onInsertItem,
      showSearch: true,
      showCategories: false
      // On page resize we want the InlineElementBrowser to show updated tools/overflow items
      ,
      key: quickInsertDropdownItems.length,
      viewMoreItem: viewMoreItem,
      cache: cache
    })))
  );
};
var getSvgIconForItem = function getSvgIconForItem(_ref2) {
  var name = _ref2.name;
  var Icon = {
    codeblock: IconCode,
    panel: IconPanel,
    blockquote: IconQuote,
    decision: IconDecision,
    horizontalrule: IconDivider,
    expand: IconExpand,
    date: IconDate,
    status: IconStatus
  }[name];
  return Icon ? jsx(Icon, {
    label: ""
  }) : undefined;
};
var insertMenuWrapper = function insertMenuWrapper(height, isFullPageAppearance) {
  return css({
    display: 'flex',
    flexDirection: 'column',
    width: '320px',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    height: "".concat(height, "px"),
    backgroundColor: "".concat("var(--ds-surface-overlay, ".concat(N0, ")")),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    borderRadius: "".concat(borderRadius(), "px"),
    boxShadow: "".concat("var(--ds-shadow-overlay, ".concat("0 0 0 1px ".concat(N30A, ",\n    0 2px 1px ").concat(N30A, ",\n    0 0 20px -6px ").concat(N60A), ")"))
  });
};
var flexWrapperStyles = css({
  display: 'flex',
  flex: 1,
  boxSizing: 'border-box',
  overflow: 'hidden'
});
var FlexWrapper = function FlexWrapper(props) {
  var setOutsideClickTargetRef = useContext(OutsideClickTargetRefContext);
  var children = props.children,
    divProps = _objectWithoutProperties(props, _excluded);
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx("div", _extends({
      ref: setOutsideClickTargetRef,
      css: flexWrapperStyles
    }, divProps), children)
  );
};
var ElementBrowserWrapper = withOuterListeners(FlexWrapper);
export default InsertMenu;