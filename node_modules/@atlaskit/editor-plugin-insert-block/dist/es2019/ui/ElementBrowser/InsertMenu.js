import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import { useCallback, useContext, useLayoutEffect, useMemo, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { CellMeasurerCache } from 'react-virtualized/dist/commonjs/CellMeasurer';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { ELEMENT_ITEM_HEIGHT, ElementBrowser } from '@atlaskit/editor-common/element-browser';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { IconCode, IconDate, IconDecision, IconDivider, IconExpand, IconPanel, IconQuote, IconStatus } from '@atlaskit/editor-common/quick-insert';
import { OutsideClickTargetRefContext, withReactEditorViewOuterListeners as withOuterListeners } from '@atlaskit/editor-common/ui-react';
// AFP-2532 TODO: Fix automatic suppressions below
// eslint-disable-next-line @atlassian/tangerine/import/entry-points
import { fg } from '@atlaskit/platform-feature-flags';
import { borderRadius } from '@atlaskit/theme';
import { N0, N30A, N60A } from '@atlaskit/theme/colors';
export const DEFAULT_HEIGHT = 560;
const InsertMenu = ({
  editorView,
  dropdownItems,
  showElementBrowserLink,
  onInsert,
  toggleVisiblity,
  pluginInjectionApi,
  isFullPageAppearance
}) => {
  var _pluginInjectionApi$q8, _pluginInjectionApi$q9, _pluginInjectionApi$q10;
  const [itemCount, setItemCount] = useState(0);
  const [height, setHeight] = useState(DEFAULT_HEIGHT);
  const cache = useMemo(() => {
    return new CellMeasurerCache({
      fixedWidth: true,
      defaultHeight: ELEMENT_ITEM_HEIGHT,
      minHeight: ELEMENT_ITEM_HEIGHT
    });
  }, []);
  useLayoutEffect(() => {
    // Figure based on visuals to exclude the searchbar, padding/margin, and the ViewMore item.
    const EXTRA_SPACE_EXCLUDING_ELEMENTLIST = 128;
    const totalItemHeight = [...Array(itemCount)].reduce((sum, _, index) => sum + cache.rowHeight({
      index
    }), 0) + EXTRA_SPACE_EXCLUDING_ELEMENTLIST;
    if (itemCount > 0 && totalItemHeight < DEFAULT_HEIGHT) {
      setHeight(totalItemHeight);
    } else {
      setHeight(DEFAULT_HEIGHT);
    }
  }, [cache, itemCount]);
  const transform = useCallback(item => ({
    title: item.content,
    description: item.tooltipDescription,
    keyshortcut: item.shortcut,
    icon: () => getSvgIconForItem({
      name: item.value.name
    }) || item.elemBefore,
    /**
     * @note This transformed items action is only used when a quick insert item has been
     * called from the quick insert menu and a search has not been performed.
     */
    action: () => onInsert({
      item
    }),
    // "insertInsertMenuItem" expects these 2 properties.
    onClick: item.onClick,
    value: item.value
  }), [onInsert]);
  const quickInsertDropdownItems = dropdownItems.map(transform);
  const viewMoreItem = showElementBrowserLink ? quickInsertDropdownItems.pop() : undefined;
  const onInsertItem = useCallback(item => {
    var _pluginInjectionApi$q;
    toggleVisiblity();
    if (!editorView.hasFocus()) {
      editorView.focus();
    }
    pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$q = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q === void 0 ? void 0 : _pluginInjectionApi$q.actions.insertItem(item, INPUT_METHOD.TOOLBAR)(editorView.state, editorView.dispatch);
  }, [editorView, toggleVisiblity, pluginInjectionApi]);
  const {
    connectivityState
  } = useSharedPluginState(pluginInjectionApi, ['connectivity']);
  const getItems = useCallback((query, category) => {
    let result;
    /**
     * @warning The results if there is a query are not the same as the results if there is no query.
     * For example: If you have a typed panel and then select the panel item then it will call a different action
     * than is specified on the editor plugins quick insert
     * @see above transform function for more details.
     */
    if (query) {
      var _pluginInjectionApi$q2, _pluginInjectionApi$q3, _pluginInjectionApi$q4;
      result = (_pluginInjectionApi$q2 = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$q3 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q3 === void 0 ? void 0 : (_pluginInjectionApi$q4 = _pluginInjectionApi$q3.actions.getSuggestions({
        query,
        category
      })) === null || _pluginInjectionApi$q4 === void 0 ? void 0 : _pluginInjectionApi$q4.map(item => (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && item.isDisabledOffline ? {
        ...item,
        isDisabled: true
      } : item)) !== null && _pluginInjectionApi$q2 !== void 0 ? _pluginInjectionApi$q2 : [];
    } else {
      var _pluginInjectionApi$q5, _pluginInjectionApi$q6, _pluginInjectionApi$q7;
      const featuredQuickInsertSuggestions = (_pluginInjectionApi$q5 = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$q6 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q6 === void 0 ? void 0 : (_pluginInjectionApi$q7 = _pluginInjectionApi$q6.actions.getSuggestions({
        category,
        featuredItems: true
      })) === null || _pluginInjectionApi$q7 === void 0 ? void 0 : _pluginInjectionApi$q7.map(item => (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && item.isDisabledOffline ? {
        ...item,
        isDisabled: true
      } : item)) !== null && _pluginInjectionApi$q5 !== void 0 ? _pluginInjectionApi$q5 : [];
      result = quickInsertDropdownItems.concat(featuredQuickInsertSuggestions);
    }
    setItemCount(result.length);
    return result;
  }, [pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$q8 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q8 === void 0 ? void 0 : _pluginInjectionApi$q8.actions, quickInsertDropdownItems, connectivityState]);
  const emptyStateHandler = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$q9 = pluginInjectionApi.quickInsert) === null || _pluginInjectionApi$q9 === void 0 ? void 0 : (_pluginInjectionApi$q10 = _pluginInjectionApi$q9.sharedState.currentState()) === null || _pluginInjectionApi$q10 === void 0 ? void 0 : _pluginInjectionApi$q10.emptyStateHandler;
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    jsx("div", {
      css: insertMenuWrapper(height, isFullPageAppearance)
    }, jsx(ElementBrowserWrapper, {
      handleClickOutside: toggleVisiblity,
      handleEscapeKeydown: toggleVisiblity,
      closeOnTab: !fg('editor_a11y_tab_does_not_close_menus')
    }, jsx(ElementBrowser, {
      mode: "inline",
      getItems: getItems,
      emptyStateHandler: emptyStateHandler,
      onInsertItem: onInsertItem,
      showSearch: true,
      showCategories: false
      // On page resize we want the InlineElementBrowser to show updated tools/overflow items
      ,
      key: quickInsertDropdownItems.length,
      viewMoreItem: viewMoreItem,
      cache: cache
    })))
  );
};
const getSvgIconForItem = ({
  name
}) => {
  const Icon = {
    codeblock: IconCode,
    panel: IconPanel,
    blockquote: IconQuote,
    decision: IconDecision,
    horizontalrule: IconDivider,
    expand: IconExpand,
    date: IconDate,
    status: IconStatus
  }[name];
  return Icon ? jsx(Icon, {
    label: ""
  }) : undefined;
};
const insertMenuWrapper = (height, isFullPageAppearance) => {
  return css({
    display: 'flex',
    flexDirection: 'column',
    width: '320px',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    height: `${height}px`,
    backgroundColor: `${`var(--ds-surface-overlay, ${N0})`}`,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    borderRadius: `${borderRadius()}px`,
    boxShadow: `${`var(--ds-shadow-overlay, ${`0 0 0 1px ${N30A},
    0 2px 1px ${N30A},
    0 0 20px -6px ${N60A}`})`}`
  });
};
const flexWrapperStyles = css({
  display: 'flex',
  flex: 1,
  boxSizing: 'border-box',
  overflow: 'hidden'
});
const FlexWrapper = props => {
  const setOutsideClickTargetRef = useContext(OutsideClickTargetRefContext);
  const {
    children,
    ...divProps
  } = props;
  return (
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
    jsx("div", _extends({
      ref: setOutsideClickTargetRef,
      css: flexWrapperStyles
    }, divProps), children)
  );
};
const ElementBrowserWrapper = withOuterListeners(FlexWrapper);
export default InsertMenu;