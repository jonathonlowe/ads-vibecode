import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import Button from '@atlaskit/button';
import { ElementBrowser } from '@atlaskit/editor-common/element-browser';
import { messages } from '@atlaskit/editor-common/quick-insert';
import QuestionCircleIcon from '@atlaskit/icon/core/migration/question-circle';
import Modal, { ModalTransition, useModal } from '@atlaskit/modal-dialog';
import { N0 } from '@atlaskit/theme/colors';
import { getCategories } from './categories';
export var MODAL_WRAPPER_PADDING = 16;
var actionsStyles = css({
  display: 'inline-flex',
  margin: "0 ".concat("var(--ds-space-negative-050, -4px)")
});
var actionItemStyles = css({
  flex: '1 0 auto',
  margin: "0 ".concat("var(--ds-space-050, 4px)")
});
var wrapperStyles = css({
  display: 'flex',
  flex: '1 1 auto',
  boxSizing: 'border-box',
  padding: "var(--ds-space-200, 16px)".concat(" ", "var(--ds-space-200, 16px)", " 0 10px"),
  overflow: 'hidden',
  backgroundColor: "var(--ds-surface-overlay, ".concat(N0, ")"),
  borderRadius: "var(--ds-border-radius, 3px)"
});
var modalFooterStyles = css({
  display: 'flex',
  padding: "var(--ds-space-200, 16px)",
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'space-between'
});
var ModalElementBrowser = function ModalElementBrowser(props) {
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    selectedItem = _useState2[0],
    setSelectedItem = _useState2[1];
  var helpUrl = props.helpUrl,
    intl = props.intl,
    onClose = props.onClose,
    onInsertItemFn = props.onInsertItem;
  var onSelectItem = useCallback(function (item) {
    setSelectedItem(item);
  }, [setSelectedItem]);
  var onInsertItem = useCallback(function (item) {
    onInsertItemFn(item);
  }, [onInsertItemFn]);
  var RenderFooter = useCallback(function () {
    return jsx(Footer
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    , {
      onInsert: function onInsert() {
        return onInsertItem(selectedItem);
      },
      beforeElement: helpUrl ? HelpLink(helpUrl, intl.formatMessage(messages.help)) : undefined
    });
  }, [onInsertItem, selectedItem, helpUrl, intl]);

  // Since Modal uses stackIndex it's shouldCloseOnEscapePress prop doesn't work.
  var onKeyDown = useCallback(function (e) {
    if (e.key === 'Escape') {
      onClose();
    }
  }, [onClose]);
  var RenderBody = useCallback(function () {
    return jsx("div", {
      css: wrapperStyles
    }, jsx(ElementBrowser, {
      categories: getCategories(props.intl),
      getItems: props.getItems,
      showSearch: true,
      showCategories: true,
      mode: "full",
      onSelectItem: onSelectItem,
      onInsertItem: onInsertItem,
      emptyStateHandler: props.emptyStateHandler
    }));
  }, [props.intl, props.getItems, onSelectItem, onInsertItem, props.emptyStateHandler]);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("div", {
      "data-editor-popup": true,
      onClick: onModalClick,
      onKeyDown: onKeyDown
    }, jsx(ModalTransition, null, props.isOpen && jsx(Modal, {
      testId: "element-browser-modal-dialog",
      stackIndex: 0,
      key: "element-browser-modal",
      onClose: props.onClose,
      onCloseComplete: props.onCloseComplete,
      height: "664px",
      width: "x-large",
      autoFocus: false,
      shouldReturnFocus: props.shouldReturnFocus
      // defaults to true and doesn't work along with stackIndex=1.
      // packages/design-system/modal-dialog/src/components/Content.tsx Line 287
      ,
      shouldCloseOnEscapePress: false
    }, jsx(RenderBody, null), jsx(RenderFooter, null))))
  );
};
ModalElementBrowser.displayName = 'ModalElementBrowser';

// Prevent ModalElementBrowser click propagation through to the editor.
var onModalClick = function onModalClick(e) {
  return e.stopPropagation();
};
var Footer = function Footer(_ref) {
  var onInsert = _ref.onInsert,
    beforeElement = _ref.beforeElement;
  var _useModal = useModal(),
    onClose = _useModal.onClose;
  return jsx("div", {
    css: modalFooterStyles
  }, beforeElement ? beforeElement : jsx("span", null), jsx("div", {
    css: actionsStyles
  }, jsx("div", {
    css: actionItemStyles
  }, jsx(Button, {
    appearance: "primary",
    onClick: onInsert,
    testId: "ModalElementBrowser__insert-button"
  }, "Insert")), jsx("div", {
    css: actionItemStyles
  }, jsx(Button, {
    appearance: "subtle",
    onClick: onClose,
    testId: "ModalElementBrowser__close-button"
  }, "Close"))));
};
var HelpLink = function HelpLink(url, helpText) {
  return jsx(Button, {
    iconBefore: jsx(QuestionCircleIcon, {
      label: ""
    }),
    appearance: "subtle-link",
    href: url,
    target: "_blank",
    testId: "ModalElementBrowser__help-button"
  }, helpText);
};
export default injectIntl(ModalElementBrowser);