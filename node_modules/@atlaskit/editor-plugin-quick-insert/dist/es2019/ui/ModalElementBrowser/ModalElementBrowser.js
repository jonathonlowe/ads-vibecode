/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React, { useCallback, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import Button from '@atlaskit/button';
import { ElementBrowser } from '@atlaskit/editor-common/element-browser';
import { messages } from '@atlaskit/editor-common/quick-insert';
import QuestionCircleIcon from '@atlaskit/icon/core/migration/question-circle';
import Modal, { ModalTransition, useModal } from '@atlaskit/modal-dialog';
import { N0 } from '@atlaskit/theme/colors';
import { getCategories } from './categories';
export const MODAL_WRAPPER_PADDING = 16;
const actionsStyles = css({
  display: 'inline-flex',
  margin: `0 ${"var(--ds-space-negative-050, -4px)"}`
});
const actionItemStyles = css({
  flex: '1 0 auto',
  margin: `0 ${"var(--ds-space-050, 4px)"}`
});
const wrapperStyles = css({
  display: 'flex',
  flex: '1 1 auto',
  boxSizing: 'border-box',
  padding: `${"var(--ds-space-200, 16px)"} ${"var(--ds-space-200, 16px)"} 0 10px`,
  overflow: 'hidden',
  backgroundColor: `var(--ds-surface-overlay, ${N0})`,
  borderRadius: "var(--ds-border-radius, 3px)"
});
const modalFooterStyles = css({
  display: 'flex',
  padding: `${"var(--ds-space-200, 16px)"}`,
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'space-between'
});
const ModalElementBrowser = props => {
  const [selectedItem, setSelectedItem] = useState();
  const {
    helpUrl,
    intl,
    onClose,
    onInsertItem: onInsertItemFn
  } = props;
  const onSelectItem = useCallback(item => {
    setSelectedItem(item);
  }, [setSelectedItem]);
  const onInsertItem = useCallback(item => {
    onInsertItemFn(item);
  }, [onInsertItemFn]);
  const RenderFooter = useCallback(() => jsx(Footer
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  , {
    onInsert: () => onInsertItem(selectedItem),
    beforeElement: helpUrl ? HelpLink(helpUrl, intl.formatMessage(messages.help)) : undefined
  }), [onInsertItem, selectedItem, helpUrl, intl]);

  // Since Modal uses stackIndex it's shouldCloseOnEscapePress prop doesn't work.
  const onKeyDown = useCallback(e => {
    if (e.key === 'Escape') {
      onClose();
    }
  }, [onClose]);
  const RenderBody = useCallback(() => jsx("div", {
    css: wrapperStyles
  }, jsx(ElementBrowser, {
    categories: getCategories(props.intl),
    getItems: props.getItems,
    showSearch: true,
    showCategories: true,
    mode: "full",
    onSelectItem: onSelectItem,
    onInsertItem: onInsertItem,
    emptyStateHandler: props.emptyStateHandler
  })), [props.intl, props.getItems, onSelectItem, onInsertItem, props.emptyStateHandler]);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    jsx("div", {
      "data-editor-popup": true,
      onClick: onModalClick,
      onKeyDown: onKeyDown
    }, jsx(ModalTransition, null, props.isOpen && jsx(Modal, {
      testId: "element-browser-modal-dialog",
      stackIndex: 0,
      key: "element-browser-modal",
      onClose: props.onClose,
      onCloseComplete: props.onCloseComplete,
      height: "664px",
      width: "x-large",
      autoFocus: false,
      shouldReturnFocus: props.shouldReturnFocus
      // defaults to true and doesn't work along with stackIndex=1.
      // packages/design-system/modal-dialog/src/components/Content.tsx Line 287
      ,
      shouldCloseOnEscapePress: false
    }, jsx(RenderBody, null), jsx(RenderFooter, null))))
  );
};
ModalElementBrowser.displayName = 'ModalElementBrowser';

// Prevent ModalElementBrowser click propagation through to the editor.
const onModalClick = e => e.stopPropagation();
const Footer = ({
  onInsert,
  beforeElement
}) => {
  const {
    onClose
  } = useModal();
  return jsx("div", {
    css: modalFooterStyles
  }, beforeElement ? beforeElement : jsx("span", null), jsx("div", {
    css: actionsStyles
  }, jsx("div", {
    css: actionItemStyles
  }, jsx(Button, {
    appearance: "primary",
    onClick: onInsert,
    testId: "ModalElementBrowser__insert-button"
  }, "Insert")), jsx("div", {
    css: actionItemStyles
  }, jsx(Button, {
    appearance: "subtle",
    onClick: onClose,
    testId: "ModalElementBrowser__close-button"
  }, "Close"))));
};
const HelpLink = (url, helpText) => jsx(Button, {
  iconBefore: jsx(QuestionCircleIcon, {
    label: ""
  }),
  appearance: "subtle-link",
  href: url,
  target: "_blank",
  testId: "ModalElementBrowser__help-button"
}, helpText);
export default injectIntl(ModalElementBrowser);