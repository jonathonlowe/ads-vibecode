import React, { useCallback } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { fg } from '@atlaskit/platform-feature-flags';
import { closeElementBrowserModal } from '../../pm-plugins/commands';
import ModalElementBrowser from './ModalElementBrowser';
const Modal = ({
  quickInsertState,
  isOffline,
  editorView,
  helpUrl,
  insertItem,
  getSuggestions,
  api
}) => {
  const getItems = useCallback((query, category) => {
    var _getSuggestions$map, _getSuggestions;
    return (_getSuggestions$map = getSuggestions === null || getSuggestions === void 0 ? void 0 : (_getSuggestions = getSuggestions({
      query,
      category
    })) === null || _getSuggestions === void 0 ? void 0 : _getSuggestions.map(item => {
      return isOffline && item.isDisabledOffline ? {
        ...item,
        isDisabled: true
      } : item;
    })) !== null && _getSuggestions$map !== void 0 ? _getSuggestions$map : [];
  },
  // See: https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/157796/overview?commentId=8559952
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [getSuggestions, quickInsertState === null || quickInsertState === void 0 ? void 0 : quickInsertState.lazyDefaultItems, quickInsertState === null || quickInsertState === void 0 ? void 0 : quickInsertState.providedItems, isOffline]);
  const focusInEditor = useCallback(() => {
    if (!editorView.hasFocus()) {
      editorView.focus();
    }
  }, [editorView]);

  // ED-19408 We not store the item ref in the state
  // Instead of adding the item immediately on insert item
  // We wait until modal close is complete, refocus the editor and then add the item
  const insertableItem = React.useRef(null);
  const onInsertItem = useCallback(item => {
    closeElementBrowserModal()(editorView.state, editorView.dispatch);
    if (fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.startActiveSessionTimer());
    }
    insertableItem.current = item;
  }, [editorView, api]);
  const onClose = useCallback(() => {
    closeElementBrowserModal()(editorView.state, editorView.dispatch);
    if (fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics2;
      api === null || api === void 0 ? void 0 : api.core.actions.execute(api === null || api === void 0 ? void 0 : (_api$metrics2 = api.metrics) === null || _api$metrics2 === void 0 ? void 0 : _api$metrics2.commands.startActiveSessionTimer());
    }
    focusInEditor();
  }, [editorView, focusInEditor, api]);
  const onCloseComplete = useCallback(() => {
    if (!insertableItem.current) {
      focusInEditor();
      return;
    }
    const item = insertableItem.current;
    insertableItem.current = null;
    focusInEditor();
    insertItem === null || insertItem === void 0 ? void 0 : insertItem(item)(editorView.state, editorView.dispatch);
  }, [editorView, focusInEditor, insertItem]);
  return /*#__PURE__*/React.createElement(ModalElementBrowser, {
    getItems: getItems,
    onInsertItem: onInsertItem,
    helpUrl: helpUrl,
    isOpen: (quickInsertState === null || quickInsertState === void 0 ? void 0 : quickInsertState.isElementBrowserModalOpen) || false,
    emptyStateHandler: quickInsertState === null || quickInsertState === void 0 ? void 0 : quickInsertState.emptyStateHandler,
    onClose: onClose,
    onCloseComplete: onCloseComplete,
    shouldReturnFocus: false
  });
};
export default (({
  editorView,
  helpUrl,
  pluginInjectionAPI
}) => {
  var _pluginInjectionAPI$q, _pluginInjectionAPI$q2, _pluginInjectionAPI$q3, _pluginInjectionAPI$q4;
  const {
    quickInsertState,
    connectivityState
  } = useSharedPluginState(pluginInjectionAPI, ['quickInsert', 'connectivity']);
  return /*#__PURE__*/React.createElement(Modal, {
    quickInsertState: quickInsertState !== null && quickInsertState !== void 0 ? quickInsertState : undefined,
    editorView: editorView,
    helpUrl: helpUrl,
    isOffline: (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline',
    insertItem: pluginInjectionAPI === null || pluginInjectionAPI === void 0 ? void 0 : (_pluginInjectionAPI$q = pluginInjectionAPI.quickInsert) === null || _pluginInjectionAPI$q === void 0 ? void 0 : (_pluginInjectionAPI$q2 = _pluginInjectionAPI$q.actions) === null || _pluginInjectionAPI$q2 === void 0 ? void 0 : _pluginInjectionAPI$q2.insertItem,
    getSuggestions: pluginInjectionAPI === null || pluginInjectionAPI === void 0 ? void 0 : (_pluginInjectionAPI$q3 = pluginInjectionAPI.quickInsert) === null || _pluginInjectionAPI$q3 === void 0 ? void 0 : (_pluginInjectionAPI$q4 = _pluginInjectionAPI$q3.actions) === null || _pluginInjectionAPI$q4 === void 0 ? void 0 : _pluginInjectionAPI$q4.getSuggestions,
    api: pluginInjectionAPI
  });
});