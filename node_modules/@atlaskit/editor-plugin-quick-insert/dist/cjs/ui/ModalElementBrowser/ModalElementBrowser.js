"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MODAL_WRAPPER_PADDING = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _elementBrowser = require("@atlaskit/editor-common/element-browser");
var _quickInsert = require("@atlaskit/editor-common/quick-insert");
var _questionCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/question-circle"));
var _modalDialog = _interopRequireWildcard(require("@atlaskit/modal-dialog"));
var _colors = require("@atlaskit/theme/colors");
var _categories = require("./categories");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var MODAL_WRAPPER_PADDING = exports.MODAL_WRAPPER_PADDING = 16;
var actionsStyles = (0, _react2.css)({
  display: 'inline-flex',
  margin: "0 ".concat("var(--ds-space-negative-050, -4px)")
});
var actionItemStyles = (0, _react2.css)({
  flex: '1 0 auto',
  margin: "0 ".concat("var(--ds-space-050, 4px)")
});
var wrapperStyles = (0, _react2.css)({
  display: 'flex',
  flex: '1 1 auto',
  boxSizing: 'border-box',
  padding: "var(--ds-space-200, 16px)".concat(" ", "var(--ds-space-200, 16px)", " 0 10px"),
  overflow: 'hidden',
  backgroundColor: "var(--ds-surface-overlay, ".concat(_colors.N0, ")"),
  borderRadius: "var(--ds-border-radius, 3px)"
});
var modalFooterStyles = (0, _react2.css)({
  display: 'flex',
  padding: "var(--ds-space-200, 16px)",
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'space-between'
});
var ModalElementBrowser = function ModalElementBrowser(props) {
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedItem = _useState2[0],
    setSelectedItem = _useState2[1];
  var helpUrl = props.helpUrl,
    intl = props.intl,
    onClose = props.onClose,
    onInsertItemFn = props.onInsertItem;
  var onSelectItem = (0, _react.useCallback)(function (item) {
    setSelectedItem(item);
  }, [setSelectedItem]);
  var onInsertItem = (0, _react.useCallback)(function (item) {
    onInsertItemFn(item);
  }, [onInsertItemFn]);
  var RenderFooter = (0, _react.useCallback)(function () {
    return (0, _react2.jsx)(Footer
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    , {
      onInsert: function onInsert() {
        return onInsertItem(selectedItem);
      },
      beforeElement: helpUrl ? HelpLink(helpUrl, intl.formatMessage(_quickInsert.messages.help)) : undefined
    });
  }, [onInsertItem, selectedItem, helpUrl, intl]);

  // Since Modal uses stackIndex it's shouldCloseOnEscapePress prop doesn't work.
  var onKeyDown = (0, _react.useCallback)(function (e) {
    if (e.key === 'Escape') {
      onClose();
    }
  }, [onClose]);
  var RenderBody = (0, _react.useCallback)(function () {
    return (0, _react2.jsx)("div", {
      css: wrapperStyles
    }, (0, _react2.jsx)(_elementBrowser.ElementBrowser, {
      categories: (0, _categories.getCategories)(props.intl),
      getItems: props.getItems,
      showSearch: true,
      showCategories: true,
      mode: "full",
      onSelectItem: onSelectItem,
      onInsertItem: onInsertItem,
      emptyStateHandler: props.emptyStateHandler
    }));
  }, [props.intl, props.getItems, onSelectItem, onInsertItem, props.emptyStateHandler]);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _react2.jsx)("div", {
      "data-editor-popup": true,
      onClick: onModalClick,
      onKeyDown: onKeyDown
    }, (0, _react2.jsx)(_modalDialog.ModalTransition, null, props.isOpen && (0, _react2.jsx)(_modalDialog.default, {
      testId: "element-browser-modal-dialog",
      stackIndex: 0,
      key: "element-browser-modal",
      onClose: props.onClose,
      onCloseComplete: props.onCloseComplete,
      height: "664px",
      width: "x-large",
      autoFocus: false,
      shouldReturnFocus: props.shouldReturnFocus
      // defaults to true and doesn't work along with stackIndex=1.
      // packages/design-system/modal-dialog/src/components/Content.tsx Line 287
      ,
      shouldCloseOnEscapePress: false
    }, (0, _react2.jsx)(RenderBody, null), (0, _react2.jsx)(RenderFooter, null))))
  );
};
ModalElementBrowser.displayName = 'ModalElementBrowser';

// Prevent ModalElementBrowser click propagation through to the editor.
var onModalClick = function onModalClick(e) {
  return e.stopPropagation();
};
var Footer = function Footer(_ref) {
  var onInsert = _ref.onInsert,
    beforeElement = _ref.beforeElement;
  var _useModal = (0, _modalDialog.useModal)(),
    onClose = _useModal.onClose;
  return (0, _react2.jsx)("div", {
    css: modalFooterStyles
  }, beforeElement ? beforeElement : (0, _react2.jsx)("span", null), (0, _react2.jsx)("div", {
    css: actionsStyles
  }, (0, _react2.jsx)("div", {
    css: actionItemStyles
  }, (0, _react2.jsx)(_button.default, {
    appearance: "primary",
    onClick: onInsert,
    testId: "ModalElementBrowser__insert-button"
  }, "Insert")), (0, _react2.jsx)("div", {
    css: actionItemStyles
  }, (0, _react2.jsx)(_button.default, {
    appearance: "subtle",
    onClick: onClose,
    testId: "ModalElementBrowser__close-button"
  }, "Close"))));
};
var HelpLink = function HelpLink(url, helpText) {
  return (0, _react2.jsx)(_button.default, {
    iconBefore: (0, _react2.jsx)(_questionCircle.default, {
      label: ""
    }),
    appearance: "subtle-link",
    href: url,
    target: "_blank",
    testId: "ModalElementBrowser__help-button"
  }, helpText);
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(ModalElementBrowser);