import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ROVO_PARAM_PREFIX, ROVO_VALID_PARAMS } from './constants';
export var firstCharUpper = function firstCharUpper(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
export var firstCharLower = function firstCharLower(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
};
var isValidURL = function isValidURL(url) {
  try {
    new URL(url);
    return true;
  } catch (error) {
    return false;
  }
};

// For new style camelCase params
export var addPrefix = function addPrefix(param) {
  return "".concat(ROVO_PARAM_PREFIX).concat(firstCharUpper(param));
};
export var removePrefix = function removePrefix(param) {
  return firstCharLower(param.replace(ROVO_PARAM_PREFIX, ''));
};

// Creates RovoChatParams from URLSearchParams
// Optionally filter to specific params
var processParams = function processParams(input) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    filter: []
  };
  var output = {};
  var safeSearchParamsInput = typeof input === 'string' ? isValidURL(input) ? new URLSearchParams(new URL(input).search) : new URLSearchParams(input) : input;
  var processedInput = new URLSearchParams(safeSearchParamsInput);
  var extracted = new URLSearchParams();
  safeSearchParamsInput.forEach(function (value, key) {
    var _options$filter;
    // Only look at rovoChat params
    if (!key.startsWith(ROVO_PARAM_PREFIX)) {
      return;
    }
    var paramKey = removePrefix(key);
    if (options !== null && options !== void 0 && (_options$filter = options.filter) !== null && _options$filter !== void 0 && _options$filter.length) {
      if (options.filter.includes(paramKey)) {
        output[paramKey] = decodeURIComponent(value);
        extracted.append(key, value);
      }
    } else {
      output[paramKey] = decodeURIComponent(value);
    }

    // Remove rovoParam from processed input
    processedInput.delete(key);
  });
  var combinedQueryString = [processedInput, extracted].map(function (params) {
    return params.toString();
  }).filter(function (part) {
    return part.length > 0;
  }).join('&');
  return {
    processed: processedInput,
    rovoParams: output,
    combinedQueryString: combinedQueryString
  };
};

// Get all rovoChat params from a URL or the current window location if undefined
export var getRovoParams = function getRovoParams(url) {
  try {
    var search = url ? new URL(url).search : window.location.search;
    var q = new URLSearchParams(search);
    return processParams(q).rovoParams;
  } catch (error) {
    return {};
  }
};

// Update the address bar without reloading the page
export var updatePageRovoParams = function updatePageRovoParams(params) {
  window.history.pushState({}, '', addRovoParamsToUrl(window.location.pathname, params));
};

// Add any valid rovoChat params to a URL
export var addRovoParamsToUrl = function addRovoParamsToUrl(url, params) {
  var _processParams = processParams(url),
    processed = _processParams.processed,
    rovoParams = _processParams.rovoParams;
  var rovoParamsWithExisting = _objectSpread(_objectSpread({}, rovoParams), params);
  var baseUrl = url.includes('?') ? url.split('?')[0] : url;
  var baseQuery = Array.from(processed).length ? "?".concat(processed.toString(), "&") : '?';
  var updatedRovoParamsString = encodeRovoParams(rovoParamsWithExisting);
  return "".concat(baseUrl).concat(baseQuery).concat(updatedRovoParamsString);
};
export var encodeRovoParams = function encodeRovoParams(params, encodeAsObject) {
  if (encodeAsObject) {
    return Object.entries(params).reduce(function (acc, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      acc[addPrefix(key)] = encodeURIComponent(value);
      return acc;
    }, {});
  }
  return Object.entries(params).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      key = _ref4[0],
      value = _ref4[1];
    return "".concat(addPrefix(key), "=").concat(encodeURIComponent(value));
  }).join('&');
};
export var assertOnlySpecificFieldsDefined = function assertOnlySpecificFieldsDefined(params, fields) {
  return Object.entries(params).every(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      key = _ref6[0],
      value = _ref6[1];
    var field = fields.find(function (field) {
      return field === key;
    });
    if (field) {
      return value !== undefined;
    } else {
      return value === undefined;
    }
  });
};
export var getListOfRovoParams = function getListOfRovoParams() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref7$resourceRouterQ = _ref7.resourceRouterQuery,
    resourceRouterQuery = _ref7$resourceRouterQ === void 0 ? false : _ref7$resourceRouterQ;
  /*
  For products using react-resource-router (e.g Atlas) to
  pass as the value of `query` on the route definition. It ensures that our parameters
  are not stripped from the URL when loading the page, or through redirect hops
  Any new parameters we want to maintain should be added here as well, which means
  only a version bump is needed in those products to support the latest param list
  The !=false simply means that the parameter is supported but is optional, and should
  not contain a value of 'false'
  */
  var suffix = resourceRouterQuery ? '!=false' : '';
  return ROVO_VALID_PARAMS.map(function (param) {
    return "".concat(addPrefix(param)).concat(suffix);
  });
};