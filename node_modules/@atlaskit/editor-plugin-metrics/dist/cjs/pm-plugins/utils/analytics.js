"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAnalyticsPayload = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _analytics = require("@atlaskit/editor-common/analytics");
var _getNodeChanges = require("./get-node-changes");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getAnalyticsPayload = exports.getAnalyticsPayload = function getAnalyticsPayload(_ref) {
  var _pluginState$actionTy;
  var currentContent = _ref.currentContent,
    pluginState = _ref.pluginState;
  var nodeChanges = (0, _getNodeChanges.getNodeChanges)({
    currentContent: currentContent,
    pluginState: pluginState
  });
  var getActionCountByTypeSum = function getActionCountByTypeSum() {
    var actionCountByTypeSum = 0;
    Object.entries(pluginState.actionTypeCount).forEach(function (_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        _actionType = _ref3[0],
        count = _ref3[1];
      actionCountByTypeSum += count;
    });
    return pluginState.totalActionCount - actionCountByTypeSum;
  };
  var nodeInsertionCount = 0;
  var nodeDeletionCount = 0;
  Object.entries(nodeChanges).forEach(function (_ref4) {
    var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
      _ = _ref5[0],
      change = _ref5[1];
    if (change > 0) {
      nodeInsertionCount += change;
    } else if (change < 0) {
      nodeDeletionCount += Math.abs(change);
    }
  });
  return {
    action: _analytics.ACTION.ENDED,
    actionSubject: _analytics.ACTION_SUBJECT.ACTIVITY_SESSION,
    actionSubjectId: _analytics.ACTION_SUBJECT_ID.ACTIVITY,
    attributes: {
      efficiency: {
        totalActiveTime: pluginState.activeSessionTime / 1000,
        totalActionCount: pluginState.totalActionCount,
        actionByTypeCount: _objectSpread(_objectSpread({}, (_pluginState$actionTy = pluginState.actionTypeCount) !== null && _pluginState$actionTy !== void 0 ? _pluginState$actionTy : {}), {}, {
          nodeDeletionCount: nodeDeletionCount,
          nodeInsertionCount: nodeInsertionCount,
          other: getActionCountByTypeSum()
        })
      },
      effectiveness: {
        undoCount: pluginState.actionTypeCount.undoCount,
        repeatedActionCount: pluginState.repeatedActionCount,
        safeInsertCount: pluginState.safeInsertCount
      },
      contentSizeChanged: pluginState.contentSizeChanged
    },
    eventType: _analytics.EVENT_TYPE.TRACK
  };
};