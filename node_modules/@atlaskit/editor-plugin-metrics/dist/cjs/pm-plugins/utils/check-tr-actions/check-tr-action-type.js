"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkTrActionType = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _transform = require("@atlaskit/editor-prosemirror/transform");
var _checkContentMoved = require("./tr-checks/check-content-moved");
var _checkDeletingContent = require("./tr-checks/check-deleting-content");
var _checkEmptyLineAddedOrDeleted = require("./tr-checks/check-empty-line-added-or-deleted");
var _checkListTypeNodeChanged = require("./tr-checks/check-list-type-node-changed");
var _checkMarkChanged = require("./tr-checks/check-mark-changed");
var _checkNodeAttributeChanged = require("./tr-checks/check-node-attribute-changed");
var _checkStatusChanged = require("./tr-checks/check-status-changed");
var _checkTableColumnResized = require("./tr-checks/check-table-column-resized");
var _checkTextInput = require("./tr-checks/check-text-input");
var checkTrActionType = exports.checkTrActionType = function checkTrActionType(tr) {
  var stepsLength = tr.steps.length;
  if (stepsLength <= 0) {
    return undefined;
  }
  var contentPastedOrMoved = (0, _checkContentMoved.checkContentPastedOrMoved)(tr);
  if (contentPastedOrMoved) {
    return contentPastedOrMoved;
  }

  // Resized column data is either AttrStep or BatchAttrsStep, so we want to check it first
  var resizedColumnData = (0, _checkTableColumnResized.checkTableColumnResized)(tr);
  if (resizedColumnData) {
    return resizedColumnData;
  }

  // Since we are looking at editor actions, we want to look at the first step only
  var _tr$steps = (0, _slicedToArray2.default)(tr.steps, 1),
    firstStep = _tr$steps[0];
  var isReplaceStep = firstStep instanceof _transform.ReplaceStep;
  var isReplaceAroundStep = firstStep instanceof _transform.ReplaceAroundStep;

  // Check if mark is added or removed, this is for text formatting changes
  var marksChanged = (0, _checkMarkChanged.checkMarkChanged)(firstStep);
  if (marksChanged) {
    return marksChanged;
  }

  // Return early if it's not a replace step or replace around step as following checks are for these steps only
  if (!(isReplaceStep || isReplaceAroundStep)) {
    return undefined;
  }
  if (isReplaceStep) {
    // Check if tr is text input as we want to ignore continuous typing actions
    var textInput = (0, _checkTextInput.checkTextInput)(firstStep);
    if (textInput) {
      return textInput;
    }

    // Check if tr is adding/ removing empty lines as we want to ignore continuous typing actions
    var emptyLineAddedOrDeleted = (0, _checkEmptyLineAddedOrDeleted.checkEmptyLineAddedOrDeleted)(firstStep);
    if (emptyLineAddedOrDeleted) {
      return emptyLineAddedOrDeleted;
    }

    //Check if tr is removing content
    var isDeletingContent = (0, _checkDeletingContent.checkDeletingContent)(firstStep);
    if (isDeletingContent) {
      return isDeletingContent;
    }

    // Status nodes save status content in attributes and a new transaction is fired each keypress
    // Check if tr is updating status so we can handle actionCount correctly
    var status = (0, _checkStatusChanged.checkStatusChanged)(firstStep);
    if (status) {
      return status;
    }
  }

  // Check if tr is updating list type node because we want to ignore continuous typing actions and adding new list items
  var updatingListTypeNode = (0, _checkListTypeNodeChanged.checkListTypeNodeChanged)(firstStep);
  if (updatingListTypeNode) {
    return updatingListTypeNode;
  }

  // Check if tr is updating node attributes so we can track nodeAttributeChangeCount
  var nodeAttributeChange = (0, _checkNodeAttributeChanged.checkNodeAttributeChanged)(tr, firstStep);
  if (nodeAttributeChange) {
    return nodeAttributeChange;
  }
  return undefined;
};