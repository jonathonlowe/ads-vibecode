import type { EditorState, ReadonlyTransaction } from '@atlaskit/editor-prosemirror/state';
import { type MetricsState } from '../main';
import { ActionType } from './check-tr-actions/types';
export declare const getNewPluginState: ({ now, intentToStartEditTime, shouldPersistActiveSession, tr, pluginState, oldState, newState, }: {
    now: number;
    intentToStartEditTime: number;
    shouldPersistActiveSession: boolean;
    tr: ReadonlyTransaction;
    pluginState: MetricsState;
    newState: EditorState;
    oldState: EditorState;
}) => {
    totalActionCount: number;
    timeOfLastTextInput: undefined;
    actionTypeCount: {
        undoCount: number;
        textInputCount: number;
        nodeInsertionCount: number;
        nodeAttributeChangeCount: number;
        contentMovedCount: number;
        nodeDeletionCount: number;
        markChangeCount: number;
        contentDeletedCount: number;
    };
    previousTrType: undefined;
    safeInsertCount: number;
    activeSessionTime: number;
    contentSizeChanged: number;
    intentToStartEditTime: number;
    shouldPersistActiveSession: boolean;
    lastSelection?: import("prosemirror-state").Selection | undefined;
    initialContent?: import("prosemirror-model").Fragment | undefined;
    repeatedActionCount: number;
} | {
    totalActionCount: number;
    timeOfLastTextInput: number | undefined;
    actionTypeCount: {
        textInputCount: number;
        undoCount: number;
        nodeAttributeChangeCount: number;
        contentMovedCount: number;
        markChangeCount: number;
        contentDeletedCount: number;
        nodeInsertionCount: number;
        nodeDeletionCount: number;
    };
    previousTrType: import("./check-tr-actions/types").AttrChangeAction | import("./check-tr-actions/types").MarkChangeAction | import("./check-tr-actions/types").StatusChangeAction | import("./check-tr-actions/types").TrAction<ActionType.TEXT_INPUT> | import("./check-tr-actions/types").TrAction<ActionType.EMPTY_LINE_ADDED_OR_DELETED> | import("./check-tr-actions/types").TrAction<ActionType.INSERTED_FROM_TYPE_AHEAD> | import("./check-tr-actions/types").TrAction<ActionType.INSERTING_NEW_LIST_TYPE_NODE> | import("./check-tr-actions/types").TrAction<ActionType.UPDATING_NEW_LIST_TYPE_ITEM> | import("./check-tr-actions/types").TrAction<ActionType.ADDING_LINK> | import("./check-tr-actions/types").TrAction<ActionType.MOVING_CONTENT> | import("./check-tr-actions/types").TrAction<ActionType.PASTING_CONTENT> | import("./check-tr-actions/types").TrAction<ActionType.DELETING_CONTENT> | import("./check-tr-actions/types").TrAction<ActionType.SAFE_INSERT> | import("./check-tr-actions/types").TrAction<ActionType.UNDO>;
    repeatedActionCount: number;
    safeInsertCount: number;
    activeSessionTime: number;
    contentSizeChanged: number;
    intentToStartEditTime: number;
    shouldPersistActiveSession: boolean;
    lastSelection?: import("prosemirror-state").Selection | undefined;
    initialContent?: import("prosemirror-model").Fragment | undefined;
};
