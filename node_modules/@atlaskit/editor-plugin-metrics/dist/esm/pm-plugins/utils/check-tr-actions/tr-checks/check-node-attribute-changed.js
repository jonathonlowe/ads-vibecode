import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { ActionType } from '../types';
var compareAttributes = function compareAttributes(prevAttr, newAttr) {
  var allKeys = new Set([].concat(_toConsumableArray(Object.keys(prevAttr)), _toConsumableArray(Object.keys(newAttr))));
  var _iterator = _createForOfIteratorHelper(allKeys),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      var prevValue = prevAttr[key];
      var newValue = newAttr[key];
      if (prevValue !== newValue && key !== 'localId') {
        return key;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return undefined;
};
var compareMarks = function compareMarks(prevMarks, newMarks) {
  if (!prevMarks && !newMarks) {
    return undefined;
  }
  var previousMarksArr = new Map(prevMarks.map(function (mark) {
    return [mark.type.name, mark.attrs];
  }));
  var newMarksArr = new Map(newMarks.map(function (mark) {
    return [mark.type.name, mark.attrs];
  }));
  var allMarks = new Set([].concat(_toConsumableArray(previousMarksArr.keys()), _toConsumableArray(newMarksArr.keys())));
  var _iterator2 = _createForOfIteratorHelper(allMarks),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var key = _step2.value;
      var previousValue = previousMarksArr.get(key);
      var newValue = newMarksArr.get(key);
      if (JSON.stringify(previousValue) !== JSON.stringify(newValue)) {
        return key;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return undefined;
};
export var checkNodeAttributeChanged = function checkNodeAttributeChanged(tr, step) {
  var _ref = step,
    slice = _ref.slice,
    from = _ref.from,
    to = _ref.to;
  var oldNode = tr.docs[0].nodeAt(from);
  var newNode = slice.content.firstChild;
  if (!oldNode || !newNode) {
    return undefined;
  }
  if (oldNode.type.name !== newNode.type.name) {
    return undefined;
  }

  // We need to compare the attributes of the node
  var changedAttr = compareAttributes(oldNode.attrs, newNode.attrs);
  if (changedAttr) {
    return {
      type: ActionType.CHANGING_ATTRS,
      extraData: {
        attr: changedAttr,
        from: from,
        to: to
      }
    };
  }

  // For some changes, we need to compare the marks of the node
  // e.g. Media Border, Links
  var changedMarks = compareMarks(oldNode.marks, newNode.marks);
  if (changedMarks) {
    return {
      type: ActionType.CHANGING_ATTRS,
      extraData: {
        attr: changedMarks,
        from: from,
        to: to
      }
    };
  }
  return undefined;
};