import { type Node as PMNode, type ResolvedPos, Slice } from '@atlaskit/editor-prosemirror/model';
import { Selection, type Transaction } from '@atlaskit/editor-prosemirror/state';
import { type Mapping } from '@atlaskit/editor-prosemirror/transform';
import { CellBookmark } from './cell-bookmark';
import { type SerializedCellSelection } from './types';
export declare class CellSelection extends Selection {
    readonly $anchorCell: ResolvedPos;
    readonly $headCell: ResolvedPos;
    readonly visible: boolean;
    constructor($anchorCell: ResolvedPos, $headCell?: ResolvedPos);
    map(doc: PMNode, mapping: Mapping): Selection;
    content(): Slice;
    replace(tr: Transaction, content?: Slice): void;
    replaceWith(tr: Transaction, node: PMNode): void;
    forEachCell(f: (node: PMNode, pos: number) => void): void;
    isColSelection(): boolean;
    static colSelection($anchorCell: ResolvedPos, $headCell?: ResolvedPos): CellSelection;
    isRowSelection(): boolean;
    eq(other: CellSelection): boolean;
    static rowSelection($anchorCell: ResolvedPos, $headCell?: ResolvedPos): CellSelection;
    toJSON(): SerializedCellSelection;
    static fromJSON(doc: PMNode, json: SerializedCellSelection): CellSelection;
    static create(doc: PMNode, anchorCell: number, headCell?: number): CellSelection;
    getBookmark(): CellBookmark;
}
