"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.goToNextCell = goToNextCell;
var _state = require("@atlaskit/editor-prosemirror/state");
var _selectionCell = require("./selection-cell");
var _tables = require("./tables");
function moveCellForward($pos) {
  var nextNodeSize = $pos.nodeAfter ? $pos.nodeAfter.nodeSize : 0;
  return $pos.node(0).resolve($pos.pos + nextNodeSize);
}

// Returns a command for selecting the next (direction=1) or previous
// (direction=-1) cell in a table.
function goToNextCell(direction) {
  return function (state, dispatch) {
    if (!(0, _tables.isInTable)(state)) {
      return false;
    }
    var cellSelection = (0, _selectionCell.selectionCell)(state.selection);
    if (!cellSelection) {
      return false;
    }
    var cell = findNextCell(cellSelection, direction);
    if (cell === undefined) {
      return false;
    }
    if (dispatch) {
      var $cell = state.doc.resolve(cell);
      dispatch(state.tr.setSelection(_state.TextSelection.between($cell, moveCellForward($cell))).scrollIntoView());
    }
    return true;
  };
}
function findNextCell($cell, direction) {
  if (direction === -1) {
    var before = $cell.nodeBefore;
    if (before) {
      return $cell.pos - before.nodeSize;
    }
    for (var row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {
      var rowNode = $cell.node(-1).child(row);
      if (rowNode.childCount && rowNode.lastChild) {
        return rowEnd - 1 - rowNode.lastChild.nodeSize;
      }
      rowEnd -= rowNode.nodeSize;
    }
  } else {
    if ($cell.index() < $cell.parent.childCount - 1 && $cell.nodeAfter) {
      return $cell.pos + $cell.nodeAfter.nodeSize;
    }
    var table = $cell.node(-1);

    // table is the parent table, not the nested table
    if ($cell.node(-4) && $cell.node(-4).type.name === 'table') {
      table = $cell.node(-4);
    }
    for (var _row = $cell.indexAfter(-1), rowStart = $cell.after(); _row < table.childCount; _row++) {
      var _rowNode = table.child(_row);
      if (_rowNode.childCount) {
        return rowStart + 1;
      }
      rowStart += _rowNode.nodeSize;
    }
  }
}