"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectionRangeInRow = void 0;
var _getCellsInColumn = require("./get-cells-in-column");
var _getCellsInRow = require("./get-cells-in-row");
// Returns a range of rectangular selection spanning all merged cells around a row at index `rowIndex`.
var getSelectionRangeInRow = exports.getSelectionRangeInRow = function getSelectionRangeInRow(startRowIndex) {
  var endRowIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRowIndex;
  return function (tr) {
    var startIndex = startRowIndex;
    var endIndex = endRowIndex;

    // looking for selection start row (startIndex)
    var _loop = function _loop(i) {
      var cells = (0, _getCellsInRow.getCellsInRow)(i)(tr.selection);
      if (cells) {
        cells.forEach(function (cell) {
          var maybeEndIndex = cell.node.attrs.rowspan + i - 1;
          if (maybeEndIndex >= startIndex) {
            startIndex = i;
          }
          if (maybeEndIndex > endIndex) {
            endIndex = maybeEndIndex;
          }
        });
      }
    };
    for (var i = startRowIndex; i >= 0; i--) {
      _loop(i);
    }
    // looking for selection end row (endIndex)
    var _loop2 = function _loop2(_i) {
      var cells = (0, _getCellsInRow.getCellsInRow)(_i)(tr.selection);
      if (cells) {
        cells.forEach(function (cell) {
          var maybeEndIndex = cell.node.attrs.rowspan + _i - 1;
          if (cell.node.attrs.rowspan > 1 && maybeEndIndex > endIndex) {
            endIndex = maybeEndIndex;
          }
        });
      }
    };
    for (var _i = startRowIndex; _i <= endIndex; _i++) {
      _loop2(_i);
    }

    // filter out rows without cells (where all columns have rowspan > 1 in the same row)
    var indexes = [];
    for (var _i2 = startIndex; _i2 <= endIndex; _i2++) {
      var maybeCells = (0, _getCellsInRow.getCellsInRow)(_i2)(tr.selection);
      if (maybeCells && maybeCells.length) {
        indexes.push(_i2);
      }
    }
    startIndex = indexes[0];
    endIndex = indexes[indexes.length - 1];
    var firstSelectedRowCells = (0, _getCellsInRow.getCellsInRow)(startIndex)(tr.selection);
    var firstColumnCells = (0, _getCellsInColumn.getCellsInColumn)(0)(tr.selection);
    if (!firstSelectedRowCells || !firstColumnCells) {
      return;
    }
    var $anchor = tr.doc.resolve(firstSelectedRowCells[firstSelectedRowCells.length - 1].pos);
    var headCell;
    for (var _i3 = endIndex; _i3 >= startIndex; _i3--) {
      var rowCells = (0, _getCellsInRow.getCellsInRow)(_i3)(tr.selection);
      if (rowCells && rowCells.length) {
        for (var j = firstColumnCells.length - 1; j >= 0; j--) {
          if (firstColumnCells[j].pos === rowCells[0].pos) {
            headCell = rowCells[0];
            break;
          }
        }
        if (headCell) {
          break;
        }
      }
    }
    if (!headCell) {
      return;
    }
    var $head = tr.doc.resolve(headCell.pos);
    return {
      $anchor: $anchor,
      $head: $head,
      indexes: indexes
    };
  };
};