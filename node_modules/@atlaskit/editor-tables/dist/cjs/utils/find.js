"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findTableClosestToPos = exports.findTable = exports.findCellRectClosestToPos = exports.findCellClosestToPos = void 0;
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _tableMap = require("../table-map");
// Iterates over parent nodes, returning the closest table node.
var findTable = exports.findTable = function findTable(selection) {
  return (0, _utils.findParentNode)(function (node) {
    return node.type.spec.tableRole && node.type.spec.tableRole === 'table';
  })(selection);
};

// Iterates over parent nodes, returning a table node closest to a given `$pos`.
var findTableClosestToPos = exports.findTableClosestToPos = function findTableClosestToPos($pos) {
  var predicate = function predicate(node) {
    return node.type.spec.tableRole && node.type.spec.tableRole === 'table';
  };
  return (0, _utils.findParentNodeClosestToPos)($pos, predicate);
};

// Iterates over parent nodes, returning a table cell or a table header node closest to a given `$pos`.
var findCellClosestToPos = exports.findCellClosestToPos = function findCellClosestToPos($pos) {
  var predicate = function predicate(node) {
    return (
      // Ignored via go/ees005
      // eslint-disable-next-line require-unicode-regexp
      node.type.spec.tableRole && /cell/i.test(node.type.spec.tableRole)
    );
  };
  return (0, _utils.findParentNodeClosestToPos)($pos, predicate);
};

// Returns the rectangle spanning a cell closest to a given `$pos`.
var findCellRectClosestToPos = exports.findCellRectClosestToPos = function findCellRectClosestToPos($pos) {
  var cell = findCellClosestToPos($pos);
  if (cell) {
    var table = findTableClosestToPos($pos);
    if (table) {
      var map = _tableMap.TableMap.get(table.node);
      var cellPos = cell.pos - table.start;
      return map.rectBetween(cellPos, cellPos);
    }
  }
};