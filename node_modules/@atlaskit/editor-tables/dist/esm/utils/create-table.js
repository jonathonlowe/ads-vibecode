import { tableNodeTypes } from './table-node-types';
import { uuid } from './uuid';
var createCell = function createCell(cellType, cellContent) {
  if (cellContent) {
    return cellType.createChecked(null, cellContent);
  }
  return cellType.createAndFill();
};

// Returns a table node of a given size.
// `withHeaderRow` defines whether the first row of the table will be a header row.
// `cellContent` defines the content of each cell.

export var createTable = function createTable(_ref) {
  var schema = _ref.schema,
    _ref$rowsCount = _ref.rowsCount,
    rowsCount = _ref$rowsCount === void 0 ? 3 : _ref$rowsCount,
    _ref$colsCount = _ref.colsCount,
    colsCount = _ref$colsCount === void 0 ? 3 : _ref$colsCount,
    _ref$withHeaderRow = _ref.withHeaderRow,
    withHeaderRow = _ref$withHeaderRow === void 0 ? true : _ref$withHeaderRow,
    cellContent = _ref.cellContent,
    tableWidth = _ref.tableWidth,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? undefined : _ref$layout;
  var _tableNodeTypes = tableNodeTypes(schema),
    tableCell = _tableNodeTypes.cell,
    tableHeader = _tableNodeTypes.header_cell,
    tableRow = _tableNodeTypes.row,
    table = _tableNodeTypes.table;
  var cells = [];
  var headerCells = [];
  for (var i = 0; i < colsCount; i++) {
    var cell = createCell(tableCell, cellContent);
    if (cell) {
      cells.push(cell);
    }
    if (withHeaderRow) {
      var headerCell = createCell(tableHeader, cellContent);
      if (headerCell) {
        headerCells.push(headerCell);
      }
    }
  }
  var rows = [];
  for (var _i = 0; _i < rowsCount; _i++) {
    rows.push(tableRow.createChecked(null, withHeaderRow && _i === 0 ? headerCells : cells));
  }
  var width = tableWidth === 'inherit' ? undefined : tableWidth === undefined ? 760 : tableWidth;
  return table.createChecked({
    localId: uuid.generate(),
    width: width,
    layout: layout
  }, rows);
};