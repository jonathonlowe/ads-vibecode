import { getCellsInColumn } from './get-cells-in-column';
import { getCellsInRow } from './get-cells-in-row';

// Returns a range of rectangular selection spanning all merged cells around a column at index `columnIndex`.
export var getSelectionRangeInColumn = function getSelectionRangeInColumn(startColIndex) {
  var endColIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColIndex;
  return function (tr) {
    var startIndex = startColIndex;
    var endIndex = endColIndex;

    // looking for selection start column (startIndex)
    var _loop = function _loop(i) {
      var cells = getCellsInColumn(i)(tr.selection);
      if (cells) {
        cells.forEach(function (cell) {
          var maybeEndIndex = cell.node.attrs.colspan + i - 1;
          if (maybeEndIndex >= startIndex) {
            startIndex = i;
          }
          if (maybeEndIndex > endIndex) {
            endIndex = maybeEndIndex;
          }
        });
      }
    };
    for (var i = startColIndex; i >= 0; i--) {
      _loop(i);
    }
    // looking for selection end column (endIndex)
    var _loop2 = function _loop2(_i) {
      var cells = getCellsInColumn(_i)(tr.selection);
      if (cells) {
        cells.forEach(function (cell) {
          var maybeEndIndex = cell.node.attrs.colspan + _i - 1;
          if (cell.node.attrs.colspan > 1 && maybeEndIndex > endIndex) {
            endIndex = maybeEndIndex;
          }
        });
      }
    };
    for (var _i = startColIndex; _i <= endIndex; _i++) {
      _loop2(_i);
    }

    // filter out columns without cells (where all rows have colspan > 1 in the same column)
    var indexes = [];
    for (var _i2 = startIndex; _i2 <= endIndex; _i2++) {
      var maybeCells = getCellsInColumn(_i2)(tr.selection);
      if (maybeCells && maybeCells.length) {
        indexes.push(_i2);
      }
    }
    startIndex = indexes[0];
    endIndex = indexes[indexes.length - 1];
    var firstSelectedColumnCells = getCellsInColumn(startIndex)(tr.selection);
    var firstRowCells = getCellsInRow(0)(tr.selection);
    if (!firstSelectedColumnCells || !firstRowCells) {
      return;
    }
    var $anchor = tr.doc.resolve(firstSelectedColumnCells[firstSelectedColumnCells.length - 1].pos);
    var headCell;
    for (var _i3 = endIndex; _i3 >= startIndex; _i3--) {
      var columnCells = getCellsInColumn(_i3)(tr.selection);
      if (columnCells && columnCells.length) {
        for (var j = firstRowCells.length - 1; j >= 0; j--) {
          if (firstRowCells[j].pos === columnCells[0].pos) {
            headCell = columnCells[0];
            break;
          }
        }
        if (headCell) {
          break;
        }
      }
    }
    if (!headCell) {
      return;
    }
    var $head = tr.doc.resolve(headCell.pos);
    return {
      $anchor: $anchor,
      $head: $head,
      indexes: indexes
    };
  };
};