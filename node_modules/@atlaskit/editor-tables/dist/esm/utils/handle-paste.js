function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { Fragment } from '@atlaskit/editor-prosemirror/model';
import { findParentNode } from '@atlaskit/editor-prosemirror/utils';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { CellSelection } from '../cell-selection';
import { TableMap } from '../table-map';
import { selectionCell } from '../utils/selection-cell';
import { tableNodeTypes } from '../utils/table-node-types';
import { isInTable } from '../utils/tables';
import { clipCells, fitSlice, insertCells, pastedCells } from './copy-paste';
export function handlePaste(view, event, slice) {
  var _slice$content$firstC;
  if (!isInTable(view.state)) {
    return false;
  }
  var schema = view.state.schema;
  var isNestingAllowed = editorExperiment('nested-tables-in-tables', true);
  /**
   * TODO: There can be multiple variations.
   * 1. The last cell is selected with content outside of the table
   * 2. The first cell is selected with content outside of the table
   */
  var isPartialTablePaste = slice.content.childCount === 1 && ((_slice$content$firstC = slice.content.firstChild) === null || _slice$content$firstC === void 0 ? void 0 : _slice$content$firstC.type) === schema.nodes.table && slice.openStart !== 0 && slice.openEnd !== 0;
  var sel = view.state.selection;
  if (isNestingAllowed && !isPartialTablePaste) {
    var cellRes = findParentNode(function (node) {
      return node.type === schema.nodes.tableCell || node.type === schema.nodes.tableHeader;
    })(sel);
    if (cellRes) {
      var _cellRes$node$content;
      var canInsertNestedTable = (_cellRes$node$content = cellRes.node.contentMatchAt(0).matchType(schema.nodes.table)) === null || _cellRes$node$content === void 0 ? void 0 : _cellRes$node$content.validEnd;
      if (canInsertNestedTable) {
        return false;
      }
    }
  }
  var cells = pastedCells(slice);
  if (sel instanceof CellSelection) {
    if (!cells) {
      cells = {
        width: 1,
        height: 1,
        rows: [Fragment.from(fitSlice(tableNodeTypes(view.state.schema).cell, slice))]
      };
    }
    var table = sel.$anchorCell.node(-1);
    var start = sel.$anchorCell.start(-1);
    var tableMap = TableMap.get(table);
    var rect = tableMap.rectBetween(sel.$anchorCell.pos - start, sel.$headCell.pos - start);
    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);
    insertCells(view.state, view.dispatch, start, rect, clearColumnWidthOfCells(cells, rect, tableMap));
    return true;
  }
  if (cells) {
    var $cell = selectionCell(sel);
    if (!$cell) {
      throw new Error("handlePaste: no cell found");
    }
    var _start = $cell.start(-1);
    var _rect = TableMap.get($cell.node(-1)).findCell($cell.pos - _start);
    var _tableMap = TableMap.get($cell.node(-1));
    insertCells(view.state, view.dispatch, _start, _rect, clearColumnWidthOfCells(cells, _rect, _tableMap));
    return true;
  }
  return false;
}

// Clear the pasted cells column widths so that it maintains
// the column widths of the destination table only if the pasted
// cells overlap with existing cells in the destination table.
// If the table grows on paste, keep the column widhts of the
// original table.
var clearColumnWidthOfCells = function clearColumnWidthOfCells(cells, rect, table) {
  var overlappingCells = [];
  var _iterator = _createForOfIteratorHelper(cells.rows),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      var colNum = rect.left;
      for (var index = 0; index < row.childCount; index++) {
        var _cell = row.child(index);
        if (colNum + _cell.attrs.colspan <= table.width) {
          overlappingCells.push(_cell);
          colNum += _cell.attrs.colspan;
        } else {
          break;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  for (var _i = 0, _overlappingCells = overlappingCells; _i < _overlappingCells.length; _i++) {
    var cell = _overlappingCells[_i];
    // TODO: ED-13910 - unblock Prosemirror bump
    // @ts-ignore
    cell.attrs.colwidth = null;
  }
  return cells;
};