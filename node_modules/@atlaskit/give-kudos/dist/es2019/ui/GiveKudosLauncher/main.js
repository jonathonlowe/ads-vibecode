/* main.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./main.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { IconButton } from '@atlaskit/button/new';
import Button from '@atlaskit/button/standard-button';
import { Drawer } from '@atlaskit/drawer/compiled';
import LinkExternalIcon from '@atlaskit/icon/core/link-external';
import ArrowLeft from '@atlaskit/icon/core/migration/arrow-left';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import Link from '@atlaskit/link';
import Modal, { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import Portal from '@atlaskit/portal';
import { Inline } from '@atlaskit/primitives';
import { layers } from '@atlaskit/theme/constants';
import { fetchMessagesForLocale } from '../../common/utils/fetch-messages-for-locale';
import i18nEN from '../../i18n/en';
import messages from '../../messages';
import { FlagEventType, isFlagEventTypeValue, KudosType } from '../../types';
const styles = {
  drawerCloseButtonContainer: "_kqswstnw _154ipxbi _1ltvpxbi",
  iframe: "_19itglyw"
};
const ANALYTICS_CHANNEL = 'atlas';
const GiveKudosLauncher = props => {
  var _props$recipient4;
  const [isCloseConfirmModalOpen, setIsCloseConfirmModalOpen] = useState(false);
  const [isDirty, setIsDirty] = useState(false);
  const iframeEl = useRef(null);
  const messageListenerEventHandler = useRef(e => {});
  const unloadEventHandler = useRef(e => {});
  const intl = useIntl();
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const {
    addFlag,
    teamCentralBaseUrl,
    analyticsSource,
    onClose,
    testId,
    onCreateKudosSuccess,
    isActionsEnabled
  } = props;
  const shouldBlockTransition = useCallback(e => {
    e.preventDefault();
    e.returnValue = intl.formatMessage(messages.unsavedKudosWarning);
  }, [intl]);
  const sendAnalytic = useCallback((action, options) => {
    var _props$recipient, _props$recipient2, _props$recipient3;
    const analyticsEvent = createAnalyticsEvent({
      action: action,
      actionSubject: 'createKudos',
      attributes: {
        ...options,
        analyticsSource,
        teamId: ((_props$recipient = props.recipient) === null || _props$recipient === void 0 ? void 0 : _props$recipient.type) === KudosType.TEAM ? props.recipient.recipientId : undefined,
        KudosType: (_props$recipient2 = props.recipient) === null || _props$recipient2 === void 0 ? void 0 : _props$recipient2.type,
        recipientId: (_props$recipient3 = props.recipient) === null || _props$recipient3 === void 0 ? void 0 : _props$recipient3.recipientId
      }
    });
    analyticsEvent.fire(ANALYTICS_CHANNEL);
  }, [analyticsSource, createAnalyticsEvent, props.recipient]);
  const closeDrawer = useCallback(() => {
    setIsDirty(false);
    setIsCloseConfirmModalOpen(false);
    onClose();
  }, [onClose]);
  const closeWarningModal = () => {
    setIsCloseConfirmModalOpen(false);
  };
  const createFlagWithJsonStringifiedInput = useCallback(flagEvent => {
    const handleCreateOrFail = addFlagConfig => {
      closeDrawer();
      addFlag && addFlag(addFlagConfig);
      onCreateKudosSuccess && addFlagConfig.type === 'success' && onCreateKudosSuccess(flagEvent);
    };
    switch (flagEvent.eventType) {
      case FlagEventType.KUDOS_CREATED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreatedFlag),
          id: `kudosCreatedFlag-${flagEvent.kudosUuid}`,
          description: /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.kudosCreatedDescriptionFlag, {
            values: {
              a: s => /*#__PURE__*/React.createElement(Link, {
                href: `${teamCentralBaseUrl}/people/kudos/${flagEvent.kudosUuid}`
              }, s)
            }
          })),
          actions: isActionsEnabled ? [{
            content: /*#__PURE__*/React.createElement(Inline, {
              space: "space.050",
              alignBlock: "center"
            }, /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreatedActionFlag), /*#__PURE__*/React.createElement(LinkExternalIcon, {
              label: "",
              color: "currentColor"
            })),
            href: `${teamCentralBaseUrl}/people/kudos/${flagEvent.kudosUuid}`,
            target: '_blank',
            onClick: () => undefined
          }] : undefined,
          type: 'success'
        });
        break;
      case FlagEventType.KUDOS_FAILED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreationFailedFlag),
          id: `jiraKudosCreationFailedFlag-${flagEvent.kudosUuid}`,
          description: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreationFailedDescriptionFlag),
          type: 'error'
        });
        break;
      case FlagEventType.JIRA_KUDOS_CREATED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreatedFlag),
          id: `kudosCreatedFlag-${flagEvent.kudosUuid}`,
          description: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreatedDescriptionFlag),
          type: 'success',
          actions: [{
            content: 'Track gift request',
            href: flagEvent.jiraKudosUrl
          }, {
            content: 'View kudos',
            href: `${teamCentralBaseUrl}/people/kudos/${flagEvent.kudosUuid}`
          }]
        });
        break;
      case FlagEventType.JIRA_KUDOS_FAILED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreationFailedFlag),
          id: `jiraKudosCreationFailedFlag-${flagEvent.kudosUuid}`,
          description: /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.JiraKudosCreationFailedDescriptionFlag, {
            values: {
              a: s => {
                var _flagEvent$jiraKudosF;
                return /*#__PURE__*/React.createElement(Link, {
                  href: (_flagEvent$jiraKudosF = flagEvent.jiraKudosFormUrl) !== null && _flagEvent$jiraKudosF !== void 0 ? _flagEvent$jiraKudosF : ''
                }, s);
              }
            }
          })),
          type: 'error',
          actions: [{
            content: 'Visit go/kudos',
            href: flagEvent.jiraKudosFormUrl
          }, {
            content: 'View kudos',
            href: `${teamCentralBaseUrl}/people/kudos/${flagEvent.kudosUuid}`
          }]
        });
        break;
      case FlagEventType.DIRTY:
        setIsDirty(true);
        break;
      case FlagEventType.CLOSE:
        closeDrawer();
        break;
      default:
        // Not a known FlagEventType
        return;
    }
  }, [addFlag, closeDrawer, teamCentralBaseUrl, onCreateKudosSuccess, isActionsEnabled]);
  const messageListener = useCallback(event => {
    if (!props.isOpen) {
      return;
    }
    if (event.data === 'dirty') {
      setIsDirty(true);
    } else if (event.data === 'close') {
      closeDrawer();
    } else {
      try {
        const eventData = JSON.parse(event.data);
        if (eventData.eventType && isFlagEventTypeValue(eventData.eventType)) {
          createFlagWithJsonStringifiedInput(eventData);
        }
      } catch (e) {
        // Swallow any errors
      }
    }
  }, [props.isOpen, closeDrawer, createFlagWithJsonStringifiedInput]);
  useEffect(() => {
    window.removeEventListener('message', messageListenerEventHandler.current);
    messageListenerEventHandler.current = messageListener;
    window.addEventListener('message', messageListenerEventHandler.current, false);
    return () => {
      window.removeEventListener('message', messageListenerEventHandler.current);
    };
  }, [messageListener]);
  useEffect(() => {
    window.removeEventListener('beforeunload', unloadEventHandler.current);
    if (isDirty) {
      unloadEventHandler.current = shouldBlockTransition;
      window.addEventListener('beforeunload', unloadEventHandler.current, false);
    }
    return () => {
      window.removeEventListener('beforeunload', unloadEventHandler.current);
    };
  }, [isDirty, shouldBlockTransition]);
  const sendCancelAnalytic = () => {
    sendAnalytic('cancelled', {});
  };
  const handleCloseDrawerClickedFunc = () => {
    if (!isDirty) {
      sendCancelAnalytic();
      closeDrawer();
      return;
    }
    setIsCloseConfirmModalOpen(true);
  };
  const handleCloseDrawerClickedFuncRef = useRef(handleCloseDrawerClickedFunc);
  useEffect(() => {
    handleCloseDrawerClickedFuncRef.current = handleCloseDrawerClickedFunc;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDirty]);
  const handleCloseDrawerClicked = () => {
    handleCloseDrawerClickedFuncRef.current();
  };
  const recipientParam = props.recipient ? `&type=${props.recipient.type}&recipientId=${props.recipient.recipientId}` : '';
  const giveKudosUrl = `${props.teamCentralBaseUrl}/give-kudos?cloudId=${props.cloudId}${recipientParam}&unsavedMessage=${intl.formatMessage(messages.unsavedKudosWarning)}`;
  const renderDrawer = useMemo(() => {
    if (props.isOpen) {
      sendAnalytic('opened', {});
    }
    return /*#__PURE__*/React.createElement(Drawer, {
      width: "full",
      isOpen: props.isOpen,
      zIndex: layers.modal(),
      onClose: handleCloseDrawerClicked
    }, /*#__PURE__*/React.createElement("div", {
      className: ax([styles.drawerCloseButtonContainer])
    }, /*#__PURE__*/React.createElement(IconButton, {
      onClick: handleCloseDrawerClicked,
      icon: ArrowLeft,
      label: intl.formatMessage(messages.closeDrawerButtonLabel),
      shape: "circle",
      appearance: "subtle"
    })), /*#__PURE__*/React.createElement("iframe", {
      src: giveKudosUrl,
      ref: iframeEl,
      width: "100%",
      height: "100%",
      frameBorder: "0",
      allow: "camera;microphone",
      className: ax([styles.iframe])
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [(_props$recipient4 = props.recipient) === null || _props$recipient4 === void 0 ? void 0 : _props$recipient4.recipientId, props.isOpen]);
  return /*#__PURE__*/React.createElement(Portal, {
    zIndex: layers.modal()
  }, /*#__PURE__*/React.createElement("div", {
    "data-testid": testId
  }, /*#__PURE__*/React.createElement(ModalTransition, null, isCloseConfirmModalOpen && /*#__PURE__*/React.createElement(Modal, {
    onClose: closeWarningModal,
    width: "small"
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.confirmCloseTitle))), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarning)), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: closeWarningModal
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarningCancelButton)), /*#__PURE__*/React.createElement(Button, {
    appearance: "primary",
    onClick: () => {
      sendCancelAnalytic();
      closeDrawer();
    }
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarningCloseButton))))), renderDrawer));
};
const ComposedGiveKudosLauncher = props => {
  return /*#__PURE__*/React.createElement(IntlMessagesProvider, {
    loaderFn: fetchMessagesForLocale,
    defaultMessages: i18nEN
  }, /*#__PURE__*/React.createElement(GiveKudosLauncher, props));
};
export default ComposedGiveKudosLauncher;