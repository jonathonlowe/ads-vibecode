import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import messages from '../../i18n/en';
var localeMap = {
  pt: 'pt-BR',
  'pt-PT': 'pt-BR',
  'en-AU': 'en-GB'
};
export var fetchMessagesForLocale = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(locale) {
    var _ref2, _localeMap$locale, targetLocale, _messages, parentLocale, _messages2;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          targetLocale = ((_ref2 = (_localeMap$locale = localeMap[locale]) !== null && _localeMap$locale !== void 0 ? _localeMap$locale : locale) !== null && _ref2 !== void 0 ? _ref2 : '').replace('-', '_');
          if (targetLocale) {
            _context.next = 4;
            break;
          }
          throw new Error('No mapped locale');
        case 4:
          _context.next = 6;
          return import( /* webpackChunkName: "@atlaskit-internal_@atlassian/team-central-i18n-[request]" */"../../i18n/".concat(targetLocale));
        case 6:
          _messages = _context.sent;
          return _context.abrupt("return", _messages.default);
        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](0);
        case 12:
          _context.prev = 12;
          parentLocale = locale.split(/[-_]/)[0];
          _context.next = 16;
          return import( /* webpackChunkName: "@atlaskit-internal_@atlassian/team-central-i18n-[request]" */"../../i18n/".concat(parentLocale));
        case 16:
          _messages2 = _context.sent;
          return _context.abrupt("return", _messages2.default);
        case 20:
          _context.prev = 20;
          _context.t1 = _context["catch"](12);
        case 22:
          return _context.abrupt("return", messages);
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 10], [12, 20]]);
  }));
  return function fetchMessagesForLocale(_x) {
    return _ref.apply(this, arguments);
  };
}();