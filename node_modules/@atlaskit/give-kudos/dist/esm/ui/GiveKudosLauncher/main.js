/* main.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./main.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { IconButton } from '@atlaskit/button/new';
import Button from '@atlaskit/button/standard-button';
import { Drawer } from '@atlaskit/drawer/compiled';
import LinkExternalIcon from '@atlaskit/icon/core/link-external';
import ArrowLeft from '@atlaskit/icon/core/migration/arrow-left';
import { IntlMessagesProvider } from '@atlaskit/intl-messages-provider';
import Link from '@atlaskit/link';
import Modal, { ModalBody, ModalFooter, ModalHeader, ModalTitle, ModalTransition } from '@atlaskit/modal-dialog';
import Portal from '@atlaskit/portal';
import { Inline } from '@atlaskit/primitives';
import { layers } from '@atlaskit/theme/constants';
import { fetchMessagesForLocale } from '../../common/utils/fetch-messages-for-locale';
import i18nEN from '../../i18n/en';
import messages from '../../messages';
import { FlagEventType, isFlagEventTypeValue, KudosType } from '../../types';
var styles = {
  drawerCloseButtonContainer: "_kqswstnw _154ipxbi _1ltvpxbi",
  iframe: "_19itglyw"
};
var ANALYTICS_CHANNEL = 'atlas';
var GiveKudosLauncher = function GiveKudosLauncher(props) {
  var _props$recipient4;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isCloseConfirmModalOpen = _useState2[0],
    setIsCloseConfirmModalOpen = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isDirty = _useState4[0],
    setIsDirty = _useState4[1];
  var iframeEl = useRef(null);
  var messageListenerEventHandler = useRef(function (e) {});
  var unloadEventHandler = useRef(function (e) {});
  var intl = useIntl();
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var addFlag = props.addFlag,
    teamCentralBaseUrl = props.teamCentralBaseUrl,
    analyticsSource = props.analyticsSource,
    onClose = props.onClose,
    testId = props.testId,
    onCreateKudosSuccess = props.onCreateKudosSuccess,
    isActionsEnabled = props.isActionsEnabled;
  var shouldBlockTransition = useCallback(function (e) {
    e.preventDefault();
    e.returnValue = intl.formatMessage(messages.unsavedKudosWarning);
  }, [intl]);
  var sendAnalytic = useCallback(function (action, options) {
    var _props$recipient, _props$recipient2, _props$recipient3;
    var analyticsEvent = createAnalyticsEvent({
      action: action,
      actionSubject: 'createKudos',
      attributes: _objectSpread(_objectSpread({}, options), {}, {
        analyticsSource: analyticsSource,
        teamId: ((_props$recipient = props.recipient) === null || _props$recipient === void 0 ? void 0 : _props$recipient.type) === KudosType.TEAM ? props.recipient.recipientId : undefined,
        KudosType: (_props$recipient2 = props.recipient) === null || _props$recipient2 === void 0 ? void 0 : _props$recipient2.type,
        recipientId: (_props$recipient3 = props.recipient) === null || _props$recipient3 === void 0 ? void 0 : _props$recipient3.recipientId
      })
    });
    analyticsEvent.fire(ANALYTICS_CHANNEL);
  }, [analyticsSource, createAnalyticsEvent, props.recipient]);
  var closeDrawer = useCallback(function () {
    setIsDirty(false);
    setIsCloseConfirmModalOpen(false);
    onClose();
  }, [onClose]);
  var closeWarningModal = function closeWarningModal() {
    setIsCloseConfirmModalOpen(false);
  };
  var createFlagWithJsonStringifiedInput = useCallback(function (flagEvent) {
    var handleCreateOrFail = function handleCreateOrFail(addFlagConfig) {
      closeDrawer();
      addFlag && addFlag(addFlagConfig);
      onCreateKudosSuccess && addFlagConfig.type === 'success' && onCreateKudosSuccess(flagEvent);
    };
    switch (flagEvent.eventType) {
      case FlagEventType.KUDOS_CREATED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreatedFlag),
          id: "kudosCreatedFlag-".concat(flagEvent.kudosUuid),
          description: /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.kudosCreatedDescriptionFlag, {
            values: {
              a: function a(s) {
                return /*#__PURE__*/React.createElement(Link, {
                  href: "".concat(teamCentralBaseUrl, "/people/kudos/").concat(flagEvent.kudosUuid)
                }, s);
              }
            }
          })),
          actions: isActionsEnabled ? [{
            content: /*#__PURE__*/React.createElement(Inline, {
              space: "space.050",
              alignBlock: "center"
            }, /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreatedActionFlag), /*#__PURE__*/React.createElement(LinkExternalIcon, {
              label: "",
              color: "currentColor"
            })),
            href: "".concat(teamCentralBaseUrl, "/people/kudos/").concat(flagEvent.kudosUuid),
            target: '_blank',
            onClick: function onClick() {
              return undefined;
            }
          }] : undefined,
          type: 'success'
        });
        break;
      case FlagEventType.KUDOS_FAILED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreationFailedFlag),
          id: "jiraKudosCreationFailedFlag-".concat(flagEvent.kudosUuid),
          description: /*#__PURE__*/React.createElement(FormattedMessage, messages.kudosCreationFailedDescriptionFlag),
          type: 'error'
        });
        break;
      case FlagEventType.JIRA_KUDOS_CREATED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreatedFlag),
          id: "kudosCreatedFlag-".concat(flagEvent.kudosUuid),
          description: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreatedDescriptionFlag),
          type: 'success',
          actions: [{
            content: 'Track gift request',
            href: flagEvent.jiraKudosUrl
          }, {
            content: 'View kudos',
            href: "".concat(teamCentralBaseUrl, "/people/kudos/").concat(flagEvent.kudosUuid)
          }]
        });
        break;
      case FlagEventType.JIRA_KUDOS_FAILED:
        handleCreateOrFail({
          title: /*#__PURE__*/React.createElement(FormattedMessage, messages.JiraKudosCreationFailedFlag),
          id: "jiraKudosCreationFailedFlag-".concat(flagEvent.kudosUuid),
          description: /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.JiraKudosCreationFailedDescriptionFlag, {
            values: {
              a: function a(s) {
                var _flagEvent$jiraKudosF;
                return /*#__PURE__*/React.createElement(Link, {
                  href: (_flagEvent$jiraKudosF = flagEvent.jiraKudosFormUrl) !== null && _flagEvent$jiraKudosF !== void 0 ? _flagEvent$jiraKudosF : ''
                }, s);
              }
            }
          })),
          type: 'error',
          actions: [{
            content: 'Visit go/kudos',
            href: flagEvent.jiraKudosFormUrl
          }, {
            content: 'View kudos',
            href: "".concat(teamCentralBaseUrl, "/people/kudos/").concat(flagEvent.kudosUuid)
          }]
        });
        break;
      case FlagEventType.DIRTY:
        setIsDirty(true);
        break;
      case FlagEventType.CLOSE:
        closeDrawer();
        break;
      default:
        // Not a known FlagEventType
        return;
    }
  }, [addFlag, closeDrawer, teamCentralBaseUrl, onCreateKudosSuccess, isActionsEnabled]);
  var messageListener = useCallback(function (event) {
    if (!props.isOpen) {
      return;
    }
    if (event.data === 'dirty') {
      setIsDirty(true);
    } else if (event.data === 'close') {
      closeDrawer();
    } else {
      try {
        var eventData = JSON.parse(event.data);
        if (eventData.eventType && isFlagEventTypeValue(eventData.eventType)) {
          createFlagWithJsonStringifiedInput(eventData);
        }
      } catch (e) {
        // Swallow any errors
      }
    }
  }, [props.isOpen, closeDrawer, createFlagWithJsonStringifiedInput]);
  useEffect(function () {
    window.removeEventListener('message', messageListenerEventHandler.current);
    messageListenerEventHandler.current = messageListener;
    window.addEventListener('message', messageListenerEventHandler.current, false);
    return function () {
      window.removeEventListener('message', messageListenerEventHandler.current);
    };
  }, [messageListener]);
  useEffect(function () {
    window.removeEventListener('beforeunload', unloadEventHandler.current);
    if (isDirty) {
      unloadEventHandler.current = shouldBlockTransition;
      window.addEventListener('beforeunload', unloadEventHandler.current, false);
    }
    return function () {
      window.removeEventListener('beforeunload', unloadEventHandler.current);
    };
  }, [isDirty, shouldBlockTransition]);
  var sendCancelAnalytic = function sendCancelAnalytic() {
    sendAnalytic('cancelled', {});
  };
  var handleCloseDrawerClickedFunc = function handleCloseDrawerClickedFunc() {
    if (!isDirty) {
      sendCancelAnalytic();
      closeDrawer();
      return;
    }
    setIsCloseConfirmModalOpen(true);
  };
  var handleCloseDrawerClickedFuncRef = useRef(handleCloseDrawerClickedFunc);
  useEffect(function () {
    handleCloseDrawerClickedFuncRef.current = handleCloseDrawerClickedFunc;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDirty]);
  var handleCloseDrawerClicked = function handleCloseDrawerClicked() {
    handleCloseDrawerClickedFuncRef.current();
  };
  var recipientParam = props.recipient ? "&type=".concat(props.recipient.type, "&recipientId=").concat(props.recipient.recipientId) : '';
  var giveKudosUrl = "".concat(props.teamCentralBaseUrl, "/give-kudos?cloudId=").concat(props.cloudId).concat(recipientParam, "&unsavedMessage=").concat(intl.formatMessage(messages.unsavedKudosWarning));
  var renderDrawer = useMemo(function () {
    if (props.isOpen) {
      sendAnalytic('opened', {});
    }
    return /*#__PURE__*/React.createElement(Drawer, {
      width: "full",
      isOpen: props.isOpen,
      zIndex: layers.modal(),
      onClose: handleCloseDrawerClicked
    }, /*#__PURE__*/React.createElement("div", {
      className: ax([styles.drawerCloseButtonContainer])
    }, /*#__PURE__*/React.createElement(IconButton, {
      onClick: handleCloseDrawerClicked,
      icon: ArrowLeft,
      label: intl.formatMessage(messages.closeDrawerButtonLabel),
      shape: "circle",
      appearance: "subtle"
    })), /*#__PURE__*/React.createElement("iframe", {
      src: giveKudosUrl,
      ref: iframeEl,
      width: "100%",
      height: "100%",
      frameBorder: "0",
      allow: "camera;microphone",
      className: ax([styles.iframe])
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [(_props$recipient4 = props.recipient) === null || _props$recipient4 === void 0 ? void 0 : _props$recipient4.recipientId, props.isOpen]);
  return /*#__PURE__*/React.createElement(Portal, {
    zIndex: layers.modal()
  }, /*#__PURE__*/React.createElement("div", {
    "data-testid": testId
  }, /*#__PURE__*/React.createElement(ModalTransition, null, isCloseConfirmModalOpen && /*#__PURE__*/React.createElement(Modal, {
    onClose: closeWarningModal,
    width: "small"
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement(ModalTitle, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.confirmCloseTitle))), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarning)), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(Button, {
    appearance: "subtle",
    onClick: closeWarningModal
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarningCancelButton)), /*#__PURE__*/React.createElement(Button, {
    appearance: "primary",
    onClick: function onClick() {
      sendCancelAnalytic();
      closeDrawer();
    }
  }, /*#__PURE__*/React.createElement(FormattedMessage, messages.unsavedKudosWarningCloseButton))))), renderDrawer));
};
var ComposedGiveKudosLauncher = function ComposedGiveKudosLauncher(props) {
  return /*#__PURE__*/React.createElement(IntlMessagesProvider, {
    loaderFn: fetchMessagesForLocale,
    defaultMessages: i18nEN
  }, /*#__PURE__*/React.createElement(GiveKudosLauncher, props));
};
export default ComposedGiveKudosLauncher;