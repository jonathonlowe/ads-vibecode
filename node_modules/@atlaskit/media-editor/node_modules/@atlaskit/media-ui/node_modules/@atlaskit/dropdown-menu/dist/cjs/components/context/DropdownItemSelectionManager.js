"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var prop_types_1 = tslib_1.__importDefault(require("prop-types"));
var contextNamespace_1 = require("../../util/contextNamespace");
var DropdownItemSelectionManager = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownItemSelectionManager, _super);
    function DropdownItemSelectionManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setItemSelected = function (itemId, isSelected, defaultSelected) {
            var _a = _this.props, behavior = _a.behavior, groupId = _a.groupId;
            var setSelected = function (finalBool) {
                if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
                    _this.setCheckboxItemSelected(itemId, finalBool);
                }
                else if (behavior === 'radio' || behavior === 'menuitemradio') {
                    _this.setRadioItemSelected(itemId, finalBool);
                }
            };
            // If a radio or checkbox item has defaultSelected set on it, that it will try to set its
            // selected state to true each time it mounts (which happens whenever the dropdown is re-
            // opened by the user. The following check makes sure that the defaultSelected behaviour
            // only applies on the first mount of the radio/checkbox.
            if (typeof isSelected === 'boolean') {
                // If isSelected is explicitly provided, set it to that
                setSelected(isSelected);
            }
            else if (defaultSelected) {
                if (!_this.hasAlreadyAppliedDefaultSelected(itemId)) {
                    // If using defaultSelected and this is first mount, select the item
                    setSelected(true);
                    _this.context[contextNamespace_1.selectionCacheContext].markItemAsDefaultApplied(groupId, itemId);
                }
                else {
                    // If using defaultSelected and not first mount, set isSelected to cached value
                    setSelected(_this.isItemSelectedInCache(itemId));
                }
            }
            else {
                setSelected(_this.isItemSelectedInCache(itemId));
            }
        };
        _this.setCheckboxItemSelected = function (itemId, isSelected) {
            var _a = contextNamespace_1.selectionCacheContext, cache = _this.context[_a];
            var alreadySelected = cache.itemsInGroup(_this.props.groupId);
            var isAlreadySelected = cache.isItemSelected(_this.props.groupId, itemId);
            if (isSelected && !isAlreadySelected) {
                _this.updateCacheContextWithSelections(tslib_1.__spread(alreadySelected, [
                    { id: itemId, groupId: _this.props.groupId },
                ]));
            }
            else if (!isSelected && isAlreadySelected) {
                var withoutCurrentItem = alreadySelected.filter(function (item) { return item.id !== itemId; });
                _this.updateCacheContextWithSelections(withoutCurrentItem);
            }
        };
        _this.setRadioItemSelected = function (itemId, isSelected) {
            var _a = contextNamespace_1.selectionCacheContext, cache = _this.context[_a];
            var isAlreadySelected = cache.isItemSelected(_this.props.groupId, itemId);
            if (isAlreadySelected && !isSelected) {
                _this.updateCacheContextWithSelections([]);
            }
            else if (!isAlreadySelected && isSelected) {
                _this.updateCacheContextWithSelections([
                    { id: itemId, groupId: _this.props.groupId },
                ]);
            }
        };
        _this.isItemSelectedInCache = function (itemId) {
            return _this.context[contextNamespace_1.selectionCacheContext].isItemSelected(_this.props.groupId, itemId);
        };
        _this.handleItemClicked = function (clickedItemId) {
            var behavior = _this.props.behavior;
            if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
                _this.handleCheckboxItemClicked(clickedItemId);
            }
            else if (behavior === 'radio' || behavior === 'menuitemradio') {
                _this.handleRadioItemClicked(clickedItemId);
            }
        };
        _this.hasAlreadyAppliedDefaultSelected = function (itemId) {
            return _this.context[contextNamespace_1.selectionCacheContext].hasItemAlreadyHadDefaultSelectedApplied(_this.props.groupId, itemId);
        };
        _this.handleCheckboxItemClicked = function (clickedItemId) {
            var _a = contextNamespace_1.selectionCacheContext, cache = _this.context[_a];
            var itemsInGroup = cache.itemsInGroup(_this.props.groupId);
            var newSelections = cache.isItemSelected(_this.props.groupId, clickedItemId)
                ? itemsInGroup.filter(function (item) { return item.id !== clickedItemId; })
                : tslib_1.__spread(itemsInGroup, [{ id: clickedItemId, groupId: _this.props.groupId }]);
            _this.updateCacheContextWithSelections(newSelections);
        };
        _this.handleRadioItemClicked = function (clickedItemId) {
            _this.updateCacheContextWithSelections([
                { id: clickedItemId, groupId: _this.props.groupId },
            ]);
        };
        _this.updateCacheContextWithSelections = function (itemSelections) {
            _this.context[contextNamespace_1.selectionCacheContext].itemSelectionsChanged(_this.props.groupId, itemSelections);
        };
        return _this;
    }
    DropdownItemSelectionManager.prototype.getChildContext = function () {
        var _a;
        var _this = this;
        return _a = {},
            _a[contextNamespace_1.selectionManagerContext] = {
                isItemSelected: function (itemId) {
                    return _this.context[contextNamespace_1.selectionCacheContext].isItemSelected(_this.props.groupId, itemId);
                },
                itemClicked: this.handleItemClicked,
                setItemSelected: this.setItemSelected,
            },
            _a;
    };
    DropdownItemSelectionManager.prototype.render = function () {
        return react_1.default.createElement("div", null, this.props.children);
    };
    DropdownItemSelectionManager.childContextTypes = (_a = {},
        _a[contextNamespace_1.selectionManagerContext] = prop_types_1.default.object,
        _a);
    DropdownItemSelectionManager.contextTypes = (_b = {},
        _b[contextNamespace_1.selectionCacheContext] = prop_types_1.default.object.isRequired,
        _b);
    return DropdownItemSelectionManager;
}(react_1.Component));
exports.default = DropdownItemSelectionManager;
//# sourceMappingURL=DropdownItemSelectionManager.js.map