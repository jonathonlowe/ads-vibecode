/// <reference types="@emotion/core" />
import { CSSProperties } from 'react';
export declare type ThemeAppearance = 'subtle' | 'standard' | 'none';
export interface ThemeProps {
    appearance: ThemeAppearance;
    isDisabled: boolean;
    isInvalid: boolean;
    isFocused: boolean;
    isHovered: boolean;
    isMonospaced: boolean;
    isCompact: boolean;
    mode: 'dark' | 'light';
    width?: string | number;
}
export interface ThemeTokens {
    container: CSSProperties;
    input: CSSProperties;
}
export declare const Theme: {
    Consumer: import("react").ComponentType<ThemeProps & {
        children: (tokens: ThemeTokens) => import("react").ReactNode;
    }>;
    Provider: import("react").ComponentType<{
        children?: import("react").ReactNode;
        value?: import("@atlaskit/theme/dist/cjs/components").ThemeProp<ThemeTokens, ThemeProps> | undefined;
    }>;
};
export declare const themeTokens: {
    backgroundColor: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorFocus: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    backgroundColorHover: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColor: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    borderColorFocus: {
        standard: {
            light: string;
            dark: string;
        };
        subtle: {
            light: string;
            dark: string;
        };
        none: {
            light: string;
            dark: string;
        };
    };
    placeholderTextColor: {
        light: string;
        dark: string;
    };
    textColor: {
        light: string;
        dark: string;
    };
    invalidRules: {
        light: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
        };
        dark: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
        };
    };
    disabledRules: {
        light: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
            textColor: string;
        };
        dark: {
            backgroundColor: string;
            backgroundColorFocus: string;
            backgroundColorHover: string;
            borderColor: string;
            borderColorFocus: string;
            textColor: string;
        };
    };
};
