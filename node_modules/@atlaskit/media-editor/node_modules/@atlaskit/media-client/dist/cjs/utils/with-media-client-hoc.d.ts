import * as React from 'react';
import { Context, MediaClientConfig } from '@atlaskit/media-core';
import { MediaClient } from '../client/media-client';
import { Omit, XOR } from '@atlaskit/type-helpers';
export interface WithContext {
    context: Context;
}
export interface WithMediaClientConfig {
    mediaClientConfig: MediaClientConfig;
}
export interface WithMediaClient {
    mediaClient: MediaClient;
}
export declare type WithContextOrMediaClientConfig = XOR<WithContext, WithMediaClientConfig>;
export declare const getMediaClient: (props: (import("@atlaskit/type-helpers").Without<WithContext, WithMediaClientConfig> & WithMediaClientConfig) | (import("@atlaskit/type-helpers").Without<WithMediaClientConfig, WithContext> & WithContext)) => MediaClient;
export declare type WithContextOrMediaClientConfigProps<P extends WithMediaClient> = Omit<P, 'mediaClient'> & WithContextOrMediaClientConfig;
export declare type WithMediaClientFunction = <P extends WithMediaClient>(Component: React.ComponentType<P>) => React.ComponentType<WithContextOrMediaClientConfigProps<P>>;
export declare const withMediaClient: WithMediaClientFunction;
