import React from 'react';
import { type EventDispatcher } from '@atlaskit/editor-common/event-dispatcher';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import ReactNodeView from '@atlaskit/editor-common/react-node-view';
import { type ExtractInjectionAPI, type getPosHandlerNode } from '@atlaskit/editor-common/types';
import { type Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import { type EditorView } from '@atlaskit/editor-prosemirror/view';
import { type LayoutPlugin } from '../layoutPluginType';
import { type LayoutPluginOptions } from '../types';
type LayoutSectionViewProps = {
    node: PMNode;
    view: EditorView;
    getPos: getPosHandlerNode;
    portalProviderAPI: PortalProviderAPI;
    eventDispatcher: EventDispatcher;
    pluginInjectionApi?: ExtractInjectionAPI<LayoutPlugin>;
    options: LayoutPluginOptions;
};
type ForwardRef = (ref: HTMLElement | null) => void;
export declare class LayoutSectionView extends ReactNodeView<LayoutSectionViewProps> {
    options: LayoutPluginOptions;
    layoutDOM?: HTMLElement;
    isEmpty?: boolean;
    constructor(props: {
        node: PMNode;
        view: EditorView;
        getPos: getPosHandlerNode;
        portalProviderAPI: PortalProviderAPI;
        eventDispatcher: EventDispatcher;
        pluginInjectionApi: ExtractInjectionAPI<LayoutPlugin>;
        options: LayoutPluginOptions;
    });
    getContentDOM(): {
        dom: HTMLElement;
        contentDOM: HTMLElement | undefined;
    };
    setDomAttrs(node: PMNode, element: HTMLElement): void;
    render(props: LayoutSectionViewProps, forwardRef: ForwardRef): React.JSX.Element;
    ignoreMutation(mutation: MutationRecord | {
        type: 'selection';
        target: Node;
    }): boolean;
}
export {};
