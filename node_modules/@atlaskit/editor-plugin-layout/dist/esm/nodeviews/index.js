import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { useCallback } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import ReactNodeView from '@atlaskit/editor-common/react-node-view';
import { BreakoutResizer, ignoreResizerMutations } from '@atlaskit/editor-common/resizer';
import { DOMSerializer } from '@atlaskit/editor-prosemirror/model';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { selectIntoLayout } from '../pm-plugins/utils';
var isEmptyParagraph = function isEmptyParagraph(node) {
  return !!node && node.type.name === 'paragraph' && !node.childCount;
};
var isBreakoutAvailable = function isBreakoutAvailable(schema) {
  return Boolean(schema.marks.breakout);
};
var isEmptyLayout = function isEmptyLayout(node) {
  if (!node) {
    return false;
  }
  // fast check
  // each column should have size 2 from layoutcolumn and 2 from empty paragraph
  if (node.content.size / node.childCount !== 4) {
    return false;
  }
  var isEmpty = true;
  node.content.forEach(function (maybelayoutColumn) {
    if (maybelayoutColumn.type.name !== 'layoutColumn' || maybelayoutColumn.childCount > 1 || !isEmptyParagraph(maybelayoutColumn.firstChild)) {
      isEmpty = false;
      return;
    }
  });
  return isEmpty;
};
var LayoutBreakoutResizer = function LayoutBreakoutResizer(_ref) {
  var _pluginInjectionApi$a;
  var pluginInjectionApi = _ref.pluginInjectionApi,
    forwardRef = _ref.forwardRef,
    getPos = _ref.getPos,
    view = _ref.view,
    parentRef = _ref.parentRef;
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['editorDisabled']),
    editorDisabledState = _useSharedPluginState.editorDisabledState;
  var getEditorWidth = function getEditorWidth() {
    var _pluginInjectionApi$w;
    return pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$w = pluginInjectionApi.width) === null || _pluginInjectionApi$w === void 0 ? void 0 : _pluginInjectionApi$w.sharedState.currentState();
  };
  var displayGapCursor = useCallback(function (toggle) {
    var _pluginInjectionApi$c, _pluginInjectionApi$c2, _pluginInjectionApi$s;
    return (_pluginInjectionApi$c = pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$c2 = pluginInjectionApi.core) === null || _pluginInjectionApi$c2 === void 0 ? void 0 : _pluginInjectionApi$c2.actions.execute(pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$s = pluginInjectionApi.selection) === null || _pluginInjectionApi$s === void 0 ? void 0 : _pluginInjectionApi$s.commands.displayGapCursor(toggle))) !== null && _pluginInjectionApi$c !== void 0 ? _pluginInjectionApi$c : false;
  }, [pluginInjectionApi]);
  var displayGuidelines = useCallback(function (guidelines) {
    var _pluginInjectionApi$g;
    pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$g = pluginInjectionApi.guideline) === null || _pluginInjectionApi$g === void 0 || (_pluginInjectionApi$g = _pluginInjectionApi$g.actions) === null || _pluginInjectionApi$g === void 0 || _pluginInjectionApi$g.displayGuideline(view)({
      guidelines: guidelines
    });
  }, [pluginInjectionApi, view]);

  // we want to hide the floating toolbar for other nodes.
  // e.g. info panel inside the current layout section
  var selectIntoCurrentLayout = useCallback(function () {
    var pos = getPos();
    if (pos === undefined) {
      return;
    }
    // put the selection into the first column of the layout
    selectIntoLayout(view, pos, 0);
  }, [getPos, view]);
  return /*#__PURE__*/React.createElement(BreakoutResizer, {
    getRef: forwardRef,
    getPos: getPos,
    editorView: view,
    nodeType: "layoutSection",
    getEditorWidth: getEditorWidth,
    disabled: (editorDisabledState === null || editorDisabledState === void 0 ? void 0 : editorDisabledState.editorDisabled) === true || !isBreakoutAvailable(view.state.schema),
    parentRef: parentRef,
    editorAnalyticsApi: pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions,
    displayGuidelines: editorExperiment('single_column_layouts', true) ? displayGuidelines : undefined,
    displayGapCursor: displayGapCursor,
    onResizeStart: function onResizeStart() {
      selectIntoCurrentLayout();
    }
  });
};
var toDOM = function toDOM() {
  return ['div', {
    class: 'layout-section-container'
  }, ['div', {
    'data-layout-section': true
  }, 0]];
};
export var LayoutSectionView = /*#__PURE__*/function (_ReactNodeView) {
  function LayoutSectionView(props) {
    var _this;
    _classCallCheck(this, LayoutSectionView);
    _this = _callSuper(this, LayoutSectionView, [props.node, props.view, props.getPos, props.portalProviderAPI, props.eventDispatcher, props]);
    _this.isEmpty = isEmptyLayout(_this.node);
    _this.options = props.options;
    return _this;
  }
  _inherits(LayoutSectionView, _ReactNodeView);
  return _createClass(LayoutSectionView, [{
    key: "getContentDOM",
    value: function getContentDOM() {
      var _ref2 = DOMSerializer.renderSpec(document, toDOM()),
        container = _ref2.dom,
        contentDOM = _ref2.contentDOM;

      // Ignored via go/ees005
      // eslint-disable-next-line @atlaskit/editor/no-as-casting
      this.layoutDOM = container.querySelector('[data-layout-section]');
      this.layoutDOM.setAttribute('data-column-rule-style', this.node.attrs.columnRuleStyle);
      this.layoutDOM.setAttribute('data-empty-layout', Boolean(this.isEmpty).toString());
      return {
        dom: container,
        contentDOM: contentDOM
      };
    }
  }, {
    key: "setDomAttrs",
    value: function setDomAttrs(node, element) {
      if (this.layoutDOM) {
        this.layoutDOM.setAttribute('data-column-rule-style', node.attrs.columnRuleStyle);
      }
    }
  }, {
    key: "render",
    value: function render(props, forwardRef) {
      this.isEmpty = isEmptyLayout(this.node);
      if (this.layoutDOM) {
        this.layoutDOM.setAttribute('data-empty-layout', Boolean(this.isEmpty).toString());
      }
      return /*#__PURE__*/React.createElement(LayoutBreakoutResizer, {
        pluginInjectionApi: props.pluginInjectionApi,
        forwardRef: forwardRef,
        getPos: props.getPos,
        view: props.view,
        parentRef: this.layoutDOM
      });
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation(mutation) {
      return ignoreResizerMutations(mutation);
    }
  }]);
}(ReactNodeView);