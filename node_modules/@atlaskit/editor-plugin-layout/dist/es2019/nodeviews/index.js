import React, { useCallback } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import ReactNodeView from '@atlaskit/editor-common/react-node-view';
import { BreakoutResizer, ignoreResizerMutations } from '@atlaskit/editor-common/resizer';
import { DOMSerializer } from '@atlaskit/editor-prosemirror/model';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { selectIntoLayout } from '../pm-plugins/utils';
const isEmptyParagraph = node => {
  return !!node && node.type.name === 'paragraph' && !node.childCount;
};
const isBreakoutAvailable = schema => {
  return Boolean(schema.marks.breakout);
};
const isEmptyLayout = node => {
  if (!node) {
    return false;
  }
  // fast check
  // each column should have size 2 from layoutcolumn and 2 from empty paragraph
  if (node.content.size / node.childCount !== 4) {
    return false;
  }
  let isEmpty = true;
  node.content.forEach(maybelayoutColumn => {
    if (maybelayoutColumn.type.name !== 'layoutColumn' || maybelayoutColumn.childCount > 1 || !isEmptyParagraph(maybelayoutColumn.firstChild)) {
      isEmpty = false;
      return;
    }
  });
  return isEmpty;
};
const LayoutBreakoutResizer = ({
  pluginInjectionApi,
  forwardRef,
  getPos,
  view,
  parentRef
}) => {
  var _pluginInjectionApi$a;
  const {
    editorDisabledState
  } = useSharedPluginState(pluginInjectionApi, ['editorDisabled']);
  const getEditorWidth = () => {
    var _pluginInjectionApi$w;
    return pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$w = pluginInjectionApi.width) === null || _pluginInjectionApi$w === void 0 ? void 0 : _pluginInjectionApi$w.sharedState.currentState();
  };
  const displayGapCursor = useCallback(toggle => {
    var _pluginInjectionApi$c, _pluginInjectionApi$c2, _pluginInjectionApi$s;
    return (_pluginInjectionApi$c = pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$c2 = pluginInjectionApi.core) === null || _pluginInjectionApi$c2 === void 0 ? void 0 : _pluginInjectionApi$c2.actions.execute(pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$s = pluginInjectionApi.selection) === null || _pluginInjectionApi$s === void 0 ? void 0 : _pluginInjectionApi$s.commands.displayGapCursor(toggle))) !== null && _pluginInjectionApi$c !== void 0 ? _pluginInjectionApi$c : false;
  }, [pluginInjectionApi]);
  const displayGuidelines = useCallback(guidelines => {
    var _pluginInjectionApi$g, _pluginInjectionApi$g2;
    pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$g = pluginInjectionApi.guideline) === null || _pluginInjectionApi$g === void 0 ? void 0 : (_pluginInjectionApi$g2 = _pluginInjectionApi$g.actions) === null || _pluginInjectionApi$g2 === void 0 ? void 0 : _pluginInjectionApi$g2.displayGuideline(view)({
      guidelines
    });
  }, [pluginInjectionApi, view]);

  // we want to hide the floating toolbar for other nodes.
  // e.g. info panel inside the current layout section
  const selectIntoCurrentLayout = useCallback(() => {
    const pos = getPos();
    if (pos === undefined) {
      return;
    }
    // put the selection into the first column of the layout
    selectIntoLayout(view, pos, 0);
  }, [getPos, view]);
  return /*#__PURE__*/React.createElement(BreakoutResizer, {
    getRef: forwardRef,
    getPos: getPos,
    editorView: view,
    nodeType: "layoutSection",
    getEditorWidth: getEditorWidth,
    disabled: (editorDisabledState === null || editorDisabledState === void 0 ? void 0 : editorDisabledState.editorDisabled) === true || !isBreakoutAvailable(view.state.schema),
    parentRef: parentRef,
    editorAnalyticsApi: pluginInjectionApi === null || pluginInjectionApi === void 0 ? void 0 : (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 ? void 0 : _pluginInjectionApi$a.actions,
    displayGuidelines: editorExperiment('single_column_layouts', true) ? displayGuidelines : undefined,
    displayGapCursor: displayGapCursor,
    onResizeStart: () => {
      selectIntoCurrentLayout();
    }
  });
};
const toDOM = () => ['div', {
  class: 'layout-section-container'
}, ['div', {
  'data-layout-section': true
}, 0]];
export class LayoutSectionView extends ReactNodeView {
  constructor(props) {
    super(props.node, props.view, props.getPos, props.portalProviderAPI, props.eventDispatcher, props);
    this.isEmpty = isEmptyLayout(this.node);
    this.options = props.options;
  }
  getContentDOM() {
    const {
      dom: container,
      contentDOM
    } = DOMSerializer.renderSpec(document, toDOM());

    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    this.layoutDOM = container.querySelector('[data-layout-section]');
    this.layoutDOM.setAttribute('data-column-rule-style', this.node.attrs.columnRuleStyle);
    this.layoutDOM.setAttribute('data-empty-layout', Boolean(this.isEmpty).toString());
    return {
      dom: container,
      contentDOM
    };
  }
  setDomAttrs(node, element) {
    if (this.layoutDOM) {
      this.layoutDOM.setAttribute('data-column-rule-style', node.attrs.columnRuleStyle);
    }
  }
  render(props, forwardRef) {
    this.isEmpty = isEmptyLayout(this.node);
    if (this.layoutDOM) {
      this.layoutDOM.setAttribute('data-empty-layout', Boolean(this.isEmpty).toString());
    }
    return /*#__PURE__*/React.createElement(LayoutBreakoutResizer, {
      pluginInjectionApi: props.pluginInjectionApi,
      forwardRef: forwardRef,
      getPos: props.getPos,
      view: props.view,
      parentRef: this.layoutDOM
    });
  }
  ignoreMutation(mutation) {
    return ignoreResizerMutations(mutation);
  }
}