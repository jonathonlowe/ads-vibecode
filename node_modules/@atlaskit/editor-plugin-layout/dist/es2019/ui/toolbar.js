import React from 'react';
import commonMessages, { layoutMessages, layoutMessages as toolbarMessages } from '@atlaskit/editor-common/messages';
import { findDomRefAtPos } from '@atlaskit/editor-prosemirror/utils';
import { akEditorSelectedNodeClassName } from '@atlaskit/editor-shared-styles';
import CopyIcon from '@atlaskit/icon/core/copy';
import DeleteIcon from '@atlaskit/icon/core/migration/delete--editor-remove';
import LayoutOneColumnIcon from '@atlaskit/icon/core/migration/layout-one-column--editor-layout-single';
import LayoutThreeColumnsIcon from '@atlaskit/icon/core/migration/layout-three-columns--editor-layout-three-equal';
import LayoutThreeColumnsSidebarsIcon from '@atlaskit/icon/core/migration/layout-three-columns-sidebars--editor-layout-three-with-sidebars';
import LayoutTwoColumnsIcon from '@atlaskit/icon/core/migration/layout-two-columns--editor-layout-two-equal';
import LayoutTwoColumnsSidebarLeftIcon from '@atlaskit/icon/core/migration/layout-two-columns-sidebar-left--editor-layout-two-left-sidebar';
import LayoutTwoColumnsSidebarRightIcon from '@atlaskit/icon/core/migration/layout-two-columns-sidebar-right--editor-layout-two-right-sidebar';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { deleteActiveLayoutNode, getPresetLayout, setPresetLayout } from '../pm-plugins/actions';
import { LayoutThreeWithLeftSidebarsIcon } from './icons/LayoutThreeWithLeftSidebars';
import { LayoutThreeWithRightSidebarsIcon } from './icons/LayoutThreeWithRightSidebars';
const LAYOUT_TYPES = [{
  id: 'editor.layout.twoEquals',
  type: 'two_equal',
  title: toolbarMessages.twoColumns,
  icon: LayoutTwoColumnsIcon
}, {
  id: 'editor.layout.threeEquals',
  type: 'three_equal',
  title: toolbarMessages.threeColumns,
  icon: LayoutThreeColumnsIcon
}];
const LAYOUT_TYPES_WITH_SINGLE_COL = [{
  id: 'editor.layout.singeLayout',
  type: 'single',
  title: toolbarMessages.singleColumn,
  icon: LayoutOneColumnIcon
}, ...LAYOUT_TYPES];
const SIDEBAR_LAYOUT_TYPES = [{
  id: 'editor.layout.twoRightSidebar',
  type: 'two_right_sidebar',
  title: toolbarMessages.rightSidebar,
  icon: LayoutTwoColumnsSidebarRightIcon
}, {
  id: 'editor.layout.twoLeftSidebar',
  type: 'two_left_sidebar',
  title: toolbarMessages.leftSidebar,
  icon: LayoutTwoColumnsSidebarLeftIcon
}, {
  id: 'editor.layout.threeWithSidebars',
  type: 'three_with_sidebars',
  title: toolbarMessages.threeColumnsWithSidebars,
  icon: LayoutThreeColumnsSidebarsIcon
}];

// These are used for advanced layout options
const LAYOUT_WITH_TWO_COL_DISTRIBUTION = [{
  id: 'editor.layout.twoEquals',
  type: 'two_equal',
  title: toolbarMessages.twoColumns,
  icon: LayoutTwoColumnsIcon
}, {
  id: 'editor.layout.twoRightSidebar',
  type: 'two_right_sidebar',
  title: toolbarMessages.rightSidebar,
  icon: LayoutTwoColumnsSidebarRightIcon
}, {
  id: 'editor.layout.twoLeftSidebar',
  type: 'two_left_sidebar',
  title: toolbarMessages.leftSidebar,
  icon: LayoutTwoColumnsSidebarLeftIcon
}];
const LAYOUT_WITH_THREE_COL_DISTRIBUTION = [{
  id: 'editor.layout.threeEquals',
  type: 'three_equal',
  title: toolbarMessages.threeColumns,
  icon: LayoutThreeColumnsIcon
}, {
  id: 'editor.layout.threeWithSidebars',
  type: 'three_with_sidebars',
  title: toolbarMessages.threeColumnsWithSidebars,
  icon: LayoutThreeColumnsSidebarsIcon
}, {
  id: 'editor.layout.threeRightSidebars',
  type: 'three_right_sidebars',
  title: toolbarMessages.threeColumnsWithRightSidebars,
  icon: LayoutThreeWithRightSidebarsIcon,
  iconFallback: LayoutThreeWithRightSidebarsIcon
}, {
  id: 'editor.layout.threeLeftSidebars',
  type: 'three_left_sidebars',
  title: toolbarMessages.threeColumnsWithLeftSidebars,
  icon: LayoutThreeWithLeftSidebarsIcon,
  iconFallback: LayoutThreeWithLeftSidebarsIcon
}];
const buildLayoutButton = (intl, item, currentLayout, editorAnalyticsAPI) => ({
  id: item.id,
  type: 'button',
  icon: item.icon,
  iconFallback: item.iconFallback,
  testId: item.title.id ? `${item.title.id}` : undefined,
  title: intl.formatMessage(item.title),
  onClick: setPresetLayout(editorAnalyticsAPI)(item.type),
  selected: !!currentLayout && currentLayout === item.type,
  tabIndex: null
});
export const layoutToolbarTitle = 'Layout floating controls';
const iconPlaceholder = LayoutTwoColumnsIcon; // TODO: ED-25466 - Replace with proper icon

const getAdvancedLayoutItems = ({
  addSidebarLayouts,
  intl,
  editorAnalyticsAPI,
  state,
  node,
  nodeType,
  separator,
  deleteButton,
  currentLayout,
  allowAdvancedSingleColumnLayout
}) => {
  const numberOfColumns = node.content.childCount || 2;
  const distributionOptions = numberOfColumns === 2 ? LAYOUT_WITH_TWO_COL_DISTRIBUTION : numberOfColumns === 3 ? LAYOUT_WITH_THREE_COL_DISTRIBUTION : [];
  const columnOptions = [{
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: 2
    }),
    //'2-columns',
    icon: iconPlaceholder,
    onClick: setPresetLayout(editorAnalyticsAPI)('two_equal'),
    selected: numberOfColumns === 2
  }, {
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: 3
    }),
    //'3-columns'
    icon: iconPlaceholder,
    onClick: setPresetLayout(editorAnalyticsAPI)('three_equal'),
    selected: numberOfColumns === 3
  }, {
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: 4
    }),
    //'4-columns'
    icon: iconPlaceholder,
    onClick: setPresetLayout(editorAnalyticsAPI)('four_equal'),
    selected: numberOfColumns === 4
  }, {
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: 5
    }),
    //'5-columns'
    icon: iconPlaceholder,
    onClick: setPresetLayout(editorAnalyticsAPI)('five_equal'),
    selected: numberOfColumns === 5
  }];
  const singleColumnOption = allowAdvancedSingleColumnLayout ? {
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: 1
    }),
    //'1-columns',
    icon: iconPlaceholder,
    onClick: setPresetLayout(editorAnalyticsAPI)('single'),
    selected: numberOfColumns === 1
  } : [];
  return [{
    type: 'dropdown',
    title: intl.formatMessage(layoutMessages.columnOption, {
      count: numberOfColumns
    }),
    //`${numberOfColumns}-columns`,
    options: [singleColumnOption, columnOptions].flat(),
    showSelected: true,
    testId: 'column-options-button'
  }, ...(distributionOptions.length > 0 ? [separator] : []), ...(addSidebarLayouts ? distributionOptions.map(i => buildLayoutButton(intl, i, currentLayout, editorAnalyticsAPI)) : [])];
};
const fullHeightSeparator = {
  type: 'separator',
  fullHeight: true
};
export const buildToolbar = (state, intl, pos, _allowBreakout, addSidebarLayouts, allowSingleColumnLayout, allowAdvancedSingleColumnLayout, api) => {
  var _api$decorations$acti, _api$decorations, _api$analytics;
  const {
    hoverDecoration
  } = (_api$decorations$acti = api === null || api === void 0 ? void 0 : (_api$decorations = api.decorations) === null || _api$decorations === void 0 ? void 0 : _api$decorations.actions) !== null && _api$decorations$acti !== void 0 ? _api$decorations$acti : {};
  const editorAnalyticsAPI = api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  const node = state.doc.nodeAt(pos);
  if (node) {
    const currentLayout = getPresetLayout(node);
    const separator = {
      type: 'separator'
    };
    const nodeType = state.schema.nodes.layoutSection;
    const deleteButton = {
      id: 'editor.layout.delete',
      type: 'button',
      appearance: 'danger',
      focusEditoronEnter: true,
      icon: DeleteIcon,
      testId: commonMessages.remove.id,
      title: intl.formatMessage(commonMessages.remove),
      onClick: deleteActiveLayoutNode(editorAnalyticsAPI),
      onMouseEnter: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true),
      onMouseLeave: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false),
      onFocus: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true),
      onBlur: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false),
      tabIndex: null
    };
    const copyButton = {
      type: 'copy-button',
      items: [{
        state,
        formatMessage: intl.formatMessage,
        nodeType
      }]
    };
    const layoutTypes = allowSingleColumnLayout ? LAYOUT_TYPES_WITH_SINGLE_COL : LAYOUT_TYPES;
    const hoverDecorationProps = (nodeType, className) => ({
      onMouseEnter: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true, className),
      onMouseLeave: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false, className),
      onFocus: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, true, className),
      onBlur: hoverDecoration === null || hoverDecoration === void 0 ? void 0 : hoverDecoration(nodeType, false, className)
    });
    const overflowMenu = {
      type: 'overflow-dropdown',
      options: [{
        title: intl.formatMessage(commonMessages.copyToClipboard),
        onClick: () => {
          var _api$core, _api$floatingToolbar;
          api === null || api === void 0 ? void 0 : (_api$core = api.core) === null || _api$core === void 0 ? void 0 : _api$core.actions.execute( // @ts-ignore
          api === null || api === void 0 ? void 0 : (_api$floatingToolbar = api.floatingToolbar) === null || _api$floatingToolbar === void 0 ? void 0 : _api$floatingToolbar.commands.copyNode(nodeType));
          return true;
        },
        icon: /*#__PURE__*/React.createElement(CopyIcon, {
          label: ""
        }),
        ...hoverDecorationProps(nodeType, akEditorSelectedNodeClassName)
      }, {
        title: intl.formatMessage(commonMessages.delete),
        onClick: deleteActiveLayoutNode(editorAnalyticsAPI),
        icon: /*#__PURE__*/React.createElement(DeleteIcon, {
          label: ""
        }),
        ...hoverDecorationProps(nodeType)
      }]
    };
    return {
      title: layoutToolbarTitle,
      // Ignored via go/ees005
      // eslint-disable-next-line @atlaskit/editor/no-as-casting
      getDomRef: view => findDomRefAtPos(pos, view.domAtPos.bind(view)),
      nodeType,
      groupLabel: intl.formatMessage(toolbarMessages.floatingToolbarRadioGroupAriaLabel),
      items: [...(editorExperiment('advanced_layouts', true) ? getAdvancedLayoutItems({
        addSidebarLayouts,
        intl,
        editorAnalyticsAPI,
        state,
        nodeType,
        node,
        separator,
        deleteButton,
        currentLayout,
        allowAdvancedSingleColumnLayout
      }) : [...layoutTypes.map(i => buildLayoutButton(intl, i, currentLayout, editorAnalyticsAPI)), ...(addSidebarLayouts ? SIDEBAR_LAYOUT_TYPES.map(i => buildLayoutButton(intl, i, currentLayout, editorAnalyticsAPI)) : [])]), ...(editorExperiment('platform_editor_controls', 'variant1') ? [fullHeightSeparator, overflowMenu] : [separator, copyButton, separator, deleteButton])],
      scrollable: true
    };
  }
  return;
};