"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onINP = void 0;
var _bindReporter = require("./bindReporter");
var _interactions = require("./interactions");
var _onHidden = require("./onHidden");
var _whenIdle = require("./whenIdle");
// Adapted from https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/onINP.ts

var onINP = exports.onINP = function onINP(callback) {
  var metric = {
    value: 0,
    delta: 0,
    entries: []
  };
  var reporter = (0, _bindReporter.bindReporter)(callback);
  var interactionManager = new _interactions.InteractionManager();
  var handleEntries = function handleEntries(entries) {
    (0, _whenIdle.whenIdle)(function () {
      entries.forEach(function (entry) {
        return interactionManager.processInteractionEntry(entry);
      });
      var inp = interactionManager.estimateP98LongestInteraction();
      if (inp && inp.latency !== metric.value) {
        metric.value = inp.latency;
        metric.entries = entries;
        reporter(metric);
      }
    });
  };
  var po = observeInteractionEvent(handleEntries);
  var onHiddenCleanup = (0, _onHidden.onHidden)(function () {
    handleEntries(po.takeRecords());
    reporter(metric);
  });
  return function () {
    po.disconnect();
    interactionManager.cleanup();
    onHiddenCleanup();
  };
};
var observeInteractionEvent = function observeInteractionEvent(callback) {
  var po = new PerformanceObserver(function (list) {
    // Delay by a microtask to workaround a bug in Safari where the
    // callback is invoked immediately, rather than in a separate task.
    // See: https://github.com/GoogleChrome/web-vitals/issues/277
    Promise.resolve().then(function () {
      callback(list.getEntries());
    });
  });

  // Event Timing entries have their durations rounded to the nearest 8ms,
  // so a duration of 40ms would be any event that spans 2.5 or more frames
  // at 60Hz. This threshold is chosen to strike a balance between usefulness
  // and performance. Running this callback for any interaction that spans
  // just one or two frames is likely not worth the insight that could be
  // gained.
  if (PerformanceObserver.supportedEntryTypes.includes('event')) {
    po.observe({
      type: 'event',
      buffered: true,
      durationThreshold: 40
    });
  }
  if (PerformanceObserver.supportedEntryTypes.includes('first-input')) {
    po.observe({
      type: 'first-input',
      buffered: true
    });
  }
  return po;
};