"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEventCategory = getEventCategory;
exports.getViewportDimensions = getViewportDimensions;
exports.searchAncestors = searchAncestors;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function getViewportDimensions() {
  var w = window.innerWidth;
  var h = window.innerHeight;
  return {
    w: w,
    h: h
  };
}
function searchAncestors(element, validate) {
  if (!element) {
    return false;
  }
  var x = validate(element);
  if (x === 'abort') {
    return false;
  } else if (x === 'found') {
    return element;
  }
  return searchAncestors(element.parentElement, validate);
}
var UserEventsCategoryMap = new Map([['mouse-movement', ['mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout']], ['mouse-action', ['click', 'dblclick', 'mousedown', 'mouseup', 'contextmenu']], ['keyboard', ['keydown', 'keypress', 'keyup', 'input', 'beforeinput']], ['form', ['focus', 'blur', 'change', 'input', 'submit', 'reset', 'select']], ['clipboard', ['copy', 'cut', 'paste']], ['drag-and-drop', ['drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart', 'drop']], ['page-resize', ['resize']], ['scroll', ['scroll', 'wheel']], ['touch', ['touchstart', 'touchmove', 'touchend', 'touchcancel']]]);
function getEventCategory(eventName) {
  var _iterator = _createForOfIteratorHelper(UserEventsCategoryMap),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        category = _step$value[0],
        events = _step$value[1];
      if (events.includes(eventName)) {
        return category;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return 'other';
}