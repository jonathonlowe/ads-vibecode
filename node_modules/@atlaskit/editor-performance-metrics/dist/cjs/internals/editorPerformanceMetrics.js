"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorPerformanceMetrics = void 0;
exports.createCalculator = createCalculator;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _backgroundTasks = require("./backgroundTasks");
var _dom = require("./dom");
var _heatmap = require("./heatmap");
var _measurements = require("./measurements");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var latencyCategories = ['mouse-movement', 'mouse-action', 'keyboard', 'form', 'clipboard', 'drag-and-drop', 'page-resize', 'scroll', 'touch', 'other'];
var EditorPerformanceMetrics = exports.EditorPerformanceMetrics = /*#__PURE__*/function () {
  function EditorPerformanceMetrics(timeline) {
    var viewport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _dom.getViewportDimensions)();
    (0, _classCallCheck2.default)(this, EditorPerformanceMetrics);
    this.timeline = timeline;
    this.viewport = viewport;
  }
  return (0, _createClass2.default)(EditorPerformanceMetrics, [{
    key: "calculateLatencyPercents",
    value: function () {
      var _calculateLatencyPercents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this = this;
        var promises, allPercentilesProcessed, isEmpty, result, _iterator, _step, maybePercentils;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              promises = latencyCategories.map(function (category) {
                var events = _this.timeline.getEventsPerType("user-event:".concat(category));
                var task = (0, _backgroundTasks.backgroundTask)( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(taskYield) {
                    var percentiles;
                    return _regenerator.default.wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return taskYield();
                        case 2:
                          percentiles = (0, _measurements.getLatencyPercentiles)(events);
                          if (percentiles) {
                            _context.next = 5;
                            break;
                          }
                          return _context.abrupt("return", null);
                        case 5:
                          return _context.abrupt("return", (0, _defineProperty2.default)({}, category, percentiles));
                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  }));
                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }());
                return task.result;
              });
              _context2.next = 3;
              return Promise.all(promises);
            case 3:
              allPercentilesProcessed = _context2.sent;
              isEmpty = true;
              result = {};
              _iterator = _createForOfIteratorHelper(allPercentilesProcessed);
              _context2.prev = 7;
              _iterator.s();
            case 9:
              if ((_step = _iterator.n()).done) {
                _context2.next = 17;
                break;
              }
              maybePercentils = _step.value;
              if (!((0, _backgroundTasks.isTaskAborted)(maybePercentils) || !maybePercentils)) {
                _context2.next = 13;
                break;
              }
              return _context2.abrupt("continue", 15);
            case 13:
              result = Object.assign(result, maybePercentils);
              isEmpty = false;
            case 15:
              _context2.next = 9;
              break;
            case 17:
              _context2.next = 22;
              break;
            case 19:
              _context2.prev = 19;
              _context2.t0 = _context2["catch"](7);
              _iterator.e(_context2.t0);
            case 22:
              _context2.prev = 22;
              _iterator.f();
              return _context2.finish(22);
            case 25:
              if (!isEmpty) {
                _context2.next = 27;
                break;
              }
              return _context2.abrupt("return", null);
            case 27:
              return _context2.abrupt("return", result);
            case 28:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[7, 19, 22, 25]]);
      }));
      function calculateLatencyPercents() {
        return _calculateLatencyPercents.apply(this, arguments);
      }
      return calculateLatencyPercents;
    }()
  }, {
    key: "calculateLastHeatmap",
    value: function () {
      var _calculateLastHeatmap = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(heatmapSize, rangeEventsFilter) {
        var baseheatmap, timelineEvents, startIndex, endIndex, filteredEventsShallowCopy, filteredEvents, heatmap;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (this.viewport) {
                _context3.next = 2;
                break;
              }
              return _context3.abrupt("return", null);
            case 2:
              baseheatmap = (0, _heatmap.createHeatmapWithAspectRatio)({
                viewport: this.viewport,
                heatmapSize: heatmapSize
              });
              if (rangeEventsFilter) {
                _context3.next = 5;
                break;
              }
              return _context3.abrupt("return", (0, _heatmap.createHeatmapFromTimeline)(this.timeline, baseheatmap));
            case 5:
              timelineEvents = this.timeline.getEvents();
              startIndex = timelineEvents.findIndex(function (event) {
                if (typeof rangeEventsFilter.from === 'number') {
                  return event.startTime >= rangeEventsFilter.from;
                }
                return event.type === rangeEventsFilter.from;
              });
              if (!(startIndex < 0)) {
                _context3.next = 9;
                break;
              }
              return _context3.abrupt("return", null);
            case 9:
              endIndex = timelineEvents.slice(startIndex).findIndex(function (event) {
                if (typeof rangeEventsFilter.to === 'number') {
                  return event.startTime <= rangeEventsFilter.to;
                }
                return event.type === rangeEventsFilter.to;
              });
              filteredEventsShallowCopy = endIndex < 0 ? timelineEvents.slice(startIndex) : timelineEvents.slice(startIndex, startIndex + endIndex + 1);
              filteredEvents = Array.from(filteredEventsShallowCopy);
              _context3.next = 14;
              return (0, _heatmap.createHeatmapFromEvents)(filteredEvents, baseheatmap);
            case 14:
              heatmap = _context3.sent;
              return _context3.abrupt("return", heatmap);
            case 16:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function calculateLastHeatmap(_x2, _x3) {
        return _calculateLastHeatmap.apply(this, arguments);
      }
      return calculateLastHeatmap;
    }()
  }, {
    key: "calculateVCPercents",
    value: function () {
      var _calculateVCPercents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(options) {
        var heatmap, VCPercents;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.calculateLastHeatmap(options.heatmapSize, options.rangeEventsFilter);
            case 2:
              heatmap = _context4.sent;
              if (heatmap) {
                _context4.next = 5;
                break;
              }
              return _context4.abrupt("return", null);
            case 5:
              VCPercents = (0, _measurements.getVCPercentFromHeatmap)(heatmap, options);
              return _context4.abrupt("return", VCPercents);
            case 7:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function calculateVCPercents(_x4) {
        return _calculateVCPercents.apply(this, arguments);
      }
      return calculateVCPercents;
    }()
  }, {
    key: "calculateVCTargets",
    value: function () {
      var _calculateVCTargets = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(options) {
        var defaultOptions, mergedOptions, VCPercents, VCTargets;
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              defaultOptions = {
                ignoreNodeReplacements: false,
                ignoreLayoutShifts: false,
                ignoreElementMoved: false,
                heatmapSize: 200,
                rangeEventsFilter: null
              };
              mergedOptions = Object.assign(defaultOptions, options || {});
              _context5.next = 4;
              return this.calculateVCPercents(mergedOptions);
            case 4:
              VCPercents = _context5.sent;
              if (VCPercents) {
                _context5.next = 7;
                break;
              }
              return _context5.abrupt("return", null);
            case 7:
              VCTargets = (0, _measurements.getVCPercentileTargets)(VCPercents);
              return _context5.abrupt("return", VCTargets);
            case 9:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function calculateVCTargets(_x5) {
        return _calculateVCTargets.apply(this, arguments);
      }
      return calculateVCTargets;
    }()
  }]);
}();
function createCalculator(timeline, viewport) {
  return new EditorPerformanceMetrics(timeline, viewport);
}