"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateNodeReplacements = calculateNodeReplacements;
exports.calculatePercentile = calculatePercentile;
exports.getLastValidEntry = getLastValidEntry;
exports.getLatencyPercentiles = getLatencyPercentiles;
exports.getVCPercentFromHeatmap = getVCPercentFromHeatmap;
exports.getVCPercentileTargets = getVCPercentileTargets;
exports.sameDimensions = sameDimensions;
exports.sameElementName = sameElementName;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _heatmap = require("./heatmap");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var VCTargets = ['25', '50', '75', '80', '85', '90', '95', '98', '99'];

/**
 * Returns an object containing timestamps for specified percentiles.
 *
 * This function takes an object where keys are percentiles as strings and
 * values are timestamps. It returns an object where the keys are a predefined
 * set of target VC target percentiles ('25', '50', '75', '80', '85', '90', '95', '98', '99')
 * and the values are the timestamps corresponding to the closest lower or exact
 * available percentile from the input.
 *
 * @param {Record<string, number>} timestampPercent - An object with percentile keys and timestamp values.
 * @returns {Record<VCTargetsTuple[number], number>} - An object with predefined percentile keys and corresponding timestamps.
 *
 * @example
 * const timestampPercent = {
 *   "34": 161,
 *   "37": 759,
 *   "39": 1357,
 *   "55": 2176,
 *   "71": 2571,
 *   "96": 3177,
 *   "100": 4183
 * };
 *
 * const result = getVCPercentileTargets(timestampPercent);
 * console.log(result);
 * // Output:
 * // {
 * //   "25": 161,
 * //   "50": 2176,
 * //   "75": 3177,
 * //   "80": 3177,
 * //   "85": 3177,
 * //   "90": 3177,
 * //   "95": 3177,
 * //   "98": 4183,
 * //   "99": 4183
 * // }
 */
function getVCPercentileTargets(timestampPercent) {
  // Parse and sort the input percentiles in descending order.
  var descSortedPercentiles = Object.keys(timestampPercent).map(function (key) {
    return parseInt(key, 10);
  }).sort(function (a, b) {
    return b - a;
  });

  // Initialize the result object with default values.
  var result = {
    '25': -1,
    '50': -1,
    '75': -1,
    '80': -1,
    '85': -1,
    '90': -1,
    '95': -1,
    '98': -1,
    '99': -1
  };

  // Function to find the closest lower or exact percentile.
  function findClosestLowerOrExact(target) {
    var closest = -1;
    for (var i = 0; i < descSortedPercentiles.length; i++) {
      var percentile = descSortedPercentiles[i];
      if (percentile >= target) {
        closest = percentile;
      }
    }
    return closest;
  }

  // Map each target percentile to the closest lower or exact match.
  var _iterator = _createForOfIteratorHelper(VCTargets),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var target = _step.value;
      var closestPercentile = findClosestLowerOrExact(parseInt(target, 10));
      result[target] = timestampPercent[closestPercentile.toString()];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
function sameDimensions(a, b) {
  if (!(a !== null && a !== void 0 && a.rect) || !(b !== null && b !== void 0 && b.rect)) {
    return false;
  }
  return a.rect.left === b.rect.left && a.rect.right === b.rect.right && a.rect.top === b.rect.top && a.rect.bottom === b.rect.bottom;
}
function sameElementName(a, b) {
  if (!(a !== null && a !== void 0 && a.rect) || !(b !== null && b !== void 0 && b.rect)) {
    return false;
  }
  return a.elementName === b.elementName;
}
function calculateNodeReplacements(head, previousEntries) {
  var lastEntry = previousEntries[previousEntries.length - 1];
  if (head.source === 'mutation' && lastEntry.source === 'mutation' && sameElementName(head, lastEntry) && sameDimensions(head, lastEntry)) {
    return Math.round(lastEntry.time);
  }
  return head.time;
}
function getLastValidEntry(head, previousEntries, options) {
  if (!(0, _heatmap.isLayoutShift)(head) && !(0, _heatmap.isNodeReplacement)(head) && !(0, _heatmap.isElementMoved)(head)) {
    return head;
  }
  if ((0, _heatmap.isLayoutShift)(head) && !options.ignoreLayoutShifts || (0, _heatmap.isNodeReplacement)(head) && !options.ignoreNodeReplacements || (0, _heatmap.isElementMoved)(head) && !options.ignoreElementMoved) {
    return head;
  }
  var entries = previousEntries.reduce(function (acc, e) {
    if ((0, _heatmap.isNodeReplacement)(e) && options.ignoreNodeReplacements) {
      return acc;
    }
    if ((0, _heatmap.isLayoutShift)(e) && options.ignoreLayoutShifts) {
      return acc;
    }
    if ((0, _heatmap.isElementMoved)(e) && options.ignoreElementMoved) {
      return acc;
    }
    acc.push(e);
    return acc;
  }, []);
  return entries[entries.length - 1];
}
function getVCPercentFromHeatmap(heatmap, options) {
  var flatHeapmap = heatmap.map.flat().map(function (entry, index) {
    var head = entry.head,
      previousEntries = entry.previousEntries;
    if (!head) {
      return 0;
    }
    var validEntry = getLastValidEntry(head, previousEntries, options);
    return Math.round((validEntry === null || validEntry === void 0 ? void 0 : validEntry.time) || 0);
  });
  if (flatHeapmap.length === 0) {
    return {
      '100': 0
    };
  }
  var timestampAmount = flatHeapmap.reduce(function (acc, value) {
    var timestampTrunc = Math.trunc(value);
    var curr = acc[timestampTrunc] || 0;
    acc[timestampTrunc] = curr + 1;
    return acc;
  }, {});
  var accAmount = 0;
  var VCPercent = Object.entries(timestampAmount).sort(function (a, b) {
    return parseInt(a[0], 10) - parseInt(b[0], 10);
  }).reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      timestamp = _ref2[0],
      amount = _ref2[1];
    var base = (amount + accAmount) / flatHeapmap.length;
    var percent = Math.round(base * 100);
    acc[percent] = parseInt(timestamp, 10);
    accAmount = accAmount + amount;
    return acc;
  }, {});
  return VCPercent;
}
function calculatePercentile(sortedArr, percentile) {
  var index = percentile / 100 * (sortedArr.length - 1);
  var lower = Math.floor(index);
  var upper = lower + 1;
  var weight = index % 1;
  if (upper >= sortedArr.length) {
    return sortedArr[lower];
  }
  var interpolatedValue = sortedArr[lower] * (1 - weight) + sortedArr[upper] * weight;
  return Math.round(interpolatedValue * 100) / 100;
}
function getLatencyPercentiles(events) {
  if (events.length === 0) {
    return null;
  }
  var durations = events.map(function (_ref3) {
    var data = _ref3.data;
    return data.duration;
  }).sort(function (a, b) {
    return a - b;
  });
  var result = {
    p50: calculatePercentile(durations, 50),
    p85: calculatePercentile(durations, 85),
    p90: calculatePercentile(durations, 90),
    p95: calculatePercentile(durations, 95),
    p99: calculatePercentile(durations, 99)
  };
  return result;
}