"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FirstInteractionObserver = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
/* eslint-disable @repo/internal/dom-events/no-unsafe-event-listeners */

function bind(target, event, controller, listener) {
  // Safe check for rare cases where window doesn't exist
  if (!target || typeof target.addEventListener !== 'function') {
    return function () {};
  }
  var hasAbortSignal = typeof globalThis.AbortSignal === 'function' && controller.signal instanceof globalThis.AbortSignal;
  var options = {
    capture: true,
    passive: true,
    once: true,
    signal: hasAbortSignal ? controller.signal : undefined
  };
  target.addEventListener(event, listener, options);
  return function unbind() {
    target.removeEventListener(event, listener, options);
  };
}
var AbortEvent = /*#__PURE__*/function (AbortEvent) {
  AbortEvent["wheel"] = "wheel";
  AbortEvent["keydown"] = "keydown";
  AbortEvent["mousedown"] = "mousedown";
  AbortEvent["pointerdown"] = "pointerdown";
  AbortEvent["pointer"] = "pointerup";
  AbortEvent["touchend"] = "touchend";
  AbortEvent["resize"] = "resize";
  AbortEvent["unknown"] = "unknown";
  AbortEvent["scroll"] = "scroll";
  return AbortEvent;
}(AbortEvent || {});
var FirstInteractionObserver = exports.FirstInteractionObserver = /*#__PURE__*/function () {
  function FirstInteractionObserver(onFirstInteraction) {
    var _this = this;
    (0, _classCallCheck2.default)(this, FirstInteractionObserver);
    this.controller = new AbortController();
    this.unbindCallbacks = new Set();
    this.unbindCallbacks.add(bind(window, AbortEvent.keydown, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.keydown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.wheel, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.wheel,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.scroll, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.scroll,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.touchend, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.touchend,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.pointerdown, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.pointerdown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.mousedown, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.mousedown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.resize, this.controller, function () {
      _this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.resize,
        time: performance.now()
      });
    }));
  }
  return (0, _createClass2.default)(FirstInteractionObserver, [{
    key: "unbindFirstInteractionEvents",
    value: function unbindFirstInteractionEvents() {
      var controller = this.controller,
        unbindCallbacks = this.unbindCallbacks;
      if (controller) {
        controller.abort();
      }
      unbindCallbacks.forEach(function (cb) {
        cb();
      });
      unbindCallbacks.clear();
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.unbindFirstInteractionEvents();
    }
  }]);
}();