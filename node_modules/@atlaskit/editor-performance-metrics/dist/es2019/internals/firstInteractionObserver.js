/* eslint-disable @repo/internal/dom-events/no-unsafe-event-listeners */

function bind(target, event, controller, listener) {
  // Safe check for rare cases where window doesn't exist
  if (!target || typeof target.addEventListener !== 'function') {
    return () => {};
  }
  const hasAbortSignal = typeof globalThis.AbortSignal === 'function' && controller.signal instanceof globalThis.AbortSignal;
  const options = {
    capture: true,
    passive: true,
    once: true,
    signal: hasAbortSignal ? controller.signal : undefined
  };
  target.addEventListener(event, listener, options);
  return function unbind() {
    target.removeEventListener(event, listener, options);
  };
}
var AbortEvent = /*#__PURE__*/function (AbortEvent) {
  AbortEvent["wheel"] = "wheel";
  AbortEvent["keydown"] = "keydown";
  AbortEvent["mousedown"] = "mousedown";
  AbortEvent["pointerdown"] = "pointerdown";
  AbortEvent["pointer"] = "pointerup";
  AbortEvent["touchend"] = "touchend";
  AbortEvent["resize"] = "resize";
  AbortEvent["unknown"] = "unknown";
  AbortEvent["scroll"] = "scroll";
  return AbortEvent;
}(AbortEvent || {});
export class FirstInteractionObserver {
  constructor(onFirstInteraction) {
    this.controller = new AbortController();
    this.unbindCallbacks = new Set();
    this.unbindCallbacks.add(bind(window, AbortEvent.keydown, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.keydown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.wheel, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.wheel,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.scroll, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.scroll,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.touchend, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.touchend,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.pointerdown, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.pointerdown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.mousedown, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.mousedown,
        time: performance.now()
      });
    }));
    this.unbindCallbacks.add(bind(window, AbortEvent.resize, this.controller, () => {
      this.unbindFirstInteractionEvents();
      onFirstInteraction({
        event: AbortEvent.resize,
        time: performance.now()
      });
    }));
  }
  unbindFirstInteractionEvents() {
    const {
      controller,
      unbindCallbacks
    } = this;
    if (controller) {
      controller.abort();
    }
    unbindCallbacks.forEach(cb => {
      cb();
    });
    unbindCallbacks.clear();
  }
  disconnect() {
    this.unbindFirstInteractionEvents();
  }
}