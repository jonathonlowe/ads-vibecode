import _defineProperty from "@babel/runtime/helpers/defineProperty";
// Adapted from https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/polyfills/interactionCountPolyfill.ts

export class InteractionCountPolyfill {
  constructor() {
    _defineProperty(this, "interactionCountEstimate", 0);
    _defineProperty(this, "minKnownInteractionId", Infinity);
    _defineProperty(this, "maxKnownInteractionId", 0);
    if ('interactionCount' in performance || this.po) {
      return;
    }
    if (!PerformanceObserver.supportedEntryTypes.includes('event')) {
      return;
    }
    this.po = new PerformanceObserver(list => {
      // Delay by a microtask to workaround a bug in Safari where the
      // callback is invoked immediately, rather than in a separate task.
      // See: https://github.com/GoogleChrome/web-vitals/issues/277
      Promise.resolve().then(() => {
        this.updateEstimate(list.getEntries());
      });
    });
    this.po.observe({
      type: 'event',
      buffered: true,
      durationThreshold: 0
    });
  }
  cleanup() {
    var _this$po;
    (_this$po = this.po) === null || _this$po === void 0 ? void 0 : _this$po.disconnect();
  }
  updateEstimate(entries) {
    entries.forEach(e => {
      if (e.interactionId) {
        this.minKnownInteractionId = Math.min(this.minKnownInteractionId, e.interactionId);
        this.maxKnownInteractionId = Math.max(this.maxKnownInteractionId, e.interactionId);
        this.interactionCountEstimate = this.maxKnownInteractionId ? (this.maxKnownInteractionId - this.minKnownInteractionId) / 7 + 1 : 0;
      }
    });
  }

  /**
   * Returns the `interactionCount` value using the native API (if available)
   * or the polyfill estimate in this module.
   */
  getInteractionCount() {
    return this.po ? this.interactionCountEstimate : performance.interactionCount || 0;
  }
}