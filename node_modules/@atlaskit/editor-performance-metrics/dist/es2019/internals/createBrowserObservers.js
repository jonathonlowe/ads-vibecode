const isBrowserSupported = typeof window.IntersectionObserver === 'function' && typeof window.MutationObserver === 'function';
function isValidEntry(entry) {
  return entry.isIntersecting && entry.intersectionRect.width > 0 && entry.intersectionRect.height > 0;
}
export function createMutationObserver({
  onAttributeMutation,
  onChildListMutation,
  onMutationFinished
}) {
  if (!isBrowserSupported) {
    return null;
  }
  const observer = new MutationObserver(mutations => {
    const addedNodes = [];
    const removedNodes = [];
    const targets = [];
    for (const mut of mutations) {
      if (!(mut.target instanceof HTMLElement)) {
        continue;
      }
      if (mut.type === 'attributes') {
        onAttributeMutation({
          target: mut.target
        });
        continue;
      } else if (mut.type === 'childList') {
        (mut.addedNodes || []).forEach(node => {
          if (node instanceof HTMLElement) {
            addedNodes.push(node);
          }
        });
        (mut.removedNodes || []).forEach(node => {
          if (node instanceof HTMLElement) {
            removedNodes.push(node);
          }
        });
      }
      targets.push(mut.target);
    }
    onChildListMutation({
      addedNodes,
      removedNodes
    });
    onMutationFinished({
      targets
    });
  });
  return observer;
}
export function createIntersectionObserver(props) {
  if (!isBrowserSupported) {
    return null;
  }
  const callbacksPerElement = new WeakMap();
  const observer = new IntersectionObserver(entries => {
    const validEntries = [];
    const startTime = performance.now();
    // Reversing the entries is important because the
    // inner nodes should get be sent first to the observers
    entries.reverse().forEach(entry => {
      if (!(entry.target instanceof HTMLElement) || !isValidEntry(entry)) {
        return;
      }
      let customTag = null;
      const doTag = callbacksPerElement.get(entry.target);
      if (typeof doTag === 'function') {
        customTag = doTag({
          target: entry.target,
          rect: entry.intersectionRect
        });
      } else if (typeof doTag === 'string') {
        customTag = doTag;
      }
      props.onEntry({
        target: entry.target,
        rect: entry.intersectionRect,
        startTime: entry.time,
        taintedTag: customTag || 'mutation'
      });
      validEntries.push(new WeakRef(entry.target));
      callbacksPerElement.delete(entry.target);
      observer.unobserve(entry.target);
    });
    props.onObserved({
      startTime,
      elements: validEntries
    });
  });
  return {
    disconnect: () => {
      observer.disconnect();
    },
    unobserve: target => {
      observer.unobserve(target);
    },
    watchAndTag: (target, cbOrTag) => {
      callbacksPerElement.set(target, cbOrTag);
      observer.observe(target);
    }
  };
}

// The LayoutShiftAttribution API is returning the numbers on physical dimension
export function convertPhysicalToLogicalResolution(rect) {
  if (typeof window.devicePixelRatio !== 'number') {
    return rect;
  }
  if (window.devicePixelRatio === 1) {
    return rect;
  }

  // eslint-disable-next-line compat/compat
  return new DOMRect(rect.x / window.devicePixelRatio, rect.y / window.devicePixelRatio, rect.width / window.devicePixelRatio, rect.height / window.devicePixelRatio);
}
export function createPerformanceObserver(props) {
  if (typeof window.PerformanceObserver !== 'function') {
    return null;
  }
  const observer = new PerformanceObserver(entries => {
    for (const entry of entries.getEntries()) {
      if (entry.name === 'first-paint') {
        props.onFirstPaint(entry.startTime);
      } else if (entry.name === 'first-contentful-paint') {
        props.onFirstContentfulPaint(entry.startTime);
      } else if (entry.entryType === 'longtask') {
        props.onLongTask({
          startTime: entry.startTime,
          duration: entry.duration
        });
      } else if (entry.entryType === 'layout-shift') {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const changedRects = entry.sources.reduceRight((acc, attr) => {
          acc.push({
            rect: convertPhysicalToLogicalResolution(attr.currentRect),
            previousRect: convertPhysicalToLogicalResolution(attr.previousRect),
            node: attr.node
          });
          return acc;
        }, []);
        props.onLayoutShift({
          startTime: entry.startTime,
          changedRects
        });
      }
    }
  });
  return observer;
}