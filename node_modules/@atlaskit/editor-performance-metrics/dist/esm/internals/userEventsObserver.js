import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { backgroundTask } from './backgroundTasks';
var ALLOWED_DURATION = 40;
export var processEntry = function processEntry(entry) {
  var startTime = entry.startTime,
    processingEnd = entry.processingEnd,
    processingStart = entry.processingStart,
    target = entry.target,
    duration = entry.duration,
    name = entry.name;
  if (typeof processingEnd !== 'number' || typeof processingStart !== 'number') {
    return null;
  }
  var timeToProcessEvent = processingEnd - processingStart;
  if (timeToProcessEvent <= 0) {
    return null;
  }
  if (!(target instanceof HTMLElement)) {
    return null;
  }
  var eventProcessingDuration = processingEnd - startTime;
  if (duration <= ALLOWED_DURATION || eventProcessingDuration <= ALLOWED_DURATION) {
    return null;
  }
  return {
    eventName: name,
    startTime: startTime,
    duration: duration,
    elementRef: new WeakRef(target)
  };
};
export var createPerformanceObserver = function createPerformanceObserver(cb) {
  return new PerformanceObserver(cb);
};
export var UserEventsObserver = /*#__PURE__*/function () {
  function UserEventsObserver(_ref) {
    var onEventEntries = _ref.onEventEntries;
    _classCallCheck(this, UserEventsObserver);
    if (typeof globalThis.PerformanceObserver !== 'function') {
      return;
    }
    this.observer = createPerformanceObserver(function (list) {
      backgroundTask(function () {
        var mappedEvents = list.getEntries().reduce(function (acc, value) {
          var transformed = processEntry(value);
          if (transformed) {
            acc.push(transformed);
          }
          return acc;
        }, []);
        onEventEntries(mappedEvents);
      });
    });
    this.observer.observe({
      type: 'event',
      buffered: true,
      // @ts-expect-error
      durationThreshold: 16
    });
  }
  return _createClass(UserEventsObserver, [{
    key: "disconnect",
    value: function disconnect() {
      var _this$observer;
      (_this$observer = this.observer) === null || _this$observer === void 0 || _this$observer.disconnect();
    }
  }]);
}();