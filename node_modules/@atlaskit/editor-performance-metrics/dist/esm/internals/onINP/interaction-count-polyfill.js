import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
// Adapted from https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/polyfills/interactionCountPolyfill.ts

export var InteractionCountPolyfill = /*#__PURE__*/function () {
  function InteractionCountPolyfill() {
    var _this = this;
    _classCallCheck(this, InteractionCountPolyfill);
    _defineProperty(this, "interactionCountEstimate", 0);
    _defineProperty(this, "minKnownInteractionId", Infinity);
    _defineProperty(this, "maxKnownInteractionId", 0);
    if ('interactionCount' in performance || this.po) {
      return;
    }
    if (!PerformanceObserver.supportedEntryTypes.includes('event')) {
      return;
    }
    this.po = new PerformanceObserver(function (list) {
      // Delay by a microtask to workaround a bug in Safari where the
      // callback is invoked immediately, rather than in a separate task.
      // See: https://github.com/GoogleChrome/web-vitals/issues/277
      Promise.resolve().then(function () {
        _this.updateEstimate(list.getEntries());
      });
    });
    this.po.observe({
      type: 'event',
      buffered: true,
      durationThreshold: 0
    });
  }
  return _createClass(InteractionCountPolyfill, [{
    key: "cleanup",
    value: function cleanup() {
      var _this$po;
      (_this$po = this.po) === null || _this$po === void 0 || _this$po.disconnect();
    }
  }, {
    key: "updateEstimate",
    value: function updateEstimate(entries) {
      var _this2 = this;
      entries.forEach(function (e) {
        if (e.interactionId) {
          _this2.minKnownInteractionId = Math.min(_this2.minKnownInteractionId, e.interactionId);
          _this2.maxKnownInteractionId = Math.max(_this2.maxKnownInteractionId, e.interactionId);
          _this2.interactionCountEstimate = _this2.maxKnownInteractionId ? (_this2.maxKnownInteractionId - _this2.minKnownInteractionId) / 7 + 1 : 0;
        }
      });
    }

    /**
     * Returns the `interactionCount` value using the native API (if available)
     * or the polyfill estimate in this module.
     */
  }, {
    key: "getInteractionCount",
    value: function getInteractionCount() {
      return this.po ? this.interactionCountEstimate : performance.interactionCount || 0;
    }
  }]);
}();