function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var isBrowserSupported = typeof window.IntersectionObserver === 'function' && typeof window.MutationObserver === 'function';
function isValidEntry(entry) {
  return entry.isIntersecting && entry.intersectionRect.width > 0 && entry.intersectionRect.height > 0;
}
export function createMutationObserver(_ref) {
  var onAttributeMutation = _ref.onAttributeMutation,
    onChildListMutation = _ref.onChildListMutation,
    onMutationFinished = _ref.onMutationFinished;
  if (!isBrowserSupported) {
    return null;
  }
  var observer = new MutationObserver(function (mutations) {
    var addedNodes = [];
    var removedNodes = [];
    var targets = [];
    var _iterator = _createForOfIteratorHelper(mutations),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mut = _step.value;
        if (!(mut.target instanceof HTMLElement)) {
          continue;
        }
        if (mut.type === 'attributes') {
          onAttributeMutation({
            target: mut.target
          });
          continue;
        } else if (mut.type === 'childList') {
          (mut.addedNodes || []).forEach(function (node) {
            if (node instanceof HTMLElement) {
              addedNodes.push(node);
            }
          });
          (mut.removedNodes || []).forEach(function (node) {
            if (node instanceof HTMLElement) {
              removedNodes.push(node);
            }
          });
        }
        targets.push(mut.target);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    onChildListMutation({
      addedNodes: addedNodes,
      removedNodes: removedNodes
    });
    onMutationFinished({
      targets: targets
    });
  });
  return observer;
}
export function createIntersectionObserver(props) {
  if (!isBrowserSupported) {
    return null;
  }
  var callbacksPerElement = new WeakMap();
  var observer = new IntersectionObserver(function (entries) {
    var validEntries = [];
    var startTime = performance.now();
    // Reversing the entries is important because the
    // inner nodes should get be sent first to the observers
    entries.reverse().forEach(function (entry) {
      if (!(entry.target instanceof HTMLElement) || !isValidEntry(entry)) {
        return;
      }
      var customTag = null;
      var doTag = callbacksPerElement.get(entry.target);
      if (typeof doTag === 'function') {
        customTag = doTag({
          target: entry.target,
          rect: entry.intersectionRect
        });
      } else if (typeof doTag === 'string') {
        customTag = doTag;
      }
      props.onEntry({
        target: entry.target,
        rect: entry.intersectionRect,
        startTime: entry.time,
        taintedTag: customTag || 'mutation'
      });
      validEntries.push(new WeakRef(entry.target));
      callbacksPerElement.delete(entry.target);
      observer.unobserve(entry.target);
    });
    props.onObserved({
      startTime: startTime,
      elements: validEntries
    });
  });
  return {
    disconnect: function disconnect() {
      observer.disconnect();
    },
    unobserve: function unobserve(target) {
      observer.unobserve(target);
    },
    watchAndTag: function watchAndTag(target, cbOrTag) {
      callbacksPerElement.set(target, cbOrTag);
      observer.observe(target);
    }
  };
}

// The LayoutShiftAttribution API is returning the numbers on physical dimension
export function convertPhysicalToLogicalResolution(rect) {
  if (typeof window.devicePixelRatio !== 'number') {
    return rect;
  }
  if (window.devicePixelRatio === 1) {
    return rect;
  }

  // eslint-disable-next-line compat/compat
  return new DOMRect(rect.x / window.devicePixelRatio, rect.y / window.devicePixelRatio, rect.width / window.devicePixelRatio, rect.height / window.devicePixelRatio);
}
export function createPerformanceObserver(props) {
  if (typeof window.PerformanceObserver !== 'function') {
    return null;
  }
  var observer = new PerformanceObserver(function (entries) {
    var _iterator2 = _createForOfIteratorHelper(entries.getEntries()),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var entry = _step2.value;
        if (entry.name === 'first-paint') {
          props.onFirstPaint(entry.startTime);
        } else if (entry.name === 'first-contentful-paint') {
          props.onFirstContentfulPaint(entry.startTime);
        } else if (entry.entryType === 'longtask') {
          props.onLongTask({
            startTime: entry.startTime,
            duration: entry.duration
          });
        } else if (entry.entryType === 'layout-shift') {
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          var changedRects = entry.sources.reduceRight(function (acc, attr) {
            acc.push({
              rect: convertPhysicalToLogicalResolution(attr.currentRect),
              previousRect: convertPhysicalToLogicalResolution(attr.previousRect),
              node: attr.node
            });
            return acc;
          }, []);
          props.onLayoutShift({
            startTime: entry.startTime,
            changedRects: changedRects
          });
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  });
  return observer;
}