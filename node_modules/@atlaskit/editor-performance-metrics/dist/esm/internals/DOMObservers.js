import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { createIntersectionObserver, createMutationObserver, createPerformanceObserver } from './createBrowserObservers';
function isElementVisible(element) {
  if (!(element instanceof HTMLElement)) {
    return true;
  }
  try {
    var visible = element.checkVisibility({
      // @ts-expect-error
      visibilityProperty: true
    });
    return visible;
  } catch (e) {
    // there is no support for checkVisibility
    return true;
  }
}
function sameRectSize(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height;
}
function sameRectDimensions(a, b) {
  if (!a || !b) {
    return false;
  }
  return a.width === b.width && a.height === b.height && a.x === b.x && a.y === b.y;
}
export var DOMObservers = /*#__PURE__*/function () {
  function DOMObservers(_ref) {
    var _this = this;
    var onDOMContentChange = _ref.onDOMContentChange,
      onChange = _ref.onChange,
      timeline = _ref.timeline;
    _classCallCheck(this, DOMObservers);
    this.mapVisibleNodeRects = new WeakMap();
    this.timeline = timeline;
    this.intersection = createIntersectionObserver({
      onEntry: function onEntry(_ref2) {
        var target = _ref2.target,
          rect = _ref2.rect,
          startTime = _ref2.startTime,
          taintedTag = _ref2.taintedTag;
        var visible = isElementVisible(target);
        var lastElementRect = _this.mapVisibleNodeRects.get(target);
        _this.mapVisibleNodeRects.set(target, rect);
        var source = taintedTag;
        onChange({
          startTime: startTime,
          elementRef: new WeakRef(target),
          visible: visible,
          rect: rect,
          previousRect: lastElementRect,
          source: source
        });
      },
      onObserved: function onObserved(_ref3) {
        var elements = _ref3.elements,
          startTime = _ref3.startTime;
        _this.timeline.markEvent({
          type: 'IntersectionObserver:VisibleNodes',
          startTime: startTime,
          data: {
            visibleElements: elements.length
          }
        });
      }
    });
    this.mutations = createMutationObserver({
      onAttributeMutation: function onAttributeMutation(_ref4) {
        var _this$intersection;
        var target = _ref4.target;
        (_this$intersection = _this.intersection) === null || _this$intersection === void 0 || _this$intersection.watchAndTag(target, function (_ref5) {
          var target = _ref5.target,
            rect = _ref5.rect;
          var lastElementRect = _this.mapVisibleNodeRects.get(target);
          if (lastElementRect && sameRectSize(rect, lastElementRect)) {
            return 'mutation:attribute:no-layout-shift';
          }
          return 'mutation:attribute';
        });
      },
      onMutationFinished: function onMutationFinished(_ref6) {
        var targets = _ref6.targets;
        targets.forEach(function (target) {
          onDOMContentChange({
            targetRef: new WeakRef(target)
          });
        });
      },
      onChildListMutation: function onChildListMutation(_ref7) {
        var addedNodes = _ref7.addedNodes,
          removedNodes = _ref7.removedNodes;
        var removedNodeRects = removedNodes.map(function (n) {
          return _this.mapVisibleNodeRects.get(n);
        });
        addedNodes.forEach(function (addedNode) {
          var _this$intersection3;
          var _iterator = _createForOfIteratorHelper(addedNode.querySelectorAll('*')),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _this$intersection4;
              var elem = _step.value;
              (_this$intersection4 = _this.intersection) === null || _this$intersection4 === void 0 || _this$intersection4.watchAndTag(elem, 'mutation:children-element');
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          var sameDeletedNode = removedNodes.find(function (n) {
            return n.isEqualNode(addedNode);
          });
          if (sameDeletedNode) {
            var _this$intersection2;
            (_this$intersection2 = _this.intersection) === null || _this$intersection2 === void 0 || _this$intersection2.watchAndTag(addedNode, 'mutation:re-mounted');
            return;
          }
          (_this$intersection3 = _this.intersection) === null || _this$intersection3 === void 0 || _this$intersection3.watchAndTag(addedNode, function (_ref8) {
            var target = _ref8.target,
              rect = _ref8.rect;
            var wasDeleted = removedNodeRects.some(function (nr) {
              return sameRectDimensions(nr, rect);
            });
            if (wasDeleted) {
              return 'mutation:node-replacement';
            }
            return 'mutation:root-element';
          });
        });
        _this.timeline.markEvent({
          type: 'DOMMutation:finished',
          startTime: performance.now(),
          data: {
            addedNodes: addedNodes.length,
            removedNodes: removedNodes.length
          }
        });
      }
    });
    this.performance = createPerformanceObserver({
      onFirstPaint: function onFirstPaint(startTime) {
        _this.timeline.markEvent({
          type: 'performance:first-paint',
          startTime: startTime,
          data: {}
        });
      },
      onFirstContentfulPaint: function onFirstContentfulPaint(startTime) {
        _this.timeline.markEvent({
          type: 'performance:first-contentful-paint',
          startTime: startTime,
          data: {}
        });
      },
      onLongTask: function onLongTask(_ref9) {
        var startTime = _ref9.startTime,
          duration = _ref9.duration;
        _this.timeline.markEvent({
          type: 'performance:long-task',
          startTime: startTime,
          data: {
            duration: duration
          }
        });
      },
      onLayoutShift: function onLayoutShift(_ref10) {
        var startTime = _ref10.startTime,
          changedRects = _ref10.changedRects;
        _this.timeline.markEvent({
          type: 'performance:layout-shift',
          startTime: startTime,
          data: {
            changedRectsAmount: changedRects.length
          }
        });
        changedRects.forEach(function (_ref11) {
          var node = _ref11.node,
            rect = _ref11.rect;
          if (node instanceof HTMLElement) {
            var _this$intersection5;
            (_this$intersection5 = _this.intersection) === null || _this$intersection5 === void 0 || _this$intersection5.watchAndTag(node, function (_ref12) {
              var target = _ref12.target,
                rect = _ref12.rect;
              var lastElementRect = _this.mapVisibleNodeRects.get(target);
              if (lastElementRect && sameRectSize(rect, lastElementRect)) {
                return 'layout-shift:element-moved';
              }
              return 'layout-shift';
            });
          }
        });
      }
    });
  }
  return _createClass(DOMObservers, [{
    key: "observe",
    value: function observe(target) {
      var _this$mutations, _this$performance, _this$performance2, _this$performance3, _this$performance4;
      (_this$mutations = this.mutations) === null || _this$mutations === void 0 || _this$mutations.observe(target, {
        attributeOldValue: true,
        attributes: true,
        childList: true,
        subtree: true
      });
      (_this$performance = this.performance) === null || _this$performance === void 0 || _this$performance.observe({
        type: 'paint',
        buffered: true
      });
      (_this$performance2 = this.performance) === null || _this$performance2 === void 0 || _this$performance2.observe({
        type: 'largest-contentful-paint',
        buffered: true
      });
      (_this$performance3 = this.performance) === null || _this$performance3 === void 0 || _this$performance3.observe({
        type: 'layout-shift',
        buffered: true,
        // @ts-ignore-error
        durationThreshold: 30
      });
      (_this$performance4 = this.performance) === null || _this$performance4 === void 0 || _this$performance4.observe({
        type: 'longtask',
        buffered: true
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      var _this$mutations2, _this$performance5, _this$intersection6;
      (_this$mutations2 = this.mutations) === null || _this$mutations2 === void 0 || _this$mutations2.disconnect();
      (_this$performance5 = this.performance) === null || _this$performance5 === void 0 || _this$performance5.disconnect();
      (_this$intersection6 = this.intersection) === null || _this$intersection6 === void 0 || _this$intersection6.disconnect();
    }
  }]);
}();