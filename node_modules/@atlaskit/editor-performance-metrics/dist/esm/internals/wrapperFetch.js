/**
 * ðŸ§± Internal Type: Editor FE Platform
 *
 * Wraps the global fetch function to integrate with a TimelineHoldable instance.
 * This wrapper allows tracking of fetch calls within the timeline.
 *
 * @param {Object} options - The options object.
 * @param {Object} options.globalContext - The global context containing the fetch function.
 * @param {typeof fetch} options.globalContext.fetch - The original fetch function.
 * @param {TimelineHoldable} options.timelineHoldable - The TimelineHoldable instance to integrate with.
 * @returns {Function} A cleanup function that restores the original fetch implementation.
 */
export var wrapperFetch = function wrapperFetch(_ref) {
  var globalContext = _ref.globalContext,
    timelineHoldable = _ref.timelineHoldable;
  var originalFetch = globalContext.fetch;
  var fetchProxy = new Proxy(globalContext.fetch, {
    apply: function apply(target, thisArg, args) {
      var unhold = timelineHoldable.hold({
        source: 'fetch'
      });
      try {
        var promise = target.apply(thisArg, args);
        return promise.finally(function () {
          unhold();
        });
      } catch (e) {
        unhold();
        throw e;
      }
    }
  });
  globalContext.fetch = fetchProxy;
  return function cleanup() {
    globalContext.fetch = originalFetch;
  };
};