import type { OnIdleBufferFlushCallback, TimelineClock, TimelineIdleUnsubcribe, TimelineHoldable } from './timelineInterfaces';
export type StartProps = {
    startTime: DOMHighResTimeStamp;
};
export interface ObserverInterface {
    start(props: StartProps): void;
}
export type CalculateVCOptions = {
    ignoreNodeReplacements: boolean;
    ignoreLayoutShifts: boolean;
    ignoreElementMoved: boolean;
    heatmapSize: number;
};
export type EditorPerformanceObserverOptions = {
    timers: {
        /**
         * Special options for wrapper around the setTimeout
         */
        setTimeout: {
            maxTimeoutAllowedToTrack: number;
        };
    };
};
export declare class EditorPerformanceObserver implements ObserverInterface {
    startTime: DOMHighResTimeStamp | null;
    private isStarted;
    private timeline;
    private domObservers;
    private firstInteraction;
    private vcSections;
    private userEventsObserver;
    private observedTargetRef;
    private wrapperApplied;
    private wrapperCleanupFunctions;
    private options;
    constructor(timeline: TimelineClock & TimelineHoldable, givenOptions?: Partial<EditorPerformanceObserverOptions>);
    onFirstInteraction({ event, time }: {
        event: string;
        time: DOMHighResTimeStamp;
    }): void;
    start({ startTime }: StartProps): void;
    onIdleBuffer(cb: OnIdleBufferFlushCallback): TimelineIdleUnsubcribe;
    onceNextIdle(cb: OnIdleBufferFlushCallback): TimelineIdleUnsubcribe;
    stop(): void;
    private applyWrappersOnce;
    private cleanupWrappers;
}
