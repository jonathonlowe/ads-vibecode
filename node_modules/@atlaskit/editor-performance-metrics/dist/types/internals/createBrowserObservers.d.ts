import type { HeatmapEntrySource } from './types';
export type CreateMutationObserverProps = {
    onAttributeMutation: (props: {
        target: HTMLElement;
    }) => void;
    onMutationFinished: (props: {
        targets: Array<HTMLElement>;
    }) => void;
    onChildListMutation: (props: {
        addedNodes: ReadonlyArray<HTMLElement>;
        removedNodes: ReadonlyArray<HTMLElement>;
    }) => void;
};
export declare function createMutationObserver({ onAttributeMutation, onChildListMutation, onMutationFinished, }: CreateMutationObserverProps): MutationObserver | null;
type DoTag = (props: {
    target: HTMLElement;
    rect: DOMRectReadOnly;
}) => HeatmapEntrySource | undefined | null;
export interface TaintedIntersectionObserver {
    disconnect(): void;
    unobserve(target: Element): void;
    watchAndTag: (target: Element, cbOrTag: DoTag | HeatmapEntrySource) => void;
}
export declare function createIntersectionObserver(props: {
    onEntry: (entry: {
        target: HTMLElement;
        rect: DOMRectReadOnly;
        startTime: DOMHighResTimeStamp;
        taintedTag: HeatmapEntrySource;
    }) => void;
    onObserved: (props: {
        startTime: DOMHighResTimeStamp;
        elements: ReadonlyArray<WeakRef<HTMLElement>>;
    }) => void;
}): TaintedIntersectionObserver | null;
export declare function convertPhysicalToLogicalResolution(rect: DOMRect): DOMRect;
type ChangedRect = Array<{
    node: HTMLElement;
    rect: DOMRectReadOnly;
    previousRect: DOMRectReadOnly;
}>;
type CreatePerformanceObserverProps = {
    onFirstPaint: (startTime: DOMHighResTimeStamp) => void;
    onFirstContentfulPaint: (startTime: DOMHighResTimeStamp) => void;
    onLongTask: (props: {
        startTime: DOMHighResTimeStamp;
        duration: number;
    }) => void;
    onLayoutShift: (props: {
        startTime: DOMHighResTimeStamp;
        changedRects: ChangedRect;
    }) => void;
};
export declare function createPerformanceObserver(props: CreatePerformanceObserverProps): PerformanceObserver | null;
export {};
