import { type Heatmap } from './heatmap';
import { type VCTargetsTuple } from './measurements';
import type { Timeline } from './timelineInterfaces';
import type { TimelineEventNames } from './timelineTypes';
import type { UserEventCategory, ViewportDimension } from './types';
export type CalculateVCOptions = {
    ignoreNodeReplacements: boolean;
    ignoreLayoutShifts: boolean;
    ignoreElementMoved: boolean;
    heatmapSize: number;
    rangeEventsFilter?: RangeEventsFilter | null;
};
export type Percentiles = {
    p50: number;
    p85: number;
    p90: number;
    p95: number;
    p99: number;
};
export type LatencyPercentileTargets = Record<UserEventCategory, Percentiles>;
export type TTVCTargets = Record<VCTargetsTuple[number], number>;
export type TTVCTargetsPromise = Promise<TTVCTargets | null>;
export type RangeEventsFilter = {
    from: DOMHighResTimeStamp | TimelineEventNames;
    to: DOMHighResTimeStamp | TimelineEventNames;
};
export declare class EditorPerformanceMetrics {
    private viewport;
    private timeline;
    constructor(timeline: Timeline, viewport?: ViewportDimension);
    calculateLatencyPercents(): Promise<LatencyPercentileTargets | null>;
    calculateLastHeatmap(heatmapSize: number, rangeEventsFilter?: RangeEventsFilter | null): Promise<Heatmap | null>;
    calculateVCPercents(options: CalculateVCOptions): Promise<Record<string, number> | null>;
    calculateVCTargets(options?: Partial<CalculateVCOptions>): Promise<TTVCTargets | null>;
}
export declare function createCalculator(timeline: Timeline, viewport?: ViewportDimension): EditorPerformanceMetrics;
