import { type Heatmap, type HeatmapEntryData } from './heatmap';
import type { UserEvent } from './timelineTypes';
export type VCTargetsTuple = ['25', '50', '75', '80', '85', '90', '95', '98', '99'];
/**
 * Returns an object containing timestamps for specified percentiles.
 *
 * This function takes an object where keys are percentiles as strings and
 * values are timestamps. It returns an object where the keys are a predefined
 * set of target VC target percentiles ('25', '50', '75', '80', '85', '90', '95', '98', '99')
 * and the values are the timestamps corresponding to the closest lower or exact
 * available percentile from the input.
 *
 * @param {Record<string, number>} timestampPercent - An object with percentile keys and timestamp values.
 * @returns {Record<VCTargetsTuple[number], number>} - An object with predefined percentile keys and corresponding timestamps.
 *
 * @example
 * const timestampPercent = {
 *   "34": 161,
 *   "37": 759,
 *   "39": 1357,
 *   "55": 2176,
 *   "71": 2571,
 *   "96": 3177,
 *   "100": 4183
 * };
 *
 * const result = getVCPercentileTargets(timestampPercent);
 * console.log(result);
 * // Output:
 * // {
 * //   "25": 161,
 * //   "50": 2176,
 * //   "75": 3177,
 * //   "80": 3177,
 * //   "85": 3177,
 * //   "90": 3177,
 * //   "95": 3177,
 * //   "98": 4183,
 * //   "99": 4183
 * // }
 */
export declare function getVCPercentileTargets(timestampPercent: Record<string, number>): Record<VCTargetsTuple[number], number>;
export declare function sameDimensions(a: HeatmapEntryData | null, b: HeatmapEntryData | null): boolean;
export declare function sameElementName(a: HeatmapEntryData | null, b: HeatmapEntryData | null): boolean;
export declare function calculateNodeReplacements(head: HeatmapEntryData, previousEntries: HeatmapEntryData[]): number;
export declare function getLastValidEntry(head: HeatmapEntryData, previousEntries: HeatmapEntryData[], options: VCPercentFromHeatmapOptions): HeatmapEntryData | null;
type VCPercentFromHeatmapOptions = Partial<{
    ignoreNodeReplacements: boolean;
    ignoreLayoutShifts: boolean;
    ignoreElementMoved: boolean;
}>;
export declare function getVCPercentFromHeatmap(heatmap: Heatmap, options: VCPercentFromHeatmapOptions): Record<string, number>;
export type EventPercentileTargets = {
    p50: number;
    p85: number;
    p90: number;
    p95: number;
    p99: number;
};
export declare function calculatePercentile(sortedArr: number[], percentile: number): number;
export declare function getLatencyPercentiles(events: Array<UserEvent>): EventPercentileTargets | null;
export {};
