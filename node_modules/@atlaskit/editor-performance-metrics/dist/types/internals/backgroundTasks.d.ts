export declare const TaskAborted: unique symbol;
export type TaskAbortedSymbol = typeof TaskAborted;
type BackgroundTask<T> = (maybeYield: () => Promise<void>) => void | Promise<T | TaskAbortedSymbol>;
export type AbortableTask<T> = {
    abort: () => void;
    result: Promise<T | TaskAbortedSymbol>;
};
export declare const isTaskAborted: (maybeTaskAbortedResult: unknown) => maybeTaskAbortedResult is typeof TaskAborted;
export declare const taskYield: () => Promise<void>;
export declare const backgroundTask: <T>(originalTask: BackgroundTask<T>, givenOptions?: {
    delay: number;
}) => AbortableTask<T>;
export {};
