"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActivityError = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _createSuper(t) { var r = _isNativeReflectConstruct(); return function () { var e, o = (0, _getPrototypeOf2.default)(t); if (r) { var s = (0, _getPrototypeOf2.default)(this).constructor; e = Reflect.construct(o, arguments, s); } else e = o.apply(this, arguments); return (0, _possibleConstructorReturn2.default)(this, e); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ActivityError = exports.ActivityError = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(ActivityError, _Error);
  var _super = _createSuper(ActivityError);
  function ActivityError(message, status) {
    var _this;
    (0, _classCallCheck2.default)(this, ActivityError);
    _this = _super.call(this, message);
    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
    Object.setPrototypeOf((0, _assertThisInitialized2.default)(_this), ActivityError.prototype);
    _this.status = status;
    _this.name = _this.constructor.name;
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this), _this.constructor);
    } else {
      _this.stack = new Error(message).stack;
    }
    return _this;
  }
  return (0, _createClass2.default)(ActivityError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));