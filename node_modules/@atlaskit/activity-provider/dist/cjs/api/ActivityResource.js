"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeGetRecentItemBody = exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utilServiceSupport = require("@atlaskit/util-service-support");
var _error = require("./error");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var makeGetRecentItemBody = exports.makeGetRecentItemBody = function makeGetRecentItemBody(cloudId) {
  return {
    query: "\n    query editor_recentActivities($filter: [ActivitiesFilter!], $first: Int) {\n      activities {\n        myActivities {\n          viewed(filters: $filter, first: $first) {\n            nodes {\n              timestamp,\n              object {\n                id,\n                name,\n                type,\n                url,\n                iconUrl,\n                containers {\n                  name,\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ",
    variables: {
      first: 200,
      filter: [{
        type: 'AND',
        arguments: {
          cloudIds: [cloudId]
        }
      }]
    }
  };
};

/**
 * @deprecated - Please use @atlassian/recent-work-client instead
 */
var ActivityResource = exports.default = /*#__PURE__*/function () {
  function ActivityResource(url, cloudId) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck2.default)(this, ActivityResource);
    this.url = url;
    this.cloudId = cloudId;
    this.options = options;
  }
  (0, _createClass2.default)(ActivityResource, [{
    key: "getRecentItems",
    value: function () {
      var _getRecentItems = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this = this;
        var options, response;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.recentPromise) {
                options = _objectSpread(_objectSpread({
                  mode: 'cors',
                  method: 'POST',
                  cache: 'no-cache',
                  credentials: 'same-origin',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  redirect: 'follow',
                  referrer: 'no-referrer'
                }, this.options), {}, {
                  body: JSON.stringify(makeGetRecentItemBody(this.cloudId))
                });
                this.recentPromise = _utilServiceSupport.utils.requestService({
                  url: this.url
                }, {
                  requestInit: options
                });
              }
              _context.prev = 1;
              _context.next = 4;
              return this.recentPromise;
            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data.activities.myActivities.viewed.nodes.map(function (node) {
                return {
                  objectId: atob(node.object.id),
                  name: node.object.name,
                  container: _this.getContainerName(node.object.containers),
                  url: node.object.url,
                  iconUrl: node.object.iconUrl,
                  type: node.object.type,
                  viewedTimestamp: node.timestamp
                };
              }));
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);
              throw new _error.ActivityError(_context.t0.reason, _context.t0.code);
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 8]]);
      }));
      function getRecentItems() {
        return _getRecentItems.apply(this, arguments);
      }
      return getRecentItems;
    }()
  }, {
    key: "searchRecent",
    value: function () {
      var _searchRecent = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(query) {
        var items;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getRecentItems();
            case 2:
              items = _context2.sent;
              return _context2.abrupt("return", this.filterItems(items, query));
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function searchRecent(_x) {
        return _searchRecent.apply(this, arguments);
      }
      return searchRecent;
    }()
    /**
     * It should return the closet container's name
     */
  }, {
    key: "getContainerName",
    value: function getContainerName(containers) {
      for (var i = containers.length - 1; i >= 0; --i) {
        var containerName = containers[i].name;
        if (containerName) {
          return containerName;
        }
      }
      return '';
    }
  }, {
    key: "filterItems",
    value: function filterItems(items, searchTerm) {
      if (!searchTerm) {
        return [];
      }
      return items.filter(function (item) {
        return item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;
      });
    }
  }]);
  return ActivityResource;
}();