"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _styles = require("@atlaskit/editor-common/styles");
var _ui = require("@atlaskit/editor-common/ui");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _utils = require("@atlaskit/editor-common/utils");
var _state = require("@atlaskit/editor-prosemirror/state");
var _utils2 = require("@atlaskit/editor-prosemirror/utils");
var _growHorizontal = _interopRequireDefault(require("@atlaskit/icon/core/grow-horizontal"));
var _shrinkHorizontal = _interopRequireDefault(require("@atlaskit/icon/core/shrink-horizontal"));
var _collapse = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/collapse"));
var _expand = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/expand"));
var _colors = require("@atlaskit/theme/colors");
var _constants = require("@atlaskit/theme/constants");
var _removeBreakout = require("../editor-commands/remove-breakout");
var _setBreakoutMode = require("../editor-commands/set-breakout-mode");
var _pluginKey = require("../pm-plugins/plugin-key");
var _getBreakoutMode = require("../pm-plugins/utils/get-breakout-mode");
var _isBreakoutMarkAllowed = require("../pm-plugins/utils/is-breakout-mark-allowed");
var _isSupportedNode = require("../pm-plugins/utils/is-supported-node");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var toolbarButtonWrapperStyles = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&& button': {
    background: "var(--ds-background-neutral, ".concat(_colors.N20A, ")"),
    color: "var(--ds-icon, ".concat(_colors.N300, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    ':hover': {
      background: "var(--ds-background-neutral-hovered, ".concat(_colors.B300, ")"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
      color: "var(--ds-icon, white)".concat(" !important")
    }
  }
});
function getBreakoutNodeElement(pluginState, selection, editorView) {
  if (!pluginState.breakoutNode) {
    return undefined;
  }
  if (selection instanceof _state.NodeSelection && (0, _isSupportedNode.isSupportedNodeForBreakout)(selection.node)) {
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    return (0, _utils2.findDomRefAtPos)(selection.from, editorView.domAtPos.bind(editorView));
  }
  // Ignored via go/ees005
  // eslint-disable-next-line @atlaskit/editor/no-as-casting
  return (0, _utils2.findParentDomRefOfType)(pluginState.breakoutNode.node.type, editorView.domAtPos.bind(editorView))(selection);
}
var LayoutButton = function LayoutButton(_ref) {
  var formatMessage = _ref.intl.formatMessage,
    mountPoint = _ref.mountPoint,
    boundariesElement = _ref.boundariesElement,
    scrollableElement = _ref.scrollableElement,
    editorView = _ref.editorView,
    node = _ref.node,
    isLivePage = _ref.isLivePage;
  var handleClick = (0, _react.useCallback)(function (breakoutMode) {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    if (['wide', 'full-width'].indexOf(breakoutMode) !== -1) {
      (0, _setBreakoutMode.setBreakoutMode)(breakoutMode, isLivePage)(state, dispatch);
    } else {
      (0, _removeBreakout.removeBreakout)(isLivePage)(state, dispatch);
    }
  }, [editorView, isLivePage]);
  var state = editorView.state;
  if (!node || !(0, _isBreakoutMarkAllowed.isBreakoutMarkAllowed)(state)) {
    return null;
  }
  var breakoutMode = (0, _getBreakoutMode.getBreakoutMode)(editorView.state);
  var titleMessage = (0, _utils.getTitle)(breakoutMode);
  var title = formatMessage(titleMessage);
  var nextBreakoutMode = (0, _utils.getNextBreakoutMode)(breakoutMode);
  var belowOtherPopupsZIndex = _constants.layers.layer() - 1;
  var pluginState = (0, _pluginKey.getPluginState)(state);
  if (!pluginState) {
    return null;
  }
  var element = getBreakoutNodeElement(pluginState, state.selection, editorView);
  if (!element) {
    return null;
  }
  var closestEl = element.querySelector(".".concat(_styles.BreakoutCssClassName.BREAKOUT_MARK_DOM));
  if (closestEl && closestEl.firstChild) {
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    element = closestEl.firstChild;
  }
  return (0, _react2.jsx)(_ui.Popup, {
    ariaLabel: title,
    target: element,
    offset: [5, 0],
    alignY: "start",
    alignX: "end",
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement,
    stick: true,
    forcePlacement: true,
    zIndex: belowOtherPopupsZIndex
  }, (0, _react2.jsx)("div", {
    css: toolbarButtonWrapperStyles
  }, (0, _react2.jsx)(_uiMenu.ToolbarButton, {
    title: title,
    testId: titleMessage.id,
    onClick: function onClick() {
      return handleClick(nextBreakoutMode);
    },
    iconBefore: breakoutMode === 'full-width' ? (0, _react2.jsx)(_shrinkHorizontal.default, {
      label: title,
      LEGACY_fallbackIcon: _collapse.default,
      spacing: "spacious"
    }) : (0, _react2.jsx)(_growHorizontal.default, {
      label: title,
      LEGACY_fallbackIcon: _expand.default,
      spacing: "spacious"
    })
  })));
};
LayoutButton.displayName = 'LayoutButton';
var _default = exports.default = (0, _reactIntlNext.injectIntl)(LayoutButton);