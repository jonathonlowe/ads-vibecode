/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { BreakoutCssClassName } from '@atlaskit/editor-common/styles';
import { Popup } from '@atlaskit/editor-common/ui';
import { ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { getNextBreakoutMode, getTitle } from '@atlaskit/editor-common/utils';
import { NodeSelection } from '@atlaskit/editor-prosemirror/state';
import { findDomRefAtPos, findParentDomRefOfType } from '@atlaskit/editor-prosemirror/utils';
import GrowHorizontalIcon from '@atlaskit/icon/core/grow-horizontal';
import ShrinkHorizontalIcon from '@atlaskit/icon/core/shrink-horizontal';
import CollapseIcon from '@atlaskit/icon/glyph/editor/collapse';
import ExpandIcon from '@atlaskit/icon/glyph/editor/expand';
import { B300, N20A, N300 } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import { removeBreakout } from '../editor-commands/remove-breakout';
import { setBreakoutMode } from '../editor-commands/set-breakout-mode';
import { getPluginState } from '../pm-plugins/plugin-key';
import { getBreakoutMode } from '../pm-plugins/utils/get-breakout-mode';
import { isBreakoutMarkAllowed } from '../pm-plugins/utils/is-breakout-mark-allowed';
import { isSupportedNodeForBreakout } from '../pm-plugins/utils/is-supported-node';
var toolbarButtonWrapperStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  '&& button': {
    background: "var(--ds-background-neutral, ".concat(N20A, ")"),
    color: "var(--ds-icon, ".concat(N300, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    ':hover': {
      background: "var(--ds-background-neutral-hovered, ".concat(B300, ")"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-important-styles -- Ignored via go/DSP-18766
      color: "var(--ds-icon, white)".concat(" !important")
    }
  }
});
function getBreakoutNodeElement(pluginState, selection, editorView) {
  if (!pluginState.breakoutNode) {
    return undefined;
  }
  if (selection instanceof NodeSelection && isSupportedNodeForBreakout(selection.node)) {
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    return findDomRefAtPos(selection.from, editorView.domAtPos.bind(editorView));
  }
  // Ignored via go/ees005
  // eslint-disable-next-line @atlaskit/editor/no-as-casting
  return findParentDomRefOfType(pluginState.breakoutNode.node.type, editorView.domAtPos.bind(editorView))(selection);
}
var LayoutButton = function LayoutButton(_ref) {
  var formatMessage = _ref.intl.formatMessage,
    mountPoint = _ref.mountPoint,
    boundariesElement = _ref.boundariesElement,
    scrollableElement = _ref.scrollableElement,
    editorView = _ref.editorView,
    node = _ref.node,
    isLivePage = _ref.isLivePage;
  var handleClick = useCallback(function (breakoutMode) {
    var state = editorView.state,
      dispatch = editorView.dispatch;
    if (['wide', 'full-width'].indexOf(breakoutMode) !== -1) {
      setBreakoutMode(breakoutMode, isLivePage)(state, dispatch);
    } else {
      removeBreakout(isLivePage)(state, dispatch);
    }
  }, [editorView, isLivePage]);
  var state = editorView.state;
  if (!node || !isBreakoutMarkAllowed(state)) {
    return null;
  }
  var breakoutMode = getBreakoutMode(editorView.state);
  var titleMessage = getTitle(breakoutMode);
  var title = formatMessage(titleMessage);
  var nextBreakoutMode = getNextBreakoutMode(breakoutMode);
  var belowOtherPopupsZIndex = layers.layer() - 1;
  var pluginState = getPluginState(state);
  if (!pluginState) {
    return null;
  }
  var element = getBreakoutNodeElement(pluginState, state.selection, editorView);
  if (!element) {
    return null;
  }
  var closestEl = element.querySelector(".".concat(BreakoutCssClassName.BREAKOUT_MARK_DOM));
  if (closestEl && closestEl.firstChild) {
    // Ignored via go/ees005
    // eslint-disable-next-line @atlaskit/editor/no-as-casting
    element = closestEl.firstChild;
  }
  return jsx(Popup, {
    ariaLabel: title,
    target: element,
    offset: [5, 0],
    alignY: "start",
    alignX: "end",
    mountTo: mountPoint,
    boundariesElement: boundariesElement,
    scrollableElement: scrollableElement,
    stick: true,
    forcePlacement: true,
    zIndex: belowOtherPopupsZIndex
  }, jsx("div", {
    css: toolbarButtonWrapperStyles
  }, jsx(ToolbarButton, {
    title: title,
    testId: titleMessage.id,
    onClick: function onClick() {
      return handleClick(nextBreakoutMode);
    },
    iconBefore: breakoutMode === 'full-width' ? jsx(ShrinkHorizontalIcon, {
      label: title,
      LEGACY_fallbackIcon: CollapseIcon,
      spacing: "spacious"
    }) : jsx(GrowHorizontalIcon, {
      label: title,
      LEGACY_fallbackIcon: ExpandIcon,
      spacing: "spacious"
    })
  })));
};
LayoutButton.displayName = 'LayoutButton';
export default injectIntl(LayoutButton);