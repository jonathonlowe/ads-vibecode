import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { TextSelection } from '@atlaskit/editor-prosemirror/state';
import { AddMarkStep, AddNodeMarkStep } from '@atlaskit/editor-prosemirror/transform';
import { ViewModeNodeStep, ViewModeStep } from './pm-plugins/viewModeStep';
var createFilterStepsPlugin = function createFilterStepsPlugin(api) {
  return function () {
    return new SafePlugin({
      filterTransaction: function filterTransaction(tr) {
        var _api$editorViewMode;
        var mode = api === null || api === void 0 || (_api$editorViewMode = api.editorViewMode) === null || _api$editorViewMode === void 0 || (_api$editorViewMode = _api$editorViewMode.sharedState.currentState()) === null || _api$editorViewMode === void 0 ? void 0 : _api$editorViewMode.mode;
        if (mode !== 'view') {
          return true;
        }
        if (tr.getMeta('isRemote')) {
          return true;
        }
        var viewModeSteps = tr.steps.reduce(function (acc, s) {
          if (s instanceof ViewModeNodeStep || s instanceof ViewModeStep) {
            acc.push(s);
          }
          return acc;
        }, []);
        if (viewModeSteps.length === 0 || !api) {
          // Ignored via go/ees007
          // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
          // TODO: Do we want to block everything?
          // If yes, we should return false;
          return true;
        }
        viewModeSteps.forEach(function (step) {
          if (step.inverted || !step.mark) {
            return;
          }
          if (step.mark.type.name === 'annotation') {
            if (step instanceof ViewModeNodeStep) {
              var _api$collabEdit;
              (_api$collabEdit = api.collabEdit) === null || _api$collabEdit === void 0 || _api$collabEdit.actions.addInlineCommentNodeMark({
                mark: step.mark,
                pos: step.pos
              });
            } else if (step instanceof ViewModeStep) {
              var _api$collabEdit2;
              (_api$collabEdit2 = api.collabEdit) === null || _api$collabEdit2 === void 0 || _api$collabEdit2.actions.addInlineCommentMark({
                mark: step.mark,
                from: step.from,
                to: step.to
              });
            }
          }
        });

        // Ignored via go/ees007
        // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
        // TODO: Follow-up and improve annotation logic so we can filter out transactions here
        return true;
      }
    });
  };
};
var createReplaceDocumentTransactionPlugin = function createReplaceDocumentTransactionPlugin(api) {
  return function () {
    return new SafePlugin({
      // Shouldn't need explicit types but sometimes TS can't infer them so ðŸ¤·
      appendTransaction: function appendTransaction(transactions, _oldState, newState) {
        var _api$editorViewMode2;
        if (!api) {
          return;
        }
        var isViewMode = (api === null || api === void 0 || (_api$editorViewMode2 = api.editorViewMode) === null || _api$editorViewMode2 === void 0 || (_api$editorViewMode2 = _api$editorViewMode2.sharedState.currentState()) === null || _api$editorViewMode2 === void 0 ? void 0 : _api$editorViewMode2.mode) === 'view';
        if (!isViewMode) {
          return;
        }
        var remoteReplaceDocumentTransaction = transactions.find(function (tr) {
          var _api$collabEdit3;
          return (_api$collabEdit3 = api.collabEdit) === null || _api$collabEdit3 === void 0 || (_api$collabEdit3 = _api$collabEdit3.actions) === null || _api$collabEdit3 === void 0 ? void 0 : _api$collabEdit3.isRemoteReplaceDocumentTransaction(tr);
        });
        if (!remoteReplaceDocumentTransaction || !remoteReplaceDocumentTransaction.selectionSet) {
          return;
        }
        var doc = newState.doc;
        var nextTr = newState.tr;
        var emptySelection = new TextSelection(doc.resolve(0));
        nextTr.setSelection(emptySelection);
        return nextTr;
      }
    });
  };
};
export var editorViewModeEffectsPlugin = function editorViewModeEffectsPlugin(_ref) {
  var api = _ref.api;
  return {
    name: 'editorViewModeEffects',
    actions: {
      applyViewModeStepAt: function applyViewModeStepAt(tr) {
        var marksSteps = tr.steps.reduce(function (acc, s) {
          // Ignored via go/ees007
          // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
          // TODO: We probably want to check the RemoveMarkStep flow too.
          if (s instanceof AddMarkStep || s instanceof AddNodeMarkStep) {
            acc.push(s);
          }
          return acc;
        }, []);
        if (marksSteps.length === 0) {
          return false;
        }
        marksSteps.reverse().map(function (s) {
          return s instanceof AddNodeMarkStep ? tr.step(ViewModeNodeStep.from(s)) : tr.step(ViewModeStep.from(s));
        });
        return true;
      }
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'editorViewModeEffectsFilterSteps',
        plugin: createFilterStepsPlugin(api)
      }, {
        name: 'editorViewModeEffectsReplaceDocumentTransaction',
        plugin: createReplaceDocumentTransactionPlugin(api)
      }];
    }
  };
};