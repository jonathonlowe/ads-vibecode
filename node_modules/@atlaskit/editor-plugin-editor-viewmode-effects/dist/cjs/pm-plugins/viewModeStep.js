"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewModeStep = exports.ViewModeNodeStep = void 0;
var _readOnlyError2 = _interopRequireDefault(require("@babel/runtime/helpers/readOnlyError"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _model = require("@atlaskit/editor-prosemirror/model");
var _transform = require("@atlaskit/editor-prosemirror/transform");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ViewModeStep = exports.ViewModeStep = /*#__PURE__*/function (_Step) {
  function ViewModeStep(_ref) {
    var _this;
    var inverted = _ref.inverted,
      from = _ref.from,
      to = _ref.to,
      mark = _ref.mark;
    (0, _classCallCheck2.default)(this, ViewModeStep);
    _this = _callSuper(this, ViewModeStep);
    _this.inverted = Boolean(inverted);
    _this.from = from;
    _this.to = to;
    _this.mark = mark;
    return _this;
  }
  (0, _inherits2.default)(ViewModeStep, _Step);
  return (0, _createClass2.default)(ViewModeStep, [{
    key: "invert",
    value: function invert(doc) {
      return new ViewModeStep({
        inverted: true,
        from: this.from,
        to: this.to,
        mark: this.mark
      });
    }
  }, {
    key: "apply",
    value: function apply(doc) {
      return _transform.StepResult.ok(doc);
    }
  }, {
    key: "merge",
    value: function merge() {
      return null;
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var mappedFrom = mapping.mapResult(this.from, 1);
      var mappedTo = mapping.mapResult(this.to, 1);
      if (mappedFrom.deleted || mappedTo.deleted) {
        return null;
      }
      return new ViewModeStep({
        inverted: this.inverted,
        from: mappedFrom.pos,
        to: mappedTo.pos
      });
    }
  }, {
    key: "getMap",
    value: function getMap() {
      return new _transform.StepMap([0, 0, 0]);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      // When serialized we should create a noop Replace step
      return {
        stepType: 'replace',
        from: 0,
        to: 0
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON() {
      // This is a "local custom step" once serialized
      // we need to transform it in a no-operation action
      return new _transform.ReplaceStep(0, 0, _model.Slice.empty);
    }
  }, {
    key: "from",
    value: function from(step) {
      var mark = step.mark,
        from = step.from,
        to = step.to;
      return new ViewModeStep({
        mark: mark,
        from: from,
        to: to
      });
    }
  }]);
}(_transform.Step);
var ViewModeNodeStep = exports.ViewModeNodeStep = /*#__PURE__*/function (_Step2) {
  function ViewModeNodeStep(_ref2) {
    var _this2;
    var inverted = _ref2.inverted,
      pos = _ref2.pos,
      mark = _ref2.mark;
    (0, _classCallCheck2.default)(this, ViewModeNodeStep);
    _this2 = _callSuper(this, ViewModeNodeStep);
    _this2.inverted = Boolean(inverted);
    _this2.pos = pos;
    _this2.mark = mark;
    return _this2;
  }
  (0, _inherits2.default)(ViewModeNodeStep, _Step2);
  return (0, _createClass2.default)(ViewModeNodeStep, [{
    key: "invert",
    value: function invert(doc) {
      return new ViewModeNodeStep({
        inverted: true,
        pos: this.pos,
        mark: this.mark
      });
    }
  }, {
    key: "apply",
    value: function apply(doc) {
      return _transform.StepResult.ok(doc);
    }
  }, {
    key: "merge",
    value: function merge() {
      return null;
    }
  }, {
    key: "map",
    value: function map(mapping) {
      var mappedPos = mapping.mapResult(this.pos, 1);
      if (mappedPos.deleted) {
        return null;
      }
      return new ViewModeNodeStep({
        inverted: this.inverted,
        pos: mappedPos.pos
      });
    }
  }, {
    key: "getMap",
    value: function getMap() {
      return new _transform.StepMap([0, 0, 0]);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      // When serialized we should create a noop Replace step
      return {
        stepType: 'replace',
        from: 0,
        to: 0
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON() {
      // This is a "local custom step" once serialized
      // we need to transform it in a no-operation action

      return new _transform.ReplaceStep(0, 0, _model.Slice.empty);
    }
  }, {
    key: "from",
    value: function from(step) {
      var mark = step.mark,
        pos = step.pos;
      return new ViewModeNodeStep({
        mark: mark,
        pos: pos
      });
    }
  }]);
}(_transform.Step);