import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { textColor } from '../marks/color';
import { N80, P300, T300, R300, Y400, G300 } from '@atlaskit/theme/colors';
var color = {
  grey: N80,
  purple: P300,
  blue: T300,
  red: R300,
  yellow: Y400,
  green: G300
};
export var status = function status(node) {
  var text = "*[ ".concat(node.attrs.text.toUpperCase(), " ]*");
  var newAttrs = _objectSpread({}, node.attrs);
  if (color[node.attrs.color]) {
    newAttrs.color = color[node.attrs.color];
  } else {
    newAttrs.color = color['grey'];
  }
  return textColor(text, newAttrs);
};