import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { commonMacro } from './common-macro';
import { parseString } from '../text';
import { parseAttrs } from '../utils/attrs';
import { normalizePMNodes } from '../utils/normalize';
import { getPanelType } from '../utils/panel-type';
import { title } from '../utils/title';
var allowedNodeType = ['paragraph', 'heading', 'orderedList', 'bulletList'];
export var panelMacro = function panelMacro(_ref) {
  var input = _ref.input,
    position = _ref.position,
    schema = _ref.schema,
    context = _ref.context;
  return commonMacro(input.substring(position), schema, {
    keyword: 'panel',
    paired: true,
    context: context,
    rawContentProcessor: rawContentProcessor
  });
};
var rawContentProcessor = function rawContentProcessor(rawAttrs, rawContent, length, schema, context) {
  var output = [];
  var parsedAttrs = parseAttrs(rawAttrs);
  var nodeAttrs = _objectSpread(_objectSpread({}, parsedAttrs), {}, {
    panelType: getPanelType(parsedAttrs)
  });
  var parsedContent = parseString({
    schema: schema,
    context: context,
    ignoreTokenTypes: [],
    input: rawContent
  });
  var normalizedContent = normalizePMNodes(parsedContent, schema);
  var contentBuffer = parsedAttrs.title ? [title(parsedAttrs.title, schema)] : [];
  var _iterator = _createForOfIteratorHelper(normalizedContent),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var n = _step.value;
      if (allowedNodeType.indexOf(n.type.name) !== -1) {
        contentBuffer.push(n);
      } else {
        var _panelNode = schema.nodes.panel.createChecked(nodeAttrs, contentBuffer.length ? contentBuffer : schema.nodes.paragraph.createChecked());
        contentBuffer = [];
        output.push(_panelNode);
        output.push(n);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (contentBuffer.length > 0) {
    var panelNode = schema.nodes.panel.createChecked(nodeAttrs, contentBuffer);
    output.push(panelNode);
  }
  return {
    type: 'pmnode',
    nodes: output.length ? output : [emptyPanel(schema)],
    length: length
  };
};
function emptyPanel(schema) {
  var p = schema.nodes.paragraph.createChecked();
  return schema.nodes.panel.createChecked({}, p);
}