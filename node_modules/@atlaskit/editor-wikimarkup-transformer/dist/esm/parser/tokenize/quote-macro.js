import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { commonMacro } from './common-macro';
import { hasAnyOfMarks } from '../utils/text';
import { normalizePMNodes } from '../utils/normalize';
import { parseString } from '../text';
export var quoteMacro = function quoteMacro(_ref) {
  var input = _ref.input,
    position = _ref.position,
    schema = _ref.schema,
    context = _ref.context;
  return commonMacro(input.substring(position), schema, {
    keyword: 'quote',
    paired: true,
    rawContentProcessor: rawContentProcessor,
    context: context
  });
};
export var rawContentProcessor = function rawContentProcessor(_rawAttrs, rawContent, length, schema, context) {
  if (!rawContent.length) {
    var emptyQuote = emptyBlockquote(schema);
    return {
      type: 'pmnode',
      nodes: [emptyQuote],
      length: length
    };
  }
  var parsedContent = parseString({
    schema: schema,
    context: context,
    ignoreTokenTypes: [],
    input: rawContent
  });
  var normalizedContent = normalizePMNodes(parsedContent, schema);
  return {
    type: 'pmnode',
    nodes: sanitize(normalizedContent, schema),
    length: length
  };
};
function emptyBlockquote(schema) {
  var p = schema.nodes.paragraph.createChecked({}, []);
  return schema.nodes.blockquote.createChecked({}, p);
}
function sanitize(nodes, schema) {
  var output = [];
  var contentBuffer = [];
  var _iterator = _createForOfIteratorHelper(nodes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var n = _step.value;
      switch (n.type.name) {
        case 'paragraph':
        case 'bulletList':
        case 'orderedList':
        case 'codeBlock':
        case 'mediaSingle':
        case 'mediaGroup':
          {
            /**
             * blockquote supports nesting paragraphs, lists, codeblocks and media nodes
             */
            contentBuffer.push(n);
            break;
          }
        case 'heading':
          {
            /**
             * If a heading is inside a list item
             * - h1. Bold, Uppercase
             * - h2. Bold, Italic
             * - h3. Bold
             * - h4. Bold, Gray
             * - h5. Gray, Italic
             * - h6. Gray
             */
            contentBuffer.push(transformHeading(n, schema));
            break;
          }
        default:
          /**
           * Anything else should be lifted
           */
          if (contentBuffer.length) {
            var _blockquote = schema.nodes.blockquote.createChecked({}, contentBuffer);
            output.push(_blockquote);
            contentBuffer = [];
          }
          output.push(n);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (contentBuffer.length) {
    var blockquote = schema.nodes.blockquote.createChecked({}, contentBuffer);
    output.push(blockquote);
  }
  return output;
}
function transformHeading(heading, schema) {
  var contentBuffer = [];
  heading.content.forEach(function (n) {
    var strong = schema.marks.strong.create();
    var italic = schema.marks.em.create();
    var gray = schema.marks.textColor.create({
      color: '#97a0af'
    });
    if (n.type.name === 'text') {
      if (n.text && heading.attrs.level === 1) {
        // @ts-ignore assigning to readonly prop to transform text
        n.text = n.text.toUpperCase();
      }
      if (heading.attrs.level <= 4 && !hasAnyOfMarks(n, ['strong', 'code'])) {
        n = n.mark([].concat(_toConsumableArray(n.marks), [strong]));
      }
      if ((heading.attrs.level === 5 || heading.attrs.level === 2) && !hasAnyOfMarks(n, ['em', 'code'])) {
        n = n.mark([].concat(_toConsumableArray(n.marks), [italic]));
      }
      if (heading.attrs.level > 3 && !hasAnyOfMarks(n, ['textColor', 'code'])) {
        n = n.mark([].concat(_toConsumableArray(n.marks), [gray]));
      }
    }
    contentBuffer.push(n);
  });
  return schema.nodes.paragraph.createChecked({}, contentBuffer);
}