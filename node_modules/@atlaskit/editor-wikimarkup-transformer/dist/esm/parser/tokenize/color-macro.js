import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { TokenType } from '.';
import { commonMacro } from './common-macro';
import { parseAttrs } from '../utils/attrs';
import { parseString } from '../text';
import { getEditorColor } from '../color';
import { hasAnyOfMarks } from '../utils/text';
export var colorMacro = function colorMacro(_ref) {
  var input = _ref.input,
    position = _ref.position,
    schema = _ref.schema,
    context = _ref.context;
  return commonMacro(input.substring(position), schema, {
    keyword: 'color',
    paired: true,
    context: context,
    rawContentProcessor: rawContentProcessor
  });
};
var rawContentProcessor = function rawContentProcessor(rawAttrs, rawContent, length, schema, context) {
  // Removed ISSUE_KEY for https://getsupport.atlassian.com/browse/MOVE-1738018
  // Issue keys were not being migrated correctly if they were inside the color macro.
  var ignoreTokenTypes = [TokenType.DOUBLE_DASH_SYMBOL, TokenType.TRIPLE_DASH_SYMBOL, TokenType.QUADRUPLE_DASH_SYMBOL, TokenType.TABLE];
  var parsedAttrs = parseAttrs(rawAttrs);
  var content = parseString({
    ignoreTokenTypes: ignoreTokenTypes,
    schema: schema,
    context: context,
    input: rawContent
  });
  var decoratedContent = content.map(function (n) {
    var mark = schema.marks.textColor.create({
      color: getEditorColor(parsedAttrs) || '#000000'
    });

    // We don't want to mix `code` mark with others
    if (n.type.name === 'text' && !hasAnyOfMarks(n, ['textColor', 'code'])) {
      return n.mark([].concat(_toConsumableArray(n.marks), [mark]));
    }
    return n;
  });
  return {
    type: 'pmnode',
    nodes: decoratedContent,
    length: length
  };
};