import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { PluginKey } from '@atlaskit/editor-prosemirror/state';
import VisuallyHidden from '@atlaskit/visually-hidden';
export const accessibilityUtilsPluginKey = new PluginKey('accessibilityUtilsPlugin');
export const accessibilityUtilsPlugin = ({
  api
}) => {
  let editorView;
  const setEditorView = newEditorView => {
    editorView = newEditorView;
  };
  return {
    name: 'accessibilityUtils',
    actions: {
      ariaNotify: (message, ariaLiveElementAttributes) => {
        if (!editorView) {
          // at time of writing, this should never happen
          return;
        }
        const tr = editorView.state.tr;
        tr.setMeta(accessibilityUtilsPluginKey, {
          message,
          ariaLiveElementAttributes,
          key: Date.now().toString()
        });
        editorView.dispatch(tr);
        return;
      }
    },
    contentComponent: () => {
      return /*#__PURE__*/React.createElement(ContentComponent, {
        api: api
      });
    },
    getSharedState(editorState) {
      if (!editorState) {
        return null;
      }
      return accessibilityUtilsPluginKey.getState(editorState);
    },
    pmPlugins() {
      return [{
        name: 'get-editor-view',
        plugin: () => {
          return new SafePlugin({
            key: accessibilityUtilsPluginKey,
            state: {
              init: () => ({
                message: '',
                ariaLiveElementAttributes: {}
              }),
              apply: (tr, prevState) => {
                const meta = tr.getMeta(accessibilityUtilsPluginKey);
                if (meta) {
                  return {
                    ...prevState,
                    ...meta
                  };
                }
                return prevState;
              }
            },
            view(editorView) {
              setEditorView(editorView);
              return {};
            }
          });
        }
      }];
    }
  };
};
function ContentComponent({
  api
}) {
  var _accessibilityUtilsSt;
  const {
    accessibilityUtilsState
  } = useSharedPluginState(api, ['accessibilityUtils']);
  const role = (accessibilityUtilsState === null || accessibilityUtilsState === void 0 ? void 0 : (_accessibilityUtilsSt = accessibilityUtilsState.ariaLiveElementAttributes) === null || _accessibilityUtilsSt === void 0 ? void 0 : _accessibilityUtilsSt.priority) === 'important' ? 'alert' : 'status';
  const key = accessibilityUtilsState === null || accessibilityUtilsState === void 0 ? void 0 : accessibilityUtilsState.key;
  return /*#__PURE__*/React.createElement(VisuallyHidden, _extends({
    testId: 'accessibility-message-wrapper',
    role: role
    // Ignored via go/ees005
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, role === 'alert' && {
    key
  }), accessibilityUtilsState === null || accessibilityUtilsState === void 0 ? void 0 : accessibilityUtilsState.message);
}