"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _utils = require("@atlaskit/editor-common/utils");
var _history = require("@atlaskit/editor-prosemirror/history");
var _model = require("@atlaskit/editor-prosemirror/model");
var _state = require("@atlaskit/editor-prosemirror/state");
var _transform = require("@atlaskit/editor-prosemirror/transform");
var _pluginKey = require("./plugin-key");
var getEnterKeyboardActionStep = function getEnterKeyboardActionStep(trs) {
  var firstTr = trs.length === 1 && trs[0];
  if (!firstTr || !firstTr.docChanged || !firstTr.isGeneric || !(firstTr.selection instanceof _state.TextSelection)) {
    return null;
  }
  var selection = firstTr.selection,
    steps = firstTr.steps;
  var replaceSteps = steps.filter(function (step) {
    return step instanceof _transform.ReplaceStep || step instanceof _transform.ReplaceAroundStep;
  });
  if (!selection.$cursor || replaceSteps.length !== 1) {
    return null;
  }
  return replaceSteps[0];
};
var isSliceSplittingBlockNode = function isSliceSplittingBlockNode(slice) {
  var hasOnlyTwoChildren = slice.size > 1 && slice.content.childCount === 2;
  if (!hasOnlyTwoChildren) {
    return false;
  }
  var firstNode = slice.content.child(0);
  var secondNode = slice.content.child(1);
  return firstNode && secondNode && firstNode.type === secondNode.type;
};
var isSliceAddingNewlineChar = function isSliceAddingNewlineChar(slice, schema) {
  var newLine = _model.Fragment.from(schema.text('\n'));
  return slice.content.eq(newLine);
};
var _default = exports.default = function _default() {
  return new _safePlugin.SafePlugin({
    key: _pluginKey.pluginKey,
    appendTransaction: function appendTransaction(transactions, oldState, newState) {
      var hasHandlePasteMeta = transactions.find(function (tran) {
        return tran.getMeta(_pluginKey.pluginKey);
      });
      if (hasHandlePasteMeta) {
        return (0, _history.closeHistory)(newState.tr);
      }
      var enterStep = getEnterKeyboardActionStep(transactions);
      if (!enterStep) {
        return;
      }
      var slice = (0, _utils.extractSliceFromStep)(enterStep);
      var schema = newState.schema;
      if (slice && (isSliceSplittingBlockNode(slice) || isSliceAddingNewlineChar(slice, schema))) {
        return (0, _history.closeHistory)(newState.tr);
      }
    }
  });
};