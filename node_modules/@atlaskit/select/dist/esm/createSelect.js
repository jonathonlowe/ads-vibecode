import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["ariaLiveMessages", "isInvalid", "onClickPreventDefault", "tabSelectsValue", "validationState"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlaskit/platform/ensure-feature-flag-prefix */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { isOptionsGrouped, onFocus as _onFocus } from './utils/grouped-options-announcement';
export default function createSelect(WrappedComponent) {
  var AtlaskitSelect = /*#__PURE__*/forwardRef(function AtlaskitSelect(props, forwardedRef) {
    var ariaLiveMessages = props.ariaLiveMessages,
      isInvalid = props.isInvalid,
      _props$onClickPrevent = props.onClickPreventDefault,
      onClickPreventDefault = _props$onClickPrevent === void 0 ? true : _props$onClickPrevent,
      _props$tabSelectsValu = props.tabSelectsValue,
      tabSelectsValue = _props$tabSelectsValu === void 0 ? false : _props$tabSelectsValu,
      _props$validationStat = props.validationState,
      validationState = _props$validationStat === void 0 ? 'default' : _props$validationStat,
      restProps = _objectWithoutProperties(props, _excluded);
    var internalSelectRef = useRef(null);

    /**
     * The following `useImperativeHandle` hook exists for the sake of backwards compatibility.
     * This component used to be a class component which set the value of the `ref` prop to object with the properties and value as below.
     * This has lead to slightly odd usage of refs with this component, e.g. `myRef.current.select.select.controlRef` instead of just `myRef.current.select.controlRef`
     * In the next major release, this should removed and the ref should be passed directly to the wrapped component (given users have updated usage)
     * More info https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/88021/overview
     */
    useImperativeHandle(forwardedRef, function () {
      return {
        select: internalSelectRef.current,
        focus: function focus() {
          var _internalSelectRef$cu;
          return (_internalSelectRef$cu = internalSelectRef.current) === null || _internalSelectRef$cu === void 0 ? void 0 : _internalSelectRef$cu.focus();
        },
        blur: function blur() {
          var _internalSelectRef$cu2;
          return (_internalSelectRef$cu2 = internalSelectRef.current) === null || _internalSelectRef$cu2 === void 0 ? void 0 : _internalSelectRef$cu2.blur();
        }
      };
    }, []);
    return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
      ref: internalSelectRef,
      "aria-live": fg('design_system_select-a11y-improvement') ? undefined : 'assertive',
      ariaLiveMessages:
      //TO DO: Still need live region for PopupSelect because of the menu being open by default
      isOptionsGrouped(props.options) ? _objectSpread({
        onFocus: function onFocus(data) {
          return _onFocus(data, props.options);
        }
      }, ariaLiveMessages) : _objectSpread({}, ariaLiveMessages),
      tabSelectsValue: tabSelectsValue,
      onClickPreventDefault: onClickPreventDefault,
      isInvalid: isInvalid || validationState === 'error'
    }, restProps, {
      // indicates react-select to be async by default using the base Select component
      // so that makers can pass all async props on the base select to async load options.
      isAsync: true
    }));
  });
  AtlaskitSelect.displayName = 'AtlaskitSelect';
  return AtlaskitSelect;
}