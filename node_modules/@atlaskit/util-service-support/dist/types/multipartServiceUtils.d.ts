import { type RequestServiceOptions, type ServiceConfig } from './types';
export type PartsGenerator<PartsType> = AsyncGenerator<Part<PartsType, unknown>>;
export type MultiPartFetchResult<PartsType> = {
    isMultipart: true;
    parts: PartsGenerator<PartsType>;
};
export type BodyResult<T> = {
    isMultipart: false;
    body: T;
};
export type RequestServiceResult<PartsType, BodyType> = MultiPartFetchResult<PartsType> | BodyResult<BodyType>;
/** Copied from meros types, as there are difficulties with resolving the type in CI */
export type Part<Body, Fallback> = {
    json: false;
    headers: Record<string, string>;
    body: Fallback;
} | {
    json: true;
    headers: Record<string, string>;
    body: Body;
};
type Options = Omit<RequestServiceOptions, 'ignoreResponsePayload'>;
/**
 * Make a request that **may** result in an HTTP multipart response from the server.
 * @returns an object with a parsed JSON body OR an object with the parts from
 * the HTTP multipart response.
 *
 * PartsType type parameter specifies the type of the response when the server response
 * is multipart.
 *
 * BodyType specifies the type of the response when the server response is not multipart
 */
export declare const requestServiceMultipart: <PartsType, BodyType>(serviceConfig: ServiceConfig, options?: Options) => Promise<RequestServiceResult<PartsType, BodyType>>;
export {};
