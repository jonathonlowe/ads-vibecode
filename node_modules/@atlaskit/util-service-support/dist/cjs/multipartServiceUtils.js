"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestServiceMultipart = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _browser = require("meros/browser");
var _types = require("./types");
var _shared = require("./shared");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _featureFlagsAccessed = require("@atlaskit/react-ufo/feature-flags-accessed");
var _experienceTraceIdContext = require("@atlaskit/react-ufo/experience-trace-id-context");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/** Copied from meros types, as there are difficulties with resolving the type in CI */

/**
 * Make a request that **may** result in an HTTP multipart response from the server.
 * @returns an object with a parsed JSON body OR an object with the parts from
 * the HTTP multipart response.
 *
 * PartsType type parameter specifies the type of the response when the server response
 * is multipart.
 *
 * BodyType specifies the type of the response when the server response is not multipart
 */
var _requestServiceMultipart = exports.requestServiceMultipart = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(serviceConfig) {
    var options,
      url,
      securityProvider,
      refreshedSecurityProvider,
      path,
      queryParams,
      requestInit,
      secOptions,
      requestUrl,
      headers,
      credentials,
      TRACING_HEADER_FOR_SERVICE_UTIL,
      tracingHeaderEnabled,
      tracingHeaders,
      requestOptions,
      fetchResponse,
      parts,
      _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : _shared.defaultRequestServiceOptions;
          url = serviceConfig.url, securityProvider = serviceConfig.securityProvider, refreshedSecurityProvider = serviceConfig.refreshedSecurityProvider;
          path = options.path, queryParams = options.queryParams, requestInit = options.requestInit;
          secOptions = securityProvider && securityProvider();
          requestUrl = (0, _shared.buildUrl)(url, path, queryParams, secOptions);
          headers = (0, _shared.buildHeaders)(secOptions, requestInit && requestInit.headers);
          credentials = (0, _types.buildCredentials)(secOptions); // Get tracing headers from UFO
          TRACING_HEADER_FOR_SERVICE_UTIL = 'platform_collab_provider_tracingheaders';
          tracingHeaderEnabled = (0, _platformFeatureFlags.fg)('platform_collab_provider_tracingheaders');
          (0, _featureFlagsAccessed.addFeatureFlagAccessed)(TRACING_HEADER_FOR_SERVICE_UTIL, tracingHeaderEnabled);
          tracingHeaders = {};
          if (tracingHeaderEnabled) {
            tracingHeaders = (0, _experienceTraceIdContext.getActiveTraceHttpRequestHeaders)(url);
          }
          requestOptions = _objectSpread(_objectSpread({}, requestInit), {}, {
            // populate headers mainly for the collab provider however
            // other components which uses this util can get the header as well.
            // Those tracing headers shall not incur any issues as long as backends handle them properly
            headers: _objectSpread(_objectSpread({}, headers), tracingHeaders),
            credentials: credentials
          });
          _context.next = 15;
          return fetch(requestUrl, requestOptions);
        case 15:
          fetchResponse = _context.sent;
          _context.next = 18;
          return (0, _browser.meros)(fetchResponse);
        case 18:
          parts = _context.sent;
          if (!(fetchResponse.ok && fetchResponse.status !== 204)) {
            _context.next = 28;
            break;
          }
          if (!(parts[Symbol.asyncIterator] < 'u')) {
            _context.next = 22;
            break;
          }
          return _context.abrupt("return", {
            isMultipart: true,
            parts: parts
          });
        case 22:
          _context.next = 24;
          return parts.json();
        case 24:
          _context.t0 = _context.sent;
          return _context.abrupt("return", {
            isMultipart: false,
            body: _context.t0
          });
        case 28:
          if (!(fetchResponse.status === 401 && refreshedSecurityProvider)) {
            _context.next = 30;
            break;
          }
          return _context.abrupt("return", refreshedSecurityProvider().then(function (newSecOptions) {
            var retryServiceConfig = {
              url: url,
              securityProvider: function securityProvider() {
                return newSecOptions;
              }
            };
            return _requestServiceMultipart(retryServiceConfig, options);
          }));
        case 30:
          return _context.abrupt("return", Promise.reject({
            code: fetchResponse.status,
            reason: fetchResponse.statusText
          }));
        case 31:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function requestServiceMultipart(_x) {
    return _ref.apply(this, arguments);
  };
}();