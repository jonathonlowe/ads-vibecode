/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { MediaSVGError } from './errors';
const svgRendererMaxDimensionStyles = css({
  maxWidth: '100%',
  maxHeight: '100%'
});
const svgRendererStyles = css({
  objectFit: 'contain',
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  backgroundColor: 'white' // This background color is for transparency
});
export const SvgRenderer = /*#__PURE__*/forwardRef(({
  identifier: {
    id,
    collectionName
  },
  testId,
  svgUrl,
  source,
  dimensions,
  onError,
  alt,
  onLoad,
  onMouseDown,
  style
}, ref) => {
  const {
    width,
    height
  } = dimensions || style || {};
  return (
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    jsx("img", {
      "data-testid": testId,
      "data-fileid": id,
      "data-filecollection": collectionName,
      "data-source": source,
      src: svgUrl,
      alt: alt,
      css: [svgRendererStyles, !width && !height && svgRendererMaxDimensionStyles],
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
        ...style,
        width: (dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || (style === null || style === void 0 ? void 0 : style.width),
        height: (dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) || (style === null || style === void 0 ? void 0 : style.height)
      },
      onLoad: onLoad,
      onMouseDown: onMouseDown,
      onError: () => {
        onError && onError(new MediaSVGError('img-error'));
      },
      ref: ref
    })
  );
});