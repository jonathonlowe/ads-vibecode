/* icon-wrapper.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./icon-wrapper.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { CSS_VAR_ICON, CSS_VAR_THEMED_ICON, CSS_VAR_TILE } from './constants';
const styles = {
  root: "_1e0c1o8l"
};
const sizeMap = {
  '12': "_4t3i1crf",
  '16': "_4t3i7vkz",
  '20': "_4t3igktf",
  '24': "_4t3i1tcg",
  small: "_4t3i1tcg",
  medium: "_4t3izwfg",
  '32': "_4t3izwfg"
};
export function IconWrapper({
  size = '20',
  label,
  svg,
  customThemeSvg,
  testId: userDefinedTestId,
  appearance = 'brand',
  iconColor
}) {
  const testId = userDefinedTestId && `${userDefinedTestId}--wrapper`;
  const isCustomThemed = customThemeSvg && iconColor;
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId,
    style: {
      // The 'legacy' appearance replaces icon colors with a blue tile and white icon, controlled via CSS variables
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      [CSS_VAR_ICON]: appearance === 'legacy' ? 'white' : 'initial',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      [CSS_VAR_TILE]: appearance === 'legacy' ? '#1868DB' : 'initial',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
      [CSS_VAR_THEMED_ICON]: iconColor || 'initial'
    }
    // In some icons (such as the app switcher specific icons), the label is a consumer prop.
    // If the label is provided an empty string, we want to remove the element from the accessibility tree.
    ,
    "aria-label": label ? label : undefined,
    role: label ? 'img' : undefined,
    "aria-hidden": label === '' ? true : undefined
    // We are using dangerouslySetInnerHTML here to tell React not to track changes to the SVG elements.
    // This is because the SVG elements are static and will not change, so we get a little performance benefit by
    // bypassing React.
    ,
    dangerouslySetInnerHTML: {
      __html: isCustomThemed ? customThemeSvg : svg
    },
    className: ax([styles.root, sizeMap[size]])
  });
}