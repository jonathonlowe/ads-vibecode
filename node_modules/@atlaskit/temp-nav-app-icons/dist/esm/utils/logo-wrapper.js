/* logo-wrapper.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./logo-wrapper.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useThemeObserver } from '@atlaskit/tokens';
import { CSS_VAR_THEMED_ICON, CSS_VAR_THEMED_TEXT } from './constants';
var styles = {
  root: "_1e0c1o8l _vwz4idpf"
};

// These styles set the `color` property so that the child SVG can inherit the correct text color using "currentColor"
var logoTextColorMap = {
  light: "_syazqlpt",
  dark: "_syazz6c6"
};
export function LogoWrapper(_ref) {
  var svg = _ref.svg,
    customThemeSvg = _ref.customThemeSvg,
    label = _ref.label,
    userDefinedTestId = _ref.testId,
    iconColor = _ref.iconColor,
    textColor = _ref.textColor;
  var _useThemeObserver = useThemeObserver(),
    colorMode = _useThemeObserver.colorMode;
  var testId = userDefinedTestId && "".concat(userDefinedTestId, "--wrapper");
  var isCustomThemed = customThemeSvg && (iconColor || textColor);
  return /*#__PURE__*/React.createElement("span", {
    style: _defineProperty(_defineProperty({}, CSS_VAR_THEMED_ICON, iconColor === 'inherit' ? textColor : iconColor || 'initial'), CSS_VAR_THEMED_TEXT, textColor || 'initial'),
    "data-testid": testId
    // For logos, the label will always be present and will never be an empty string, so we can always set these aria attributes.
    ,
    "aria-label": label,
    role: label ? 'img' : undefined,
    "aria-hidden": label === '' ? true : undefined
    // We are using dangerouslySetInnerHTML here to tell React not to track changes to the SVG elements.
    // This is because the SVG elements are static and will not change, so we get a little performance benefit by
    // bypassing React.
    ,
    dangerouslySetInnerHTML: {
      __html: isCustomThemed ? customThemeSvg : svg
    },
    className: ax([styles.root,
    // Setting the color so that the SVG can inherit the correct text color using "currentColor"
    logoTextColorMap[colorMode !== null && colorMode !== void 0 ? colorMode : 'light']])
  });
}