"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FocusManagerContext = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _bindEventListener = require("bind-event-listener");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _layering = require("@atlaskit/layering");
var _handleFocus = _interopRequireDefault(require("../utils/handle-focus"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 *
 *
 * Context provider which maintains the list of focusable elements and a method to
 * register new menu items.
 * This list drives the keyboard navigation of the menu.
 *
 */
var FocusManagerContext = exports.FocusManagerContext = /*#__PURE__*/(0, _react.createContext)({
  menuItemRefs: [],
  registerRef: _noop.default
});

/**
 * Focus manager logic.
 */
var FocusManager = function FocusManager(_ref) {
  var children = _ref.children,
    onClose = _ref.onClose;
  var menuItemRefs = (0, _react.useRef)([]);
  // Used to force a re-render only
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    refresh = _useState2[0],
    setRefresh = _useState2[1];
  var registerMode = (0, _react.useRef)('ordered');
  registerMode.current = 'ordered';
  var registerRef = (0, _react.useCallback)(function (ref) {
    if (menuItemRefs.current.includes(ref)) {
      return;
    }
    switch (registerMode.current) {
      case 'ordered':
        menuItemRefs.current.push(ref);
        break;
      case 'unordered':
        // Reset and force a rerender
        registerMode.current = 'regenerate';
        menuItemRefs.current = [];
        setRefresh(refresh + 1);
        break;
      case 'regenerate':
        // Ignore registrations until the next render cycle
        break;
      default:
        throw new Error("Unexpected case of ".concat(registerMode.current));
    }
  },
  // Updating register ref on force reload will cause `useRegisterItemWithFocusManager` to re-register
  [refresh]);
  var _useLayering = (0, _layering.useLayering)(),
    isLayerDisabled = _useLayering.isLayerDisabled;
  // Intentionally rebinding on each render
  (0, _react.useEffect)(function () {
    if (registerMode.current === 'ordered') {
      // Use effect is called after rendering is complete and useEffects of the children a called first
      registerMode.current = 'unordered';
    }
  });
  (0, _react.useEffect)(function () {
    return (0, _bindEventListener.bind)(window, {
      type: 'keydown',
      listener: (0, _handleFocus.default)(menuItemRefs, isLayerDisabled, onClose)
    });
  }, [isLayerDisabled, onClose]);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef: registerRef
  };
  return /*#__PURE__*/_react.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var _default = exports.default = FocusManager;