"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _menu = require("@atlaskit/menu");
var _buttonItem = _interopRequireDefault(require("@atlaskit/menu/button-item"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _checkboxIcon = _interopRequireDefault(require("../internal/components/checkbox-icon"));
var _useCheckboxState3 = _interopRequireDefault(require("../internal/hooks/use-checkbox-state"));
var _useRegisterItemWithFocusManager = _interopRequireDefault(require("../internal/hooks/use-register-item-with-focus-manager"));
var _excluded = ["children", "defaultSelected", "description", "id", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "testId", "interactionName"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * __Dropdown item checkbox__
 *
 * A dropdown item checkbox creates groups that have multiple selections.
 *
 * - [Examples](https://atlassian.design/components/dropdown-menu/dropdown-item-checkbox/examples)
 * - [Code](https://atlassian.design/components/dropdown-menu/dropdown-item-checkbox/code)
 * - [Usage](https://atlassian.design/components/dropdown-menu/dropdown-item-checkbox/usage)
 */
var DropdownItemCheckbox = function DropdownItemCheckbox(_ref) {
  var children = _ref.children,
    defaultSelected = _ref.defaultSelected,
    description = _ref.description,
    id = _ref.id,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    _ref$onClick = _ref.onClick,
    providedOnClick = _ref$onClick === void 0 ? _noop.default : _ref$onClick,
    _ref$shouldDescriptio = _ref.shouldDescriptionWrap,
    shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio,
    _ref$shouldTitleWrap = _ref.shouldTitleWrap,
    shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap,
    testId = _ref.testId,
    interactionName = _ref.interactionName,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && typeof isSelected !== 'undefined' && typeof defaultSelected !== 'undefined') {
    // eslint-disable-next-line no-console
    console.warn("[DropdownItemCheckbox] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useCheckboxState = (0, _useCheckboxState3.default)({
      id: id,
      isSelected: isSelected,
      defaultSelected: defaultSelected
    }),
    _useCheckboxState2 = (0, _slicedToArray2.default)(_useCheckboxState, 2),
    selected = _useCheckboxState2[0],
    setSelected = _useCheckboxState2[1];
  var onClickHandler = (0, _react.useCallback)(function (event) {
    setSelected(function (selected) {
      return !selected;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = (0, _useRegisterItemWithFocusManager.default)();
  return /*#__PURE__*/_react.default.createElement(_menu.SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, /*#__PURE__*/_react.default.createElement(_buttonItem.default, (0, _extends2.default)({
    "aria-checked": selected,
    description: description,
    iconBefore: /*#__PURE__*/_react.default.createElement(_checkboxIcon.default, {
      checked: selected
    }),
    id: id,
    isDisabled: isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemcheckbox",
    shouldDescriptionWrap: shouldDescriptionWrap,
    shouldTitleWrap: shouldTitleWrap,
    testId: testId
  }, (0, _platformFeatureFlags.fg)('platform_button_item-add-ufo-metrics') && {
    interactionName: interactionName
  }, rest), children));
};
var _default = exports.default = DropdownItemCheckbox;