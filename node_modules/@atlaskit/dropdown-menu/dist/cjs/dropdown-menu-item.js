"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));
var _buttonItem = _interopRequireDefault(require("@atlaskit/menu/button-item"));
var _customItem = _interopRequireDefault(require("@atlaskit/menu/custom-item"));
var _linkItem = _interopRequireDefault(require("@atlaskit/menu/link-item"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _useRegisterItemWithFocusManager = _interopRequireDefault(require("./internal/hooks/use-register-item-with-focus-manager"));
var _excluded = ["children", "component", "description", "elemAfter", "elemBefore", "href", "isDisabled", "isSelected", "onClick", "rel", "shouldDescriptionWrap", "shouldTitleWrap", "target", "testId", "UNSAFE_shouldDisableRouterLink", "returnFocusRef", "interactionName", "role"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * __Dropdown menu item__
 *
 * A dropdown item populates the dropdown menu with items. Every item should be inside a dropdown item group.
 *
 * - [Examples](https://atlassian.design/components/dropdown-menu/dropdown-item/examples)
 * - [Code](https://atlassian.design/components/dropdown-menu/dropdown-item/code)
 * - [Usage](https://atlassian.design/components/dropdown-menu/dropdown-item/usage)
 */
var DropdownMenuItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    component = _ref.component,
    description = _ref.description,
    elemAfter = _ref.elemAfter,
    elemBefore = _ref.elemBefore,
    href = _ref.href,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    rel = _ref.rel,
    _ref$shouldDescriptio = _ref.shouldDescriptionWrap,
    shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio,
    _ref$shouldTitleWrap = _ref.shouldTitleWrap,
    shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap,
    target = _ref.target,
    testId = _ref.testId,
    UNSAFE_shouldDisableRouterLink = _ref.UNSAFE_shouldDisableRouterLink,
    returnFocusRef = _ref.returnFocusRef,
    interactionName = _ref.interactionName,
    role = _ref.role,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  // if the dropdown item has aria-haspopup, we won't register with focus manager
  // since it is a nested trigger, we have registered inside dropdown-menu
  var itemRef = (0, _useRegisterItemWithFocusManager.default)(!!rest['aria-haspopup']);
  var handleItemClick = (0, _react.useCallback)(function (event) {
    if (returnFocusRef !== null && returnFocusRef !== void 0 && returnFocusRef.current) {
      returnFocusRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  }, [onClick, returnFocusRef]);
  if (component) {
    return /*#__PURE__*/_react.default.createElement(_customItem.default, (0, _extends2.default)({
      component: component,
      description: description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled: isDisabled,
      isSelected: isSelected,
      onClick: handleItemClick,
      ref: (0, _mergeRefs.default)([ref, itemRef]),
      shouldDescriptionWrap: shouldDescriptionWrap,
      shouldTitleWrap: shouldTitleWrap,
      testId: testId,
      href: href
      // Thanks to spread props, these attributes are passed to CustomItem, even though
      // it's not in the component's prop types.
      // @ts-expect-error
      ,
      target: target,
      rel: rel
    }, (0, _platformFeatureFlags.fg)('platform_button_item-add-ufo-metrics') && {
      interactionName: interactionName
    }, rest), children);
  } else if (href) {
    return /*#__PURE__*/_react.default.createElement(_linkItem.default, (0, _extends2.default)({
      description: description,
      href: href,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled: isDisabled,
      isSelected: isSelected,
      onClick: handleItemClick,
      ref: (0, _mergeRefs.default)([ref, itemRef]),
      rel: rel,
      role: "menuitem",
      shouldDescriptionWrap: shouldDescriptionWrap,
      shouldTitleWrap: shouldTitleWrap,
      target: target,
      testId: testId,
      UNSAFE_shouldDisableRouterLink: UNSAFE_shouldDisableRouterLink
    }, (0, _platformFeatureFlags.fg)('platform_button_item-add-ufo-metrics') && {
      interactionName: interactionName
    }, rest), children);
  } else {
    return /*#__PURE__*/_react.default.createElement(_buttonItem.default, (0, _extends2.default)({
      description: description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled: isDisabled,
      isSelected: isSelected,
      onClick: handleItemClick,
      ref: (0, _mergeRefs.default)([ref, itemRef]),
      role: role || 'menuitem',
      shouldDescriptionWrap: shouldDescriptionWrap,
      shouldTitleWrap: shouldTitleWrap,
      testId: testId
      // Thanks to spread props, these attributes are passed to CustomItem, even though
      // it's not in the component's prop types.
      // @ts-expect-error
      ,
      target: target,
      rel: rel
    }, (0, _platformFeatureFlags.fg)('platform_button_item-add-ufo-metrics') && {
      interactionName: interactionName
    }, rest), children);
  }
});
var _default = exports.default = DropdownMenuItem;