import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
// This wrapper supports the async loading of refractor and language grammars. The internal Highlight is a memo() functional component as expected
// eslint-disable-next-line @repo/internal/react/no-class-components
export var SyntaxHighlighter = /*#__PURE__*/function (_React$PureComponent) {
  function SyntaxHighlighter() {
    _classCallCheck(this, SyntaxHighlighter);
    return _callSuper(this, SyntaxHighlighter, arguments);
  }
  _inherits(SyntaxHighlighter, _React$PureComponent);
  return _createClass(SyntaxHighlighter);
}(React.PureComponent);

/**
 * Function that receives current line number as argument and returns a
 * line props object to be applied to each `span` wrapping code line.
 */

/**
 * Props to be passed to the `span` wrapping each code line. Can be an
 * object or a function that receives current line number as argument and
 * returns a props object.
 */