"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bidiCharacterRegex = void 0;
exports.default = codeBidiWarningDecorator;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var bidiCharacterRegex = exports.bidiCharacterRegex = /[\u202A-\u202E\u2066-\u2069]/g;

/**
 * __Code Bidi Warning Decorator__
 *
 * Checks the code to see if it contains any bidi characters.
 * In case if bidi characters found - returns children with decorated
 * bidi characters. If no bidi characters found - original text returned.
 */
function codeBidiWarningDecorator(originalText, decorate) {
  var matches = (0, _toConsumableArray2.default)(originalText.matchAll(bidiCharacterRegex));
  if (matches.length === 0) {
    // No matches encountered, so we return the originalText value
    return originalText;
  }
  var children = [];
  var mappedTo = 0;
  var _iterator = _createForOfIteratorHelper(matches),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var match = _step.value;
      if (mappedTo !== match.index) {
        // There were unmatched characters prior to this match which haven't been
        // mapped to the children.
        // Add them as plain text.
        children.push(originalText.substring(mappedTo, match.index));
      }
      children.push(decorate({
        bidiCharacter: match[0],
        index: match.index
      }));

      // While index is guaranteed to be present, it needs to be asserted due
      // to a limitation of typescripts regex handling
      //
      // https://github.com/microsoft/TypeScript/issues/36788
      // Decorate bidi character
      mappedTo = match.index + match[0].length;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (mappedTo !== originalText.length) {
    // There is text following the final match, which needs to be mapped
    // to the children.
    // Added as plain text.
    children.push(originalText.substring(mappedTo, originalText.length));
  }

  // return the mapped children with decorated bidi characters
  return children;
}