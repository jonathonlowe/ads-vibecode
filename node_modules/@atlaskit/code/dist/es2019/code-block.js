/* code-block.tsx generated by @compiled/babel-plugin v0.36.1 */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-selectors */
/* eslint-disable @atlaskit/ui-styling-standard/no-nested-selectors */
import "./code-block.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { memo, useCallback, useMemo } from 'react';
import { useHighlightLines } from './internal/hooks/use-highlight';
import { getLineNumWidth } from './internal/theme/styles';
import { normalizeLanguage } from './internal/utils/get-normalized-language';
import SyntaxHighlighter from './syntax-highlighter';
const getCodeBlockStyles = {
  root: "_2rkoglpi _1dqoglyw _1wyb1crf _k48pi7a9 _1e0c1txw _vwz4gktf _1reo1wug _o572qvpr _1eimjvyg _bfhktkvp _syaz1fxt _ect41odn _1ozdn7od _7xinn7od _t7aun7od _1v15u2gc _ilvcu2gc _m29uu2gc _17wyu2gc _pn28u2gc _gz9fu2gc _1hmyegat _vblregat _vbulegat _wozj1dyw _1agb1dyw _lkm81dyw _tv41hkgb _1hmimyb0 _1ra01n1a _1d4j1y44 _1f8gstnw _1pzyb3bt _j1w0ww7y _13cdh2mm _15ba126e _zvy9f705 _qcxof705 _14y71a66 _j0l11wug _1weckb7n _1na21hna _1xx2grf3 _x7c815vq _lh0y15vq _1m3815vq _qk1e15vq _12l6ysn8 _uga3ysn8 _mx8b7mnp _1kr87mnp _xo19t94y _1bemt94y _nalpstnw _151dstnw _1exb1q9c _1hgu1q9c _1mgnt94y _nhket94y _h909m7j4 _scgayz1z _ipl81e17 _jeky1l04 _1gec1a66 _1gx21e5h _1ls0df4r _vm2c1rh5 _12ok1rh5 _1ls01ule _rude1ule _1q16glyw _1io6glyw _juomusic _lcwuusic _1552u2gc _12afu2gc _28ddu2gc _1i8zu2gc _12tu1a66 _zu0j1a66 _euyxusvi _cahfusvi _zhnuidpf _1amdidpf _mbgcpf9b _bu7zpf9b _131n1giz _gy101giz _1wfuwrk5 _16kzwrk5 _9kk3moej _cjus1w1g _9k2r1m30 _nhmw1m30 _yl021m30 _eiht5x2v _t9zb5x2v _mqok1w1g _3hsg1w1g _i7ngn7od _9wu1fb2s _1xcoh55r _1t361fxt _137bh55r _1k7d1fxt _97lipnps _12nh9lu1 _1g0517qg _i2ig10m5 _326z1fxt _113p131l _1n6tpnps _tgu817qg _1k47pnps _g0lx1fxt _ys4e131l _7gp8h55r _1yvq10m5 _1vww10m5 _1rju10m5 _1v0lh55r _wmyy17qg _748n17qg _1mfn17qg _1d7e17qg _p2vr17qg _19o610m5 _kxov17qg _1np517qg _m2f517qg _1b9tpnps _1tq6pnps _1rd2pnps _1pbkpnps _k3lipnps _13zt131l _2g12fb2s _k86b10m5 _b5iy131l _gti3131l _1f0gpnps _9d3e17qg _qdiapnps _72uvpnps",
  showLineNumbers: "_17071olh _1i3h1txw _1huoidpf _1a9lidpf _20bqidpf _1oggidpf _bympidpf _9nnjidpf",
  dontShowLineNumbers: "_1i3h1ule _1huou2gc _1a9lu2gc _20bqu2gc _1oggu2gc _bympu2gc _9nnju2gc",
  shouldWrapLongLines: "_13dgkb7n",
  dontWrapLongLines: "_13dgkb7n"
};

/**
 * __Code block__
 *
 * A code block highlights an entire block of code and keeps the formatting.
 *
 * - [Examples](https://atlassian.design/components/code/code-block/examples)
 * - [Code](https://atlassian.design/components/code/code-block/code)
 * - [Usage](https://atlassian.design/components/code/code-block/usage)
 */
const CodeBlock = /*#__PURE__*/memo(function CodeBlock({
  showLineNumbers = true,
  firstLineNumber = 1,
  language: providedLanguage = 'text',
  highlight = '',
  highlightedStartText = 'Highlight start',
  highlightedEndText = 'Highlight end',
  testId,
  text,
  codeBidiWarnings = true,
  codeBidiWarningLabel,
  codeBidiWarningTooltipEnabled = true,
  shouldWrapLongLines = false
}) {
  const numLines = (text || '').split('\n').length + (firstLineNumber > 0 ? firstLineNumber : 1) - 1;
  const lineNumberWidth = numLines ? getLineNumWidth(numLines) : 0;
  const {
    getHighlightStyles,
    highlightedLines
  } = useHighlightLines({
    highlight,
    testId
  });
  const getLineProps = useCallback(line => getHighlightStyles(line, highlightedLines), [getHighlightStyles, highlightedLines]);
  const language = useMemo(() => normalizeLanguage(providedLanguage), [providedLanguage]);

  // https://product-fabric.atlassian.net/browse/DST-2472
  const languageToUse = text ? language : 'text';
  return /*#__PURE__*/React.createElement(SyntaxHighlighter, {
    "data-code-lang": language,
    "data-ds--code--code-block": "",
    testId: testId,
    language: languageToUse,
    style: {
      '--ads-code-line-number-width': `calc(${lineNumberWidth} + 16px)`,
      '--ads-highlighted-start-text': highlightedStartText,
      '--ads-highlighted-end-text': highlightedEndText
    },
    showLineNumbers: showLineNumbers,
    firstLineNumber: firstLineNumber,
    lineProps: getLineProps
    // shouldCreateParentElementForLines is needed to pass down props to each line.
    // This is necessary for both line highlighting and testId's, as each of
    // these rely on a data attribute being passed down to lines.
    ,
    shouldCreateParentElementForLines: highlight.length > 0 || !!testId,
    shouldWrapLongLines: shouldWrapLongLines,
    codeBidiWarnings: codeBidiWarnings,
    codeBidiWarningLabel: codeBidiWarningLabel,
    codeBidiWarningTooltipEnabled: codeBidiWarningTooltipEnabled,
    text: text,
    className: ax([getCodeBlockStyles.root, shouldWrapLongLines ? getCodeBlockStyles.shouldWrapLongLines : getCodeBlockStyles.dontWrapLongLines, showLineNumbers ? getCodeBlockStyles.showLineNumbers : getCodeBlockStyles.dontShowLineNumbers])
  });
});
CodeBlock.displayName = 'CodeBlock';
export default CodeBlock;