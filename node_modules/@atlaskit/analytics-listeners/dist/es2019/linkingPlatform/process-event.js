import last from 'lodash/last';
import merge from 'lodash/merge';
import { DEFAULT_SOURCE } from '@atlaskit/analytics-gas-types';
import { LINKING_PLATFORM_CONTEXT } from '@atlaskit/analytics-namespaced-context';
import { getSources, getExtraAttributes, getPackageInfo, getComponents } from '../helpers/extract-data-from-event';
import { FabricChannel } from '../types';
const listenerVersion = "9.0.1";
export default (event => {
  const sources = getSources(event, LINKING_PLATFORM_CONTEXT);
  const packages = getPackageInfo(event, LINKING_PLATFORM_CONTEXT);
  const components = getComponents(event, LINKING_PLATFORM_CONTEXT);
  const extraAttributes = getExtraAttributes(event, LINKING_PLATFORM_CONTEXT);
  const {
    packageName,
    packageVersion
  } = last(packages) || {};
  const packageHierarchy = packages.map(p => p.packageVersion ? `${p.packageName}@${p.packageVersion}` : p.packageName);
  const tags = new Set(event.payload.tags || []);
  tags.add(FabricChannel.linkingPlatform);
  const payload = {
    name: event.payload.name,
    action: event.payload.action,
    actionSubject: event.payload.actionSubject,
    actionSubjectId: event.payload.actionSubjectId,
    eventType: event.payload.eventType,
    attributes: {
      packageName,
      packageVersion,
      listenerVersion,
      sourceHierarchy: sources.join('.') || undefined,
      componentHierarchy: components.join('.') || undefined,
      packageHierarchy: packageHierarchy.join(',') || undefined,
      ...merge(extraAttributes, event.payload.attributes)
    },
    tags: Array.from(tags),
    source: last(sources) || DEFAULT_SOURCE,
    nonPrivacySafeAttributes: event.payload.nonPrivacySafeAttributes
  };
  return payload;
});