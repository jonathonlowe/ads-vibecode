"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processEventPayload = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _analyticsGasTypes = require("@atlaskit/analytics-gas-types");
var _analyticsNamespacedContext = require("@atlaskit/analytics-namespaced-context");
var _merge2 = _interopRequireDefault(require("lodash/merge"));
var _FabricElementsListener = require("./FabricElementsListener");
var _FabricEditorListener = require("./FabricEditorListener");
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var extractFieldsFromContext = function extractFieldsFromContext(fieldsToPick) {
  return function (contexts) {
    return contexts.map(function (ctx) {
      return fieldsToPick.reduce(function (result, key) {
        return ctx[key] ? (0, _merge2.default)(result, (0, _defineProperty2.default)({}, key, ctx[key])) : result;
      }, {});
    }).reduce(function (result, item) {
      return (0, _merge2.default)(result, item);
    }, {});
  };
};
var fieldExtractor = function fieldExtractor(contextKey) {
  return extractFieldsFromContext(['source', 'objectType', 'objectId', 'containerType', 'containerId', contextKey]);
};
var getContextKey = function getContextKey(tag) {
  switch (tag) {
    case _FabricElementsListener.ELEMENTS_TAG:
      return _analyticsNamespacedContext.ELEMENTS_CONTEXT;
    case _FabricEditorListener.EDITOR_TAG:
      return _analyticsNamespacedContext.EDITOR_CONTEXT;
    default:
      return '';
  }
};
var updatePayloadWithContext = function updatePayloadWithContext(primaryTag, event) {
  if (event.context.length === 0) {
    return _objectSpread({
      source: _analyticsGasTypes.DEFAULT_SOURCE
    }, event.payload);
  }
  var contextKey = getContextKey(primaryTag) || 'attributes';
  var _fieldExtractor = fieldExtractor(contextKey)(event.context),
    attributes = _fieldExtractor[contextKey],
    fields = (0, _objectWithoutProperties2.default)(_fieldExtractor, [contextKey].map(_toPropertyKey));
  if (attributes) {
    event.payload.attributes = (0, _merge2.default)(attributes, event.payload.attributes || {});
  }
  return _objectSpread(_objectSpread({
    source: _analyticsGasTypes.DEFAULT_SOURCE
  }, fields), event.payload);
};
var addTags = function addTags(tags) {
  var originalTags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var mergedTags = new Set([].concat((0, _toConsumableArray2.default)(originalTags), (0, _toConsumableArray2.default)(tags)));
  return Array.from(mergedTags);
};

/**
 * The primary tag is used for matching the analytics event payload
 * with its context.
 */
function getPrimaryTag(tags) {
  if (typeof tags === 'string') {
    return tags;
  }
  if (!tags.length) {
    throw new Error('Empty tags string array. Unable to match analytics event payload with context');
  }
  return tags[0];
}
var processEventPayload = exports.processEventPayload = function processEventPayload(event, tags) {
  var primaryTag = getPrimaryTag(tags);
  var tagsArray = typeof tags === 'string' ? [tags] : tags;
  return _objectSpread(_objectSpread({}, updatePayloadWithContext(primaryTag, event)), {}, {
    tags: addTags(tagsArray, event.payload.tags)
  });
};