"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _last = _interopRequireDefault(require("lodash/last"));
var _merge = _interopRequireDefault(require("lodash/merge"));
var _analyticsGasTypes = require("@atlaskit/analytics-gas-types");
var _extractDataFromEvent = require("../helpers/extract-data-from-event");
var _analyticsNamespacedContext = require("@atlaskit/analytics-namespaced-context");
var _types = require("../types");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * Inspired by analytics-web-react
 */
var listenerVersion = "9.0.1";

/**
 * This util exists to convert the analytics-next event format into the analytics platform format.
 *
 * Analytics-next event format:
 * event {
 *      payload: {
 *          ...attributesFromLowestPointInTheTree
 *      },
 *      context: [{
 *          ...attributesFromHighestPointInTheTree
 *      }, {
 *          ...attributesFromSecondHighestPointInTheTree
 *      }]
 * }
 *
 * Analytics platform event format:
 *  event {
 *      type: @atlaskit/analytics-gas-types.EventType
 *      payload {
 *          ...mandatoryAttributesBasedOnEventType
 *          attributes: {
 *              ...arbitraryAttributes
 *          }
 *      }
 *  }
 */
var _default = exports.default = function _default(event, logger) {
  var sources = (0, _extractDataFromEvent.getSources)(event, _analyticsNamespacedContext.NOTIFICATIONS_CONTEXT);
  var source = (0, _last.default)(sources) || _analyticsGasTypes.DEFAULT_SOURCE;
  var extraAttributes = (0, _extractDataFromEvent.getExtraAttributes)(event, _analyticsNamespacedContext.NOTIFICATIONS_CONTEXT);
  var components = (0, _extractDataFromEvent.getComponents)(event, _analyticsNamespacedContext.NOTIFICATIONS_CONTEXT);
  var packages = (0, _extractDataFromEvent.getPackageInfo)(event, _analyticsNamespacedContext.NOTIFICATIONS_CONTEXT);
  var _ref = (0, _last.default)((0, _extractDataFromEvent.getPackageInfo)(event, _analyticsNamespacedContext.NOTIFICATIONS_CONTEXT)) || {},
    packageName = _ref.packageName,
    packageVersion = _ref.packageVersion;
  var packageHierarchy = packages.map(function (p) {
    return p.packageVersion ? "".concat(p.packageName, "@").concat(p.packageVersion) : p.packageName;
  });
  var _event$payload = event.payload,
    _event$payload$eventT = _event$payload.eventType,
    eventType = _event$payload$eventT === void 0 ? _analyticsGasTypes.UI_EVENT_TYPE : _event$payload$eventT,
    action = _event$payload.action,
    actionSubject = _event$payload.actionSubject,
    actionSubjectId = _event$payload.actionSubjectId,
    payloadAttributes = _event$payload.attributes,
    name = _event$payload.name;
  var attributes = _objectSpread(_objectSpread({
    listenerVersion: listenerVersion,
    sourceHierarchy: sources.join('.') || undefined,
    componentHierarchy: components.join('.') || undefined,
    packageHierarchy: packageHierarchy.join(',') || undefined
  }, {
    packageName: packageName,
    packageVersion: packageVersion
  }), (0, _merge.default)(extraAttributes, payloadAttributes));
  // Ensure navigation tag is not duplicated by using Set
  var tags = new Set(event.payload.tags || []);
  tags.add(_types.FabricChannel.notifications);
  if (event.payload) {
    switch (eventType) {
      case _analyticsGasTypes.UI_EVENT_TYPE:
      case _analyticsGasTypes.OPERATIONAL_EVENT_TYPE:
      case _analyticsGasTypes.TRACK_EVENT_TYPE:
        return {
          eventType: eventType,
          source: source,
          actionSubject: actionSubject,
          action: action,
          actionSubjectId: actionSubjectId,
          attributes: attributes,
          tags: Array.from(tags)
        };
      case _analyticsGasTypes.SCREEN_EVENT_TYPE:
        return {
          eventType: eventType,
          name: name,
          attributes: attributes,
          tags: Array.from(tags)
        };
      default:
        logger.error('Invalid event type', eventType);
        break;
    }
  }
  return null;
};