import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { FabricChannel } from '../types';
import { handleEvent } from './handle-event';

/**
 * The TWP Fabric Editor is registered as a Platform Team.
 *
 * When the editor is consumed by products (e.g. Confluence, Jira, etc) it retains
 * their `product` name, and augments 'editor' as a `tag`.
 *
 * This configuration allows us to register events in Data Portal in a product agnostic way,
 * (avoiding duplicated events per product) and receive and filter events per product within Amplitude.
 *
 * @see https://data-portal.us-east-1.prod.public.atl-paas.net/
 * @see https://bitbucket.org/atlassian/events-catalog-service/src/master/src/main/java/com/atlassian/dataservices/eventcatalog/product/ProductService.java
 */
export var EDITOR_TAG = 'editor';

// @deprecated ED-9043 Can be safely removed once all editor products consume a release that uses the new tag.
export var LEGACY_EDITOR_TAG = 'fabricEditor';
var FabricEditorListener = /*#__PURE__*/function (_React$Component) {
  function FabricEditorListener() {
    var _this;
    _classCallCheck(this, FabricEditorListener);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, FabricEditorListener, [].concat(args));
    _defineProperty(_this, "handleEventWrapper", function (event) {
      handleEvent(event, [EDITOR_TAG, LEGACY_EDITOR_TAG], _this.props.logger, _this.props.client);
    });
    return _this;
  }
  _inherits(FabricEditorListener, _React$Component);
  return _createClass(FabricEditorListener, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(AnalyticsListener, {
        onEvent: this.handleEventWrapper,
        channel: FabricChannel.editor
      }, this.props.children);
    }
  }]);
}(React.Component);
export { FabricEditorListener as default };