import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { FabricChannel } from '../types';
import { handleEvent } from './handle-event';
export var ELEMENTS_TAG = 'fabricElements';
var FabricElementsListener = /*#__PURE__*/function (_React$Component) {
  function FabricElementsListener() {
    var _this;
    _classCallCheck(this, FabricElementsListener);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, FabricElementsListener, [].concat(args));
    _defineProperty(_this, "handleEventWrapper", function (event) {
      handleEvent(event, ELEMENTS_TAG, _this.props.logger, _this.props.client);
    });
    return _this;
  }
  _inherits(FabricElementsListener, _React$Component);
  return _createClass(FabricElementsListener, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(AnalyticsListener, {
        onEvent: this.handleEventWrapper,
        channel: FabricChannel.elements
      }, this.props.children);
    }
  }]);
}(React.Component);
export { FabricElementsListener as default };