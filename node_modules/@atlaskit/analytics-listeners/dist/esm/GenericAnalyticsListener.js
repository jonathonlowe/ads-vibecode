import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { sendEvent } from './analytics-web-client-wrapper';
var GenericAnalyticsListener = /*#__PURE__*/function (_React$Component) {
  function GenericAnalyticsListener() {
    var _this;
    _classCallCheck(this, GenericAnalyticsListener);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, GenericAnalyticsListener, [].concat(args));
    _defineProperty(_this, "listenerHandler", function (event) {
      var _this$props = _this.props,
        client = _this$props.client,
        logger = _this$props.logger,
        channel = _this$props.channel,
        processEvent = _this$props.processEvent;
      if (!event.payload) {
        return;
      }
      logger.debug("Received ".concat(channel, " event"), event);
      var payload = processEvent(event, logger);
      logger.debug("Processed ".concat(channel, " event"), payload);
      if (payload) {
        sendEvent(logger, client)(payload);
      }
    });
    return _this;
  }
  _inherits(GenericAnalyticsListener, _React$Component);
  return _createClass(GenericAnalyticsListener, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(AnalyticsListener, {
        onEvent: this.listenerHandler,
        channel: this.props.channel
      }, this.props.children);
    }
  }]);
}(React.Component);
export { GenericAnalyticsListener as default };