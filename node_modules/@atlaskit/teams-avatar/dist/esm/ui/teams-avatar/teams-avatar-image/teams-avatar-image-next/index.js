/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useEffect, useState } from 'react';
import { FallbackAvatar } from './fallback';
var boxShadowCssVar = '--avatar-box-shadow';
var bgColorCssVar = '--avatar-bg-color';

/**
 * We need to maintan the container styles manually until Avatar provides the correct border radius.
 * After that we can return to wrapping in <AvatarContent> rather than span
 */
var containerStyles = {
  root: "_19itglyw _12ji1r31 _1qu2glyw _12y31o36 _1reo15vq _18m915vq _v564ieh6 _1e0c1txw _kqswpfqs _4cvr1fhb _1bah1h6o _2lx21bp4 _80om1kw7 _6rthv77o _1pfhv77o _12l2v77o _ahbqv77o _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t _t9ec1aqe _9v7aze3t _qc5o1p41 _z0ai1osq _18postnw _1hfk1j28 _aetrf705 _1peqidpf _11fnglyw",
  circle: "_2rko1q5u _14mj1q5u",
  positionRelative: "_kqswh2mm",
  disabled: "_80om13gf _1hfkvuon _1peqs237"
};
var unboundStyles = {
  root: "_vchh1ntv _bfhkcxp3 _16qs1nhn",
  interactive: "_80omtlke _4tpu1g4v _ez1ykb7n _gcm1182g _eeh8kb7n _jlxit94y"
};
var avatarImageStyles = {
  image: "_16jlkb7n _1o9zkb7n _i0dl1osq _1e0c1txw _1bsb1osq _4t3i1osq"
};
var SIZES = {
  xsmall: 16,
  small: 24,
  medium: 32,
  large: 40,
  xlarge: 96,
  xxlarge: 128
};
var borderRadiusMap = {
  xsmall: "_2rko1y44",
  small: "_2rkoi2wt",
  medium: "_2rkoftgi",
  large: "_2rko19bv",
  xlarge: "_2rko1tcg",
  xxlarge: "_2rkozwfg"
};
var widthHeightMap = {
  xsmall: "_1bsb7vkz _4t3i7vkz",
  small: "_1bsb1tcg _4t3i1tcg",
  medium: "_1bsbzwfg _4t3izwfg",
  large: "_1bsb1ylp _4t3i1ylp",
  xlarge: "_1bsb16xz _4t3i16xz",
  xxlarge: "_1bsb1qr7 _4t3i1qr7"
};

/**
 * __Avatar image__
 *
 * An avatar image is an internal component used to control the rendering phases of an image.
 */
export var TeamAvatarImage = function TeamAvatarImage(_ref) {
  var _ref$alt = _ref.alt,
    alt = _ref$alt === void 0 ? '' : _ref$alt,
    src = _ref.src,
    size = _ref.size,
    testId = _ref.testId;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hasImageErrored = _useState2[0],
    setHasImageErrored = _useState2[1];

  // If src changes, reset state
  useEffect(function () {
    setHasImageErrored(false);
  }, [src]);
  if (!src || hasImageErrored) {
    return /*#__PURE__*/React.createElement(FallbackAvatar, {
      "aria-label": alt,
      width: SIZES[size],
      height: SIZES[size],
      "data-testid": testId
    });
  }
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId,
    "aria-label": alt,
    className: ax([unboundStyles.root, containerStyles.root, borderRadiusMap[size], widthHeightMap[size]])
  }, /*#__PURE__*/React.createElement("img", {
    src: src,
    alt: alt,
    "data-testId": testId && "".concat(testId, "--image"),
    onError: function onError() {
      return setHasImageErrored(true);
    },
    className: ax([avatarImageStyles.image])
  }));
};