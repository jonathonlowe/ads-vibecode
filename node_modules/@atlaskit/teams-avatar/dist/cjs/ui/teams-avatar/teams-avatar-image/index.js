"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TeamAvatarImageLegacy = exports.TeamAvatarImage = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _avatar = require("@atlaskit/avatar");
var _peopleGroup = _interopRequireDefault(require("@atlaskit/icon/core/people-group"));
var _people = _interopRequireDefault(require("@atlaskit/icon/glyph/people"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _fallback = require("./fallback");
var _teamsAvatarImageNext = require("./teams-avatar-image-next");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 * @jsx jsx
 */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var ICON_BACKGROUND = "var(--ds-icon-inverse, ".concat(_colors.N0, ")");
var ICON_COLOR = "var(--ds-icon-subtle, ".concat(_colors.N90, ")");
// used in a size calculation so can't be a token. Without this the avatar looks very squished
var ICON_PADDING = 4;
var avatarDefaultIconStyles = (0, _react2.css)({
  display: 'flex',
  backgroundColor: ICON_COLOR,
  borderRadius: '50%',
  width: '100%',
  height: '100%',
  justifyContent: 'center',
  alignItems: 'center'
});
var SIZES = {
  xsmall: 16,
  small: 24,
  medium: 32,
  large: 40,
  xlarge: 96,
  xxlarge: 128
};
var nestedAvatarStyles = Object.entries(_avatar.AVATAR_SIZES).reduce(function (styles, _ref) {
  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    key = _ref2[0],
    size = _ref2[1];
  return _objectSpread(_objectSpread({}, styles), {}, (0, _defineProperty2.default)({}, key, (0, _react2.css)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: "".concat(size, "px"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    height: "".concat(size, "px"),
    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
    '& svg': {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      width: "".concat(size - ICON_PADDING, "px"),
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      height: "".concat(size - ICON_PADDING, "px")
    }
  })));
}, {});
var avatarImageStyles = (0, _react2.css)({
  display: 'flex',
  flex: '1 1 100%',
  width: '100%',
  height: '100%'
});

/**
 * __Avatar image__
 *
 * An avatar image is an internal component used to control the rendering phases of an image.
 */
var TeamAvatarImageLegacy = exports.TeamAvatarImageLegacy = function TeamAvatarImageLegacy(_ref3) {
  var _ref3$alt = _ref3.alt,
    alt = _ref3$alt === void 0 ? '' : _ref3$alt,
    src = _ref3.src,
    size = _ref3.size,
    testId = _ref3.testId;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasImageErrored = _useState2[0],
    setHasImageErrored = _useState2[1];

  // If src changes, reset state
  (0, _react.useEffect)(function () {
    setHasImageErrored(false);
  }, [src]);
  if (!src || hasImageErrored) {
    if ((0, _platformFeatureFlags.fg)('enable-team-avatar-switch')) {
      return (0, _react2.jsx)(_fallback.FallbackAvatar, {
        "aria-label": alt,
        width: SIZES[size],
        height: SIZES[size],
        "data-testid": testId
      });
    }
    return (0, _react2.jsx)("span", {
      css: [avatarDefaultIconStyles, nestedAvatarStyles[size]]
    }, (0, _react2.jsx)(_peopleGroup.default, {
      label: alt,
      color: ICON_BACKGROUND,
      LEGACY_secondaryColor: ICON_COLOR,
      testId: testId && "".concat(testId, "--team"),
      spacing: "spacious",
      LEGACY_fallbackIcon: _people.default
    }));
  }
  return (0, _react2.jsx)(_avatar.AvatarContent, null, (0, _react2.jsx)("img", {
    src: src,
    alt: alt,
    "data-testid": testId && "".concat(testId, "--image"),
    css: avatarImageStyles,
    onError: function onError() {
      return setHasImageErrored(true);
    }
  }));
};
var TeamAvatarImage = exports.TeamAvatarImage = function TeamAvatarImage(props) {
  if ((0, _platformFeatureFlags.fg)('team-avatar-radii')) {
    return (0, _react2.jsx)(_teamsAvatarImageNext.TeamAvatarImage, props);
  }
  return (0, _react2.jsx)(TeamAvatarImageLegacy, props);
};