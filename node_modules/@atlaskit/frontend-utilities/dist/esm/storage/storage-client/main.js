import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { mockWindowStorage } from '../local-storage';
var DEFAULT_STORAGE_ENGINE = 'localStorage';
var StorageClient = /*#__PURE__*/function () {
  function StorageClient(clientKey, options) {
    var _this = this;
    _classCallCheck(this, StorageClient);
    _defineProperty(this, "getItem", function (key) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          useExpiredItem: false
        },
        useExpiredItem = _ref.useExpiredItem;
      var item = _this.client.getItem(_this.itemKey(key));
      if (item) {
        try {
          var parsedItem = JSON.parse(item);

          // item is expired
          if (parsedItem.expires && new Date(parsedItem.expires) < new Date()) {
            /**
             * Commented out removing this item, as it is a slightly different state
             * to the item not existing that we may want to preserve.
             *  this.client.removeItem(this.itemKey(key));
             */

            if (!useExpiredItem) {
              return undefined;
            }
          }
          return parsedItem.value;
        } catch (e) {
          _this.captureException(e);
        }
      }
      return undefined;
    });
    _defineProperty(this, "removeItem", function (key) {
      try {
        _this.client.removeItem(_this.itemKey(key));
      } catch (e) {
        _this.captureException(e);
      }
    });
    _defineProperty(this, "setItemWithExpiry", function (key, value, expireInMS) {
      var itemWithExpiry = {
        value: value,
        expires: typeof expireInMS === 'number' ? Date.now() + expireInMS : undefined
      };
      try {
        _this.client.setItem(_this.itemKey(key), JSON.stringify(itemWithExpiry));
      } catch (e) {
        _this.captureException(e);
      }
    });
    this.clientKey = clientKey;
    this.handlers = options === null || options === void 0 ? void 0 : options.handlers;
    var storageEngine = (options === null || options === void 0 ? void 0 : options.storageEngine) || DEFAULT_STORAGE_ENGINE;
    if (!Object.prototype.hasOwnProperty.call(window, storageEngine)) {
      mockWindowStorage([storageEngine]);
    }
    this.client = window[storageEngine];
  }
  return _createClass(StorageClient, [{
    key: "captureException",
    value: function captureException(e, tags) {
      var _this$handlers;
      if ((_this$handlers = this.handlers) !== null && _this$handlers !== void 0 && _this$handlers.captureException) {
        var _this$handlers2;
        (_this$handlers2 = this.handlers) === null || _this$handlers2 === void 0 || _this$handlers2.captureException(e, tags);
      }
    }
  }, {
    key: "itemKey",
    value: function itemKey(key) {
      return "".concat(this.clientKey, "_").concat(key);
    }
  }]);
}();
export { StorageClient as default };