import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var FailedFetchError = /*#__PURE__*/function (_Error) {
  function FailedFetchError(_ref) {
    var _this;
    var error = _ref.error,
      path = _ref.path,
      method = _ref.method;
    _classCallCheck(this, FailedFetchError);
    _this = _callSuper(this, FailedFetchError);
    _this.name = 'FailedFetchError';
    _this.message = error.message || 'Unknown fetch error';
    _this.stack = error.stack;
    _this.originalName = error.name;
    _this.method = method;
    var p = path.split('?')[0];
    _this.path = /^[/-a-z]+$/i.test(p) ? p : '';
    return _this;
  }
  _inherits(FailedFetchError, _Error);
  return _createClass(FailedFetchError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export { FailedFetchError as default };