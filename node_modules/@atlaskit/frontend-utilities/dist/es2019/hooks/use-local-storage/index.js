import { useEffect, useMemo, useState } from 'react';
import { StorageClient } from '../../storage/storage-client';
export const useLocalStorage = (key, defaultValue) => {
  const storageClient = useMemo(() => new StorageClient(key), [key]);
  const [value, setValue] = useState(() => {
    var _storageClient$getIte;
    return (_storageClient$getIte = storageClient.getItem(key)) !== null && _storageClient$getIte !== void 0 ? _storageClient$getIte : defaultValue;
  });
  useEffect(() => {
    var _ref;
    const loadedValue = (_ref = storageClient.getItem(key)) !== null && _ref !== void 0 ? _ref : undefined;
    if (loadedValue !== undefined) {
      setValue(loadedValue);
    }
  }, [key, storageClient]);
  useEffect(() => {
    storageClient.setItemWithExpiry(key, value);
  }, [key, storageClient, value]);
  return [value, setValue];
};
export function useLocalStorageRecord(key, initialValue = [], maxLength = 100) {
  const [records, setRecords] = useLocalStorage(key, initialValue);
  const putRecord = record => {
    if (!records) {
      setRecords([record]);
      return;
    }
    //just to keep storage limited somehow
    if (maxLength > 0 && records.length > maxLength - 1) {
      records.shift();
    }
    if (records.find(elem => JSON.stringify(elem) === JSON.stringify(record)) === undefined) {
      setRecords([...records, record]);
    }
  };
  const removeRecord = query => {
    if (!records) {
      return;
    }
    const filtered = records.filter(elem => JSON.stringify(elem).indexOf(`"${query}"`) === -1);
    setRecords(filtered);
  };
  const actions = {
    putRecord,
    removeRecord
  };
  return {
    records,
    actions
  };
}