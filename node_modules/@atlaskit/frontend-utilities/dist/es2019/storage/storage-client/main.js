import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { mockWindowStorage } from '../local-storage';
const DEFAULT_STORAGE_ENGINE = 'localStorage';
export default class StorageClient {
  constructor(clientKey, options) {
    _defineProperty(this, "getItem", (key, {
      useExpiredItem
    } = {
      useExpiredItem: false
    }) => {
      const item = this.client.getItem(this.itemKey(key));
      if (item) {
        try {
          const parsedItem = JSON.parse(item);

          // item is expired
          if (parsedItem.expires && new Date(parsedItem.expires) < new Date()) {
            /**
             * Commented out removing this item, as it is a slightly different state
             * to the item not existing that we may want to preserve.
             *  this.client.removeItem(this.itemKey(key));
             */

            if (!useExpiredItem) {
              return undefined;
            }
          }
          return parsedItem.value;
        } catch (e) {
          this.captureException(e);
        }
      }
      return undefined;
    });
    _defineProperty(this, "removeItem", key => {
      try {
        this.client.removeItem(this.itemKey(key));
      } catch (e) {
        this.captureException(e);
      }
    });
    _defineProperty(this, "setItemWithExpiry", (key, value, expireInMS) => {
      const itemWithExpiry = {
        value,
        expires: typeof expireInMS === 'number' ? Date.now() + expireInMS : undefined
      };
      try {
        this.client.setItem(this.itemKey(key), JSON.stringify(itemWithExpiry));
      } catch (e) {
        this.captureException(e);
      }
    });
    this.clientKey = clientKey;
    this.handlers = options === null || options === void 0 ? void 0 : options.handlers;
    const storageEngine = (options === null || options === void 0 ? void 0 : options.storageEngine) || DEFAULT_STORAGE_ENGINE;
    if (!Object.prototype.hasOwnProperty.call(window, storageEngine)) {
      mockWindowStorage([storageEngine]);
    }
    this.client = window[storageEngine];
  }
  captureException(e, tags) {
    var _this$handlers;
    if ((_this$handlers = this.handlers) !== null && _this$handlers !== void 0 && _this$handlers.captureException) {
      var _this$handlers2;
      (_this$handlers2 = this.handlers) === null || _this$handlers2 === void 0 ? void 0 : _this$handlers2.captureException(e, tags);
    }
  }
  itemKey(key) {
    return `${this.clientKey}_${key}`;
  }
}