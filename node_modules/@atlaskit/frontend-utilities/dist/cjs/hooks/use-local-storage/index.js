"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocalStorage = void 0;
exports.useLocalStorageRecord = useLocalStorageRecord;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _storageClient = require("../../storage/storage-client");
var useLocalStorage = exports.useLocalStorage = function useLocalStorage(key, defaultValue) {
  var storageClient = (0, _react.useMemo)(function () {
    return new _storageClient.StorageClient(key);
  }, [key]);
  var _useState = (0, _react.useState)(function () {
      var _storageClient$getIte;
      return (_storageClient$getIte = storageClient.getItem(key)) !== null && _storageClient$getIte !== void 0 ? _storageClient$getIte : defaultValue;
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  (0, _react.useEffect)(function () {
    var _ref;
    var loadedValue = (_ref = storageClient.getItem(key)) !== null && _ref !== void 0 ? _ref : undefined;
    if (loadedValue !== undefined) {
      setValue(loadedValue);
    }
  }, [key, storageClient]);
  (0, _react.useEffect)(function () {
    storageClient.setItemWithExpiry(key, value);
  }, [key, storageClient, value]);
  return [value, setValue];
};
function useLocalStorageRecord(key) {
  var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var maxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var _useLocalStorage = useLocalStorage(key, initialValue),
    _useLocalStorage2 = (0, _slicedToArray2.default)(_useLocalStorage, 2),
    records = _useLocalStorage2[0],
    setRecords = _useLocalStorage2[1];
  var putRecord = function putRecord(record) {
    if (!records) {
      setRecords([record]);
      return;
    }
    //just to keep storage limited somehow
    if (maxLength > 0 && records.length > maxLength - 1) {
      records.shift();
    }
    if (records.find(function (elem) {
      return JSON.stringify(elem) === JSON.stringify(record);
    }) === undefined) {
      setRecords([].concat((0, _toConsumableArray2.default)(records), [record]));
    }
  };
  var removeRecord = function removeRecord(query) {
    if (!records) {
      return;
    }
    var filtered = records.filter(function (elem) {
      return JSON.stringify(elem).indexOf("\"".concat(query, "\"")) === -1;
    });
    setRecords(filtered);
  };
  var actions = {
    putRecord: putRecord,
    removeRecord: removeRecord
  };
  return {
    records: records,
    actions: actions
  };
}