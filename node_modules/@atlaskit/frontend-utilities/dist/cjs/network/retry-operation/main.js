"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FailedFetchError", {
  enumerable: true,
  get: function get() {
    return _FailedFetchError.default;
  }
});
exports.wait = exports.retryOnException = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _convertToError = require("../../error-handling/convert-to-error");
var _constants = require("./constants");
var _FailedFetchError = _interopRequireDefault(require("./errors/FailedFetchError"));
var wait = exports.wait = function wait(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
};
var NO_CALLS_ERROR = 'No calls made';
var retryOnException = exports.retryOnException = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(invokeOperation, _ref) {
    var _ref$intervalsMS, intervalsMS, _ref$retryOn, retryOn, captureException, onRetry, intervals, nextMSInterval, error;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _ref$intervalsMS = _ref.intervalsMS, intervalsMS = _ref$intervalsMS === void 0 ? _constants.NO_RETRIES : _ref$intervalsMS, _ref$retryOn = _ref.retryOn, retryOn = _ref$retryOn === void 0 ? [_FailedFetchError.default] : _ref$retryOn, captureException = _ref.captureException, onRetry = _ref.onRetry;
          intervals = (0, _toConsumableArray2.default)(intervalsMS);
          nextMSInterval = 0;
          error = new Error(NO_CALLS_ERROR);
        case 4:
          if (!(nextMSInterval !== undefined)) {
            _context.next = 22;
            break;
          }
          _context.prev = 5;
          if (!(nextMSInterval > 0)) {
            _context.next = 9;
            break;
          }
          _context.next = 9;
          return wait(nextMSInterval);
        case 9:
          if (onRetry && error.message !== NO_CALLS_ERROR) {
            onRetry(error);
          }
          _context.next = 12;
          return invokeOperation();
        case 12:
          return _context.abrupt("return", _context.sent);
        case 15:
          _context.prev = 15;
          _context.t0 = _context["catch"](5);
          error = (0, _convertToError.convertToError)(_context.t0);
          if (captureException) {
            captureException(error);
          }

          // Retry ONLY when the error is an instance of one of the provided `retryOn` errors, or passes the `retryOn` test.
          // You need to ensure you are throwing one of the `retryOn` errors if that is the method you are using.
          if (typeof retryOn === 'function' ? retryOn(error) : retryOn.some(function (err) {
            return error instanceof err;
          })) {
            nextMSInterval = intervals.shift();
          } else {
            nextMSInterval = undefined;
          }
        case 20:
          _context.next = 4;
          break;
        case 22:
          throw error;
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[5, 15]]);
  }));
  return function retryOnException(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();