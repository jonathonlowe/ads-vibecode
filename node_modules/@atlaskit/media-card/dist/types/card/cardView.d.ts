import React, { type MouseEvent } from 'react';
import { type MessageDescriptor } from 'react-intl-next';
import { type MediaItemType, type FileDetails, type ImageResizeMode, type Identifier } from '@atlaskit/media-client';
import { type WithAnalyticsEventsProps, type UIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type CardStatus, type MediaCardCursor, type CardDimensions, type TitleBoxIcon } from '../types';
import { type MediaFilePreview } from '@atlaskit/media-file-preview';
import { type CardAction } from './actions';
import { type MediaCardError } from '../errors';
export interface CardViewProps {
    readonly identifier: Identifier;
    readonly disableOverlay?: boolean;
    readonly resizeMode?: ImageResizeMode;
    readonly dimensions: CardDimensions;
    readonly actions?: Array<CardAction>;
    readonly selectable?: boolean;
    readonly selected?: boolean;
    readonly alt?: string;
    readonly testId?: string;
    readonly titleBoxBgColor?: string;
    readonly titleBoxIcon?: TitleBoxIcon;
    readonly status: CardStatus;
    readonly mediaItemType: MediaItemType;
    readonly mediaCardCursor?: MediaCardCursor;
    readonly metadata?: FileDetails;
    readonly error?: MediaCardError;
    readonly onClick?: (event: React.MouseEvent<HTMLDivElement | HTMLButtonElement>, analyticsEvent?: UIAnalyticsEvent) => void;
    readonly openMediaViewerButtonRef?: React.Ref<HTMLButtonElement>;
    readonly shouldOpenMediaViewer?: boolean;
    readonly onMouseEnter?: (event: MouseEvent<HTMLDivElement>) => void;
    readonly onDisplayImage?: () => void;
    readonly cardPreview?: MediaFilePreview;
    readonly progress?: number;
    readonly innerRef?: React.Ref<HTMLDivElement>;
    readonly onImageLoad?: (cardPreview: MediaFilePreview) => void;
    readonly onImageError?: (cardPreview: MediaFilePreview) => void;
    readonly onSvgError?: (error: MediaCardError) => void;
    readonly onSvgLoad?: () => void;
    readonly nativeLazyLoad?: boolean;
    readonly forceSyncDisplay?: boolean;
    disableAnimation?: boolean;
    shouldHideTooltip?: boolean;
    overriddenCreationDate?: number;
}
export type CardViewBaseProps = CardViewProps & WithAnalyticsEventsProps;
export interface RenderConfigByStatus {
    renderTypeIcon?: boolean;
    iconMessage?: JSX.Element;
    renderImageRenderer?: boolean;
    renderSvgView?: boolean;
    renderPlayButton?: boolean;
    renderTitleBox?: boolean;
    renderBlanket?: boolean;
    isFixedBlanket?: boolean;
    renderProgressBar?: boolean;
    renderSpinner?: boolean;
    renderFailedTitleBox?: boolean;
    renderTickBox?: boolean;
    customTitleMessage?: MessageDescriptor;
}
export declare const CardViewBase: ({ identifier, innerRef, onImageLoad, onImageError, dimensions, onClick, onMouseEnter, testId, metadata, status, selected, selectable, cardPreview, mediaCardCursor, shouldHideTooltip, progress, alt, resizeMode, onDisplayImage, nativeLazyLoad, forceSyncDisplay, actions, disableOverlay, titleBoxBgColor, titleBoxIcon, error, disableAnimation, openMediaViewerButtonRef, shouldOpenMediaViewer, overriddenCreationDate, onSvgError, onSvgLoad, }: CardViewBaseProps) => React.JSX.Element;
export declare const CardView: React.ForwardRefExoticComponent<Omit<CardViewProps, keyof WithAnalyticsEventsProps> & React.RefAttributes<any>>;
