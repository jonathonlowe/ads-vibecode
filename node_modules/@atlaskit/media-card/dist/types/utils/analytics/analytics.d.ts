import { type ErrorInfo } from 'react';
import { type FileDetails, type FileStatus, type MediaClientErrorReason, type RequestMetadata } from '@atlaskit/media-client';
import { type FileAttributes, type PerformanceAttributes, type OperationalEventPayload, type UIEventPayload, type WithFileAttributes, type WithPerformanceAttributes, type SuccessAttributes, type FailureAttributes, type MediaTraceContext, type WithTraceContext } from '@atlaskit/media-common/analytics';
import { type CreateUIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type MediaCardError, type MediaCardErrorPrimaryReason } from '../../errors';
import { type CardPreviewSource, type CardDimensions, type CardStatus } from '../../types';
import { type SSR } from '@atlaskit/media-common';
export type CardPreviewAttributes = {
    fileId: string;
    prevDimensions: CardDimensions | undefined;
    currentDimensions: CardDimensions | undefined;
    dimensionsPercentageDiff?: CardDimensions | undefined;
    source: CardPreviewSource;
};
type WithCardPreviewCacheAttributes = {
    cardPreviewAttributes: CardPreviewAttributes;
};
type WithCardPerfAttributes = {
    ssr?: SSR;
    fileId: string;
    mediaClientId?: string;
    transferSize: number;
    decodedBodySize: number;
    totalDuration: number;
    tcpHandshakeTime: number;
    dnsLookupTime: number;
    redirectTimeTaken: number;
    tlsConnectNegotiationTime: number;
    timeTakenToFetchWithoutRedirect: number;
    browserCacheHit: boolean;
    nextHopProtocol: string;
    interimRequestTime: number;
    requestInvocationTime?: number;
    contentDownloadTime: number;
    userAgent: string;
    cdnCacheHit: boolean;
    cdnDownstreamFBL?: number;
    cdnUpstreamFBL?: number;
};
export type FileUriFailReason = 'local-uri' | 'remote-uri' | `unknown-uri`;
export type FailedErrorFailReason = MediaCardErrorPrimaryReason | 'nativeError';
export type MediaCardErrorInfo = {
    failReason: FailedErrorFailReason;
    error: MediaClientErrorReason | 'nativeError';
    errorDetail: string;
    metadataTraceContext?: MediaTraceContext;
};
export type SSRStatusFail = MediaCardErrorInfo & {
    status: 'fail';
};
type SSRStatusSuccess = SuccessAttributes;
type SSRStatusUnknown = {
    status: 'unknown';
};
type SSRStatusAttributes = SSRStatusSuccess | SSRStatusFail | SSRStatusUnknown;
export type SSRStatus = {
    server: SSRStatusAttributes;
    client: SSRStatusAttributes;
};
export type WithSSRReliability = {
    ssrReliability?: SSRStatus;
};
export type RenderFailedEventPayload = OperationalEventPayload<WithFileAttributes & WithPerformanceAttributes & WithSSRReliability & WithTraceContext & FailureAttributes & {
    failReason: FailedErrorFailReason | 'failed-processing';
    error?: MediaClientErrorReason | 'nativeError';
    request?: RequestMetadata;
}, 'failed', 'mediaCardRender'>;
export type DownloadFailedEventPayload = OperationalEventPayload<WithFileAttributes & WithTraceContext & FailureAttributes & {
    failReason: FailedErrorFailReason;
    error?: MediaClientErrorReason | 'nativeError';
    request?: RequestMetadata;
}, 'failed', 'mediaCardDownload'>;
export type ErrorEventPayload = OperationalEventPayload<WithFileAttributes & WithPerformanceAttributes & WithSSRReliability & WithTraceContext & FailureAttributes & {
    cardStatus: CardStatus;
    failReason: FailedErrorFailReason | 'failed-processing';
    error?: MediaClientErrorReason | 'nativeError';
    request?: RequestMetadata;
}, 'nonCriticalFail', 'mediaCardRender'>;
export type ErrorBoundaryErrorInfo = {
    componentStack: string;
};
export type AnalyticsErrorBoundaryAttributes = {
    error?: Error | string;
    info?: ErrorInfo;
    browserInfo: string;
    failReason: string;
};
export type AnalyticsErrorBoundaryCardPayload = OperationalEventPayload<AnalyticsErrorBoundaryAttributes, 'failed', 'mediaCardRender'>;
export type AnalyticsErrorBoundaryInlinePayload = OperationalEventPayload<AnalyticsErrorBoundaryAttributes, 'failed', 'mediaInlineRender'>;
export type RenderInlineCardSucceededEventPayload = OperationalEventPayload<WithFileAttributes & WithPerformanceAttributes & SuccessAttributes, 'succeeded', 'mediaInlineRender'>;
export type RenderInlineCardFailedEventPayload = OperationalEventPayload<WithFileAttributes & WithPerformanceAttributes & FailureAttributes & {
    failReason: FailedErrorFailReason | 'failed-processing';
    error?: MediaClientErrorReason | 'nativeError';
    request?: RequestMetadata;
}, 'failed', 'mediaInlineRender'>;
export type DownloadSucceededEventPayload = OperationalEventPayload<WithFileAttributes & SuccessAttributes & WithTraceContext, 'succeeded', 'mediaCardDownload'>;
export type RenderSucceededEventPayload = OperationalEventPayload<WithFileAttributes & WithPerformanceAttributes & WithSSRReliability & SuccessAttributes & WithTraceContext, 'succeeded', 'mediaCardRender'>;
export type CacheHitEventPayload = OperationalEventPayload<WithCardPreviewCacheAttributes, 'cache-hit', 'mediaCardCache'>;
export type RemoteSuccessEventPayload = OperationalEventPayload<WithCardPreviewCacheAttributes, 'Remote-success', 'mediaCardCache'>;
export type MediaCardPerfObserverPayload = OperationalEventPayload<WithCardPerfAttributes, 'succeeded', 'mediaCardPerfObserver'>;
export type CopiedFileEventPayload = UIEventPayload<{}, 'copied', string>;
export type ClickedEventPayload = UIEventPayload<{
    label?: string;
}, 'clicked', string>;
export type MediaCardAnalyticsEventPayload = RenderSucceededEventPayload | RenderFailedEventPayload | CopiedFileEventPayload | ClickedEventPayload | CacheHitEventPayload | RemoteSuccessEventPayload | ErrorEventPayload | AnalyticsErrorBoundaryCardPayload | AnalyticsErrorBoundaryInlinePayload | RenderInlineCardFailedEventPayload | RenderInlineCardSucceededEventPayload | DownloadSucceededEventPayload | DownloadFailedEventPayload;
export declare const getFileAttributes: (metadata: FileDetails, fileStatus?: FileStatus) => FileAttributes;
export declare const getRenderSucceededEventPayload: (fileAttributes: FileAttributes, performanceAttributes: PerformanceAttributes, ssrReliability: SSRStatus, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => RenderSucceededEventPayload;
export declare const getDownloadSucceededEventPayload: (fileAttributes: FileAttributes, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => DownloadSucceededEventPayload;
export declare const getCacheHitEventPayload: (cardPreviewAttributes: CardPreviewAttributes) => CacheHitEventPayload;
export declare const getRemoteSuccessEventPayload: (cardPreviewAttributes: CardPreviewAttributes) => RemoteSuccessEventPayload;
export declare const getRenderFailedExternalUriPayload: (fileAttributes: FileAttributes, performanceAttributes: PerformanceAttributes) => RenderFailedEventPayload;
export declare const getRenderErrorFailReason: (error: MediaCardError) => FailedErrorFailReason;
export declare const getRenderErrorErrorReason: (error: MediaCardError) => MediaClientErrorReason | 'nativeError';
export declare const getRenderErrorErrorDetail: (error: MediaCardError) => string;
export declare const getErrorTraceContext: (error: MediaCardError) => MediaTraceContext | undefined;
export declare const getRenderErrorRequestMetadata: (error: MediaCardError) => RequestMetadata | undefined;
export declare const extractErrorInfo: (error: MediaCardError, metadataTraceContext?: MediaTraceContext) => MediaCardErrorInfo;
export declare const getRenderErrorEventPayload: (fileAttributes: FileAttributes, performanceAttributes: PerformanceAttributes, error: MediaCardError, ssrReliability: SSRStatus, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => RenderFailedEventPayload;
export declare const getDownloadFailedEventPayload: (fileAttributes: FileAttributes, error: MediaCardError, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => DownloadFailedEventPayload;
export declare const getErrorEventPayload: (cardStatus: CardStatus, fileAttributes: FileAttributes, error: MediaCardError, ssrReliability: SSRStatus, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => ErrorEventPayload;
export declare const getRenderFailedFileStatusPayload: (fileAttributes: FileAttributes, performanceAttributes: PerformanceAttributes, ssrReliability: SSRStatus, traceContext: MediaTraceContext, metadataTraceContext?: MediaTraceContext) => RenderFailedEventPayload;
export declare function fireMediaCardEvent(payload: MediaCardAnalyticsEventPayload, createAnalyticsEvent?: CreateUIAnalyticsEvent): void;
export declare const createAndFireMediaCardEvent: (payload: MediaCardAnalyticsEventPayload) => (createAnalyticsEvent: CreateUIAnalyticsEvent) => import("@atlaskit/analytics-next").UIAnalyticsEvent;
export {};
