/**
 * Entry Point: @atlaskit/media-card/types
 * tsconfig.entry-points.json
 */
import { type MouseEvent } from 'react';
import { type FileDetails, type MediaClient, type Identifier, type ImageResizeMode, type FileState } from '@atlaskit/media-client';
import { type UIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type MediaFeatureFlags, type NumericalCardDimensions, type SSR } from '@atlaskit/media-common';
import { type CardAction } from './card/actions';
import { type MediaCardError } from './errors';
import { type ViewerOptionsProps } from '@atlaskit/media-viewer';
export type CardStatus = 'uploading' | 'loading' | 'processing' | 'loading-preview' | 'complete' | 'error' | 'failed-processing';
export type FilePreviewStatus = {
    hasFilesize: boolean;
    isPreviewable: boolean;
    hasPreview: boolean;
    isSupportedByBrowser: boolean;
};
export type FileStateFlags = {
    wasStatusProcessing: boolean;
    wasStatusUploading: boolean;
};
export type CardAppearance = 'auto' | 'image' | 'square' | 'horizontal';
export declare type CardDimensionValue = number | string;
export type CardPreviewSource = 'local' | 'remote' | 'ssr-server' | 'ssr-client' | 'ssr-data' | 'cache-local' | 'cache-remote' | 'cache-ssr-client' | 'cache-ssr-server' | 'external';
export interface CardPreview {
    dataURI: string;
    orientation?: number;
    dimensions?: CardDimensions;
    source: CardPreviewSource;
}
export declare const isSSRPreview: (preview: CardPreview) => boolean;
export declare const isSSRServerPreview: (preview: CardPreview) => boolean;
export declare const isSSRClientPreview: (preview: CardPreview) => boolean;
export declare const isSSRDataPreview: (preview: CardPreview) => boolean;
export declare enum MediaCardCursor {
    Action = "pointer",
    NotReady = "wait"
}
export interface CardDimensions {
    width?: CardDimensionValue;
    height?: CardDimensionValue;
}
export type TitleBoxIcon = 'LockFilledIcon';
export interface CardEvent {
    event: MouseEvent<HTMLElement>;
    mediaItemDetails?: FileDetails;
}
export interface InlineCardEvent {
    event: MouseEvent<HTMLElement> | React.KeyboardEvent;
    mediaItemDetails?: FileDetails;
}
export interface SharedCardProps {
    readonly disableOverlay?: boolean;
    readonly resizeMode?: ImageResizeMode;
    readonly featureFlags?: MediaFeatureFlags;
    readonly appearance?: CardAppearance;
    readonly dimensions?: CardDimensions;
    readonly originalDimensions?: NumericalCardDimensions;
    readonly actions?: Array<CardAction>;
    readonly selectable?: boolean;
    readonly selected?: boolean;
    readonly alt?: string;
    readonly testId?: string;
    readonly titleBoxBgColor?: string;
    readonly titleBoxIcon?: TitleBoxIcon;
    readonly viewerOptions?: ViewerOptionsProps;
    /** Sets options for viewer **/
    readonly includeHashForDuplicateFiles?: boolean;
}
export interface CardOnClickCallback {
    (result: CardEvent, analyticsEvent?: UIAnalyticsEvent): void;
}
export interface InlineCardOnClickCallback {
    (result: InlineCardEvent, analyticsEvent?: UIAnalyticsEvent): void;
}
export interface CardEventProps {
    readonly onClick?: CardOnClickCallback;
    readonly onMouseEnter?: (result: CardEvent) => void;
    /** Callback function to be called when video enters and exit fullscreen.
     * `fullscreen = true` indicates video enters fullscreen
     * `fullscreen = false` indicates video exits fullscreen
     */
    readonly onFullscreenChange?: (fullscreen: boolean) => void;
    readonly videoControlsWrapperRef?: React.Ref<HTMLDivElement>;
}
export interface CardProps extends SharedCardProps, CardEventProps {
    readonly mediaClient: MediaClient;
    readonly identifier: Identifier;
    readonly isLazy?: boolean;
    readonly useInlinePlayer?: boolean;
    readonly shouldOpenMediaViewer?: boolean;
    readonly mediaViewerItems?: Identifier[];
    readonly contextId?: string;
    readonly shouldEnableDownloadButton?: boolean;
    readonly ssr?: SSR;
    readonly shouldHideTooltip?: boolean;
}
export interface CardState {
    status: CardStatus;
    isCardVisible: boolean;
    shouldAutoplay?: boolean;
    isPlayingFile: boolean;
    mediaViewerSelectedItem?: Identifier;
    fileState?: FileState;
    progress?: number;
    cardPreview?: CardPreview;
    error?: MediaCardError;
    cardRef: HTMLDivElement | null;
    isBannedLocalPreview: boolean;
    previewDidRender: boolean;
    wasResolvedUpfrontPreview: boolean;
    shouldUpdateStateForIdentifier?: boolean;
}
