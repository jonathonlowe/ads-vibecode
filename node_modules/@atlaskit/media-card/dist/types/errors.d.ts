import { type CardPreview } from './types';
/**
 * Primary reason is logged through Data Portal.
 * Make sure all the values are whitelisted in Measure -> Event Regitry -> "mediaCardRender failed" event
 */
export type MediaCardErrorPrimaryReason = 'upload' | 'metadata-fetch' | 'error-file-state' | 'failed-processing' | RemotePreviewPrimaryReason | LocalPreviewPrimaryReason | ImageLoadPrimaryReason | SsrPreviewPrimaryReason | SvgPrimaryReason | 'missing-error-data' | 'preview-fetch' | 'download';
export type ImageLoadPrimaryReason = 'cache-remote-uri' | 'cache-local-uri' | 'local-uri' | 'remote-uri' | 'external-uri' | 'unknown-uri';
export type RemotePreviewPrimaryReason = 'remote-preview-fetch' | 'remote-preview-not-ready' | 'remote-preview-fetch-ssr';
export type LocalPreviewPrimaryReason = 'local-preview-get' | 'local-preview-unsupported' | 'local-preview-rejected' | 'local-preview-image' | 'local-preview-video';
export type SsrPreviewPrimaryReason = 'ssr-client-uri' | 'ssr-client-load' | 'ssr-server-uri' | 'ssr-server-load';
export type SvgPrimaryReason = 'svg-img-error' | 'svg-binary-fetch' | 'svg-blob-to-datauri' | 'svg-unknown-error';
export declare class MediaCardError extends Error {
    readonly primaryReason: MediaCardErrorPrimaryReason;
    readonly secondaryError?: Error | undefined;
    constructor(primaryReason: MediaCardErrorPrimaryReason, secondaryError?: Error | undefined);
}
export declare class LocalPreviewError extends MediaCardError {
    readonly primaryReason: LocalPreviewPrimaryReason;
    readonly secondaryError?: Error | undefined;
    constructor(primaryReason: LocalPreviewPrimaryReason, secondaryError?: Error | undefined);
}
export declare class RemotePreviewError extends MediaCardError {
    readonly primaryReason: RemotePreviewPrimaryReason;
    readonly secondaryError?: Error | undefined;
    constructor(primaryReason: RemotePreviewPrimaryReason, secondaryError?: Error | undefined);
}
export declare class SsrPreviewError extends MediaCardError {
    readonly primaryReason: SsrPreviewPrimaryReason;
    readonly secondaryError?: Error | undefined;
    constructor(primaryReason: SsrPreviewPrimaryReason, secondaryError?: Error | undefined);
}
export declare const getImageLoadPrimaryReason: (source?: CardPreview['source']) => ImageLoadPrimaryReason;
export declare class ImageLoadError extends MediaCardError {
    constructor(source?: CardPreview['source']);
}
export declare function isMediaCardError(err: Error): err is MediaCardError;
export declare const isLocalPreviewError: (err: Error) => err is LocalPreviewError;
export declare const isRemotePreviewError: (err: Error) => err is LocalPreviewError;
export declare const isUnsupportedLocalPreviewError: (err: Error) => boolean;
export declare function isImageLoadError(err: Error): err is ImageLoadError;
export declare const ensureMediaCardError: (primaryReason: MediaCardErrorPrimaryReason, error: Error, updatePrimaryReason?: boolean) => MediaCardError;
export declare const isUploadError: (error?: MediaCardError) => boolean | undefined;
