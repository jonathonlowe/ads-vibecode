import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { N60A } from '@atlaskit/theme/colors';
import { akEditorSelectedBoxShadow } from '@atlaskit/editor-shared-styles/consts';
import { fg } from '@atlaskit/platform-feature-flags';
import { getCSSUnitValue } from '../../utils/getCSSUnitValue';
import { getDefaultCardDimensions } from '../../utils/cardDimensions';
import { tickBoxClassName, tickboxFixedStyles } from './tickBox/styles';
import { fixedPlayButtonStyles, playButtonClassName } from './playButton/styles';
import { Breakpoint, responsiveSettings } from './common';
var breakpointSizes = [[Breakpoint.SMALL, 599], [Breakpoint.LARGE, Infinity]];
export var calcBreakpointSize = function calcBreakpointSize() {
  var wrapperWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var _ref = breakpointSizes.find(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        _breakpoint = _ref4[0],
        limit = _ref4[1];
      return wrapperWidth <= limit;
    }) || [Breakpoint.SMALL],
    _ref2 = _slicedToArray(_ref, 1),
    breakpoint = _ref2[0];
  return breakpoint;
};
export var generateResponsiveStyles = function generateResponsiveStyles() {
  var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Breakpoint.SMALL;
  var setting = responsiveSettings[breakpoint];
  return "\n    font-size: ".concat(setting.fontSize, "px;\n    line-height: ").concat(setting.lineHeight, "px;\n  ");
};
export var getWrapperDimensions = function getWrapperDimensions(dimensions, appearance) {
  var _ref5 = dimensions || {},
    width = _ref5.width,
    height = _ref5.height;
  var _getDefaultCardDimens = getDefaultCardDimensions(appearance),
    defaultWidth = _getDefaultCardDimens.width,
    defaultHeight = _getDefaultCardDimens.height;
  return "\n     ".concat(fg('platform_fix_media_image_resizing') ? "@container view-page-content (min-width: 1px) { width: 100cqw; }" : '', "\n\t/* If container doesn't exists, it will fallback to this */\n\twidth: ").concat(getCSSUnitValue(width || defaultWidth), ";\n\n    max-width: 100%;\n    height: ").concat(getCSSUnitValue(height || defaultHeight), ";\n    max-height: 100%;\n  ");
};

// This is a trick to simulate the blue border without affecting the dimensions.
// CSS outline has no 'radius', therefore we can't achieve the same effect with it
export var getWrapperShadow = function getWrapperShadow(disableOverlay, selected) {
  var withOverlayShadow = !disableOverlay ? "".concat("var(--ds-shadow-raised, ".concat("0 1px 1px ".concat(N60A, ", 0 0 1px 0 ").concat(N60A), ")")) : '';
  var selectedShadow = selected ? akEditorSelectedBoxShadow : '';
  var shadow = [selectedShadow, withOverlayShadow].filter(Boolean).join(', ');
  return shadow ? "box-shadow: ".concat(shadow, ";") : '';
};
export var getCursorStyle = function getCursorStyle(cursor) {
  return !!cursor ? "cursor: ".concat(cursor, ";") : '';
};
export var getClickablePlayButtonStyles = function getClickablePlayButtonStyles(isPlayButtonClickable) {
  if (!isPlayButtonClickable) {
    return '';
  }
  return "\n    &:hover .".concat(playButtonClassName, " {\n      ").concat(fixedPlayButtonStyles, "\n    }\n  ");
};
export var getSelectableTickBoxStyles = function getSelectableTickBoxStyles(isTickBoxSelectable) {
  if (!isTickBoxSelectable) {
    return '';
  }
  return "\n    &:hover .".concat(tickBoxClassName, " {\n      ").concat(tickboxFixedStyles, "\n    }\n  ");
};
var defaultTransitionDuration = '.3s';
export var transition = function transition() {
  var propertyName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';
  return "\n  transition: ".concat(propertyName, " ").concat(defaultTransitionDuration, ";\n");
};
var hexToRgb = function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? "".concat(parseInt(result[1], 16), ",").concat(parseInt(result[2], 16), ",").concat(parseInt(result[3], 16)) : null;
};
export var rgba = function rgba(hex, opacity) {
  return "rgba(".concat(hexToRgb(hex), ", ").concat(opacity, ")");
};