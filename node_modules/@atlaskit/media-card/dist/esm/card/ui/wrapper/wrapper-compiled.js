/* wrapper-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./wrapper-compiled.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { newFileExperienceClassName } from '../../cardConstants';
import { VcMediaWrapperProps } from '@atlaskit/react-ufo/vc-media';
import { N0, N100, N20, N60A, N90A, B100 } from '@atlaskit/theme/colors';
import { getDefaultCardDimensions } from '../../../utils/cardDimensions';
import { getCSSUnitValue } from '../../../utils/getCSSUnitValue';
var wrapperStyles = null;
var backgroundStyle = null;
var cursorStyleMap = {
  pointer: "_80omtlke",
  wait: "_80omv00u"
};
var shadowStyleMap = {
  withOverlay: "_16qs64c8",
  selected: "_16qs666x",
  selectedWithOverlay: "_16qshzij"
};
var getShadowKey = function getShadowKey(disableOverlay, selected) {
  if (!disableOverlay && selected) {
    return 'selectedWithOverlay';
  }
  if (!disableOverlay) {
    return 'withOverlay';
  }
  if (selected) {
    return 'selected';
  }
  return '';
};
var hideNativeBrowserTextSelectionStyles = null;
var clickableButtonPlayButtonStyles = null;
var selectableTickboxStyle = null;
var tooltipStyle = null;
var getResponsiveStyles = function getResponsiveStyles(breakpoint) {
  // dynamically setting the properties to avoid ratcheting build errors. These need to be removed however for the compiled transformation.
  return breakpoint === 'small' ? _defineProperty(_defineProperty({}, 'fontSize', '11x'), 'lineHeight', '14px') : _defineProperty(_defineProperty({}, 'fontSize', '14px'), 'lineHeight', '22px');
};
export var Wrapper = function Wrapper(props) {
  var testId = props.testId,
    dimensions = props.dimensions,
    appearance = props.appearance,
    onClick = props.onClick,
    onMouseEnter = props.onMouseEnter,
    innerRef = props.innerRef,
    breakpoint = props.breakpoint,
    mediaCardCursor = props.mediaCardCursor,
    disableOverlay = props.disableOverlay,
    selected = props.selected,
    displayBackground = props.displayBackground,
    isPlayButtonClickable = props.isPlayButtonClickable,
    isTickBoxSelectable = props.isTickBoxSelectable,
    shouldDisplayTooltip = props.shouldDisplayTooltip;
  var defaultImageCardDimensions = getDefaultCardDimensions(appearance);
  var width = getCSSUnitValue((dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || defaultImageCardDimensions.width);
  var height = getCSSUnitValue((dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) || defaultImageCardDimensions.height);
  var wrapperShadowKey = getShadowKey(disableOverlay, selected);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: "newFileExperienceWrapper"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: ax(["_2rko1l7b _vchhusvi _kqswh2mm _ect41gqc _p12f1osq _c71l1osq _1hlmuwsq _1rquusvi _eg54326j _mts3kb7n _1ntskb7n", displayBackground && "_bfhklslw", mediaCardCursor && cursorStyleMap[mediaCardCursor], wrapperShadowKey && shadowStyleMap[wrapperShadowKey], selected && "_1p1y1j28 _1rk81j28 _14r11j28 _1np21j28", isPlayButtonClickable && "_1y898vuz _19zy8vuz", isTickBoxSelectable && "_1yf91flm _1xp5rcbj", shouldDisplayTooltip && "_9m3z1osq _10pb1osq", newFileExperienceClassName]),
    "data-testid": testId,
    ref: innerRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter
  }, VcMediaWrapperProps, {
    style: _objectSpread(_objectSpread({
      width: width,
      height: height
    }, getResponsiveStyles(breakpoint)), {}, {
      "--_1ox8nit": ix("var(--ds-blanket, ".concat(N90A, ")")),
      "--_jz8ahf": ix("solid 2px ".concat("var(--ds-border-focused, ".concat(B100, ")"))),
      "--_1jkcdu5": ix("var(--ds-background-neutral, ".concat(N20, ")")),
      "--_mt8cm6": ix("var(--ds-background-input, ".concat(N0, ")")),
      "--_13xf2t5": ix("var(--ds-icon-subtle, ".concat(N100, ")"))
    })
  }), props.children);
};
Wrapper.displayName = 'NewFileExperienceWrapper';