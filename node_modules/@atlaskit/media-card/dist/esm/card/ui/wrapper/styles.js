import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { borderRadius } from '@atlaskit/media-ui';
import { N20, B100 } from '@atlaskit/theme/colors';
import { hideNativeBrowserTextSelectionStyles } from '@atlaskit/editor-shared-styles/selection';
import { transition } from '../styles';
import { fixedBlanketStyles, blanketClassName } from '../blanket/styles';
import { fixedActionBarStyles, actionsBarClassName } from '../actionsBar/styles';
import { generateResponsiveStyles, getClickablePlayButtonStyles, getCursorStyle, getSelectableTickBoxStyles, getWrapperDimensions, getWrapperShadow } from '../styles';
export var wrapperStyles = function wrapperStyles(_ref) {
  var breakpoint = _ref.breakpoint,
    dimensions = _ref.dimensions,
    appearance = _ref.appearance,
    disableOverlay = _ref.disableOverlay,
    displayBackground = _ref.displayBackground,
    selected = _ref.selected,
    isPlayButtonClickable = _ref.isPlayButtonClickable,
    isTickBoxSelectable = _ref.isTickBoxSelectable,
    shouldDisplayTooltip = _ref.shouldDisplayTooltip,
    mediaCardCursor = _ref.mediaCardCursor;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\t", "\n\tbox-sizing: border-box;\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n\tposition: relative;\n\tfont-family: ", ";\n\t", "\n\t", "\n  ", "\n  ", "\n  ", "\n  ", ";\n\t", "\n\n\t/* We use classnames from here exceptionally to be able to handle styles when the Card is on hover */\n  ", "\n  ", "\n  &:hover .", " {\n\t\t", "\n\t}\n\t&:hover .", ", &:focus-within .", " {\n\t\t", "\n\t}\n\n\t/* Tooltip does not support percentage dimensions. We enforce them here */\n\t", "\n\n\tbutton:focus + & {\n\t\toutline: solid 2px ", ";\n\t}\n"])), transition(), "var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)", getWrapperDimensions(dimensions, appearance), displayBackground && "background: ".concat("var(--ds-background-neutral, ".concat(N20, ")"), ";"), borderRadius, getCursorStyle(mediaCardCursor), getWrapperShadow(disableOverlay, selected), generateResponsiveStyles(breakpoint), selected ? hideNativeBrowserTextSelectionStyles : '', getClickablePlayButtonStyles(isPlayButtonClickable), getSelectableTickBoxStyles(isTickBoxSelectable), blanketClassName, fixedBlanketStyles, actionsBarClassName, actionsBarClassName, fixedActionBarStyles, shouldDisplayTooltip && "> div { width: 100%; height: 100%; }", "var(--ds-border-focused, ".concat(B100, ")"));
};
wrapperStyles.displayName = 'NewFileExperienceWrapper';