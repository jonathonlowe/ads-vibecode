import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["triggerRef", "isSelected", "testId", "onClick"];
import React from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import MoreIcon from '@atlaskit/icon/core/migration/show-more-horizontal--more';
import DropdownMenu, { DropdownItemGroup, DropdownItem } from '@atlaskit/dropdown-menu';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { createAndFireMediaCardEvent, fireMediaCardEvent } from '../../../../utils/analytics';
import { CardActionButton } from './cardActionButton';
// Trick applied due to the lack of props type of DropdownItem
var DropdownItemWithProps = function DropdownItemWithProps(props) {
  return /*#__PURE__*/React.createElement(DropdownItem, _extends({
    testId: "media-card-actions-menu-item"
  }, props));
};
var createDropdownItemWithAnalytics = function createDropdownItemWithAnalytics(action, index) {
  var label = action.label,
    handler = action.handler,
    isDisabled = action.isDisabled;
  var DropdownItemWithAnalytics = withAnalyticsEvents({
    onClick: createAndFireMediaCardEvent({
      eventType: 'ui',
      action: 'clicked',
      actionSubject: 'button',
      actionSubjectId: 'mediaCardDropDownMenuItem',
      attributes: {
        label: label
      }
    })
  })(DropdownItemWithProps);
  return /*#__PURE__*/React.createElement(DropdownItemWithAnalytics, {
    key: index,
    onClick: function onClick() {
      return handler();
    },
    isDisabled: isDisabled
  }, label);
};
export var CardActionsDropdownMenu = function CardActionsDropdownMenu(_ref) {
  var actions = _ref.actions,
    triggerColor = _ref.triggerColor,
    onOpenChange = _ref.onOpenChange,
    triggerVariant = _ref.triggerVariant;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  if (actions.length > 0) {
    return /*#__PURE__*/React.createElement(DropdownMenu, {
      testId: "media-card-actions-menu",
      onOpenChange: onOpenChange,
      trigger: function trigger(_ref2) {
        var triggerRef = _ref2.triggerRef,
          isSelected = _ref2.isSelected,
          testId = _ref2.testId,
          _onClick = _ref2.onClick,
          providedProps = _objectWithoutProperties(_ref2, _excluded);
        return /*#__PURE__*/React.createElement(CardActionButton, _extends({
          variant: triggerVariant
          // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
          ,
          style: {
            color: triggerColor
          },
          ref: triggerRef,
          onClick: function onClick(e) {
            fireMediaCardEvent({
              eventType: 'ui',
              action: 'clicked',
              actionSubject: 'button',
              actionSubjectId: 'mediaCardDropDownMenu',
              attributes: {}
            }, createAnalyticsEvent);
            _onClick === null || _onClick === void 0 || _onClick(e);
          }
        }, providedProps), /*#__PURE__*/React.createElement(MoreIcon, {
          color: "currentColor",
          spacing: "spacious",
          label: "more"
        }));
      }
    }, /*#__PURE__*/React.createElement(DropdownItemGroup, null, actions.map(createDropdownItemWithAnalytics)));
  } else {
    return null;
  }
};