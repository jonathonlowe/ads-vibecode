import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React, { Component, Fragment } from 'react';
import { CardActionIconButton } from './cardActionIconButton';
import { CardActionsDropdownMenu } from './cardActionsDropdownMenu';
export var CardActionsView = /*#__PURE__*/function (_Component) {
  function CardActionsView() {
    _classCallCheck(this, CardActionsView);
    return _callSuper(this, CardActionsView, arguments);
  }
  _inherits(CardActionsView, _Component);
  return _createClass(CardActionsView, [{
    key: "render",
    value: function render() {
      var actions = this.props.actions;
      if (!actions.length) {
        return null;
      }
      var primaryAction = actions.find(actionWithIcon);
      var otherActions = actions.filter(actionNotEqualTo(primaryAction));
      return /*#__PURE__*/React.createElement(Fragment, null, primaryAction ? this.renderActionIconButton(primaryAction, true) : null, this.renderOtherActionButtons(otherActions));
    }
  }, {
    key: "renderActionIconButton",
    value: function renderActionIconButton(action, isPrimary) {
      var _this$props = this.props,
        triggerColor = _this$props.triggerColor,
        filename = _this$props.filename,
        variant = _this$props.variant;
      var icon = action.icon,
        handler = action.handler,
        label = action.label,
        isDisabled = action.isDisabled,
        tooltip = action.tooltip;
      return /*#__PURE__*/React.createElement(CardActionIconButton, {
        icon: icon,
        label: label,
        filename: filename,
        isPrimary: isPrimary,
        triggerColor: triggerColor,
        onClick: function onClick() {
          return handler();
        },
        variant: variant,
        isDisabled: isDisabled,
        tooltip: tooltip
      });
    }
  }, {
    key: "renderOtherActionButtons",
    value: function renderOtherActionButtons(actions) {
      if (actions.length === 0) {
        return null;
      } else {
        var _this$props2 = this.props,
          triggerColor = _this$props2.triggerColor,
          onToggle = _this$props2.onToggle,
          variant = _this$props2.variant;
        var firstActionWithIcon = actions.find(actionWithIcon);
        var otherActions = actions.filter(actionNotEqualTo(firstActionWithIcon));
        if (firstActionWithIcon && otherActions.length === 0) {
          return this.renderActionIconButton(firstActionWithIcon, false);
        } else {
          return /*#__PURE__*/React.createElement(CardActionsDropdownMenu, {
            actions: actions,
            triggerColor: triggerColor,
            onOpenChange: onToggle,
            triggerVariant: variant
          });
        }
      }
    }
  }]);
}(Component);
function actionWithIcon(action) {
  return !!action.icon;
}
function actionNotEqualTo(otherAction) {
  return function (action) {
    return action !== otherAction;
  };
}