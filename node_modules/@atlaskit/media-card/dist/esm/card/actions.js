import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import DownloadIcon from '@atlaskit/icon/core/migration/download';
import { messages } from '@atlaskit/media-ui';
export function attachDetailsToActions(actions, details) {
  return actions.map(function (action) {
    return _objectSpread(_objectSpread({}, action), {}, {
      handler: function handler() {
        action.handler({
          type: 'file',
          details: details
        });
      }
    });
  });
}
export var createDownloadAction = function createDownloadAction(baseAction, formatMessage) {
  var isDisabled = baseAction.isDisabled;
  var label = isDisabled ? 'Download Disabled' : 'Download';
  var tooltip = isDisabled ? formatMessage(messages.download_disabled_security_policy) : undefined;
  return _objectSpread(_objectSpread({}, baseAction), {}, {
    label: label,
    tooltip: tooltip,
    icon: /*#__PURE__*/React.createElement(DownloadIcon, {
      color: isDisabled ? "var(--ds-icon-disabled, #091E424F)" : 'currentColor',
      spacing: "spacious",
      label: "Download"
    })
  });
};