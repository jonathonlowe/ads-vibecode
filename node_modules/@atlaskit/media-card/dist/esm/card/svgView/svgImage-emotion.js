import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx, css } from '@emotion/react';
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { MediaCardError } from '../../errors';
import { calculateSvgDimensions } from './helpers';
import { useResolveSvg, MediaSVGError } from '@atlaskit/media-svg';
var getErrorReason = function getErrorReason(svgReason) {
  switch (svgReason) {
    case 'img-error':
      return 'svg-img-error';
    case 'binary-fetch':
      return 'svg-binary-fetch';
    case 'blob-to-datauri':
      return 'svg-blob-to-datauri';
    default:
      return 'svg-unknown-error';
  }
};
var svgRendererStyles = css({
  objectFit: 'contain',
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  backgroundColor: 'white' // This background color is for transparency
});
var svgRendererMaxDimensionStyles = css({
  maxWidth: '100%',
  maxHeight: '100%'
});
export var SvgView = function SvgView(_ref) {
  var identifier = _ref.identifier,
    resizeMode = _ref.resizeMode,
    onLoad = _ref.onLoad,
    onError = _ref.onError,
    wrapperRef = _ref.wrapperRef,
    alt = _ref.alt;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    didSvgRender = _useState2[0],
    setDidSvgRender = _useState2[1];
  var _useState3 = useState({}),
    _useState4 = _slicedToArray(_useState3, 2),
    svgDimensions = _useState4[0],
    setSvgDimensions = _useState4[1];
  var imgRef = useRef(null);
  var calculateDimensions = useCallback(function (targetImgElem) {
    if (!wrapperRef.current || !targetImgElem) {
      return;
    }
    setSvgDimensions(calculateSvgDimensions(targetImgElem, wrapperRef.current, resizeMode));
  }, [resizeMode, wrapperRef]);
  var onSvgLoad = function onSvgLoad(evt) {
    calculateDimensions(evt.currentTarget);
    setDidSvgRender(true);
    onLoad === null || onLoad === void 0 || onLoad();
  };
  var onSvgError = function onSvgError(err) {
    var error = new MediaCardError(getErrorReason(err.primaryReason), err.secondaryError);
    onError === null || onError === void 0 || onError(error);
  };
  useEffect(function () {
    if (imgRef.current) {
      calculateDimensions(imgRef.current);
    }
  }, [imgRef, calculateDimensions]);
  var _useResolveSvg = useResolveSvg(identifier, onSvgError),
    svgUrl = _useResolveSvg.svgUrl,
    source = _useResolveSvg.source;
  var width = svgDimensions.width,
    height = svgDimensions.height;
  return svgUrl && source ? jsx("img", {
    "data-testid": 'media-card-svg',
    "data-fileid": identifier.id,
    "data-filecollection": identifier.collectionName,
    "data-source": source,
    src: svgUrl,
    alt: alt,
    css: [svgRendererStyles, !width && !height && svgRendererMaxDimensionStyles],
    style: _objectSpread({
      visibility: didSvgRender ? 'visible' : 'hidden'
    }, svgDimensions),
    onLoad: onSvgLoad,
    onError: function onError() {
      onSvgError(new MediaSVGError('img-error'));
    },
    ref: imgRef
  }) : null;
};