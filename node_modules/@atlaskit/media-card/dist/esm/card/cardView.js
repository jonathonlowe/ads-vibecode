import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useEffect, useState, useRef, useMemo } from 'react';
import { isFileIdentifier } from '@atlaskit/media-client';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { MimeTypeIcon } from '@atlaskit/media-ui/mime-type-icon';
import SpinnerIcon from '@atlaskit/spinner';
import Tooltip from '@atlaskit/tooltip';
import { useMergeRefs } from 'use-callback-ref';
import { messages } from '@atlaskit/media-ui';
import { createAndFireMediaCardEvent } from '../utils/analytics';
import { ImageRenderer } from './ui/imageRenderer';
import { TitleBox } from './ui/titleBox/titleBox';
import { FailedTitleBox } from './ui/titleBox/failedTitleBox';
import { ProgressBar } from './ui/progressBar/progressBar';
import { PlayButton } from './ui/playButton/playButton';
import { TickBox } from './ui/tickBox/tickBox';
import { Blanket } from './ui/blanket/blanket';
import { ActionsBar } from './ui/actionsBar/actionsBar';
import { IconWrapper } from './ui/iconWrapper/iconWrapper';
import { PreviewUnavailable, CreatingPreview, FailedToUpload, FailedToLoad } from './ui/iconMessage';
import { isUploadError } from '../errors';
import { Wrapper, ImageContainer } from './ui/wrapper';
import { fileCardImageViewSelector } from './classnames';
import { useBreakpoint } from './useBreakpoint';
import OpenMediaViewerButton from './ui/openMediaViewerButton/openMediaViewerButton';
import { useCurrentValueRef } from '../utils/useCurrentValueRef';
import { SvgView } from './svgView';
import { fg } from '@atlaskit/platform-feature-flags';
export var CardViewBase = function CardViewBase(_ref) {
  var identifier = _ref.identifier,
    _ref$innerRef = _ref.innerRef,
    innerRef = _ref$innerRef === void 0 ? null : _ref$innerRef,
    onImageLoad = _ref.onImageLoad,
    onImageError = _ref.onImageError,
    dimensions = _ref.dimensions,
    onClick = _ref.onClick,
    onMouseEnter = _ref.onMouseEnter,
    testId = _ref.testId,
    metadata = _ref.metadata,
    status = _ref.status,
    selected = _ref.selected,
    selectable = _ref.selectable,
    cardPreview = _ref.cardPreview,
    mediaCardCursor = _ref.mediaCardCursor,
    shouldHideTooltip = _ref.shouldHideTooltip,
    progress = _ref.progress,
    alt = _ref.alt,
    resizeMode = _ref.resizeMode,
    onDisplayImage = _ref.onDisplayImage,
    nativeLazyLoad = _ref.nativeLazyLoad,
    forceSyncDisplay = _ref.forceSyncDisplay,
    actions = _ref.actions,
    disableOverlay = _ref.disableOverlay,
    titleBoxBgColor = _ref.titleBoxBgColor,
    titleBoxIcon = _ref.titleBoxIcon,
    error = _ref.error,
    disableAnimation = _ref.disableAnimation,
    _ref$openMediaViewerB = _ref.openMediaViewerButtonRef,
    openMediaViewerButtonRef = _ref$openMediaViewerB === void 0 ? null : _ref$openMediaViewerB,
    shouldOpenMediaViewer = _ref.shouldOpenMediaViewer,
    overriddenCreationDate = _ref.overriddenCreationDate,
    onSvgError = _ref.onSvgError,
    onSvgLoad = _ref.onSvgLoad;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    didSvgRender = _useState2[0],
    setDidSvgRender = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    didImageRender = _useState4[0],
    setDidImageRender = _useState4[1];
  var divRef = useRef(null);
  var prevCardPreviewRef = useRef();
  var breakpoint = useBreakpoint(dimensions === null || dimensions === void 0 ? void 0 : dimensions.width, divRef);
  useEffect(function () {
    // We should only switch didImageRender to false when cardPreview goes undefined, not when it is changed. as this method could be triggered after onImageLoad callback, falling on a race condition
    if (prevCardPreviewRef.current && !cardPreview) {
      setDidImageRender(false);
    }
    prevCardPreviewRef.current = cardPreview;
  }, [cardPreview]);
  var handleOnImageLoad = function handleOnImageLoad(prevCardPreview) {
    if (prevCardPreview.dataURI !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
      return;
    }
    /*
        We render the icon & icon message always, even if there is cardPreview available.
        If the image fails to load/render, the icon will remain, i.e. the user won't see a change until the root card decides to chage status to error.
        If the image renders successfully, we switch this variable to hide the icon & icon message behind the thumbnail in case the image has transparency.
        It is less likely that root component replaces a suceeded cardPreview for a failed one than the opposite case. Therefore we prefer to hide the icon instead show when the image fails, for a smoother transition
      */
    setDidImageRender(true);
    onImageLoad === null || onImageLoad === void 0 || onImageLoad(cardPreview);
  };
  var handleOnImageError = function handleOnImageError(prevCardPreview) {
    if (prevCardPreview.dataURI !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
      return;
    }
    setDidImageRender(false);
    onImageError === null || onImageError === void 0 || onImageError(cardPreview);
  };
  var shouldRenderPlayButton = function shouldRenderPlayButton() {
    var _ref2 = metadata || {},
      mediaType = _ref2.mediaType;
    if (mediaType !== 'video' || !cardPreview) {
      return false;
    }
    return true;
  };
  var mergedRef = useMergeRefs([divRef, innerRef]);
  var getRenderConfigByStatus = function getRenderConfigByStatus() {
    var _ref3 = metadata || {},
      name = _ref3.name,
      mediaType = _ref3.mediaType,
      mimeType = _ref3.mimeType;
    var isZeroSize = metadata && metadata.size === 0;
    var defaultConfig = {
      renderTypeIcon: !didImageRender && !didSvgRender,
      renderImageRenderer: !didSvgRender,
      renderSvgView: mimeType === 'image/svg+xml',
      renderPlayButton: !!cardPreview && mediaType === 'video',
      renderBlanket: !disableOverlay,
      renderTitleBox: !disableOverlay,
      renderTickBox: !disableOverlay && !!selectable
    };
    var loadingConfig = _objectSpread(_objectSpread({}, defaultConfig), {}, {
      renderPlayButton: false,
      renderTypeIcon: false,
      renderSpinner: !didImageRender && !didSvgRender
    });
    switch (status) {
      case 'uploading':
        return _objectSpread(_objectSpread({}, defaultConfig), {}, {
          renderBlanket: !disableOverlay || mediaType !== 'video',
          isFixedBlanket: true,
          renderProgressBar: true
        });
      case 'processing':
        return _objectSpread(_objectSpread({}, defaultConfig), {}, {
          iconMessage: !didImageRender && !isZeroSize ? /*#__PURE__*/React.createElement(CreatingPreview, {
            disableAnimation: disableAnimation
          }) : undefined
        });
      case 'complete':
        return defaultConfig;
      case 'error':
      case 'failed-processing':
        if (status === 'failed-processing' && mimeType === 'image/svg+xml') {
          return loadingConfig;
        }
        var baseErrorConfig = _objectSpread(_objectSpread({}, defaultConfig), {}, {
          renderTypeIcon: true,
          renderImageRenderer: false,
          renderSvgView: false,
          renderTitleBox: false,
          renderPlayButton: false
        });
        var _iconMessage;
        var _customTitleMessage;
        if (isUploadError(error)) {
          _iconMessage = /*#__PURE__*/React.createElement(FailedToUpload, null);
          _customTitleMessage = messages.failed_to_upload;
        } else if (!metadata) {
          _iconMessage = /*#__PURE__*/React.createElement(FailedToLoad, null);
        } else {
          _iconMessage = /*#__PURE__*/React.createElement(PreviewUnavailable, null);
        }
        if (!disableOverlay) {
          var _renderFailedTitleBox = !name || !!_customTitleMessage;
          return _objectSpread(_objectSpread({}, baseErrorConfig), {}, {
            renderTitleBox: !!name && !_customTitleMessage,
            renderFailedTitleBox: _renderFailedTitleBox,
            iconMessage: !_renderFailedTitleBox ? _iconMessage : undefined,
            customTitleMessage: _customTitleMessage
          });
        }
        return _objectSpread(_objectSpread({}, baseErrorConfig), {}, {
          iconMessage: _iconMessage
        });
      case 'loading-preview':
      case 'loading':
      default:
        return loadingConfig;
    }
  };
  var _getRenderConfigBySta = getRenderConfigByStatus(),
    renderTypeIcon = _getRenderConfigBySta.renderTypeIcon,
    iconMessage = _getRenderConfigBySta.iconMessage,
    renderImageRenderer = _getRenderConfigBySta.renderImageRenderer,
    renderSvgView = _getRenderConfigBySta.renderSvgView,
    renderSpinner = _getRenderConfigBySta.renderSpinner,
    renderPlayButton = _getRenderConfigBySta.renderPlayButton,
    renderBlanket = _getRenderConfigBySta.renderBlanket,
    renderProgressBar = _getRenderConfigBySta.renderProgressBar,
    renderTitleBox = _getRenderConfigBySta.renderTitleBox,
    renderFailedTitleBox = _getRenderConfigBySta.renderFailedTitleBox,
    renderTickBox = _getRenderConfigBySta.renderTickBox,
    isFixedBlanket = _getRenderConfigBySta.isFixedBlanket,
    customTitleMessage = _getRenderConfigBySta.customTitleMessage;
  var shouldDisplayBackground = !cardPreview || !disableOverlay || status === 'error' || status === 'failed-processing';
  var isPlayButtonClickable = shouldRenderPlayButton() && !!disableOverlay;
  var isTickBoxSelectable = !disableOverlay && !!selectable && !selected;
  // Disable tooltip for Media Single
  var shouldDisplayTooltip = !disableOverlay && !shouldHideTooltip;
  var _ref4 = metadata || {},
    mediaType = _ref4.mediaType,
    mimeType = _ref4.mimeType,
    name = _ref4.name,
    createdAt = _ref4.createdAt;
  var isTitleBoxVisible = renderTitleBox && name;
  var hasVisibleTitleBox = !!(isTitleBoxVisible || renderFailedTitleBox);
  var metadataRef = useCurrentValueRef(metadata);
  var actionsWithDetails = useMemo(function () {
    if (!actions) {
      return [];
    }
    return actions.map(function (action) {
      return _objectSpread(_objectSpread({}, action), {}, {
        handler: function handler() {
          if (!metadataRef.current) {
            action.handler();
          } else {
            action.handler({
              type: 'file',
              details: metadataRef.current
            });
          }
        }
      });
    });
  }, [actions, metadataRef]);
  var onSvgLoadBase = function onSvgLoadBase() {
    setDidSvgRender(true);
    onSvgLoad === null || onSvgLoad === void 0 || onSvgLoad();
  };
  var contents = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ImageContainer, {
    centerElements: didSvgRender && !fg('platform_media_card_image_render') // The whole centerElements styles can go after removing the flag
    ,
    testId: fileCardImageViewSelector,
    mediaName: name,
    status: status,
    progress: progress,
    selected: selected,
    source: cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.source
  }, renderTypeIcon && /*#__PURE__*/React.createElement(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, /*#__PURE__*/React.createElement(MimeTypeIcon, {
    testId: "media-card-file-type-icon",
    mediaType: mediaType,
    mimeType: mimeType,
    name: name
  }), iconMessage), renderSpinner && /*#__PURE__*/React.createElement(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, /*#__PURE__*/React.createElement(SpinnerIcon, {
    testId: "media-card-loading",
    interactionName: "media-card-loading"
  })), renderSvgView && identifier && isFileIdentifier(identifier) && /*#__PURE__*/React.createElement(SvgView, {
    identifier: identifier,
    resizeMode: resizeMode || 'crop',
    onError: onSvgError,
    onLoad: onSvgLoadBase,
    wrapperRef: divRef
  }), renderImageRenderer && identifier && /*#__PURE__*/React.createElement(ImageRenderer, {
    cardPreview: cardPreview,
    mediaType: (metadata === null || metadata === void 0 ? void 0 : metadata.mediaType) || 'unknown',
    alt: alt !== null && alt !== void 0 ? alt : name,
    resizeMode: resizeMode,
    onDisplayImage: onDisplayImage,
    onImageLoad: handleOnImageLoad,
    onImageError: handleOnImageError,
    nativeLazyLoad: nativeLazyLoad,
    forceSyncDisplay: forceSyncDisplay,
    identifier: identifier,
    wrapperRef: divRef
  }), renderPlayButton && /*#__PURE__*/React.createElement(IconWrapper, {
    breakpoint: breakpoint,
    hasTitleBox: hasVisibleTitleBox
  }, /*#__PURE__*/React.createElement(PlayButton, null)), renderBlanket && /*#__PURE__*/React.createElement(Blanket, {
    isFixed: isFixedBlanket
  }), renderTitleBox && /*#__PURE__*/React.createElement(TitleBox, {
    name: name,
    createdAt: overriddenCreationDate !== null && overriddenCreationDate !== void 0 ? overriddenCreationDate : createdAt,
    breakpoint: breakpoint,
    titleBoxIcon: titleBoxIcon,
    titleBoxBgColor: titleBoxBgColor,
    hidden: !isTitleBoxVisible
  }), renderFailedTitleBox && /*#__PURE__*/React.createElement(FailedTitleBox, {
    breakpoint: breakpoint,
    customMessage: customTitleMessage
  }), renderProgressBar && /*#__PURE__*/React.createElement(ProgressBar, {
    progress: progress,
    breakpoint: breakpoint,
    positionBottom: !hasVisibleTitleBox
  }), renderTickBox && /*#__PURE__*/React.createElement(TickBox, {
    selected: selected
  })), disableOverlay || !actions || actions.length === 0 ? null : /*#__PURE__*/React.createElement(ActionsBar, {
    filename: name,
    actions: actionsWithDetails
  }));
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldOpenMediaViewer && /*#__PURE__*/React.createElement(OpenMediaViewerButton, {
    fileName: name !== null && name !== void 0 ? name : '',
    innerRef: openMediaViewerButtonRef,
    onClick: onClick
  }), /*#__PURE__*/React.createElement(Wrapper, {
    testId: testId || 'media-card-view',
    dimensions: dimensions,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    innerRef: mergedRef,
    breakpoint: breakpoint,
    mediaCardCursor: mediaCardCursor,
    disableOverlay: !!disableOverlay,
    selected: !!selected,
    displayBackground: shouldDisplayBackground,
    isPlayButtonClickable: isPlayButtonClickable,
    isTickBoxSelectable: isTickBoxSelectable,
    shouldDisplayTooltip: shouldDisplayTooltip
  }, shouldDisplayTooltip ? /*#__PURE__*/React.createElement(Tooltip, {
    content: name,
    position: "bottom",
    tag: "div"
  }, contents) : contents));
};
export var CardView = withAnalyticsEvents({
  onClick: createAndFireMediaCardEvent({
    eventType: 'ui',
    action: 'clicked',
    actionSubject: 'mediaCard',
    attributes: {}
  })
})(CardViewBase);