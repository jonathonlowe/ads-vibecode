import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["identifier"];
import { isFileIdentifier } from '@atlaskit/media-client';
import { withMediaAnalyticsContext } from '@atlaskit/media-common';
import React, { useEffect } from 'react';
import { IntlProvider, injectIntl } from 'react-intl-next';
import { ExternalImageCard } from './externalImageCard';
import { FileCard } from './fileCard';
import { startResourceObserver, setAnalyticsContext } from '../utils/mediaPerformanceObserver/mediaPerformanceObserver';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import UFOLabel from '@atlaskit/react-ufo/label';
var packageName = "@atlaskit/media-card";
var packageVersion = "79.2.0";
export var CardBase = function CardBase(_ref) {
  var identifier = _ref.identifier,
    otherProps = _objectWithoutProperties(_ref, _excluded);
  var innerContent = isFileIdentifier(identifier) ? /*#__PURE__*/React.createElement(UFOLabel, {
    name: "media-card-file-card"
  }, /*#__PURE__*/React.createElement(FileCard, _extends({}, otherProps, {
    identifier: identifier,
    key: identifier.id
  }))) : /*#__PURE__*/React.createElement(UFOLabel, {
    name: "media-card-external-image"
  }, /*#__PURE__*/React.createElement(ExternalImageCard, _extends({}, otherProps, {
    identifier: identifier,
    key: identifier.dataURI
  })));
  return otherProps.intl ? innerContent : /*#__PURE__*/React.createElement(IntlProvider, {
    locale: "en"
  }, innerContent);
};
export var CardWithPerformanceObserver = function CardWithPerformanceObserver(props) {
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  useEffect(function () {
    startResourceObserver();
  }, []);
  useEffect(function () {
    setAnalyticsContext(createAnalyticsEvent);
  }, [createAnalyticsEvent]);
  return /*#__PURE__*/React.createElement(CardBase, props);
};
export var Card = withMediaAnalyticsContext({
  packageVersion: packageVersion,
  packageName: packageName,
  componentName: 'mediaCard',
  component: 'mediaCard'
})(injectIntl(CardWithPerformanceObserver, {
  enforceContext: false
}));