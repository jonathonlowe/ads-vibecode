import { isRetina } from './isRetina';
import { getElementDimension } from './getElementDimension';
import { defaultImageCardDimensions } from './cardDimensions';
import { isValidPercentageUnit } from './isValidPercentageUnit';
import { containsPixelUnit } from './containsPixelUnit';

/**
 * ************************************************
 * For Card v1
 * ************************************************
 */

export var getDataURIDimension = function getDataURIDimension(dimension, options) {
  var retinaFactor = isRetina() ? 2 : 1;
  var dimensionValue = options.dimensions && options.dimensions[dimension] || '';
  if (isValidPercentageUnit(dimensionValue) && options.element) {
    return getElementDimension(options.element, dimension) * retinaFactor;
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue * retinaFactor;
  }
  if (containsPixelUnit("".concat(dimensionValue))) {
    return parseInt("".concat(dimensionValue), 10) * retinaFactor;
  }
  return defaultImageCardDimensions[dimension] * retinaFactor;
};
export var getRequestedDimensions = function getRequestedDimensions(options) {
  var width = getDataURIDimension('width', options);
  var height = getDataURIDimension('height', options);
  return {
    width: width,
    height: height
  };
};

/**
 * ************************************************
 * For Card v2
 * ************************************************
 */

// Same as getDataURIDimension but without Retina factor
export var resolveCardPreviewDimension = function resolveCardPreviewDimension(dimensionName, _ref) {
  var dimensions = _ref.dimensions,
    element = _ref.element;
  var dimensionValue = (dimensions === null || dimensions === void 0 ? void 0 : dimensions[dimensionName]) || '';
  if (isValidPercentageUnit(dimensionValue) && element) {
    return getElementDimension(element, dimensionName);
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue;
  }
  if (containsPixelUnit("".concat(dimensionValue))) {
    return parseInt("".concat(dimensionValue), 10);
  }
  return defaultImageCardDimensions[dimensionName];
};
export var resolveCardPreviewDimensions = function resolveCardPreviewDimensions(options) {
  var width = resolveCardPreviewDimension('width', options);
  var height = resolveCardPreviewDimension('height', options);
  return {
    width: width,
    height: height
  };
};