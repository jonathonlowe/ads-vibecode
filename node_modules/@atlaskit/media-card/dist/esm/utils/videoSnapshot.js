import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
export var takeSnapshot = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blob) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            var url = URL.createObjectURL(blob);
            var video = document.createElement('video');
            video.preload = 'metadata';
            video.src = url;
            video.muted = true;
            video.play().catch(function () {
              return reject(new Error('failed to play video'));
            });
            video.addEventListener('timeupdate', function timeUpdateHandler() {
              video.removeEventListener('timeupdate', timeUpdateHandler);
              video.pause();
              URL.revokeObjectURL(url);
              //create canvas to draw our first frame on.

              if (!video.videoWidth && !video.videoHeight) {
                return reject(new Error('error retrieving video dimensions'));
              }
              var canvas = document.createElement('canvas');
              canvas.width = video.videoWidth;
              canvas.height = video.videoHeight;
              var context = canvas.getContext('2d');
              if (!context) {
                return reject(new Error('error creating canvas context'));
              }
              context.drawImage(video, 0, 0, canvas.width, canvas.height);
              var dataURL = canvas.toDataURL('image/jpeg', 0.85);
              resolve(dataURL);
            });
            video.addEventListener('error', function () {
              reject(new Error('failed to load video'));
              URL.revokeObjectURL(url);
            });
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function takeSnapshot(_x) {
    return _ref.apply(this, arguments);
  };
}();