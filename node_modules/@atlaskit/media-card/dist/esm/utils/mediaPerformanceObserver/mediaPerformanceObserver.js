import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { ANALYTICS_MEDIA_CHANNEL } from '@atlaskit/media-common/analytics';
import { fg } from '@atlaskit/platform-feature-flags';
import { createMediaDurationMetrics, createUfoDurationMetrics } from './durationMetrics';
import { sendUfoDurationMetrics } from './ufo';
var MEDIA_CARD_PERF_STATE_KEY = '__mediaCardPerfState_asflkajsdflja';
var urlRegex = /https:\/\/(?:media\.(?:dev|staging|prod)\.atl-paas\.net|api\.media\.atlassian\.com|media-cdn(?:\.stg\.|\.)atlassian\.com)\/file\/([^/]+)\/image.*[?&]source=mediaCard/;
var clientIdParamRegex = /[?&]clientId=([^&]+)/;
var ssrParamRegex = /[?&]token=([^&]+)/;
var createAndGetResourceObserver = function createAndGetResourceObserver() {
  return new PerformanceObserver(function (list) {
    list.getEntries().forEach(function (baseEntry) {
      var _window$MEDIA_CARD_PE;
      var entry = baseEntry;
      var matchFileId = entry.name.match(urlRegex);
      var matchClientId = entry.name.match(clientIdParamRegex);
      var matchSSR = entry.name.match(ssrParamRegex);
      if (matchFileId && (_window$MEDIA_CARD_PE = window[MEDIA_CARD_PERF_STATE_KEY]) !== null && _window$MEDIA_CARD_PE !== void 0 && _window$MEDIA_CARD_PE.mediaCardCreateAnalyticsEvent) {
        var fileId = matchFileId[1];
        var clientId = matchClientId === null || matchClientId === void 0 ? void 0 : matchClientId[1];
        var ssr = matchSSR ? 'server' : undefined;
        var navigationTime = performance.getEntriesByType('navigation')[0];
        var mediaDurationMetrics = createMediaDurationMetrics(entry, navigationTime);
        var event = window[MEDIA_CARD_PERF_STATE_KEY].mediaCardCreateAnalyticsEvent({
          eventType: 'operational',
          action: 'succeeded',
          actionSubject: 'mediaCardPerfObserver',
          attributes: _objectSpread({
            ssr: ssr,
            fileId: fileId,
            mediaClientId: clientId,
            featureFlags: {
              'media-cdn-single-host': fg('platform_media_cdn_single_host')
            }
          }, mediaDurationMetrics)
        });
        event.fire(ANALYTICS_MEDIA_CHANNEL);
        if (fg('platform_media_card_ufo_network_metrics')) {
          var ufoDurationMetrics = createUfoDurationMetrics(entry, navigationTime);
          var endpointName = 'image';
          sendUfoDurationMetrics(ufoDurationMetrics, endpointName);
        }
      }
    });
  });
};
export var setAnalyticsContext = function setAnalyticsContext(newAnalyticsContext) {
  if (!window[MEDIA_CARD_PERF_STATE_KEY]) {
    window[MEDIA_CARD_PERF_STATE_KEY] = {};
  }
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardCreateAnalyticsEvent = newAnalyticsContext;
};
var isDefinedPerformanceObserver = function isDefinedPerformanceObserver() {
  return typeof window['PerformanceObserver'] !== 'undefined';
};
export var startResourceObserver = function startResourceObserver() {
  var _window$MEDIA_CARD_PE2;
  if (!isDefinedPerformanceObserver()) {
    return;
  }
  if ((_window$MEDIA_CARD_PE2 = window[MEDIA_CARD_PERF_STATE_KEY]) !== null && _window$MEDIA_CARD_PE2 !== void 0 && _window$MEDIA_CARD_PE2.mediaCardPerfObserver) {
    return;
  }
  if (!window[MEDIA_CARD_PERF_STATE_KEY]) {
    window[MEDIA_CARD_PERF_STATE_KEY] = {};
  }
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardPerfObserver = createAndGetResourceObserver();
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardPerfObserver.observe({
    type: 'resource',
    buffered: true
  });
};