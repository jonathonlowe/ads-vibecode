import _typeof from "@babel/runtime/helpers/typeof";
var printParam = function printParam(param) {
  if (typeof param === 'string') {
    return "'".concat(param, "'");
  } else if (_typeof(param) === 'object') {
    return JSON.stringify(param);
  } else if (param === undefined) {
    return 'undefined';
  }
  return param;
};
var printParams = function printParams(args) {
  return args.map(function (arg) {
    return printParam(arg);
  }).join(',');
};
export var printFunctionCall = function printFunctionCall(fn) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return "(".concat(fn.toString(), ")(").concat(printParams(args), ");");
};
export var printScript = function printScript(statements) {
  return "(function(){\n  ".concat(statements.join(';'), "\n})();\n");
};