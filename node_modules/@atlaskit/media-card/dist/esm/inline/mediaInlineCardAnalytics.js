import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { extractErrorInfo, fireMediaCardEvent } from '../utils/analytics';
import { MediaCardError } from '../errors';
export var getSucceededStatusPayload = function getSucceededStatusPayload(fileState) {
  return {
    eventType: 'operational',
    action: 'succeeded',
    actionSubject: 'mediaInlineRender',
    attributes: {
      status: 'success',
      fileAttributes: {
        fileId: (fileState === null || fileState === void 0 ? void 0 : fileState.id) || '',
        fileSize: fileState === null || fileState === void 0 ? void 0 : fileState.size,
        fileMediatype: fileState === null || fileState === void 0 ? void 0 : fileState.mediaType,
        fileMimetype: fileState === null || fileState === void 0 ? void 0 : fileState.mimeType,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      }
    }
  };
};
export var getErrorStatusPayload = function getErrorStatusPayload(fileId, error, fileState) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaInlineRender',
    attributes: _objectSpread({
      status: 'fail',
      fileAttributes: {
        fileId: fileId,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      }
    }, extractErrorInfo(error))
  };
};
export var getFailedProcessingStatusPayload = function getFailedProcessingStatusPayload(fileId, fileState) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaInlineRender',
    attributes: {
      status: 'fail',
      fileAttributes: {
        fileId: fileId,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      },
      failReason: 'failed-processing'
    }
  };
};
export var fireFailedOperationalEvent = function fireFailedOperationalEvent(fileState) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MediaCardError('missing-error-data');
  var failReason = arguments.length > 2 ? arguments[2] : undefined;
  var createAnalyticsEvent = arguments.length > 3 ? arguments[3] : undefined;
  var payload = failReason ? getFailedProcessingStatusPayload((fileState === null || fileState === void 0 ? void 0 : fileState.id) || 'unknown-id', fileState) : getErrorStatusPayload((fileState === null || fileState === void 0 ? void 0 : fileState.id) || 'unknown-id', error, fileState);
  fireMediaCardEvent(payload, createAnalyticsEvent);
};
export var fireSucceededOperationalEvent = function fireSucceededOperationalEvent(fileState, createAnalyticsEvent) {
  var payload = getSucceededStatusPayload(fileState);
  fireMediaCardEvent(payload, createAnalyticsEvent);
};