import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { MediaInlineCardLoadingView } from '@atlaskit/media-ui';
import { AnalyticsContext } from '@atlaskit/analytics-next';
var MediaInlineCardLoader = /*#__PURE__*/function (_React$PureComponent) {
  function MediaInlineCardLoader() {
    var _this;
    _classCallCheck(this, MediaInlineCardLoader);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, MediaInlineCardLoader, [].concat(args));
    _defineProperty(_this, "mounted", false);
    _defineProperty(_this, "state", {
      MediaInlineCard: MediaInlineCardLoader.MediaInlineCard,
      ErrorBoundary: MediaInlineCardLoader.ErrorBoundary
    });
    return _this;
  }
  _inherits(MediaInlineCardLoader, _React$PureComponent);
  return _createClass(MediaInlineCardLoader, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$Promise$all, _yield$Promise$all2, mediaClient, cardModule, mediaInlineErrorBoundaryModule;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.mounted = true;
              if (this.state.MediaInlineCard) {
                _context.next = 17;
                break;
              }
              _context.prev = 2;
              _context.next = 5;
              return Promise.all([import( /* webpackChunkName: "@atlaskit-internal_media-client-react" */'@atlaskit/media-client-react'), import( /* webpackChunkName: "@atlaskit-internal_inline-media-card" */'./mediaInlineCard'), import( /* webpackChunkName: "@atlaskit-internal_media-inline-error-boundary" */'./mediaInlineAnalyticsErrorBoundary')]);
            case 5:
              _yield$Promise$all = _context.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
              mediaClient = _yield$Promise$all2[0];
              cardModule = _yield$Promise$all2[1];
              mediaInlineErrorBoundaryModule = _yield$Promise$all2[2];
              MediaInlineCardLoader.MediaInlineCard = mediaClient.withMediaClient(cardModule.MediaInlineCard);
              MediaInlineCardLoader.ErrorBoundary = mediaInlineErrorBoundaryModule.default;
              if (this.mounted) {
                this.setState({
                  MediaInlineCard: MediaInlineCardLoader.MediaInlineCard,
                  ErrorBoundary: MediaInlineCardLoader.ErrorBoundary
                });
              }
              _context.next = 17;
              break;
            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](2);
            case 17:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 15]]);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "componentWillUnmount",
    value: function () {
      var _componentWillUnmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.mounted = false;
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function componentWillUnmount() {
        return _componentWillUnmount.apply(this, arguments);
      }
      return componentWillUnmount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
        MediaInlineCard = _this$state.MediaInlineCard,
        ErrorBoundary = _this$state.ErrorBoundary;
      var analyticsContext = {
        packageVersion: "@atlaskit/media-card",
        packageName: "79.2.0",
        componentName: 'mediaInlineCard',
        component: 'mediaInlineCard'
      };
      if (!MediaInlineCard || !ErrorBoundary) {
        return /*#__PURE__*/React.createElement(MediaInlineCardLoadingView, {
          message: ""
        });
      }
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: analyticsContext
      }, /*#__PURE__*/React.createElement(ErrorBoundary, {
        isSelected: this.props.isSelected
      }, /*#__PURE__*/React.createElement(MediaInlineCard, this.props)));
    }
  }]);
}(React.PureComponent);
_defineProperty(MediaInlineCardLoader, "displayName", 'MediaInlineCardLoader');
export { MediaInlineCardLoader as default };