"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wrapper = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = require("@emotion/react");
var _cardConstants = require("../../cardConstants");
var _styles = require("./styles");
var _vcMedia = require("@atlaskit/react-ufo/vc-media");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var Wrapper = exports.Wrapper = function Wrapper(props) {
  var testId = props.testId,
    dimensions = props.dimensions,
    appearance = props.appearance,
    onClick = props.onClick,
    onMouseEnter = props.onMouseEnter,
    innerRef = props.innerRef,
    breakpoint = props.breakpoint,
    mediaCardCursor = props.mediaCardCursor,
    disableOverlay = props.disableOverlay,
    selected = props.selected,
    displayBackground = props.displayBackground,
    isPlayButtonClickable = props.isPlayButtonClickable,
    isTickBoxSelectable = props.isTickBoxSelectable,
    shouldDisplayTooltip = props.shouldDisplayTooltip;
  return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    (0, _react.jsx)("div", (0, _extends2.default)({
      id: "newFileExperienceWrapper"
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      ,
      className: _cardConstants.newFileExperienceClassName,
      "data-testid": testId
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      css: (0, _styles.wrapperStyles)({
        breakpoint: breakpoint,
        dimensions: dimensions,
        appearance: appearance,
        disableOverlay: disableOverlay,
        displayBackground: displayBackground,
        selected: selected,
        isPlayButtonClickable: isPlayButtonClickable,
        isTickBoxSelectable: isTickBoxSelectable,
        shouldDisplayTooltip: shouldDisplayTooltip,
        mediaCardCursor: mediaCardCursor
      }),
      ref: innerRef,
      onClick: onClick,
      onMouseEnter: onMouseEnter
    }, _vcMedia.VcMediaWrapperProps), props.children)
  );
};