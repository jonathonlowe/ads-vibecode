/* wrapper-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wrapper = void 0;
require("./wrapper-compiled.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _cardConstants = require("../../cardConstants");
var _vcMedia = require("@atlaskit/react-ufo/vc-media");
var _colors = require("@atlaskit/theme/colors");
var _cardDimensions = require("../../../utils/cardDimensions");
var _getCSSUnitValue = require("../../../utils/getCSSUnitValue");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var wrapperStyles = null;
var backgroundStyle = null;
var cursorStyleMap = {
  pointer: "_80omtlke",
  wait: "_80omv00u"
};
var shadowStyleMap = {
  withOverlay: "_16qs64c8",
  selected: "_16qs666x",
  selectedWithOverlay: "_16qshzij"
};
var getShadowKey = function getShadowKey(disableOverlay, selected) {
  if (!disableOverlay && selected) {
    return 'selectedWithOverlay';
  }
  if (!disableOverlay) {
    return 'withOverlay';
  }
  if (selected) {
    return 'selected';
  }
  return '';
};
var hideNativeBrowserTextSelectionStyles = null;
var clickableButtonPlayButtonStyles = null;
var selectableTickboxStyle = null;
var tooltipStyle = null;
var getResponsiveStyles = function getResponsiveStyles(breakpoint) {
  // dynamically setting the properties to avoid ratcheting build errors. These need to be removed however for the compiled transformation.
  return breakpoint === 'small' ? (0, _defineProperty2.default)((0, _defineProperty2.default)({}, 'fontSize', '11x'), 'lineHeight', '14px') : (0, _defineProperty2.default)((0, _defineProperty2.default)({}, 'fontSize', '14px'), 'lineHeight', '22px');
};
var Wrapper = exports.Wrapper = function Wrapper(props) {
  var testId = props.testId,
    dimensions = props.dimensions,
    appearance = props.appearance,
    onClick = props.onClick,
    onMouseEnter = props.onMouseEnter,
    innerRef = props.innerRef,
    breakpoint = props.breakpoint,
    mediaCardCursor = props.mediaCardCursor,
    disableOverlay = props.disableOverlay,
    selected = props.selected,
    displayBackground = props.displayBackground,
    isPlayButtonClickable = props.isPlayButtonClickable,
    isTickBoxSelectable = props.isTickBoxSelectable,
    shouldDisplayTooltip = props.shouldDisplayTooltip;
  var defaultImageCardDimensions = (0, _cardDimensions.getDefaultCardDimensions)(appearance);
  var width = (0, _getCSSUnitValue.getCSSUnitValue)((dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || defaultImageCardDimensions.width);
  var height = (0, _getCSSUnitValue.getCSSUnitValue)((dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) || defaultImageCardDimensions.height);
  var wrapperShadowKey = getShadowKey(disableOverlay, selected);
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    id: "newFileExperienceWrapper"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: (0, _runtime.ax)(["_2rko1l7b _vchhusvi _kqswh2mm _ect41gqc _p12f1osq _c71l1osq _1hlmuwsq _1rquusvi _eg54326j _mts3kb7n _1ntskb7n", displayBackground && "_bfhklslw", mediaCardCursor && cursorStyleMap[mediaCardCursor], wrapperShadowKey && shadowStyleMap[wrapperShadowKey], selected && "_1p1y1j28 _1rk81j28 _14r11j28 _1np21j28", isPlayButtonClickable && "_1y898vuz _19zy8vuz", isTickBoxSelectable && "_1yf91flm _1xp5rcbj", shouldDisplayTooltip && "_9m3z1osq _10pb1osq", _cardConstants.newFileExperienceClassName]),
    "data-testid": testId,
    ref: innerRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter
  }, _vcMedia.VcMediaWrapperProps, {
    style: _objectSpread(_objectSpread({
      width: width,
      height: height
    }, getResponsiveStyles(breakpoint)), {}, {
      "--_1ox8nit": (0, _runtime.ix)("var(--ds-blanket, ".concat(_colors.N90A, ")")),
      "--_jz8ahf": (0, _runtime.ix)("solid 2px ".concat("var(--ds-border-focused, ".concat(_colors.B100, ")"))),
      "--_1jkcdu5": (0, _runtime.ix)("var(--ds-background-neutral, ".concat(_colors.N20, ")")),
      "--_mt8cm6": (0, _runtime.ix)("var(--ds-background-input, ".concat(_colors.N0, ")")),
      "--_13xf2t5": (0, _runtime.ix)("var(--ds-icon-subtle, ".concat(_colors.N100, ")"))
    })
  }), props.children);
};
Wrapper.displayName = 'NewFileExperienceWrapper';