"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewUnavailable = exports.IconMessage = exports.FailedToUpload = exports.FailedToLoad = exports.CreatingPreview = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _iconMessageWrapper = require("./iconMessageWrapper");
var _mediaUi = require("@atlaskit/media-ui");
var _reactIntlNext = require("react-intl-next");
var IconMessage = exports.IconMessage = function IconMessage(_ref) {
  var messageDescriptor = _ref.messageDescriptor,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? false : _ref$animated;
  return /*#__PURE__*/_react.default.createElement(_iconMessageWrapper.IconMessageWrapper, {
    animated: animated
  }, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, messageDescriptor)));
};
var CreatingPreview = exports.CreatingPreview = function CreatingPreview(_ref2) {
  var disableAnimation = _ref2.disableAnimation;
  return /*#__PURE__*/_react.default.createElement(IconMessage, {
    messageDescriptor: _mediaUi.messages.creating_preview,
    animated: !disableAnimation
  });
};
var PreviewUnavailable = exports.PreviewUnavailable = function PreviewUnavailable(props) {
  return /*#__PURE__*/_react.default.createElement(IconMessage, (0, _extends2.default)({}, props, {
    messageDescriptor: _mediaUi.messages.preview_unavailable
  }));
};
var FailedToLoad = exports.FailedToLoad = function FailedToLoad(props) {
  return /*#__PURE__*/_react.default.createElement(IconMessage, (0, _extends2.default)({}, props, {
    messageDescriptor: _mediaUi.messages.failed_to_load
  }));
};
var FailedToUpload = exports.FailedToUpload = function FailedToUpload(props) {
  return /*#__PURE__*/_react.default.createElement(IconMessage, (0, _extends2.default)({}, props, {
    messageDescriptor: _mediaUi.messages.failed_to_upload
  }));
};