"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleBox = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _lockLockedLockFilled = _interopRequireDefault(require("@atlaskit/icon/utility/migration/lock-locked--lock-filled"));
var _truncateText = require("@atlaskit/media-ui/truncateText");
var _formatDate = require("@atlaskit/media-ui/formatDate");
var _titleBoxComponents = require("./titleBoxComponents");
var placeholderText = ' ';
var isValidTimestamp = function isValidTimestamp(timeStamp) {
  return new Date(timeStamp).getTime() > 0;
};
var TitleBox = exports.TitleBox = (0, _reactIntlNext.injectIntl)(function (_ref) {
  var _intl$locale;
  var name = _ref.name,
    createdAt = _ref.createdAt,
    breakpoint = _ref.breakpoint,
    titleBoxBgColor = _ref.titleBoxBgColor,
    titleBoxIcon = _ref.titleBoxIcon,
    hidden = _ref.hidden,
    intl = _ref.intl;
  return /*#__PURE__*/_react.default.createElement(_titleBoxComponents.TitleBoxWrapper, {
    hidden: hidden,
    breakpoint: breakpoint,
    titleBoxBgColor: titleBoxBgColor
  }, /*#__PURE__*/_react.default.createElement(_titleBoxComponents.TitleBoxHeader, {
    hasIconOverlap: !!titleBoxIcon && !createdAt
  }, /*#__PURE__*/_react.default.createElement(_truncateText.Truncate, {
    text: name !== null && name !== void 0 ? name : placeholderText
  })), /*#__PURE__*/_react.default.createElement(_titleBoxComponents.TitleBoxFooter, {
    hasIconOverlap: !!titleBoxIcon
  }, createdAt !== undefined && isValidTimestamp(createdAt) ? (0, _formatDate.formatDate)(createdAt, (_intl$locale = intl === null || intl === void 0 ? void 0 : intl.locale) !== null && _intl$locale !== void 0 ? _intl$locale : 'en') : placeholderText), titleBoxIcon === 'LockFilledIcon' && /*#__PURE__*/_react.default.createElement(_titleBoxComponents.TitleBoxIcon, null, /*#__PURE__*/_react.default.createElement(_lockLockedLockFilled.default, {
    color: "currentColor",
    label: "",
    LEGACY_size: "small"
  })));
}, {
  enforceContext: false
});