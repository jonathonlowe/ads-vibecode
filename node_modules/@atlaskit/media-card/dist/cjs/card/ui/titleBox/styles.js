"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.titleBoxWrapperStyles = exports.titleBoxIconStyles = exports.titleBoxHeaderStyles = exports.titleBoxFooterStyles = exports.newTitleBoxIconStyles = exports.errorMessageWrapperStyles = void 0;
var _react = require("@emotion/react");
var _common = require("../common");
var _colors = require("@atlaskit/theme/colors");
var _styles = require("../styles");
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var generateResponsiveStyles = function generateResponsiveStyles() {
  var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _common.Breakpoint.SMALL;
  var setting = _common.responsiveSettings[breakpoint];
  var verticalPadding = setting.titleBox.verticalPadding;
  var horizontalPadding = setting.titleBox.horizontalPadding;
  var height = (0, _common.getTitleBoxHeight)(breakpoint);
  return "height: ".concat(height, "px;\n    padding: ").concat(verticalPadding, "px ").concat(horizontalPadding, "px;");
};
var HEX_REGEX = /^#[0-9A-F]{6}$/i;
var titleBoxWrapperStyles = exports.titleBoxWrapperStyles = function titleBoxWrapperStyles(_ref) {
  var breakpoint = _ref.breakpoint,
    _ref$display = _ref.display,
    display = _ref$display === void 0 ? 'flex' : _ref$display,
    titleBoxBgColor = _ref.titleBoxBgColor;
  return (0, _react.css)({
    position: 'absolute',
    bottom: 0,
    width: '100%',
    backgroundColor: "var(--ds-surface, ".concat(
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    (0, _styles.rgba)(titleBoxBgColor && HEX_REGEX.test(titleBoxBgColor) ? titleBoxBgColor : _colors.N0, 1), ")"),
    color: "var(--ds-text, ".concat(_colors.N800, ")"),
    cursor: 'inherit',
    pointerEvents: 'none',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    display: display,
    flexDirection: 'column',
    justifyContent: 'center'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  generateResponsiveStyles(breakpoint));
};
titleBoxWrapperStyles.displayName = 'TitleBoxWrapper';
var infoStyles = "white-space: nowrap;overflow: hidden;";
var iconOverlapStyles = "padding-right: 10px;";
var titleBoxHeaderStyles = exports.titleBoxHeaderStyles = function titleBoxHeaderStyles(_ref2) {
  var hasIconOverlap = _ref2.hasIconOverlap;
  return (0, _react.css)({
    fontWeight: "var(--ds-font-weight-semibold, 600)"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  infoStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  hasIconOverlap && iconOverlapStyles);
};
titleBoxHeaderStyles.displayName = 'FailedTitleBoxHeader';
var titleBoxFooterStyles = exports.titleBoxFooterStyles = function titleBoxFooterStyles(_ref3) {
  var hasIconOverlap = _ref3.hasIconOverlap;
  return (0, _react.css)({
    textOverflow: 'ellipsis'
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  infoStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  hasIconOverlap && iconOverlapStyles);
};
titleBoxFooterStyles.displayName = 'TitleBoxFooter';

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var titleBoxIconStyles = exports.titleBoxIconStyles = (0, _react.css)({
  position: 'absolute',
  right: "var(--ds-space-050, 4px)",
  bottom: '0px'
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var newTitleBoxIconStyles = exports.newTitleBoxIconStyles = (0, _react.css)({
  position: 'absolute',
  right: "var(--ds-space-050, 4px)",
  bottom: "var(--ds-space-050, 4px)"
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var errorMessageWrapperStyles = exports.errorMessageWrapperStyles = (0, _react.css)({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'flex-start',
  paddingInlineStart: "var(--ds-space-025, 2px)",
  gap: "var(--ds-space-025, 2px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  span: {
    verticalAlign: 'middle',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    ':nth-child(2)': {
      marginLeft: "var(--ds-space-050, 4px)",
      marginRight: "var(--ds-space-050, 4px)"
    }
  }
});