"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardActionsDropdownMenu = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _showMoreHorizontalMore = _interopRequireDefault(require("@atlaskit/icon/core/migration/show-more-horizontal--more"));
var _dropdownMenu = _interopRequireWildcard(require("@atlaskit/dropdown-menu"));
var _analytics = require("../../../../utils/analytics");
var _cardActionButton = require("./cardActionButton");
var _excluded = ["triggerRef", "isSelected", "testId", "onClick"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Trick applied due to the lack of props type of DropdownItem
var DropdownItemWithProps = function DropdownItemWithProps(props) {
  return /*#__PURE__*/_react.default.createElement(_dropdownMenu.DropdownItem, (0, _extends2.default)({
    testId: "media-card-actions-menu-item"
  }, props));
};
var createDropdownItemWithAnalytics = function createDropdownItemWithAnalytics(action, index) {
  var label = action.label,
    handler = action.handler,
    isDisabled = action.isDisabled;
  var DropdownItemWithAnalytics = (0, _analyticsNext.withAnalyticsEvents)({
    onClick: (0, _analytics.createAndFireMediaCardEvent)({
      eventType: 'ui',
      action: 'clicked',
      actionSubject: 'button',
      actionSubjectId: 'mediaCardDropDownMenuItem',
      attributes: {
        label: label
      }
    })
  })(DropdownItemWithProps);
  return /*#__PURE__*/_react.default.createElement(DropdownItemWithAnalytics, {
    key: index,
    onClick: function onClick() {
      return handler();
    },
    isDisabled: isDisabled
  }, label);
};
var CardActionsDropdownMenu = exports.CardActionsDropdownMenu = function CardActionsDropdownMenu(_ref) {
  var actions = _ref.actions,
    triggerColor = _ref.triggerColor,
    onOpenChange = _ref.onOpenChange,
    triggerVariant = _ref.triggerVariant;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  if (actions.length > 0) {
    return /*#__PURE__*/_react.default.createElement(_dropdownMenu.default, {
      testId: "media-card-actions-menu",
      onOpenChange: onOpenChange,
      trigger: function trigger(_ref2) {
        var triggerRef = _ref2.triggerRef,
          isSelected = _ref2.isSelected,
          testId = _ref2.testId,
          _onClick = _ref2.onClick,
          providedProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
        return /*#__PURE__*/_react.default.createElement(_cardActionButton.CardActionButton, (0, _extends2.default)({
          variant: triggerVariant
          // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
          ,
          style: {
            color: triggerColor
          },
          ref: triggerRef,
          onClick: function onClick(e) {
            (0, _analytics.fireMediaCardEvent)({
              eventType: 'ui',
              action: 'clicked',
              actionSubject: 'button',
              actionSubjectId: 'mediaCardDropDownMenu',
              attributes: {}
            }, createAnalyticsEvent);
            _onClick === null || _onClick === void 0 || _onClick(e);
          }
        }, providedProps), /*#__PURE__*/_react.default.createElement(_showMoreHorizontalMore.default, {
          color: "currentColor",
          spacing: "spacious",
          label: "more"
        }));
      }
    }, /*#__PURE__*/_react.default.createElement(_dropdownMenu.DropdownItemGroup, null, actions.map(createDropdownItemWithAnalytics)));
  } else {
    return null;
  }
};