"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardActionIconButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _cardActionButton = require("./cardActionButton");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _analytics = require("../../../../utils/analytics");
var CardActionIconButton = exports.CardActionIconButton = function CardActionIconButton(_ref) {
  var icon = _ref.icon,
    label = _ref.label,
    filename = _ref.filename,
    triggerColor = _ref.triggerColor,
    onClick = _ref.onClick,
    isPrimary = _ref.isPrimary,
    variant = _ref.variant,
    isDisabled = _ref.isDisabled,
    tooltip = _ref.tooltip;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  // this is to prevent currently focused text to loose cursor on clicking card action
  // this does not prevent onclick behavior
  var onMouseDown = function onMouseDown(event) {
    event.preventDefault();
  };
  var handleClick = function handleClick(e) {
    var actionSubjectId = isPrimary ? 'mediaCardPrimaryActionButton' : 'mediaCardSecondaryActionButton';
    (0, _analytics.fireMediaCardEvent)({
      eventType: 'ui',
      action: 'clicked',
      actionSubject: 'button',
      actionSubjectId: actionSubjectId,
      attributes: {
        label: label
      }
    }, createAnalyticsEvent);
    onClick === null || onClick === void 0 || onClick(e);
  };
  var cardActionButton = /*#__PURE__*/_react.default.createElement(_cardActionButton.CardActionButton, {
    onClick: handleClick,
    onMouseDown: onMouseDown
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: {
      color: triggerColor
    },
    label: filename ? "".concat(filename, " \u2014 ").concat(label) : label,
    variant: variant,
    disabled: isDisabled
  }, icon);
  return tooltip ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: tooltip,
    position: "bottom",
    tag: "span"
  }, cardActionButton) : cardActionButton;
};