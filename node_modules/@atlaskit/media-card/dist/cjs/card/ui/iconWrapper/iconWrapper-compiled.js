/* iconWrapper-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconWrapper = void 0;
exports.titleBoxHeight = titleBoxHeight;
require("./iconWrapper-compiled.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _common = require("../common");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function titleBoxHeight(hasTitleBox, breakpoint) {
  // there is no titlebox
  if (!hasTitleBox) {
    return "0px";
  }

  // calculate height of the titlebox
  var marginBottom = (0, _common.getTitleBoxHeight)(breakpoint);
  return "".concat(marginBottom, "px");
}
var iconWrapperStyles = null;
var IconWrapper = exports.IconWrapper = function IconWrapper(props) {
  var breakpoint = props.breakpoint,
    hasTitleBox = props.hasTitleBox;
  return /*#__PURE__*/React.createElement("div", {
    id: "iconWrapper",
    style: {
      height: "calc(100% - ".concat(titleBoxHeight(hasTitleBox, breakpoint), ")")
    },
    className: (0, _runtime.ax)(["_kqswstnw _1bsb1osq _1e0c1txw _2lx21bp4 _1bah1h6o _4cvr1h6o"])
  }, props.children);
};
IconWrapper.displayName = 'MediaIconWrapper';