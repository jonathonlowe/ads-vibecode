"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transition = exports.rgba = exports.getWrapperShadow = exports.getWrapperDimensions = exports.getSelectableTickBoxStyles = exports.getCursorStyle = exports.getClickablePlayButtonStyles = exports.generateResponsiveStyles = exports.calcBreakpointSize = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _colors = require("@atlaskit/theme/colors");
var _consts = require("@atlaskit/editor-shared-styles/consts");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _getCSSUnitValue = require("../../utils/getCSSUnitValue");
var _cardDimensions = require("../../utils/cardDimensions");
var _styles = require("./tickBox/styles");
var _styles2 = require("./playButton/styles");
var _common = require("./common");
var breakpointSizes = [[_common.Breakpoint.SMALL, 599], [_common.Breakpoint.LARGE, Infinity]];
var calcBreakpointSize = exports.calcBreakpointSize = function calcBreakpointSize() {
  var wrapperWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var _ref = breakpointSizes.find(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        _breakpoint = _ref4[0],
        limit = _ref4[1];
      return wrapperWidth <= limit;
    }) || [_common.Breakpoint.SMALL],
    _ref2 = (0, _slicedToArray2.default)(_ref, 1),
    breakpoint = _ref2[0];
  return breakpoint;
};
var generateResponsiveStyles = exports.generateResponsiveStyles = function generateResponsiveStyles() {
  var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _common.Breakpoint.SMALL;
  var setting = _common.responsiveSettings[breakpoint];
  return "\n    font-size: ".concat(setting.fontSize, "px;\n    line-height: ").concat(setting.lineHeight, "px;\n  ");
};
var getWrapperDimensions = exports.getWrapperDimensions = function getWrapperDimensions(dimensions, appearance) {
  var _ref5 = dimensions || {},
    width = _ref5.width,
    height = _ref5.height;
  var _getDefaultCardDimens = (0, _cardDimensions.getDefaultCardDimensions)(appearance),
    defaultWidth = _getDefaultCardDimens.width,
    defaultHeight = _getDefaultCardDimens.height;
  return "\n     ".concat((0, _platformFeatureFlags.fg)('platform_fix_media_image_resizing') ? "@container view-page-content (min-width: 1px) { width: 100cqw; }" : '', "\n\t/* If container doesn't exists, it will fallback to this */\n\twidth: ").concat((0, _getCSSUnitValue.getCSSUnitValue)(width || defaultWidth), ";\n\n    max-width: 100%;\n    height: ").concat((0, _getCSSUnitValue.getCSSUnitValue)(height || defaultHeight), ";\n    max-height: 100%;\n  ");
};

// This is a trick to simulate the blue border without affecting the dimensions.
// CSS outline has no 'radius', therefore we can't achieve the same effect with it
var getWrapperShadow = exports.getWrapperShadow = function getWrapperShadow(disableOverlay, selected) {
  var withOverlayShadow = !disableOverlay ? "".concat("var(--ds-shadow-raised, ".concat("0 1px 1px ".concat(_colors.N60A, ", 0 0 1px 0 ").concat(_colors.N60A), ")")) : '';
  var selectedShadow = selected ? _consts.akEditorSelectedBoxShadow : '';
  var shadow = [selectedShadow, withOverlayShadow].filter(Boolean).join(', ');
  return shadow ? "box-shadow: ".concat(shadow, ";") : '';
};
var getCursorStyle = exports.getCursorStyle = function getCursorStyle(cursor) {
  return !!cursor ? "cursor: ".concat(cursor, ";") : '';
};
var getClickablePlayButtonStyles = exports.getClickablePlayButtonStyles = function getClickablePlayButtonStyles(isPlayButtonClickable) {
  if (!isPlayButtonClickable) {
    return '';
  }
  return "\n    &:hover .".concat(_styles2.playButtonClassName, " {\n      ").concat(_styles2.fixedPlayButtonStyles, "\n    }\n  ");
};
var getSelectableTickBoxStyles = exports.getSelectableTickBoxStyles = function getSelectableTickBoxStyles(isTickBoxSelectable) {
  if (!isTickBoxSelectable) {
    return '';
  }
  return "\n    &:hover .".concat(_styles.tickBoxClassName, " {\n      ").concat(_styles.tickboxFixedStyles, "\n    }\n  ");
};
var defaultTransitionDuration = '.3s';
var transition = exports.transition = function transition() {
  var propertyName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';
  return "\n  transition: ".concat(propertyName, " ").concat(defaultTransitionDuration, ";\n");
};
var hexToRgb = function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? "".concat(parseInt(result[1], 16), ",").concat(parseInt(result[2], 16), ",").concat(parseInt(result[3], 16)) : null;
};
var rgba = exports.rgba = function rgba(hex, opacity) {
  return "rgba(".concat(hexToRgb(hex), ", ").concat(opacity, ")");
};