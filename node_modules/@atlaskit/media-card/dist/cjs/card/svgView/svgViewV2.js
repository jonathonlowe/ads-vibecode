"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SvgView = void 0;
var _react = require("@emotion/react");
var _react2 = require("react");
var _errors = require("../../errors");
var _mediaSvg = require("@atlaskit/media-svg");
var _imageRendererV = require("../ui/imageRenderer/imageRendererV2");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var getErrorReason = function getErrorReason(svgReason) {
  switch (svgReason) {
    case 'img-error':
      return 'svg-img-error';
    case 'binary-fetch':
      return 'svg-binary-fetch';
    case 'blob-to-datauri':
      return 'svg-blob-to-datauri';
    default:
      return 'svg-unknown-error';
  }
};
var SvgView = exports.SvgView = function SvgView(_ref) {
  var identifier = _ref.identifier,
    resizeMode = _ref.resizeMode,
    onLoad = _ref.onLoad,
    onError = _ref.onError,
    wrapperRef = _ref.wrapperRef,
    alt = _ref.alt;
  var onSvgError = function onSvgError(err) {
    var error = new _errors.MediaCardError(getErrorReason(err.primaryReason), err.secondaryError);
    onError === null || onError === void 0 || onError(error);
  };
  var _useResolveSvg = (0, _mediaSvg.useResolveSvg)(identifier, onSvgError),
    svgUrl = _useResolveSvg.svgUrl,
    source = _useResolveSvg.source;
  var cardPreview = (0, _react2.useMemo)(function () {
    return svgUrl && source ? {
      dataURI: svgUrl,
      source: source
    } : undefined;
  }, [svgUrl, source]);
  return cardPreview ? (0, _react.jsx)(_imageRendererV.ImageRenderer, {
    testId: "media-card-svg",
    identifier: identifier,
    cardPreview: cardPreview,
    alt: alt,
    resizeMode: resizeMode,
    onImageLoad: onLoad,
    onImageError: function onImageError() {
      onSvgError(new _mediaSvg.MediaSVGError('img-error'));
    },
    wrapperRef: wrapperRef,
    mediaType: "image",
    useWhiteBackground: true
  }) : null;
};