"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUfoDurationMetrics = exports.createMediaDurationMetrics = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getStartedAt = function getStartedAt(entry, navigationTime) {
  return entry.startTime - ((navigationTime === null || navigationTime === void 0 ? void 0 : navigationTime.domContentLoadedEventEnd) || 0);
};
var getCommonMetrics = function getCommonMetrics(entry) {
  return {
    tcpHandshakeTime: {
      end: entry.connectEnd,
      start: entry.connectStart
    },
    dnsLookupTime: {
      end: entry.domainLookupEnd,
      start: entry.domainLookupStart
    },
    redirectTimeTaken: {
      end: entry.redirectEnd,
      start: entry.redirectStart
    },
    tlsConnectNegotiationTime: {
      end: entry.requestStart,
      start: entry.secureConnectionStart
    },
    timeTakenToFetchWithoutRedirect: {
      end: entry.responseEnd,
      start: entry.fetchStart
    },
    /**
     * `interimRequestTime` represents the entire time the browser took to
     * request the resource from the server. This includes the interim response time
     * (for example, 100 Continue or 103 Early Hints).
     *
     * i.e. It is the time taken for the request to be sent
     * + the waiting time for the server to send a response
     *
     * Please, note that this value
     * is distinctly different from the aforementioned document.
     */
    interimRequestTime: {
      end: entry.responseStart,
      start: entry.requestStart
    },
    /**
     * `requestInvocationTime` represents the actual time the browser took to request
     * the resource from the server (i.e. it does not include the interim reponse
     * time).
     * NOTE: it relies on an experimental feature (`firstInterimResponseStart`) that is
     * available in Chrome, but not in FireFox or Safari. This value will be undefined
     * when `firstInterimResponseStart` is unavailable.
     */
    requestInvocationTime: entry.firstInterimResponseStart ? {
      end: entry.firstInterimResponseStart,
      start: entry.requestStart
    } : undefined,
    /**
     * `contentDownloadTime` represents the time taken for the browser to receive
     * the resource from the server. This may be cut short if the transport
     * connection is closed.
     */
    contentDownloadTime: {
      end: entry.responseEnd,
      start: entry.responseStart
    }
  };
};
var calculateCommonDurations = function calculateCommonDurations(metrics) {
  return Object.fromEntries(Object.entries(metrics).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      key = _ref2[0],
      marks = _ref2[1];
    if (!marks) {
      return [key, undefined];
    }
    var start = marks.start,
      end = marks.end;
    return [key, end - start];
  }));
};
var createMediaDurationMetrics = exports.createMediaDurationMetrics = function createMediaDurationMetrics(entry, navigationTime) {
  var _entry$serverTiming$f, _entry$serverTiming$f2;
  return _objectSpread(_objectSpread({
    startedAt: getStartedAt(entry, navigationTime),
    /**
     * Performance resource timing data regarding the loading of an
     * application's resources as described in
     * https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming
     */
    transferSize: entry.transferSize,
    decodedBodySize: entry.decodedBodySize,
    totalDuration: entry.duration,
    initiatorType: entry.initiatorType,
    // value can be 'fetch' or 'img'
    responseEnd: entry.responseEnd,
    browserCacheHit: entry.transferSize === 0,
    nextHopProtocol: entry.nextHopProtocol
  }, calculateCommonDurations(getCommonMetrics(entry))), {}, {
    /**
     * The user agent string for the current browser
     * Read more: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent
     */
    userAgent: window.navigator.userAgent,
    /**
     * Performance resource timing data sent by the server. This includes:
     *
     * `cdnCacheHit` is a boolean determining whether the CDN cache was hit or missed.
     *
     * `cdnDownstreamFBL` is the 'CDN Downstream First Byte Latency'. It represents
     * how long the it took the CDN to respond to the frontend.
     *
     * `cdnUpstreamFBL` is the 'CDN Upstream First Byte Latency'. It represents the
     * time the Media backend took to respond to the CDN, in the case that the CDN
     * cache was a miss. Notably, this timing is a subset of the `cdnDownstreamFBL` timing.
     */
    cdnCacheHit: entry.serverTiming.find(function (_ref3) {
      var name = _ref3.name;
      return name === 'cdn-cache-hit';
    }) ? true : false,
    cdnDownstreamFBL: (_entry$serverTiming$f = entry.serverTiming.find(function (_ref4) {
      var name = _ref4.name;
      return name === 'cdn-downstream-fbl';
    })) === null || _entry$serverTiming$f === void 0 ? void 0 : _entry$serverTiming$f.duration,
    cdnUpstreamFBL: (_entry$serverTiming$f2 = entry.serverTiming.find(function (_ref5) {
      var name = _ref5.name;
      return name === 'cdn-upstream-fbl';
    })) === null || _entry$serverTiming$f2 === void 0 ? void 0 : _entry$serverTiming$f2.duration
  });
};
var filterCommonMetrics = function filterCommonMetrics(metrics) {
  return Object.fromEntries(Object.entries(metrics).filter(function (_ref6) {
    var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
      marks = _ref7[1];
    return !!marks;
  }));
};
var createUfoDurationMetrics = exports.createUfoDurationMetrics = function createUfoDurationMetrics(entry, navigationTime) {
  return _objectSpread({
    resourceTiming: {
      start: getStartedAt(entry, navigationTime),
      end: entry.responseEnd
    }
  }, filterCommonMetrics(getCommonMetrics(entry)));
};