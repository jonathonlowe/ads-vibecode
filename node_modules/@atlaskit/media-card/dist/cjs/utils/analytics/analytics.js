"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractErrorInfo = exports.createAndFireMediaCardEvent = void 0;
exports.fireMediaCardEvent = fireMediaCardEvent;
exports.getRenderSucceededEventPayload = exports.getRenderFailedFileStatusPayload = exports.getRenderFailedExternalUriPayload = exports.getRenderErrorRequestMetadata = exports.getRenderErrorFailReason = exports.getRenderErrorEventPayload = exports.getRenderErrorErrorReason = exports.getRenderErrorErrorDetail = exports.getRemoteSuccessEventPayload = exports.getFileAttributes = exports.getErrorTraceContext = exports.getErrorEventPayload = exports.getDownloadSucceededEventPayload = exports.getDownloadFailedEventPayload = exports.getCacheHitEventPayload = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _mediaClient = require("@atlaskit/media-client");
var _analytics = require("@atlaskit/media-common/analytics");
var _analyticsNext = require("@atlaskit/analytics-next");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getFileAttributes = exports.getFileAttributes = function getFileAttributes(metadata, fileStatus) {
  return {
    fileMediatype: metadata.mediaType,
    fileMimetype: metadata.mimeType,
    fileId: metadata.id,
    fileSize: metadata.size,
    fileStatus: fileStatus
  };
};
var getRenderSucceededEventPayload = exports.getRenderSucceededEventPayload = function getRenderSucceededEventPayload(fileAttributes, performanceAttributes, ssrReliability, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'succeeded',
    actionSubject: 'mediaCardRender',
    attributes: {
      fileMimetype: fileAttributes.fileMimetype,
      fileAttributes: fileAttributes,
      performanceAttributes: performanceAttributes,
      status: 'success',
      ssrReliability: ssrReliability,
      traceContext: traceContext,
      metadataTraceContext: metadataTraceContext
    }
  };
};
var getDownloadSucceededEventPayload = exports.getDownloadSucceededEventPayload = function getDownloadSucceededEventPayload(fileAttributes, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'succeeded',
    actionSubject: 'mediaCardDownload',
    attributes: {
      fileMimetype: fileAttributes.fileMimetype,
      fileAttributes: fileAttributes,
      status: 'success',
      traceContext: traceContext,
      metadataTraceContext: metadataTraceContext
    }
  };
};
var getCacheHitEventPayload = exports.getCacheHitEventPayload = function getCacheHitEventPayload(cardPreviewAttributes) {
  return {
    eventType: 'operational',
    action: 'cache-hit',
    actionSubject: 'mediaCardCache',
    attributes: {
      cardPreviewAttributes: cardPreviewAttributes
    }
  };
};
var getRemoteSuccessEventPayload = exports.getRemoteSuccessEventPayload = function getRemoteSuccessEventPayload(cardPreviewAttributes) {
  return {
    eventType: 'operational',
    action: 'Remote-success',
    actionSubject: 'mediaCardCache',
    attributes: {
      cardPreviewAttributes: cardPreviewAttributes
    }
  };
};
var getRenderFailedExternalUriPayload = exports.getRenderFailedExternalUriPayload = function getRenderFailedExternalUriPayload(fileAttributes, performanceAttributes) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaCardRender',
    attributes: {
      fileAttributes: fileAttributes,
      performanceAttributes: performanceAttributes,
      status: 'fail',
      failReason: 'external-uri'
    }
  };
};
var getRenderErrorFailReason = exports.getRenderErrorFailReason = function getRenderErrorFailReason(error) {
  return error.primaryReason || 'nativeError';
};
var getRenderErrorErrorReason = exports.getRenderErrorErrorReason = function getRenderErrorErrorReason(error) {
  var secondaryError = error.secondaryError;
  if ((0, _mediaClient.isCommonMediaClientError)(secondaryError)) {
    return secondaryError.reason;
  }
  return 'nativeError';
};
var getRenderErrorErrorDetail = exports.getRenderErrorErrorDetail = function getRenderErrorErrorDetail(error) {
  var _secondaryError$inner;
  var secondaryError = error.secondaryError;
  if ((0, _mediaClient.isCommonMediaClientError)(secondaryError) && (_secondaryError$inner = secondaryError.innerError) !== null && _secondaryError$inner !== void 0 && _secondaryError$inner.message) {
    var _secondaryError$inner2;
    return (_secondaryError$inner2 = secondaryError.innerError) === null || _secondaryError$inner2 === void 0 ? void 0 : _secondaryError$inner2.message;
  }
  if (secondaryError instanceof Error) {
    return secondaryError.message;
  }
  return error.message;
};
var getErrorTraceContext = exports.getErrorTraceContext = function getErrorTraceContext(error) {
  var secondaryError = error.secondaryError;
  if ((0, _mediaClient.isCommonMediaClientError)(secondaryError)) {
    var _secondaryError$metad;
    return (_secondaryError$metad = secondaryError.metadata) === null || _secondaryError$metad === void 0 ? void 0 : _secondaryError$metad.traceContext;
  }
};
var getRenderErrorRequestMetadata = exports.getRenderErrorRequestMetadata = function getRenderErrorRequestMetadata(error) {
  var secondaryError = error.secondaryError;
  if ((0, _mediaClient.isCommonMediaClientError)(secondaryError)) {
    return secondaryError.metadata;
  }
};
var extractErrorInfo = exports.extractErrorInfo = function extractErrorInfo(error, metadataTraceContext) {
  return {
    failReason: getRenderErrorFailReason(error),
    error: getRenderErrorErrorReason(error),
    errorDetail: getRenderErrorErrorDetail(error),
    metadataTraceContext: metadataTraceContext !== null && metadataTraceContext !== void 0 ? metadataTraceContext : getErrorTraceContext(error)
  };
};
var getRenderErrorEventPayload = exports.getRenderErrorEventPayload = function getRenderErrorEventPayload(fileAttributes, performanceAttributes, error, ssrReliability, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaCardRender',
    attributes: _objectSpread(_objectSpread({
      fileMimetype: fileAttributes.fileMimetype,
      fileAttributes: fileAttributes,
      performanceAttributes: performanceAttributes,
      status: 'fail'
    }, extractErrorInfo(error, metadataTraceContext)), {}, {
      request: getRenderErrorRequestMetadata(error),
      ssrReliability: ssrReliability,
      traceContext: traceContext
    })
  };
};
var getDownloadFailedEventPayload = exports.getDownloadFailedEventPayload = function getDownloadFailedEventPayload(fileAttributes, error, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaCardDownload',
    attributes: _objectSpread(_objectSpread({
      fileMimetype: fileAttributes.fileMimetype,
      fileAttributes: fileAttributes,
      status: 'fail'
    }, extractErrorInfo(error, metadataTraceContext)), {}, {
      request: getRenderErrorRequestMetadata(error),
      traceContext: traceContext
    })
  };
};
var getErrorEventPayload = exports.getErrorEventPayload = function getErrorEventPayload(cardStatus, fileAttributes, error, ssrReliability, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'nonCriticalFail',
    actionSubject: 'mediaCardRender',
    attributes: _objectSpread(_objectSpread({
      fileAttributes: fileAttributes,
      status: 'fail'
    }, extractErrorInfo(error, metadataTraceContext)), {}, {
      request: getRenderErrorRequestMetadata(error),
      ssrReliability: ssrReliability,
      traceContext: traceContext,
      cardStatus: cardStatus
    })
  };
};
var getRenderFailedFileStatusPayload = exports.getRenderFailedFileStatusPayload = function getRenderFailedFileStatusPayload(fileAttributes, performanceAttributes, ssrReliability, traceContext, metadataTraceContext) {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaCardRender',
    attributes: {
      fileMimetype: fileAttributes.fileMimetype,
      fileAttributes: fileAttributes,
      performanceAttributes: performanceAttributes,
      status: 'fail',
      failReason: 'failed-processing',
      ssrReliability: ssrReliability,
      traceContext: traceContext,
      metadataTraceContext: metadataTraceContext
    }
  };
};
function fireMediaCardEvent(payload, createAnalyticsEvent) {
  if (createAnalyticsEvent) {
    var event = createAnalyticsEvent((0, _analytics.sanitiseAnalyticsPayload)(payload));
    event.fire(_analytics.ANALYTICS_MEDIA_CHANNEL);
  }
}
var createAndFireMediaCardEvent = exports.createAndFireMediaCardEvent = function createAndFireMediaCardEvent(payload) {
  return (0, _analyticsNext.createAndFireEvent)(_analytics.ANALYTICS_MEDIA_CHANNEL)((0, _analytics.sanitiseAnalyticsPayload)(payload));
};