"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MockIntersectionObserver = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var noop = function noop() {};
var MockIntersectionObserver = exports.MockIntersectionObserver = /*#__PURE__*/function () {
  function MockIntersectionObserver() {
    (0, _classCallCheck2.default)(this, MockIntersectionObserver);
    (0, _defineProperty2.default)(this, "callback", noop);
  }
  return (0, _createClass2.default)(MockIntersectionObserver, [{
    key: "storeMockObserver",
    value: function storeMockObserver(_ref) {
      var observe = _ref.observe,
        disconnect = _ref.disconnect;
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var outerThis = this;
      this.mockObserver = /*#__PURE__*/(0, _createClass2.default)(function _class(callback) {
        (0, _classCallCheck2.default)(this, _class);
        (0, _defineProperty2.default)(this, "observe", observe !== null && observe !== void 0 ? observe : noop);
        (0, _defineProperty2.default)(this, "unobserve", noop);
        (0, _defineProperty2.default)(this, "disconnect", disconnect !== null && disconnect !== void 0 ? disconnect : noop);
        outerThis.callback = callback;
        outerThis.mockObserverInstance = this;
      });
    }
  }, {
    key: "addMockObserverToWindow",
    value: function addMockObserverToWindow() {
      this.originalObserver = window.IntersectionObserver;
      window.IntersectionObserver = this.mockObserver;
    }
  }, {
    key: "removeMockObserverFromWindow",
    value: function removeMockObserverFromWindow() {
      window.IntersectionObserver = this.originalObserver;
    }
  }, {
    key: "setup",
    value: function setup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.storeMockObserver(options);
      this.addMockObserverToWindow();
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      this.removeMockObserverFromWindow();
    }
  }, {
    key: "triggerIntersect",
    value: function triggerIntersect(entry) {
      var entries = [entry];
      this.callback(entries, this.mockObserverInstance);
    }
  }]);
}();