"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startUfoExperience = exports.shouldPerformanceBeSampled = exports.completeUfoExperience = exports.abortUfoExperience = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ufo = require("@atlaskit/ufo");
var _mediaCommon = require("@atlaskit/media-common");
var _uuidValidate = _interopRequireDefault(require("uuid-validate"));
var _analytics = require("./analytics");
var _errors = require("../errors");
var _mediaClient = require("@atlaskit/media-client");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var packageName = "@atlaskit/media-card";
var packageVersion = "79.2.0";
var SAMPLE_RATE = 0.05;
var concurrentExperience;
var getExperience = function getExperience(id) {
  if (!concurrentExperience) {
    var inlineExperience = {
      platform: {
        component: 'media-card'
      },
      type: _ufo.ExperienceTypes.Experience,
      performanceType: _ufo.ExperiencePerformanceTypes.InlineResult,
      featureFlags: (0, _mediaCommon.getFeatureFlagKeysAllProducts)()
    };
    concurrentExperience = new _ufo.ConcurrentExperience('media-card-render', inlineExperience);
  }
  return concurrentExperience.getInstance(id);
};
var shouldPerformanceBeSampled = exports.shouldPerformanceBeSampled = function shouldPerformanceBeSampled() {
  return (
    // We generate about 100M events UFOv1 events, we want to reduce this to about 5M as we can get the same info from there
    // Math.random() generates a random floating-point number between 0 (inclusive) and 1 (exclusive).
    // The condition Math.random() < SAMPLE_RATE (0.05) will be true approximately 5% of the time.
    Math.random() < SAMPLE_RATE
  );
};
var startUfoExperience = exports.startUfoExperience = function startUfoExperience(id) {
  getExperience(id).start();
};
var sanitiseFileAttributes = function sanitiseFileAttributes(fileAttributes) {
  /*
  	Allow external image mediaItemType as fileId
  	See ExternalImageIdentifier interface on platform/packages/media/media-client/src/identifier.ts
   */
  var sanitisedFileId = 'INVALID_FILE_ID';
  if (fileAttributes.fileId === 'external-image' || (0, _uuidValidate.default)(fileAttributes.fileId)) {
    sanitisedFileId = fileAttributes.fileId;
  }
  return _objectSpread(_objectSpread({}, fileAttributes), {}, {
    fileId: sanitisedFileId
  });
};
var completeUfoExperience = exports.completeUfoExperience = function completeUfoExperience(id, status, fileAttributes, fileStateFlags, ssrReliability) {
  var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _errors.MediaCardError('missing-error-data');
  switch (status) {
    case 'complete':
      succeedUfoExperience(id, {
        fileAttributes: fileAttributes,
        ssrReliability: ssrReliability,
        fileStateFlags: fileStateFlags
      });
      break;
    case 'failed-processing':
      failUfoExperience(id, {
        fileAttributes: fileAttributes,
        failReason: 'failed-processing',
        ssrReliability: ssrReliability,
        fileStateFlags: fileStateFlags
      });
      break;
    case 'error':
      failUfoExperience(id, _objectSpread(_objectSpread({
        fileAttributes: fileAttributes
      }, (0, _analytics.extractErrorInfo)(error)), {}, {
        request: (0, _analytics.getRenderErrorRequestMetadata)(error),
        ssrReliability: ssrReliability,
        fileStateFlags: fileStateFlags
      }));
      break;
  }
};
var getBasePayloadAttributes = function getBasePayloadAttributes() {
  return {
    packageName: packageName,
    packageVersion: packageVersion,
    mediaEnvironment: (0, _mediaClient.getMediaEnvironment)(),
    mediaRegion: (0, _mediaClient.getMediaRegion)()
  };
};
var succeedUfoExperience = function succeedUfoExperience(id, properties) {
  if (properties !== null && properties !== void 0 && properties.fileAttributes) {
    properties.fileAttributes = sanitiseFileAttributes(properties.fileAttributes);
  }
  getExperience(id).success({
    metadata: _objectSpread(_objectSpread({}, properties), getBasePayloadAttributes())
  });
};
var failUfoExperience = function failUfoExperience(id, properties) {
  if (properties !== null && properties !== void 0 && properties.fileAttributes) {
    properties.fileAttributes = sanitiseFileAttributes(properties.fileAttributes);
  }
  getExperience(id).failure({
    metadata: _objectSpread(_objectSpread({}, properties), getBasePayloadAttributes())
  });
};
var abortUfoExperience = exports.abortUfoExperience = function abortUfoExperience(id, properties) {
  // UFO won't abort if it's already in a final state (succeeded, failed, aborted, etc)
  if (properties !== null && properties !== void 0 && properties.fileAttributes) {
    properties.fileAttributes = sanitiseFileAttributes(properties.fileAttributes);
  }
  getExperience(id).abort({
    metadata: _objectSpread(_objectSpread({}, properties), getBasePayloadAttributes())
  });
};