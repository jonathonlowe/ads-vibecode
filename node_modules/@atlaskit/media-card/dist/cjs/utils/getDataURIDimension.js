"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveCardPreviewDimensions = exports.resolveCardPreviewDimension = exports.getRequestedDimensions = exports.getDataURIDimension = void 0;
var _isRetina = require("./isRetina");
var _getElementDimension = require("./getElementDimension");
var _cardDimensions = require("./cardDimensions");
var _isValidPercentageUnit = require("./isValidPercentageUnit");
var _containsPixelUnit = require("./containsPixelUnit");
/**
 * ************************************************
 * For Card v1
 * ************************************************
 */

var getDataURIDimension = exports.getDataURIDimension = function getDataURIDimension(dimension, options) {
  var retinaFactor = (0, _isRetina.isRetina)() ? 2 : 1;
  var dimensionValue = options.dimensions && options.dimensions[dimension] || '';
  if ((0, _isValidPercentageUnit.isValidPercentageUnit)(dimensionValue) && options.element) {
    return (0, _getElementDimension.getElementDimension)(options.element, dimension) * retinaFactor;
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue * retinaFactor;
  }
  if ((0, _containsPixelUnit.containsPixelUnit)("".concat(dimensionValue))) {
    return parseInt("".concat(dimensionValue), 10) * retinaFactor;
  }
  return _cardDimensions.defaultImageCardDimensions[dimension] * retinaFactor;
};
var getRequestedDimensions = exports.getRequestedDimensions = function getRequestedDimensions(options) {
  var width = getDataURIDimension('width', options);
  var height = getDataURIDimension('height', options);
  return {
    width: width,
    height: height
  };
};

/**
 * ************************************************
 * For Card v2
 * ************************************************
 */

// Same as getDataURIDimension but without Retina factor
var resolveCardPreviewDimension = exports.resolveCardPreviewDimension = function resolveCardPreviewDimension(dimensionName, _ref) {
  var dimensions = _ref.dimensions,
    element = _ref.element;
  var dimensionValue = (dimensions === null || dimensions === void 0 ? void 0 : dimensions[dimensionName]) || '';
  if ((0, _isValidPercentageUnit.isValidPercentageUnit)(dimensionValue) && element) {
    return (0, _getElementDimension.getElementDimension)(element, dimensionName);
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue;
  }
  if ((0, _containsPixelUnit.containsPixelUnit)("".concat(dimensionValue))) {
    return parseInt("".concat(dimensionValue), 10);
  }
  return _cardDimensions.defaultImageCardDimensions[dimensionName];
};
var resolveCardPreviewDimensions = exports.resolveCardPreviewDimensions = function resolveCardPreviewDimensions(options) {
  var width = resolveCardPreviewDimension('width', options);
  var height = resolveCardPreviewDimension('height', options);
  return {
    width: width,
    height: height
  };
};