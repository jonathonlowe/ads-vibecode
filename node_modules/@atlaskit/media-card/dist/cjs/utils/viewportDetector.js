"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewportDetector = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _interactionIgnore = _interopRequireDefault(require("@atlaskit/react-ufo/interaction-ignore"));
var _document = _interopRequireDefault(require("./document"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var ABS_VIEWPORT_ANCHOR_OFFSET_TOP = 900; //px

var createIntersectionObserverCallback = function createIntersectionObserverCallback(onVisible) {
  return function (entries, observer) {
    var _iterator = _createForOfIteratorHelper(entries),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;
        if (entry.isIntersecting) {
          onVisible();
          observer.disconnect();
          break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
};
var ViewportObserver = function ViewportObserver(_ref) {
  var onVisible = _ref.onVisible,
    cardEl = _ref.cardEl,
    children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isVisible = _useState2[0],
    setIsVisible = _useState2[1];
  var onVisibleCallback = (0, _react.useCallback)(function () {
    setIsVisible(true);
    onVisible();
  }, [onVisible]);
  (0, _react.useEffect)(function () {
    var intersectionObserver;
    try {
      intersectionObserver = new IntersectionObserver(createIntersectionObserverCallback(onVisibleCallback), {
        root: (0, _document.default)(),
        rootMargin: "".concat(ABS_VIEWPORT_ANCHOR_OFFSET_TOP, "px")
      });
    } catch (error) {
      intersectionObserver = new IntersectionObserver(createIntersectionObserverCallback(onVisibleCallback), {
        root: null,
        rootMargin: "".concat(ABS_VIEWPORT_ANCHOR_OFFSET_TOP, "px")
      });
    }
    cardEl && intersectionObserver.observe(cardEl);
    return function () {
      intersectionObserver.disconnect();
    };
  }, [cardEl, onVisibleCallback]);
  return /*#__PURE__*/_react.default.createElement(_interactionIgnore.default, {
    ignore: !isVisible
  }, children);
};
var ViewportDetector = exports.ViewportDetector = function ViewportDetector(_ref2) {
  var cardEl = _ref2.cardEl,
    onVisible = _ref2.onVisible,
    children = _ref2.children;
  if (typeof IntersectionObserver === 'undefined') {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  }
  return /*#__PURE__*/_react.default.createElement(ViewportObserver, {
    cardEl: cardEl,
    onVisible: onVisible
  }, children);
};