"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageLoadPrimaryReason = exports.ensureMediaCardError = exports.SsrPreviewError = exports.RemotePreviewError = exports.MediaCardError = exports.LocalPreviewError = exports.ImageLoadError = void 0;
exports.isImageLoadError = isImageLoadError;
exports.isLocalPreviewError = void 0;
exports.isMediaCardError = isMediaCardError;
exports.isUploadError = exports.isUnsupportedLocalPreviewError = exports.isRemotePreviewError = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Primary reason is logged through Data Portal.
 * Make sure all the values are whitelisted in Measure -> Event Regitry -> "mediaCardRender failed" event
 */
var MediaCardError = exports.MediaCardError = /*#__PURE__*/function (_Error) {
  function MediaCardError(primaryReason, secondaryError) {
    var _this;
    (0, _classCallCheck2.default)(this, MediaCardError);
    _this = _callSuper(this, MediaCardError, [primaryReason]);
    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    _this.primaryReason = primaryReason;
    _this.secondaryError = secondaryError;
    Object.setPrototypeOf(_this, (this instanceof MediaCardError ? this.constructor : void 0).prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(_this, this instanceof MediaCardError ? this.constructor : void 0);
    }
    return _this;
  }
  (0, _inherits2.default)(MediaCardError, _Error);
  return (0, _createClass2.default)(MediaCardError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
var LocalPreviewError = exports.LocalPreviewError = /*#__PURE__*/function (_MediaCardError) {
  function LocalPreviewError(primaryReason, secondaryError) {
    var _this2;
    (0, _classCallCheck2.default)(this, LocalPreviewError);
    _this2 = _callSuper(this, LocalPreviewError, [primaryReason, secondaryError]);
    _this2.primaryReason = primaryReason;
    _this2.secondaryError = secondaryError;
    return _this2;
  }
  (0, _inherits2.default)(LocalPreviewError, _MediaCardError);
  return (0, _createClass2.default)(LocalPreviewError);
}(MediaCardError);
var RemotePreviewError = exports.RemotePreviewError = /*#__PURE__*/function (_MediaCardError2) {
  function RemotePreviewError(primaryReason, secondaryError) {
    var _this3;
    (0, _classCallCheck2.default)(this, RemotePreviewError);
    _this3 = _callSuper(this, RemotePreviewError, [primaryReason, secondaryError]);
    _this3.primaryReason = primaryReason;
    _this3.secondaryError = secondaryError;
    return _this3;
  }
  (0, _inherits2.default)(RemotePreviewError, _MediaCardError2);
  return (0, _createClass2.default)(RemotePreviewError);
}(MediaCardError);
var SsrPreviewError = exports.SsrPreviewError = /*#__PURE__*/function (_MediaCardError3) {
  function SsrPreviewError(primaryReason, secondaryError) {
    var _this4;
    (0, _classCallCheck2.default)(this, SsrPreviewError);
    _this4 = _callSuper(this, SsrPreviewError, [primaryReason, secondaryError]);
    _this4.primaryReason = primaryReason;
    _this4.secondaryError = secondaryError;
    return _this4;
  }
  (0, _inherits2.default)(SsrPreviewError, _MediaCardError3);
  return (0, _createClass2.default)(SsrPreviewError);
}(MediaCardError);
var getImageLoadPrimaryReason = exports.getImageLoadPrimaryReason = function getImageLoadPrimaryReason(source) {
  switch (source) {
    case 'cache-remote':
      return 'cache-remote-uri';
    case 'cache-local':
      return 'cache-local-uri';
    case 'external':
      return 'external-uri';
    case 'local':
      return 'local-uri';
    case 'remote':
      return 'remote-uri';
    // This fail reason will come from a bug, most likely.
    default:
      return "unknown-uri";
  }
};
var ImageLoadError = exports.ImageLoadError = /*#__PURE__*/function (_MediaCardError4) {
  function ImageLoadError(source) {
    (0, _classCallCheck2.default)(this, ImageLoadError);
    return _callSuper(this, ImageLoadError, [getImageLoadPrimaryReason(source)]);
  }
  (0, _inherits2.default)(ImageLoadError, _MediaCardError4);
  return (0, _createClass2.default)(ImageLoadError);
}(MediaCardError);
function isMediaCardError(err) {
  return err instanceof MediaCardError;
}
var isLocalPreviewError = exports.isLocalPreviewError = function isLocalPreviewError(err) {
  return err instanceof LocalPreviewError;
};
var isRemotePreviewError = exports.isRemotePreviewError = function isRemotePreviewError(err) {
  return err instanceof RemotePreviewError;
};
var isUnsupportedLocalPreviewError = exports.isUnsupportedLocalPreviewError = function isUnsupportedLocalPreviewError(err) {
  return isMediaCardError(err) && err.primaryReason === 'local-preview-unsupported';
};
function isImageLoadError(err) {
  return err instanceof ImageLoadError;
}

// In a try/catch statement, the error caught is the type of unknown.
// We can use this helper to ensure that the error handled is the type of MediaCardError if unsure
// If updatePrimaryReason is true, if it's a MediaCardError already, it will update it's primary reason
var ensureMediaCardError = exports.ensureMediaCardError = function ensureMediaCardError(primaryReason, error, updatePrimaryReason) {
  if (isMediaCardError(error)) {
    if (updatePrimaryReason && error.primaryReason !== primaryReason) {
      return new MediaCardError(primaryReason, error.secondaryError);
    }
    return error;
  }
  return new MediaCardError(primaryReason, error);
};
var isUploadError = exports.isUploadError = function isUploadError(error) {
  return error && error.primaryReason === 'upload';
};