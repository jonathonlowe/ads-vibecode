"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaInlineCardInternal = exports.MediaInlineCard = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _mediaClient = require("@atlaskit/media-client");
var _mediaUi = require("@atlaskit/media-ui");
var _formatDate = require("@atlaskit/media-ui/formatDate");
var _mimeTypeIcon = require("@atlaskit/media-ui/mime-type-icon");
var _mediaViewer = require("@atlaskit/media-viewer");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactIntlNext = require("react-intl-next");
var _errors = require("../errors");
var _analytics = require("../utils/analytics");
var _mediaInlineCardAnalytics = require("./mediaInlineCardAnalytics");
var _mediaClientReact = require("@atlaskit/media-client-react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// UI component which renders an inline link in the appropiate state based on a media file
var MediaInlineCardInternal = exports.MediaInlineCardInternal = function MediaInlineCardInternal(_ref) {
  var mediaClient = _ref.mediaClient,
    identifier = _ref.identifier,
    shouldOpenMediaViewer = _ref.shouldOpenMediaViewer,
    shouldDisplayToolTip = _ref.shouldDisplayToolTip,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    mediaViewerItems = _ref.mediaViewerItems,
    intl = _ref.intl,
    viewerOptions = _ref.viewerOptions;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    fileState = _useState2[0],
    setFileState = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    subscribeError = _useState4[0],
    setSubscribeError = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isSucceededEventSent = _useState6[0],
    setIsSucceededEventSent = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isFailedEventSent = _useState8[0],
    setIsFailedEventSent = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isMediaViewerVisible = _useState10[0],
    setMediaViewerVisible = _useState10[1];
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var fireFailedOperationalEvent = function fireFailedOperationalEvent() {
    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _errors.MediaCardError('missing-error-data');
    var failReason = arguments.length > 1 ? arguments[1] : undefined;
    var payload = failReason ? (0, _mediaInlineCardAnalytics.getFailedProcessingStatusPayload)(identifier.id, fileState) : (0, _mediaInlineCardAnalytics.getErrorStatusPayload)(identifier.id, error, fileState);
    setIsFailedEventSent(true);
    (0, _analytics.fireMediaCardEvent)(payload, createAnalyticsEvent);
  };
  var fireSucceededOperationalEvent = function fireSucceededOperationalEvent() {
    var payload = (0, _mediaInlineCardAnalytics.getSucceededStatusPayload)(fileState);
    setIsSucceededEventSent(true);
    (0, _analytics.fireMediaCardEvent)(payload, createAnalyticsEvent);
  };
  var _useCopyIntent = (0, _mediaClientReact.useCopyIntent)(identifier.id, {
      collectionName: identifier.collectionName
    }),
    copyNodeRef = _useCopyIntent.copyNodeRef;
  var onMediaInlineCardClick = function onMediaInlineCardClick(event) {
    if (onClick) {
      var inlineCardEvent = {
        event: event,
        mediaItemDetails: identifier
      };
      onClick(inlineCardEvent);
    }
    if (shouldOpenMediaViewer) {
      setMediaViewerVisible(true);
    }
  };
  var onMediaViewerClose = function onMediaViewerClose() {
    return setMediaViewerVisible(false);
  };
  var renderMediaViewer = function renderMediaViewer() {
    if (isMediaViewerVisible) {
      return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_react.default.createElement(_mediaViewer.MediaViewer, {
        collectionName: identifier.collectionName || '',
        items: mediaViewerItems || [],
        mediaClientConfig: mediaClient.mediaClientConfig,
        selectedItem: identifier,
        onClose: onMediaViewerClose,
        viewerOptions: viewerOptions
      }), document.body);
    }
    return null;
  };
  var renderContent = function renderContent(children) {
    return intl ? children : /*#__PURE__*/_react.default.createElement(_reactIntlNext.IntlProvider, {
      locale: "en"
    }, children);
  };
  var defaultIntl = (0, _reactIntlNext.createIntl)({
    locale: 'en'
  });
  (0, _react.useEffect)(function () {
    var subscription = mediaClient.file.getFileState(identifier.id, {
      collectionName: identifier.collectionName
    }).subscribe({
      next: function next(fileState) {
        setFileState(fileState);
        setSubscribeError(undefined);
      },
      error: function error(e) {
        setSubscribeError(e);
      }
    });
    return function () {
      subscription === null || subscription === void 0 || subscription.unsubscribe();
    };
  }, [identifier.collectionName, identifier.id, mediaClient.file]);
  if (subscribeError) {
    var errorMessage = (fileState === null || fileState === void 0 ? void 0 : fileState.status) === 'uploading' ? _mediaUi.messages.failed_to_upload : _mediaUi.messages.couldnt_load_file;
    var errorReason = (fileState === null || fileState === void 0 ? void 0 : fileState.status) === 'uploading' ? 'upload' : 'metadata-fetch';
    !isFailedEventSent && fireFailedOperationalEvent(new _errors.MediaCardError(errorReason, subscribeError));
    return /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardErroredView, {
      innerRef: copyNodeRef,
      message: (intl || defaultIntl).formatMessage(errorMessage),
      isSelected: isSelected
    });
  }
  if ((fileState === null || fileState === void 0 ? void 0 : fileState.status) === 'error') {
    var error = new _errors.MediaCardError('error-file-state', (0, _mediaClient.toCommonMediaClientError)(fileState));
    !isFailedEventSent && fireFailedOperationalEvent(error);
    return /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardErroredView, {
      innerRef: copyNodeRef,
      message: (intl || defaultIntl).formatMessage(_mediaUi.messages.couldnt_load_file),
      isSelected: isSelected
    });
  }

  // Empty file handling
  if (fileState && !fileState.name) {
    var _error = new _errors.MediaCardError('metadata-fetch', new _mediaClient.FileFetcherError('emptyFileName', {
      id: fileState.id
    }));
    !isFailedEventSent && fireFailedOperationalEvent(_error);
    return /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardErroredView, {
      innerRef: copyNodeRef,
      message: (intl || defaultIntl).formatMessage(_mediaUi.messages.couldnt_load_file),
      isSelected: isSelected
    });
  }
  if ((fileState === null || fileState === void 0 ? void 0 : fileState.status) === 'uploading') {
    return /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardLoadingView, {
      innerRef: copyNodeRef,
      message: fileState.name,
      isSelected: isSelected
    });
  }
  if (!fileState) {
    return /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardLoadingView, {
      innerRef: copyNodeRef,
      message: (intl || defaultIntl).formatMessage(_mediaUi.messages.loading_file),
      isSelected: isSelected
    });
  }

  // Failed to process should still display the loaded view and enable Media Client to download
  if ((fileState === null || fileState === void 0 ? void 0 : fileState.status) === 'failed-processing') {
    !isFailedEventSent && fireFailedOperationalEvent(undefined, 'failed-processing');
  }
  var mediaType = fileState.mediaType,
    name = fileState.name,
    mimeType = fileState.mimeType;
  var linkIcon = /*#__PURE__*/_react.default.createElement(_mimeTypeIcon.MimeTypeIcon, {
    testId: 'media-inline-card-file-type-icon',
    size: "small",
    mediaType: mediaType,
    mimeType: mimeType,
    name: name
  });
  var mediaViewer = renderMediaViewer();
  var formattedDate;
  if (fileState.createdAt) {
    var _ref2 = intl || {
        locale: 'en'
      },
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === void 0 ? 'en' : _ref2$locale;
    formattedDate = (0, _formatDate.formatDate)(fileState.createdAt, locale);
  }
  if (fileState.status === 'processed' && !isSucceededEventSent) {
    fireSucceededOperationalEvent();
  }
  if (shouldDisplayToolTip === undefined || shouldDisplayToolTip === true) {
    return renderContent( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      content: formattedDate,
      tag: "span"
    }, /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardLoadedView, {
      innerRef: copyNodeRef,
      icon: linkIcon,
      title: name,
      onClick: onMediaInlineCardClick,
      isSelected: isSelected
    })), mediaViewer));
  } else {
    return renderContent( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_mediaUi.MediaInlineCardLoadedView, {
      innerRef: copyNodeRef,
      icon: linkIcon,
      title: name,
      onClick: onMediaInlineCardClick,
      isSelected: isSelected
    }), mediaViewer));
  }
};
var MediaInlineCard = exports.MediaInlineCard = (0, _reactIntlNext.injectIntl)(MediaInlineCardInternal, {
  enforceContext: false
});