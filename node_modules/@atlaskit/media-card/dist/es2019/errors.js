/**
 * Primary reason is logged through Data Portal.
 * Make sure all the values are whitelisted in Measure -> Event Regitry -> "mediaCardRender failed" event
 */

export class MediaCardError extends Error {
  constructor(primaryReason, secondaryError) {
    super(primaryReason);
    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
    Object.setPrototypeOf(this, new.target.prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(this, new.target);
    }
  }
}
export class LocalPreviewError extends MediaCardError {
  constructor(primaryReason, secondaryError) {
    super(primaryReason, secondaryError);
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
  }
}
export class RemotePreviewError extends MediaCardError {
  constructor(primaryReason, secondaryError) {
    super(primaryReason, secondaryError);
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
  }
}
export class SsrPreviewError extends MediaCardError {
  constructor(primaryReason, secondaryError) {
    super(primaryReason, secondaryError);
    this.primaryReason = primaryReason;
    this.secondaryError = secondaryError;
  }
}
export const getImageLoadPrimaryReason = source => {
  switch (source) {
    case 'cache-remote':
      return 'cache-remote-uri';
    case 'cache-local':
      return 'cache-local-uri';
    case 'external':
      return 'external-uri';
    case 'local':
      return 'local-uri';
    case 'remote':
      return 'remote-uri';
    // This fail reason will come from a bug, most likely.
    default:
      return `unknown-uri`;
  }
};
export class ImageLoadError extends MediaCardError {
  constructor(source) {
    super(getImageLoadPrimaryReason(source));
  }
}
export function isMediaCardError(err) {
  return err instanceof MediaCardError;
}
export const isLocalPreviewError = err => err instanceof LocalPreviewError;
export const isRemotePreviewError = err => err instanceof RemotePreviewError;
export const isUnsupportedLocalPreviewError = err => isMediaCardError(err) && err.primaryReason === 'local-preview-unsupported';
export function isImageLoadError(err) {
  return err instanceof ImageLoadError;
}

// In a try/catch statement, the error caught is the type of unknown.
// We can use this helper to ensure that the error handled is the type of MediaCardError if unsure
// If updatePrimaryReason is true, if it's a MediaCardError already, it will update it's primary reason
export const ensureMediaCardError = (primaryReason, error, updatePrimaryReason) => {
  if (isMediaCardError(error)) {
    if (updatePrimaryReason && error.primaryReason !== primaryReason) {
      return new MediaCardError(primaryReason, error.secondaryError);
    }
    return error;
  }
  return new MediaCardError(primaryReason, error);
};
export const isUploadError = error => error && error.primaryReason === 'upload';