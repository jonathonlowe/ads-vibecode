import React, { useEffect, useCallback, useState } from 'react';
import UFOInteractionIgnore from '@atlaskit/react-ufo/interaction-ignore';
import getDocument from './document';
const ABS_VIEWPORT_ANCHOR_OFFSET_TOP = 900; //px

const createIntersectionObserverCallback = onVisible => (entries, observer) => {
  for (let entry of entries) {
    if (entry.isIntersecting) {
      onVisible();
      observer.disconnect();
      break;
    }
  }
};
const ViewportObserver = ({
  onVisible,
  cardEl,
  children
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const onVisibleCallback = useCallback(() => {
    setIsVisible(true);
    onVisible();
  }, [onVisible]);
  useEffect(() => {
    let intersectionObserver;
    try {
      intersectionObserver = new IntersectionObserver(createIntersectionObserverCallback(onVisibleCallback), {
        root: getDocument(),
        rootMargin: `${ABS_VIEWPORT_ANCHOR_OFFSET_TOP}px`
      });
    } catch (error) {
      intersectionObserver = new IntersectionObserver(createIntersectionObserverCallback(onVisibleCallback), {
        root: null,
        rootMargin: `${ABS_VIEWPORT_ANCHOR_OFFSET_TOP}px`
      });
    }
    cardEl && intersectionObserver.observe(cardEl);
    return () => {
      intersectionObserver.disconnect();
    };
  }, [cardEl, onVisibleCallback]);
  return /*#__PURE__*/React.createElement(UFOInteractionIgnore, {
    ignore: !isVisible
  }, children);
};
export const ViewportDetector = ({
  cardEl,
  onVisible,
  children
}) => {
  if (typeof IntersectionObserver === 'undefined') {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  return /*#__PURE__*/React.createElement(ViewportObserver, {
    cardEl: cardEl,
    onVisible: onVisible
  }, children);
};