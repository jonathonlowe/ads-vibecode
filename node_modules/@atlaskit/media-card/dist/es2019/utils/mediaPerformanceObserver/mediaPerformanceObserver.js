import { ANALYTICS_MEDIA_CHANNEL } from '@atlaskit/media-common/analytics';
import { fg } from '@atlaskit/platform-feature-flags';
import { createMediaDurationMetrics, createUfoDurationMetrics } from './durationMetrics';
import { sendUfoDurationMetrics } from './ufo';
const MEDIA_CARD_PERF_STATE_KEY = '__mediaCardPerfState_asflkajsdflja';
const urlRegex = /https:\/\/(?:media\.(?:dev|staging|prod)\.atl-paas\.net|api\.media\.atlassian\.com|media-cdn(?:\.stg\.|\.)atlassian\.com)\/file\/([^/]+)\/image.*[?&]source=mediaCard/;
const clientIdParamRegex = /[?&]clientId=([^&]+)/;
const ssrParamRegex = /[?&]token=([^&]+)/;
const createAndGetResourceObserver = () => {
  return new PerformanceObserver(list => {
    list.getEntries().forEach(baseEntry => {
      var _window$MEDIA_CARD_PE;
      const entry = baseEntry;
      const matchFileId = entry.name.match(urlRegex);
      const matchClientId = entry.name.match(clientIdParamRegex);
      const matchSSR = entry.name.match(ssrParamRegex);
      if (matchFileId && (_window$MEDIA_CARD_PE = window[MEDIA_CARD_PERF_STATE_KEY]) !== null && _window$MEDIA_CARD_PE !== void 0 && _window$MEDIA_CARD_PE.mediaCardCreateAnalyticsEvent) {
        const fileId = matchFileId[1];
        const clientId = matchClientId === null || matchClientId === void 0 ? void 0 : matchClientId[1];
        const ssr = matchSSR ? 'server' : undefined;
        const navigationTime = performance.getEntriesByType('navigation')[0];
        const mediaDurationMetrics = createMediaDurationMetrics(entry, navigationTime);
        const event = window[MEDIA_CARD_PERF_STATE_KEY].mediaCardCreateAnalyticsEvent({
          eventType: 'operational',
          action: 'succeeded',
          actionSubject: 'mediaCardPerfObserver',
          attributes: {
            ssr,
            fileId: fileId,
            mediaClientId: clientId,
            featureFlags: {
              'media-cdn-single-host': fg('platform_media_cdn_single_host')
            },
            ...mediaDurationMetrics
          }
        });
        event.fire(ANALYTICS_MEDIA_CHANNEL);
        if (fg('platform_media_card_ufo_network_metrics')) {
          const ufoDurationMetrics = createUfoDurationMetrics(entry, navigationTime);
          const endpointName = 'image';
          sendUfoDurationMetrics(ufoDurationMetrics, endpointName);
        }
      }
    });
  });
};
export const setAnalyticsContext = newAnalyticsContext => {
  if (!window[MEDIA_CARD_PERF_STATE_KEY]) {
    window[MEDIA_CARD_PERF_STATE_KEY] = {};
  }
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardCreateAnalyticsEvent = newAnalyticsContext;
};
const isDefinedPerformanceObserver = () => typeof window['PerformanceObserver'] !== 'undefined';
export const startResourceObserver = () => {
  var _window$MEDIA_CARD_PE2;
  if (!isDefinedPerformanceObserver()) {
    return;
  }
  if ((_window$MEDIA_CARD_PE2 = window[MEDIA_CARD_PERF_STATE_KEY]) !== null && _window$MEDIA_CARD_PE2 !== void 0 && _window$MEDIA_CARD_PE2.mediaCardPerfObserver) {
    return;
  }
  if (!window[MEDIA_CARD_PERF_STATE_KEY]) {
    window[MEDIA_CARD_PERF_STATE_KEY] = {};
  }
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardPerfObserver = createAndGetResourceObserver();
  window[MEDIA_CARD_PERF_STATE_KEY].mediaCardPerfObserver.observe({
    type: 'resource',
    buffered: true
  });
};