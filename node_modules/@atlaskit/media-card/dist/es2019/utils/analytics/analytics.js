import { isCommonMediaClientError } from '@atlaskit/media-client';
import { ANALYTICS_MEDIA_CHANNEL, sanitiseAnalyticsPayload } from '@atlaskit/media-common/analytics';
import { createAndFireEvent } from '@atlaskit/analytics-next';
export const getFileAttributes = (metadata, fileStatus) => ({
  fileMediatype: metadata.mediaType,
  fileMimetype: metadata.mimeType,
  fileId: metadata.id,
  fileSize: metadata.size,
  fileStatus
});
export const getRenderSucceededEventPayload = (fileAttributes, performanceAttributes, ssrReliability, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'succeeded',
  actionSubject: 'mediaCardRender',
  attributes: {
    fileMimetype: fileAttributes.fileMimetype,
    fileAttributes,
    performanceAttributes,
    status: 'success',
    ssrReliability,
    traceContext,
    metadataTraceContext
  }
});
export const getDownloadSucceededEventPayload = (fileAttributes, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'succeeded',
  actionSubject: 'mediaCardDownload',
  attributes: {
    fileMimetype: fileAttributes.fileMimetype,
    fileAttributes,
    status: 'success',
    traceContext,
    metadataTraceContext
  }
});
export const getCacheHitEventPayload = cardPreviewAttributes => ({
  eventType: 'operational',
  action: 'cache-hit',
  actionSubject: 'mediaCardCache',
  attributes: {
    cardPreviewAttributes
  }
});
export const getRemoteSuccessEventPayload = cardPreviewAttributes => ({
  eventType: 'operational',
  action: 'Remote-success',
  actionSubject: 'mediaCardCache',
  attributes: {
    cardPreviewAttributes
  }
});
export const getRenderFailedExternalUriPayload = (fileAttributes, performanceAttributes) => ({
  eventType: 'operational',
  action: 'failed',
  actionSubject: 'mediaCardRender',
  attributes: {
    fileAttributes,
    performanceAttributes,
    status: 'fail',
    failReason: 'external-uri'
  }
});
export const getRenderErrorFailReason = error => {
  return error.primaryReason || 'nativeError';
};
export const getRenderErrorErrorReason = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.reason;
  }
  return 'nativeError';
};
export const getRenderErrorErrorDetail = error => {
  var _secondaryError$inner;
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError) && (_secondaryError$inner = secondaryError.innerError) !== null && _secondaryError$inner !== void 0 && _secondaryError$inner.message) {
    var _secondaryError$inner2;
    return (_secondaryError$inner2 = secondaryError.innerError) === null || _secondaryError$inner2 === void 0 ? void 0 : _secondaryError$inner2.message;
  }
  if (secondaryError instanceof Error) {
    return secondaryError.message;
  }
  return error.message;
};
export const getErrorTraceContext = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    var _secondaryError$metad;
    return (_secondaryError$metad = secondaryError.metadata) === null || _secondaryError$metad === void 0 ? void 0 : _secondaryError$metad.traceContext;
  }
};
export const getRenderErrorRequestMetadata = error => {
  const {
    secondaryError
  } = error;
  if (isCommonMediaClientError(secondaryError)) {
    return secondaryError.metadata;
  }
};
export const extractErrorInfo = (error, metadataTraceContext) => {
  return {
    failReason: getRenderErrorFailReason(error),
    error: getRenderErrorErrorReason(error),
    errorDetail: getRenderErrorErrorDetail(error),
    metadataTraceContext: metadataTraceContext !== null && metadataTraceContext !== void 0 ? metadataTraceContext : getErrorTraceContext(error)
  };
};
export const getRenderErrorEventPayload = (fileAttributes, performanceAttributes, error, ssrReliability, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'failed',
  actionSubject: 'mediaCardRender',
  attributes: {
    fileMimetype: fileAttributes.fileMimetype,
    fileAttributes,
    performanceAttributes,
    status: 'fail',
    ...extractErrorInfo(error, metadataTraceContext),
    request: getRenderErrorRequestMetadata(error),
    ssrReliability,
    traceContext
  }
});
export const getDownloadFailedEventPayload = (fileAttributes, error, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'failed',
  actionSubject: 'mediaCardDownload',
  attributes: {
    fileMimetype: fileAttributes.fileMimetype,
    fileAttributes,
    status: 'fail',
    ...extractErrorInfo(error, metadataTraceContext),
    request: getRenderErrorRequestMetadata(error),
    traceContext
  }
});
export const getErrorEventPayload = (cardStatus, fileAttributes, error, ssrReliability, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'nonCriticalFail',
  actionSubject: 'mediaCardRender',
  attributes: {
    fileAttributes,
    status: 'fail',
    ...extractErrorInfo(error, metadataTraceContext),
    request: getRenderErrorRequestMetadata(error),
    ssrReliability,
    traceContext,
    cardStatus
  }
});
export const getRenderFailedFileStatusPayload = (fileAttributes, performanceAttributes, ssrReliability, traceContext, metadataTraceContext) => ({
  eventType: 'operational',
  action: 'failed',
  actionSubject: 'mediaCardRender',
  attributes: {
    fileMimetype: fileAttributes.fileMimetype,
    fileAttributes,
    performanceAttributes,
    status: 'fail',
    failReason: 'failed-processing',
    ssrReliability,
    traceContext,
    metadataTraceContext
  }
});
export function fireMediaCardEvent(payload, createAnalyticsEvent) {
  if (createAnalyticsEvent) {
    const event = createAnalyticsEvent(sanitiseAnalyticsPayload(payload));
    event.fire(ANALYTICS_MEDIA_CHANNEL);
  }
}
export const createAndFireMediaCardEvent = payload => {
  return createAndFireEvent(ANALYTICS_MEDIA_CHANNEL)(sanitiseAnalyticsPayload(payload));
};