import { isRetina } from './isRetina';
import { getElementDimension } from './getElementDimension';
import { defaultImageCardDimensions } from './cardDimensions';
import { isValidPercentageUnit } from './isValidPercentageUnit';
import { containsPixelUnit } from './containsPixelUnit';

/**
 * ************************************************
 * For Card v1
 * ************************************************
 */

export const getDataURIDimension = (dimension, options) => {
  const retinaFactor = isRetina() ? 2 : 1;
  const dimensionValue = options.dimensions && options.dimensions[dimension] || '';
  if (isValidPercentageUnit(dimensionValue) && options.element) {
    return getElementDimension(options.element, dimension) * retinaFactor;
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue * retinaFactor;
  }
  if (containsPixelUnit(`${dimensionValue}`)) {
    return parseInt(`${dimensionValue}`, 10) * retinaFactor;
  }
  return defaultImageCardDimensions[dimension] * retinaFactor;
};
export const getRequestedDimensions = options => {
  const width = getDataURIDimension('width', options);
  const height = getDataURIDimension('height', options);
  return {
    width,
    height
  };
};

/**
 * ************************************************
 * For Card v2
 * ************************************************
 */

// Same as getDataURIDimension but without Retina factor
export const resolveCardPreviewDimension = (dimensionName, {
  dimensions,
  element
}) => {
  const dimensionValue = (dimensions === null || dimensions === void 0 ? void 0 : dimensions[dimensionName]) || '';
  if (isValidPercentageUnit(dimensionValue) && element) {
    return getElementDimension(element, dimensionName);
  }
  if (typeof dimensionValue === 'number') {
    return dimensionValue;
  }
  if (containsPixelUnit(`${dimensionValue}`)) {
    return parseInt(`${dimensionValue}`, 10);
  }
  return defaultImageCardDimensions[dimensionName];
};
export const resolveCardPreviewDimensions = options => {
  const width = resolveCardPreviewDimension('width', options);
  const height = resolveCardPreviewDimension('height', options);
  return {
    width,
    height
  };
};