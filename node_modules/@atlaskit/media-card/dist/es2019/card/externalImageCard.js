import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { globalMediaEventEmitter } from '@atlaskit/media-client';
import { getRandomHex } from '@atlaskit/media-common';
import { MediaViewer } from '@atlaskit/media-viewer';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import ReactDOM from 'react-dom';
import { ImageLoadError } from '../errors';
import { generateUniqueId } from '../utils/generateUniqueId';
import { getMediaCardCursor } from '../utils/getMediaCardCursor';
import { abortUfoExperience, completeUfoExperience, startUfoExperience, shouldPerformanceBeSampled } from '../utils/ufoExperiences';
import { useCurrentValueRef } from '../utils/useCurrentValueRef';
import { getDefaultCardDimensions } from '../utils/cardDimensions';
import { usePrevious } from '../utils/usePrevious';
import { fireOperationalEvent } from './cardAnalytics';
import { CardView } from './cardView';
import { performanceNow } from './performance';
export const ExternalImageCard = ({
  mediaClient,
  appearance = 'auto',
  resizeMode = 'crop',
  disableOverlay = false,
  // Media Feature Flag defaults are defined in @atlaskit/media-common
  featureFlags = {},
  identifier,
  dimensions,
  contextId,
  alt,
  actions,
  shouldOpenMediaViewer,
  selectable,
  selected,
  testId,
  titleBoxBgColor,
  titleBoxIcon,
  shouldHideTooltip,
  mediaViewerItems,
  onClick,
  onMouseEnter
}) => {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const cardDimensions = dimensions || getDefaultCardDimensions(appearance);
  const internalOccurrenceKey = useMemo(() => generateUniqueId(), []);
  const timeElapsedTillCommenced = useMemo(() => performanceNow(), []);

  // Generate unique traceId for file
  const traceContext = useMemo(() => ({
    traceId: getRandomHex(8)
  }), []);
  const fileStateFlagsRef = useRef({
    wasStatusUploading: false,
    wasStatusProcessing: false
  });
  const startUfoExperienceRef = useCurrentValueRef(() => {
    if (shouldSendPerformanceEventRef.current) {
      startUfoExperience(internalOccurrenceKey);
    }
  });
  const [status, setStatus] = useState('loading-preview');
  const cardPreview = useMemo(() => ({
    dataURI: identifier.dataURI,
    orientation: 1,
    source: 'external'
  }), [identifier.dataURI]);
  const metadata = {
    id: identifier.mediaItemType,
    name: identifier.name || identifier.dataURI,
    mediaType: 'image'
  };
  const fileAttributes = {
    fileMediatype: 'image',
    fileId: metadata.id
  };

  // for analytics
  const ssrReliability = {
    server: {
      status: 'unknown'
    },
    client: {
      status: 'unknown'
    }
  };
  const [previewDidRender, setPreviewDidRender] = useState(false);
  const [error, setError] = useState();
  const [mediaViewerSelectedItem, setMediaViewerSelectedItem] = useState(null);
  const shouldSendPerformanceEventRef = useRef(shouldPerformanceBeSampled());

  //----------------------------------------------------------------//
  //---------------------- Analytics  ------------------------------//
  //----------------------------------------------------------------//

  const fireOperationalEventRef = useCurrentValueRef(() => {
    const timeElapsedTillEvent = performanceNow();
    const durationSinceCommenced = timeElapsedTillEvent - timeElapsedTillCommenced;
    const performanceAttributes = {
      overall: {
        durationSincePageStart: timeElapsedTillEvent,
        durationSinceCommenced
      }
    };
    createAnalyticsEvent && fireOperationalEvent(createAnalyticsEvent, status, fileAttributes, performanceAttributes, ssrReliability, error, traceContext, undefined);
    shouldSendPerformanceEventRef.current && completeUfoExperience(internalOccurrenceKey, status, fileAttributes, fileStateFlagsRef.current, ssrReliability, error);
  });
  const fireAbortedEventRef = useCurrentValueRef(() => {
    // UFO won't abort if it's already in a final state (succeeded, failed, aborted, etc)
    if (shouldSendPerformanceEventRef.current) {
      abortUfoExperience(internalOccurrenceKey, {
        fileAttributes,
        fileStateFlags: fileStateFlagsRef === null || fileStateFlagsRef === void 0 ? void 0 : fileStateFlagsRef.current,
        ssrReliability: ssrReliability
      });
    }
  });

  //----------------------------------------------------------------//
  //------------------------ useEffects ----------------------------//
  //----------------------------------------------------------------//

  useEffect(() => {
    startUfoExperienceRef.current();
  }, [startUfoExperienceRef]);
  const prevStatus = usePrevious(status);
  useEffect(() => {
    if (prevStatus !== undefined && status !== prevStatus) {
      fireOperationalEventRef.current();
    }
  }, [fireOperationalEventRef, prevStatus, status]);
  useEffect(() => {
    if (previewDidRender && status === 'loading-preview') {
      setStatus('complete');
    }
  }, [previewDidRender, status]);
  useEffect(() => {
    return () => {
      // eslint-disable-next-line react-hooks/exhaustive-deps
      fireAbortedEventRef.current();
    };
  }, [fireAbortedEventRef]);

  //----------------------------------------------------------------//
  //---------------------- Render Functions ------------------------//
  //----------------------------------------------------------------//

  const renderMediaViewer = () => {
    if (!mediaViewerSelectedItem) {
      return;
    }
    return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(MediaViewer, {
      collectionName: '',
      items: mediaViewerItems || [],
      mediaClientConfig: mediaClient.config,
      selectedItem: mediaViewerSelectedItem,
      onClose: () => {
        setMediaViewerSelectedItem(null);
      },
      contextId: contextId,
      featureFlags: featureFlags
    }), document.body);
  };

  //----------------------------------------------------------------//
  //-------------------------- RENDER ------------------------------//
  //----------------------------------------------------------------//

  const mediaCardCursor = getMediaCardCursor(false, !!shouldOpenMediaViewer, status === 'error', !!cardPreview, metadata.mediaType);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardView, {
    identifier: identifier,
    status: status,
    error: error,
    mediaItemType: identifier.mediaItemType,
    metadata: metadata,
    cardPreview: cardPreview,
    alt: alt,
    resizeMode: resizeMode,
    dimensions: cardDimensions,
    actions: actions,
    selectable: selectable,
    selected: selected,
    onClick: (event, analyticsEvent) => {
      if (onClick) {
        const cardEvent = {
          event,
          mediaItemDetails: metadata
        };
        onClick(cardEvent, analyticsEvent);
      }
      if (shouldOpenMediaViewer) {
        setMediaViewerSelectedItem({
          mediaItemType: 'external-image',
          dataURI: identifier.dataURI,
          name: identifier.name
        });
      }
    },
    onMouseEnter: event => {
      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({
        event,
        mediaItemDetails: metadata
      });
    },
    disableOverlay: disableOverlay,
    onDisplayImage: () => {
      const payloadPart = {
        fileId: identifier.dataURI,
        isUserCollection: false
      };
      globalMediaEventEmitter.emit('media-viewed', {
        viewingLevel: 'minimal',
        ...payloadPart
      });
    },
    testId: testId,
    titleBoxBgColor: titleBoxBgColor,
    titleBoxIcon: titleBoxIcon,
    onImageError: newCardPreview => {
      // If the dataURI has been replaced, we can dismiss this error
      if ((newCardPreview === null || newCardPreview === void 0 ? void 0 : newCardPreview.dataURI) !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
        return;
      }
      const error = new ImageLoadError(newCardPreview === null || newCardPreview === void 0 ? void 0 : newCardPreview.source);
      setStatus('error');
      setError(error);
    },
    onImageLoad: newCardPreview => {
      // If the dataURI has been replaced, we can dismiss this callback
      if ((newCardPreview === null || newCardPreview === void 0 ? void 0 : newCardPreview.dataURI) !== (cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI)) {
        return;
      }
      setPreviewDidRender(true);
    },
    mediaCardCursor: mediaCardCursor,
    shouldHideTooltip: shouldHideTooltip
  }), mediaViewerSelectedItem ? renderMediaViewer() : null);
};