/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { useMemo } from 'react';
import { MediaCardError } from '../../errors';
import { useResolveSvg, MediaSVGError } from '@atlaskit/media-svg';
import { ImageRenderer } from '../ui/imageRenderer/imageRendererV2';
const getErrorReason = svgReason => {
  switch (svgReason) {
    case 'img-error':
      return 'svg-img-error';
    case 'binary-fetch':
      return 'svg-binary-fetch';
    case 'blob-to-datauri':
      return 'svg-blob-to-datauri';
    default:
      return 'svg-unknown-error';
  }
};
export const SvgView = ({
  identifier,
  resizeMode,
  onLoad,
  onError,
  wrapperRef,
  alt
}) => {
  const onSvgError = err => {
    const error = new MediaCardError(getErrorReason(err.primaryReason), err.secondaryError);
    onError === null || onError === void 0 ? void 0 : onError(error);
  };
  const {
    svgUrl,
    source
  } = useResolveSvg(identifier, onSvgError);
  const cardPreview = useMemo(() => svgUrl && source ? {
    dataURI: svgUrl,
    source
  } : undefined, [svgUrl, source]);
  return cardPreview ? jsx(ImageRenderer, {
    testId: "media-card-svg",
    identifier: identifier,
    cardPreview: cardPreview,
    alt: alt,
    resizeMode: resizeMode,
    onImageLoad: onLoad,
    onImageError: () => {
      onSvgError(new MediaSVGError('img-error'));
    },
    wrapperRef: wrapperRef,
    mediaType: "image",
    useWhiteBackground: true
  }) : null;
};