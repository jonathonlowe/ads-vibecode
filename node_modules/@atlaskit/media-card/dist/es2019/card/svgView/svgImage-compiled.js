/* svgImage-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./svgImage-compiled.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { MediaCardError } from '../../errors';
import { calculateSvgDimensions } from './helpers';
import { useResolveSvg, MediaSVGError } from '@atlaskit/media-svg';
const getErrorReason = svgReason => {
  switch (svgReason) {
    case 'img-error':
      return 'svg-img-error';
    case 'binary-fetch':
      return 'svg-binary-fetch';
    case 'blob-to-datauri':
      return 'svg-blob-to-datauri';
    default:
      return 'svg-unknown-error';
  }
};
const svgRendererStyles = null;
const svgRendererMaxDimensionStyles = null;
export const SvgView = ({
  identifier,
  resizeMode,
  onLoad,
  onError,
  wrapperRef,
  alt
}) => {
  const [didSvgRender, setDidSvgRender] = useState(false);
  const [svgDimensions, setSvgDimensions] = useState({});
  const imgRef = useRef(null);
  const calculateDimensions = useCallback(targetImgElem => {
    if (!wrapperRef.current || !targetImgElem) {
      return;
    }
    setSvgDimensions(calculateSvgDimensions(targetImgElem, wrapperRef.current, resizeMode));
  }, [resizeMode, wrapperRef]);
  const onSvgLoad = evt => {
    calculateDimensions(evt.currentTarget);
    setDidSvgRender(true);
    onLoad === null || onLoad === void 0 ? void 0 : onLoad();
  };
  const onSvgError = err => {
    const error = new MediaCardError(getErrorReason(err.primaryReason), err.secondaryError);
    onError === null || onError === void 0 ? void 0 : onError(error);
  };
  useEffect(() => {
    if (imgRef.current) {
      calculateDimensions(imgRef.current);
    }
  }, [imgRef, calculateDimensions]);
  const {
    svgUrl,
    source
  } = useResolveSvg(identifier, onSvgError);
  const {
    width,
    height
  } = svgDimensions;
  return svgUrl && source ? /*#__PURE__*/React.createElement("img", {
    "data-testid": 'media-card-svg',
    "data-fileid": identifier.id,
    "data-filecollection": identifier.collectionName,
    "data-source": source,
    src: svgUrl,
    alt: alt,
    style: {
      visibility: didSvgRender ? 'visible' : 'hidden',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      ...svgDimensions
    },
    onLoad: onSvgLoad,
    onError: () => {
      onSvgError(new MediaSVGError('img-error'));
    },
    ref: imgRef,
    className: ax(["_5ral1f51 _bfhku67f", !width && !height && "_p12f1osq _c71l1osq"])
  }) : null;
};