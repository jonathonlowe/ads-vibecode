/* unhandledErrorCard-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./unhandledErrorCard-compiled.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Component } from 'react';
import WarningIcon from '@atlaskit/icon/core/migration/warning--editor-warning';
import { N20, N800, Y500 } from '@atlaskit/theme/colors';
import { defaultImageCardDimensions } from '../../../utils';
import { ContentLoadingErrorMessage } from './contentLoadingErrorMessage';
const isPercentage = value => /^\d+(\.\d+)?%$/.test(value);
const shouldShowText = ({
  width,
  height
}) => {
  if (isPercentage(width) || isPercentage(height)) {
    return false;
  }
  return parseInt(width, 10) >= 240 && parseInt(height, 10) >= 90;
};
const normalizeDimension = (value, defaultValue) => {
  const sValue = value.toString();
  return isPercentage(sValue) ? sValue : isNaN(parseInt(sValue, 10)) ? defaultValue + 'px' : parseInt(sValue, 10) + 'px';
};
const getConvertedDimension = dimensions => {
  const {
    width = defaultImageCardDimensions.width,
    height = defaultImageCardDimensions.height
  } = dimensions;
  return {
    width: normalizeDimension(width, defaultImageCardDimensions.width),
    height: normalizeDimension(height, defaultImageCardDimensions.height)
  };
};
const wrapperStyle = null;
export class UnhandledErrorCard extends Component {
  render() {
    const {
      dimensions = defaultImageCardDimensions,
      onClick
    } = this.props;
    const convertedDimensions = getConvertedDimension(dimensions);
    const hideText = !shouldShowText(getConvertedDimension(dimensions));
    return /*#__PURE__*/React.createElement("div", {
      style: convertedDimensions,
      onClick: onClick,
      className: ax(["_2rko1l7b _1e0c1txw _4cvr1h6o _1bah1h6o _bfhk1s4m _syaz1aqp _c71l1osq _p12f1osq _2lx21bp4 _1i7v2smr _31ku1h6o"])
    }, /*#__PURE__*/React.createElement(WarningIcon, {
      label: "Error",
      color: `var(--ds-icon-warning, ${Y500})`,
      LEGACY_size: "medium",
      spacing: "spacious"
    }), /*#__PURE__*/React.createElement(ContentLoadingErrorMessage, {
      isHidden: hideText
    }));
  }
}