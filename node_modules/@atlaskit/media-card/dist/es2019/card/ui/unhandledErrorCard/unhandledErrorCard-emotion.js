/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { Component } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import WarningIcon from '@atlaskit/icon/core/migration/warning--editor-warning';
import { N20, N800, Y500 } from '@atlaskit/theme/colors';
import { center, borderRadius } from '@atlaskit/media-ui';
import { defaultImageCardDimensions } from '../../../utils';
import { ContentLoadingErrorMessage } from './contentLoadingErrorMessage';
const isPercentage = value => /^\d+(\.\d+)?%$/.test(value);
const shouldShowText = ({
  width,
  height
}) => {
  if (isPercentage(width) || isPercentage(height)) {
    return false;
  }
  return parseInt(width, 10) >= 240 && parseInt(height, 10) >= 90;
};
const normalizeDimension = (value, defaultValue) => {
  const sValue = value.toString();
  return isPercentage(sValue) ? sValue : isNaN(parseInt(sValue, 10)) ? defaultValue + 'px' : parseInt(sValue, 10) + 'px';
};
const getConvertedDimension = dimensions => {
  const {
    width = defaultImageCardDimensions.width,
    height = defaultImageCardDimensions.height
  } = dimensions;
  return {
    width: normalizeDimension(width, defaultImageCardDimensions.width),
    height: normalizeDimension(height, defaultImageCardDimensions.height)
  };
};
const wrapperStyles = (dimensions = defaultImageCardDimensions) => {
  try {
    return css(
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    center,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    borderRadius, {
      background: `var(--ds-background-neutral, ${N20})`,
      color: `var(--ds-text-subtle, ${N800})`,
      maxHeight: '100%',
      maxWidth: '100%'
    },
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    getConvertedDimension(dimensions), {
      display: 'flex',
      flexDirection: 'column',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      p: {
        font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
        textAlign: 'center'
      }
    });
  } catch (e) {
    return null;
  }
};
export class UnhandledErrorCard extends Component {
  render() {
    const {
      dimensions,
      onClick
    } = this.props;
    const isErrorHidden = !shouldShowText(getConvertedDimension(dimensions !== null && dimensions !== void 0 ? dimensions : defaultImageCardDimensions));
    return (
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions -- Ignored via go/DSP-18766
      jsx("div", {
        css: wrapperStyles(dimensions),
        onClick: onClick
      }, jsx(WarningIcon, {
        label: "Error",
        color: `var(--ds-icon-warning, ${Y500})`,
        LEGACY_size: "medium",
        spacing: "spacious"
      }), jsx(ContentLoadingErrorMessage, {
        isHidden: isErrorHidden
      }))
    );
  }
}