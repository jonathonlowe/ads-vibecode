/* imageRendererV2.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./imageRendererV2.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useState, useRef, useEffect } from 'react';
import { calculateDimensions, calculateInitialDimensions } from './helpers';
import { useCurrentValueRef } from '../../../utils/useCurrentValueRef';
import { ImageRendererWrapper } from './wrapper';
import { isFileIdentifier } from '@atlaskit/media-client';
const baseStyles = null;
const backgroundStyles = null;
export const ImageRenderer = ({
  cardPreview,
  alt = '',
  resizeMode = 'crop',
  onImageLoad,
  onImageError,
  onDisplayImage,
  mediaType,
  nativeLazyLoad,
  forceSyncDisplay,
  identifier,
  wrapperRef,
  useWhiteBackground,
  testId
}) => {
  const onDisplayImageRef = useCurrentValueRef(onDisplayImage);
  useEffect(() => {
    if (mediaType === 'image') {
      var _onDisplayImageRef$cu;
      (_onDisplayImageRef$cu = onDisplayImageRef.current) === null || _onDisplayImageRef$cu === void 0 ? void 0 : _onDisplayImageRef$cu.call(onDisplayImageRef);
    }
  }, [mediaType, onDisplayImageRef]);
  const [didRender, setDidRender] = useState(false);
  const [resolvedDimensions, setResolvedDimensions] = useState(calculateInitialDimensions(resizeMode));
  const imgRef = useRef(null);
  const onLoad = evt => {
    wrapperRef.current && setResolvedDimensions(calculateDimensions(evt.currentTarget, wrapperRef.current, resizeMode));
    setDidRender(true);
    cardPreview && (onImageLoad === null || onImageLoad === void 0 ? void 0 : onImageLoad(cardPreview));
  };
  const onError = () => {
    onImageError && cardPreview && onImageError(cardPreview);
  };
  useEffect(() => {
    if (imgRef.current && wrapperRef.current && imgRef.current) {
      setResolvedDimensions(calculateDimensions(imgRef.current, wrapperRef.current, resizeMode));
    }
  }, [resizeMode, wrapperRef]);
  return cardPreview ? /*#__PURE__*/React.createElement(ImageRendererWrapper, null, /*#__PURE__*/React.createElement("img", {
    ref: imgRef,
    "data-testid": testId,
    "data-fileid": isFileIdentifier(identifier) ? identifier.id : null,
    "data-filecollection": isFileIdentifier(identifier) ? identifier.collectionName : null,
    "data-resizemode": resizeMode,
    "data-source": cardPreview.source,
    src: cardPreview.dataURI,
    alt: alt,
    onLoad: onLoad,
    onError: onError,
    loading: nativeLazyLoad ? 'lazy' : undefined,
    style: {
      visibility: didRender || forceSyncDisplay ? 'visible' : 'hidden',
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      ...resolvedDimensions
    },
    className: ax(["_5ral1f51", useWhiteBackground && "_bfhku67f"])
  })) : null;
};