import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
import { MediaImage } from '@atlaskit/media-ui';
import { resizeModeToMediaImageProps } from './resizeModeToMediaImageProps';
import { useCurrentValueRef } from '../../../utils/useCurrentValueRef';
export const ImageRenderer = ({
  cardPreview,
  alt,
  resizeMode,
  onImageLoad,
  onImageError,
  onDisplayImage,
  mediaType,
  nativeLazyLoad,
  forceSyncDisplay
}) => {
  const onDisplayImageRef = useCurrentValueRef(onDisplayImage);
  useEffect(() => {
    // TODO: trigger accordingly with the succeeded event. This could be a breaking change
    if (mediaType === 'image') {
      var _onDisplayImageRef$cu;
      (_onDisplayImageRef$cu = onDisplayImageRef.current) === null || _onDisplayImageRef$cu === void 0 ? void 0 : _onDisplayImageRef$cu.call(onDisplayImageRef);
    }
  }, [mediaType, onDisplayImageRef]);
  const onLoad = () => {
    onImageLoad && cardPreview && onImageLoad(cardPreview);
  };
  const onError = () => {
    onImageError && cardPreview && onImageError(cardPreview);
  };
  return /*#__PURE__*/React.createElement(MediaImage, _extends({
    dataURI: cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.dataURI,
    alt: alt,
    previewOrientation: cardPreview === null || cardPreview === void 0 ? void 0 : cardPreview.orientation,
    onImageLoad: onLoad,
    onImageError: onError,
    loading: nativeLazyLoad ? 'lazy' : undefined,
    forceSyncDisplay: forceSyncDisplay
  }, resizeModeToMediaImageProps(resizeMode)));
};