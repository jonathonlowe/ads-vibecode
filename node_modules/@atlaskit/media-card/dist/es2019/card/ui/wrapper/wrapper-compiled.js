/* wrapper-compiled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./wrapper-compiled.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { newFileExperienceClassName } from '../../cardConstants';
import { VcMediaWrapperProps } from '@atlaskit/react-ufo/vc-media';
import { N0, N100, N20, N60A, N90A, B100 } from '@atlaskit/theme/colors';
import { getDefaultCardDimensions } from '../../../utils/cardDimensions';
import { getCSSUnitValue } from '../../../utils/getCSSUnitValue';
const wrapperStyles = null;
const backgroundStyle = null;
const cursorStyleMap = {
  pointer: "_80omtlke",
  wait: "_80omv00u"
};
const shadowStyleMap = {
  withOverlay: "_16qs64c8",
  selected: "_16qs666x",
  selectedWithOverlay: "_16qshzij"
};
const getShadowKey = (disableOverlay, selected) => {
  if (!disableOverlay && selected) {
    return 'selectedWithOverlay';
  }
  if (!disableOverlay) {
    return 'withOverlay';
  }
  if (selected) {
    return 'selected';
  }
  return '';
};
const hideNativeBrowserTextSelectionStyles = null;
const clickableButtonPlayButtonStyles = null;
const selectableTickboxStyle = null;
const tooltipStyle = null;
const getResponsiveStyles = breakpoint => {
  // dynamically setting the properties to avoid ratcheting build errors. These need to be removed however for the compiled transformation.
  return breakpoint === 'small' ? {
    ['fontSize']: '11x',
    ['lineHeight']: '14px'
  } : {
    ['fontSize']: '14px',
    ['lineHeight']: '22px'
  };
};
export const Wrapper = props => {
  const {
    testId,
    dimensions,
    appearance,
    onClick,
    onMouseEnter,
    innerRef,
    breakpoint,
    mediaCardCursor,
    disableOverlay,
    selected,
    displayBackground,
    isPlayButtonClickable,
    isTickBoxSelectable,
    shouldDisplayTooltip
  } = props;
  const defaultImageCardDimensions = getDefaultCardDimensions(appearance);
  const width = getCSSUnitValue((dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || defaultImageCardDimensions.width);
  const height = getCSSUnitValue((dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) || defaultImageCardDimensions.height);
  const wrapperShadowKey = getShadowKey(disableOverlay, selected);
  return /*#__PURE__*/React.createElement("div", _extends({
    id: "newFileExperienceWrapper"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: ax(["_2rko1l7b _vchhusvi _kqswh2mm _ect41gqc _p12f1osq _c71l1osq _1hlmvd8c _1rquusvi _eg54rvv2 _mts3kb7n _1ntskb7n", displayBackground && "_bfhk1s4m", mediaCardCursor && cursorStyleMap[mediaCardCursor], wrapperShadowKey && shadowStyleMap[wrapperShadowKey], selected && "_1p1y1j28 _1rk81j28 _14r11j28 _1np21j28", isPlayButtonClickable && "_1y898vuz _19zy8vuz", isTickBoxSelectable && "_1yf91j9a _1xp5kufk", shouldDisplayTooltip && "_9m3z1osq _10pb1osq", newFileExperienceClassName]),
    "data-testid": testId,
    style: {
      width,
      height,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      ...getResponsiveStyles(breakpoint)
    },
    ref: innerRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter
  }, VcMediaWrapperProps), props.children);
};
Wrapper.displayName = 'NewFileExperienceWrapper';