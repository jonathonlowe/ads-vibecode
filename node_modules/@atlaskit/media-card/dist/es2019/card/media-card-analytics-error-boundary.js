import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { withMediaAnalyticsContext } from '@atlaskit/media-common';
import { UnhandledErrorCard } from './ui/unhandledErrorCard';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { fireMediaCardEvent } from '../utils/analytics';
class WrappedMediaCardAnalyticsErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "fireOperationalEvent", (error, info) => {
      var _window, _window$navigator;
      const {
        data = {},
        createAnalyticsEvent
      } = this.props;
      const payload = {
        eventType: 'operational',
        action: 'failed',
        actionSubject: 'mediaCardRender',
        attributes: {
          browserInfo: (_window = window) !== null && _window !== void 0 && (_window$navigator = _window.navigator) !== null && _window$navigator !== void 0 && _window$navigator.userAgent ? window.navigator.userAgent : 'unknown',
          error,
          info,
          failReason: 'unexpected-error',
          ...data
        }
      };
      fireMediaCardEvent(payload, createAnalyticsEvent);
    });
    _defineProperty(this, "handleOnClick", event => {
      try {
        var _this$props$onClick, _this$props;
        (_this$props$onClick = (_this$props = this.props).onClick) === null || _this$props$onClick === void 0 ? void 0 : _this$props$onClick.call(_this$props, {
          event
        });
      } catch (e) {}
    });
    this.state = {
      hasError: false
    };
  }
  componentDidCatch(error, info) {
    try {
      this.fireOperationalEvent(error, info);
    } catch (e) {}
    this.setState({
      hasError: true
    });
  }
  render() {
    const {
      hasError
    } = this.state;
    const {
      dimensions,
      children
    } = this.props;
    if (hasError) {
      return /*#__PURE__*/React.createElement(UnhandledErrorCard, {
        dimensions: dimensions,
        onClick: this.handleOnClick
      });
    }
    return children;
  }
}
_defineProperty(WrappedMediaCardAnalyticsErrorBoundary, "displayName", 'MediaCardAnalyticsErrorBoundary');
const packageName = "@atlaskit/media-card";
const packageVersion = "79.2.0";

// @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
const MediaCardAnalyticsErrorBoundary = withMediaAnalyticsContext({
  packageVersion,
  packageName,
  componentName: 'mediaCard',
  component: 'mediaCard'
})(withAnalyticsEvents()(WrappedMediaCardAnalyticsErrorBoundary));
export default MediaCardAnalyticsErrorBoundary;