import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { B300, R300, N30A, N900 } from '@atlaskit/theme/colors';
import WarningIcon from '@atlaskit/icon/utility/migration/warning';
import { fireMediaCardEvent } from '../utils/analytics';
const ErrorBoundaryComponent = ({
  message,
  isSelected
}) => {
  const selectedStyle = {
    cursor: 'pointer',
    boxShadow: `0 0 0 1px ${`var(--ds-border-selected, ${B300})`}`,
    outline: 'none',
    userSelect: 'none',
    borderColor: 'transparent'
  };

  /* Note:
    - styling is borrowed from packages/media/media-ui/src/MediaInlineCard/Frame/styled.ts
    - because we are not using styled components, we are not able to use themed(), here is the "themed" property of color and backgroundColor
      color: `${themed({
       light: token('color.text', N900),
       dark: token('color.text', DN600),
     })}`,
     backgroundColor: `${themed({
       light: token('color.background.neutral', N30A),
       dark: token('color.background.neutral', DN80),
     })}`,
    */

  const style = {
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: '16px',
    padding: `${"var(--ds-space-025, 2px)"} ${"var(--ds-space-050, 4px)"}`,
    marginRight: "var(--ds-space-negative-025, -2px)",
    WebkitBoxDecorationBreak: 'clone',
    display: 'inline-flex',
    gap: "var(--ds-space-050, 4px)",
    alignItems: 'center',
    borderRadius: '3px',
    color: `var(--ds-text, ${N900})`,
    backgroundColor: `var(--ds-background-neutral, ${N30A})`,
    userSelect: 'text',
    transition: 'all 0.1s ease-in-out 0s',
    cursor: 'pointer',
    ...(isSelected ? {
      ...selectedStyle
    } : {
      userSelect: 'text'
    })
  };
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    React.createElement("span", {
      style: style
    }, /*#__PURE__*/React.createElement(WarningIcon, {
      LEGACY_margin: `0 ${"var(--ds-space-negative-050, -4px)"} 0 0`,
      label: "error",
      LEGACY_size: "small",
      color: `var(--ds-icon-danger, ${R300})`
    }), message)
  );
};
class WrappedMediaInlineAnalyticsErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "fireOperationalEvent", (error, info) => {
      var _window, _window$navigator;
      const {
        data = {},
        createAnalyticsEvent
      } = this.props;
      const payload = {
        eventType: 'operational',
        action: 'failed',
        actionSubject: 'mediaInlineRender',
        attributes: {
          browserInfo: (_window = window) !== null && _window !== void 0 && (_window$navigator = _window.navigator) !== null && _window$navigator !== void 0 && _window$navigator.userAgent ? window.navigator.userAgent : 'unknown',
          error,
          failReason: 'unexpected-error',
          info,
          ...data
        }
      };
      fireMediaCardEvent(payload, createAnalyticsEvent);
    });
    this.state = {
      hasError: false
    };
  }
  componentDidCatch(error, info) {
    try {
      this.fireOperationalEvent(error, info);
      this.setState({
        hasError: true
      });
    } catch (e) {}
  }
  render() {
    const {
      hasError
    } = this.state;
    const {
      children,
      isSelected
    } = this.props;
    return hasError ? /*#__PURE__*/React.createElement(ErrorBoundaryComponent, {
      message: "We couldn't load this content",
      isSelected: isSelected
    }) : children;
  }
}

// @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
_defineProperty(WrappedMediaInlineAnalyticsErrorBoundary, "displayName", 'MediaInlineAnalyticsErrorBoundary');
const MediaInlineAnalyticsErrorBoundary = withAnalyticsEvents()(WrappedMediaInlineAnalyticsErrorBoundary);
export default MediaInlineAnalyticsErrorBoundary;