import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import { MediaInlineCardLoadingView } from '@atlaskit/media-ui';
import { AnalyticsContext } from '@atlaskit/analytics-next';
export default class MediaInlineCardLoader extends React.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "mounted", false);
    _defineProperty(this, "state", {
      MediaInlineCard: MediaInlineCardLoader.MediaInlineCard,
      ErrorBoundary: MediaInlineCardLoader.ErrorBoundary
    });
  }
  async componentDidMount() {
    this.mounted = true;
    if (!this.state.MediaInlineCard) {
      try {
        const [mediaClient, cardModule, mediaInlineErrorBoundaryModule] = await Promise.all([import( /* webpackChunkName: "@atlaskit-internal_media-client-react" */'@atlaskit/media-client-react'), import( /* webpackChunkName: "@atlaskit-internal_inline-media-card" */'./mediaInlineCard'), import( /* webpackChunkName: "@atlaskit-internal_media-inline-error-boundary" */'./mediaInlineAnalyticsErrorBoundary')]);
        MediaInlineCardLoader.MediaInlineCard = mediaClient.withMediaClient(cardModule.MediaInlineCard);
        MediaInlineCardLoader.ErrorBoundary = mediaInlineErrorBoundaryModule.default;
        if (this.mounted) {
          this.setState({
            MediaInlineCard: MediaInlineCardLoader.MediaInlineCard,
            ErrorBoundary: MediaInlineCardLoader.ErrorBoundary
          });
        }
      } catch (error) {}
    }
  }
  async componentWillUnmount() {
    this.mounted = false;
  }
  render() {
    const {
      MediaInlineCard,
      ErrorBoundary
    } = this.state;
    const analyticsContext = {
      packageVersion: "@atlaskit/media-card",
      packageName: "79.2.0",
      componentName: 'mediaInlineCard',
      component: 'mediaInlineCard'
    };
    if (!MediaInlineCard || !ErrorBoundary) {
      return /*#__PURE__*/React.createElement(MediaInlineCardLoadingView, {
        message: ""
      });
    }
    return /*#__PURE__*/React.createElement(AnalyticsContext, {
      data: analyticsContext
    }, /*#__PURE__*/React.createElement(ErrorBoundary, {
      isSelected: this.props.isSelected
    }, /*#__PURE__*/React.createElement(MediaInlineCard, this.props)));
  }
}
_defineProperty(MediaInlineCardLoader, "displayName", 'MediaInlineCardLoader');