import { extractErrorInfo, fireMediaCardEvent } from '../utils/analytics';
import { MediaCardError } from '../errors';
export const getSucceededStatusPayload = fileState => {
  return {
    eventType: 'operational',
    action: 'succeeded',
    actionSubject: 'mediaInlineRender',
    attributes: {
      status: 'success',
      fileAttributes: {
        fileId: (fileState === null || fileState === void 0 ? void 0 : fileState.id) || '',
        fileSize: fileState === null || fileState === void 0 ? void 0 : fileState.size,
        fileMediatype: fileState === null || fileState === void 0 ? void 0 : fileState.mediaType,
        fileMimetype: fileState === null || fileState === void 0 ? void 0 : fileState.mimeType,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      }
    }
  };
};
export const getErrorStatusPayload = (fileId, error, fileState) => {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaInlineRender',
    attributes: {
      status: 'fail',
      fileAttributes: {
        fileId,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      },
      ...extractErrorInfo(error)
    }
  };
};
export const getFailedProcessingStatusPayload = (fileId, fileState) => {
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaInlineRender',
    attributes: {
      status: 'fail',
      fileAttributes: {
        fileId,
        fileStatus: fileState === null || fileState === void 0 ? void 0 : fileState.status
      },
      failReason: 'failed-processing'
    }
  };
};
export const fireFailedOperationalEvent = (fileState, error = new MediaCardError('missing-error-data'), failReason, createAnalyticsEvent) => {
  const payload = failReason ? getFailedProcessingStatusPayload((fileState === null || fileState === void 0 ? void 0 : fileState.id) || 'unknown-id', fileState) : getErrorStatusPayload((fileState === null || fileState === void 0 ? void 0 : fileState.id) || 'unknown-id', error, fileState);
  fireMediaCardEvent(payload, createAnalyticsEvent);
};
export const fireSucceededOperationalEvent = (fileState, createAnalyticsEvent) => {
  const payload = getSucceededStatusPayload(fileState);
  fireMediaCardEvent(payload, createAnalyticsEvent);
};