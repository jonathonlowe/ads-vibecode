import { type FileIdentifier, type Identifier, type ImageResizeMode } from '@atlaskit/media-client';
import { type MediaFeatureFlags, type NumericalCardDimensions, type SSR } from '@atlaskit/media-common';
import { type ViewerOptionsProps } from '@atlaskit/media-viewer';
import React from 'react';
import { type CardAppearance, type CardDimensions, type CardEventProps, type TitleBoxIcon } from '../types';
import { type CardAction } from './actions';
export interface FileCardProps extends CardEventProps {
    /** Overlay the media file. */
    readonly disableOverlay?: boolean;
    /** Resize the media to 'crop' | 'fit' | 'full-fit' | 'stretchy-fit'. */
    readonly resizeMode?: ImageResizeMode;
    readonly featureFlags?: MediaFeatureFlags;
    /** Sets meida card appearance */
    readonly appearance?: CardAppearance;
    /** Custom media card dimension like width and height. */
    readonly dimensions?: CardDimensions;
    /** Original media card dimension like width and height. */
    readonly originalDimensions?: NumericalCardDimensions;
    /** Array of additional media card actions. */
    readonly actions?: Array<CardAction>;
    /** Enable media card selectable. */
    readonly selectable?: boolean;
    /** Renders media card as selected, if selected is true. */
    readonly selected?: boolean;
    /** Alternate text for an media card. */
    readonly alt?: string;
    /** ID for testing the media card. */
    readonly testId?: string;
    /** Sets the title box background color. */
    readonly titleBoxBgColor?: string;
    /** Sets the title box icon. */
    readonly titleBoxIcon?: TitleBoxIcon;
    /** Instance of file identifier. */
    readonly identifier: FileIdentifier;
    /** Lazy loads the media file. */
    readonly isLazy?: boolean;
    /** Uses the inline player for media file. */
    readonly useInlinePlayer?: boolean;
    /** Uses media MediaViewer to preview the media file. */
    readonly shouldOpenMediaViewer?: boolean;
    /** Media file list to display in Media Viewer. */
    readonly mediaViewerItems?: Identifier[];
    /** Retrieve auth based on a given context. */
    readonly contextId?: string;
    /** Enables the download button for media file. */
    readonly shouldEnableDownloadButton?: boolean;
    /** Server-Side-Rendering modes are "server" and "client" */
    readonly ssr?: SSR;
    /** Disable tooltip for the card */
    readonly shouldHideTooltip?: boolean;
    /** Sets options for viewer **/
    readonly viewerOptions?: ViewerOptionsProps;
    /** Sets options for viewer **/
    readonly includeHashForDuplicateFiles?: boolean;
}
export declare const FileCard: ({ appearance, resizeMode, isLazy, disableOverlay, featureFlags, identifier, ssr, dimensions, originalDimensions, contextId, alt, actions, shouldEnableDownloadButton, useInlinePlayer, shouldOpenMediaViewer, onFullscreenChange, selectable, selected, testId, titleBoxBgColor, titleBoxIcon, shouldHideTooltip, mediaViewerItems, onClick, onMouseEnter, videoControlsWrapperRef, viewerOptions, includeHashForDuplicateFiles, }: FileCardProps) => React.JSX.Element;
