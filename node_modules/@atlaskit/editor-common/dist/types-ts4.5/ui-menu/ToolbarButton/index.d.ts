/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { ButtonProps } from '@atlaskit/button/types';
import type { PositionType } from '@atlaskit/tooltip';
import { TOOLBAR_ACTION_SUBJECT_ID } from '../../analytics';
import { type Keymap } from '../../keymaps';
import type { MenuItem } from '../DropdownMenu/types';
export type Props = {
    buttonId?: TOOLBAR_ACTION_SUBJECT_ID;
    className?: string;
    disabled?: boolean;
    hideTooltip?: boolean;
    href?: string;
    iconAfter?: React.ReactElement<any>;
    iconBefore?: React.ReactElement<any>;
    onClick?: (event: React.MouseEvent<HTMLElement>) => void;
    onItemClick?: (item: MenuItem) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLElement>) => void;
    selected?: boolean;
    spacing?: 'default' | 'compact' | 'none';
    target?: string;
    title?: React.ReactNode;
    titlePosition?: PositionType;
    item?: MenuItem;
    testId?: string;
    keymap?: Keymap;
    'aria-label'?: React.AriaAttributes['aria-label'];
    'aria-expanded'?: React.AriaAttributes['aria-expanded'];
    'aria-haspopup'?: React.AriaAttributes['aria-haspopup'];
    'aria-pressed'?: React.AriaAttributes['aria-pressed'];
    'aria-keyshortcuts'?: React.AriaAttributes['aria-keyshortcuts'];
    'data-ds--level'?: string;
} & Pick<ButtonProps, 'aria-label' | 'children' | 'onFocus' | 'onBlur' | 'onMouseEnter' | 'onMouseLeave' | 'aria-controls' | 'rel'>;
export type ToolbarButtonRef = HTMLElement;
declare const ToolbarButton: React.ForwardRefExoticComponent<{
    buttonId?: TOOLBAR_ACTION_SUBJECT_ID | undefined;
    className?: string | undefined;
    disabled?: boolean | undefined;
    hideTooltip?: boolean | undefined;
    href?: string | undefined;
    iconAfter?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    iconBefore?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    onClick?: ((event: React.MouseEvent<HTMLElement>) => void) | undefined;
    onItemClick?: ((item: MenuItem) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLElement>) => void) | undefined;
    selected?: boolean | undefined;
    spacing?: "default" | "none" | "compact" | undefined;
    target?: string | undefined;
    title?: React.ReactNode;
    titlePosition?: PositionType | undefined;
    item?: MenuItem | undefined;
    testId?: string | undefined;
    keymap?: Keymap | undefined;
    'aria-label'?: React.AriaAttributes['aria-label'];
    'aria-expanded'?: React.AriaAttributes['aria-expanded'];
    'aria-haspopup'?: React.AriaAttributes['aria-haspopup'];
    'aria-pressed'?: React.AriaAttributes['aria-pressed'];
    'aria-keyshortcuts'?: React.AriaAttributes['aria-keyshortcuts'];
    'data-ds--level'?: string | undefined;
} & Pick<ButtonProps, "onFocus" | "onBlur" | "children" | "rel" | "aria-controls" | "aria-label" | "onMouseEnter" | "onMouseLeave"> & React.RefAttributes<HTMLElement>>;
export default ToolbarButton;
