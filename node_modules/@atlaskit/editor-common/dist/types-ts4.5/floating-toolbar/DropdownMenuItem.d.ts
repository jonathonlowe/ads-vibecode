/// <reference types="react" />
import { jsx } from '@emotion/react';
import type { IntlShape } from 'react-intl-next';
import type { Node } from '@atlaskit/editor-prosemirror/model';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { ButtonItemProps } from '@atlaskit/menu';
import type { ExtensionAPI, ExtensionProvider } from '../extensions';
import type { DropdownOptionT, FloatingToolbarOverflowDropdownOptions } from '../types';
export declare const menuItemDimensions: {
    width: number;
    height: number;
};
export interface Props {
    hide: Function;
    dispatchCommand: Function;
    items: Array<DropdownOptionT<Function>> | FloatingToolbarOverflowDropdownOptions<Function>;
    showSelected?: boolean;
    editorView?: EditorView;
    extensions?: ExtensionProps;
}
export type ExtensionProps = {
    node: Node;
    extensionApi?: ExtensionAPI;
    extensionsProvider?: Promise<ExtensionProvider>;
};
export interface DropdownButtonItemProps extends ButtonItemProps {
    onMouseEnter?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseOver?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseLeave?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onMouseOut?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onFocus?: (event: React.MouseEvent | React.KeyboardEvent) => void;
    onBlur?: (event: React.MouseEvent | React.KeyboardEvent) => void;
}
export type DropdownMenuItemProps = {
    item: DropdownOptionT<Function>;
    hide: Function;
    dispatchCommand: Function;
    editorView?: EditorView;
    intl: IntlShape;
    showSelected: boolean;
    itemSelected?: boolean;
};
export declare const DropdownMenuItem: (props: DropdownMenuItemProps) => jsx.JSX.Element;
