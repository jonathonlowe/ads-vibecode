/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import type { CSSProperties } from 'react';
import { jsx } from '@emotion/react';
import { type ExtensionsPluginInjectionAPI } from '../../types';
export declare const getShouldShowBodiedMacroLabel: (isBodiedMacro: boolean | undefined, isNodeHovered: boolean | undefined, showLivePagesBodiedMacrosRendererView: boolean | undefined, showBodiedExtensionRendererView: boolean | undefined, showUpdatedLivePages1PBodiedExtensionUI: boolean | undefined) => boolean | undefined;
type ExtensionLabelProps = {
    text: string;
    extensionName: string;
    isNodeHovered?: boolean;
    isNodeNested?: boolean;
    customContainerStyles?: CSSProperties;
    setIsNodeHovered?: (isHovered: boolean) => void;
    isBodiedMacro?: boolean;
    showUpdatedLivePages1PBodiedExtensionUI?: boolean;
    showLivePagesBodiedMacrosRendererView?: boolean;
    showBodiedExtensionRendererView?: boolean;
    pluginInjectionApi?: ExtensionsPluginInjectionAPI;
};
export declare const ExtensionLabel: ({ text, extensionName, isNodeHovered, customContainerStyles, isNodeNested, setIsNodeHovered, isBodiedMacro, showUpdatedLivePages1PBodiedExtensionUI, showLivePagesBodiedMacrosRendererView, showBodiedExtensionRendererView, pluginInjectionApi, }: ExtensionLabelProps) => jsx.JSX.Element;
export {};
