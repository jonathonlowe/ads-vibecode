/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { jsx } from '@emotion/react';
import { CellMeasurerCache } from 'react-virtualized/dist/commonjs/CellMeasurer';
import type { WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import type { QuickInsertItem } from '../../../provider-factory';
import type { EmptyStateHandler } from '../../../types';
import type { SelectedItemProps } from '../../types';
import { Modes } from '../../types';
export declare const ICON_HEIGHT = 40;
export declare const ICON_WIDTH = 40;
export declare const itemIcon: import("@emotion/react").SerializedStyles;
export interface Props {
    items: QuickInsertItem[];
    mode: keyof typeof Modes;
    onInsertItem: (item: QuickInsertItem) => void;
    columnCount: number;
    setColumnCount: (columnCount: number) => void;
    setFocusedItemIndex: (index: number) => void;
    setFocusedCategoryIndex?: (index: number) => void;
    emptyStateHandler?: EmptyStateHandler;
    selectedCategory?: string;
    selectedCategoryIndex?: number;
    searchTerm?: string;
    cache?: CellMeasurerCache;
}
type ElementItemType = {
    inlineMode: boolean;
    item: QuickInsertItem;
    onInsertItem: (item: QuickInsertItem) => void;
    selected: boolean;
    focus: boolean;
    setFocusedItemIndex: (index: number) => void;
    index: number;
};
export declare function ElementItem({ inlineMode, selected, item, index, onInsertItem, focus, setFocusedItemIndex, }: ElementItemType): jsx.JSX.Element;
declare const MemoizedElementListWithAnalytics: React.MemoExoticComponent<React.ForwardRefExoticComponent<Omit<Props & SelectedItemProps & WithAnalyticsEventsProps & import("@atlaskit/analytics-next").WithContextProps, "ref"> & React.RefAttributes<any>>>;
export default MemoizedElementListWithAnalytics;
