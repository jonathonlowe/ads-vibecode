import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { PureComponent } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import Spinner from '@atlaskit/spinner';
import LinkSearchListItem from './LinkSearchListItem';
var listContainer = css({
  paddingTop: 0,
  marginTop: "var(--ds-space-150, 12px)",
  borderTop: "1px solid ".concat("var(--ds-border, #091E4224)")
});
var spinnerContainer = css({
  textAlign: 'center',
  minHeight: '80px',
  marginTop: "var(--ds-space-400, 32px)"
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export var linkSearchList = css({
  padding: 0,
  listStyle: 'none'
});
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var LinkSearchList = /*#__PURE__*/function (_PureComponent) {
  function LinkSearchList() {
    _classCallCheck(this, LinkSearchList);
    return _callSuper(this, LinkSearchList, arguments);
  }
  _inherits(LinkSearchList, _PureComponent);
  return _createClass(LinkSearchList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        onSelect = _this$props.onSelect,
        onMouseMove = _this$props.onMouseMove,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseLeave = _this$props.onMouseLeave,
        items = _this$props.items,
        selectedIndex = _this$props.selectedIndex,
        isLoading = _this$props.isLoading,
        ariaControls = _this$props.ariaControls,
        role = _this$props.role,
        id = _this$props.id;
      var itemsContent;
      var loadingContent;
      if (items && items.length > 0) {
        itemsContent = jsx("ul", {
          css: linkSearchList,
          id: id,
          role: role,
          "aria-controls": ariaControls
        }, items.map(function (item, index) {
          return jsx(LinkSearchListItem, {
            id: "link-search-list-item-".concat(index),
            role: role && 'option',
            item: item,
            selected: selectedIndex === index,
            onMouseMove: onMouseMove,
            onMouseEnter: onMouseEnter,
            onMouseLeave: onMouseLeave,
            onSelect: onSelect,
            key: item.objectId
          });
        }));
      }
      if (isLoading) {
        loadingContent = jsx("div", {
          "data-testid": "".concat(id, "-loading"),
          css: spinnerContainer
        }, jsx(Spinner, {
          size: "medium",
          interactionName: "link-search-spinner"
        }));
      }
      return jsx("div", {
        css: listContainer
      }, itemsContent, loadingContent);
    }
  }]);
}(PureComponent);
export { LinkSearchList as default };