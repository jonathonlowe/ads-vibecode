import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["type"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

import React, { Fragment } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import classnames from 'classnames';
import { fg } from '@atlaskit/platform-feature-flags';
import { useSharedPluginState } from '../../../hooks';
import { overflowShadow } from '../../../ui';
import { calculateBreakoutStyles } from '../../../utils';
import ExtensionLozenge from '../Lozenge';
import { overlay } from '../styles';
import { isEmptyBodiedMacro } from './extension-utils';
import { content, contentWrapper, header, overflowWrapperStyles, widerLayoutClassName, wrapperStyle, wrapperStyleInheritedCursor } from './styles';
function ExtensionWithPluginState(props) {
  var node = props.node,
    handleContentDOMRef = props.handleContentDOMRef,
    children = props.children,
    _props$widthState = props.widthState,
    widthState = _props$widthState === void 0 ? {
      width: 0
    } : _props$widthState,
    handleRef = props.handleRef,
    shadowClassNames = props.shadowClassNames,
    hideFrame = props.hideFrame,
    editorAppearance = props.editorAppearance,
    macroInteractionDesignFeatureFlags = props.macroInteractionDesignFeatureFlags,
    isNodeSelected = props.isNodeSelected,
    isNodeHovered = props.isNodeHovered,
    isNodeNested = props.isNodeNested,
    setIsNodeHovered = props.setIsNodeHovered,
    showLivePagesBodiedMacrosRendererView = props.showLivePagesBodiedMacrosRendererView,
    showUpdatedLivePages1PBodiedExtensionUI = props.showUpdatedLivePages1PBodiedExtensionUI,
    showBodiedExtensionRendererView = props.showBodiedExtensionRendererView,
    setShowBodiedExtensionRendererView = props.setShowBodiedExtensionRendererView,
    pluginInjectionApi = props.pluginInjectionApi,
    isLivePageViewMode = props.isLivePageViewMode;
  var _ref = macroInteractionDesignFeatureFlags || {},
    showMacroInteractionDesignUpdates = _ref.showMacroInteractionDesignUpdates;
  var isLegacyContentMacroExtension = function isLegacyContentMacroExtension(extensionNode) {
    var _extensionNode$attrs, _extensionNode$attrs2;
    return extensionNode.type.name === 'extension' && ((_extensionNode$attrs = extensionNode.attrs) === null || _extensionNode$attrs === void 0 ? void 0 : _extensionNode$attrs.extensionType) === 'com.atlassian.confluence.migration' && ((_extensionNode$attrs2 = extensionNode.attrs) === null || _extensionNode$attrs2 === void 0 ? void 0 : _extensionNode$attrs2.extensionKey) === 'legacy-content';
  };
  var hasBody = ['bodiedExtension', 'multiBodiedExtension'].includes(node.type.name);
  var hasChildren = !!children;
  var removeBorder = showMacroInteractionDesignUpdates || !!(hideFrame && !hasBody);
  var getPos = props.getPos,
    view = props.view;
  var isTopLevelNode = React.useMemo(function () {
    var pos = typeof getPos === 'function' ? getPos() : undefined;
    return typeof pos !== 'undefined' && !isNaN(pos) && view.state.doc.resolve(pos).depth === 0;
  }, [view, getPos]);
  var shouldBreakout =
  // Extension should breakout when the layout is set to 'full-width' or 'wide'.
  ['full-width', 'wide'].includes(node.attrs.layout) &&
  // Extension breakout state should only be respected for top level nodes.
  isTopLevelNode &&
  // Extension breakout state should not be respected when the editor appearance is full-width mode
  editorAppearance !== 'full-width';

  // We don't want to show border for non-empty 1p bodied extensions in live pages
  var show1PBodiedExtensionBorder = showUpdatedLivePages1PBodiedExtensionUI ? isEmptyBodiedMacro(node) : true;
  var classNames = classnames('extension-container', 'block', shadowClassNames, _defineProperty({
    'with-overlay': !hasBody && !showMacroInteractionDesignUpdates,
    'with-bodied-border': showMacroInteractionDesignUpdates && (hasBody || isLegacyContentMacroExtension(node) && fg('platform_editor_legacy_content_macro')) && !showBodiedExtensionRendererView && show1PBodiedExtensionBorder,
    'with-margin-styles': showMacroInteractionDesignUpdates && !isNodeNested && !showBodiedExtensionRendererView,
    'with-hover-border': showMacroInteractionDesignUpdates && isNodeHovered,
    'with-danger-overlay': showMacroInteractionDesignUpdates,
    'without-frame': removeBorder
  }, widerLayoutClassName, shouldBreakout));
  var overflowClassNames = classnames('extension-overflow-wrapper', {
    'with-body': hasBody,
    'with-margin-styles': showMacroInteractionDesignUpdates && !isNodeNested && !showBodiedExtensionRendererView,
    // Adding extra padding for renderer view so users can have a touch target to click on the extension
    'with-padding-styles': showMacroInteractionDesignUpdates && showBodiedExtensionRendererView
  });
  var headerClassNames = classnames({
    'with-children': hasChildren,
    'without-frame': removeBorder
  });
  var newContentClassNames = classnames({
    'with-padding-styles': showMacroInteractionDesignUpdates,
    'with-bodied-padding-styles': hasBody && showMacroInteractionDesignUpdates
  });
  var contentClassNames = classnames('extension-content', 'block', {
    'remove-border': showMacroInteractionDesignUpdates,
    'hide-content': showBodiedExtensionRendererView
  });
  var customContainerStyles = {
    width: '100%'
  };
  var newContentStyles = {};
  if (shouldBreakout) {
    var _calculateBreakoutSty = calculateBreakoutStyles({
        mode: node.attrs.layout,
        widthStateWidth: widthState.width,
        widthStateLineLength: widthState.lineLength
      }),
      type = _calculateBreakoutSty.type,
      breakoutStyles = _objectWithoutProperties(_calculateBreakoutSty, _excluded);
    newContentStyles = _objectSpread({}, breakoutStyles);
    customContainerStyles = breakoutStyles;
  }
  newContentStyles = _objectSpread(_objectSpread({}, newContentStyles), contentWrapper);
  var handleMouseEvent = function handleMouseEvent(didHover) {
    if (setIsNodeHovered) {
      setIsNodeHovered(didHover);
    }
  };
  return jsx(Fragment, null, showMacroInteractionDesignUpdates && !isLivePageViewMode && jsx(ExtensionLozenge, {
    isNodeSelected: isNodeSelected,
    isNodeHovered: isNodeHovered,
    isNodeNested: isNodeNested,
    node: node,
    showMacroInteractionDesignUpdates: showMacroInteractionDesignUpdates,
    customContainerStyles: customContainerStyles,
    setIsNodeHovered: setIsNodeHovered,
    isBodiedMacro: hasBody || isLegacyContentMacroExtension(node) && fg('platform_editor_legacy_content_macro'),
    showLivePagesBodiedMacrosRendererView: showLivePagesBodiedMacrosRendererView,
    showUpdatedLivePages1PBodiedExtensionUI: showUpdatedLivePages1PBodiedExtensionUI,
    showBodiedExtensionRendererView: showBodiedExtensionRendererView,
    setShowBodiedExtensionRendererView: setShowBodiedExtensionRendererView,
    pluginInjectionApi: pluginInjectionApi
  }), jsx("div", {
    "data-testid": "extension-container",
    ref: handleRef,
    "data-layout": node.attrs.layout
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: classNames,
    css:
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    fg('platform_editor_legacy_content_macro') ? wrapperStyleInheritedCursor : wrapperStyle
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: customContainerStyles,
    onMouseEnter: function onMouseEnter() {
      return handleMouseEvent(true);
    },
    onMouseLeave: function onMouseLeave() {
      return handleMouseEvent(false);
    }
  }, jsx("div", {
    "data-testid": "extension-overflow-wrapper"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: overflowClassNames
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
    ,
    css: overflowWrapperStyles
  }, jsx("div", {
    className: 'extension-overlay',
    css: overlay
  }), jsx("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: header,
    contentEditable: false
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: headerClassNames
  }, !removeBorder && jsx(ExtensionLozenge, {
    isNodeSelected: isNodeSelected,
    node: node,
    showMacroInteractionDesignUpdates: showMacroInteractionDesignUpdates,
    pluginInjectionApi: pluginInjectionApi
  }), children), hasBody &&
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
  jsx("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    css: newContentStyles
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: newContentClassNames,
    "data-testid": "extension-new-content"
  }, jsx("div", {
    "data-testid": "extension-content"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: content
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: contentClassNames,
    ref: !fg('platform_editor_extension_fix_ssr_ref') ? handleContentDOMRef : undefined
  }, fg('platform_editor_extension_fix_ssr_ref') && jsx("div", {
    ref: handleContentDOMRef
  }))))));
}
var Extension = function Extension(props) {
  var pluginInjectionApi = props.pluginInjectionApi;
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['width']),
    widthState = _useSharedPluginState.widthState;

  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  return jsx(ExtensionWithPluginState, _extends({
    widthState: widthState
  }, props));
};
export default overflowShadow(Extension, {
  overflowSelector: '.extension-overflow-wrapper'
});