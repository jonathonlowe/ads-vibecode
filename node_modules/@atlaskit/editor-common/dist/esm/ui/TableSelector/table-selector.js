/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useContext, useEffect, useMemo, useRef } from 'react';
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { Stack } from '@atlaskit/primitives/compiled';
import { B100 } from '@atlaskit/theme/colors';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { toolbarInsertBlockMessages as messages } from '../../messages';
import { OutsideClickTargetRefContext } from '../../ui-react';
export var TABLE_SELECTOR_BUTTON_GAP = 2;
export var TABLE_SELECTOR_BUTTON_SIZE = 17;
var selectedButtonStyles = css({
  backgroundColor: "var(--ds-background-accent-blue-subtlest, #579DFF)",
  border: "1px solid ".concat("var(--ds-background-accent-blue-subtle, #579DFF)")
});
var buttonStyles = css({
  height: "".concat(TABLE_SELECTOR_BUTTON_SIZE, "px"),
  width: "".concat(TABLE_SELECTOR_BUTTON_SIZE, "px"),
  border: "1px solid ".concat("var(--ds-border, #091e4224)"),
  backgroundColor: "var(--ds-background-input, #ffffff)",
  borderRadius: '3px',
  cursor: 'pointer',
  display: 'block',
  '&:focus': {
    outline: 'none',
    border: "1px solid ".concat("var(--ds-border-focused, ".concat(B100, ")")),
    boxShadow: "0 0 0 0.5px ".concat("var(--ds-border-focused, ".concat(B100, ")"))
  }
});
var selectionSizeTextStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '14px',
  display: 'flex',
  justifyContent: 'center',
  marginTop: "var(--ds-space-075, 5px)",
  padding: "var(--ds-space-075, 10px)"
});
var TableSelectorButton = function TableSelectorButton(_ref) {
  var row = _ref.row,
    col = _ref.col,
    isActive = _ref.isActive,
    _onClick = _ref.onClick,
    label = _ref.label,
    onKeyDown = _ref.onKeyDown,
    isFocused = _ref.isFocused,
    handleInitialButtonFocus = _ref.handleInitialButtonFocus;
  var btnRef = useRef(null);
  useEffect(function () {
    if (btnRef.current) {
      if (isFocused) {
        btnRef.current.focus({
          preventScroll: editorExperiment('platform_editor_controls', 'variant1') && fg('platform_editor_controls_table_picker') ? true : undefined
        });
      } else {
        btnRef.current.blur();
      }
    }
  }, [isFocused, btnRef]);
  var handleFocus = col === 1 && row === 1 ? function () {
    return handleInitialButtonFocus();
  } : undefined;
  return jsx("button", {
    type: "button",
    css: [buttonStyles, isActive ? selectedButtonStyles : undefined],
    onClick: function onClick() {
      return _onClick(row, col);
    },
    "aria-label": label,
    onKeyDown: onKeyDown,
    ref: btnRef,
    onFocus: handleFocus
  });
};
var createArray = function createArray(maxCols, maxRows) {
  var arr = [];
  for (var i = 1; i < maxRows + 1; i++) {
    for (var j = 1; j < maxCols + 1; j++) {
      arr.push({
        col: j,
        row: i
      });
    }
  }
  return arr;
};
var gridWrapperStyles = function gridWrapperStyles(_ref2) {
  var maxCols = _ref2.maxCols,
    maxRows = _ref2.maxRows;
  return css({
    display: 'grid',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    gridTemplateColumns: "repeat(".concat(maxCols, ", 1fr)"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    gridTemplateRows: "repeat(".concat(maxRows, ", 1fr)"),
    gap: "".concat("var(--ds-space-025, ".concat("".concat(TABLE_SELECTOR_BUTTON_GAP, "px"), ")"))
  });
};
var TableSelectorPopup = function TableSelectorPopup(_ref3) {
  var maxCols = _ref3.maxCols,
    maxRows = _ref3.maxRows,
    onSelection = _ref3.onSelection,
    selectedCol = _ref3.selectedCol,
    selectedRow = _ref3.selectedRow,
    onKeyDown = _ref3.onKeyDown,
    isFocused = _ref3.isFocused,
    handleInitialButtonFocus = _ref3.handleInitialButtonFocus,
    formatMessage = _ref3.intl.formatMessage;
  var buttons = useMemo(function () {
    return createArray(maxCols, maxRows);
  }, [maxCols, maxRows]);
  var setOutsideClickTargetRef = useContext(OutsideClickTargetRefContext);
  return jsx(Stack, {
    ref: setOutsideClickTargetRef
  }, jsx("div", {
    "aria-label": "".concat(formatMessage(messages.tableSizeSelectorPopup)),
    css:
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    gridWrapperStyles({
      maxCols: maxCols,
      maxRows: maxRows
    })
  }, buttons.map(function (_ref4, index) {
    var col = _ref4.col,
      row = _ref4.row;
    var isCurrentFocused = isFocused && selectedCol === col && selectedRow === row;
    var isActive = selectedCol >= col && selectedRow >= row ? true : false;
    return jsx(TableSelectorButton
    // Ignored via go/ees005
    // eslint-disable-next-line react/no-array-index-key
    , {
      key: index,
      isActive: isActive,
      col: col,
      row: row,
      onClick: onSelection,
      label: "".concat(formatMessage(messages.tableSizeSelectorButton, {
        numberOfColumns: col,
        numberOfRows: row
      })),
      onKeyDown: onKeyDown,
      isFocused: isCurrentFocused,
      handleInitialButtonFocus: handleInitialButtonFocus
    });
  })), jsx("span", {
    css: selectionSizeTextStyles,
    "aria-hidden": true
  }, "".concat(selectedCol, " x ").concat(selectedRow)));
};
export default injectIntl(TableSelectorPopup);