"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachGenericProseMirrorMetadata = exports.SafePlugin = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _state = require("@atlaskit/editor-prosemirror/state");
var _prosemirrorDomMetadata = require("../prosemirror-dom-metadata");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * ðŸ§± Internal Helper Function: Editor FE Platform
 *
 * Attaches generic ProseMirror metadata attributes to a given DOM element based on the properties of a ProseMirror node.
 * This function is useful for annotating DOM elements with metadata that describes the type and characteristics of the ProseMirror node.
 *
 *
 * @param {Object} params - The parameters for the function.
 * @param {PMNode} params.node - The ProseMirror node from which to derive metadata.
 * @param {HTMLElement} params.dom - The DOM element to which the metadata attributes will be attached.
 */
var attachGenericProseMirrorMetadata = exports.attachGenericProseMirrorMetadata = function attachGenericProseMirrorMetadata(_ref) {
  var nodeOrMark = _ref.nodeOrMark,
    dom = _ref.dom;
  var metadata = (0, _prosemirrorDomMetadata.createProseMirrorMetadata)(nodeOrMark);
  Object.entries(metadata).forEach(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
      name = _ref3[0],
      value = _ref3[1];
    dom.setAttribute(name, value);
  });
};

// Wraper to avoid any exception during the get pos operation
// See this https://hello.atlassian.net/wiki/spaces/EDITOR/pages/2849713193/ED-19672+Extensions+Regression
// And this https://discuss.prosemirror.net/t/possible-bug-on-viewdesc-posbeforechild/5783
var wrapGetPosExceptions = function wrapGetPosExceptions(spec) {
  var _spec$props;
  if (!(spec !== null && spec !== void 0 && (_spec$props = spec.props) !== null && _spec$props !== void 0 && _spec$props.nodeViews)) {
    return spec;
  }
  var unsafeNodeViews = spec.props.nodeViews;
  var safeNodeViews = new Proxy(unsafeNodeViews, {
    get: function get(target, prop, receiver) {
      var safeNodeView = new Proxy(Reflect.get(target, prop, receiver), {
        apply: function apply(target, thisArg, argumentsList) {
          var _argumentsList = (0, _toArray2.default)(argumentsList),
            node = _argumentsList[0],
            view = _argumentsList[1],
            unsafeGetPos = _argumentsList[2],
            more = _argumentsList.slice(3);
          var safeGetPos = function () {
            try {
              return unsafeGetPos();
            } catch (e) {
              return;
            }
            return;
            // eslint-disable-next-line no-extra-bind
          }.bind(thisArg);
          var result = Reflect.apply(target, thisArg, [node, view, safeGetPos].concat((0, _toConsumableArray2.default)(more)));
          if ((result === null || result === void 0 ? void 0 : result.dom) instanceof HTMLElement) {
            attachGenericProseMirrorMetadata({
              nodeOrMark: node,
              dom: result.dom
            });
          }
          return result;
        }
      });
      return safeNodeView;
    }
  });
  spec.props.nodeViews = safeNodeViews;
  return spec;
};

// Ignored via go/ees005
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var SafePlugin = exports.SafePlugin = /*#__PURE__*/function (_Plugin) {
  // This variable isn't (and shouldn't) be used anywhere. Its purpose is
  // to distinguish Plugin from SafePlugin, thus ensuring that an 'unsafe'
  // Plugin cannot be assigned as an item in EditorPlugin â†’ pmPlugins.

  function SafePlugin(spec) {
    (0, _classCallCheck2.default)(this, SafePlugin);
    return _callSuper(this, SafePlugin, [wrapGetPosExceptions(spec)]);
  }
  (0, _inherits2.default)(SafePlugin, _Plugin);
  return (0, _createClass2.default)(SafePlugin);
}(_state.Plugin);