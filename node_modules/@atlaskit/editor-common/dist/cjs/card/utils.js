"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addLinkMetadata = addLinkMetadata;
exports.commandWithMetadata = void 0;
exports.getLinkMetadataFromTransaction = getLinkMetadataFromTransaction;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _steps = require("@atlaskit/adf-schema/steps");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Records metadata about the user action and input method relating to a transaction
 * as a custom LinkStepMetadata prosemirror step so that it is preserved in
 * the history for undo/redo.
 */
function addLinkMetadata(initialSelection, tr, metadata) {
  var storedMarks = tr.storedMarks;
  var pos = tr.mapping.map(initialSelection.$from.pos);
  tr.step(new _steps.LinkMetaStep(pos, metadata));

  // When you add a new step all the storedMarks are removed it
  if (storedMarks) {
    tr.setStoredMarks(storedMarks);
  }
  return tr;
}
function getLinkMetadataFromTransaction(tr) {
  return tr.steps.reduce(function (metadata, step) {
    if (!(step instanceof _steps.LinkMetaStep)) {
      return metadata;
    }
    return _objectSpread(_objectSpread({}, metadata), step.getMetadata());
  }, {});
}
/**
 * Adds metadata to the transaction created from a command
 * The metadata describes the user intent and input method
 * for executing the command
 */
var commandWithMetadata = exports.commandWithMetadata = function commandWithMetadata(command, metadata) {
  return function (state, dispatch, view) {
    if (!dispatch) {
      return command(state, dispatch, view);
    }
    return command(state, function (tr) {
      addLinkMetadata(state.selection, tr, metadata);
      dispatch(tr);
    }, view);
  };
};