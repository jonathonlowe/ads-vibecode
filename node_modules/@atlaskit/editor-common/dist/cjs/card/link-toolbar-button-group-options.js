"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getButtonGroupOption = exports.appearancePropsMap = void 0;
var _minus = _interopRequireDefault(require("@atlaskit/icon/core/minus"));
var _smartLinkCard = _interopRequireDefault(require("@atlaskit/icon/core/smart-link-card"));
var _smartLinkEmbed = _interopRequireDefault(require("@atlaskit/icon/core/smart-link-embed"));
var _smartLinkInline = _interopRequireDefault(require("@atlaskit/icon/core/smart-link-inline"));
var _messages = require("../messages");
var _card = require("./ui/assets/card");
var _embed = require("./ui/assets/embed");
var _inline = require("./ui/assets/inline");
var _url = require("./ui/assets/url");
var appearancePropsMap = exports.appearancePropsMap = {
  url: {
    title: _messages.cardMessages.urlTitle,
    icon: _minus.default,
    iconFallback: _url.IconUrl
  },
  inline: {
    title: _messages.cardMessages.inlineTitle,
    icon: _smartLinkInline.default,
    iconFallback: _inline.IconInline
  },
  block: {
    title: _messages.cardMessages.blockTitle,
    icon: _smartLinkCard.default,
    iconFallback: _card.IconCard
  },
  embed: {
    title: _messages.cardMessages.embedTitle,
    icon: _smartLinkEmbed.default,
    iconFallback: _embed.IconEmbed
  }
};
var getButtonGroupOption = exports.getButtonGroupOption = function getButtonGroupOption(intl, dispatchCommand, _ref) {
  var disabled = _ref.disabled,
    _onClick = _ref.onClick,
    selected = _ref.selected,
    appearance = _ref.appearance,
    testId = _ref.testId,
    tooltip = _ref.tooltip;
  var _appearancePropsMap = appearancePropsMap[appearance !== null && appearance !== void 0 ? appearance : 'url'],
    title = _appearancePropsMap.title,
    icon = _appearancePropsMap.icon,
    iconFallback = _appearancePropsMap.iconFallback;
  return {
    title: intl.formatMessage(title),
    icon: icon,
    iconFallback: iconFallback,
    onClick: function onClick() {
      return dispatchCommand(_onClick);
    },
    disabled: Boolean(disabled),
    tooltipContent: tooltip || null,
    testId: testId,
    selected: selected
  };
};