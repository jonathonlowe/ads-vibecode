"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logException = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _environment = require("./environment");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var SENTRY_DSN = 'https://0b10c8e02fb44d8796c047b102c9bee8@o55978.ingest.sentry.io/4505129224110080';
var packageName = 'editor-common'; // Sentry doesn't accept '/' in its releases https://docs.sentry.io/platforms/javascript/configuration/releases/
var packageVersion = "103.15.0";
var sanitiseSentryEvents = function sanitiseSentryEvents(data, _hint) {
  // Remove URL as it has UGC
  // Ignored via go/ees007
  // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
  // TODO: Sanitise the URL instead of just removing it
  if (data.request) {
    delete data.request.url;
  }
  return data;
};
var logException = exports.logException = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(error, tags) {
    var _process$env$CLOUD_EN, _yield$import, BrowserClient, defaultIntegrations, getCurrentHub, _yield$import2, ExtraErrorData, sentryOptions, client, hub;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          if (!(process.env.NODE_ENV !== 'production' || process.env.CLOUD_ENV === 'branch')) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return");
        case 3:
          _context.next = 5;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-sentrybrowser" */'@sentry/browser'));
          });
        case 5:
          _yield$import = _context.sent;
          BrowserClient = _yield$import.BrowserClient;
          defaultIntegrations = _yield$import.defaultIntegrations;
          getCurrentHub = _yield$import.getCurrentHub;
          _context.next = 11;
          return Promise.resolve().then(function () {
            return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_editor-sentryintegrations" */'@sentry/integrations'));
          });
        case 11:
          _yield$import2 = _context.sent;
          ExtraErrorData = _yield$import2.ExtraErrorData;
          sentryOptions = {
            dsn: (0, _environment.isFedRamp)() ? undefined : SENTRY_DSN,
            release: "".concat(packageName, "@").concat(packageVersion),
            environment: (_process$env$CLOUD_EN = process.env.CLOUD_ENV) !== null && _process$env$CLOUD_EN !== void 0 ? _process$env$CLOUD_EN : 'unknown',
            ignoreErrors: [
            // Network issues
            // Ignored via go/ees005
            // eslint-disable-next-line require-unicode-regexp
            /^network error/i,
            // Ignored via go/ees005
            // eslint-disable-next-line require-unicode-regexp
            /^network failure/i, 'TypeError: Failed to fetch',
            // A benign error, see https://stackoverflow.com/a/50387233/2645305
            'ResizeObserver loop limit exceeded',
            // Ignored via go/ees005
            // eslint-disable-next-line require-unicode-regexp
            /ResizeObserver loop completed with undelivered notifications/],
            autoSessionTracking: false,
            integrations: function integrations(_integrations) {
              return [].concat((0, _toConsumableArray2.default)(defaultIntegrations.filter(function (_ref2) {
                var name = _ref2.name;
                return name !== 'Breadcrumbs';
              })), [
              // Extracts all non-native attributes from the error object and attaches them to the event as the extra data
              // https://docs.sentry.io/platforms/javascript/configuration/integrations/plugin/?original_referrer=https%3A%2F%2Fduckduckgo.com%2F#extraerrordata
              new ExtraErrorData()]);
            },
            beforeSend: sanitiseSentryEvents
          }; // Use a client to avoid picking up the errors from parent applications
          client = new BrowserClient(sentryOptions);
          hub = getCurrentHub();
          hub.bindClient(client);
          hub.withScope(function (scope) {
            var _buildInfo;
            scope.setTags(_objectSpread({
              // Jira environment variables
              // Ignored via go/ees005
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              'jira-bundler': window.BUNDLER_VERSION,
              // Ignored via go/ees005
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              'jira-variant': window.BUILD_VARIANT,
              // Ignored via go/ees005
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              'jira-release': window.BUILD_KEY,
              // Confluence environment variables
              // Ignored via go/ees005
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              'confluence-frontend-version': (_buildInfo = window.__buildInfo) === null || _buildInfo === void 0 ? void 0 : _buildInfo.FRONTEND_VERSION
            }, tags));
            // Explicitly remove the breadcrumbs as it's too likely to log UGC/PII to side-step the hub integrations not being respected
            scope.clearBreadcrumbs();
            hub.captureException(error);
          });
          return _context.abrupt("return", client.close());
        case 21:
          _context.prev = 21;
          _context.t0 = _context["catch"](0);
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 21]]);
  }));
  return function logException(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();