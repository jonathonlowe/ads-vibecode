"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "alignmentMessages", {
  enumerable: true,
  get: function get() {
    return _alignment.alignmentMessages;
  }
});
Object.defineProperty(exports, "annotationMessages", {
  enumerable: true,
  get: function get() {
    return _annotation.annotationMessages;
  }
});
Object.defineProperty(exports, "avatarGroupMessages", {
  enumerable: true,
  get: function get() {
    return _avatarGroup.avatarGroupMessages;
  }
});
Object.defineProperty(exports, "blockControlsMessages", {
  enumerable: true,
  get: function get() {
    return _blockControls.messages;
  }
});
Object.defineProperty(exports, "blockTypeMessages", {
  enumerable: true,
  get: function get() {
    return _blockType.messages;
  }
});
Object.defineProperty(exports, "breakoutMessages", {
  enumerable: true,
  get: function get() {
    return _breakout.messages;
  }
});
Object.defineProperty(exports, "cardMessages", {
  enumerable: true,
  get: function get() {
    return _card.messages;
  }
});
Object.defineProperty(exports, "codeBidiWarningMessages", {
  enumerable: true,
  get: function get() {
    return _codeBidiWarning.codeBidiWarningMessages;
  }
});
Object.defineProperty(exports, "codeBlockButtonMessages", {
  enumerable: true,
  get: function get() {
    return _codeBlockButton.codeBlockButtonMessages;
  }
});
Object.defineProperty(exports, "dateMessages", {
  enumerable: true,
  get: function get() {
    return _date.messages;
  }
});
exports.default = void 0;
Object.defineProperty(exports, "elementInsertSidePanel", {
  enumerable: true,
  get: function get() {
    return _elementInsertSidePanel.elementInsertSidePanel;
  }
});
Object.defineProperty(exports, "findReplaceMessages", {
  enumerable: true,
  get: function get() {
    return _findReplace.findReplaceMessages;
  }
});
Object.defineProperty(exports, "fullPageMessages", {
  enumerable: true,
  get: function get() {
    return _fullPage.messages;
  }
});
Object.defineProperty(exports, "helpDialogMessages", {
  enumerable: true,
  get: function get() {
    return _helpDialog.helpDialogMessages;
  }
});
Object.defineProperty(exports, "highlightMessages", {
  enumerable: true,
  get: function get() {
    return _highlight.highlightMessages;
  }
});
Object.defineProperty(exports, "indentationMessages", {
  enumerable: true,
  get: function get() {
    return _indentation.messages;
  }
});
Object.defineProperty(exports, "layoutMessages", {
  enumerable: true,
  get: function get() {
    return _layout.toolbarMessages;
  }
});
Object.defineProperty(exports, "linkMessages", {
  enumerable: true,
  get: function get() {
    return _link.linkMessages;
  }
});
Object.defineProperty(exports, "linkToolbarMessages", {
  enumerable: true,
  get: function get() {
    return _linkToolbar.linkToolbarMessages;
  }
});
Object.defineProperty(exports, "listMessages", {
  enumerable: true,
  get: function get() {
    return _list.messages;
  }
});
Object.defineProperty(exports, "mediaAndEmbedToolbarMessages", {
  enumerable: true,
  get: function get() {
    return _mediaAndEmbedToolbar.toolbarMessages;
  }
});
Object.defineProperty(exports, "mediaInsertMessages", {
  enumerable: true,
  get: function get() {
    return _mediaInsert.mediaInsertMessages;
  }
});
Object.defineProperty(exports, "mentionMessages", {
  enumerable: true,
  get: function get() {
    return _mentions.mentionMessages;
  }
});
Object.defineProperty(exports, "panelMessages", {
  enumerable: true,
  get: function get() {
    return _panel.panelMessages;
  }
});
Object.defineProperty(exports, "pasteOptionsToolbarMessages", {
  enumerable: true,
  get: function get() {
    return _pasteOptionsToolbar.pasteOptionsToolbarMessages;
  }
});
Object.defineProperty(exports, "placeholderTextMessages", {
  enumerable: true,
  get: function get() {
    return _placeholderText.placeholderTextMessages;
  }
});
Object.defineProperty(exports, "selectionExtensionMessages", {
  enumerable: true,
  get: function get() {
    return _selectionExtension.selectionExtensionMessages;
  }
});
Object.defineProperty(exports, "selectionToolbarMessages", {
  enumerable: true,
  get: function get() {
    return _selectionToolbar.selectionToolbarMessages;
  }
});
Object.defineProperty(exports, "statusMessages", {
  enumerable: true,
  get: function get() {
    return _status.messages;
  }
});
Object.defineProperty(exports, "tableMessages", {
  enumerable: true,
  get: function get() {
    return _table.messages;
  }
});
Object.defineProperty(exports, "tasksAndDecisionsMessages", {
  enumerable: true,
  get: function get() {
    return _tasksAndDecsisions.tasksAndDecisionsMessages;
  }
});
Object.defineProperty(exports, "textColorMessages", {
  enumerable: true,
  get: function get() {
    return _textColor.textColorMessages;
  }
});
Object.defineProperty(exports, "toolbarInsertBlockMessages", {
  enumerable: true,
  get: function get() {
    return _insertBlock.toolbarInsertBlockMessages;
  }
});
Object.defineProperty(exports, "toolbarMessages", {
  enumerable: true,
  get: function get() {
    return _toolbar.toolbarMessages;
  }
});
Object.defineProperty(exports, "undoRedoMessages", {
  enumerable: true,
  get: function get() {
    return _undoRedo.messages;
  }
});
Object.defineProperty(exports, "unsupportedContentMessages", {
  enumerable: true,
  get: function get() {
    return _unsupportedContent.unsupportedContentMessages;
  }
});
var _reactIntlNext = require("react-intl-next");
var _alignment = require("./alignment");
var _annotation = require("./annotation");
var _breakout = require("./breakout");
var _blockType = require("./block-type");
var _codeBidiWarning = require("./codeBidiWarning");
var _link = require("./link");
var _linkToolbar = require("./link-toolbar");
var _unsupportedContent = require("./unsupportedContent");
var _codeBlockButton = require("./codeBlockButton");
var _insertBlock = require("./insert-block");
var _mediaAndEmbedToolbar = require("./media-and-embed-toolbar");
var _card = require("./card");
var _fullPage = require("./full-page");
var _toolbar = require("./toolbar");
var _table = require("./table");
var _list = require("./list");
var _undoRedo = require("./undo-redo");
var _status = require("./status");
var _date = require("./date");
var _layout = require("./layout");
var _indentation = require("./indentation");
var _avatarGroup = require("./avatar-group");
var _findReplace = require("./find-replace");
var _elementInsertSidePanel = require("./element-insert-side-panel");
var _textColor = require("./text-color");
var _tasksAndDecsisions = require("./tasks-and-decsisions");
var _placeholderText = require("./placeholder-text");
var _pasteOptionsToolbar = require("./paste-options-toolbar");
var _panel = require("./panel");
var _mentions = require("./mentions");
var _helpDialog = require("./help-dialog");
var _highlight = require("./highlight");
var _blockControls = require("./block-controls");
var _mediaInsert = require("./media-insert");
var _selectionExtension = require("./selection-extension");
var _selectionToolbar = require("./selection-toolbar");
// Disable no-re-export rule for entry point files
/* eslint-disable @atlaskit/editor/no-re-export */
var _default = exports.default = (0, _reactIntlNext.defineMessages)({
  layoutFixedWidth: {
    id: 'fabric.editor.layoutFixedWidth',
    defaultMessage: 'Back to center',
    description: 'Display your element (image, table, extension, etc) as standard width'
  },
  layoutStateFixedWidth: {
    id: 'fabric.editor.layoutStateFixedWidth',
    defaultMessage: 'Centered',
    description: 'Displaying your element (image, table, extension, etc) as standard width'
  },
  layoutWide: {
    id: 'fabric.editor.layoutWide',
    defaultMessage: 'Go wide',
    description: 'Display your element (image, table, extension, etc) wider than normal'
  },
  layoutStateWide: {
    id: 'fabric.editor.layoutStateWide',
    defaultMessage: 'Wide',
    description: 'Displaying your element (image, table, extension, etc) wider than normal'
  },
  layoutFullWidth: {
    id: 'fabric.editor.layoutFullWidth',
    defaultMessage: 'Go full width',
    description: 'Display your element (image, table, extension, etc) as full width'
  },
  layoutStateFullWidth: {
    id: 'fabric.editor.layoutStateFullWidth',
    defaultMessage: 'Full width',
    description: 'Displaying your element (image, table, extension, etc) as full width'
  },
  alignImageRight: {
    id: 'fabric.editor.alignImageRight',
    defaultMessage: 'Align right',
    description: 'Aligns image to the right'
  },
  alignImageCenter: {
    id: 'fabric.editor.alignImageCenter',
    defaultMessage: 'Align center',
    description: 'Aligns image to the center'
  },
  alignImageLeft: {
    id: 'fabric.editor.alignImageLeft',
    defaultMessage: 'Align left',
    description: 'Aligns image to the left'
  },
  delete: {
    id: 'fabric.editor.delete',
    defaultMessage: 'Delete',
    description: 'Delete the element (image, panel, table, etc.) from your document'
  },
  remove: {
    id: 'fabric.editor.remove',
    defaultMessage: 'Remove',
    description: 'Delete the element (image, panel, table, etc.) from your document'
  },
  removeEmoji: {
    id: 'fabric.editor.removeEmoji',
    defaultMessage: 'Remove emoji',
    description: 'Remove the emoji panel icon from custom panel'
  },
  visit: {
    id: 'fabric.editor.visit',
    defaultMessage: 'Open link in a new window',
    description: 'Open the link in a new window'
  },
  inviteToEditButtonTitle: {
    id: 'fabric.editor.editMode.inviteToEditButton.title',
    defaultMessage: 'Invite to edit',
    description: 'Invite another user to edit the current document'
  },
  saveButton: {
    id: 'fabric.editor.saveButton',
    defaultMessage: 'Save',
    description: 'Submit and save a comment or document'
  },
  cancelButton: {
    id: 'fabric.editor.cancelButton',
    defaultMessage: 'Cancel',
    description: 'Discard the current comment or document'
  },
  taskList: {
    id: 'fabric.editor.tooltip.taskList',
    defaultMessage: 'an action item',
    description: 'an action item in the Editor'
  },
  bulletList: {
    id: 'fabric.editor.tooltip.bulletList',
    defaultMessage: 'a list',
    description: 'a list item in the Editor'
  },
  nestedExpand: {
    id: 'fabric.editor.tooltip.nestedExpand',
    defaultMessage: 'a nested expand',
    description: 'expand node which is nested'
  },
  decisionList: {
    id: 'fabric.editor.tooltip.decisionList',
    defaultMessage: 'a decision list',
    description: 'a list of decisions'
  },
  defaultBlockNode: {
    id: 'fabric.editor.tooltip.defaultBlockNode',
    defaultMessage: 'a block node',
    description: 'a block node element'
  },
  panel: {
    id: 'fabric.editor.tooltip.blockPanel',
    defaultMessage: 'a panel',
    description: 'Panel node in the Editor'
  },
  blockquote: {
    id: 'fabric.editor.blockquote',
    defaultMessage: 'a quote',
    description: 'a quote node'
  },
  timeUpdated: {
    id: 'fabric.editor.time.updated',
    defaultMessage: 'Updated',
    description: 'Time last updated'
  },
  timeViewed: {
    id: 'fabric.editor.time.viewed',
    defaultMessage: 'Viewed',
    description: 'Time last viewed'
  },
  timeAgo: {
    id: 'fabric.editor.time.ago',
    defaultMessage: 'ago',
    description: 'Some time ago'
  },
  copyToClipboard: {
    id: 'fabric.editor.copyToClipboard',
    defaultMessage: 'Copy',
    description: 'Copy the whole content of the element to your clipboard'
  },
  copiedToClipboard: {
    id: 'fabric.editor.copiedToClipboard',
    defaultMessage: 'Copied!',
    description: 'Copied the whole content of the element to clipboard'
  },
  viewMore: {
    id: 'fabric.editor.overflowMenuViewMore',
    defaultMessage: 'View more',
    description: 'View more options in toolbar'
  }
});