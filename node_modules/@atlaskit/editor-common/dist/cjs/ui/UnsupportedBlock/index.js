"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _questionCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/question-circle"));
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _analytics = require("../../analytics");
var _unsupportedContent = require("../../messages/unsupportedContent");
var _trackUnsupportedContent = require("../../utils/track-unsupported-content");
var _unsupportedContentHelper = require("../unsupported-content-helper");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var blockNodeStyle = (0, _react2.css)({
  background: "var(--ds-background-disabled, #091E4208)",
  border: "1px dashed ".concat("var(--ds-border-disabled, #091E420F)"),
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  borderRadius: "var(--ds-border-radius, 3px)",
  boxSizing: 'border-box',
  cursor: 'default',
  display: 'flex',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  fontSize: (0, _editorSharedStyles.relativeFontSizeToBase16)(14),
  margin: "var(--ds-space-100, 8px)".concat(" 0"),
  minHeight: '24px',
  padding: "var(--ds-space-150, 12px)",
  textAlign: 'center',
  verticalAlign: 'text-bottom',
  minWidth: '120px',
  alignItems: 'center',
  justifyContent: 'center'
});
var UnsupportedBlockNode = function UnsupportedBlockNode(_ref) {
  var node = _ref.node,
    intl = _ref.intl,
    dispatchAnalyticsEvent = _ref.dispatchAnalyticsEvent;
  var message = (0, _unsupportedContentHelper.getUnsupportedContent)(_unsupportedContent.unsupportedContentMessages.unsupportedBlockContent, _unsupportedContent.unsupportedContentMessages.unsupportedBlockContent.defaultMessage + ':', node, intl);
  var tooltipContent = intl.formatMessage(_unsupportedContent.unsupportedContentMessages.unsupportedContentTooltip);
  var _useRef = (0, _react.useRef)({
      padding: '4px'
    }),
    style = _useRef.current;
  var originalNodeType = node === null || node === void 0 ? void 0 : node.attrs.originalValue.type;
  var tooltipOnShowHandler = (0, _react.useCallback)(function () {
    return dispatchAnalyticsEvent && (0, _trackUnsupportedContent.trackUnsupportedContentTooltipDisplayedFor)(dispatchAnalyticsEvent, _analytics.ACTION_SUBJECT_ID.ON_UNSUPPORTED_BLOCK, originalNodeType);
  }, [dispatchAnalyticsEvent, originalNodeType]);
  return (
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    (0, _react2.jsx)("div", {
      css: blockNodeStyle,
      className: "unsupported"
    }, message, (0, _react2.jsx)(_tooltip.default, {
      content: tooltipContent,
      hideTooltipOnClick: false,
      position: "bottom",
      onShow: tooltipOnShowHandler,
      strategy: "absolute"
    }, (0, _react2.jsx)("span", {
      style: style
    }, (0, _react2.jsx)(_questionCircle.default, {
      label: "?",
      LEGACY_size: "small"
    }))))
  );
};
var _default = exports.default = (0, _reactIntlNext.injectIntl)(UnsupportedBlockNode);