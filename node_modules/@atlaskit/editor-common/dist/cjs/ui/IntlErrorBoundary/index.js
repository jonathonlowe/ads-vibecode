"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REACT_INTL_ERROR_MESSAGE = exports.IntlErrorBoundary = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var REACT_INTL_ERROR_MESSAGE = exports.REACT_INTL_ERROR_MESSAGE = '<IntlProvider> needs to exist in the component ancestry';
var isMissingIntlProviderInAncestryError = function isMissingIntlProviderInAncestryError(err) {
  var _err$toString;
  return err === null || err === void 0 || (_err$toString = err.toString()) === null || _err$toString === void 0 ? void 0 : _err$toString.includes('<IntlProvider> needs to exist in the component ancestry');
};

// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var IntlErrorBoundary = exports.IntlErrorBoundary = /*#__PURE__*/function (_React$Component) {
  function IntlErrorBoundary() {
    var _this;
    (0, _classCallCheck2.default)(this, IntlErrorBoundary);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, IntlErrorBoundary, [].concat(args));
    (0, _defineProperty2.default)(_this, "state", {
      missingIntlProviderInAncestry: false
    });
    return _this;
  }
  (0, _inherits2.default)(IntlErrorBoundary, _React$Component);
  return (0, _createClass2.default)(IntlErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      // if missing IntlProvider in ancestry, we setup a fallback IntlProvider ourselves
      if (isMissingIntlProviderInAncestryError(error)) {
        this.setState({
          missingIntlProviderInAncestry: true
        });
      } else {
        // else we re-propagate the non-react-intl-next error
        throw error;
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.missingIntlProviderInAncestry) {
        return /*#__PURE__*/_react.default.createElement(_reactIntlNext.IntlProvider, {
          locale: "en"
        }, this.props.children);
      }
      return this.props.children;
    }
  }]);
}(_react.default.Component);