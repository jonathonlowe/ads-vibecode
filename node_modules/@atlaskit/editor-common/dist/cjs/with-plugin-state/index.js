"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WithPluginStateInner = exports.WithPluginState = void 0;
var _readOnlyError2 = _interopRequireDefault(require("@babel/runtime/helpers/readOnlyError"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _analytics = require("../analytics");
var _eventDispatcher = require("../event-dispatcher");
var _performanceMeasures = require("../performance-measures");
var _EditorContext = require("../ui/EditorContext");
var _utils = require("../utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DEFAULT_SAMPLING_RATE = 100;
var DEFAULT_SLOW_THRESHOLD = 4;

// That context was extract from the old WithPluginState from editor-core
// It was using some private types from
// - EditorAction: packages/editor/editor-core/src/actions/index.ts
// - EditorSharedConfig: packages/editor/editor-core/src/labs/next/internal/context/shared-config.tsx
/**
 * @private
 * @deprecated
 *
 * Using this component is deprecated. It should be replaced with `useSharedPluginState`.
 * This requires having access to the injection API from the plugin itself.
 *
 * An example of the refactor with the new hook (using hyperlink as an example) is:
 *
 * Before:
 * ```ts
 * <WithPluginState
 *   editorView={editorView}
 *   plugins={{
 *     hyperlinkState: hyperlinkPluginKey
 *   }}
 *   render={({ hyperlinkState }) =>
 *     renderComponent({ hyperlinkState })
 *   }
 * />
 * ```
 *
 * After:
 * ```ts
 * import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
 * import type { ExtractInjectionAPI } from '@atlaskit/editor-common/types';
 *
 * function ComponentWithState(
 *   api: ExtractInjectionAPI<typeof hyperlinkPlugin> | undefined
 * ) {
 *   const { hyperlinkState } = useSharedPluginState(api, ['hyperlink']);
 *   return renderComponent({ hyperlinkState })
 * }
 * ```
 *
 */
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components, react/prefer-stateless-function
var WithPluginState = exports.WithPluginState = /*#__PURE__*/function (_React$Component) {
  function WithPluginState(props) {
    (0, _classCallCheck2.default)(this, WithPluginState);
    return _callSuper(this, WithPluginState, [props]);
  }
  (0, _inherits2.default)(WithPluginState, _React$Component);
  return (0, _createClass2.default)(WithPluginState, [{
    key: "render",
    value: function render() {
      // Ignored via go/ees005
      // eslint-disable-next-line react/jsx-props-no-spreading
      return /*#__PURE__*/_react.default.createElement(WithPluginStateEditionActionsWrapper, this.props);
    }
  }]);
}(_react.default.Component);
function WithPluginStateEditionActionsWrapper(props) {
  var context = _react.default.useContext(_EditorContext.EditorContext);
  return /*#__PURE__*/_react.default.createElement(WithPluginStateInner
  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  , (0, _extends2.default)({}, props, {
    editorActions: context === null || context === void 0 ? void 0 : context.editorActions
  }));
}
// Ignored via go/ees005
// eslint-disable-next-line @repo/internal/react/no-class-components
var WithPluginStateInner = exports.WithPluginStateInner = /*#__PURE__*/function (_React$Component2) {
  function WithPluginStateInner(props) {
    var _this;
    (0, _classCallCheck2.default)(this, WithPluginStateInner);
    _this = _callSuper(this, WithPluginStateInner, [props]);
    (0, _defineProperty2.default)(_this, "listeners", {});
    (0, _defineProperty2.default)(_this, "debounce", null);
    (0, _defineProperty2.default)(_this, "notAppliedState", {});
    (0, _defineProperty2.default)(_this, "isSubscribed", false);
    (0, _defineProperty2.default)(_this, "callsCount", 0);
    (0, _defineProperty2.default)(_this, "handlePluginStateChange", function (propName, pluginName, performanceOptions, skipEqualityCheck) {
      return (
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        function (pluginState) {
          // skipEqualityCheck is being used for old plugins since they are mutating plugin state instead of creating a new one
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          if (_this.state[propName] !== pluginState || skipEqualityCheck) {
            _this.updateState({
              stateSubset: (0, _defineProperty2.default)({}, propName, pluginState),
              pluginName: pluginName,
              performanceOptions: performanceOptions
            });
          }
        }
      );
    });
    /**
     * Debounces setState calls in order to reduce number of re-renders caused by several plugin state changes.
     */
    (0, _defineProperty2.default)(_this, "updateState", function (_ref) {
      var stateSubset = _ref.stateSubset,
        pluginName = _ref.pluginName,
        performanceOptions = _ref.performanceOptions;
      _this.notAppliedState = _objectSpread(_objectSpread({}, _this.notAppliedState), stateSubset);
      if (_this.debounce) {
        window.clearTimeout(_this.debounce);
      }
      var debounce = _this.props.debounce !== false ? function (fn) {
        return window.setTimeout(fn, 0);
      } : function (fn) {
        return fn();
      };
      _this.debounce = debounce(function () {
        var measure = "\uD83E\uDD89".concat(pluginName, "::WithPluginState");
        performanceOptions.trackingEnabled && (0, _performanceMeasures.startMeasure)(measure);
        _this.setState(_this.notAppliedState, function () {
          performanceOptions.trackingEnabled && (0, _performanceMeasures.stopMeasure)(measure, function (duration) {
            // Each WithPluginState component will fire analytics event no more than once every `samplingLimit` times
            if (++_this.callsCount % performanceOptions.samplingRate === 0 && duration > performanceOptions.slowThreshold) {
              _this.dispatchAnalyticsEvent({
                action: _analytics.ACTION.WITH_PLUGIN_STATE_CALLED,
                actionSubject: _analytics.ACTION_SUBJECT.EDITOR,
                eventType: _analytics.EVENT_TYPE.OPERATIONAL,
                attributes: {
                  plugin: pluginName,
                  duration: duration
                }
              });
            }
          });
        });
        _this.debounce = null;
        _this.notAppliedState = {};
      });
    });
    (0, _defineProperty2.default)(_this, "dispatchAnalyticsEvent", function (payload) {
      var eventDispatcher = _this.getEventDispatcher();
      if (eventDispatcher) {
        var dispatch = (0, _eventDispatcher.createDispatch)(eventDispatcher);
        dispatch(_utils.analyticsEventKey, {
          payload: payload
        });
      }
    });
    _this.state = _this.getPluginsStates(_this.props.plugins, _this.getEditorView(props));
    return _this;
  }
  (0, _inherits2.default)(WithPluginStateInner, _React$Component2);
  return (0, _createClass2.default)(WithPluginStateInner, [{
    key: "getEditorView",
    value: function getEditorView(maybeProps) {
      var props = maybeProps || this.props;
      var editorActions = props.editorActions;
      return props.editorView || (editorActions === null || editorActions === void 0 ? void 0 : editorActions._privateGetEditorView());
    }
  }, {
    key: "getEventDispatcher",
    value: function getEventDispatcher(maybeProps) {
      var _props$editorActions;
      var props = maybeProps || this.props;
      return props.eventDispatcher || ((_props$editorActions = props.editorActions) === null || _props$editorActions === void 0 ? void 0 : _props$editorActions._privateGetEventDispatcher());
    }
  }, {
    key: "getPluginsStates",
    value: function getPluginsStates(plugins, editorView) {
      if (!editorView || !plugins) {
        return {};
      }
      var keys = Object.keys(plugins);
      return keys.reduce(function (acc, propName) {
        var pluginKey = plugins[propName];
        if (!pluginKey) {
          return acc;
        }
        acc[propName] = pluginKey.getState(editorView.state);
        return acc;
      }, {});
    }
  }, {
    key: "subscribe",
    value: function subscribe(props) {
      var _uiTracking$samplingR,
        _uiTracking$slowThres,
        _this2 = this;
      var plugins = props.plugins;
      var eventDispatcher = this.getEventDispatcher(props);
      var editorView = this.getEditorView(props);
      if (!eventDispatcher || !editorView || this.isSubscribed) {
        return;
      }

      // Please, do not copy or use this kind of code below
      // @ts-ignore
      var fakePluginKey = {
        key: 'analyticsPlugin$',
        getState: function getState(state) {
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return state['analyticsPlugin$'];
        }
      };
      var analyticsPlugin = fakePluginKey.getState(editorView.state);
      var uiTracking = analyticsPlugin && analyticsPlugin.performanceTracking ? analyticsPlugin.performanceTracking.uiTracking || {} : {};
      var trackingEnabled = uiTracking.enabled === true;
      var samplingRate = (_uiTracking$samplingR = uiTracking.samplingRate) !== null && _uiTracking$samplingR !== void 0 ? _uiTracking$samplingR : DEFAULT_SAMPLING_RATE;
      var slowThreshold = (_uiTracking$slowThres = uiTracking.slowThreshold) !== null && _uiTracking$slowThres !== void 0 ? _uiTracking$slowThres : DEFAULT_SLOW_THRESHOLD;
      this.isSubscribed = true;
      var pluginsStates = this.getPluginsStates(plugins, editorView);
      this.setState(pluginsStates);
      Object.keys(plugins).forEach(function (propName) {
        var pluginKey = plugins[propName];
        if (!pluginKey) {
          return;
        }

        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var pluginName = pluginKey.key;
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var pluginState = pluginsStates[propName];
        var isPluginWithSubscribe = pluginState && pluginState.subscribe;
        var handler = _this2.handlePluginStateChange(propName, pluginName, {
          samplingRate: samplingRate,
          slowThreshold: slowThreshold,
          trackingEnabled: trackingEnabled
        }, isPluginWithSubscribe);
        if (isPluginWithSubscribe) {
          pluginState.subscribe(handler);
        } else {
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          eventDispatcher.on(pluginKey.key, handler);
        }

        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _this2.listeners[pluginKey.key] = {
          handler: handler,
          pluginKey: pluginKey
        };
      });
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      var _this3 = this;
      var eventDispatcher = this.getEventDispatcher();
      var editorView = this.getEditorView();
      if (!eventDispatcher || !editorView || !this.isSubscribed) {
        return;
      }
      Object.keys(this.listeners).forEach(function (key) {
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var pluginState = _this3.listeners[key].pluginKey.getState(editorView.state);
        if (pluginState && pluginState.unsubscribe) {
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          pluginState.unsubscribe(_this3.listeners[key].handler);
        } else {
          // Ignored via go/ees005
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          eventDispatcher.off(key, _this3.listeners[key].handler);
        }
      });
      this.listeners = [];
    }
  }, {
    key: "subscribeToContextUpdates",
    value: function subscribeToContextUpdates() {
      var _this$props$editorAct,
        _this4 = this;
      (_this$props$editorAct = this.props.editorActions) === null || _this$props$editorAct === void 0 || _this$props$editorAct._privateSubscribe(function () {
        return _this4.subscribe(_this4.props);
      });
    }
  }, {
    key: "unsubscribeFromContextUpdates",
    value: function unsubscribeFromContextUpdates() {
      var _this$props$editorAct2,
        _this5 = this;
      (_this$props$editorAct2 = this.props.editorActions) === null || _this$props$editorAct2 === void 0 || _this$props$editorAct2._privateUnsubscribe(function () {
        return _this5.subscribe(_this5.props);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.subscribe(this.props);
      this.subscribeToContextUpdates();
    }

    // Ignored via go/ees005
    // eslint-disable-next-line react/no-unsafe
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!this.isSubscribed) {
        this.subscribe(nextProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.debounce) {
        window.clearTimeout(this.debounce);
      }
      this.unsubscribeFromContextUpdates();
      this.unsubscribe();
    }
  }, {
    key: "render",
    value: function render() {
      var render = this.props.render;
      return render(this.state);
    }
  }]);
}(_react.default.Component);
(0, _defineProperty2.default)(WithPluginStateInner, "displayName", 'WithPluginState');