"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _classnames2 = _interopRequireDefault(require("classnames"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _hooks = require("../../../hooks");
var _ui = require("../../../ui");
var _utils = require("../../../utils");
var _Lozenge = _interopRequireDefault(require("../Lozenge"));
var _styles = require("../styles");
var _extensionUtils = require("./extension-utils");
var _styles2 = require("./styles");
var _excluded = ["type"];
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function ExtensionWithPluginState(props) {
  var node = props.node,
    handleContentDOMRef = props.handleContentDOMRef,
    children = props.children,
    _props$widthState = props.widthState,
    widthState = _props$widthState === void 0 ? {
      width: 0
    } : _props$widthState,
    handleRef = props.handleRef,
    shadowClassNames = props.shadowClassNames,
    hideFrame = props.hideFrame,
    editorAppearance = props.editorAppearance,
    macroInteractionDesignFeatureFlags = props.macroInteractionDesignFeatureFlags,
    isNodeSelected = props.isNodeSelected,
    isNodeHovered = props.isNodeHovered,
    isNodeNested = props.isNodeNested,
    setIsNodeHovered = props.setIsNodeHovered,
    showLivePagesBodiedMacrosRendererView = props.showLivePagesBodiedMacrosRendererView,
    showUpdatedLivePages1PBodiedExtensionUI = props.showUpdatedLivePages1PBodiedExtensionUI,
    showBodiedExtensionRendererView = props.showBodiedExtensionRendererView,
    setShowBodiedExtensionRendererView = props.setShowBodiedExtensionRendererView,
    pluginInjectionApi = props.pluginInjectionApi,
    isLivePageViewMode = props.isLivePageViewMode;
  var _ref = macroInteractionDesignFeatureFlags || {},
    showMacroInteractionDesignUpdates = _ref.showMacroInteractionDesignUpdates;
  var isLegacyContentMacroExtension = function isLegacyContentMacroExtension(extensionNode) {
    var _extensionNode$attrs, _extensionNode$attrs2;
    return extensionNode.type.name === 'extension' && ((_extensionNode$attrs = extensionNode.attrs) === null || _extensionNode$attrs === void 0 ? void 0 : _extensionNode$attrs.extensionType) === 'com.atlassian.confluence.migration' && ((_extensionNode$attrs2 = extensionNode.attrs) === null || _extensionNode$attrs2 === void 0 ? void 0 : _extensionNode$attrs2.extensionKey) === 'legacy-content';
  };
  var hasBody = ['bodiedExtension', 'multiBodiedExtension'].includes(node.type.name);
  var hasChildren = !!children;
  var removeBorder = showMacroInteractionDesignUpdates || !!(hideFrame && !hasBody);
  var getPos = props.getPos,
    view = props.view;
  var isTopLevelNode = _react.default.useMemo(function () {
    var pos = typeof getPos === 'function' ? getPos() : undefined;
    return typeof pos !== 'undefined' && !isNaN(pos) && view.state.doc.resolve(pos).depth === 0;
  }, [view, getPos]);
  var shouldBreakout =
  // Extension should breakout when the layout is set to 'full-width' or 'wide'.
  ['full-width', 'wide'].includes(node.attrs.layout) &&
  // Extension breakout state should only be respected for top level nodes.
  isTopLevelNode &&
  // Extension breakout state should not be respected when the editor appearance is full-width mode
  editorAppearance !== 'full-width';

  // We don't want to show border for non-empty 1p bodied extensions in live pages
  var show1PBodiedExtensionBorder = showUpdatedLivePages1PBodiedExtensionUI ? (0, _extensionUtils.isEmptyBodiedMacro)(node) : true;
  var classNames = (0, _classnames2.default)('extension-container', 'block', shadowClassNames, (0, _defineProperty2.default)({
    'with-overlay': !hasBody && !showMacroInteractionDesignUpdates,
    'with-bodied-border': showMacroInteractionDesignUpdates && (hasBody || isLegacyContentMacroExtension(node) && (0, _platformFeatureFlags.fg)('platform_editor_legacy_content_macro')) && !showBodiedExtensionRendererView && show1PBodiedExtensionBorder,
    'with-margin-styles': showMacroInteractionDesignUpdates && !isNodeNested && !showBodiedExtensionRendererView,
    'with-hover-border': showMacroInteractionDesignUpdates && isNodeHovered,
    'with-danger-overlay': showMacroInteractionDesignUpdates,
    'without-frame': removeBorder
  }, _styles2.widerLayoutClassName, shouldBreakout));
  var overflowClassNames = (0, _classnames2.default)('extension-overflow-wrapper', {
    'with-body': hasBody,
    'with-margin-styles': showMacroInteractionDesignUpdates && !isNodeNested && !showBodiedExtensionRendererView,
    // Adding extra padding for renderer view so users can have a touch target to click on the extension
    'with-padding-styles': showMacroInteractionDesignUpdates && showBodiedExtensionRendererView
  });
  var headerClassNames = (0, _classnames2.default)({
    'with-children': hasChildren,
    'without-frame': removeBorder
  });
  var newContentClassNames = (0, _classnames2.default)({
    'with-padding-styles': showMacroInteractionDesignUpdates,
    'with-bodied-padding-styles': hasBody && showMacroInteractionDesignUpdates
  });
  var contentClassNames = (0, _classnames2.default)('extension-content', 'block', {
    'remove-border': showMacroInteractionDesignUpdates,
    'hide-content': showBodiedExtensionRendererView
  });
  var customContainerStyles = {
    width: '100%'
  };
  var newContentStyles = {};
  if (shouldBreakout) {
    var _calculateBreakoutSty = (0, _utils.calculateBreakoutStyles)({
        mode: node.attrs.layout,
        widthStateWidth: widthState.width,
        widthStateLineLength: widthState.lineLength
      }),
      type = _calculateBreakoutSty.type,
      breakoutStyles = (0, _objectWithoutProperties2.default)(_calculateBreakoutSty, _excluded);
    newContentStyles = _objectSpread({}, breakoutStyles);
    customContainerStyles = breakoutStyles;
  }
  newContentStyles = _objectSpread(_objectSpread({}, newContentStyles), _styles2.contentWrapper);
  var handleMouseEvent = function handleMouseEvent(didHover) {
    if (setIsNodeHovered) {
      setIsNodeHovered(didHover);
    }
  };
  return (0, _react2.jsx)(_react.Fragment, null, showMacroInteractionDesignUpdates && !isLivePageViewMode && (0, _react2.jsx)(_Lozenge.default, {
    isNodeSelected: isNodeSelected,
    isNodeHovered: isNodeHovered,
    isNodeNested: isNodeNested,
    node: node,
    showMacroInteractionDesignUpdates: showMacroInteractionDesignUpdates,
    customContainerStyles: customContainerStyles,
    setIsNodeHovered: setIsNodeHovered,
    isBodiedMacro: hasBody || isLegacyContentMacroExtension(node) && (0, _platformFeatureFlags.fg)('platform_editor_legacy_content_macro'),
    showLivePagesBodiedMacrosRendererView: showLivePagesBodiedMacrosRendererView,
    showUpdatedLivePages1PBodiedExtensionUI: showUpdatedLivePages1PBodiedExtensionUI,
    showBodiedExtensionRendererView: showBodiedExtensionRendererView,
    setShowBodiedExtensionRendererView: setShowBodiedExtensionRendererView,
    pluginInjectionApi: pluginInjectionApi
  }), (0, _react2.jsx)("div", {
    "data-testid": "extension-container",
    ref: handleRef,
    "data-layout": node.attrs.layout
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: classNames,
    css:
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _platformFeatureFlags.fg)('platform_editor_legacy_content_macro') ? _styles2.wrapperStyleInheritedCursor : _styles2.wrapperStyle
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: customContainerStyles,
    onMouseEnter: function onMouseEnter() {
      return handleMouseEvent(true);
    },
    onMouseLeave: function onMouseLeave() {
      return handleMouseEvent(false);
    }
  }, (0, _react2.jsx)("div", {
    "data-testid": "extension-overflow-wrapper"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: overflowClassNames
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
    ,
    css: _styles2.overflowWrapperStyles
  }, (0, _react2.jsx)("div", {
    className: 'extension-overlay',
    css: _styles.overlay
  }), (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    css: _styles2.header,
    contentEditable: false
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: headerClassNames
  }, !removeBorder && (0, _react2.jsx)(_Lozenge.default, {
    isNodeSelected: isNodeSelected,
    node: node,
    showMacroInteractionDesignUpdates: showMacroInteractionDesignUpdates,
    pluginInjectionApi: pluginInjectionApi
  }), children), hasBody &&
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
  (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    css: newContentStyles
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: newContentClassNames,
    "data-testid": "extension-new-content"
  }, (0, _react2.jsx)("div", {
    "data-testid": "extension-content"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: _styles2.content
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: contentClassNames,
    ref: !(0, _platformFeatureFlags.fg)('platform_editor_extension_fix_ssr_ref') ? handleContentDOMRef : undefined
  }, (0, _platformFeatureFlags.fg)('platform_editor_extension_fix_ssr_ref') && (0, _react2.jsx)("div", {
    ref: handleContentDOMRef
  }))))));
}
var Extension = function Extension(props) {
  var pluginInjectionApi = props.pluginInjectionApi;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['width']),
    widthState = _useSharedPluginState.widthState;

  // Ignored via go/ees005
  // eslint-disable-next-line react/jsx-props-no-spreading
  return (0, _react2.jsx)(ExtensionWithPluginState, (0, _extends2.default)({
    widthState: widthState
  }, props));
};
var _default = exports.default = (0, _ui.overflowShadow)(Extension, {
  overflowSelector: '.extension-overflow-wrapper'
});