"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ADFTraversor", {
  enumerable: true,
  get: function get() {
    return _traversor.default;
  }
});
Object.defineProperty(exports, "DONTLINKIFY_REGEXP", {
  enumerable: true,
  get: function get() {
    return _hyperlink.DONTLINKIFY_REGEXP;
  }
});
Object.defineProperty(exports, "ErrorReporter", {
  enumerable: true,
  get: function get() {
    return _errorReporter.ErrorReporter;
  }
});
Object.defineProperty(exports, "FILEPATH_REGEXP", {
  enumerable: true,
  get: function get() {
    return _hyperlink.FILEPATH_REGEXP;
  }
});
Object.defineProperty(exports, "GUTTER_SELECTOR", {
  enumerable: true,
  get: function get() {
    return _scrollGutter.GUTTER_SELECTOR;
  }
});
Object.defineProperty(exports, "GUTTER_SIZE_IN_PX", {
  enumerable: true,
  get: function get() {
    return _scrollGutter.GUTTER_SIZE_IN_PX;
  }
});
Object.defineProperty(exports, "GUTTER_SIZE_MOBILE_IN_PX", {
  enumerable: true,
  get: function get() {
    return _scrollGutter.GUTTER_SIZE_MOBILE_IN_PX;
  }
});
Object.defineProperty(exports, "LinkMatcher", {
  enumerable: true,
  get: function get() {
    return _hyperlink.LinkMatcher;
  }
});
Object.defineProperty(exports, "PROFILER_KEY", {
  enumerable: true,
  get: function get() {
    return _renderCount.PROFILER_KEY;
  }
});
Object.defineProperty(exports, "RenderCountProfiler", {
  enumerable: true,
  get: function get() {
    return _renderCount.RenderCountProfiler;
  }
});
Object.defineProperty(exports, "SEVERITY", {
  enumerable: true,
  get: function get() {
    return _analytics.SEVERITY;
  }
});
Object.defineProperty(exports, "SelectedState", {
  enumerable: true,
  get: function get() {
    return _nodes.SelectedState;
  }
});
Object.defineProperty(exports, "TTI_FROM_INVOCATION_SEVERITY_THRESHOLD_DEFAULTS", {
  enumerable: true,
  get: function get() {
    return _measureTti.TTI_FROM_INVOCATION_SEVERITY_THRESHOLD_DEFAULTS;
  }
});
Object.defineProperty(exports, "TTI_SEVERITY_THRESHOLD_DEFAULTS", {
  enumerable: true,
  get: function get() {
    return _measureTti.TTI_SEVERITY_THRESHOLD_DEFAULTS;
  }
});
Object.defineProperty(exports, "UNSUPPORTED_CONTENT_LEVEL_SEVERITY", {
  enumerable: true,
  get: function get() {
    return _getUnsupportedContentLevelData.UNSUPPORTED_CONTENT_LEVEL_SEVERITY;
  }
});
Object.defineProperty(exports, "UNSUPPORTED_CONTENT_LEVEL_SEVERITY_THRESHOLD_DEFAULTS", {
  enumerable: true,
  get: function get() {
    return _getUnsupportedContentLevelData.UNSUPPORTED_CONTENT_LEVEL_SEVERITY_THRESHOLD_DEFAULTS;
  }
});
Object.defineProperty(exports, "ZERO_WIDTH_JOINER", {
  enumerable: true,
  get: function get() {
    return _whitespace.ZERO_WIDTH_JOINER;
  }
});
Object.defineProperty(exports, "ZERO_WIDTH_SPACE", {
  enumerable: true,
  get: function get() {
    return _whitespace.ZERO_WIDTH_SPACE;
  }
});
Object.defineProperty(exports, "absoluteBreakoutWidth", {
  enumerable: true,
  get: function get() {
    return _breakout.absoluteBreakoutWidth;
  }
});
Object.defineProperty(exports, "alignAttributes", {
  enumerable: true,
  get: function get() {
    return _richMediaUtils.alignAttributes;
  }
});
Object.defineProperty(exports, "analyticsEventKey", {
  enumerable: true,
  get: function get() {
    return _analytics.analyticsEventKey;
  }
});
Object.defineProperty(exports, "autoJoinTr", {
  enumerable: true,
  get: function get() {
    return _autojoin.autoJoinTr;
  }
});
Object.defineProperty(exports, "bracketTyped", {
  enumerable: true,
  get: function get() {
    return _document.bracketTyped;
  }
});
Object.defineProperty(exports, "breakoutConsts", {
  enumerable: true,
  get: function get() {
    return _breakout.breakoutConsts;
  }
});
Object.defineProperty(exports, "browser", {
  enumerable: true,
  get: function get() {
    return _browser.browser;
  }
});
Object.defineProperty(exports, "calcBreakoutWidth", {
  enumerable: true,
  get: function get() {
    return _breakout.calcBreakoutWidth;
  }
});
Object.defineProperty(exports, "calcBreakoutWidthPx", {
  enumerable: true,
  get: function get() {
    return _breakout.calcBreakoutWidthPx;
  }
});
Object.defineProperty(exports, "calcBreakoutWithCustomWidth", {
  enumerable: true,
  get: function get() {
    return _breakout.calcBreakoutWithCustomWidth;
  }
});
Object.defineProperty(exports, "calcTableColumnWidths", {
  enumerable: true,
  get: function get() {
    return _table.calcTableColumnWidths;
  }
});
Object.defineProperty(exports, "calcWideWidth", {
  enumerable: true,
  get: function get() {
    return _breakout.calcWideWidth;
  }
});
Object.defineProperty(exports, "calculateBreakoutStyles", {
  enumerable: true,
  get: function get() {
    return _breakout.calculateBreakoutStyles;
  }
});
Object.defineProperty(exports, "calculateSnapPoints", {
  enumerable: true,
  get: function get() {
    return _richMediaUtils.calculateSnapPoints;
  }
});
Object.defineProperty(exports, "calculateToolbarPositionAboveSelection", {
  enumerable: true,
  get: function get() {
    return _calculateToolbarPosition.calculateToolbarPositionAboveSelection;
  }
});
Object.defineProperty(exports, "calculateToolbarPositionOnCellSelection", {
  enumerable: true,
  get: function get() {
    return _calculateToolbarPosition.calculateToolbarPositionOnCellSelection;
  }
});
Object.defineProperty(exports, "calculateToolbarPositionTrackHead", {
  enumerable: true,
  get: function get() {
    return _calculateToolbarPosition.calculateToolbarPositionTrackHead;
  }
});
Object.defineProperty(exports, "canApplyAnnotationOnRange", {
  enumerable: true,
  get: function get() {
    return _annotation.canApplyAnnotationOnRange;
  }
});
Object.defineProperty(exports, "canLinkBeCreatedInRange", {
  enumerable: true,
  get: function get() {
    return _hyperlink.canLinkBeCreatedInRange;
  }
});
Object.defineProperty(exports, "canRenderDatasource", {
  enumerable: true,
  get: function get() {
    return _datasource.canRenderDatasource;
  }
});
exports.checkNodeDown = checkNodeDown;
Object.defineProperty(exports, "clearMeasure", {
  enumerable: true,
  get: function get() {
    return _measure.clearMeasure;
  }
});
Object.defineProperty(exports, "closest", {
  enumerable: true,
  get: function get() {
    return _dom.closest;
  }
});
Object.defineProperty(exports, "closestElement", {
  enumerable: true,
  get: function get() {
    return _dom.closestElement;
  }
});
Object.defineProperty(exports, "compose", {
  enumerable: true,
  get: function get() {
    return _compose.compose;
  }
});
Object.defineProperty(exports, "containsAnyAnnotations", {
  enumerable: true,
  get: function get() {
    return _annotation.containsAnyAnnotations;
  }
});
Object.defineProperty(exports, "containsClassName", {
  enumerable: true,
  get: function get() {
    return _dom.containsClassName;
  }
});
Object.defineProperty(exports, "convertProsemirrorTableNodeToArrayOfRows", {
  enumerable: true,
  get: function get() {
    return _table.convertProsemirrorTableNodeToArrayOfRows;
  }
});
Object.defineProperty(exports, "countNodes", {
  enumerable: true,
  get: function get() {
    return _countNodes.countNodes;
  }
});
Object.defineProperty(exports, "createCompareNodes", {
  enumerable: true,
  get: function get() {
    return _compareNodes.createCompareNodes;
  }
});
Object.defineProperty(exports, "createNewParagraphAbove", {
  enumerable: true,
  get: function get() {
    return _commands.createNewParagraphAbove;
  }
});
Object.defineProperty(exports, "createNewParagraphBelow", {
  enumerable: true,
  get: function get() {
    return _commands.createNewParagraphBelow;
  }
});
Object.defineProperty(exports, "createParagraphNear", {
  enumerable: true,
  get: function get() {
    return _commands.createParagraphNear;
  }
});
Object.defineProperty(exports, "createRule", {
  enumerable: true,
  get: function get() {
    return _inputRules.createRule;
  }
});
Object.defineProperty(exports, "createWrapSelectionTransaction", {
  enumerable: true,
  get: function get() {
    return _createWrapSelectionTransaction.createWrapSelectionTransaction;
  }
});
Object.defineProperty(exports, "createWrappingJoinRule", {
  enumerable: true,
  get: function get() {
    return _inputRules.createWrappingJoinRule;
  }
});
Object.defineProperty(exports, "dedupe", {
  enumerable: true,
  get: function get() {
    return _dedupe.dedupe;
  }
});
Object.defineProperty(exports, "deleteEmptyParagraphAndMoveBlockUp", {
  enumerable: true,
  get: function get() {
    return _commands.deleteEmptyParagraphAndMoveBlockUp;
  }
});
Object.defineProperty(exports, "extractSliceFromStep", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.extractSliceFromStep;
  }
});
Object.defineProperty(exports, "filterChildrenBetween", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.filterChildrenBetween;
  }
});
Object.defineProperty(exports, "filterCommand", {
  enumerable: true,
  get: function get() {
    return _commands.filterCommand;
  }
});
Object.defineProperty(exports, "findAndTrackUnsupportedContentNodes", {
  enumerable: true,
  get: function get() {
    return _trackUnsupportedContent.findAndTrackUnsupportedContentNodes;
  }
});
Object.defineProperty(exports, "findChangedNodesFromTransaction", {
  enumerable: true,
  get: function get() {
    return _nodes.findChangedNodesFromTransaction;
  }
});
exports.findFarthestParentNode = void 0;
Object.defineProperty(exports, "findFilepaths", {
  enumerable: true,
  get: function get() {
    return _hyperlink.findFilepaths;
  }
});
Object.defineProperty(exports, "findNodePosByLocalIds", {
  enumerable: true,
  get: function get() {
    return _nodesByLocalIds.findNodePosByLocalIds;
  }
});
Object.defineProperty(exports, "flatmap", {
  enumerable: true,
  get: function get() {
    return _slice.flatmap;
  }
});
Object.defineProperty(exports, "floatingLayouts", {
  enumerable: true,
  get: function get() {
    return _richMediaUtils.floatingLayouts;
  }
});
Object.defineProperty(exports, "getAnalyticsAppearance", {
  enumerable: true,
  get: function get() {
    return _analytics.getAnalyticsAppearance;
  }
});
Object.defineProperty(exports, "getAnalyticsEditorAppearance", {
  enumerable: true,
  get: function get() {
    return _analytics.getAnalyticsEditorAppearance;
  }
});
Object.defineProperty(exports, "getAnalyticsEventSeverity", {
  enumerable: true,
  get: function get() {
    return _analytics.getAnalyticsEventSeverity;
  }
});
Object.defineProperty(exports, "getAnnotationIdsFromRange", {
  enumerable: true,
  get: function get() {
    return _annotation.getAnnotationIdsFromRange;
  }
});
Object.defineProperty(exports, "getAnnotationInlineNodeTypes", {
  enumerable: true,
  get: function get() {
    return _annotation.getAnnotationInlineNodeTypes;
  }
});
Object.defineProperty(exports, "getAnnotationMarksForPos", {
  enumerable: true,
  get: function get() {
    return _annotation.getAnnotationMarksForPos;
  }
});
Object.defineProperty(exports, "getChangedNodes", {
  enumerable: true,
  get: function get() {
    return _document.getChangedNodes;
  }
});
Object.defineProperty(exports, "getChildrenInfo", {
  enumerable: true,
  get: function get() {
    return _referentiality.getChildrenInfo;
  }
});
Object.defineProperty(exports, "getColumnWidths", {
  enumerable: true,
  get: function get() {
    return _table.getColumnWidths;
  }
});
Object.defineProperty(exports, "getDatasourceType", {
  enumerable: true,
  get: function get() {
    return _datasource.getDatasourceType;
  }
});
Object.defineProperty(exports, "getDistortedDurationMonitor", {
  enumerable: true,
  get: function get() {
    return _measureRender.getDistortedDurationMonitor;
  }
});
Object.defineProperty(exports, "getExtensionLozengeData", {
  enumerable: true,
  get: function get() {
    return _macro.getExtensionLozengeData;
  }
});
Object.defineProperty(exports, "getExtensionRenderer", {
  enumerable: true,
  get: function get() {
    return _extensionHandler.getExtensionRenderer;
  }
});
Object.defineProperty(exports, "getFragmentBackingArray", {
  enumerable: true,
  get: function get() {
    return _slice.getFragmentBackingArray;
  }
});
Object.defineProperty(exports, "getItemCounterDigitsSize", {
  enumerable: true,
  get: function get() {
    return _list.getItemCounterDigitsSize;
  }
});
Object.defineProperty(exports, "getLinkCreationAnalyticsEvent", {
  enumerable: true,
  get: function get() {
    return _hyperlink.getLinkCreationAnalyticsEvent;
  }
});
Object.defineProperty(exports, "getLinkDomain", {
  enumerable: true,
  get: function get() {
    return _hyperlink.getLinkDomain;
  }
});
Object.defineProperty(exports, "getModeFromTheme", {
  enumerable: true,
  get: function get() {
    return _getModeFromTheme.getModeFromTheme;
  }
});
Object.defineProperty(exports, "getNextBreakoutMode", {
  enumerable: true,
  get: function get() {
    return _breakout.getNextBreakoutMode;
  }
});
Object.defineProperty(exports, "getNodeName", {
  enumerable: true,
  get: function get() {
    return _referentiality.getNodeName;
  }
});
Object.defineProperty(exports, "getOrderFromOrderedListNode", {
  enumerable: true,
  get: function get() {
    return _list.getOrderFromOrderedListNode;
  }
});
Object.defineProperty(exports, "getPageElementCounts", {
  enumerable: true,
  get: function get() {
    return _pageElementCounts.getPageElementCounts;
  }
});
Object.defineProperty(exports, "getPerformanceOptions", {
  enumerable: true,
  get: function get() {
    return _getPerformanceOptions.getPerformanceOptions;
  }
});
Object.defineProperty(exports, "getPropsDifference", {
  enumerable: true,
  get: function get() {
    return _compareProps.getPropsDifference;
  }
});
Object.defineProperty(exports, "getRangeInlineNodeNames", {
  enumerable: true,
  get: function get() {
    return _annotation.getRangeInlineNodeNames;
  }
});
Object.defineProperty(exports, "getResponseEndTime", {
  enumerable: true,
  get: function get() {
    return _navigation.getResponseEndTime;
  }
});
Object.defineProperty(exports, "getShallowPropsDifference", {
  enumerable: true,
  get: function get() {
    return _compareProps.getShallowPropsDifference;
  }
});
Object.defineProperty(exports, "getStepRange", {
  enumerable: true,
  get: function get() {
    return _document.getStepRange;
  }
});
Object.defineProperty(exports, "getTTISeverity", {
  enumerable: true,
  get: function get() {
    return _measureTti.getTTISeverity;
  }
});
Object.defineProperty(exports, "getTimeSince", {
  enumerable: true,
  get: function get() {
    return _getPerformanceTiming.getTimeSince;
  }
});
Object.defineProperty(exports, "getTitle", {
  enumerable: true,
  get: function get() {
    return _breakout.getTitle;
  }
});
Object.defineProperty(exports, "getUnsupportedContentLevelData", {
  enumerable: true,
  get: function get() {
    return _getUnsupportedContentLevelData.getUnsupportedContentLevelData;
  }
});
Object.defineProperty(exports, "getWrappingOptions", {
  enumerable: true,
  get: function get() {
    return _createWrapSelectionTransaction.getWrappingOptions;
  }
});
Object.defineProperty(exports, "gridTypeForLayout", {
  enumerable: true,
  get: function get() {
    return _grid.gridTypeForLayout;
  }
});
Object.defineProperty(exports, "hasAnnotationMark", {
  enumerable: true,
  get: function get() {
    return _annotation.hasAnnotationMark;
  }
});
Object.defineProperty(exports, "hasDocAsParent", {
  enumerable: true,
  get: function get() {
    return _document.hasDocAsParent;
  }
});
Object.defineProperty(exports, "hasMergedCell", {
  enumerable: true,
  get: function get() {
    return _table.hasMergedCell;
  }
});
Object.defineProperty(exports, "hasNode", {
  enumerable: true,
  get: function get() {
    return _slice.hasNode;
  }
});
Object.defineProperty(exports, "hasVisibleContent", {
  enumerable: true,
  get: function get() {
    return _document.hasVisibleContent;
  }
});
Object.defineProperty(exports, "inputRuleWithAnalytics", {
  enumerable: true,
  get: function get() {
    return _inputRules.inputRuleWithAnalytics;
  }
});
Object.defineProperty(exports, "insertContentDeleteRange", {
  enumerable: true,
  get: function get() {
    return _commands.insertContentDeleteRange;
  }
});
Object.defineProperty(exports, "insertNewLineWithAnalytics", {
  enumerable: true,
  get: function get() {
    return _commands.insertNewLineWithAnalytics;
  }
});
exports.insideTableCell = void 0;
Object.defineProperty(exports, "isBulletList", {
  enumerable: true,
  get: function get() {
    return _list.isBulletList;
  }
});
Object.defineProperty(exports, "isElementInTableCell", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isElementInTableCell;
  }
});
Object.defineProperty(exports, "isEmptyDocument", {
  enumerable: true,
  get: function get() {
    return _document.isEmptyDocument;
  }
});
exports.isEmptyNode = void 0;
Object.defineProperty(exports, "isEmptyParagraph", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isEmptyParagraph;
  }
});
Object.defineProperty(exports, "isEmptySelectionAtEnd", {
  enumerable: true,
  get: function get() {
    return _commands.isEmptySelectionAtEnd;
  }
});
Object.defineProperty(exports, "isEmptySelectionAtStart", {
  enumerable: true,
  get: function get() {
    return _commands.isEmptySelectionAtStart;
  }
});
Object.defineProperty(exports, "isEmptyTextSelection", {
  enumerable: true,
  get: function get() {
    return _annotation.isEmptyTextSelection;
  }
});
Object.defineProperty(exports, "isFromCurrentDomain", {
  enumerable: true,
  get: function get() {
    return _hyperlink.isFromCurrentDomain;
  }
});
exports.isInEmptyLine = isInEmptyLine;
Object.defineProperty(exports, "isInLayoutColumn", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isInLayoutColumn;
  }
});
exports.isInListItem = void 0;
Object.defineProperty(exports, "isLastItemMediaGroup", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isLastItemMediaGroup;
  }
});
Object.defineProperty(exports, "isLinkInMatches", {
  enumerable: true,
  get: function get() {
    return _hyperlink.isLinkInMatches;
  }
});
Object.defineProperty(exports, "isLinkMark", {
  enumerable: true,
  get: function get() {
    return _nodes.isLinkMark;
  }
});
Object.defineProperty(exports, "isListItemNode", {
  enumerable: true,
  get: function get() {
    return _list.isListItemNode;
  }
});
Object.defineProperty(exports, "isListNode", {
  enumerable: true,
  get: function get() {
    return _list.isListNode;
  }
});
Object.defineProperty(exports, "isMediaNode", {
  enumerable: true,
  get: function get() {
    return _nodes.isMediaNode;
  }
});
Object.defineProperty(exports, "isNodeBeforeMediaNode", {
  enumerable: true,
  get: function get() {
    return _nodes.isNodeBeforeMediaNode;
  }
});
exports.isNodeEmpty = isNodeEmpty;
Object.defineProperty(exports, "isNodeSelectedOrInRange", {
  enumerable: true,
  get: function get() {
    return _nodes.isNodeSelectedOrInRange;
  }
});
Object.defineProperty(exports, "isOutdatedBrowser", {
  enumerable: true,
  get: function get() {
    return _outdatedBrowsers.isOutdatedBrowser;
  }
});
Object.defineProperty(exports, "isParagraph", {
  enumerable: true,
  get: function get() {
    return _nodes.isParagraph;
  }
});
Object.defineProperty(exports, "isParagraphNode", {
  enumerable: true,
  get: function get() {
    return _list.isParagraphNode;
  }
});
Object.defineProperty(exports, "isPastDate", {
  enumerable: true,
  get: function get() {
    return _date.isPastDate;
  }
});
Object.defineProperty(exports, "isPerformanceAPIAvailable", {
  enumerable: true,
  get: function get() {
    return _isPerformanceApiAvailable.isPerformanceAPIAvailable;
  }
});
Object.defineProperty(exports, "isPerformanceObserverAvailable", {
  enumerable: true,
  get: function get() {
    return _isPerformanceApiAvailable.isPerformanceObserverAvailable;
  }
});
Object.defineProperty(exports, "isPositionNearTableRow", {
  enumerable: true,
  get: function get() {
    return _table.isPositionNearTableRow;
  }
});
Object.defineProperty(exports, "isReferencedSource", {
  enumerable: true,
  get: function get() {
    return _referentiality.isReferencedSource;
  }
});
Object.defineProperty(exports, "isRichMediaInsideOfBlockNode", {
  enumerable: true,
  get: function get() {
    return _richMediaUtils.isRichMediaInsideOfBlockNode;
  }
});
Object.defineProperty(exports, "isSelectionEndOfParagraph", {
  enumerable: true,
  get: function get() {
    return _document.isSelectionEndOfParagraph;
  }
});
exports.isSelectionInsideLastNodeInDocument = isSelectionInsideLastNodeInDocument;
Object.defineProperty(exports, "isSupportedInParent", {
  enumerable: true,
  get: function get() {
    return _nodes.isSupportedInParent;
  }
});
Object.defineProperty(exports, "isText", {
  enumerable: true,
  get: function get() {
    return _nodes.isText;
  }
});
Object.defineProperty(exports, "isTextInput", {
  enumerable: true,
  get: function get() {
    return _isTextInput.isTextInput;
  }
});
Object.defineProperty(exports, "isTextSelection", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isTextSelection;
  }
});
Object.defineProperty(exports, "isType", {
  enumerable: true,
  get: function get() {
    return _nodes.isType;
  }
});
Object.defineProperty(exports, "isValidPosition", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.isValidPosition;
  }
});
Object.defineProperty(exports, "linkifyContent", {
  enumerable: true,
  get: function get() {
    return _hyperlink.linkifyContent;
  }
});
Object.defineProperty(exports, "mapChildren", {
  enumerable: true,
  get: function get() {
    return _slice.mapChildren;
  }
});
Object.defineProperty(exports, "mapElem", {
  enumerable: true,
  get: function get() {
    return _dom.mapElem;
  }
});
Object.defineProperty(exports, "mapFragment", {
  enumerable: true,
  get: function get() {
    return _slice.mapFragment;
  }
});
Object.defineProperty(exports, "mapSlice", {
  enumerable: true,
  get: function get() {
    return _slice.mapSlice;
  }
});
Object.defineProperty(exports, "maphElem", {
  enumerable: true,
  get: function get() {
    return _dom.maphElem;
  }
});
Object.defineProperty(exports, "measureRender", {
  enumerable: true,
  get: function get() {
    return _measureRender.measureRender;
  }
});
Object.defineProperty(exports, "measureTTI", {
  enumerable: true,
  get: function get() {
    return _measureTti.measureTTI;
  }
});
Object.defineProperty(exports, "nodeToJSON", {
  enumerable: true,
  get: function get() {
    return _nodes.nodeToJSON;
  }
});
Object.defineProperty(exports, "nodesBetweenChanged", {
  enumerable: true,
  get: function get() {
    return _document.nodesBetweenChanged;
  }
});
Object.defineProperty(exports, "nonNullable", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.nonNullable;
  }
});
Object.defineProperty(exports, "nonWrappedLayouts", {
  enumerable: true,
  get: function get() {
    return _richMediaUtils.nonWrappedLayouts;
  }
});
Object.defineProperty(exports, "normalizeUrl", {
  enumerable: true,
  get: function get() {
    return _hyperlink.normalizeUrl;
  }
});
Object.defineProperty(exports, "parsePx", {
  enumerable: true,
  get: function get() {
    return _dom.parsePx;
  }
});
Object.defineProperty(exports, "pluginFactory", {
  enumerable: true,
  get: function get() {
    return _pluginStateFactory.pluginFactory;
  }
});
exports.pmHistoryPluginKey = void 0;
Object.defineProperty(exports, "processRawValue", {
  enumerable: true,
  get: function get() {
    return _processRawValue.processRawValue;
  }
});
Object.defineProperty(exports, "removeBlockMarks", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.removeBlockMarks;
  }
});
Object.defineProperty(exports, "removeConnectedNodes", {
  enumerable: true,
  get: function get() {
    return _referentiality.removeConnectedNodes;
  }
});
Object.defineProperty(exports, "removeNestedEmptyEls", {
  enumerable: true,
  get: function get() {
    return _dom.removeNestedEmptyEls;
  }
});
Object.defineProperty(exports, "resolveOrder", {
  enumerable: true,
  get: function get() {
    return _list.resolveOrder;
  }
});
Object.defineProperty(exports, "sanitizeNodeForPrivacy", {
  enumerable: true,
  get: function get() {
    return _privacyFilter.sanitizeNodeForPrivacy;
  }
});
Object.defineProperty(exports, "setAllSelection", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.setAllSelection;
  }
});
Object.defineProperty(exports, "setCellSelection", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.setCellSelection;
  }
});
Object.defineProperty(exports, "setNodeSelection", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.setNodeSelection;
  }
});
Object.defineProperty(exports, "setTextSelection", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.setTextSelection;
  }
});
exports.shallowEqual = shallowEqual;
Object.defineProperty(exports, "shouldAutoLinkifyMatch", {
  enumerable: true,
  get: function get() {
    return _shouldAutoLinkifyTld.shouldAutoLinkifyMatch;
  }
});
Object.defineProperty(exports, "shouldForceTracking", {
  enumerable: true,
  get: function get() {
    return _shouldForceTracking.shouldForceTracking;
  }
});
Object.defineProperty(exports, "sniffUserBrowserExtensions", {
  enumerable: true,
  get: function get() {
    return _browserExtensions.sniffUserBrowserExtensions;
  }
});
Object.defineProperty(exports, "startMeasure", {
  enumerable: true,
  get: function get() {
    return _measure.startMeasure;
  }
});
Object.defineProperty(exports, "startMeasureReactNodeViewRendered", {
  enumerable: true,
  get: function get() {
    return _getPerformanceOptions.startMeasureReactNodeViewRendered;
  }
});
Object.defineProperty(exports, "stepAddsOneOf", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.stepAddsOneOf;
  }
});
Object.defineProperty(exports, "stepHasSlice", {
  enumerable: true,
  get: function get() {
    return _editorCoreUtils.stepHasSlice;
  }
});
Object.defineProperty(exports, "stopMeasure", {
  enumerable: true,
  get: function get() {
    return _measure.stopMeasure;
  }
});
Object.defineProperty(exports, "stopMeasureReactNodeViewRendered", {
  enumerable: true,
  get: function get() {
    return _getPerformanceOptions.stopMeasureReactNodeViewRendered;
  }
});
Object.defineProperty(exports, "timestampToIsoFormat", {
  enumerable: true,
  get: function get() {
    return _date.timestampToIsoFormat;
  }
});
Object.defineProperty(exports, "timestampToString", {
  enumerable: true,
  get: function get() {
    return _date.timestampToString;
  }
});
Object.defineProperty(exports, "timestampToTaskContext", {
  enumerable: true,
  get: function get() {
    return _date.timestampToTaskContext;
  }
});
Object.defineProperty(exports, "timestampToUTCDate", {
  enumerable: true,
  get: function get() {
    return _date.timestampToUTCDate;
  }
});
Object.defineProperty(exports, "toJSON", {
  enumerable: true,
  get: function get() {
    return _nodes.toJSON;
  }
});
Object.defineProperty(exports, "todayTimestampInUTC", {
  enumerable: true,
  get: function get() {
    return _date.todayTimestampInUTC;
  }
});
Object.defineProperty(exports, "transformNodeIntoListItem", {
  enumerable: true,
  get: function get() {
    return _insertNodeIntoOrderedList.transformNodeIntoListItem;
  }
});
Object.defineProperty(exports, "unwrap", {
  enumerable: true,
  get: function get() {
    return _dom.unwrap;
  }
});
Object.defineProperty(exports, "useComponentRenderTracking", {
  enumerable: true,
  get: function get() {
    return _useComponentRenderTracking.useComponentRenderTracking;
  }
});
Object.defineProperty(exports, "validNode", {
  enumerable: true,
  get: function get() {
    return _nodes.validNode;
  }
});
Object.defineProperty(exports, "validateADFEntity", {
  enumerable: true,
  get: function get() {
    return _validateUsingSpec.validateADFEntity;
  }
});
Object.defineProperty(exports, "validateNodes", {
  enumerable: true,
  get: function get() {
    return _nodes.validateNodes;
  }
});
Object.defineProperty(exports, "validationErrorHandler", {
  enumerable: true,
  get: function get() {
    return _validateUsingSpec.validationErrorHandler;
  }
});
Object.defineProperty(exports, "walkNextNode", {
  enumerable: true,
  get: function get() {
    return _commands.walkNextNode;
  }
});
Object.defineProperty(exports, "walkPrevNode", {
  enumerable: true,
  get: function get() {
    return _commands.walkPrevNode;
  }
});
Object.defineProperty(exports, "walkUpTreeUntil", {
  enumerable: true,
  get: function get() {
    return _dom.walkUpTreeUntil;
  }
});
Object.defineProperty(exports, "withFeatureFlaggedComponent", {
  enumerable: true,
  get: function get() {
    return _withFeatureFlaggedComponent.withFeatureFlaggedComponent;
  }
});
Object.defineProperty(exports, "withImageLoader", {
  enumerable: true,
  get: function get() {
    return _imageLoader.withImageLoader;
  }
});
Object.defineProperty(exports, "wrapSelectionIn", {
  enumerable: true,
  get: function get() {
    return _wrapSelectionIn.wrapSelectionIn;
  }
});
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _document = require("./document");
var _editorCoreUtils = require("./editor-core-utils");
var _shouldAutoLinkifyTld = require("./should-auto-linkify-tld");
var _annotation = require("./annotation");
var _macro = require("./macro");
var _browser = require("./browser");
var _errorReporter = require("./error-reporter");
var _date = require("./date");
var _imageLoader = require("./imageLoader");
var _breakout = require("./breakout");
var _nodes = require("./nodes");
var _pluginStateFactory = require("./plugin-state-factory");
var _slice = require("./slice");
var _dom = require("./dom");
var _traversor = _interopRequireDefault(require("./traversor"));
var _analytics = require("./analytics");
var _getUnsupportedContentLevelData = require("./unsupportedContent/get-unsupported-content-level-data");
var _trackUnsupportedContent = require("./track-unsupported-content");
var _measureRender = require("./performance/measure-render");
var _measure = require("./performance/measure");
var _measureTti = require("./performance/measure-tti");
var _isPerformanceApiAvailable = require("./performance/is-performance-api-available");
var _navigation = require("./performance/navigation");
var _extensionHandler = require("./extension-handler");
var _table = require("./table");
var _compareNodes = require("./compareNodes");
var _compose = require("./compose");
var _isTextInput = require("./is-text-input");
var _whitespace = require("../whitespace");
var _shouldForceTracking = require("./should-force-tracking");
var _getModeFromTheme = require("./getModeFromTheme");
var _getPerformanceOptions = require("./get-performance-options");
var _browserExtensions = require("./browser-extensions");
var _renderCount = require("./profiler/render-count");
var _validateUsingSpec = require("./validate-using-spec");
var _compareProps = require("./compare-props");
var _useComponentRenderTracking = require("./performance/hooks/use-component-render-tracking");
var _outdatedBrowsers = require("./outdated-browsers");
var _autojoin = require("./prosemirror/autojoin");
var _referentiality = require("./referentiality");
var _list = require("./list");
var _hyperlink = require("./hyperlink");
var _grid = require("./grid");
var _processRawValue = require("./processRawValue");
var _richMediaUtils = require("./rich-media-utils");
var _privacyFilter = require("./filter/privacy-filter");
var _datasource = require("./datasource");
var _commands = require("./commands");
var _scrollGutter = require("./scroll-gutter");
var _getPerformanceTiming = require("./performance/get-performance-timing");
var _countNodes = require("./count-nodes");
var _inputRules = require("./input-rules");
var _dedupe = require("./dedupe");
var _createWrapSelectionTransaction = require("./create-wrap-selection-transaction");
var _insertNodeIntoOrderedList = require("./insert-node-into-ordered-list");
var _wrapSelectionIn = require("./wrap-selection-in");
var _calculateToolbarPosition = require("./calculate-toolbar-position");
var _nodesByLocalIds = require("./nodes-by-localIds");
var _pageElementCounts = require("./page-element-counts");
var _withFeatureFlaggedComponent = require("./withFeatureFlaggedComponent");
// Disable no-re-export rule for entry point files
/* eslint-disable @atlaskit/editor/no-re-export */

/**
 * @private
 * @deprecated
 *
 * Use entry-point `@atlaskit/editor-common/utils/analytics` instead
 */

/**
 * @private
 * @deprecated
 *
 * Private API - should not be used. Use `@atlaskit/editor-common/is-performance-api-available` if required.
 *
 */

/**
 * @private
 * @deprecated
 *
 * Private API - should not be used. Use `@atlaskit/editor-common/performance/navigation` if required.
 */

// eslint-disable-next-line @repo/internal/deprecations/deprecation-ticket-required -- Ignored via go/ED-25883
/**
 * @deprecated - [ED-23844] moving to own entry point @atlaskit/editor-common/whitespace
 */

/**
 * @private
 * @deprecated
 *
 * Private API do not use
 */

// prosemirror-history does not export its plugin key
var pmHistoryPluginKey = exports.pmHistoryPluginKey = 'history$';

/**
 * @private
 * @deprecated
 *
 * Use `@atlaskit/editor-common/utils/document` entry-point instead.
 */

/**
 * @private
 * @deprecated
 *
 * Use `@atlaskit/editor-common/process-raw-value` entry-point instead.
 */

/**
 * @private
 * @deprecated
 *
 * Private API - do not use.
 */

// Ignored via go/ees005
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function shallowEqual() {
  var obj1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var obj2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var keys1 = Object.keys(obj1);
  var keys2 = Object.keys(obj2);
  return keys1.length === keys2.length && keys1.reduce(function (acc, key) {
    return acc && obj1[key] === obj2[key];
  }, true);
}
function isSelectionInsideLastNodeInDocument(selection) {
  var docNode = selection.$anchor.node(0);
  var rootNode = selection.$anchor.node(1);
  return docNode.lastChild === rootNode;
}
var isInListItem = exports.isInListItem = function isInListItem(state) {
  return (0, _utils.hasParentNodeOfType)(state.schema.nodes.listItem)(state.selection);
};

/**
 * Find the farthest node given a condition
 * @param predicate Function to check the node
 */
var findFarthestParentNode = exports.findFarthestParentNode = function findFarthestParentNode(predicate) {
  return function ($pos) {
    var candidate = null;
    for (var i = $pos.depth; i > 0; i--) {
      var node = $pos.node(i);
      if (predicate(node)) {
        candidate = {
          pos: i > 0 ? $pos.before(i) : 0,
          start: $pos.start(i),
          depth: i,
          node: node
        };
      }
    }
    return candidate;
  };
};
var insideTableCell = exports.insideTableCell = function insideTableCell(state) {
  var _state$schema$nodes = state.schema.nodes,
    tableCell = _state$schema$nodes.tableCell,
    tableHeader = _state$schema$nodes.tableHeader;
  return (0, _utils.hasParentNodeOfType)([tableCell, tableHeader])(state.selection);
};

/**
 * Traverse the document until an "ancestor" is found. Any nestable block can be an ancestor.
 */
// Ignored via go/ees005
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function findAncestorPosition(doc, pos) {
  var nestableBlocks = ['blockquote', 'bulletList', 'orderedList'];
  if (pos.depth === 1) {
    return pos;
  }
  var node = pos.node(pos.depth);
  var newPos = pos;
  while (pos.depth >= 1) {
    pos = doc.resolve(pos.before(pos.depth));
    node = pos.node(pos.depth);
    if (node && nestableBlocks.indexOf(node.type.name) !== -1) {
      newPos = pos;
    }
  }
  return newPos;
}
function checkNodeDown(selection, doc, filter) {
  var ancestorDepth = findAncestorPosition(doc, selection.$to).depth;

  // Top level node
  if (ancestorDepth === 0) {
    return false;
  }
  var res = doc.resolve(selection.$to.after(ancestorDepth));
  return res.nodeAfter ? filter(res.nodeAfter) : false;
}
var isEmptyNode = exports.isEmptyNode = function isEmptyNode(schema) {
  var _schema$nodes = schema.nodes,
    doc = _schema$nodes.doc,
    paragraph = _schema$nodes.paragraph,
    expand = _schema$nodes.expand,
    codeBlock = _schema$nodes.codeBlock,
    blockquote = _schema$nodes.blockquote,
    panel = _schema$nodes.panel,
    heading = _schema$nodes.heading,
    listItem = _schema$nodes.listItem,
    bulletList = _schema$nodes.bulletList,
    orderedList = _schema$nodes.orderedList,
    taskList = _schema$nodes.taskList,
    taskItem = _schema$nodes.taskItem,
    decisionList = _schema$nodes.decisionList,
    decisionItem = _schema$nodes.decisionItem,
    media = _schema$nodes.media,
    mediaGroup = _schema$nodes.mediaGroup,
    mediaSingle = _schema$nodes.mediaSingle;
  var _innerIsEmptyNode = function innerIsEmptyNode(node) {
    switch (node.type) {
      case media:
      case mediaGroup:
      case mediaSingle:
        return false;
      case paragraph:
      case codeBlock:
      case heading:
      case taskItem:
      case decisionItem:
        return node.content.size === 0;
      case expand:
      case blockquote:
      case panel:
      case listItem:
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return node.content.size === 2 && _innerIsEmptyNode(node.content.firstChild);
      case bulletList:
      case orderedList:
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return node.content.size === 4 && _innerIsEmptyNode(node.content.firstChild);
      case taskList:
      case decisionList:
        // Ignored via go/ees005
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return node.content.size === 2 && _innerIsEmptyNode(node.content.firstChild);
      case doc:
        var isEmpty = true;
        node.content.forEach(function (child) {
          isEmpty = isEmpty && _innerIsEmptyNode(child);
        });
        return isEmpty;
      default:
        return isNodeEmpty(node);
    }
  };
  return _innerIsEmptyNode;
};

/**
 * Checks if a node has any content. Ignores node that only contain empty block nodes.
 */
function isNodeEmpty(node) {
  if (node && node.textContent) {
    return false;
  }
  if (!node || !node.childCount || node.childCount === 1 && (0, _editorCoreUtils.isEmptyParagraph)(node.firstChild)) {
    return true;
  }
  var block = [];
  var nonBlock = [];
  node.forEach(function (child) {
    child.isInline ? nonBlock.push(child) : block.push(child);
  });
  return !nonBlock.length && !block.filter(function (childNode) {
    return !!childNode.childCount && !(childNode.childCount === 1 && (0, _editorCoreUtils.isEmptyParagraph)(childNode.firstChild)) || childNode.isAtom;
  }).length;
}
function isInEmptyLine(state) {
  var selection = state.selection;
  var _ref = selection,
    $cursor = _ref.$cursor,
    $anchor = _ref.$anchor;
  if (!$cursor) {
    return false;
  }
  var node = $cursor.node();
  if (!node) {
    return false;
  }
  return (0, _editorCoreUtils.isEmptyParagraph)(node) && (0, _document.hasDocAsParent)($anchor);
}