import React, { useEffect, useState } from 'react';
import Loadable from 'react-loadable';
import { getContextualToolbarItemsFromModule } from '../extensions';
import { nodeToJSON } from '../utils';
import { DropdownMenuItem } from './DropdownMenuItem';
const noop = () => null;
const isDefaultExport = mod => {
  return mod.hasOwnProperty('default');
};
const resolveExtensionIcon = async getIcon => {
  if (!getIcon) {
    return noop;
  }
  const maybeIcon = await getIcon();
  return isDefaultExport(maybeIcon) ? maybeIcon.default : maybeIcon;
};
const convertExtensionToDropdownMenuItem = ({
  item,
  disabled,
  node,
  extension
}) => {
  const ButtonIcon = item.icon ? Loadable({
    // Ignored via go/ees005
    // eslint-disable-next-line require-await
    loader: async () => resolveExtensionIcon(item.icon),
    loading: noop
  }) : undefined;
  let title = '';
  if (item.label) {
    title = item.label;
  } else if (typeof item.tooltip === 'string') {
    title = item.tooltip;
  } else if (item.ariaLabel) {
    title = item.ariaLabel;
  }
  item.disabled = (disabled === null || disabled === void 0 ? void 0 : disabled(item.key)) || false;
  return {
    title,
    icon: ButtonIcon ? /*#__PURE__*/React.createElement(ButtonIcon, {
      label: item.label || ''
    }) : undefined,
    disabled: item.disabled,
    onClick: () => {
      if (typeof item.action !== 'function') {
        throw new Error(`'action' of context toolbar item '${item.key}' is not a function`);
      }
      const targetNodeAdf = nodeToJSON(node);
      extension.extensionApi && item.action(targetNodeAdf, extension.extensionApi);
      return true;
    }
  };
};
const DropdownMenuExtensionItem = ({
  item,
  editorView,
  disabled,
  node,
  extension,
  dropdownOptions
}) => {
  const dropdownItem = convertExtensionToDropdownMenuItem({
    item,
    disabled,
    node,
    extension
  });
  if (!dropdownItem) {
    return null;
  }
  return /*#__PURE__*/React.createElement(DropdownMenuItem, {
    key: item.key,
    item: dropdownItem,
    editorView: editorView,
    hide: dropdownOptions.hide,
    dispatchCommand: dropdownOptions.dispatchCommand,
    showSelected: dropdownOptions.showSelected,
    intl: dropdownOptions.intl
  });
};
export const DropdownMenuExtensionItems = props => {
  const {
    node,
    editorView,
    extension,
    disabled,
    dropdownOptions
  } = props;

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [extensions, setExtensions] = useState([]);
  useEffect(() => {
    getExtensions();
    async function getExtensions() {
      const provider = await extension.extensionProvider;
      if (provider) {
        setExtensions(await provider.getExtensions());
      }
    }
  }, [extension.extensionProvider]);
  const nodeAdf = React.useMemo(() => nodeToJSON(node), [node]);
  const extensionItems = React.useMemo(() => {
    if (!extension.extensionApi) {
      return [];
    }
    return getContextualToolbarItemsFromModule(extensions, nodeAdf, extension.extensionApi);
  }, [extensions, nodeAdf, extension.extensionApi]);
  if (!extensionItems.length || !dropdownOptions) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, extensionItems.map((item, idx) => {
    if (!('key' in item)) {
      return null;
    }
    return /*#__PURE__*/React.createElement(DropdownMenuExtensionItem, {
      key: item.key,
      item: item,
      editorView: editorView,
      disabled: disabled,
      node: node,
      extension: extension,
      dropdownOptions: dropdownOptions
    });
  }));
};