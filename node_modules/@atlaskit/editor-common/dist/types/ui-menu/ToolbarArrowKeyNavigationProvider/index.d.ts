/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import type { ReactNode } from 'react';
import React from 'react';
import { jsx } from '@emotion/react';
import type { IntlShape } from 'react-intl-next/src/types';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { EditorAppearance } from '../../types';
import type { UseStickyToolbarType } from '../../ui';
export interface KeyDownHandlerContext {
    handleArrowLeft: () => void;
    handleArrowRight: () => void;
    handleTab: () => void;
}
export declare const KeyDownHandlerContext: React.Context<KeyDownHandlerContext>;
/**
 * This component is a wrapper of main toolbar which listens to keydown events of children
 * and handles left/right arrow key navigation for all focusable elements
 * @param
 * @returns
 */
export declare const ToolbarArrowKeyNavigationProvider: ({ children, editorView, childComponentSelector, handleEscape, disableArrowKeyNavigation, isShortcutToFocusToolbar, editorAppearance, useStickyToolbar, intl, }: {
    children: ReactNode;
    editorView?: EditorView | undefined;
    childComponentSelector: string;
    handleEscape?: ((event: KeyboardEvent) => void) | undefined;
    disableArrowKeyNavigation?: boolean | undefined;
    isShortcutToFocusToolbar?: ((event: KeyboardEvent) => boolean) | undefined;
    editorAppearance?: EditorAppearance | undefined;
    useStickyToolbar?: UseStickyToolbarType | undefined;
    intl: IntlShape;
}) => jsx.JSX.Element;
