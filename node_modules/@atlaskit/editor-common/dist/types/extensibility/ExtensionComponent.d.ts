import React from 'react';
import type { ADFEntity } from '@atlaskit/adf-utils/types';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { EventDispatcher } from '../event-dispatcher';
import type { ExtensionHandlers, ExtensionProvider, ReferenceEntity } from '../extensions';
import type { ProsemirrorGetPosHandler } from '../react-node-view';
import type { EditorAppearance } from '../types';
import type { ExtensionsPluginInjectionAPI, MacroInteractionDesignFeatureFlags } from './types';
export interface Props {
    editorView: EditorView;
    node: PMNode;
    getPos: ProsemirrorGetPosHandler;
    handleContentDOMRef: (node: HTMLElement | null) => void;
    extensionHandlers: ExtensionHandlers;
    extensionProvider?: Promise<ExtensionProvider>;
    references?: ReferenceEntity[];
    editorAppearance?: EditorAppearance;
    pluginInjectionApi: ExtensionsPluginInjectionAPI;
    eventDispatcher?: EventDispatcher;
    macroInteractionDesignFeatureFlags?: MacroInteractionDesignFeatureFlags;
    showLivePagesBodiedMacrosRendererView?: (node: ADFEntity) => boolean;
    showUpdatedLivePages1PBodiedExtensionUI?: (node: ADFEntity) => boolean;
    rendererExtensionHandlers?: ExtensionHandlers;
    isLivePageViewMode?: boolean;
}
export interface State {
    extensionProvider?: ExtensionProvider;
    extensionHandlersFromProvider?: ExtensionHandlers;
    _privateProps?: {
        __hideFrame?: boolean;
        __allowBodiedOverride?: boolean;
    };
    activeChildIndex?: number;
    isNodeHovered?: boolean;
    showBodiedExtensionRendererView?: boolean;
}
export type PropsNew = Omit<Props, 'extensionProvider'> & {
    extensionProvider?: ExtensionProvider;
    showBodiedExtensionRendererView?: boolean;
    setShowBodiedExtensionRendererView?: (showBodiedExtensionRendererView: boolean) => void;
};
export type StateNew = Omit<State, 'extensionProvider' | 'showBodiedExtensionRendererView'>;
export declare const ExtensionComponent: (props: Props) => React.JSX.Element;
