import React from 'react';
import { type ADFEntity } from '@atlaskit/adf-utils/types';
import type { Node as PmNode } from '@atlaskit/editor-prosemirror/model';
import type { EditorView, NodeView } from '@atlaskit/editor-prosemirror/view';
import type { EventDispatcher } from '../event-dispatcher';
import type { ExtensionHandlers } from '../extensions';
import type { PortalProviderAPI } from '../portal';
import type { ProviderFactory } from '../provider-factory';
import type { ForwardRef, getPosHandler } from '../react-node-view';
import ReactNodeView from '../react-node-view';
import type { EditorAppearance } from '../types';
import type { ExtensionsPluginInjectionAPI, MacroInteractionDesignFeatureFlags } from './types';
interface ExtensionNodeViewOptions {
    appearance?: EditorAppearance;
}
export declare class ExtensionNode extends ReactNodeView {
    ignoreMutation(mutation: MutationRecord | {
        type: 'selection';
        target: Node;
    }): boolean;
    getContentDOM(): {
        dom: HTMLDivElement;
    } | undefined;
    render(props: {
        providerFactory: ProviderFactory;
        extensionHandlers: ExtensionHandlers;
        extensionNodeViewOptions?: ExtensionNodeViewOptions;
        pluginInjectionApi: ExtensionsPluginInjectionAPI;
        macroInteractionDesignFeatureFlags?: MacroInteractionDesignFeatureFlags;
        showLivePagesBodiedMacrosRendererView?: (node: ADFEntity) => boolean;
        showUpdatedLivePages1PBodiedExtensionUI?: (node: ADFEntity) => boolean;
        rendererExtensionHandlers?: ExtensionHandlers;
    }, forwardRef: ForwardRef): React.JSX.Element;
}
export default function ExtensionNodeView(portalProviderAPI: PortalProviderAPI, eventDispatcher: EventDispatcher, providerFactory: ProviderFactory, extensionHandlers: ExtensionHandlers, extensionNodeViewOptions: ExtensionNodeViewOptions, pluginInjectionApi: ExtensionsPluginInjectionAPI, macroInteractionDesignFeatureFlags?: MacroInteractionDesignFeatureFlags, showLivePagesBodiedMacrosRendererView?: (node: ADFEntity) => boolean, showUpdatedLivePages1PBodiedExtensionUI?: (node: ADFEntity) => boolean, rendererExtensionHandlers?: ExtensionHandlers): (node: PmNode, view: EditorView, getPos: getPosHandler) => NodeView;
export {};
