/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import type { PaletteColor, PaletteTooltipMessages } from './Palettes/type';
interface Props {
    selectedColor: string | null;
    onClick: (value: string, label: string) => void;
    onKeyDown?: (value: string, label: string, event: React.KeyboardEvent) => void;
    cols?: number;
    className?: string;
    /**
     * paletteOptions is the prop, where any configuration related to
     * how palette should look or behave will be added.
     */
    paletteOptions: {
        palette: PaletteColor[];
        /**
         * If hexToPaletteColor is passed, it will be called to convert
         *  hexCodes passed in palette props to DST token.
         * Different color palette will set different mapping function.
         * Such as text and background color palette uses different
         *  mapping function to map tokens.
         */
        hexToPaletteColor?: (hexColor: string) => string | undefined;
        /**
         * We have pivoted from having logic inside ColorPalette determining
         *  which tooltip messages should be used to consumer of ColorPalette giving
         *  tooltip messages. Which is same as palette, where consumer determines which
         *  colors ColorPalette should render.
         * Same way now consumer will determine which tooltip messages should
         *  be using paletteColorTooltipMessages option.
         */
        paletteColorTooltipMessages?: PaletteTooltipMessages;
    };
}
declare const _default: React.FC<import("react-intl-next").WithIntlProps<Props & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<Props & WrappedComponentProps>;
};
export default _default;
