import React from 'react';
type SimpleEventHandler<T> = (event: T) => void;
export declare const OutsideClickTargetRefContext: React.Context<(el: HTMLElement | null) => void>;
export interface WithOutsideClickProps {
    handleClickOutside?: SimpleEventHandler<MouseEvent>;
    handleEscapeKeydown?: SimpleEventHandler<KeyboardEvent>;
    handleEnterKeydown?: SimpleEventHandler<KeyboardEvent>;
    targetRef?: any;
    closeOnTab?: boolean;
    /**
     * Use when you want the click handler to call on the capture phase instead of during bubbling.
     * This is useful when you're in a popup with interative UI elements that may disappear on click
     * like when toggling UI states
     */
    captureClick?: boolean;
}
export default function withReactEditorViewOuterListeners<P extends Object>(Component: React.ComponentType<React.PropsWithChildren<P>>): React.ComponentType<React.PropsWithChildren<P & WithOutsideClickProps>>;
export {};
