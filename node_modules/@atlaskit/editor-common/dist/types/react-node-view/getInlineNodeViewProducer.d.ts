/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import type { Node as PMNode } from '@atlaskit/editor-prosemirror/model';
import type { Decoration, EditorView, NodeView } from '@atlaskit/editor-prosemirror/view';
import type { PMPluginFactoryParams } from '../types';
export type InlineNodeViewComponentProps = {
    view: EditorView;
    getPos: () => GetPosReturn;
    node: PMNode;
};
type InlineNodeViewComponent<ExtraComponentProps> = React.ComponentType<React.PropsWithChildren<InlineNodeViewComponentProps & ExtraComponentProps>>;
export type CreateNodeViewOptions<ExtraComponentProps> = {
    nodeViewParams: NodeViewParams;
    pmPluginFactoryParams: PMPluginFactoryParams;
    Component: InlineNodeViewComponent<ExtraComponentProps>;
    extraComponentProps: ExtraComponentProps;
    extraNodeViewProps?: Pick<NodeView, 'stopEvent'>;
};
export declare const inlineNodeViewClassname = "inlineNodeView";
type NodeViewProducer = (node: PMNode, view: EditorView, getPos: () => GetPosReturn, decorations: readonly Decoration[]) => NodeView;
type GetPosReturn = number | undefined;
type NodeViewParams = {
    node: Parameters<NodeViewProducer>[0];
    view: Parameters<NodeViewProducer>[1];
    getPos: () => GetPosReturn;
    decorations: Parameters<NodeViewProducer>[3];
};
export declare function getInlineNodeViewProducer<ExtraComponentProps>({ pmPluginFactoryParams, Component, extraComponentProps, extraNodeViewProps, }: {
    pmPluginFactoryParams: PMPluginFactoryParams;
    Component: InlineNodeViewComponent<ExtraComponentProps>;
    extraComponentProps?: ExtraComponentProps;
    extraNodeViewProps?: Pick<NodeView, 'stopEvent'>;
}): NodeViewProducer;
export {};
