import type { Command, CommandDispatch, ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { EditorState, Transaction } from '@atlaskit/editor-prosemirror/state';
import type { DatePlugin, DateType } from '../types';
export declare const createDate: (isQuickInsertAction?: boolean) => (state: EditorState) => Transaction;
/** Focus input */
export declare const focusDateInput: () => (state: EditorState, dispatch: CommandDispatch | undefined) => boolean;
export declare const setDatePickerAt: (showDatePickerAt: number | null) => (state: EditorState, dispatch: (tr: Transaction) => void) => boolean;
export declare const closeDatePicker: () => Command;
export declare const closeDatePickerWithAnalytics: ({ date, pluginInjectionApi, }: {
    date?: DateType | undefined;
    pluginInjectionApi?: import("@atlaskit/editor-common/types").EditorInjectionAPI<"date", {
        pluginConfiguration: import("../types").DatePluginOptions | undefined;
        dependencies: [
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"analytics", {
                pluginConfiguration: import("@atlaskit/editor-plugin-analytics").AnalyticsPluginOptions;
                sharedState: {
                    createAnalyticsEvent: import("packages/analytics/analytics-next/dist/types").CreateUIAnalyticsEvent | null;
                    attachAnalyticsEvent: import("@atlaskit/editor-plugin-analytics").CreateAttachPayloadIntoTransaction | null;
                    performanceTracking: import("@atlaskit/editor-common/types").PerformanceTracking | undefined;
                };
                dependencies: [
                    import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"featureFlags", {
                        pluginConfiguration: import("@atlaskit/editor-common/types").FeatureFlags;
                        sharedState: import("@atlaskit/editor-common/types").FeatureFlags;
                    }, import("@atlaskit/editor-common/types").FeatureFlags>>
                ];
                actions: import("@atlaskit/editor-common/analytics").EditorAnalyticsAPI;
            }, import("@atlaskit/editor-plugin-analytics").AnalyticsPluginOptions>,
            import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorDisabled", {
                sharedState: import("@atlaskit/editor-plugin-editor-disabled").EditorDisabledPluginState;
            }, undefined>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"annotation", {
                pluginConfiguration: import("@atlaskit/editor-plugin-annotation").AnnotationProviders | undefined;
                sharedState: import("@atlaskit/editor-plugin-annotation").InlineCommentPluginState | undefined;
                dependencies: import("packages/editor/editor-plugin-annotation/dist/types/annotationPluginType").AnnotationPluginDependencies;
                actions: {
                    stripNonExistingAnnotations: (slice: import("prosemirror-model").Slice, state: EditorState) => boolean | undefined;
                    setInlineCommentDraftState: (drafting: boolean, inputMethod: import("@atlaskit/editor-plugin-annotation").InlineCommentInputMethod, targetType?: import("@atlaskit/editor-plugin-annotation").TargetType | undefined, targetNodeId?: string | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => Command;
                    showCommentForBlockNode: (node: import("prosemirror-model").Node | null, viewMethod?: import("@atlaskit/editor-common/analytics").VIEW_METHOD | undefined, isOpeningMediaCommentFromToolbar?: boolean | undefined) => Command;
                    hasAnyUnResolvedAnnotationInPage: (state: EditorState) => boolean;
                };
            }, import("@atlaskit/editor-plugin-annotation").AnnotationProviders | undefined>>,
            import("@atlaskit/editor-common/types").OptionalPlugin<import("@atlaskit/editor-common/types").NextEditorPluginFunctionOptionalConfigDefinition<"editorViewMode", {
                sharedState: import("@atlaskit/editor-plugin-editor-viewmode").EditorViewModePluginState | null;
                dependencies: [
                ];
                pluginConfiguration?: import("@atlaskit/editor-plugin-editor-viewmode").EditorViewModePluginOptions | undefined;
                commands: {
                    updateViewMode: (mode: import("@atlaskit/editor-plugin-editor-viewmode").ViewMode) => import("@atlaskit/editor-common/types").EditorCommand;
                    updateContentMode: (action: import("packages/editor/editor-plugin-editor-viewmode/dist/types/editorViewmodePluginType").UpdateContentModeAction) => import("@atlaskit/editor-common/types").EditorCommand;
                };
            }, import("@atlaskit/editor-plugin-editor-viewmode").EditorViewModePluginOptions | undefined>>
        ];
        sharedState: import("../types").DatePluginSharedState;
        commands: {
            insertDate: import("../types").InsertDate;
            deleteDate: import("@atlaskit/editor-common/types").EditorCommand;
        };
    }> | undefined;
}) => Command;
export declare const openDatePicker: () => Command;
