"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateToDOMvirtualization = exports.dateToDOM = exports.dateNodeSpec = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactIntlNext = require("react-intl-next");
var _adfSchema = require("@atlaskit/adf-schema");
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _utils = require("@atlaskit/editor-common/utils");
var _whitespace = require("@atlaskit/editor-common/whitespace");
var _colors = require("@atlaskit/theme/colors");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _utils2 = require("./utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isSSR = Boolean(process.env.REACT_SSR);
var intlRef;

/**
 * Wrapper for ADF date node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @nodeSpecException:toDOM patch
 * @returns
 */
var dateNodeSpec = exports.dateNodeSpec = function dateNodeSpec() {
  if (!(0, _experiments.editorExperiment)('platform_editor_vanilla_dom', true) && (isSSR || (0, _experiments.editorExperiment)('platform_editor_inline_node_virtualization', 'off'))) {
    return _adfSchema.date;
  }
  return _objectSpread(_objectSpread({}, _adfSchema.date), {}, {
    toDOM: dateToDOMvirtualization
  });
};
var dateToDOMvirtualization = exports.dateToDOMvirtualization = function dateToDOMvirtualization(node) {
  intlRef = intlRef || (0, _reactIntlNext.createIntl)({
    locale: document.documentElement.lang || 'en-US'
  });
  var timestamp = node.attrs.timestamp;
  var displayString = (0, _utils.timestampToString)(timestamp, intlRef);
  var wrapperAttrs = {
    class: 'date-lozenger-container',
    'data-node-type': 'date',
    'data-timestamp': timestamp,
    'aria-busy': 'true'
  };
  var attrs = {
    style: (0, _lazyNodeView.convertToInlineCss)({
      // Taken from @atlaskit/date Component
      backgroundColor: "var(--ds-background-neutral, ".concat(_colors.N30A, ")"),
      color: "var(--ds-text, ".concat(_colors.N800, ")"),
      borderRadius: "var(--ds-border-radius-100, 4px)",
      padding: "var(--ds-space-025, 2px)".concat(" ", "var(--ds-space-050, 4px)"),
      margin: '0 1px'
    })
  };
  return ['span', wrapperAttrs, ['span', attrs, displayString]];
};
var dateToDOM = exports.dateToDOM = function dateToDOM(node, state, getPos, intl) {
  var timestamp = node.attrs.timestamp;
  var pos = getPos === null || getPos === void 0 ? void 0 : getPos();
  var _getDateInformation = (0, _utils2.getDateInformation)(timestamp, intl, state, pos),
    displayString = _getDateInformation.displayString,
    color = _getDateInformation.color;
  var nodeWrapperAttrs = {
    contenteditable: 'false',
    timestamp: timestamp,
    class: 'dateView-content-wrap inlineNodeView',
    'data-prosemirror-content-type': 'node',
    'data-prosemirror-node-name': 'date',
    'data-prosemirror-node-inline': 'true',
    'data-prosemirror-node-view-type': 'vanilla',
    draggable: 'true'
  };
  var wrapperAttrs = {
    class: 'date-lozenger-container',
    'data-node-type': 'date',
    'data-timestamp': timestamp
  };
  var attrs = color === undefined ? {} : {
    class: "date-node-color-".concat(color)
  };
  return ['span', nodeWrapperAttrs, ['span', {
    class: 'zeroWidthSpaceContainer'
  }, ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, _whitespace.ZERO_WIDTH_SPACE]], ['span', wrapperAttrs, ['span', attrs, displayString]], ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, _whitespace.ZERO_WIDTH_SPACE]];
};