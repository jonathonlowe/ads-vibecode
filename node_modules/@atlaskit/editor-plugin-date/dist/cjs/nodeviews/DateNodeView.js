"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateNodeView = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _bindEventListener = require("bind-event-listener");
var _monitoring = require("@atlaskit/editor-common/monitoring");
var _model = require("@atlaskit/editor-prosemirror/model");
var _actions = require("../pm-plugins/actions");
var _dateNodeSpec = require("./dateNodeSpec");
var DateNodeView = exports.DateNodeView = /*#__PURE__*/function () {
  function DateNodeView(node, view, getPos, intl) {
    (0, _classCallCheck2.default)(this, DateNodeView);
    (0, _defineProperty2.default)(this, "dom", document.createElement('span'));
    this.node = node;
    try {
      var spec = (0, _dateNodeSpec.dateToDOM)(node, view.state, getPos, intl);
      var _DOMSerializer$render = _model.DOMSerializer.renderSpec(document, spec),
        dom = _DOMSerializer$render.dom;
      if (!(dom instanceof HTMLElement)) {
        throw new Error('DOMSerializer.renderSpec() did not return HTMLElement');
      }
      this.dom = dom;
      this.clickUnBind = (0, _bindEventListener.bind)(this.dom, {
        type: 'click',
        listener: function listener(event) {
          event.stopImmediatePropagation();
          var state = view.state,
            dispatch = view.dispatch;
          (0, _actions.setDatePickerAt)(state.selection.from)(state, dispatch);
        }
      });
    } catch (error) {
      DateNodeView.logError(error instanceof Error ? error : new Error('Unknown error on DateNodeView constructor'));
      this.renderFallback();
    }
  }
  return (0, _createClass2.default)(DateNodeView, [{
    key: "renderFallback",
    value: function renderFallback() {
      var fallbackElement = document.createElement('span');
      fallbackElement.innerText = this.node.attrs.timestamp;
      this.dom.appendChild(fallbackElement);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.clickUnBind && this.clickUnBind();
    }
  }], [{
    key: "logError",
    value: function logError(error) {
      void (0, _monitoring.logException)(error, {
        location: 'editor-plugin-date/DateNodeView'
      });
    }
  }]);
}();