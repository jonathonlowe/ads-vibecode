import { createIntl } from 'react-intl-next';
import { date } from '@atlaskit/adf-schema';
import { convertToInlineCss } from '@atlaskit/editor-common/lazy-node-view';
import { timestampToString } from '@atlaskit/editor-common/utils';
import { ZERO_WIDTH_SPACE } from '@atlaskit/editor-common/whitespace';
import { N30A, N800 } from '@atlaskit/theme/colors';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { getDateInformation } from './utils';
const isSSR = Boolean(process.env.REACT_SSR);
let intlRef;

/**
 * Wrapper for ADF date node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @nodeSpecException:toDOM patch
 * @returns
 */
export const dateNodeSpec = () => {
  if (!editorExperiment('platform_editor_vanilla_dom', true) && (isSSR || editorExperiment('platform_editor_inline_node_virtualization', 'off'))) {
    return date;
  }
  return {
    ...date,
    toDOM: dateToDOMvirtualization
  };
};
export const dateToDOMvirtualization = node => {
  intlRef = intlRef || createIntl({
    locale: document.documentElement.lang || 'en-US'
  });
  const timestamp = node.attrs.timestamp;
  const displayString = timestampToString(timestamp, intlRef);
  const wrapperAttrs = {
    class: 'date-lozenger-container',
    'data-node-type': 'date',
    'data-timestamp': timestamp,
    'aria-busy': 'true'
  };
  const attrs = {
    style: convertToInlineCss({
      // Taken from @atlaskit/date Component
      backgroundColor: `var(--ds-background-neutral, ${N30A})`,
      color: `var(--ds-text, ${N800})`,
      borderRadius: "var(--ds-border-radius-100, 4px)",
      padding: `${"var(--ds-space-025, 2px)"} ${"var(--ds-space-050, 4px)"}`,
      margin: '0 1px'
    })
  };
  return ['span', wrapperAttrs, ['span', attrs, displayString]];
};
export const dateToDOM = (node, state, getPos, intl) => {
  const timestamp = node.attrs.timestamp;
  const pos = getPos === null || getPos === void 0 ? void 0 : getPos();
  const {
    displayString,
    color
  } = getDateInformation(timestamp, intl, state, pos);
  const nodeWrapperAttrs = {
    contenteditable: 'false',
    timestamp: timestamp,
    class: 'dateView-content-wrap inlineNodeView',
    'data-prosemirror-content-type': 'node',
    'data-prosemirror-node-name': 'date',
    'data-prosemirror-node-inline': 'true',
    'data-prosemirror-node-view-type': 'vanilla',
    draggable: 'true'
  };
  const wrapperAttrs = {
    class: 'date-lozenger-container',
    'data-node-type': 'date',
    'data-timestamp': timestamp
  };
  const attrs = color === undefined ? {} : {
    class: `date-node-color-${color}`
  };
  return ['span', nodeWrapperAttrs, ['span', {
    class: 'zeroWidthSpaceContainer'
  }, ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, ZERO_WIDTH_SPACE]], ['span', wrapperAttrs, ['span', attrs, displayString]], ['span', {
    class: 'inlineNodeViewAddZeroWidthSpace'
  }, ZERO_WIDTH_SPACE]];
};