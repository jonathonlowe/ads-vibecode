/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { injectIntl } from 'react-intl-next';
import Calendar from '@atlaskit/calendar';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { dateMessages as messages } from '@atlaskit/editor-common/messages';
import { PlainOutsideClickTargetRefContext, Popup, withOuterListeners } from '@atlaskit/editor-common/ui';
import { timestampToIsoFormat, timestampToUTCDate } from '@atlaskit/editor-common/utils';
import { akEditorFloatingDialogZIndex } from '@atlaskit/editor-shared-styles';
import { fg } from '@atlaskit/platform-feature-flags';
import { N0, N60A } from '@atlaskit/theme/colors';
import VisuallyHidden from '@atlaskit/visually-hidden';
const PopupWithListeners = withOuterListeners(Popup);
import DatePickerInput from './date-picker-input';

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
const popupContentWrapper = null;
// eslint-disable-next-line @repo/internal/react/no-class-components
class DatePicker extends React.Component {
  constructor(props) {
    super(props);

    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    _defineProperty(this, "handleNewDate", date => {
      this.props.onTextChanged(date);
      this.setState({
        latestValidDate: date
      });
    });
    _defineProperty(this, "handleKeyboardSubmitDate", date => {
      this.props.onSelect(date, INPUT_METHOD.KEYBOARD);
    });
    _defineProperty(this, "handleEmptySubmitDate", () => {
      this.props.onDelete();
    });
    _defineProperty(this, "handleOnChange", ({
      day,
      month,
      year
    }) => {
      const date = {
        day,
        month,
        year
      };
      this.setState({
        latestValidDate: date
      });
    });
    _defineProperty(this, "closeDatePickerWithAnalytics", () => {
      this.props.closeDatePickerWithAnalytics({
        date: this.state.latestValidDate
      });
    });
    _defineProperty(this, "handleRef", ref => {
      const elm = ref;
      if (elm) {
        elm.focus();
      }
    });
    const timestamp = props.element.getAttribute('timestamp');
    if (timestamp) {
      // Warning: The 'Date' return type of timestampToUTCDate() is not a JS date, it's more similar
      // to the DateType type
      const {
        day,
        month,
        year
      } = timestampToUTCDate(timestamp);
      const date = {
        day,
        month,
        year
      };
      this.state = {
        selected: [timestampToIsoFormat(timestamp)],
        date,
        latestValidDate: date
      };
    }
  }
  render() {
    const {
      element,
      onSelect,
      mountTo,
      boundariesElement,
      scrollableElement,
      intl,
      dispatchAnalyticsEvent,
      isNew,
      autoFocus,
      weekStartDay
    } = this.props;
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const timestamp = element.getAttribute('timestamp');
    if (this.state === null) {
      // Without this, you can blow up the page by slowing down cpu, opening date, typing after date
      // then clicking on date lozenge and typing quickly before it opens
      return null;
    }
    const {
      date,
      selected,
      latestValidDate
    } = this.state;
    const {
      day,
      month,
      year
    } = latestValidDate;
    if (!timestamp) {
      return null;
    }
    return /*#__PURE__*/React.createElement(PopupWithListeners
    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    , {
      target: element,
      offset: [0, 8],
      fitHeight: 370,
      fitWidth: 340,
      handleClickOutside: this.closeDatePickerWithAnalytics,
      handleEscapeKeydown: this.closeDatePickerWithAnalytics,
      zIndex: akEditorFloatingDialogZIndex,
      mountTo: mountTo,
      boundariesElement: boundariesElement,
      scrollableElement: scrollableElement,
      preventOverflow: true
    }, fg('editor_a11y_announce_date_picker_open') && /*#__PURE__*/React.createElement(VisuallyHidden, {
      "aria-atomic": true,
      role: "alert"
    }, intl.formatMessage(messages.datePickerOpenedAlert)), /*#__PURE__*/React.createElement(PlainOutsideClickTargetRefContext.Consumer, null, setOutsideClickTargetRef => /*#__PURE__*/React.createElement("div", {
      ref: setOutsideClickTargetRef,
      className: ax(["_2rko1sit _ca0qv77o _n3tdv77o _19bvv77o _u5f3v77o _16qsreen _bfhk1bhr"])
    }, /*#__PURE__*/React.createElement(DatePickerInput, {
      date: date,
      onNewDate: this.handleNewDate,
      onSubmitDate: this.handleKeyboardSubmitDate,
      onEmptySubmit: this.handleEmptySubmitDate,
      locale: intl.locale,
      dispatchAnalyticsEvent: dispatchAnalyticsEvent,
      autoFocus: autoFocus,
      autoSelectAll: isNew
    }), /*#__PURE__*/React.createElement(Calendar, {
      onChange: this.handleOnChange,
      onSelect: date => onSelect(date, INPUT_METHOD.PICKER),
      day: day,
      month: month,
      year: year,
      selected: selected,
      ref: this.handleRef,
      weekStartDay: weekStartDay,
      testId: 'datepicker'
    }))));
  }
}
export default injectIntl(DatePicker);