"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.annotationWithToDOMFix = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _adfSchema = require("@atlaskit/adf-schema");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Annotation mark lifted from adf-schema with modified `toDOM` to work with
 * existing nodeview
 */
var annotationWithToDOMFix = exports.annotationWithToDOMFix = _objectSpread(_objectSpread({}, _adfSchema.annotation), {}, {
  toDOM: function toDOM(node) {
    return ['span', {
      // Needs id as a reference point
      id: node.attrs.id,
      // Used to determine if the annotation is active
      annotationType: node.attrs.annotationType,
      // Below are used for prosemirror (ie. copy/paste behaviour)
      'data-mark-type': 'annotation',
      'data-mark-annotation-type': node.attrs.annotationType,
      'data-id': node.attrs.id
    }, 0];
  }
});