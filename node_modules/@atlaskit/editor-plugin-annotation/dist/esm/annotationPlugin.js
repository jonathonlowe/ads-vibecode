import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { setInlineCommentDraftState, showInlineCommentForBlockNode } from './editor-commands';
import { annotationWithToDOMFix } from './nodeviews/annotationMark';
import { inlineCommentPlugin } from './pm-plugins/inline-comment';
import { keymapPlugin } from './pm-plugins/keymap';
import { buildSuppressedToolbar, buildToolbar, shouldSuppressFloatingToolbar } from './pm-plugins/toolbar';
import { getPluginState, hasAnyUnResolvedAnnotationInPage, stripNonExistingAnnotations } from './pm-plugins/utils';
import { InlineCommentView } from './ui/InlineCommentView';
export var annotationPlugin = function annotationPlugin(_ref) {
  var _api$featureFlags, _api$analytics;
  var annotationProviders = _ref.config,
    api = _ref.api;
  var featureFlags = api === null || api === void 0 || (_api$featureFlags = api.featureFlags) === null || _api$featureFlags === void 0 ? void 0 : _api$featureFlags.sharedState.currentState();
  return {
    name: 'annotation',
    marks: function marks() {
      return [{
        name: 'annotation',
        mark: annotationWithToDOMFix
      }];
    },
    actions: {
      hasAnyUnResolvedAnnotationInPage: hasAnyUnResolvedAnnotationInPage,
      stripNonExistingAnnotations: stripNonExistingAnnotations,
      setInlineCommentDraftState: setInlineCommentDraftState(api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions, annotationProviders === null || annotationProviders === void 0 ? void 0 : annotationProviders.inlineComment.supportedBlockNodes),
      showCommentForBlockNode: showInlineCommentForBlockNode(annotationProviders === null || annotationProviders === void 0 ? void 0 : annotationProviders.inlineComment.supportedBlockNodes)
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return undefined;
      }
      var pluginState = getPluginState(editorState) || undefined;
      var clonedPluginState = Object.assign({}, pluginState);
      clonedPluginState === null || clonedPluginState === void 0 || delete clonedPluginState.featureFlagsPluginState;
      return clonedPluginState;
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'annotation',
        plugin: function plugin(_ref2) {
          var dispatch = _ref2.dispatch;
          if (annotationProviders) {
            var _api$analytics2;
            return inlineCommentPlugin({
              dispatch: dispatch,
              provider: annotationProviders.inlineComment,
              editorAnalyticsAPI: api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions,
              featureFlagsPluginState: featureFlags,
              selectCommentExperience: annotationProviders.selectCommentExperience,
              annotationManager: annotationProviders.annotationManager,
              api: api
            });
          }
          return;
        }
      }, {
        name: 'annotationKeymap',
        plugin: function plugin() {
          if (annotationProviders) {
            var _api$analytics3;
            return keymapPlugin(api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions);
          }
          return;
        }
      }];
    },
    pluginsOptions: {
      floatingToolbar: function floatingToolbar(state) {
        if (!fg('platform_editor_fix_toolbar_comment_jump')) {
          return;
        }
        var pluginState = getPluginState(state);
        var bookmark = pluginState === null || pluginState === void 0 ? void 0 : pluginState.bookmark;
        if (shouldSuppressFloatingToolbar({
          state: state,
          bookmark: bookmark
        })) {
          return buildSuppressedToolbar(state);
        }
      },
      selectionToolbar: function selectionToolbar(state, intl) {
        if (!annotationProviders) {
          return;
        }
        var pluginState = getPluginState(state);
        if (pluginState && pluginState.isVisible && !pluginState.bookmark && !pluginState.mouseData.isSelecting) {
          var _api$analytics4;
          var isToolbarAbove = annotationProviders.inlineComment.isToolbarAbove;
          var toolbarConfig = buildToolbar(api === null || api === void 0 || (_api$analytics4 = api.analytics) === null || _api$analytics4 === void 0 ? void 0 : _api$analytics4.actions)({
            state: state,
            intl: intl,
            isToolbarAbove: isToolbarAbove,
            api: api,
            createCommentExperience: annotationProviders.createCommentExperience,
            annotationManager: annotationProviders.annotationManager
          });
          if (!toolbarConfig) {
            return undefined;
          } else {
            return _objectSpread(_objectSpread({}, toolbarConfig), {}, {
              rank: editorExperiment('platform_editor_controls', 'variant1') ? 1 : undefined
            });
          }
        }
      }
    },
    contentComponent: function contentComponent(_ref3) {
      var editorView = _ref3.editorView,
        dispatchAnalyticsEvent = _ref3.dispatchAnalyticsEvent;
      if (!annotationProviders) {
        return null;
      }
      return /*#__PURE__*/React.createElement(AnnotationContentComponent, {
        api: api,
        editorView: editorView,
        annotationProviders: annotationProviders,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent
      });
    }
  };
};
function AnnotationContentComponent(_ref4) {
  var _api$analytics5;
  var api = _ref4.api,
    editorView = _ref4.editorView,
    annotationProviders = _ref4.annotationProviders,
    dispatchAnalyticsEvent = _ref4.dispatchAnalyticsEvent;
  var _useSharedPluginState = useSharedPluginState(api, ['annotation']),
    inlineCommentState = _useSharedPluginState.annotationState;
  if (inlineCommentState && !inlineCommentState.isVisible) {
    return null;
  }
  return /*#__PURE__*/React.createElement("div", {
    "data-editor-popup": "true"
  }, /*#__PURE__*/React.createElement(InlineCommentView, {
    providers: annotationProviders,
    editorView: editorView,
    dispatchAnalyticsEvent: dispatchAnalyticsEvent,
    editorAnalyticsAPI: api === null || api === void 0 || (_api$analytics5 = api.analytics) === null || _api$analytics5 === void 0 ? void 0 : _api$analytics5.actions,
    editorAPI: api
  }));
}