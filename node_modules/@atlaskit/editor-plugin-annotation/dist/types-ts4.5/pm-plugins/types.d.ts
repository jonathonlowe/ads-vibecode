import type { EditorAnalyticsAPI, VIEW_METHOD } from '@atlaskit/editor-common/analytics';
import type { AnnotationManager } from '@atlaskit/editor-common/annotation';
import type { Dispatch } from '@atlaskit/editor-common/event-dispatcher';
import type { FeatureFlags } from '@atlaskit/editor-common/types';
import type { EditorState, SelectionBookmark } from '@atlaskit/editor-prosemirror/state';
import type { DecorationSet } from '@atlaskit/editor-prosemirror/view';
import type { AnnotationPluginInjectionAPI } from '../annotationPluginType';
import type { AnnotationInfo, AnnotationProviders, InlineCommentAnnotationProvider, TargetType } from '../types';
export declare enum ACTIONS {
    UPDATE_INLINE_COMMENT_STATE = 0,
    SET_INLINE_COMMENT_DRAFT_STATE = 1,
    INLINE_COMMENT_UPDATE_MOUSE_STATE = 2,
    INLINE_COMMENT_CLEAR_DIRTY_MARK = 3,
    ADD_INLINE_COMMENT = 4,
    INLINE_COMMENT_SET_VISIBLE = 5,
    CLOSE_COMPONENT = 6,
    SET_SELECTED_ANNOTATION = 7,
    SET_HOVERED_ANNOTATION = 8
}
export interface InlineCommentPluginOptions {
    dispatch: Dispatch;
    provider: InlineCommentAnnotationProvider;
    editorAnalyticsAPI: EditorAnalyticsAPI | undefined;
    featureFlagsPluginState?: FeatureFlags;
    selectCommentExperience?: AnnotationProviders['selectCommentExperience'];
    annotationManager?: AnnotationManager;
    api?: AnnotationPluginInjectionAPI;
}
export interface InlineCommentMouseData {
    isSelecting: boolean;
}
export type InlineCommentMap = {
    [key: string]: boolean;
};
export type InlineCommentAction = {
    type: ACTIONS.UPDATE_INLINE_COMMENT_STATE;
    data: InlineCommentMap;
} | {
    type: ACTIONS.SET_INLINE_COMMENT_DRAFT_STATE;
    data: {
        drafting: boolean;
        editorState: EditorState;
        targetType?: TargetType;
        supportedBlockNodes?: string[];
        targetNodeId?: string;
        isOpeningMediaCommentFromToolbar?: boolean;
    };
} | {
    type: ACTIONS.INLINE_COMMENT_UPDATE_MOUSE_STATE;
    data: {
        mouseData: InlineCommentMouseData;
    };
} | {
    type: ACTIONS.INLINE_COMMENT_CLEAR_DIRTY_MARK;
} | {
    type: ACTIONS.CLOSE_COMPONENT;
} | {
    type: ACTIONS.ADD_INLINE_COMMENT;
    data: {
        drafting: boolean;
        inlineComments: InlineCommentMap;
        editorState: EditorState;
        selectedAnnotations: AnnotationInfo[];
    };
} | {
    type: ACTIONS.INLINE_COMMENT_SET_VISIBLE;
    data: {
        isVisible: boolean;
    };
} | {
    type: ACTIONS.SET_SELECTED_ANNOTATION;
    data: {
        selectedAnnotations: AnnotationInfo[];
        selectAnnotationMethod?: VIEW_METHOD;
        isOpeningMediaCommentFromToolbar?: boolean;
    };
} | {
    type: ACTIONS.SET_HOVERED_ANNOTATION;
    data: {
        hoveredAnnotations: AnnotationInfo[];
        selectAnnotationMethod?: VIEW_METHOD;
    };
};
export type InlineCommentPluginState = {
    annotations: InlineCommentMap;
    selectedAnnotations: AnnotationInfo[];
    dirtyAnnotations?: boolean;
    mouseData: InlineCommentMouseData;
    draftDecorationSet?: DecorationSet;
    bookmark?: SelectionBookmark;
    hoveredAnnotations?: AnnotationInfo[];
    disallowOnWhitespace: boolean;
    isInlineCommentViewClosed: boolean;
    isVisible: boolean;
    skipSelectionHandling: boolean;
    featureFlagsPluginState?: FeatureFlags;
    isDrafting: boolean;
    targetNodeId?: string;
    selectAnnotationMethod?: VIEW_METHOD;
    isOpeningMediaCommentFromToolbar?: boolean;
    selectCommentExperience?: AnnotationProviders['selectCommentExperience'];
};
