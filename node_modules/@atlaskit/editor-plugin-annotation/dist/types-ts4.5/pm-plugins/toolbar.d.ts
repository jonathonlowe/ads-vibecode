import type { IntlShape } from 'react-intl-next';
import type { EditorAnalyticsAPI } from '@atlaskit/editor-common/analytics';
import type { Command, ExtractInjectionAPI, FloatingToolbarButton } from '@atlaskit/editor-common/types';
import type { PopupPosition } from '@atlaskit/editor-common/ui';
import type { NodeType } from '@atlaskit/editor-prosemirror/model';
import { SelectionBookmark, type EditorState } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { AnnotationPlugin } from '../annotationPluginType';
import { AnnotationProviders } from '../types';
interface BuildToolbarOptions {
    state: EditorState;
    intl: IntlShape;
    isToolbarAbove?: boolean;
    isCommentOnMediaOn?: boolean;
    _supportedNodes?: string[];
    api?: ExtractInjectionAPI<AnnotationPlugin>;
    createCommentExperience?: AnnotationProviders['createCommentExperience'];
    annotationManager?: AnnotationProviders['annotationManager'];
}
export declare const getValidNodes: (state: EditorState) => NodeType[];
type ShouldSuppressFloatingToolbarOptions = {
    state: EditorState;
    bookmark?: SelectionBookmark;
};
/**
 * Should suppress toolbars when the user is creating an inline comment
 * This only applies when the selection range exactly matches the bookmark range
 * which should be the case immediately after the comment button is clicked
 * if the user creates a different selection range, the floating toolbar should still be shown
 */
export declare const shouldSuppressFloatingToolbar: ({ state, bookmark, }: ShouldSuppressFloatingToolbarOptions) => boolean;
export declare const buildSuppressedToolbar: (state: EditorState) => {
    items: never[];
    nodeType: NodeType[];
    title: string;
    __suppressAllToolbars: boolean;
};
export declare const buildToolbar: (editorAnalyticsAPI: EditorAnalyticsAPI | undefined) => ({ state, intl, isToolbarAbove, _supportedNodes, api, createCommentExperience, annotationManager, }: BuildToolbarOptions) => {
    title: string;
    nodeType: NodeType[];
    items: FloatingToolbarButton<Command>[];
    onPositionCalculated: (editorView: EditorView, nextPos: PopupPosition) => PopupPosition;
} | undefined;
export {};
