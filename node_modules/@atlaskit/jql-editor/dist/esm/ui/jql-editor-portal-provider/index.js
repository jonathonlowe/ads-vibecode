import _typeof from "@babel/runtime/helpers/typeof";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useMemo, useReducer } from 'react';
import { createPortal } from 'react-dom';
import { PortalActionsContext } from './context';
var initialState = {
  components: {},
  containers: {}
};
var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'createPortal':
      {
        var _action$payload = action.payload,
          key = _action$payload.key,
          portalComponent = _action$payload.portalComponent,
          container = _action$payload.container;
        return _objectSpread(_objectSpread({}, state), {}, {
          components: _objectSpread(_objectSpread({}, state.components), {}, _defineProperty({}, key, {
            portalComponent: portalComponent,
            container: container
          }))
        });
      }
    case 'destroyPortal':
      {
        var _state$components = state.components,
          _action$payload2 = action.payload,
          toDestroy = _state$components[_action$payload2],
          components = _objectWithoutProperties(_state$components, [_action$payload2].map(_toPropertyKey));
        return _objectSpread(_objectSpread({}, state), {}, {
          components: components
        });
      }
    case 'registerPluginContainer':
      {
        var _action$payload3 = action.payload,
          element = _action$payload3.element,
          containerKey = _action$payload3.containerKey;
        if (!element) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          containers: _objectSpread(_objectSpread({}, state.containers), {}, _defineProperty({}, containerKey, element))
        });
      }
    default:
      {
        return state;
      }
  }
};

/**
 * Provides actions to manage portals via context and renders portalled components into the React tree.
 */
export var JQLEditorPortalRenderer = function JQLEditorPortalRenderer(_ref) {
  var children = _ref.children;
  var _useReducer = useReducer(reducer, initialState),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  var actionsContext = useMemo(function () {
    return {
      onCreatePortal: function onCreatePortal(key, portalComponent, container) {
        return dispatch({
          type: 'createPortal',
          payload: {
            key: key,
            portalComponent: portalComponent,
            container: container
          }
        });
      },
      onDestroyPortal: function onDestroyPortal(key) {
        return dispatch({
          type: 'destroyPortal',
          payload: key
        });
      },
      onRegisterPluginContainer: function onRegisterPluginContainer(containerKey, element) {
        return dispatch({
          type: 'registerPluginContainer',
          payload: {
            containerKey: containerKey,
            element: element
          }
        });
      }
    };
  }, [dispatch]);
  return /*#__PURE__*/React.createElement(PortalActionsContext.Provider, {
    value: actionsContext
  }, children, Object.entries(state.components).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      key = _ref3[0],
      value = _ref3[1];
    var container = value.container instanceof Element ? value.container : state.containers[value.container];
    return container !== undefined ? /*#__PURE__*/createPortal(value.portalComponent, container, key) : null;
  }));
};