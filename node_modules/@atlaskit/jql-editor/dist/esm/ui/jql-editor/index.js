import React, { useEffect, useRef } from 'react';
import { injectIntl } from 'react-intl-next';
import { di } from 'react-magnetic-di';
import { useJqlEditorAnalytics } from '../../analytics';
import { EditorThemeContext, useEditorTheme } from '../../hooks/use-editor-theme';
import { EditorStateContainer } from '../../state';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { JQLEditorPortalRenderer } from '../jql-editor-portal-provider';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import JQLEditorView from '../jql-editor-view';
var JQLEditorInner = function JQLEditorInner(_ref) {
  var analyticsSource = _ref.analyticsSource,
    query = _ref.query,
    _ref$messages = _ref.messages,
    messages = _ref$messages === void 0 ? [] : _ref$messages,
    inputRef = _ref.inputRef,
    isSearching = _ref.isSearching,
    onEditorMounted = _ref.onEditorMounted,
    onDebugUnsafeMessage = _ref.onDebugUnsafeMessage,
    onHydrate = _ref.onHydrate,
    onUpdate = _ref.onUpdate,
    onSearch = _ref.onSearch,
    autocompleteProvider = _ref.autocompleteProvider,
    intl = _ref.intl,
    _ref$enableRichInline = _ref.enableRichInlineNodes,
    enableRichInlineNodes = _ref$enableRichInline === void 0 ? false : _ref$enableRichInline,
    isCompact = _ref.isCompact,
    onSyntaxHelp = _ref.onSyntaxHelp,
    onFocus = _ref.onFocus,
    customComponents = _ref.customComponents;
  var editorTheme = useEditorTheme({
    isSearch: !!onSearch,
    isCompact: isCompact
  });
  var _useJqlEditorAnalytic = useJqlEditorAnalytics(analyticsSource),
    createAndFireAnalyticsEvent = _useJqlEditorAnalytic.createAndFireAnalyticsEvent;

  // Create and update a mutable ref for our intl object so it can be used by Prosemirror plugins.
  var intlRef = useRef(intl);
  useEffect(function () {
    intlRef.current = intl;
  }, [intl]);
  return /*#__PURE__*/React.createElement(EditorStateContainer, {
    query: query,
    externalMessages: messages,
    isSearching: isSearching,
    intlRef: intlRef,
    onEditorMounted: onEditorMounted,
    onDebugUnsafeMessage: onDebugUnsafeMessage,
    onHydrate: onHydrate,
    onUpdate: onUpdate,
    onSearch: onSearch,
    createAndFireAnalyticsEvent: createAndFireAnalyticsEvent,
    autocompleteProvider: autocompleteProvider,
    enableRichInlineNodes: enableRichInlineNodes,
    onSyntaxHelp: onSyntaxHelp,
    onFocus: onFocus,
    customComponents: customComponents
  }, /*#__PURE__*/React.createElement(EditorThemeContext.Provider, {
    value: editorTheme
  }, /*#__PURE__*/React.createElement(JQLEditorPortalRenderer, null, /*#__PURE__*/React.createElement(JQLEditorView, {
    inputRef: inputRef
  }))));
};
export default injectIntl(JQLEditorInner);