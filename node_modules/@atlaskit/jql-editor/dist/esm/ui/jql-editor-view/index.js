import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef } from 'react';
import throttle from 'lodash/throttle';
import { fg } from '@atlaskit/platform-feature-flags';
import { JQL_EDITOR_AUTOCOMPLETE_ID, JQL_EDITOR_HELP_CONTENT_ID, JQL_EDITOR_INPUT_ID, JQL_EDITOR_MAIN_ID, JQL_EDITOR_VALIDATION_ID } from '../../common/constants';
import { useEditorThemeContext } from '../../hooks/use-editor-theme';
import { useEditorViewIsInvalid } from '../../hooks/use-editor-view-is-invalid';
import { useAutocomplete, useAutocompleteIsOpen, useEditorView, useEditorViewHasFocus, useIntl, useLineNumbersVisible, useScopedId, useStoreActions } from '../../state';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { JQLEditorControlsContent } from '../jql-editor-controls-content';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { JQLEditorFooterContent } from '../jql-editor-footer-content';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import JQLEditorLayout from '../jql-editor-layout';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { usePortalActionsContext } from '../jql-editor-portal-provider/context';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { messages } from '../messages';

/**
 * This wraps ProseMirror's EditorView as a React component.
 */
var JQLEditorView = function JQLEditorView(_ref) {
  var inputRef = _ref.inputRef;
  var _useEditorView = useEditorView(),
    _useEditorView2 = _slicedToArray(_useEditorView, 2),
    editorView = _useEditorView2[0],
    _useEditorView2$ = _useEditorView2[1],
    initialiseEditorView = _useEditorView2$.initialiseEditorView,
    updateEditorView = _useEditorView2$.updateEditorView;
  var editorViewNodeRef = useRef(null);
  var _useScopedId = useScopedId(JQL_EDITOR_MAIN_ID),
    _useScopedId2 = _slicedToArray(_useScopedId, 1),
    mainId = _useScopedId2[0];
  var _useScopedId3 = useScopedId(JQL_EDITOR_AUTOCOMPLETE_ID),
    _useScopedId4 = _slicedToArray(_useScopedId3, 1),
    autocompleteId = _useScopedId4[0];
  var _useScopedId5 = useScopedId(JQL_EDITOR_INPUT_ID),
    _useScopedId6 = _slicedToArray(_useScopedId5, 1),
    editorId = _useScopedId6[0];
  var _useScopedId7 = useScopedId(JQL_EDITOR_HELP_CONTENT_ID),
    _useScopedId8 = _slicedToArray(_useScopedId7, 1),
    helpContentId = _useScopedId8[0];
  var _useScopedId9 = useScopedId(JQL_EDITOR_VALIDATION_ID),
    _useScopedId10 = _slicedToArray(_useScopedId9, 1),
    validationId = _useScopedId10[0];
  var _useIntl = useIntl(),
    _useIntl2 = _slicedToArray(_useIntl, 1),
    intl = _useIntl2[0];
  var portalActions = usePortalActionsContext();
  var _useStoreActions = useStoreActions(),
    _useStoreActions2 = _slicedToArray(_useStoreActions, 2),
    _useStoreActions2$ = _useStoreActions2[1],
    setEditorViewContainer = _useStoreActions2$.setEditorViewContainer,
    setEditorViewContainerScroll = _useStoreActions2$.setEditorViewContainerScroll;
  var _useEditorViewHasFocu = useEditorViewHasFocus(),
    _useEditorViewHasFocu2 = _slicedToArray(_useEditorViewHasFocu, 2),
    editorViewHasFocus = _useEditorViewHasFocu2[0],
    _useEditorViewHasFocu3 = _useEditorViewHasFocu2[1],
    onEditorViewBlur = _useEditorViewHasFocu3.onEditorViewBlur,
    onEditorViewFocus = _useEditorViewHasFocu3.onEditorViewFocus;
  var _useLineNumbersVisibl = useLineNumbersVisible(),
    _useLineNumbersVisibl2 = _slicedToArray(_useLineNumbersVisibl, 1),
    lineNumbersVisible = _useLineNumbersVisibl2[0];
  var _useAutocomplete = useAutocomplete(),
    _useAutocomplete2 = _slicedToArray(_useAutocomplete, 1),
    selectedOptionId = _useAutocomplete2[0].selectedOptionId;
  var _useAutocompleteIsOpe = useAutocompleteIsOpen(),
    _useAutocompleteIsOpe2 = _slicedToArray(_useAutocompleteIsOpe, 1),
    isAutocompleteOpen = _useAutocompleteIsOpe2[0];
  var editorViewIsInvalid = useEditorViewIsInvalid();
  var _useEditorThemeContex = useEditorThemeContext(),
    expanded = _useEditorThemeContex.expanded;
  var previousExpanded = useRef(expanded);
  var onEditorViewTransitionEnd = useCallback(function () {
    if (!expanded && editorViewNodeRef.current) {
      // Clear any fixed heights when the editor is collapsed
      editorViewNodeRef.current.style.height = '';
    }
  }, [expanded, editorViewNodeRef]);
  var onMainRef = useCallback(function (element) {
    return portalActions.onRegisterPluginContainer('main', element);
  }, [portalActions]);
  var onEditorViewContainerRef = useCallback(function (editorViewContainer) {
    if (editorViewContainer) {
      setEditorViewContainer(editorViewContainer);
    }
  }, [setEditorViewContainer]);
  var throttledSetEditorViewContainerScroll = useMemo(function () {
    return throttle(function (scrollTop) {
      setEditorViewContainerScroll(scrollTop);
    }, 1000 / 60);
  },
  // 60 fps
  [setEditorViewContainerScroll]);
  var onEditorViewContainerScroll = useCallback(function (event) {
    var scrollTop = event.currentTarget.scrollTop;
    throttledSetEditorViewContainerScroll(scrollTop);
  }, [throttledSetEditorViewContainerScroll]);

  // Compute HTML attributes to be applied to the Prosemirror editor view
  var getAttributes = useCallback(function () {
    return _objectSpread(_objectSpread({
      id: editorId,
      'data-testid': 'jql-editor-input',
      // Disable grammarly
      'data-gramm': 'false',
      // Combobox might not be a semantically correct role for the editor,
      // however some browsers like Safari will only announce suggestions when this role is present
      role: 'combobox',
      'aria-expanded': "".concat(isAutocompleteOpen),
      'aria-autocomplete': 'list',
      'aria-label': intl.formatMessage(messages.inputLabel),
      'aria-controls': autocompleteId,
      'aria-owns': autocompleteId,
      'aria-describedby': fg('jql_editor_a11y') ? editorViewIsInvalid ? validationId : helpContentId : helpContentId
    }, selectedOptionId && {
      'aria-activedescendant': selectedOptionId
    }), editorViewIsInvalid && {
      'aria-invalid': 'true'
    });
  }, [editorId, isAutocompleteOpen, intl, autocompleteId, editorViewIsInvalid, validationId, helpContentId, selectedOptionId]);

  // Update attributes on our editor view whenever they have changed
  useEffect(function () {
    updateEditorView(getAttributes());
  }, [getAttributes, updateEditorView]);
  var onEditorViewRef = useCallback(function (editorViewNode) {
    if (editorViewNode && !editorView) {
      initialiseEditorView(editorViewNode, getAttributes(), portalActions);
      editorViewNodeRef.current = editorViewNode;
    }
  }, [editorView, initialiseEditorView, getAttributes, portalActions]);
  useEffect(function () {
    if (editorViewNodeRef.current && expanded !== previousExpanded.current) {
      if (expanded) {
        // Set fixed height based on the current element height so we can transition to the expanded height
        editorViewNodeRef.current.style.height = editorViewNodeRef.current.clientHeight + 'px';
        requestAnimationFrame(function () {
          if (editorViewNodeRef.current) {
            editorViewNodeRef.current.style.height = '';
            editorViewNodeRef.current.setAttribute('data-expanded', 'true');
          }
        });
      } else {
        if (editorView) {
          requestAnimationFrame(function () {
            if (editorViewNodeRef.current && editorView) {
              // Transition to the default height based on the content of the editor
              editorViewNodeRef.current.style.height = editorView.dom.clientHeight + 'px';
              editorViewNodeRef.current.removeAttribute('data-expanded');
            }
          });
        }
      }
    }
    previousExpanded.current = expanded;
  }, [expanded, previousExpanded, editorViewNodeRef, editorView]);
  useImperativeHandle(inputRef, function () {
    return {
      focus: function focus() {
        if (editorView) {
          editorView.focus();
        }
      }
    };
  });
  useEffect(function () {
    return function () {
      if (editorView) {
        editorView.destroy();
      }
    };
  }, [editorView]);
  return /*#__PURE__*/React.createElement(JQLEditorLayout, {
    EditorControlsContent: /*#__PURE__*/React.createElement(JQLEditorControlsContent, null),
    EditorFooterContent: /*#__PURE__*/React.createElement(JQLEditorFooterContent, null),
    editorViewHasFocus: editorViewHasFocus,
    lineNumbersVisible: lineNumbersVisible,
    editorViewIsInvalid: editorViewIsInvalid,
    mainId: mainId,
    onEditorMainRef: onMainRef,
    onEditorViewContainerRef: onEditorViewContainerRef,
    onEditorViewContainerScroll: onEditorViewContainerScroll,
    onEditorViewRef: onEditorViewRef,
    onEditorViewBlur: onEditorViewBlur,
    onEditorViewFocus: onEditorViewFocus,
    onEditorViewTransitionEnd: onEditorViewTransitionEnd
  });
};
export default JQLEditorView;