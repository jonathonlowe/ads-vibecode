import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback } from 'react';
import Tooltip from '@atlaskit/tooltip';
import { ScreenReaderText } from '../../../accessibility';
import { Action, ActionSubject, ActionSubjectId, EventType } from '../../../analytics';
import { SYNTAX_HELP_DESCRIPTION_ID } from '../../../common/constants';
import { TooltipContent } from '../../../common/styled';
import { useIntl, useOnSyntaxHelp, useScopedId } from '../../../state';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { TooltipTag } from '../../tooltip-tag';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { BaseSyntaxHelp } from '../base-syntax-help';
import { messages } from './messages';
export var SyntaxHelp = function SyntaxHelp() {
  var _useIntl = useIntl(),
    _useIntl2 = _slicedToArray(_useIntl, 1),
    intl = _useIntl2[0];
  var label = intl.formatMessage(messages.syntaxHelpTooltip);
  var _useScopedId = useScopedId(SYNTAX_HELP_DESCRIPTION_ID),
    _useScopedId2 = _slicedToArray(_useScopedId, 1),
    descriptionId = _useScopedId2[0];
  var _useOnSyntaxHelp = useOnSyntaxHelp(),
    _useOnSyntaxHelp2 = _slicedToArray(_useOnSyntaxHelp, 2),
    onSyntaxHelp = _useOnSyntaxHelp2[0],
    createAndFireAnalyticsEvent = _useOnSyntaxHelp2[1].createAndFireAnalyticsEvent;
  var onClick = useCallback(function (e) {
    createAndFireAnalyticsEvent({
      action: Action.CLICKED,
      actionSubject: ActionSubject.BUTTON,
      actionSubjectId: ActionSubjectId.EDITOR_HELP,
      eventType: EventType.UI
    });
    var handled = onSyntaxHelp && onSyntaxHelp(e);
    // Prevent default behaviour when the event is handled on the consumer side.
    if (handled) {
      e.preventDefault();
    }
  }, [createAndFireAnalyticsEvent, onSyntaxHelp]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    position: 'bottom',
    content: /*#__PURE__*/React.createElement(TooltipContent, null, label)
    // @ts-ignore: [PIT-1685] Fails in post-office due to backwards incompatibility issue with React 18
    ,
    tag: TooltipTag,
    isScreenReaderAnnouncementDisabled: true
  }, /*#__PURE__*/React.createElement(BaseSyntaxHelp, {
    describedby: descriptionId,
    label: label,
    onClick: onClick
  }), /*#__PURE__*/React.createElement(ScreenReaderText, {
    id: descriptionId
  }, intl.formatMessage(messages.syntaxHelpDescription)));
};