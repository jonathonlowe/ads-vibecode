import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback } from 'react';
import { LoadingButton } from '@atlaskit/button';
import { IconButton } from '@atlaskit/button/new';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
var style = {
  // Fixes an issue where loading button makes the editor flicker with a scrollbar
  overflow: 'hidden'
};
// Fixes icon margin issus after new icon migration
var iconStyle = xcss({
  margin: 'space.050',
  display: 'flex'
});

// Fixes an issue where loading button makes the editor flicker with a scrollbar
var buttonContainerStyle = xcss({
  overflow: 'hidden'
});
export var BaseSearch = function BaseSearch(_ref) {
  var isDisabled = _ref.isDisabled,
    isSearching = _ref.isSearching,
    label = _ref.label,
    onSearch = _ref.onSearch;
  // Prevent click events being repeatedly fired if the Enter key is held down.
  var preventRepeatClick = useCallback(function (e) {
    if (e.key === 'Enter' && e.repeat) {
      e.preventDefault();
    }
  }, []);
  return fg('platform-component-visual-refresh') ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    xcss: buttonContainerStyle
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    label: label,
    isDisabled: isDisabled,
    testId: "jql-editor-search",
    appearance: "default",
    spacing: "compact",
    onClick: onSearch,
    onKeyDown: preventRepeatClick,
    isLoading: isSearching,
    icon: SearchIcon
  }, fg('add_nin_press_interactions') && {
    interactionName: 'jql-editor-base-search-button'
  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LoadingButton, _extends({
    "aria-label": label,
    isDisabled: isDisabled,
    testId: "jql-editor-search"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style,
    appearance: 'primary',
    spacing: 'none',
    onClick: onSearch,
    onKeyDown: preventRepeatClick,
    isLoading: isSearching,
    iconBefore: /*#__PURE__*/React.createElement(Box, {
      xcss: iconStyle
    }, /*#__PURE__*/React.createElement(SearchIcon, {
      color: "currentColor",
      label: '',
      LEGACY_size: 'medium',
      LEGACY_margin: "-4px"
    }))
  }, fg('add_nin_press_interactions') && {
    interactionName: 'jql-editor-base-search-button'
  })));
};