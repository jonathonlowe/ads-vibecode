import React from 'react';
import { useEditorThemeContext } from '../../../../hooks/use-editor-theme';
import { MessageContainer as MessageContainerStyled, MessageList } from './styled';

// Max number messages we want to show
var MAX_MESSAGES = 10;
export var MessageContainer = function MessageContainer(_ref) {
  var children = _ref.children;
  var _useEditorThemeContex = useEditorThemeContext(),
    isSearch = _useEditorThemeContex.isSearch;
  return /*#__PURE__*/React.createElement(MessageContainerStyled, {
    isSearch: isSearch
  }, children);
};
export var FormatMessages = function FormatMessages(_ref2) {
  var messages = _ref2.messages;
  var messageNodes = extractMessageNodes(messages);
  if (messageNodes.length === 0) {
    return null;
  }
  if (messageNodes.length === 1) {
    return /*#__PURE__*/React.createElement("span", null, messageNodes[0]);
  }
  return /*#__PURE__*/React.createElement(MessageList, null, messageNodes.map(function (m, i) {
    return /*#__PURE__*/React.createElement("li", {
      key: i
    }, m);
  }));
};

/**
 * This function was extracted from FormatMessages, so that the rendering is decoupled from the logic
 * This is so that the extractMessageNodes can used elsewhere where rendering is delegated to a different renderer
 *
 * Simply put, this function only handles getting m.message, and limiting to MAX_MESSAGES
 */
export var extractMessageNodes = function extractMessageNodes(messages) {
  return messages.slice(0, MAX_MESSAGES).map(function (m) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, m.message);
  });
};