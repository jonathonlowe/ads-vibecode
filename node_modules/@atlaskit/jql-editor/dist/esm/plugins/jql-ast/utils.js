import { ignoredTokens } from './constants';
export var getTokenDisplayNames = function getTokenDisplayNames(parser, tokens) {
  return tokens.map(function (tokenType) {
    return parser.vocabulary.getDisplayName(tokenType).replace(/^'|'$/g, '');
  });
};
export var getExpectedTokensFromParserOrException = function getExpectedTokensFromParserOrException(parser, exception) {
  var _exception$expectedTo;
  // Read expected tokens from the exception if present, as it refers to the expected input symbols at the time the
  // exception was thrown (whereas JQLParser will give us possible tokens from the current parser state).
  var expectedTokenSet = (_exception$expectedTo = exception === null || exception === void 0 ? void 0 : exception.expectedTokens) !== null && _exception$expectedTo !== void 0 ? _exception$expectedTo : parser.getExpectedTokens();
  return expectedTokenSet.toArray()
  // Show the token if it's not ignored
  .filter(function (tokenType) {
    return !ignoredTokens.has(tokenType);
  });
};