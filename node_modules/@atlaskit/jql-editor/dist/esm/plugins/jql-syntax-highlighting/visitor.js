import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import { AbstractJastVisitor, isOperandNode } from '@atlaskit/jql-ast';
import getDocumentPosition from '../common/get-document-position';
export var SyntaxHighlightingVisitor = /*#__PURE__*/function (_AbstractJastVisitor) {
  function SyntaxHighlightingVisitor(state) {
    var _this;
    _classCallCheck(this, SyntaxHighlightingVisitor);
    _this = _callSuper(this, SyntaxHighlightingVisitor);
    _defineProperty(_this, "visitCompoundOperator", function (compoundOperator) {
      return compoundOperator.positions.map(function (position) {
        return _this.createHighlight('keyword', position);
      });
    });
    _defineProperty(_this, "visitNotClauseOperator", function (notClauseOperator) {
      return _this.getHighlightsIfPosition('keyword', notClauseOperator.position);
    });
    _defineProperty(_this, "visitOrderByOperator", function (orderByOperator) {
      return _this.getHighlightsIfPosition('keyword', orderByOperator.position);
    });
    _defineProperty(_this, "visitOrderByDirection", function (orderByDirection) {
      return _this.getHighlightsIfPosition('keyword', orderByDirection.position);
    });
    _defineProperty(_this, "visitField", function (field) {
      return _this.getHighlightsIfPosition('field', field.position);
    });
    _defineProperty(_this, "visitOperator", function (operator) {
      return _this.getHighlightsIfPosition('operator', operator.position);
    });
    _defineProperty(_this, "visitPredicateOperator", function (predicateOperator) {
      return _this.getHighlightsIfPosition('operator', predicateOperator.position);
    });
    _defineProperty(_this, "getHighlightsIfPosition", function (tokenType, maybePosition) {
      if (!maybePosition) {
        return [];
      }
      return [_this.createHighlight(tokenType, maybePosition)];
    });
    _defineProperty(_this, "createHighlight", function (tokenType, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        start = _ref2[0],
        end = _ref2[1];
      var documentFrom = getDocumentPosition(_this.state.doc, start);
      var documentTo = getDocumentPosition(_this.state.doc, end);
      return {
        tokenType: tokenType,
        documentFrom: documentFrom,
        documentTo: documentTo
      };
    });
    _this.state = state;
    return _this;
  }
  _inherits(SyntaxHighlightingVisitor, _AbstractJastVisitor);
  return _createClass(SyntaxHighlightingVisitor, [{
    key: "shouldVisitNextChild",
    value: function shouldVisitNextChild(node) {
      // Skip visiting operand subtrees, which don't require syntax highlighting and can make a big impact on performance
      return !isOperandNode(node);
    }
  }, {
    key: "aggregateResult",
    value: function aggregateResult(aggregate, nextResult) {
      return aggregate.concat(nextResult);
    }
  }, {
    key: "defaultResult",
    value: function defaultResult() {
      return [];
    }
  }]);
}(AbstractJastVisitor);