import _typeof from "@babel/runtime/helpers/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
export var PluginKeymap = /*#__PURE__*/function () {
  function PluginKeymap() {
    _classCallCheck(this, PluginKeymap);
    _defineProperty(this, "keymap", {});
  }
  return _createClass(PluginKeymap, [{
    key: "bindKey",
    value: function bindKey(key, handler) {
      this.keymap = _objectSpread(_objectSpread({}, this.keymap), {}, _defineProperty({}, key, handler));
    }
  }, {
    key: "bindMultipleKeys",
    value: function bindMultipleKeys(keys, handler) {
      var _this = this;
      keys.forEach(function (key) {
        _this.keymap = _objectSpread(_objectSpread({}, _this.keymap), {}, _defineProperty({}, key, handler));
      });
    }
  }, {
    key: "unbindKey",
    value: function unbindKey(key) {
      var _this$keymap = this.keymap,
        keyToUnbind = _this$keymap[key],
        rest = _objectWithoutProperties(_this$keymap, [key].map(_toPropertyKey));
      this.keymap = rest;
    }
  }, {
    key: "getKeyBinding",
    value: function getKeyBinding(key) {
      return this.keymap[key];
    }
  }]);
}();