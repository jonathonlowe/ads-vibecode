import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { keydownHandler } from '@atlaskit/editor-prosemirror/keymap';
import { Plugin } from '@atlaskit/editor-prosemirror/state';
import { PluginKeymap } from '../common/plugin-keymap';
import { ARROW_DOWN_KEY, ARROW_UP_KEY, CMD_ARROW_DOWN_KEY, CMD_ARROW_UP_KEY, END_KEY, ENTER_KEY, ESCAPE_KEY, HOME_KEY, JQLAutocompletePluginKey, TAB_KEY } from './constants';
import AutocompletePluginView from './view';
var getKeyHandler = function getKeyHandler(keymap, key) {
  return function (state, dispatch, view) {
    var binding = keymap.getKeyBinding(key);
    return binding ? binding(state, dispatch, view) : false;
  };
};
var autocompletePlugin = function autocompletePlugin(portalActions, enableRichInlineNodes) {
  // Empty keymap passed down to the React component so it can register key bindings
  var keymap = new PluginKeymap();
  return new Plugin({
    key: JQLAutocompletePluginKey,
    view: function view(editorView) {
      var view = new AutocompletePluginView(editorView, keymap, portalActions, enableRichInlineNodes);
      // Initialise view to mount the react component
      view.init();
      return view;
    },
    props: {
      handleKeyDown: keydownHandler(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ARROW_UP_KEY, getKeyHandler(keymap, ARROW_UP_KEY)), ARROW_DOWN_KEY, getKeyHandler(keymap, ARROW_DOWN_KEY)), CMD_ARROW_UP_KEY, getKeyHandler(keymap, CMD_ARROW_UP_KEY)), CMD_ARROW_DOWN_KEY, getKeyHandler(keymap, CMD_ARROW_DOWN_KEY)), HOME_KEY, getKeyHandler(keymap, HOME_KEY)), END_KEY, getKeyHandler(keymap, END_KEY)), ESCAPE_KEY, getKeyHandler(keymap, ESCAPE_KEY)), ENTER_KEY, getKeyHandler(keymap, ENTER_KEY)), TAB_KEY, getKeyHandler(keymap, TAB_KEY)))
    }
  });
};
export default autocompletePlugin;