import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { forwardRef, useCallback, useMemo, useState } from 'react';
import deburr from 'lodash/deburr';
import noop from 'lodash/noop';
import AlignTextLeftIcon from '@atlaskit/icon/core/align-text-left';
import CalendarIcon from '@atlaskit/icon/core/calendar';
import ClockIcon from '@atlaskit/icon/core/clock';
import DataNumberIcon from '@atlaskit/icon/core/data-number';
import InfoIcon from '@atlaskit/icon/core/migration/information--editor-panel';
import PersonAvatarIcon from '@atlaskit/icon/core/person-avatar';
import TagIcon from '@atlaskit/icon/core/tag';
import CheckboxIcon from '@atlaskit/icon/core/task';
import TextIcon from '@atlaskit/icon/core/text';
import { normaliseJqlString } from '@atlaskit/jql-ast';
import LegacyAlignLeftIcon from '@atlaskit/legacy-custom-icons/align-left-icon';
import LegacyArrowDownIcon from '@atlaskit/legacy-custom-icons/arrow-down-circle-icon';
import LegacyCalendarIcon from '@atlaskit/legacy-custom-icons/calendar-icon';
import LegacyClockIcon from '@atlaskit/legacy-custom-icons/clock-icon';
import LegacyDataNumberIcon from '@atlaskit/legacy-custom-icons/data-number-icon';
import LegacyPersonAvatarIcon from '@atlaskit/legacy-custom-icons/person-avatar-icon';
import LegacyTagIcon from '@atlaskit/legacy-custom-icons/tag-icon';
import LegacyCheckboxIcon from '@atlaskit/legacy-custom-icons/task-icon';
import LegacyTextIcon from '@atlaskit/legacy-custom-icons/text-icon';
import { N400 } from '@atlaskit/theme/colors';
import Tooltip from '@atlaskit/tooltip';
import { useIntl } from '../../../../state';
import { messages } from './messages';
import { DeprecatedOptionContainer, FieldType, FieldTypeIcon, OptionHighlight, OptionListItem, OptionName, TooltipContent } from './styled';
var ResizedIcon = function ResizedIcon(_ref) {
  var Icon = _ref.Icon,
    LegacyIcon = _ref.LegacyIcon;
  return /*#__PURE__*/React.createElement(Icon, {
    LEGACY_fallbackIcon: LegacyIcon,
    LEGACY_size: "small",
    label: "",
    testId: "jql-editor-field-type-icon",
    color: "currentColor"
  });
};

/**
 * List of types with supported icons is derived from GIN
 * Custom SVGs are provisional while we work on making field type icons consistent across Atlassian
 */
var getFieldTypeIcon = function getFieldTypeIcon(type) {
  switch (type) {
    case 'Checkboxes':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: CheckboxIcon,
        LegacyIcon: LegacyCheckboxIcon
      });
    case 'Date':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: CalendarIcon,
        LegacyIcon: LegacyCalendarIcon
      });
    case 'Dropdown':
      // TODO: https://product-fabric.atlassian.net/browse/DSP-21308
      return /*#__PURE__*/React.createElement(LegacyArrowDownIcon, {
        label: "",
        size: "small",
        testId: "jql-editor-field-type-icon"
      });
    case 'Labels':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: TagIcon,
        LegacyIcon: LegacyTagIcon
      });
    case 'Number':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: DataNumberIcon,
        LegacyIcon: LegacyDataNumberIcon
      });
    case 'Paragraph':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: AlignTextLeftIcon,
        LegacyIcon: LegacyAlignLeftIcon
      });
    case 'People':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: PersonAvatarIcon,
        LegacyIcon: LegacyPersonAvatarIcon
      });
    case 'Short text':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: TextIcon,
        LegacyIcon: LegacyTextIcon
      });
    case 'Time stamp':
      return /*#__PURE__*/React.createElement(ResizedIcon, {
        Icon: ClockIcon,
        LegacyIcon: LegacyClockIcon
      });
    default:
      return null;
  }
};
var getHighlightPosition = function getHighlightPosition(name, matchedText) {
  var normalizedName = deburr(name).toLowerCase();
  var normalizedMatchedText = deburr(normaliseJqlString(matchedText)).toLowerCase();
  var index = normalizedName.indexOf(normalizedMatchedText);
  if (index === -1) {
    return null;
  }
  return [index, index + normalizedMatchedText.length];
};
var getDeprecatedTooltipMessage = function getDeprecatedTooltipMessage(deprecatedSearcherKey) {
  switch (deprecatedSearcherKey) {
    case 'com.pyxis.greenhopper.jira:gh-epic-link-searcher':
    case 'com.atlassian.jpo:jpo-custom-field-parent-searcher':
      return messages.deprecatedFieldTooltipParentReplacementMessage;
    default:
      return messages.deprecatedFieldTooltipDefaultMessage;
  }
};
var AutocompleteOption = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$option = props.option,
    id = _props$option.id,
    name = _props$option.name,
    fieldType = _props$option.fieldType,
    matchedText = _props$option.matchedText,
    _props$option$isDepre = _props$option.isDeprecated,
    isDeprecated = _props$option$isDepre === void 0 ? false : _props$option$isDepre,
    deprecatedSearcherKey = _props$option.deprecatedSearcherKey,
    isSelected = props.isSelected,
    onClick = props.onClick,
    onMouseMove = props.onMouseMove;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    overflows = _useState2[0],
    setOverflows = _useState2[1];
  var _useIntl = useIntl(),
    _useIntl2 = _slicedToArray(_useIntl, 1),
    formatMessage = _useIntl2[0].formatMessage;
  var onNameRef = useCallback(function (node) {
    // This ref will be re-invoked after a tooltip is rendered, so we avoid recomputing the overflow in that instance
    // so we don't risk infinite re-renders (which we've observed through production logs).
    if (node != null && !overflows) {
      setOverflows(node.offsetWidth < node.scrollWidth);
    }
  }, [overflows]);

  // TODO: verify type is i18n'd after integrating with GraphQL API

  var fieldTypeIcon = fieldType ? getFieldTypeIcon(fieldType) : null;
  var optionName = useMemo(function () {
    var highlightPosition = getHighlightPosition(name, matchedText);
    return highlightPosition ? /*#__PURE__*/React.createElement(OptionName, {
      ref: onNameRef,
      "aria-label": name
    }, name.substring(0, highlightPosition[0]), /*#__PURE__*/React.createElement(OptionHighlight, null, name.substring.apply(name, _toConsumableArray(highlightPosition))), name.substring(highlightPosition[1])) : /*#__PURE__*/React.createElement(OptionName, {
      ref: onNameRef
    }, name);
  }, [onNameRef, name, matchedText]);
  var deprecatedTooltipContent = /*#__PURE__*/React.createElement(TooltipContent, null, formatMessage(getDeprecatedTooltipMessage(deprecatedSearcherKey), {
    b: function b(text) {
      return /*#__PURE__*/React.createElement("b", null, text);
    },
    received: name,
    parentReplacement: 'Parent'
  }));
  var ListItem = /*#__PURE__*/React.createElement(OptionListItem, _extends({
    id: id,
    "data-testid": "jql-editor-autocomplete-option",
    role: "option",
    isSelected: isSelected,
    isDeprecated: isDeprecated,
    onClick: isDeprecated ? noop : onClick,
    onMouseMove: isDeprecated ? noop : onMouseMove
  }, ref && {
    ref: ref
  }, {
    "aria-selected": isSelected
  }), isDeprecated ? /*#__PURE__*/React.createElement(DeprecatedOptionContainer, null, optionName, /*#__PURE__*/React.createElement(Tooltip, {
    content: deprecatedTooltipContent,
    position: 'right'
  }, /*#__PURE__*/React.createElement(InfoIcon, {
    spacing: "spacious",
    testId: "jql-editor-deprecated-icon",
    label: "",
    color: "var(--ds-icon, ".concat(N400, ")")
  }))) : optionName, fieldType && /*#__PURE__*/React.createElement(FieldType, null, fieldTypeIcon && /*#__PURE__*/React.createElement(FieldTypeIcon, null, fieldTypeIcon), fieldType));
  var tooltipContent = /*#__PURE__*/React.createElement(TooltipContent, null, name);
  if (overflows) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: tooltipContent,
      position: 'right'
    }, ListItem);
  }
  return ListItem;
});
export default AutocompleteOption;