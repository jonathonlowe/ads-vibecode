import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Copied from https://bitbucket.org/atlassian/atlassian-frontend/src/master/packages/analytics/analytics-listeners/src/analytics-web-client-wrapper.ts
 * In future if this package is migrated into the Atlassian Frontend repo, then this code and related logic should be
 * moved into @atlaskit/analytics-listeners.
 */

var isPromise = function isPromise(c) {
  return typeof c.then === 'function';
};
export var sendEvent = function sendEvent(logger, client) {
  return function (event) {
    if (client) {
      var gasEvent = _objectSpread({}, event);
      /*
         Merging this ts-ignore is not going to affect the type definitions of the package
         there's a whole lot more wrong going on here than just this delete.
         All the send methods on the client take a GasPurePayload object which requires actionSubject
         actionSubject is missing on GasPayload | GasScreenEventPayload
       */
      // @ts-ignore mergeable @fixme TypeScript 4.2.4 upgrade
      delete gasEvent.eventType;
      var withClient = function withClient(cb) {
        if (isPromise(client)) {
          client.then(cb).catch(function (e) {
            return logger.warn('There was an error sending the event', e);
          });
        } else {
          try {
            cb(client);
          } catch (e) {
            logger.warn('There was an error sending the event', e);
          }
        }
      };
      switch (event.eventType) {
        case 'ui':
          logger.debug('Sending UI Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendUIEvent(gasEvent);
          });
          break;
        case 'operational':
          logger.debug('Sending Operational Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendOperationalEvent(gasEvent);
          });
          break;
        case 'track':
          logger.debug('Sending Track Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendTrackEvent(gasEvent);
          });
          break;
        case 'screen':
          logger.debug('Sending Screen Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendScreenEvent(gasEvent);
          });
          break;
        default:
          logger.error("cannot map eventType ".concat(event.eventType, " to an analytics-web-client function"));
      }
    } else {
      logger.warn('AnalyticsWebClient instance is not provided');
    }
  };
};