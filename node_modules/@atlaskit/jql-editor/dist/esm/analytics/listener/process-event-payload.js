import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Adapted from https://bitbucket.org/atlassian/atlassian-frontend/src/master/packages/analytics/analytics-listeners/src/fabric/process-event-payload.tsx
 * In future if this package is migrated into the Atlassian Frontend repo, then this code and related logic should be
 * moved into @atlaskit/analytics-listeners.
 */

import merge from 'lodash/merge';
import { DEFAULT_SOURCE } from '@atlaskit/analytics-gas-types';
var extractFieldsFromContext = function extractFieldsFromContext(fieldsToPick) {
  return function (contexts) {
    return contexts.map(function (ctx) {
      return fieldsToPick.reduce(function (result, key) {
        return ctx[key] ? merge(result, _defineProperty({}, key, ctx[key])) : result;
      }, {});
    }).reduce(function (result, item) {
      return merge(result, item);
    }, {});
  };
};
var fieldExtractor = function fieldExtractor() {
  return extractFieldsFromContext(['source', 'objectType', 'objectId', 'containerType', 'containerId']);
};
var updatePayloadWithContext = function updatePayloadWithContext(event) {
  if (event.context.length === 0) {
    return _objectSpread({
      source: DEFAULT_SOURCE
    }, event.payload);
  }
  var fields = fieldExtractor()(event.context);
  return _objectSpread(_objectSpread({
    source: DEFAULT_SOURCE
  }, fields), event.payload);
};
export var processEventPayload = function processEventPayload(event) {
  return updatePayloadWithContext(event);
};