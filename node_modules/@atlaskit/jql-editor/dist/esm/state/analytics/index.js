import { Subscription } from 'rxjs/Subscription';
import { ActionSubject, Action as AnalyticsAction, EventType } from '../../analytics';
export var ANALYTICS_DEBOUNCE_MS = 2000;
var AUTOCOMPLETE_ANALYTICS_MEASURE = 'jql-editor-autocomplete';
export var onStartAutocompleteEvent = function onStartAutocompleteEvent() {
  return function (_, _ref) {
    var createAndFireAnalyticsEvent = _ref.createAndFireAnalyticsEvent;
    performance.clearMeasures(AUTOCOMPLETE_ANALYTICS_MEASURE);
    performance.clearMarks("".concat(AUTOCOMPLETE_ANALYTICS_MEASURE, "::start"));
    performance.mark("".concat(AUTOCOMPLETE_ANALYTICS_MEASURE, "::start"));
    var timeoutId = null;
    var promise = new Promise(function (resolve) {
      // Resolve the promise after a fixed debounce period
      timeoutId = window.setTimeout(function () {
        resolve();
      }, ANALYTICS_DEBOUNCE_MS);
    });

    // Create a new subscription which will cancel the analytics promise when unsubscribed
    var analyticsSubscription = new Subscription(function () {
      timeoutId !== null && window.clearTimeout(timeoutId);
    });
    var onStopAutocompleteEvent = function onStopAutocompleteEvent(isSuccess, optionTypes, hasOptions) {
      performance.measure(AUTOCOMPLETE_ANALYTICS_MEASURE, "".concat(AUTOCOMPLETE_ANALYTICS_MEASURE, "::start"));
      var entry = performance.getEntriesByName(AUTOCOMPLETE_ANALYTICS_MEASURE).pop();
      var duration = entry === null || entry === void 0 ? void 0 : entry.duration;

      // Fire our analytics event once our autocomplete data is fetched AND our debounced promise is resolved
      return promise.then(function () {
        var attributes = {
          optionTypes: optionTypes.sort(),
          hasOptions: hasOptions
        };
        if (duration !== undefined) {
          attributes.duration = duration;
        }
        createAndFireAnalyticsEvent({
          action: isSuccess ? AnalyticsAction.RETRIEVED : AnalyticsAction.RETRIEVE_FAILED,
          actionSubject: ActionSubject.AUTOCOMPLETE_OPTION,
          eventType: EventType.OPERATIONAL,
          attributes: attributes
        });
      });
    };
    return {
      analyticsSubscription: analyticsSubscription,
      onStopAutocompleteEvent: onStopAutocompleteEvent
    };
  };
};