import React, { type FocusEvent, type ReactNode } from 'react';
type Props = {
    /**
     * React node to render within the footer.
     */
    EditorFooterContent: ReactNode;
    /**
     * React node to render within the editor controls group.
     */
    EditorControlsContent: ReactNode;
    /**
     * Flag to determine whether the editor view (or autocomplete dropdown) currently has focus.
     */
    editorViewHasFocus: boolean;
    /**
     * Flag to determine whether line numbers should be shown in the editor.
     */
    lineNumbersVisible: boolean;
    /**
     * Flag to determine if there were any JQL parse errors in the last submitted query.
     */
    editorViewIsInvalid: boolean;
    /**
     * ID to assign to the main wrapper of the editor.
     */
    mainId: string;
    /**
     * Ref callback to the main wrapper of the editor.
     */
    onEditorMainRef?: (editorMain: HTMLElement | null) => void;
    /**
     * Ref callback to the editor view container element.
     */
    onEditorViewContainerRef?: (editorViewContainer: HTMLElement | null) => void;
    /**
     * Callback when the editor view is scrolled.
     */
    onEditorViewContainerScroll?: (event: React.UIEvent<HTMLElement>) => void;
    /**
     * Ref callback to the editor view element which the Prosemirror editor will be bound to.
     */
    onEditorViewRef?: (editorView: HTMLElement | null) => void;
    /**
     * Callback when the editor view is blurred.
     */
    onEditorViewBlur?: () => void;
    /**
     * Callback when the editor view is focused.
     */
    onEditorViewFocus?: (event: FocusEvent<HTMLElement>) => void;
    /**
     * Callback when the editor view receives a CSS transition end event.
     */
    onEditorViewTransitionEnd?: () => void;
};
declare const JQLEditorLayout: (props: Props) => React.JSX.Element;
type ReadOnlyProps = {
    query: string;
};
export declare const JQLEditorReadOnly: ({ isSearch, isCompact, ...props }: ReadOnlyProps & {
    isSearch?: boolean | undefined;
    isCompact?: boolean | undefined;
}) => React.JSX.Element;
export default JQLEditorLayout;
