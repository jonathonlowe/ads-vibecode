import React, { useCallback } from 'react';
import { di } from 'react-magnetic-di';
import { HelperMessage } from '@atlaskit/form';
import LegacyWarningIcon from '@atlaskit/icon/glyph/warning';
import WarningIcon from '@atlaskit/icon/utility/warning';
import { Box } from '@atlaskit/primitives/compiled';
import * as colors from '@atlaskit/theme/colors';
import { useEditorViewHasWarnings } from '../../../../hooks/use-editor-view-has-warnings';
import { useExternalMessages, useHydratedDeprecations, useIntl } from '../../../../state';
import { FormatMessages, MessageContainer } from '../format';
import { messages } from './messages';
const softDeprecateEpicParentDocsLink = 'https://support.atlassian.com/jira-software-cloud/docs/upcoming-changes-epic-link-replaced-with-parent/';
const getEpicLinkDeprecationTerm = hydratedDeprecations => {
  const epicLinkWarning = hydratedDeprecations.filter(warning => warning.deprecatedSearcherKey === 'com.pyxis.greenhopper.jira:gh-epic-link-searcher');
  return epicLinkWarning.length > 0 ? epicLinkWarning[0].id : null;
};
const getParentLinkDeprecationTerm = hydratedDeprecations => {
  const parentLinkWarning = hydratedDeprecations.filter(warning => warning.deprecatedSearcherKey === 'com.atlassian.jpo:jpo-custom-field-parent-searcher');
  return parentLinkWarning.length > 0 ? parentLinkWarning[0].id : null;
};
export const useFormattedWarningMessage = () => {
  const [hydratedDeprecations] = useHydratedDeprecations();
  const [{
    warnings: externalWarnings
  }] = useExternalMessages();
  const hasWarnings = useEditorViewHasWarnings();
  const [{
    formatMessage
  }] = useIntl();
  const epicLinkDeprecationTerm = getEpicLinkDeprecationTerm(hydratedDeprecations);
  const parentLinkDeprecationTerm = getParentLinkDeprecationTerm(hydratedDeprecations);
  const formatWarnings = useCallback(message => {
    const combinedMessages = [{
      type: 'warning',
      message
    }, ...externalWarnings];
    return /*#__PURE__*/React.createElement(FormatMessages, {
      messages: combinedMessages
    });
  }, [externalWarnings]);
  if (!hasWarnings) {
    return null;
  } else if (!hydratedDeprecations.length && externalWarnings.length) {
    return /*#__PURE__*/React.createElement(FormatMessages, {
      messages: externalWarnings
    });
  } else if (epicLinkDeprecationTerm == null && parentLinkDeprecationTerm == null) {
    var _hydratedDeprecations;
    return formatWarnings(formatMessage(messages.defaultWarning, {
      deprecatedField: (_hydratedDeprecations = hydratedDeprecations[0]) === null || _hydratedDeprecations === void 0 ? void 0 : _hydratedDeprecations.id
    }));
  } else if (epicLinkDeprecationTerm && parentLinkDeprecationTerm) {
    return formatWarnings(formatMessage(messages.deprecatedBothParentReplacementMessage, {
      link: chunks => /*#__PURE__*/React.createElement("a", {
        href: softDeprecateEpicParentDocsLink,
        target: "_blank",
        rel: "noopener noreferrer",
        onClick: e => e.stopPropagation()
      }, chunks),
      receivedFirst: epicLinkDeprecationTerm,
      receivedSecond: parentLinkDeprecationTerm,
      parentReplacement: 'Parent'
    }));
  } else if (epicLinkDeprecationTerm || parentLinkDeprecationTerm) {
    return formatWarnings(formatMessage(messages.deprecatedParentReplacementMessage, {
      link: chunks => /*#__PURE__*/React.createElement("a", {
        href: softDeprecateEpicParentDocsLink,
        target: "_blank",
        rel: "noopener noreferrer",
        onClick: e => e.stopPropagation()
      }, chunks),
      deprecatedField: epicLinkDeprecationTerm ? epicLinkDeprecationTerm : parentLinkDeprecationTerm,
      parentReplacement: 'Parent'
    }));
  }
};
export const WarningMessages = () => {
  const warningMessage = useFormattedWarningMessage();
  return warningMessage != null ? /*#__PURE__*/React.createElement(MessageContainer, null, /*#__PURE__*/React.createElement(HelperMessage, {
    testId: "jql-editor-warning-message"
  }, /*#__PURE__*/React.createElement(Box, {
    as: "span",
    paddingInlineEnd: "space.050"
  }, /*#__PURE__*/React.createElement(WarningIcon, {
    label: "",
    color: `var(--ds-icon-warning, ${colors.Y400})`,
    LEGACY_size: "small",
    LEGACY_fallbackIcon: LegacyWarningIcon,
    LEGACY_margin: "0 -4px 0 0"
  })), warningMessage)) : null;
};