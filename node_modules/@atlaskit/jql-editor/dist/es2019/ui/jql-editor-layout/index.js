import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { EditorThemeContext, useEditorTheme, useEditorThemeContext } from '../../hooks/use-editor-theme';
import { splitTextByNewLine } from '../../utils/split-text-by-new-line';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { ReadOnlyControlsContent } from '../jql-editor-controls-content/read-only-controls-content';
import { EditorControls, EditorFooter, EditorMain, EditorView, EditorViewContainer, LineNumberToolbar, ReadOnlyEditorView, ReadOnlyEditorViewContainer } from './styled';
const JQLEditorLayout = props => {
  const {
    defaultMaxRows,
    expandedRows,
    isSearch,
    isCompact
  } = useEditorThemeContext();
  const {
    editorViewHasFocus,
    EditorControlsContent,
    EditorFooterContent,
    editorViewIsInvalid,
    lineNumbersVisible,
    mainId,
    onEditorMainRef,
    onEditorViewContainerRef,
    onEditorViewContainerScroll,
    onEditorViewRef,
    onEditorViewBlur,
    onEditorViewFocus,
    onEditorViewTransitionEnd
  } = props;
  return /*#__PURE__*/React.createElement(EditorMain, {
    id: mainId,
    ref: onEditorMainRef
  }, /*#__PURE__*/React.createElement(EditorViewContainer, {
    editorViewHasFocus: editorViewHasFocus,
    editorViewIsInvalid: editorViewIsInvalid,
    ref: onEditorViewContainerRef,
    onScroll: onEditorViewContainerScroll
  }, /*#__PURE__*/React.createElement(LineNumberToolbar, {
    lineNumbersVisible: lineNumbersVisible
  }), /*#__PURE__*/React.createElement(EditorView, {
    defaultMaxRows: defaultMaxRows,
    expandedRows: expandedRows,
    isCompact: isCompact,
    lineNumbersVisible: lineNumbersVisible,
    ref: onEditorViewRef,
    onBlur: onEditorViewBlur,
    onFocus: onEditorViewFocus,
    onTransitionEnd: onEditorViewTransitionEnd
  }), /*#__PURE__*/React.createElement(EditorControls, {
    isSearch: isSearch,
    isCompact: isCompact,
    isVisualRefresh: fg('platform-component-visual-refresh')
  }, EditorControlsContent)), /*#__PURE__*/React.createElement(EditorFooter, null, EditorFooterContent));
};
/**
 * A read only version of the JQL Editor which mimics the layout of the complete component, suitable as an intermediary
 * state when rendering the editor asynchronously.
 * In order to minimise bundle size impact on consumers, it is critical that this component (and any child component)
 * only imports the bare minimum dependencies required to replicate the editor layout.
 */
const JQLEditorReadOnlyWithoutTheme = ({
  query
}) => {
  const {
    defaultMaxRows,
    expandedRows,
    isSearch,
    isCompact
  } = useEditorThemeContext();
  const blocks = splitTextByNewLine(query);
  const lineNumbersVisible = blocks.length > 1;
  return /*#__PURE__*/React.createElement(EditorMain, null, /*#__PURE__*/React.createElement(ReadOnlyEditorViewContainer, null, /*#__PURE__*/React.createElement(LineNumberToolbar, {
    lineNumbersVisible: lineNumbersVisible
  }), /*#__PURE__*/React.createElement(ReadOnlyEditorView, {
    "data-testid": "jql-editor-read-only",
    role: "combobox",
    "aria-readonly": true,
    defaultMaxRows: defaultMaxRows,
    expandedRows: expandedRows,
    lineNumbersVisible: lineNumbersVisible,
    isCompact: isCompact
    // aria-expanded and aria-controls here are placeholders only. This is to avoid a11y violations.
    // This component JQLEditorReadOnlyWithoutTheme is only a loading state
    // Therefore the autocomplete combobox is never shown to the users
    ,
    "aria-expanded": false,
    "aria-controls": "dummy-jql-editor-auto-complete-id",
    "aria-label": "JQL query"
  }, blocks.map((block, index) => /*#__PURE__*/React.createElement(Box, {
    as: "p",
    key: index
  }, block))), /*#__PURE__*/React.createElement(EditorControls, {
    isSearch: isSearch,
    isCompact: isCompact
  }, /*#__PURE__*/React.createElement(ReadOnlyControlsContent, null))), /*#__PURE__*/React.createElement(EditorFooter, null));
};
export const JQLEditorReadOnly = ({
  isSearch,
  isCompact,
  ...props
}) => {
  const editorTheme = useEditorTheme({
    isSearch,
    isCompact
  });
  return /*#__PURE__*/React.createElement(EditorThemeContext.Provider, {
    value: editorTheme
  }, /*#__PURE__*/React.createElement(JQLEditorReadOnlyWithoutTheme, props));
};
export default JQLEditorLayout;