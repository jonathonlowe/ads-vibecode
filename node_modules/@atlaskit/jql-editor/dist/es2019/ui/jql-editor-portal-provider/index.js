import React, { useMemo, useReducer } from 'react';
import { createPortal } from 'react-dom';
import { PortalActionsContext } from './context';
const initialState = {
  components: {},
  containers: {}
};
const reducer = (state, action) => {
  switch (action.type) {
    case 'createPortal':
      {
        const {
          key,
          portalComponent,
          container
        } = action.payload;
        return {
          ...state,
          components: {
            ...state.components,
            [key]: {
              portalComponent,
              container
            }
          }
        };
      }
    case 'destroyPortal':
      {
        const {
          [action.payload]: toDestroy,
          ...components
        } = state.components;
        return {
          ...state,
          components
        };
      }
    case 'registerPluginContainer':
      {
        const {
          element,
          containerKey
        } = action.payload;
        if (!element) {
          return state;
        }
        return {
          ...state,
          containers: {
            ...state.containers,
            [containerKey]: element
          }
        };
      }
    default:
      {
        return state;
      }
  }
};

/**
 * Provides actions to manage portals via context and renders portalled components into the React tree.
 */
export const JQLEditorPortalRenderer = ({
  children
}) => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const actionsContext = useMemo(() => {
    return {
      onCreatePortal: (key, portalComponent, container) => dispatch({
        type: 'createPortal',
        payload: {
          key,
          portalComponent,
          container
        }
      }),
      onDestroyPortal: key => dispatch({
        type: 'destroyPortal',
        payload: key
      }),
      onRegisterPluginContainer: (containerKey, element) => dispatch({
        type: 'registerPluginContainer',
        payload: {
          containerKey,
          element
        }
      })
    };
  }, [dispatch]);
  return /*#__PURE__*/React.createElement(PortalActionsContext.Provider, {
    value: actionsContext
  }, children, Object.entries(state.components).map(([key, value]) => {
    const container = value.container instanceof Element ? value.container : state.containers[value.container];
    return container !== undefined ? /*#__PURE__*/createPortal(value.portalComponent, container, key) : null;
  }));
};