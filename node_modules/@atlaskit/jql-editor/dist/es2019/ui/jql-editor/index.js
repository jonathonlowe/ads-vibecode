import React, { useEffect, useRef } from 'react';
import { injectIntl } from 'react-intl-next';
import { di } from 'react-magnetic-di';
import { useJqlEditorAnalytics } from '../../analytics';
import { EditorThemeContext, useEditorTheme } from '../../hooks/use-editor-theme';
import { EditorStateContainer } from '../../state';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import { JQLEditorPortalRenderer } from '../jql-editor-portal-provider';
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
import JQLEditorView from '../jql-editor-view';
const JQLEditorInner = ({
  analyticsSource,
  query,
  messages = [],
  inputRef,
  isSearching,
  onEditorMounted,
  onDebugUnsafeMessage,
  onHydrate,
  onUpdate,
  onSearch,
  autocompleteProvider,
  intl,
  enableRichInlineNodes = false,
  isCompact,
  onSyntaxHelp,
  onFocus,
  customComponents
}) => {
  const editorTheme = useEditorTheme({
    isSearch: !!onSearch,
    isCompact
  });
  const {
    createAndFireAnalyticsEvent
  } = useJqlEditorAnalytics(analyticsSource);

  // Create and update a mutable ref for our intl object so it can be used by Prosemirror plugins.
  const intlRef = useRef(intl);
  useEffect(() => {
    intlRef.current = intl;
  }, [intl]);
  return /*#__PURE__*/React.createElement(EditorStateContainer, {
    query: query,
    externalMessages: messages,
    isSearching: isSearching,
    intlRef: intlRef,
    onEditorMounted: onEditorMounted,
    onDebugUnsafeMessage: onDebugUnsafeMessage,
    onHydrate: onHydrate,
    onUpdate: onUpdate,
    onSearch: onSearch,
    createAndFireAnalyticsEvent: createAndFireAnalyticsEvent,
    autocompleteProvider: autocompleteProvider,
    enableRichInlineNodes: enableRichInlineNodes,
    onSyntaxHelp: onSyntaxHelp,
    onFocus: onFocus,
    customComponents: customComponents
  }, /*#__PURE__*/React.createElement(EditorThemeContext.Provider, {
    value: editorTheme
  }, /*#__PURE__*/React.createElement(JQLEditorPortalRenderer, null, /*#__PURE__*/React.createElement(JQLEditorView, {
    inputRef: inputRef
  }))));
};
export default injectIntl(JQLEditorInner);