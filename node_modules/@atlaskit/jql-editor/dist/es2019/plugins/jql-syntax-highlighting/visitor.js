import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { AbstractJastVisitor, isOperandNode } from '@atlaskit/jql-ast';
import getDocumentPosition from '../common/get-document-position';
export class SyntaxHighlightingVisitor extends AbstractJastVisitor {
  constructor(state) {
    super();
    _defineProperty(this, "visitCompoundOperator", compoundOperator => {
      return compoundOperator.positions.map(position => this.createHighlight('keyword', position));
    });
    _defineProperty(this, "visitNotClauseOperator", notClauseOperator => {
      return this.getHighlightsIfPosition('keyword', notClauseOperator.position);
    });
    _defineProperty(this, "visitOrderByOperator", orderByOperator => {
      return this.getHighlightsIfPosition('keyword', orderByOperator.position);
    });
    _defineProperty(this, "visitOrderByDirection", orderByDirection => {
      return this.getHighlightsIfPosition('keyword', orderByDirection.position);
    });
    _defineProperty(this, "visitField", field => {
      return this.getHighlightsIfPosition('field', field.position);
    });
    _defineProperty(this, "visitOperator", operator => {
      return this.getHighlightsIfPosition('operator', operator.position);
    });
    _defineProperty(this, "visitPredicateOperator", predicateOperator => {
      return this.getHighlightsIfPosition('operator', predicateOperator.position);
    });
    _defineProperty(this, "getHighlightsIfPosition", (tokenType, maybePosition) => {
      if (!maybePosition) {
        return [];
      }
      return [this.createHighlight(tokenType, maybePosition)];
    });
    _defineProperty(this, "createHighlight", (tokenType, [start, end]) => {
      const documentFrom = getDocumentPosition(this.state.doc, start);
      const documentTo = getDocumentPosition(this.state.doc, end);
      return {
        tokenType,
        documentFrom,
        documentTo
      };
    });
    this.state = state;
  }
  shouldVisitNextChild(node) {
    // Skip visiting operand subtrees, which don't require syntax highlighting and can make a big impact on performance
    return !isOperandNode(node);
  }
  aggregateResult(aggregate, nextResult) {
    return aggregate.concat(nextResult);
  }
  defaultResult() {
    return [];
  }
}