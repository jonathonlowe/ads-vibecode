import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { JQLSyntaxError } from '@atlaskit/jql-ast';
import getDocumentPosition from '../common/get-document-position';
import { getJastFromState } from '../jql-ast';
import { JQLValidationTooltipPluginKey, TOOLTIP_CLASSNAME, TOOLTIP_ENTER_CLASSNAME, TOOLTIP_EXIT_CLASSNAME } from './constants';
export class ValidationTooltipPluginView {
  constructor(mainId) {
    var _document$getElementB;
    _defineProperty(this, "showTooltip", (error, start, end) => {
      var _this$tooltip$offsetP, _box$left, _box$top;
      // Find a center position from the selection endpoints
      const left = (start.left + end.left) / 2;

      // The box in which the container is positioned, to use as base
      const box = (_this$tooltip$offsetP = this.tooltip.offsetParent) === null || _this$tooltip$offsetP === void 0 ? void 0 : _this$tooltip$offsetP.getBoundingClientRect();
      this.tooltip.style.left = `${left - ((_box$left = box === null || box === void 0 ? void 0 : box.left) !== null && _box$left !== void 0 ? _box$left : 0)}px`;
      this.tooltip.style.top = `${start.top - ((_box$top = box === null || box === void 0 ? void 0 : box.top) !== null && _box$top !== void 0 ? _box$top : 0)}px`;
      this.tooltip.textContent = error.message;
      this.tooltip.classList.remove(TOOLTIP_EXIT_CLASSNAME);
      this.tooltip.classList.add(TOOLTIP_ENTER_CLASSNAME);
    });
    _defineProperty(this, "hideTooltip", () => {
      this.tooltip.classList.remove(TOOLTIP_ENTER_CLASSNAME);
      this.tooltip.classList.add(TOOLTIP_EXIT_CLASSNAME);
    });
    this.tooltip = document.createElement('div');
    this.tooltip.setAttribute('data-testid', 'jql-validation-tooltip');
    this.tooltip.classList.add(TOOLTIP_CLASSNAME);
    (_document$getElementB = document.getElementById(mainId)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.appendChild(this.tooltip);
  }
  update(view, lastState) {
    const state = view.state;
    const isHovered = JQLValidationTooltipPluginKey.getState(state);
    const lastIsHovered = JQLValidationTooltipPluginKey.getState(lastState);
    const jast = getJastFromState(state);
    const [error] = jast.errors;
    if (isHovered === lastIsHovered) {
      return;
    }
    if (isHovered) {
      if (error instanceof JQLSyntaxError) {
        const start = getDocumentPosition(state.doc, error.start);
        const stop = getDocumentPosition(state.doc, error.stop);
        const startCoords = view.coordsAtPos(start);
        const stopCoords = view.coordsAtPos(stop);
        this.showTooltip(error, startCoords, stopCoords);
      }
    } else {
      this.hideTooltip();
    }
  }
  destroy() {
    this.tooltip.remove();
  }
}