import { type MutableRefObject } from 'react';
import { type IntlShape } from 'react-intl-next';
import { type ResolvedPos, Schema, type Slice } from '@atlaskit/editor-prosemirror/model';
import { EditorState, type Transaction } from '@atlaskit/editor-prosemirror/state';
import { type EditorView } from '@atlaskit/editor-prosemirror/view';
import { richInlineNodes } from '../plugins/rich-inline-nodes/nodes';
import { type PortalActions } from '../ui/jql-editor-portal-provider/types';
type Nodes = 'doc' | 'paragraph' | 'text' | keyof typeof richInlineNodes;
type Marks = 'token' | 'cursor';
export declare const JQLEditorSchema: Schema<Nodes, Marks>;
/**
 * Emulate the behaviour of the default https://prosemirror.net/docs/ref/#view.EditorProps.clipboardTextSerializer but
 * preserves consecutive empty block nodes.
 */
export declare const clipboardTextSerializer: (slice: Slice) => string;
/**
 * Emulate the behaviour of the default https://prosemirror.net/docs/ref/#view.EditorProps.clipboardTextParser but
 * preserves consecutive empty lines.
 */
export declare const clipboardTextParser: (text: string, $context: ResolvedPos) => Slice;
export declare const defaultEditorState: EditorState;
export type JQLEditorSchemaType = typeof JQLEditorSchema;
export type JQLEditorCommand = (state: EditorState, dispatch?: (tr: Transaction) => void, view?: EditorView) => boolean;
export type JQLEditorKeymap = {
    [key: string]: JQLEditorCommand;
};
export declare const configurePlugins: (editorState: EditorState, onSearchCommand: JQLEditorCommand | undefined, intlRef: MutableRefObject<IntlShape>, mainId: string, portalActions: PortalActions | void, enableRichInlineNodes: boolean) => EditorState;
export {};
