import { type FunctionComponent } from 'react';
import { Subject } from 'rxjs/Subject';
import { type PortalActions } from '../../ui/jql-editor-portal-provider/types';
import { type PluginContainerKey } from '../types';
/**
 * Abstract class for Prosemirror plugin views which need to mount a React component. Concrete subclasses must implement
 * {@link ReactPluginView#getComponent} which specifies the React component to render, along with
 * {@link ReactPluginView#getInitialComponentProps} which returns any props to pass to the component on initial render.
 *
 * After the class is constructed, the caller must invoke {@link ReactPluginView#init} in order to mount the component.
 *
 * If there are external changes which the component needs to respond to, {@link ReactPluginView#componentSubject} can
 * be used to trigger a re-render of the component with updated props. For example:
 * ```
 * update = (view: EditorView) => {
 *   this.componentSubject.next(this.getComponentProps(view));
 * };
 *
 * getComponentProps = (view: EditorView) => {
 *   // Some logic to get props from the Prosemirror view
 * }
 * ```
 */
export default abstract class ReactPluginView<ComponentProps extends {}> {
    protected readonly componentSubject: Subject<ComponentProps>;
    private readonly portalActions;
    private readonly portalKey;
    private readonly containerKey;
    /**
     * Construct a Prosemirror plugin view which will render a React component in a portal.
     *
     * @param portalActions Provides callback functions which can be invoked to create and destroy a portal.
     * @param portalKey Unique identifier for the plugin component.
     * @param containerKey Key representing the HTML container the React component will be portalled into.
     * @protected
     */
    protected constructor(portalActions: PortalActions, portalKey: string, containerKey: PluginContainerKey);
    init: () => void;
    destroy(): void;
    /**
     * Return a React component to render for the plugin.
     */
    protected abstract getComponent: () => FunctionComponent<ComponentProps>;
    /**
     * Return props to set on the component for initial render.
     */
    protected abstract getInitialComponentProps: () => ComponentProps;
}
