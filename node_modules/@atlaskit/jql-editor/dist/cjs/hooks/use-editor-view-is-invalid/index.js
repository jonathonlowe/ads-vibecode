"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEditorViewIsInvalid = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactMagneticDi = require("react-magnetic-di");
var _state = require("../../state");
/**
 * Determine if the editor view should be displayed in an invalid state. To determine if the editor is invalid we adopt
 * the following rules:
 * 1. Client errors are dynamic
 *    a. If the user searches with invalid JQL then the invalid state is shown
 *    b. If the user fixes the error the invalid state is cleared until their next search
 * 2. External JQL errors are static
 *    a. If an external error is provided (and the previous search contains no client errors) then the invalid state is
 *    shown until their next search
 */
var useEditorViewIsInvalid = exports.useEditorViewIsInvalid = function useEditorViewIsInvalid() {
  var _useJqlError = (0, _state.useJqlError)(),
    _useJqlError2 = (0, _slicedToArray2.default)(_useJqlError, 1),
    jqlError = _useJqlError2[0];
  var _useExternalMessages = (0, _state.useExternalMessages)(),
    _useExternalMessages2 = (0, _slicedToArray2.default)(_useExternalMessages, 1),
    externalErrors = _useExternalMessages2[0].errors;
  var _useEditorStateHasJql = (0, _state.useEditorStateHasJqlError)(),
    _useEditorStateHasJql2 = (0, _slicedToArray2.default)(_useEditorStateHasJql, 1),
    editorStateHasJqlError = _useEditorStateHasJql2[0];

  // Determines if the last searched query contained an error that has not been fixed in the editor
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasActiveError = _useState2[0],
    setHasActiveError = _useState2[1];
  var hasActiveExternalError = jqlError === null && externalErrors.length > 0;

  // Update hasActiveError whenever a query has been searched and the resulting jqlError has changed
  (0, _react.useEffect)(function () {
    setHasActiveError(jqlError !== null);
  }, [jqlError]);

  // Set hasActiveError to false whenever the editor JQL is valid
  (0, _react.useEffect)(function () {
    if (!editorStateHasJqlError) {
      setHasActiveError(false);
    }
  }, [editorStateHasJqlError]);
  return hasActiveError || hasActiveExternalError;
};