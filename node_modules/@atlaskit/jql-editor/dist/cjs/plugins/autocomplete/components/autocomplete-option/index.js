"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _deburr = _interopRequireDefault(require("lodash/deburr"));
var _noop = _interopRequireDefault(require("lodash/noop"));
var _alignTextLeft = _interopRequireDefault(require("@atlaskit/icon/core/align-text-left"));
var _calendar = _interopRequireDefault(require("@atlaskit/icon/core/calendar"));
var _clock = _interopRequireDefault(require("@atlaskit/icon/core/clock"));
var _dataNumber = _interopRequireDefault(require("@atlaskit/icon/core/data-number"));
var _informationEditorPanel = _interopRequireDefault(require("@atlaskit/icon/core/migration/information--editor-panel"));
var _personAvatar = _interopRequireDefault(require("@atlaskit/icon/core/person-avatar"));
var _tag = _interopRequireDefault(require("@atlaskit/icon/core/tag"));
var _task = _interopRequireDefault(require("@atlaskit/icon/core/task"));
var _text = _interopRequireDefault(require("@atlaskit/icon/core/text"));
var _jqlAst = require("@atlaskit/jql-ast");
var _alignLeftIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/align-left-icon"));
var _arrowDownCircleIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/arrow-down-circle-icon"));
var _calendarIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/calendar-icon"));
var _clockIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/clock-icon"));
var _dataNumberIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/data-number-icon"));
var _personAvatarIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/person-avatar-icon"));
var _tagIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/tag-icon"));
var _taskIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/task-icon"));
var _textIcon = _interopRequireDefault(require("@atlaskit/legacy-custom-icons/text-icon"));
var _colors = require("@atlaskit/theme/colors");
var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));
var _state = require("../../../../state");
var _messages = require("./messages");
var _styled = require("./styled");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ResizedIcon = function ResizedIcon(_ref) {
  var Icon = _ref.Icon,
    LegacyIcon = _ref.LegacyIcon;
  return /*#__PURE__*/_react.default.createElement(Icon, {
    LEGACY_fallbackIcon: LegacyIcon,
    LEGACY_size: "small",
    label: "",
    testId: "jql-editor-field-type-icon",
    color: "currentColor"
  });
};

/**
 * List of types with supported icons is derived from GIN
 * Custom SVGs are provisional while we work on making field type icons consistent across Atlassian
 */
var getFieldTypeIcon = function getFieldTypeIcon(type) {
  switch (type) {
    case 'Checkboxes':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _task.default,
        LegacyIcon: _taskIcon.default
      });
    case 'Date':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _calendar.default,
        LegacyIcon: _calendarIcon.default
      });
    case 'Dropdown':
      // TODO: https://product-fabric.atlassian.net/browse/DSP-21308
      return /*#__PURE__*/_react.default.createElement(_arrowDownCircleIcon.default, {
        label: "",
        size: "small",
        testId: "jql-editor-field-type-icon"
      });
    case 'Labels':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _tag.default,
        LegacyIcon: _tagIcon.default
      });
    case 'Number':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _dataNumber.default,
        LegacyIcon: _dataNumberIcon.default
      });
    case 'Paragraph':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _alignTextLeft.default,
        LegacyIcon: _alignLeftIcon.default
      });
    case 'People':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _personAvatar.default,
        LegacyIcon: _personAvatarIcon.default
      });
    case 'Short text':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _text.default,
        LegacyIcon: _textIcon.default
      });
    case 'Time stamp':
      return /*#__PURE__*/_react.default.createElement(ResizedIcon, {
        Icon: _clock.default,
        LegacyIcon: _clockIcon.default
      });
    default:
      return null;
  }
};
var getHighlightPosition = function getHighlightPosition(name, matchedText) {
  var normalizedName = (0, _deburr.default)(name).toLowerCase();
  var normalizedMatchedText = (0, _deburr.default)((0, _jqlAst.normaliseJqlString)(matchedText)).toLowerCase();
  var index = normalizedName.indexOf(normalizedMatchedText);
  if (index === -1) {
    return null;
  }
  return [index, index + normalizedMatchedText.length];
};
var getDeprecatedTooltipMessage = function getDeprecatedTooltipMessage(deprecatedSearcherKey) {
  switch (deprecatedSearcherKey) {
    case 'com.pyxis.greenhopper.jira:gh-epic-link-searcher':
    case 'com.atlassian.jpo:jpo-custom-field-parent-searcher':
      return _messages.messages.deprecatedFieldTooltipParentReplacementMessage;
    default:
      return _messages.messages.deprecatedFieldTooltipDefaultMessage;
  }
};
var AutocompleteOption = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _props$option = props.option,
    id = _props$option.id,
    name = _props$option.name,
    fieldType = _props$option.fieldType,
    matchedText = _props$option.matchedText,
    _props$option$isDepre = _props$option.isDeprecated,
    isDeprecated = _props$option$isDepre === void 0 ? false : _props$option$isDepre,
    deprecatedSearcherKey = _props$option.deprecatedSearcherKey,
    isSelected = props.isSelected,
    onClick = props.onClick,
    onMouseMove = props.onMouseMove;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    overflows = _useState2[0],
    setOverflows = _useState2[1];
  var _useIntl = (0, _state.useIntl)(),
    _useIntl2 = (0, _slicedToArray2.default)(_useIntl, 1),
    formatMessage = _useIntl2[0].formatMessage;
  var onNameRef = (0, _react.useCallback)(function (node) {
    // This ref will be re-invoked after a tooltip is rendered, so we avoid recomputing the overflow in that instance
    // so we don't risk infinite re-renders (which we've observed through production logs).
    if (node != null && !overflows) {
      setOverflows(node.offsetWidth < node.scrollWidth);
    }
  }, [overflows]);

  // TODO: verify type is i18n'd after integrating with GraphQL API

  var fieldTypeIcon = fieldType ? getFieldTypeIcon(fieldType) : null;
  var optionName = (0, _react.useMemo)(function () {
    var highlightPosition = getHighlightPosition(name, matchedText);
    return highlightPosition ? /*#__PURE__*/_react.default.createElement(_styled.OptionName, {
      ref: onNameRef,
      "aria-label": name
    }, name.substring(0, highlightPosition[0]), /*#__PURE__*/_react.default.createElement(_styled.OptionHighlight, null, name.substring.apply(name, (0, _toConsumableArray2.default)(highlightPosition))), name.substring(highlightPosition[1])) : /*#__PURE__*/_react.default.createElement(_styled.OptionName, {
      ref: onNameRef
    }, name);
  }, [onNameRef, name, matchedText]);
  var deprecatedTooltipContent = /*#__PURE__*/_react.default.createElement(_styled.TooltipContent, null, formatMessage(getDeprecatedTooltipMessage(deprecatedSearcherKey), {
    b: function b(text) {
      return /*#__PURE__*/_react.default.createElement("b", null, text);
    },
    received: name,
    parentReplacement: 'Parent'
  }));
  var ListItem = /*#__PURE__*/_react.default.createElement(_styled.OptionListItem, (0, _extends2.default)({
    id: id,
    "data-testid": "jql-editor-autocomplete-option",
    role: "option",
    isSelected: isSelected,
    isDeprecated: isDeprecated,
    onClick: isDeprecated ? _noop.default : onClick,
    onMouseMove: isDeprecated ? _noop.default : onMouseMove
  }, ref && {
    ref: ref
  }, {
    "aria-selected": isSelected
  }), isDeprecated ? /*#__PURE__*/_react.default.createElement(_styled.DeprecatedOptionContainer, null, optionName, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    content: deprecatedTooltipContent,
    position: 'right'
  }, /*#__PURE__*/_react.default.createElement(_informationEditorPanel.default, {
    spacing: "spacious",
    testId: "jql-editor-deprecated-icon",
    label: "",
    color: "var(--ds-icon, ".concat(_colors.N400, ")")
  }))) : optionName, fieldType && /*#__PURE__*/_react.default.createElement(_styled.FieldType, null, fieldTypeIcon && /*#__PURE__*/_react.default.createElement(_styled.FieldTypeIcon, null, fieldTypeIcon), fieldType));
  var tooltipContent = /*#__PURE__*/_react.default.createElement(_styled.TooltipContent, null, name);
  if (overflows) {
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      content: tooltipContent,
      position: 'right'
    }, ListItem);
  }
  return ListItem;
});
var _default = exports.default = AutocompleteOption;