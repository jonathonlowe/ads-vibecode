"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _state = require("@atlaskit/editor-prosemirror/state");
var _pluginKeymap = require("../common/plugin-keymap");
var _constants = require("./constants");
var _view = _interopRequireDefault(require("./view"));
var getKeyHandler = function getKeyHandler(keymap, key) {
  return function (state, dispatch, view) {
    var binding = keymap.getKeyBinding(key);
    return binding ? binding(state, dispatch, view) : false;
  };
};
var autocompletePlugin = function autocompletePlugin(portalActions, enableRichInlineNodes) {
  // Empty keymap passed down to the React component so it can register key bindings
  var keymap = new _pluginKeymap.PluginKeymap();
  return new _state.Plugin({
    key: _constants.JQLAutocompletePluginKey,
    view: function view(editorView) {
      var view = new _view.default(editorView, keymap, portalActions, enableRichInlineNodes);
      // Initialise view to mount the react component
      view.init();
      return view;
    },
    props: {
      handleKeyDown: (0, _keymap.keydownHandler)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, _constants.ARROW_UP_KEY, getKeyHandler(keymap, _constants.ARROW_UP_KEY)), _constants.ARROW_DOWN_KEY, getKeyHandler(keymap, _constants.ARROW_DOWN_KEY)), _constants.CMD_ARROW_UP_KEY, getKeyHandler(keymap, _constants.CMD_ARROW_UP_KEY)), _constants.CMD_ARROW_DOWN_KEY, getKeyHandler(keymap, _constants.CMD_ARROW_DOWN_KEY)), _constants.HOME_KEY, getKeyHandler(keymap, _constants.HOME_KEY)), _constants.END_KEY, getKeyHandler(keymap, _constants.END_KEY)), _constants.ESCAPE_KEY, getKeyHandler(keymap, _constants.ESCAPE_KEY)), _constants.ENTER_KEY, getKeyHandler(keymap, _constants.ENTER_KEY)), _constants.TAB_KEY, getKeyHandler(keymap, _constants.TAB_KEY)))
    }
  });
};
var _default = exports.default = autocompletePlugin;