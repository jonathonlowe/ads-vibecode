"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceRichInlineNodes = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jqlAst = require("@atlaskit/jql-ast");
var _schema = require("../../../schema");
var _getDocumentPosition = _interopRequireDefault(require("../../common/get-document-position"));
var _jqlAst2 = require("../../jql-ast");
var _constants = require("../constants");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var replaceRichInlineNodes = exports.replaceRichInlineNodes = function replaceRichInlineNodes(editorState, hydratedValues) {
  var ast = (0, _jqlAst2.getJastFromState)(editorState);
  var transaction = editorState.tr;
  // Do not allow users to revert this transaction with undo command so they can't land in an unhydrated state
  transaction.setMeta('addToHistory', false);
  Object.entries(hydratedValues).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      fieldName = _ref2[0],
      values = _ref2[1];
    values.forEach(function (value) {
      if (value.type === 'user') {
        var astNodes = getValueNodes(ast, fieldName, value.id);
        astNodes.forEach(function (astNode) {
          if (astNode.position) {
            var _astNode$position = (0, _slicedToArray2.default)(astNode.position, 2),
              from = _astNode$position[0],
              to = _astNode$position[1];
            var documentFrom = (0, _getDocumentPosition.default)(transaction.doc, from);
            if (!isRichInlineNode(transaction.doc, documentFrom)) {
              var documentTo = (0, _getDocumentPosition.default)(transaction.doc, to);
              var node = getRichInlineNode(fieldName, value, astNode.text);
              transaction.replaceWith(documentFrom, documentTo, node);
            }
          }
        });
      }
    });
  });
  return transaction;
};
var getRichInlineNode = function getRichInlineNode(fieldName, value, text) {
  switch (value.type) {
    case 'user':
      {
        var textContent = _schema.JQLEditorSchema.text(text);
        return _schema.JQLEditorSchema.nodes.user.create(_objectSpread(_objectSpread({}, value), {}, {
          fieldName: fieldName
        }), textContent);
      }
    default:
      {
        throw new Error("Unsupported hydrated value type ".concat(value.type));
      }
  }
};
var isRichInlineNode = function isRichInlineNode(doc, position) {
  var _doc$resolve$nodeAfte;
  return ((_doc$resolve$nodeAfte = doc.resolve(position).nodeAfter) === null || _doc$resolve$nodeAfte === void 0 ? void 0 : _doc$resolve$nodeAfte.type.spec.group) === _constants.RICH_INLINE_NODE;
};
var getValueNodes = function getValueNodes(ast, field, value) {
  if (!ast.query) {
    return [];
  }
  return ast.query.accept(new FindValuesVisitor(field, value));
};
var FindValuesVisitor = /*#__PURE__*/function (_AbstractJastVisitor) {
  function FindValuesVisitor(field, value) {
    var _this;
    (0, _classCallCheck2.default)(this, FindValuesVisitor);
    _this = _callSuper(this, FindValuesVisitor);
    (0, _defineProperty2.default)(_this, "visitQuery", function (query) {
      if (query.where === undefined) {
        return [];
      }
      return query.where.accept(_this);
    });
    (0, _defineProperty2.default)(_this, "visitCompoundClause", function (compoundClause) {
      return compoundClause.clauses.reduce(function (operands, compoundClause) {
        return [].concat((0, _toConsumableArray2.default)(operands), (0, _toConsumableArray2.default)(compoundClause.accept(_this)));
      }, []);
    });
    (0, _defineProperty2.default)(_this, "visitTerminalClause", function (terminalClause) {
      if (terminalClause.field.value !== _this.field) {
        return [];
      }
      if (terminalClause.operand === undefined) {
        return [];
      }
      return terminalClause.operand.accept(_this);
    });
    (0, _defineProperty2.default)(_this, "visitNotClause", function (notClause) {
      return notClause.clause.accept(_this);
    });
    (0, _defineProperty2.default)(_this, "visitValueOperand", function (valueOperand) {
      if (valueOperand.value !== _this.value) {
        return [];
      }
      return [valueOperand];
    });
    (0, _defineProperty2.default)(_this, "visitListOperand", function (listOperand) {
      return listOperand.values.reduce(function (values, operand) {
        return [].concat((0, _toConsumableArray2.default)(values), (0, _toConsumableArray2.default)(operand.accept(_this)));
      }, []);
    });
    _this.field = field;
    _this.value = value;
    return _this;
  }
  (0, _inherits2.default)(FindValuesVisitor, _AbstractJastVisitor);
  return (0, _createClass2.default)(FindValuesVisitor, [{
    key: "aggregateResult",
    value: function aggregateResult(aggregate, nextResult) {
      return [].concat((0, _toConsumableArray2.default)(aggregate), (0, _toConsumableArray2.default)(nextResult));
    }
  }, {
    key: "defaultResult",
    value: function defaultResult() {
      return [];
    }
  }]);
}(_jqlAst.AbstractJastVisitor);