"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _mapValues = _interopRequireDefault(require("lodash/mapValues"));
var _state = require("@atlaskit/editor-prosemirror/state");
var _view2 = require("@atlaskit/editor-prosemirror/view");
var _jqlAst = require("@atlaskit/jql-ast");
var _getDocumentPosition = _interopRequireDefault(require("../common/get-document-position"));
var _jqlAst2 = require("../jql-ast");
var _constants = require("./constants");
var _nodes = require("./nodes");
var _reactNodeView = require("./util/react-node-view");
var decorateNodesInRange = function decorateNodesInRange(state, decoration, from, to) {
  var decorations = [];
  state.doc.nodesBetween(from, to, function (node, pos) {
    if (node.type.spec.group === _constants.RICH_INLINE_NODE) {
      decorations.push(_view2.Decoration.node(pos, pos + node.nodeSize, {}, {
        type: decoration
      }));
    }
  });
  return decorations;
};
var RichInlineNodesPluginKey = new _state.PluginKey('rich-inline-nodes-plugin');
var richInlineNodesPlugin = function richInlineNodesPlugin(portalActions) {
  return new _state.Plugin({
    key: RichInlineNodesPluginKey,
    props: {
      decorations: function decorations(state) {
        var _decorations;
        var decorations = [];

        // Apply selected decoration to node views when they are part of a text selection
        var _state$selection = state.selection,
          from = _state$selection.from,
          to = _state$selection.to;
        (_decorations = decorations).push.apply(_decorations, (0, _toConsumableArray2.default)(decorateNodesInRange(state, _constants.SELECTED_NODE, from, to)));

        // Apply error decoration to node views when they are part of AST error range
        var ast = (0, _jqlAst2.getJastFromState)(state);
        var _ast$errors = (0, _slicedToArray2.default)(ast.errors, 1),
          error = _ast$errors[0];
        if (error instanceof _jqlAst.JQLSyntaxError) {
          var _decorations2;
          var documentFrom = (0, _getDocumentPosition.default)(state.doc, error.start);
          var documentTo = (0, _getDocumentPosition.default)(state.doc, error.stop);
          (_decorations2 = decorations).push.apply(_decorations2, (0, _toConsumableArray2.default)(decorateNodesInRange(state, _constants.ERROR_NODE, documentFrom, documentTo)));
        }
        return _view2.DecorationSet.create(state.doc, decorations);
      },
      nodeViews: (0, _mapValues.default)(_nodes.richInlineNodes, function (jqlNodeSpec) {
        return function (node, _view, _getPos, decorations) {
          return _reactNodeView.ReactNodeView.for(jqlNodeSpec.component, portalActions, node, decorations);
        };
      })
    }
  });
};
var _default = exports.default = richInlineNodesPlugin;