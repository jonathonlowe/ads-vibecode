"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationTooltipPluginView = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _jqlAst = require("@atlaskit/jql-ast");
var _getDocumentPosition = _interopRequireDefault(require("../common/get-document-position"));
var _jqlAst2 = require("../jql-ast");
var _constants = require("./constants");
var ValidationTooltipPluginView = exports.ValidationTooltipPluginView = /*#__PURE__*/function () {
  function ValidationTooltipPluginView(mainId) {
    var _this = this,
      _document$getElementB;
    (0, _classCallCheck2.default)(this, ValidationTooltipPluginView);
    (0, _defineProperty2.default)(this, "showTooltip", function (error, start, end) {
      var _this$tooltip$offsetP, _box$left, _box$top;
      // Find a center position from the selection endpoints
      var left = (start.left + end.left) / 2;

      // The box in which the container is positioned, to use as base
      var box = (_this$tooltip$offsetP = _this.tooltip.offsetParent) === null || _this$tooltip$offsetP === void 0 ? void 0 : _this$tooltip$offsetP.getBoundingClientRect();
      _this.tooltip.style.left = "".concat(left - ((_box$left = box === null || box === void 0 ? void 0 : box.left) !== null && _box$left !== void 0 ? _box$left : 0), "px");
      _this.tooltip.style.top = "".concat(start.top - ((_box$top = box === null || box === void 0 ? void 0 : box.top) !== null && _box$top !== void 0 ? _box$top : 0), "px");
      _this.tooltip.textContent = error.message;
      _this.tooltip.classList.remove(_constants.TOOLTIP_EXIT_CLASSNAME);
      _this.tooltip.classList.add(_constants.TOOLTIP_ENTER_CLASSNAME);
    });
    (0, _defineProperty2.default)(this, "hideTooltip", function () {
      _this.tooltip.classList.remove(_constants.TOOLTIP_ENTER_CLASSNAME);
      _this.tooltip.classList.add(_constants.TOOLTIP_EXIT_CLASSNAME);
    });
    this.tooltip = document.createElement('div');
    this.tooltip.setAttribute('data-testid', 'jql-validation-tooltip');
    this.tooltip.classList.add(_constants.TOOLTIP_CLASSNAME);
    (_document$getElementB = document.getElementById(mainId)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(this.tooltip);
  }
  return (0, _createClass2.default)(ValidationTooltipPluginView, [{
    key: "update",
    value: function update(view, lastState) {
      var state = view.state;
      var isHovered = _constants.JQLValidationTooltipPluginKey.getState(state);
      var lastIsHovered = _constants.JQLValidationTooltipPluginKey.getState(lastState);
      var jast = (0, _jqlAst2.getJastFromState)(state);
      var _jast$errors = (0, _slicedToArray2.default)(jast.errors, 1),
        error = _jast$errors[0];
      if (isHovered === lastIsHovered) {
        return;
      }
      if (isHovered) {
        if (error instanceof _jqlAst.JQLSyntaxError) {
          var start = (0, _getDocumentPosition.default)(state.doc, error.start);
          var stop = (0, _getDocumentPosition.default)(state.doc, error.stop);
          var startCoords = view.coordsAtPos(start);
          var stopCoords = view.coordsAtPos(stop);
          this.showTooltip(error, startCoords, stopCoords);
        }
      } else {
        this.hideTooltip();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.tooltip.remove();
    }
  }]);
}();