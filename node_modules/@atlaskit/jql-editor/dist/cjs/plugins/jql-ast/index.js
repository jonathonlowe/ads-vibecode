"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJastFromState = exports.default = void 0;
var _state = require("@atlaskit/editor-prosemirror/state");
var _jqlAst = require("@atlaskit/jql-ast");
var _documentText = require("../../utils/document-text");
var _JQLEditorErrorStrategy = _interopRequireDefault(require("./JQLEditorErrorStrategy"));
var JQLAstPluginKey = new _state.PluginKey('jql-ast-plugin');
var getJastFromState = exports.getJastFromState = function getJastFromState(state) {
  var jast = JQLAstPluginKey.getState(state);
  // This should never happen as the JQLAstPlugin will always be configured but we'll handle this case anyway to keep TS happy.
  if (jast == null) {
    // eslint-disable-next-line no-console
    console.error('Unable to get state from the JQLAstPlugin as it has not been configured.');
    return {
      query: undefined,
      represents: '',
      errors: []
    };
  }
  return jast;
};
var jqlAstPlugin = function jqlAstPlugin(intlRef) {
  var jastBuilder = new _jqlAst.JastBuilder().setErrorHandler(new _JQLEditorErrorStrategy.default(intlRef));
  return new _state.Plugin({
    key: JQLAstPluginKey,
    state: {
      init: function init(_, _ref) {
        var doc = _ref.doc;
        return jastBuilder.build((0, _documentText.getNodeText)(doc, 0, doc.content.size));
      },
      // @ts-ignore
      apply: function apply(tr, value, oldState) {
        var text = (0, _documentText.getNodeText)(tr.doc, 0, tr.doc.content.size);
        var oldText = (0, _documentText.getNodeText)(oldState.doc, 0, oldState.doc.content.size);
        // Only update the AST if textContent has changed
        return text !== oldText ? jastBuilder.build(text) : value;
      }
    }
  });
};
var _default = exports.default = jqlAstPlugin;