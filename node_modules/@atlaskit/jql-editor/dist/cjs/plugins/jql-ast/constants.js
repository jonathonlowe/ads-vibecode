"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preferredRules = exports.lowPriorityTokens = exports.ignoredTokens = void 0;
var _jqlParser = require("@atlaskit/jql-parser");
var ignoredTokens = exports.ignoredTokens = new Set([_jqlParser.JQLLexer.EOF, _jqlParser.JQLLexer.LPAREN, _jqlParser.JQLLexer.LBRACKET, _jqlParser.JQLLexer.STRING, _jqlParser.JQLLexer.QUOTE_STRING, _jqlParser.JQLLexer.SQUOTE_STRING, _jqlParser.JQLLexer.POSNUMBER, _jqlParser.JQLLexer.NEGNUMBER, _jqlParser.JQLLexer.BANG, _jqlParser.JQLLexer.CUSTOMFIELD]);
var preferredRules = exports.preferredRules = new Set([_jqlParser.JQLParser.RULE_jqlField, _jqlParser.JQLParser.RULE_jqlFieldProperty, _jqlParser.JQLParser.RULE_jqlEqualsOperator, _jqlParser.JQLParser.RULE_jqlLikeOperator, _jqlParser.JQLParser.RULE_jqlComparisonOperator, _jqlParser.JQLParser.RULE_jqlInOperator, _jqlParser.JQLParser.RULE_jqlIsOperator, _jqlParser.JQLParser.RULE_jqlWasOperator, _jqlParser.JQLParser.RULE_jqlWasInOperator, _jqlParser.JQLParser.RULE_jqlChangedOperator, _jqlParser.JQLParser.RULE_jqlValue, _jqlParser.JQLParser.RULE_jqlListStart, _jqlParser.JQLParser.RULE_jqlFunction, _jqlParser.JQLParser.RULE_jqlCustomField,
// Produces rules for fieldPropertyId, fieldPropertyArgument and functionArgument
_jqlParser.JQLParser.RULE_jqlArgument]);

// The following tokens are returned by autocomplete but they are considered "lower" priority suggestions. We only want
// to show these if there are no other viable tokens to suggest.
var lowPriorityTokens = exports.lowPriorityTokens = [_jqlParser.JQLLexer.RPAREN, _jqlParser.JQLLexer.RBRACKET, _jqlParser.JQLLexer.COMMA];