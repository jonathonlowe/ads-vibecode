"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseExpandToggle = void 0;
var _react = _interopRequireDefault(require("react"));
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _new = require("@atlaskit/button/new");
var _growDiagonal = _interopRequireDefault(require("@atlaskit/icon/core/grow-diagonal"));
var _shrinkDiagonal = _interopRequireDefault(require("@atlaskit/icon/core/shrink-diagonal"));
var _actualSize = _interopRequireDefault(require("@atlaskit/icon/glyph/media-services/actual-size"));
var _fitToPage = _interopRequireDefault(require("@atlaskit/icon/glyph/media-services/fit-to-page"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _styled = require("./styled");
// Atlaskit doesn't provide a circle variation of the expand/collapse icons so we have to implement our own
var ExpandCircleIcon = function ExpandCircleIcon(_ref) {
  var isDisabled = _ref.isDisabled;
  return /*#__PURE__*/_react.default.createElement(_growDiagonal.default, {
    label: '',
    LEGACY_size: 'small',
    color: isDisabled ? "var(--ds-icon-disabled, ".concat(_colors.N50, ")") : "var(--ds-icon, ".concat(_colors.N500, ")"),
    LEGACY_fallbackIcon: _actualSize.default
  });
};
var CollapseCircleIcon = function CollapseCircleIcon(_ref2) {
  var isDisabled = _ref2.isDisabled;
  return /*#__PURE__*/_react.default.createElement(_shrinkDiagonal.default, {
    label: '',
    LEGACY_size: 'small',
    color: isDisabled ? "var(--ds-icon-disabled, ".concat(_colors.N50, ")") : "var(--ds-icon, ".concat(_colors.N500, ")"),
    LEGACY_fallbackIcon: _fitToPage.default
  });
};
var BaseExpandToggle = exports.BaseExpandToggle = function BaseExpandToggle(_ref3) {
  var expanded = _ref3.expanded,
    editorId = _ref3.editorId,
    isDisabled = _ref3.isDisabled,
    label = _ref3.label,
    onClick = _ref3.onClick;
  var Icon;
  if (expanded) {
    Icon = CollapseCircleIcon;
  } else {
    Icon = ExpandCircleIcon;
  }
  return (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? /*#__PURE__*/_react.default.createElement(_new.IconButton, {
    appearance: 'subtle',
    spacing: "compact",
    "aria-expanded": expanded,
    "aria-controls": editorId,
    label: label,
    isDisabled: isDisabled,
    onClick: onClick,
    icon: expanded ? _shrinkDiagonal.default : _growDiagonal.default
  }) : /*#__PURE__*/_react.default.createElement(_styled.ExpandToggleContainer, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    appearance: 'subtle',
    "aria-expanded": expanded,
    "aria-controls": editorId,
    "aria-label": label,
    isDisabled: isDisabled,
    spacing: 'none',
    onClick: onClick,
    iconBefore: /*#__PURE__*/_react.default.createElement(Icon, {
      isDisabled: isDisabled
    })
  }));
};