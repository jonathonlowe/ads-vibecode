"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("../../common/constants");
var _useEditorTheme = require("../../hooks/use-editor-theme");
var _useEditorViewIsInvalid = require("../../hooks/use-editor-view-is-invalid");
var _state = require("../../state");
var _jqlEditorControlsContent = require("../jql-editor-controls-content");
var _jqlEditorFooterContent = require("../jql-editor-footer-content");
var _jqlEditorLayout = _interopRequireDefault(require("../jql-editor-layout"));
var _context = require("../jql-editor-portal-provider/context");
var _messages = require("../messages");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
// eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
/**
 * This wraps ProseMirror's EditorView as a React component.
 */
var JQLEditorView = function JQLEditorView(_ref) {
  var inputRef = _ref.inputRef;
  var _useEditorView = (0, _state.useEditorView)(),
    _useEditorView2 = (0, _slicedToArray2.default)(_useEditorView, 2),
    editorView = _useEditorView2[0],
    _useEditorView2$ = _useEditorView2[1],
    initialiseEditorView = _useEditorView2$.initialiseEditorView,
    updateEditorView = _useEditorView2$.updateEditorView;
  var editorViewNodeRef = (0, _react.useRef)(null);
  var _useScopedId = (0, _state.useScopedId)(_constants.JQL_EDITOR_MAIN_ID),
    _useScopedId2 = (0, _slicedToArray2.default)(_useScopedId, 1),
    mainId = _useScopedId2[0];
  var _useScopedId3 = (0, _state.useScopedId)(_constants.JQL_EDITOR_AUTOCOMPLETE_ID),
    _useScopedId4 = (0, _slicedToArray2.default)(_useScopedId3, 1),
    autocompleteId = _useScopedId4[0];
  var _useScopedId5 = (0, _state.useScopedId)(_constants.JQL_EDITOR_INPUT_ID),
    _useScopedId6 = (0, _slicedToArray2.default)(_useScopedId5, 1),
    editorId = _useScopedId6[0];
  var _useScopedId7 = (0, _state.useScopedId)(_constants.JQL_EDITOR_HELP_CONTENT_ID),
    _useScopedId8 = (0, _slicedToArray2.default)(_useScopedId7, 1),
    helpContentId = _useScopedId8[0];
  var _useScopedId9 = (0, _state.useScopedId)(_constants.JQL_EDITOR_VALIDATION_ID),
    _useScopedId10 = (0, _slicedToArray2.default)(_useScopedId9, 1),
    validationId = _useScopedId10[0];
  var _useIntl = (0, _state.useIntl)(),
    _useIntl2 = (0, _slicedToArray2.default)(_useIntl, 1),
    intl = _useIntl2[0];
  var portalActions = (0, _context.usePortalActionsContext)();
  var _useStoreActions = (0, _state.useStoreActions)(),
    _useStoreActions2 = (0, _slicedToArray2.default)(_useStoreActions, 2),
    _useStoreActions2$ = _useStoreActions2[1],
    setEditorViewContainer = _useStoreActions2$.setEditorViewContainer,
    setEditorViewContainerScroll = _useStoreActions2$.setEditorViewContainerScroll;
  var _useEditorViewHasFocu = (0, _state.useEditorViewHasFocus)(),
    _useEditorViewHasFocu2 = (0, _slicedToArray2.default)(_useEditorViewHasFocu, 2),
    editorViewHasFocus = _useEditorViewHasFocu2[0],
    _useEditorViewHasFocu3 = _useEditorViewHasFocu2[1],
    onEditorViewBlur = _useEditorViewHasFocu3.onEditorViewBlur,
    onEditorViewFocus = _useEditorViewHasFocu3.onEditorViewFocus;
  var _useLineNumbersVisibl = (0, _state.useLineNumbersVisible)(),
    _useLineNumbersVisibl2 = (0, _slicedToArray2.default)(_useLineNumbersVisibl, 1),
    lineNumbersVisible = _useLineNumbersVisibl2[0];
  var _useAutocomplete = (0, _state.useAutocomplete)(),
    _useAutocomplete2 = (0, _slicedToArray2.default)(_useAutocomplete, 1),
    selectedOptionId = _useAutocomplete2[0].selectedOptionId;
  var _useAutocompleteIsOpe = (0, _state.useAutocompleteIsOpen)(),
    _useAutocompleteIsOpe2 = (0, _slicedToArray2.default)(_useAutocompleteIsOpe, 1),
    isAutocompleteOpen = _useAutocompleteIsOpe2[0];
  var editorViewIsInvalid = (0, _useEditorViewIsInvalid.useEditorViewIsInvalid)();
  var _useEditorThemeContex = (0, _useEditorTheme.useEditorThemeContext)(),
    expanded = _useEditorThemeContex.expanded;
  var previousExpanded = (0, _react.useRef)(expanded);
  var onEditorViewTransitionEnd = (0, _react.useCallback)(function () {
    if (!expanded && editorViewNodeRef.current) {
      // Clear any fixed heights when the editor is collapsed
      editorViewNodeRef.current.style.height = '';
    }
  }, [expanded, editorViewNodeRef]);
  var onMainRef = (0, _react.useCallback)(function (element) {
    return portalActions.onRegisterPluginContainer('main', element);
  }, [portalActions]);
  var onEditorViewContainerRef = (0, _react.useCallback)(function (editorViewContainer) {
    if (editorViewContainer) {
      setEditorViewContainer(editorViewContainer);
    }
  }, [setEditorViewContainer]);
  var throttledSetEditorViewContainerScroll = (0, _react.useMemo)(function () {
    return (0, _throttle.default)(function (scrollTop) {
      setEditorViewContainerScroll(scrollTop);
    }, 1000 / 60);
  },
  // 60 fps
  [setEditorViewContainerScroll]);
  var onEditorViewContainerScroll = (0, _react.useCallback)(function (event) {
    var scrollTop = event.currentTarget.scrollTop;
    throttledSetEditorViewContainerScroll(scrollTop);
  }, [throttledSetEditorViewContainerScroll]);

  // Compute HTML attributes to be applied to the Prosemirror editor view
  var getAttributes = (0, _react.useCallback)(function () {
    return _objectSpread(_objectSpread({
      id: editorId,
      'data-testid': 'jql-editor-input',
      // Disable grammarly
      'data-gramm': 'false',
      // Combobox might not be a semantically correct role for the editor,
      // however some browsers like Safari will only announce suggestions when this role is present
      role: 'combobox',
      'aria-expanded': "".concat(isAutocompleteOpen),
      'aria-autocomplete': 'list',
      'aria-label': intl.formatMessage(_messages.messages.inputLabel),
      'aria-controls': autocompleteId,
      'aria-owns': autocompleteId,
      'aria-describedby': (0, _platformFeatureFlags.fg)('jql_editor_a11y') ? editorViewIsInvalid ? validationId : helpContentId : helpContentId
    }, selectedOptionId && {
      'aria-activedescendant': selectedOptionId
    }), editorViewIsInvalid && {
      'aria-invalid': 'true'
    });
  }, [editorId, isAutocompleteOpen, intl, autocompleteId, editorViewIsInvalid, validationId, helpContentId, selectedOptionId]);

  // Update attributes on our editor view whenever they have changed
  (0, _react.useEffect)(function () {
    updateEditorView(getAttributes());
  }, [getAttributes, updateEditorView]);
  var onEditorViewRef = (0, _react.useCallback)(function (editorViewNode) {
    if (editorViewNode && !editorView) {
      initialiseEditorView(editorViewNode, getAttributes(), portalActions);
      editorViewNodeRef.current = editorViewNode;
    }
  }, [editorView, initialiseEditorView, getAttributes, portalActions]);
  (0, _react.useEffect)(function () {
    if (editorViewNodeRef.current && expanded !== previousExpanded.current) {
      if (expanded) {
        // Set fixed height based on the current element height so we can transition to the expanded height
        editorViewNodeRef.current.style.height = editorViewNodeRef.current.clientHeight + 'px';
        requestAnimationFrame(function () {
          if (editorViewNodeRef.current) {
            editorViewNodeRef.current.style.height = '';
            editorViewNodeRef.current.setAttribute('data-expanded', 'true');
          }
        });
      } else {
        if (editorView) {
          requestAnimationFrame(function () {
            if (editorViewNodeRef.current && editorView) {
              // Transition to the default height based on the content of the editor
              editorViewNodeRef.current.style.height = editorView.dom.clientHeight + 'px';
              editorViewNodeRef.current.removeAttribute('data-expanded');
            }
          });
        }
      }
    }
    previousExpanded.current = expanded;
  }, [expanded, previousExpanded, editorViewNodeRef, editorView]);
  (0, _react.useImperativeHandle)(inputRef, function () {
    return {
      focus: function focus() {
        if (editorView) {
          editorView.focus();
        }
      }
    };
  });
  (0, _react.useEffect)(function () {
    return function () {
      if (editorView) {
        editorView.destroy();
      }
    };
  }, [editorView]);
  return /*#__PURE__*/_react.default.createElement(_jqlEditorLayout.default, {
    EditorControlsContent: /*#__PURE__*/_react.default.createElement(_jqlEditorControlsContent.JQLEditorControlsContent, null),
    EditorFooterContent: /*#__PURE__*/_react.default.createElement(_jqlEditorFooterContent.JQLEditorFooterContent, null),
    editorViewHasFocus: editorViewHasFocus,
    lineNumbersVisible: lineNumbersVisible,
    editorViewIsInvalid: editorViewIsInvalid,
    mainId: mainId,
    onEditorMainRef: onMainRef,
    onEditorViewContainerRef: onEditorViewContainerRef,
    onEditorViewContainerScroll: onEditorViewContainerScroll,
    onEditorViewRef: onEditorViewRef,
    onEditorViewBlur: onEditorViewBlur,
    onEditorViewFocus: onEditorViewFocus,
    onEditorViewTransitionEnd: onEditorViewTransitionEnd
  });
};
var _default = exports.default = JQLEditorView;