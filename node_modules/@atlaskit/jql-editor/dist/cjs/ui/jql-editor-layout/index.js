"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JQLEditorReadOnly = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _useEditorTheme = require("../../hooks/use-editor-theme");
var _splitTextByNewLine = require("../../utils/split-text-by-new-line");
var _readOnlyControlsContent = require("../jql-editor-controls-content/read-only-controls-content");
var _styled = require("./styled");
var _excluded = ["isSearch", "isCompact"]; // eslint-disable-next-line @atlassian/tangerine/import/no-parent-imports
var JQLEditorLayout = function JQLEditorLayout(props) {
  var _useEditorThemeContex = (0, _useEditorTheme.useEditorThemeContext)(),
    defaultMaxRows = _useEditorThemeContex.defaultMaxRows,
    expandedRows = _useEditorThemeContex.expandedRows,
    isSearch = _useEditorThemeContex.isSearch,
    isCompact = _useEditorThemeContex.isCompact;
  var editorViewHasFocus = props.editorViewHasFocus,
    EditorControlsContent = props.EditorControlsContent,
    EditorFooterContent = props.EditorFooterContent,
    editorViewIsInvalid = props.editorViewIsInvalid,
    lineNumbersVisible = props.lineNumbersVisible,
    mainId = props.mainId,
    onEditorMainRef = props.onEditorMainRef,
    onEditorViewContainerRef = props.onEditorViewContainerRef,
    onEditorViewContainerScroll = props.onEditorViewContainerScroll,
    onEditorViewRef = props.onEditorViewRef,
    onEditorViewBlur = props.onEditorViewBlur,
    onEditorViewFocus = props.onEditorViewFocus,
    onEditorViewTransitionEnd = props.onEditorViewTransitionEnd;
  return /*#__PURE__*/_react.default.createElement(_styled.EditorMain, {
    id: mainId,
    ref: onEditorMainRef
  }, /*#__PURE__*/_react.default.createElement(_styled.EditorViewContainer, {
    editorViewHasFocus: editorViewHasFocus,
    editorViewIsInvalid: editorViewIsInvalid,
    ref: onEditorViewContainerRef,
    onScroll: onEditorViewContainerScroll
  }, /*#__PURE__*/_react.default.createElement(_styled.LineNumberToolbar, {
    lineNumbersVisible: lineNumbersVisible
  }), /*#__PURE__*/_react.default.createElement(_styled.EditorView, {
    defaultMaxRows: defaultMaxRows,
    expandedRows: expandedRows,
    isCompact: isCompact,
    lineNumbersVisible: lineNumbersVisible,
    ref: onEditorViewRef,
    onBlur: onEditorViewBlur,
    onFocus: onEditorViewFocus,
    onTransitionEnd: onEditorViewTransitionEnd
  }), /*#__PURE__*/_react.default.createElement(_styled.EditorControls, {
    isSearch: isSearch,
    isCompact: isCompact,
    isVisualRefresh: (0, _platformFeatureFlags.fg)('platform-component-visual-refresh')
  }, EditorControlsContent)), /*#__PURE__*/_react.default.createElement(_styled.EditorFooter, null, EditorFooterContent));
};
/**
 * A read only version of the JQL Editor which mimics the layout of the complete component, suitable as an intermediary
 * state when rendering the editor asynchronously.
 * In order to minimise bundle size impact on consumers, it is critical that this component (and any child component)
 * only imports the bare minimum dependencies required to replicate the editor layout.
 */
var JQLEditorReadOnlyWithoutTheme = function JQLEditorReadOnlyWithoutTheme(_ref) {
  var query = _ref.query;
  var _useEditorThemeContex2 = (0, _useEditorTheme.useEditorThemeContext)(),
    defaultMaxRows = _useEditorThemeContex2.defaultMaxRows,
    expandedRows = _useEditorThemeContex2.expandedRows,
    isSearch = _useEditorThemeContex2.isSearch,
    isCompact = _useEditorThemeContex2.isCompact;
  var blocks = (0, _splitTextByNewLine.splitTextByNewLine)(query);
  var lineNumbersVisible = blocks.length > 1;
  return /*#__PURE__*/_react.default.createElement(_styled.EditorMain, null, /*#__PURE__*/_react.default.createElement(_styled.ReadOnlyEditorViewContainer, null, /*#__PURE__*/_react.default.createElement(_styled.LineNumberToolbar, {
    lineNumbersVisible: lineNumbersVisible
  }), /*#__PURE__*/_react.default.createElement(_styled.ReadOnlyEditorView, {
    "data-testid": "jql-editor-read-only",
    role: "combobox",
    "aria-readonly": true,
    defaultMaxRows: defaultMaxRows,
    expandedRows: expandedRows,
    lineNumbersVisible: lineNumbersVisible,
    isCompact: isCompact
    // aria-expanded and aria-controls here are placeholders only. This is to avoid a11y violations.
    // This component JQLEditorReadOnlyWithoutTheme is only a loading state
    // Therefore the autocomplete combobox is never shown to the users
    ,
    "aria-expanded": false,
    "aria-controls": "dummy-jql-editor-auto-complete-id",
    "aria-label": "JQL query"
  }, blocks.map(function (block, index) {
    return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      as: "p",
      key: index
    }, block);
  })), /*#__PURE__*/_react.default.createElement(_styled.EditorControls, {
    isSearch: isSearch,
    isCompact: isCompact
  }, /*#__PURE__*/_react.default.createElement(_readOnlyControlsContent.ReadOnlyControlsContent, null))), /*#__PURE__*/_react.default.createElement(_styled.EditorFooter, null));
};
var JQLEditorReadOnly = exports.JQLEditorReadOnly = function JQLEditorReadOnly(_ref2) {
  var isSearch = _ref2.isSearch,
    isCompact = _ref2.isCompact,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  var editorTheme = (0, _useEditorTheme.useEditorTheme)({
    isSearch: isSearch,
    isCompact: isCompact
  });
  return /*#__PURE__*/_react.default.createElement(_useEditorTheme.EditorThemeContext.Provider, {
    value: editorTheme
  }, /*#__PURE__*/_react.default.createElement(JQLEditorReadOnlyWithoutTheme, props));
};
var _default = exports.default = JQLEditorLayout;