"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorMessages = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactMagneticDi = require("react-magnetic-di");
var _form = require("@atlaskit/form");
var _jqlAst = require("@atlaskit/jql-ast");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("../../../../common/constants");
var _messages = require("../../../../common/messages");
var _useEditorTheme = require("../../../../hooks/use-editor-theme");
var _useEditorViewIsInvalid = require("../../../../hooks/use-editor-view-is-invalid");
var _state = require("../../../../state");
var _format = require("../format");
var _messages2 = require("./messages");
var _excluded = ["Component"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * This function maps client side validation errors and external messages into a unified format
 * This is so that the output of this function can then be processed in a unified manner by different renderers
 */
var useErrorMessages = function useErrorMessages() {
  var _useIntl = (0, _state.useIntl)(),
    _useIntl2 = (0, _slicedToArray2.default)(_useIntl, 1),
    formatMessage = _useIntl2[0].formatMessage;
  var _useJqlError = (0, _state.useJqlError)(),
    _useJqlError2 = (0, _slicedToArray2.default)(_useJqlError, 1),
    jqlError = _useJqlError2[0];
  var _useExternalMessages = (0, _state.useExternalMessages)(),
    _useExternalMessages2 = (0, _slicedToArray2.default)(_useExternalMessages, 1),
    externalErrors = _useExternalMessages2[0].errors;
  var _useStoreActions = (0, _state.useStoreActions)(),
    _useStoreActions2 = (0, _slicedToArray2.default)(_useStoreActions, 2),
    externalErrorMessageViewed = _useStoreActions2[1].externalErrorMessageViewed;
  var editorViewIsInvalid = (0, _useEditorViewIsInvalid.useEditorViewIsInvalid)();
  (0, _react.useEffect)(function () {
    // Emit a UI event whenever external errors has changed
    externalErrorMessageViewed();
  }, [externalErrorMessageViewed, externalErrors]);
  if (!editorViewIsInvalid) {
    return null;
  }

  /**
   * Transform a string message to take the form of an ExternalMessage,
   * so that we can reduce a bunch of conditionals when processing the output of useErrorMessages
   */
  var toExternalMessageShape = function toExternalMessageShape(message) {
    return [{
      type: 'error',
      message: message
    }];
  };

  // Prioritise client errors over external errors
  if (jqlError instanceof _jqlAst.JQLSyntaxError) {
    return toExternalMessageShape("".concat(jqlError.message, " ").concat(formatMessage(_messages2.messages.jqlErrorPosition, {
      lineNumber: jqlError.line,
      charPosition: jqlError.charPositionInLine + 1
    })));
  }
  if (externalErrors.length > 0) {
    return externalErrors;
  }
  if (jqlError !== null) {
    return toExternalMessageShape(formatMessage(_messages.commonMessages.unknownError));
  }
  return null;
};

/**
 * This is a decorator component to include the editorTheme prop to the already passed list of props
 */
var CustomComponentDecoratedWithEditorTheme = function CustomComponentDecoratedWithEditorTheme(props) {
  var Component = props.Component,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var editorThemeContext = (0, _useEditorTheme.useEditorThemeContext)();

  // This is a slightly redundant condition.
  // Technically, CustomErrorMessage component should never be called with an undefined Component
  // This is enforced by the static types. Adding this condition as an extra layer of protection
  if (!Component) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "props.children");
  }
  return /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({
    editorTheme: editorThemeContext
  }, rest));
};
var ErrorMessages = exports.ErrorMessages = function ErrorMessages() {
  var _useScopedId = (0, _state.useScopedId)(_constants.JQL_EDITOR_INPUT_ID),
    _useScopedId2 = (0, _slicedToArray2.default)(_useScopedId, 1),
    editorId = _useScopedId2[0];
  var _useScopedId3 = (0, _state.useScopedId)(_constants.JQL_EDITOR_VALIDATION_ID),
    _useScopedId4 = (0, _slicedToArray2.default)(_useScopedId3, 1),
    validationId = _useScopedId4[0];
  var errorMessages = useErrorMessages();
  var _useCustomErrorCompon = (0, _state.useCustomErrorComponent)(),
    _useCustomErrorCompon2 = (0, _slicedToArray2.default)(_useCustomErrorCompon, 1),
    CustomErrorComponent = _useCustomErrorCompon2[0];
  var childrenToRender = errorMessages != null ? /*#__PURE__*/_react.default.createElement(_format.MessageContainer, null, /*#__PURE__*/_react.default.createElement(_form.ErrorMessage, {
    testId: _constants.JQL_EDITOR_VALIDATION_ID
  }, (0, _platformFeatureFlags.fg)('jql_editor_a11y') ? /*#__PURE__*/_react.default.createElement("span", {
    role: "alert",
    id: validationId
  }, /*#__PURE__*/_react.default.createElement(_format.FormatMessages, {
    messages: errorMessages
  })) : /*#__PURE__*/_react.default.createElement("span", {
    role: "alert",
    "aria-describedby": editorId
  }, /*#__PURE__*/_react.default.createElement(_format.FormatMessages, {
    messages: errorMessages
  })))) : null;

  // Only render CustomErrorComponent if there is an errorMessage
  if (errorMessages != null && CustomErrorComponent) {
    return /*#__PURE__*/_react.default.createElement(CustomComponentDecoratedWithEditorTheme, {
      testId: _constants.JQL_EDITOR_VALIDATION_ID,
      editorId: editorId,
      validationId: validationId,
      Component: CustomErrorComponent,
      errorMessages: (0, _format.extractMessageNodes)(errorMessages)
    }, childrenToRender);
  }
  return childrenToRender;
};