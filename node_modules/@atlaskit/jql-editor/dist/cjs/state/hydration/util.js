"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidQueryVisitor = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _jqlAst = require("@atlaskit/jql-ast");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Given an AST with parse errors, this visitor returns a valid query that is equivalent for hydration purposes
 * (i.e. just fields, operators and values). Resulting query is generated on a best-effort basis and depends on
 * a successful parser error recovery.
 *
 * Example 1:
 * - Original query: "assignee in (abc-123-def"
 * - Equivalent query: "assignee in (abc-123-def)"
 *
 * Example 2:
 * - Original query: "project = EM and status in (Done, currentUser(), EMPTY) and reporter in"
 * - Equivalent query: "project = EM and status in (Done)"
 */
var ValidQueryVisitor = exports.ValidQueryVisitor = /*#__PURE__*/function (_AbstractJastVisitor) {
  function ValidQueryVisitor() {
    var _this;
    (0, _classCallCheck2.default)(this, ValidQueryVisitor);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ValidQueryVisitor, [].concat(args));
    (0, _defineProperty2.default)(_this, "visitQuery", function (query) {
      if (!query.where) {
        return '';
      }
      return query.where.accept(_this);
    });
    (0, _defineProperty2.default)(_this, "visitCompoundClause", function (compoundClause) {
      return compoundClause.clauses.map(function (clause) {
        return clause.accept(_this);
      }).filter(function (value) {
        return !!value;
      }).join(' and ');
    });
    (0, _defineProperty2.default)(_this, "visitTerminalClause", function (terminalClause) {
      var field = terminalClause.field,
        operator = terminalClause.operator,
        operand = terminalClause.operand;
      if (!operator || !operand) {
        return '';
      }
      var operandValue = operand.accept(_this);
      if (!operandValue) {
        return '';
      }
      return "".concat(field.text, " ").concat(operator.value, " ").concat(operandValue);
    });
    (0, _defineProperty2.default)(_this, "visitNotClause", function (notClause) {
      return notClause.clause.accept(_this);
    });
    (0, _defineProperty2.default)(_this, "visitValueOperand", function (valueOperand) {
      return valueOperand.text;
    });
    (0, _defineProperty2.default)(_this, "visitListOperand", function (listOperand) {
      return "(".concat(listOperand.values.map(function (value) {
        return value.accept(_this);
      }).filter(function (value) {
        return !!value;
      }).join(', '), ")");
    });
    return _this;
  }
  (0, _inherits2.default)(ValidQueryVisitor, _AbstractJastVisitor);
  return (0, _createClass2.default)(ValidQueryVisitor, [{
    key: "defaultResult",
    value: function defaultResult() {
      return '';
    }
  }]);
}(_jqlAst.AbstractJastVisitor);