import type { ReactElement, Ref } from 'react';
import React, { PureComponent } from 'react';
import type { WrappedComponentProps } from 'react-intl-next';
import { ProviderFactory } from '@atlaskit/editor-common/provider-factory';
import { type ExtractInjectionAPI } from '@atlaskit/editor-common/types';
import type { ContentRef } from '@atlaskit/task-decision';
import type { TasksAndDecisionsPlugin } from '../../tasksAndDecisionsPluginType';
import { type TaskAndDecisionsSharedState } from '../../types';
export interface TaskProps {
    taskId: string;
    isDone: boolean;
    isFocused?: boolean;
    contentRef?: ContentRef;
    onChange?: (taskId: string, isChecked: boolean) => void;
    onClick?: () => void;
    placeholder?: string;
    showPlaceholder?: boolean;
    children?: ReactElement<any>;
    providers?: ProviderFactory;
    disabled?: boolean;
    disableOnChange?: boolean;
    inputRef?: Ref<HTMLInputElement>;
    api: ExtractInjectionAPI<TasksAndDecisionsPlugin> | undefined;
}
type TaskItemProps = TaskProps & WrappedComponentProps & {
    taskDecisionProvider: TaskAndDecisionsSharedState['taskDecisionProvider'] | undefined;
};
export declare class TaskItem extends PureComponent<TaskItemProps, Object> {
    static displayName: string;
    private providerFactory;
    constructor(props: TaskItemProps);
    componentWillUnmount(): void;
    private renderWithProvider;
    render(): React.JSX.Element;
}
declare const _default: React.FC<import("react-intl-next").WithIntlProps<TaskProps & WrappedComponentProps>> & {
    WrappedComponent: React.ComponentType<TaskProps & WrappedComponentProps>;
};
export default _default;
