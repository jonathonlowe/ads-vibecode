import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { logException } from '@atlaskit/editor-common/monitoring';
import { DOMSerializer } from '@atlaskit/editor-prosemirror/model';
import { decisionItemToDOM } from './decisionItemNodeSpec';
export var DecisionItemVanilla = /*#__PURE__*/function () {
  function DecisionItemVanilla(node, intl) {
    _classCallCheck(this, DecisionItemVanilla);
    _defineProperty(this, "dom", document.createElement('div'));
    _defineProperty(this, "hasChildren", undefined);
    try {
      var spec = decisionItemToDOM(node, intl);
      var _DOMSerializer$render = DOMSerializer.renderSpec(document, spec),
        dom = _DOMSerializer$render.dom,
        contentDOM = _DOMSerializer$render.contentDOM;
      if (!(dom instanceof HTMLElement)) {
        throw new Error('DOMSerializer did not return an HTMLElement');
      }
      this.dom = dom;
      this.contentDOM = contentDOM;
      this.updateHasChildren(node);
    } catch (caughtError) {
      var error = caughtError instanceof Error ? caughtError : new Error('Unknown error on DecisionItemVanilla Node View constructor - ' + String(caughtError));
      this.logError(error);
      this.renderFallback();
    }
  }
  return _createClass(DecisionItemVanilla, [{
    key: "logError",
    value: function logError(error) {
      void logException(error, {
        location: 'editor-plugin-tasks-and-decisions/DecisionItemVanilla'
      });
    }
  }, {
    key: "updateHasChildren",
    value: function updateHasChildren(node) {
      var currentlyHasChildren = node.childCount > 0;
      if (currentlyHasChildren !== this.hasChildren) {
        var _this$contentDOM;
        this.hasChildren = currentlyHasChildren;
        (_this$contentDOM = this.contentDOM) === null || _this$contentDOM === void 0 || _this$contentDOM.toggleAttribute('data-empty', !currentlyHasChildren);
      }
      return this.hasChildren;
    }
  }, {
    key: "update",
    value: function update(node) {
      this.updateHasChildren(node);
      return true;
    }
  }, {
    key: "renderFallback",
    value: function renderFallback() {
      var fallback = document.createElement('div');
      fallback.setAttribute('data-decision-item-fallback', 'true');
      this.dom.appendChild(fallback);
      this.contentDOM = fallback;
    }
  }]);
}();