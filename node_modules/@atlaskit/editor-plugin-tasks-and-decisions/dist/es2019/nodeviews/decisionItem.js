import React from 'react';
import ReactNodeView from '@atlaskit/editor-common/react-node-view';
import DecisionItem from '../ui/Decision';
import { useShowPlaceholder } from './hooks/use-show-placeholder';
const DecisionItemWrapper = ({
  api,
  editorView,
  forwardRef,
  isContentNodeEmpty,
  getPos
}) => {
  const showPlaceholder = useShowPlaceholder({
    editorView,
    isContentNodeEmpty,
    getPos,
    api
  });
  return /*#__PURE__*/React.createElement(DecisionItem, {
    contentRef: forwardRef,
    showPlaceholder: showPlaceholder
  });
};
class Decision extends ReactNodeView {
  isContentEmpty(node) {
    return node.content.childCount === 0;
  }
  initWithAPI(api) {
    this.api = api;
    this.init();
    return this;
  }
  createDomRef() {
    const domRef = document.createElement('li');
    domRef.style.listStyleType = 'none';
    return domRef;
  }
  getContentDOM() {
    const dom = document.createElement('div');
    // setting a className prevents PM/Chrome mutation observer from
    // incorrectly deleting nodes
    dom.className = 'decision-item';
    return {
      dom
    };
  }
  render(_props, forwardRef) {
    const isContentNodeEmpty = this.isContentEmpty(this.node);
    return /*#__PURE__*/React.createElement(DecisionItemWrapper, {
      forwardRef: forwardRef,
      isContentNodeEmpty: isContentNodeEmpty,
      api: this.api
      // The getPosHandler type is wrong, there is no `boolean` in the real implementation
      // @ts-expect-error 2322: Type 'getPosHandler' is not assignable to type '() => number | undefined'.
      ,
      getPos: this.getPos,
      editorView: this.view
    });
  }
  viewShouldUpdate(nextNode) {
    return this.isContentEmpty(this.node) && !this.isContentEmpty(nextNode) || this.isContentEmpty(nextNode) && !this.isContentEmpty(this.node);
  }
  update(node, decorations) {
    return super.update(node, decorations);
  }
  ignoreMutation(mutation) {
    if (!this.contentDOM) {
      return true;
    }
    return !this.contentDOM.contains(mutation.target) && mutation.type !== 'selection';
  }
}
export const decisionItemNodeView = (portalProviderAPI, eventDispatcher, api) => (node, view, getPos) => {
  return new Decision(node, view, getPos, portalProviderAPI, eventDispatcher, {}).initWithAPI(api);
};