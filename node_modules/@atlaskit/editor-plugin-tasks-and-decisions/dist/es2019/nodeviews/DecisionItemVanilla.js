import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { logException } from '@atlaskit/editor-common/monitoring';
import { DOMSerializer } from '@atlaskit/editor-prosemirror/model';
import { decisionItemToDOM } from './decisionItemNodeSpec';
export class DecisionItemVanilla {
  logError(error) {
    void logException(error, {
      location: 'editor-plugin-tasks-and-decisions/DecisionItemVanilla'
    });
  }
  updateHasChildren(node) {
    const currentlyHasChildren = node.childCount > 0;
    if (currentlyHasChildren !== this.hasChildren) {
      var _this$contentDOM;
      this.hasChildren = currentlyHasChildren;
      (_this$contentDOM = this.contentDOM) === null || _this$contentDOM === void 0 ? void 0 : _this$contentDOM.toggleAttribute('data-empty', !currentlyHasChildren);
    }
    return this.hasChildren;
  }
  constructor(node, intl) {
    _defineProperty(this, "dom", document.createElement('div'));
    _defineProperty(this, "hasChildren", undefined);
    try {
      const spec = decisionItemToDOM(node, intl);
      const {
        dom,
        contentDOM
      } = DOMSerializer.renderSpec(document, spec);
      if (!(dom instanceof HTMLElement)) {
        throw new Error('DOMSerializer did not return an HTMLElement');
      }
      this.dom = dom;
      this.contentDOM = contentDOM;
      this.updateHasChildren(node);
    } catch (caughtError) {
      const error = caughtError instanceof Error ? caughtError : new Error('Unknown error on DecisionItemVanilla Node View constructor - ' + String(caughtError));
      this.logError(error);
      this.renderFallback();
    }
  }
  update(node) {
    this.updateHasChildren(node);
    return true;
  }
  renderFallback() {
    const fallback = document.createElement('div');
    fallback.setAttribute('data-decision-item-fallback', 'true');
    this.dom.appendChild(fallback);
    this.contentDOM = fallback;
  }
}