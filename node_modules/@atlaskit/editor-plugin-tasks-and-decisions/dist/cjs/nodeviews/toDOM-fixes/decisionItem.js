"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decisionItemSpecWithFixedToDOM = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _adfSchema = require("@atlaskit/adf-schema");
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// @nodeSpecException:toDOM patch
var decisionItemSpecWithFixedToDOM = exports.decisionItemSpecWithFixedToDOM = function decisionItemSpecWithFixedToDOM() {
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false)) {
    return _adfSchema.decisionItem;
  }
  return _objectSpread(_objectSpread({}, _adfSchema.decisionItem), {}, {
    toDOM: function toDOM(node) {
      var _node$attrs = node.attrs,
        localId = _node$attrs.localId,
        state = _node$attrs.state;
      var attrs = {
        'data-decision-local-id': localId || 'local-decision',
        'data-decision-state': state,
        class: 'decisionItemView-content-wrap'
      };

      // Ignored via go/ees007
      // eslint-disable-next-line @atlaskit/editor/enforce-todo-comment-format
      // TODO: can copy raw SVG from DST later
      var decisionItemIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      decisionItemIcon.setAttribute('width', '24');
      decisionItemIcon.setAttribute('height', '24');
      decisionItemIcon.setAttribute('viewBox', '0 0 24 24');
      decisionItemIcon.setAttribute('role', 'presentation');
      var decisionItemSvgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      decisionItemSvgPath.setAttribute('fill', 'currentColor');
      decisionItemSvgPath.setAttribute('fill-rule', 'evenodd');
      decisionItemSvgPath.setAttribute('d', 'm9.414 8 3.293 3.293c.187.187.293.442.293.707v5a1 1 0 0 1-2 0v-4.586l-3-3V10.5a1 1 0 0 1-2 0V7a1 1 0 0 1 1-1h3.5a1 1 0 0 1 0 2zm8.293-1.707a1 1 0 0 1 0 1.414l-2.5 2.5a.997.997 0 0 1-1.414 0 1 1 0 0 1 0-1.414l2.5-2.5a1 1 0 0 1 1.414 0');
      decisionItemIcon.setAttribute('style', (0, _lazyNodeView.convertToInlineCss)({
        width: '32px',
        height: '32px'
      }));
      decisionItemIcon.appendChild(decisionItemSvgPath);
      var showPlaceholder = node.content.size === 0;
      return ['li', attrs, ['div', {
        'data-decision-wrapper': true,
        'data-testid': 'elements-decision-item',
        // Styles to match `packages/elements/task-decision/src/components/styles.ts`
        style: (0, _lazyNodeView.convertToInlineCss)({
          background: "var(--ds-background-neutral, #091E420F)",
          padding: "var(--ds-space-100, 8px)",
          paddingLeft: "var(--ds-space-150, 12px)",
          margin: "var(--ds-space-100, 8px)".concat(" 0 0 0"),
          display: 'flex',
          borderRadius: "var(--ds-border-radius-100, 3px)"
        })
      }, ['span', {
        style: (0, _lazyNodeView.convertToInlineCss)({
          width: '16px',
          height: '16px',
          margin: "var(--ds-space-050, 4px)".concat(" ", "var(--ds-space-150, 12px)", " 0 0"),
          color: showPlaceholder ? "var(--ds-icon-subtle, #626F86)" : "var(--ds-icon-success, #22A06B)"
        }),
        contentEditable: 'false'
      }, ['span', {
        style: (0, _lazyNodeView.convertToInlineCss)({
          margin: "var(--ds-space-negative-100, -8px)",
          display: 'inline-block',
          width: '32px',
          height: '32px'
        })
      }, decisionItemIcon]], ['div', {
        'data-component': 'content'
      }, ['div', {
        class: 'decision-item'
      }, 0]]]];
    }
  });
};