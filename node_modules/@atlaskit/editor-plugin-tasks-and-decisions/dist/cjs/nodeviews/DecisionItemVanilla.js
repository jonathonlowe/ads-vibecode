"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecisionItemVanilla = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _monitoring = require("@atlaskit/editor-common/monitoring");
var _model = require("@atlaskit/editor-prosemirror/model");
var _decisionItemNodeSpec = require("./decisionItemNodeSpec");
var DecisionItemVanilla = exports.DecisionItemVanilla = /*#__PURE__*/function () {
  function DecisionItemVanilla(node, intl) {
    (0, _classCallCheck2.default)(this, DecisionItemVanilla);
    (0, _defineProperty2.default)(this, "dom", document.createElement('div'));
    (0, _defineProperty2.default)(this, "hasChildren", undefined);
    try {
      var spec = (0, _decisionItemNodeSpec.decisionItemToDOM)(node, intl);
      var _DOMSerializer$render = _model.DOMSerializer.renderSpec(document, spec),
        dom = _DOMSerializer$render.dom,
        contentDOM = _DOMSerializer$render.contentDOM;
      if (!(dom instanceof HTMLElement)) {
        throw new Error('DOMSerializer did not return an HTMLElement');
      }
      this.dom = dom;
      this.contentDOM = contentDOM;
      this.updateHasChildren(node);
    } catch (caughtError) {
      var error = caughtError instanceof Error ? caughtError : new Error('Unknown error on DecisionItemVanilla Node View constructor - ' + String(caughtError));
      this.logError(error);
      this.renderFallback();
    }
  }
  return (0, _createClass2.default)(DecisionItemVanilla, [{
    key: "logError",
    value: function logError(error) {
      void (0, _monitoring.logException)(error, {
        location: 'editor-plugin-tasks-and-decisions/DecisionItemVanilla'
      });
    }
  }, {
    key: "updateHasChildren",
    value: function updateHasChildren(node) {
      var currentlyHasChildren = node.childCount > 0;
      if (currentlyHasChildren !== this.hasChildren) {
        var _this$contentDOM;
        this.hasChildren = currentlyHasChildren;
        (_this$contentDOM = this.contentDOM) === null || _this$contentDOM === void 0 || _this$contentDOM.toggleAttribute('data-empty', !currentlyHasChildren);
      }
      return this.hasChildren;
    }
  }, {
    key: "update",
    value: function update(node) {
      this.updateHasChildren(node);
      return true;
    }
  }, {
    key: "renderFallback",
    value: function renderFallback() {
      var fallback = document.createElement('div');
      fallback.setAttribute('data-decision-item-fallback', 'true');
      this.dom.appendChild(fallback);
      this.contentDOM = fallback;
    }
  }]);
}();