"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decisionItemNodeView = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNodeView = _interopRequireDefault(require("@atlaskit/editor-common/react-node-view"));
var _Decision = _interopRequireDefault(require("../ui/Decision"));
var _useShowPlaceholder = require("./hooks/use-show-placeholder");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var DecisionItemWrapper = function DecisionItemWrapper(_ref) {
  var api = _ref.api,
    editorView = _ref.editorView,
    forwardRef = _ref.forwardRef,
    isContentNodeEmpty = _ref.isContentNodeEmpty,
    getPos = _ref.getPos;
  var showPlaceholder = (0, _useShowPlaceholder.useShowPlaceholder)({
    editorView: editorView,
    isContentNodeEmpty: isContentNodeEmpty,
    getPos: getPos,
    api: api
  });
  return /*#__PURE__*/_react.default.createElement(_Decision.default, {
    contentRef: forwardRef,
    showPlaceholder: showPlaceholder
  });
};
var Decision = /*#__PURE__*/function (_ReactNodeView) {
  function Decision() {
    (0, _classCallCheck2.default)(this, Decision);
    return _callSuper(this, Decision, arguments);
  }
  (0, _inherits2.default)(Decision, _ReactNodeView);
  return (0, _createClass2.default)(Decision, [{
    key: "isContentEmpty",
    value: function isContentEmpty(node) {
      return node.content.childCount === 0;
    }
  }, {
    key: "initWithAPI",
    value: function initWithAPI(api) {
      this.api = api;
      this.init();
      return this;
    }
  }, {
    key: "createDomRef",
    value: function createDomRef() {
      var domRef = document.createElement('li');
      domRef.style.listStyleType = 'none';
      return domRef;
    }
  }, {
    key: "getContentDOM",
    value: function getContentDOM() {
      var dom = document.createElement('div');
      // setting a className prevents PM/Chrome mutation observer from
      // incorrectly deleting nodes
      dom.className = 'decision-item';
      return {
        dom: dom
      };
    }
  }, {
    key: "render",
    value: function render(_props, forwardRef) {
      var isContentNodeEmpty = this.isContentEmpty(this.node);
      return /*#__PURE__*/_react.default.createElement(DecisionItemWrapper, {
        forwardRef: forwardRef,
        isContentNodeEmpty: isContentNodeEmpty,
        api: this.api
        // The getPosHandler type is wrong, there is no `boolean` in the real implementation
        // @ts-expect-error 2322: Type 'getPosHandler' is not assignable to type '() => number | undefined'.
        ,
        getPos: this.getPos,
        editorView: this.view
      });
    }
  }, {
    key: "viewShouldUpdate",
    value: function viewShouldUpdate(nextNode) {
      return this.isContentEmpty(this.node) && !this.isContentEmpty(nextNode) || this.isContentEmpty(nextNode) && !this.isContentEmpty(this.node);
    }
  }, {
    key: "update",
    value: function update(node, decorations) {
      return _superPropGet(Decision, "update", this, 3)([node, decorations]);
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation(mutation) {
      if (!this.contentDOM) {
        return true;
      }
      return !this.contentDOM.contains(mutation.target) && mutation.type !== 'selection';
    }
  }]);
}(_reactNodeView.default);
var decisionItemNodeView = exports.decisionItemNodeView = function decisionItemNodeView(portalProviderAPI, eventDispatcher, api) {
  return function (node, view, getPos) {
    return new Decision(node, view, getPos, portalProviderAPI, eventDispatcher, {}).initWithAPI(api);
  };
};