"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.taskItemNodeSpec = exports.lazyTaskItemToDom = void 0;
exports.taskItemToDom = taskItemToDom;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _adfSchema = require("@atlaskit/adf-schema");
var _lazyNodeView = require("@atlaskit/editor-common/lazy-node-view");
var _styles = require("@atlaskit/editor-common/styles");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Wrapper for ADF taskItem node spec to augment toDOM implementation
 * with fallback UI for lazy node view rendering / window virtualization
 * @nodeSpecException:toDOM patch
 * @returns
 */
var taskItemNodeSpec = exports.taskItemNodeSpec = function taskItemNodeSpec() {
  if ((0, _experiments.editorExperiment)('platform_editor_exp_lazy_node_views', false)) {
    return _adfSchema.taskItem;
  }
  return _objectSpread(_objectSpread({}, _adfSchema.taskItem), {}, {
    toDOM: function toDOM(node) {
      return lazyTaskItemToDom(node);
    }
  });
};
function taskItemToDom(node, placeholder) {
  var checked = node.attrs.state === 'DONE';
  var inputAttrs = {
    name: node.attrs.localId,
    id: node.attrs.localId,
    type: 'checkbox'
  };
  if (checked) {
    inputAttrs.checked = 'true';
  }
  var dataAttrs = {
    'data-task-local-id': node.attrs.localId,
    'data-task-state': node.attrs.state,
    'data-prosemirror-node-view-type': 'vanilla'
  };
  return ['div', _objectSpread(_objectSpread({
    class: "".concat(_styles.TaskDecisionSharedCssClassName.TASK_CONTAINER)
  }, dataAttrs), {}, {
    state: node.attrs.state
  }), ['div', {
    'data-component': 'task-item-main'
  }, ['span', {
    contenteditable: 'false',
    class: "".concat(_styles.TaskDecisionSharedCssClassName.TASK_CHECKBOX_CONTAINER),
    'data-component': 'task-item-input-wrap'
  }, ['input', _objectSpread(_objectSpread({}, inputAttrs), {}, {
    'data-input-type': 'task-item',
    'data-task-input': true,
    'data-testid': 'task-item-checkbox',
    'data-component': 'task-item-input',
    role: 'checkbox'
  })], ['span', {
    'aria-hidden': true,
    'data-component': 'checkbox-icon-wrap'
  }, ['http://www.w3.org/2000/svg svg', {
    viewBox: "0 0 16 16",
    width: '16',
    height: '16',
    role: 'presentation',
    fill: 'none',
    'data-component': 'checkbox-unchecked-icon'
  }, ['http://www.w3.org/2000/svg rect', {
    width: '12.5',
    height: '12.5',
    x: '1.75',
    y: '1.75',
    stroke: 'currentcolor',
    'stroke-width': '1.5',
    rx: '1.25'
  }]], ['http://www.w3.org/2000/svg svg', {
    viewBox: "0 0 16 16",
    width: '16',
    height: '16',
    role: 'presentation',
    fill: 'none',
    'data-component': 'checkbox-checked-icon'
  }, ['http://www.w3.org/2000/svg path', {
    fill: 'currentcolor',
    'fill-rule': 'evenodd',
    'clip-rule': 'evenodd',
    d: 'M3 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm9.326 4.48-1.152-.96L6.75 9.828 4.826 7.52l-1.152.96 2.5 3a.75.75 0 0 0 1.152 0z'
  }]]]], ['span', {
    class: 'placeholder-node-view',
    'data-testid': 'task-decision-item-placeholder',
    'data-component': 'placeholder',
    contenteditable: 'false'
  }, placeholder], ['div', {
    'data-component': 'content'
  }, ['div', {
    class: _styles.TaskDecisionSharedCssClassName.TASK_ITEM
  }, 0]]]];
}
var lazyTaskItemToDom = exports.lazyTaskItemToDom = function lazyTaskItemToDom(node) {
  var checked = node.attrs.state === 'DONE';
  var inputAttrs = {
    name: node.attrs.localId,
    id: node.attrs.localId,
    type: 'checkbox'
  };
  if (checked) {
    inputAttrs.checked = 'true';
  }
  var dataAttrs = {
    'data-task-local-id': node.attrs.localId,
    'data-task-state': node.attrs.state
  };
  return ['div', _objectSpread(_objectSpread({
    class: _styles.TaskDecisionSharedCssClassName.TASK_CONTAINER
  }, dataAttrs), {}, {
    style: (0, _lazyNodeView.convertToInlineCss)({
      listStyleType: 'none',
      lineHeight: '24px',
      minWidth: '48px',
      position: 'relative'
    })
  }), ['div', {
    style: (0, _lazyNodeView.convertToInlineCss)({
      display: 'flex'
    })
  }, ['span', {
    contenteditable: 'false',
    style: (0, _lazyNodeView.convertToInlineCss)({
      width: '24px',
      height: '24px',
      lineHeight: '24px',
      display: 'grid',
      placeContent: 'center center'
    })
  }, ['input', _objectSpread(_objectSpread({}, inputAttrs), {}, {
    'data-input-type': 'lazy-task-item',
    style: (0, _lazyNodeView.convertToInlineCss)({
      width: '13px',
      height: '13px',
      margin: '1px 0 0 0',
      padding: 0,
      accentColor: "var(--ds-background-selected-bold, #0C66E4)"
    })
  })]], ['div', {
    'data-component': 'content'
  }, ['div', {
    class: _styles.TaskDecisionSharedCssClassName.TASK_ITEM,
    style: (0, _lazyNodeView.convertToInlineCss)({
      display: 'block',
      fontSize: '16px',
      fontFamily: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
      color: "var(--ds-text, #172B4D)"
    })
  }, 0]]]];
};