/* tasksAndDecisionsPlugin.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tasksAndDecisionsPlugin = void 0;
require("./tasksAndDecisionsPlugin.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _adfSchema = require("@atlaskit/adf-schema");
var _analytics = require("@atlaskit/editor-common/analytics");
var _indentation = require("@atlaskit/editor-common/indentation");
var _messages = require("@atlaskit/editor-common/messages");
var _quickInsert = require("@atlaskit/editor-common/quick-insert");
var _useSharedPluginStateSelector = require("@atlaskit/editor-common/use-shared-plugin-state-selector");
var _utils = require("@atlaskit/editor-prosemirror/utils");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _taskItemNodeSpec = require("./nodeviews/taskItemNodeSpec");
var _decisionItem = require("./nodeviews/toDOM-fixes/decisionItem");
var _helpers = require("./pm-plugins/helpers");
var _inputRules = _interopRequireDefault(require("./pm-plugins/input-rules"));
var _insertCommands = require("./pm-plugins/insert-commands");
var _keymaps = _interopRequireWildcard(require("./pm-plugins/keymaps"));
var _main = require("./pm-plugins/main");
var _pluginKey = require("./pm-plugins/plugin-key");
var _RequestToEditPopup = require("./ui/Task/RequestToEditPopup");
var _ToolbarDecision = _interopRequireDefault(require("./ui/ToolbarDecision"));
var _ToolbarTask = _interopRequireDefault(require("./ui/ToolbarTask"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
var taskDecisionToolbarGroupStyles = null;
var addItem = function addItem(insert, listType, schema) {
  return function (_ref) {
    var listLocalId = _ref.listLocalId,
      itemLocalId = _ref.itemLocalId;
    var _getListTypes = (0, _insertCommands.getListTypes)(listType, schema),
      list = _getListTypes.list,
      item = _getListTypes.item;
    return insert(list.createChecked({
      localId: listLocalId
    }, item.createChecked({
      localId: itemLocalId
    })));
  };
};
function ContentComponent(_ref2) {
  var editorView = _ref2.editorView,
    dispatchAnalyticsEvent = _ref2.dispatchAnalyticsEvent,
    popupsMountPoint = _ref2.popupsMountPoint,
    popupsBoundariesElement = _ref2.popupsBoundariesElement,
    popupsScrollableElement = _ref2.popupsScrollableElement,
    dependencyApi = _ref2.dependencyApi;
  var domAtPos = editorView.domAtPos.bind(editorView);
  var openRequestToEditPopupAt = (0, _useSharedPluginStateSelector.useSharedPluginStateSelector)(dependencyApi, 'taskDecision.openRequestToEditPopupAt');
  var hasEditPermission = (0, _useSharedPluginStateSelector.useSharedPluginStateSelector)(dependencyApi, 'taskDecision.hasEditPermission');
  if ((0, _experiments.editorExperiment)('platform_editor_vanilla_dom', false, {
    exposure: true
  })) {
    return null;
  }
  if (hasEditPermission || !openRequestToEditPopupAt) {
    return null;
  }

  // eslint-disable-next-line @atlaskit/editor/no-as-casting
  var element = (0, _utils.findDomRefAtPos)(openRequestToEditPopupAt, domAtPos);
  var handleOnClose = function handleOnClose() {
    (0, _helpers.closeRequestEditPopupAt)(editorView);
    editorView.focus();
  };
  return /*#__PURE__*/React.createElement(_RequestToEditPopup.RequestToEditPopup, {
    key: openRequestToEditPopupAt,
    api: dependencyApi,
    editorView: editorView,
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    element: element,
    onClose: handleOnClose
  });
}
var tasksAndDecisionsPlugin = exports.tasksAndDecisionsPlugin = function tasksAndDecisionsPlugin(_ref3) {
  var _api$analytics, _api$analytics2, _api$analytics3;
  var _ref3$config = _ref3.config,
    _ref3$config2 = _ref3$config === void 0 ? {} : _ref3$config,
    allowNestedTasks = _ref3$config2.allowNestedTasks,
    consumeTabs = _ref3$config2.consumeTabs,
    useLongPressSelection = _ref3$config2.useLongPressSelection,
    _ref3$config2$hasEdit = _ref3$config2.hasEditPermission,
    hasEditPermission = _ref3$config2$hasEdit === void 0 ? true : _ref3$config2$hasEdit,
    hasRequestedEditPermission = _ref3$config2.hasRequestedEditPermission,
    quickInsertActionDescription = _ref3$config2.quickInsertActionDescription,
    requestToEditContent = _ref3$config2.requestToEditContent,
    taskDecisionProvider = _ref3$config2.taskDecisionProvider,
    taskPlaceholder = _ref3$config2.taskPlaceholder,
    api = _ref3.api;
  var getIdentifierProvider = function getIdentifierProvider() {
    var _api$contextIdentifie;
    return api === null || api === void 0 || (_api$contextIdentifie = api.contextIdentifier) === null || _api$contextIdentifie === void 0 || (_api$contextIdentifie = _api$contextIdentifie.sharedState.currentState()) === null || _api$contextIdentifie === void 0 ? void 0 : _api$contextIdentifie.contextIdentifierProvider;
  };
  var previousTaskAndDecisionProvider;
  if (taskDecisionProvider) {
    taskDecisionProvider.then(function (provider) {
      api === null || api === void 0 || api.core.actions.execute(function (_ref4) {
        var tr = _ref4.tr;
        return (0, _insertCommands.setProvider)(provider)(tr);
      });
    });
  }
  return {
    name: 'taskDecision',
    nodes: function nodes() {
      return [{
        name: 'decisionList',
        node: _adfSchema.decisionList
      }, {
        name: 'decisionItem',
        node: (0, _decisionItem.decisionItemSpecWithFixedToDOM)()
      }, {
        name: 'taskList',
        node: _adfSchema.taskList
      }, {
        name: 'taskItem',
        node: (0, _taskItemNodeSpec.taskItemNodeSpec)()
      }];
    },
    getSharedState: function getSharedState(editorState) {
      if (!editorState) {
        return undefined;
      }
      var pluginState = _pluginKey.stateKey.getState(editorState);
      var indentLevel = (0, _helpers.getCurrentIndentLevel)(editorState.selection) || 0;
      var itemIndex = (0, _helpers.getTaskItemIndex)(editorState);
      return {
        focusedTaskItemLocalId: (pluginState === null || pluginState === void 0 ? void 0 : pluginState.focusedTaskItemLocalId) || null,
        isInsideTask: (0, _helpers.isInsideTask)(editorState),
        indentDisabled: itemIndex === 0 || indentLevel >= _indentation.MAX_INDENTATION_LEVEL,
        outdentDisabled: indentLevel <= 1,
        // hasEditPermission is assumed to be true if pluginState.hasEditPermission is undefined
        // this allows the default plugin state to initialise as true if the extra configuration is not provided
        hasEditPermission: (pluginState === null || pluginState === void 0 ? void 0 : pluginState.hasEditPermission) !== undefined ? pluginState === null || pluginState === void 0 ? void 0 : pluginState.hasEditPermission : true,
        requestToEditContent: pluginState === null || pluginState === void 0 ? void 0 : pluginState.requestToEditContent,
        hasRequestedEditPermission: pluginState === null || pluginState === void 0 ? void 0 : pluginState.hasRequestedEditPermission,
        taskDecisionProvider: pluginState === null || pluginState === void 0 ? void 0 : pluginState.taskDecisionProvider,
        openRequestToEditPopupAt: pluginState === null || pluginState === void 0 ? void 0 : pluginState.openRequestToEditPopupAt
      };
    },
    commands: {
      updateEditPermission: function updateEditPermission(hasEditPermission) {
        return function (_ref5) {
          var tr = _ref5.tr;
          return tr.setMeta(_pluginKey.stateKey, {
            hasEditPermission: hasEditPermission
          });
        };
      },
      updateHasRequestedEditPermission: function updateHasRequestedEditPermission(hasRequestedEditPermission) {
        return function (_ref6) {
          var tr = _ref6.tr;
          return tr.setMeta(_pluginKey.stateKey, {
            hasRequestedEditPermission: hasRequestedEditPermission
          });
        };
      }
    },
    actions: {
      insertTaskDecision: (0, _insertCommands.insertTaskDecisionCommand)(api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions, getIdentifierProvider),
      indentTaskList: (0, _keymaps.getIndentCommand)(api === null || api === void 0 || (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions),
      outdentTaskList: (0, _keymaps.getUnindentCommand)(api === null || api === void 0 || (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions),
      setProvider: function () {
        var _setProvider2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(providerPromise) {
          var _api$core$actions$exe;
          var provider;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return providerPromise;
              case 2:
                provider = _context.sent;
                if (!(previousTaskAndDecisionProvider === provider || taskDecisionProvider === providerPromise)) {
                  _context.next = 5;
                  break;
                }
                return _context.abrupt("return", false);
              case 5:
                previousTaskAndDecisionProvider = provider;
                return _context.abrupt("return", (_api$core$actions$exe = api === null || api === void 0 ? void 0 : api.core.actions.execute(function (_ref7) {
                  var tr = _ref7.tr;
                  return (0, _insertCommands.setProvider)(provider)(tr);
                })) !== null && _api$core$actions$exe !== void 0 ? _api$core$actions$exe : false);
              case 7:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function setProvider(_x) {
          return _setProvider2.apply(this, arguments);
        }
        return setProvider;
      }()
    },
    pmPlugins: function pmPlugins() {
      return [{
        name: 'tasksAndDecisions',
        plugin: function plugin(_ref8) {
          var portalProviderAPI = _ref8.portalProviderAPI,
            providerFactory = _ref8.providerFactory,
            eventDispatcher = _ref8.eventDispatcher,
            dispatch = _ref8.dispatch,
            getIntl = _ref8.getIntl;
          return (0, _main.createPlugin)(portalProviderAPI, eventDispatcher, providerFactory, dispatch, api, getIntl, useLongPressSelection, hasEditPermission, hasRequestedEditPermission, requestToEditContent, taskPlaceholder);
        }
      }, {
        name: 'tasksAndDecisionsInputRule',
        plugin: function plugin(_ref9) {
          var _api$analytics4;
          var schema = _ref9.schema,
            featureFlags = _ref9.featureFlags;
          return (0, _inputRules.default)(api === null || api === void 0 || (_api$analytics4 = api.analytics) === null || _api$analytics4 === void 0 ? void 0 : _api$analytics4.actions, getIdentifierProvider)(schema, featureFlags);
        }
      }, {
        name: 'tasksAndDecisionsKeyMap',
        plugin: function plugin(_ref10) {
          var schema = _ref10.schema;
          return (0, _keymaps.default)(schema, api, allowNestedTasks, consumeTabs);
        }
      } // Needs to be after "save-on-enter"
      ];
    },
    secondaryToolbarComponent: function secondaryToolbarComponent(_ref11) {
      var editorView = _ref11.editorView,
        disabled = _ref11.disabled;
      return /*#__PURE__*/React.createElement("div", {
        className: (0, _runtime.ax)(["_1e0c1txw"])
      }, /*#__PURE__*/React.createElement(_ToolbarDecision.default, {
        editorView: editorView,
        isDisabled: disabled,
        isReducedSpacing: true,
        editorAPI: api
      }), /*#__PURE__*/React.createElement(_ToolbarTask.default, {
        editorView: editorView,
        isDisabled: disabled,
        isReducedSpacing: true,
        editorAPI: api
      }));
    },
    contentComponent: function contentComponent(_ref12) {
      var editorView = _ref12.editorView,
        dispatchAnalyticsEvent = _ref12.dispatchAnalyticsEvent,
        popupsMountPoint = _ref12.popupsMountPoint,
        popupsBoundariesElement = _ref12.popupsBoundariesElement,
        popupsScrollableElement = _ref12.popupsScrollableElement;
      return /*#__PURE__*/React.createElement(ContentComponent, {
        dependencyApi: api,
        editorView: editorView,
        dispatchAnalyticsEvent: dispatchAnalyticsEvent,
        popupsMountPoint: popupsMountPoint,
        popupsBoundariesElement: popupsBoundariesElement,
        popupsScrollableElement: popupsScrollableElement
      });
    },
    pluginsOptions: {
      quickInsert: function quickInsert(_ref13) {
        var formatMessage = _ref13.formatMessage;
        return [{
          id: 'action',
          title: formatMessage(_messages.toolbarInsertBlockMessages.action),
          description: quickInsertActionDescription !== null && quickInsertActionDescription !== void 0 ? quickInsertActionDescription : formatMessage(_messages.toolbarInsertBlockMessages.actionDescription),
          priority: 100,
          keywords: ['checkbox', 'task', 'todo'],
          keyshortcut: '[]',
          icon: function icon() {
            return /*#__PURE__*/React.createElement(_quickInsert.IconAction, null);
          },
          action: function action(insert, state) {
            var _api$analytics5;
            return (0, _insertCommands.insertTaskDecisionAction)(api === null || api === void 0 || (_api$analytics5 = api.analytics) === null || _api$analytics5 === void 0 ? void 0 : _api$analytics5.actions, getIdentifierProvider)(state, 'taskList', _analytics.INPUT_METHOD.QUICK_INSERT, addItem(insert, 'taskList', state.schema));
          }
        }, {
          id: 'decision',
          title: formatMessage(_messages.toolbarInsertBlockMessages.decision),
          description: formatMessage(_messages.toolbarInsertBlockMessages.decisionDescription),
          priority: 900,
          keyshortcut: '<>',
          icon: function icon() {
            return /*#__PURE__*/React.createElement(_quickInsert.IconDecision, null);
          },
          action: function action(insert, state) {
            var _api$analytics6;
            return (0, _insertCommands.insertTaskDecisionAction)(api === null || api === void 0 || (_api$analytics6 = api.analytics) === null || _api$analytics6 === void 0 ? void 0 : _api$analytics6.actions, getIdentifierProvider)(state, 'decisionList', _analytics.INPUT_METHOD.QUICK_INSERT, addItem(insert, 'decisionList', state.schema));
          }
        }];
      }
    }
  };
};