import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useRef, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { DynamicStrokeIconDecoration } from '@atlaskit/editor-common/icons';
import { toggleHighlightPalette, tooltip } from '@atlaskit/editor-common/keymaps';
import { highlightMessages as messages } from '@atlaskit/editor-common/messages';
import { disableBlueBorderStyles, expandIconContainerStyle, triggerWrapperStylesWithPadding } from '@atlaskit/editor-common/styles';
import { TOOLBAR_BUTTON, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorTextBackgroundPaletteColor } from '@atlaskit/editor-palette';
import HighlightIcon from '@atlaskit/icon/core/highlight';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { EditorHighlightIcon } from './shared/EditorHighlightIcon';
import { PaletteDropdown } from './shared/PaletteDropdown';
import { useDropdownEvents } from './shared/useDropdownEvents';
var expandIconContainerHighlightStyle = css({
  margin: "0px ".concat("var(--ds-space-negative-050, -4px)")
});
var highlightIconContainerStyle = css({
  marginTop: "var(--ds-space-negative-050, -4px)"
});
var FloatingToolbarHighlightColor = function FloatingToolbarHighlightColor(_ref) {
  var pluginInjectionApi = _ref.pluginInjectionApi,
    formatMessage = _ref.intl.formatMessage;
  var toolbarItemRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDropdownOpen = _useState2[0],
    setIsDropdownOpen = _useState2[1];
  var _useSharedPluginState = useSharedPluginState(pluginInjectionApi, ['highlight']),
    highlightState = _useSharedPluginState.highlightState;
  var setDropdownOpen = function setDropdownOpen(isOpen) {
    var _pluginInjectionApi$a;
    setIsDropdownOpen(isOpen);
    pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 || _pluginInjectionApi$a.actions.fireAnalyticsEvent({
      action: isOpen ? ACTION.OPENED : ACTION.CLOSED,
      actionSubject: ACTION_SUBJECT.TOOLBAR,
      actionSubjectId: ACTION_SUBJECT_ID.FORMAT_BACKGROUND_COLOR,
      eventType: EVENT_TYPE.TRACK,
      attributes: {
        inputMethod: INPUT_METHOD.FLOATING_TB
      }
    });
  };
  var _useDropdownEvents = useDropdownEvents({
      toolbarItemRef: toolbarItemRef,
      setIsDropdownOpen: setDropdownOpen,
      isDropdownOpen: isDropdownOpen,
      pluginInjectionApi: pluginInjectionApi
    }),
    handleClick = _useDropdownEvents.handleClick,
    handleKeyDown = _useDropdownEvents.handleKeyDown,
    handleClickOutside = _useDropdownEvents.handleClickOutside,
    handleEscapeKeydown = _useDropdownEvents.handleEscapeKeydown,
    handleColorChange = _useDropdownEvents.handleColorChange,
    isOpenedByKeyboard = _useDropdownEvents.isOpenedByKeyboard;

  // Don't render the toolbar option while the plugin is initialising
  if (!highlightState) {
    return null;
  }
  var toolbarButtonLabel = formatMessage(messages.highlight);

  // Get the design token for the  active color (if it exists) to modify the toolbar
  // icon, but show the nice rainbow if none is selected
  var activeColorToken = highlightState.activeColor === null ? null : hexToEditorTextBackgroundPaletteColor(highlightState.activeColor);
  var title = editorExperiment('platform_editor_controls', 'variant1') ? tooltip(toggleHighlightPalette, toolbarButtonLabel) : toolbarButtonLabel;
  return jsx(PaletteDropdown, {
    isOpen: isDropdownOpen && !highlightState.disabled,
    activeColor: highlightState.activeColor,
    trigger: jsx(ToolbarButton
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides, @atlaskit/ui-styling-standard/no-imported-style-values
    , {
      css: disableBlueBorderStyles,
      buttonId: TOOLBAR_BUTTON.BACKGROUND_COLOR,
      spacing: editorExperiment('platform_editor_controls', 'variant1') ? 'default' : 'compact',
      disabled: highlightState.disabled,
      selected: isDropdownOpen,
      "aria-label": title,
      "aria-expanded": isDropdownOpen,
      "aria-haspopup": true,
      title: title,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      ref: toolbarItemRef,
      iconBefore:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      fg('platform-visual-refresh-icons') ?
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      jsx("div", {
        css: triggerWrapperStylesWithPadding
      }, jsx(DynamicStrokeIconDecoration, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled,
        icon: jsx(HighlightIcon, {
          label: "",
          color: "currentColor",
          spacing: "spacious"
        })
      }),
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      jsx("span", {
        css: expandIconContainerStyle
      }, jsx(ChevronDownIcon, {
        label: "",
        color: "currentColor"
      }))) : jsx("span", {
        css: highlightIconContainerStyle
      }, jsx(EditorHighlightIcon, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled
      })),
      iconAfter:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      fg('platform-visual-refresh-icons') ? undefined : jsx("span", {
        css: expandIconContainerHighlightStyle
      }, jsx(ChevronDownIcon, {
        label: "",
        color: "currentColor"
      }))
    }, editorExperiment('platform_editor_controls', 'control') && formatMessage(messages.highlightFloatingToolbar)),
    onColorChange: function onColorChange(color) {
      return handleColorChange({
        color: color,
        inputMethod: INPUT_METHOD.FLOATING_TB
      });
    },
    isOpenedByKeyboard: isOpenedByKeyboard,
    handleClickOutside: handleClickOutside,
    handleEscapeKeydown: handleEscapeKeydown
  });
};
export var FloatingToolbarHighlightColorWithIntl = injectIntl(FloatingToolbarHighlightColor);