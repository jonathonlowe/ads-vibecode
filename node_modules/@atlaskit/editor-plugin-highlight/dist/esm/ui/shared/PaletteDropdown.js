import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { ColorPalette, colorPaletteMessages, getSelectedRowAndColumnFromPalette, highlightColorPalette } from '@atlaskit/editor-common/ui-color';
import { ArrowKeyNavigationType, DropdownContainer as Dropdown } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorTextBackgroundPaletteColor } from '@atlaskit/editor-palette';
import { akEditorMenuZIndex } from '@atlaskit/editor-shared-styles';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
export var PaletteDropdown = function PaletteDropdown(props) {
  var popupsMountPoint = props.popupsMountPoint,
    popupsBoundariesElement = props.popupsBoundariesElement,
    popupsScrollableElement = props.popupsScrollableElement,
    isOpen = props.isOpen,
    activeColor = props.activeColor,
    trigger = props.trigger,
    onColorChange = props.onColorChange,
    isOpenedByKeyboard = props.isOpenedByKeyboard,
    handleClickOutside = props.handleClickOutside,
    handleEscapeKeydown = props.handleEscapeKeydown;

  // pixels, used to determine where to horizontally position the dropdown when space is limited
  // this should reflect the width of the dropdown when fully populated with colors, including translations due to layering
  var fitWidth = 242;
  var colorPalette = highlightColorPalette;
  if (editorExperiment('editor_text_highlight_orange_to_yellow', 'test', {
    exposure: true
  })) {
    colorPalette = highlightColorPalette.map(function (item) {
      if (item.label === 'Orange') {
        return _objectSpread(_objectSpread({}, item), {}, {
          label: 'Yellow',
          message: colorPaletteMessages.yellow
        });
      }
      return item;
    });
  }
  var _getSelectedRowAndCol = getSelectedRowAndColumnFromPalette(colorPalette, activeColor),
    selectedRowIndex = _getSelectedRowAndCol.selectedRowIndex,
    selectedColumnIndex = _getSelectedRowAndCol.selectedColumnIndex;
  return /*#__PURE__*/React.createElement(Dropdown, {
    mountTo: popupsMountPoint,
    boundariesElement: popupsBoundariesElement,
    scrollableElement: popupsScrollableElement,
    isOpen: isOpen,
    handleClickOutside: handleClickOutside,
    handleEscapeKeydown: handleEscapeKeydown,
    zIndex: akEditorMenuZIndex,
    fitWidth: fitWidth,
    closeOnTab: true,
    arrowKeyNavigationProviderOptions: {
      type: ArrowKeyNavigationType.COLOR,
      selectedRowIndex: selectedRowIndex,
      selectedColumnIndex: selectedColumnIndex,
      isOpenedByKeyboard: isOpenedByKeyboard,
      isPopupPositioned: true
    },
    trigger: trigger
  }, /*#__PURE__*/React.createElement("div", {
    "data-testid": "highlight-color-palette"
  }, /*#__PURE__*/React.createElement(ColorPalette, {
    onClick: onColorChange,
    selectedColor: activeColor,
    paletteOptions: {
      palette: colorPalette,
      hexToPaletteColor: hexToEditorTextBackgroundPaletteColor
    }
  })));
};