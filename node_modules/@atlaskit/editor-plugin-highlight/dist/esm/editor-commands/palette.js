import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE } from '@atlaskit/editor-common/analytics';
import { HighlightPluginAction, highlightPluginKey } from '../pm-plugins/main';
export var togglePalette = function togglePalette(api) {
  return function (_ref) {
    var inputMethod = _ref.inputMethod;
    return function (state, dispatch) {
      var _highlightPluginKey$g;
      var isPaletteOpen = (_highlightPluginKey$g = highlightPluginKey.getState(state)) === null || _highlightPluginKey$g === void 0 ? void 0 : _highlightPluginKey$g.isPaletteOpen;
      return setPalette(api)({
        isPaletteOpen: !isPaletteOpen,
        inputMethod: inputMethod
      })(state, dispatch);
    };
  };
};
export var setPalette = function setPalette(api) {
  return function (_ref2) {
    var isPaletteOpen = _ref2.isPaletteOpen,
      inputMethod = _ref2.inputMethod;
    return function (state, dispatch) {
      var _highlightPluginKey$g2;
      var isDisabled = (_highlightPluginKey$g2 = highlightPluginKey.getState(state)) === null || _highlightPluginKey$g2 === void 0 ? void 0 : _highlightPluginKey$g2.disabled;
      if (!isDisabled) {
        var _api$analytics;
        var tr = state.tr;
        tr.setMeta(highlightPluginKey, {
          type: HighlightPluginAction.SET_PALETTE,
          isPaletteOpen: isPaletteOpen
        });
        (_api$analytics = api.analytics) === null || _api$analytics === void 0 || _api$analytics.actions.attachAnalyticsEvent(createAnalyticsEvent(isPaletteOpen, inputMethod))(tr);
        tr.setMeta('addToHistory', false);
        if (dispatch) {
          dispatch(tr);
        }
        return true;
      }
      return false;
    };
  };
};
var createAnalyticsEvent = function createAnalyticsEvent(isPaletteOpen, inputMethod) {
  return {
    action: isPaletteOpen ? ACTION.OPENED : ACTION.CLOSED,
    actionSubject: ACTION_SUBJECT.TOOLBAR,
    actionSubjectId: ACTION_SUBJECT_ID.FORMAT_BACKGROUND_COLOR,
    eventType: EVENT_TYPE.TRACK,
    attributes: {
      inputMethod: inputMethod
    }
  };
};