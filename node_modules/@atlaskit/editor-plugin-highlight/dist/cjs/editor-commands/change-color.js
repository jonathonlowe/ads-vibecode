"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeColor = void 0;
var _analytics = require("@atlaskit/editor-common/analytics");
var _mark = require("@atlaskit/editor-common/mark");
var _uiColor = require("@atlaskit/editor-common/ui-color");
var _main = require("../pm-plugins/main");
var _color = require("./color");
var changeColor = exports.changeColor = function changeColor(editorAnalyticsAPI) {
  return function (_ref) {
    var color = _ref.color,
      inputMethod = _ref.inputMethod;
    return function (_ref2) {
      var tr = _ref2.tr;
      var backgroundColor = tr.doc.type.schema.marks.backgroundColor;
      if (!backgroundColor) {
        return null;
      }
      editorAnalyticsAPI === null || editorAnalyticsAPI === void 0 || editorAnalyticsAPI.attachAnalyticsEvent(createAnalyticsEvent(color, inputMethod, tr))(tr);
      tr.scrollIntoView();
      if (color === _uiColor.REMOVE_HIGHLIGHT_COLOR) {
        (0, _mark.removeMark)(backgroundColor)({
          tr: tr
        });
      } else {
        tr.setMeta(_main.highlightPluginKey, {
          type: _main.HighlightPluginAction.CHANGE_COLOR,
          color: color
        });
        (0, _mark.toggleMark)(backgroundColor, {
          color: color
        })({
          tr: tr
        });
      }
      return tr;
    };
  };
};
var createAnalyticsEvent = function createAnalyticsEvent(color, inputMethod, tr) {
  var _getActiveColor;
  var previousColor = (_getActiveColor = (0, _color.getActiveColor)(tr)) !== null && _getActiveColor !== void 0 ? _getActiveColor : _uiColor.REMOVE_HIGHLIGHT_COLOR;
  // get color names from palette
  var newColorFromPalette = _uiColor.highlightColorPalette.find(function (_ref3) {
    var value = _ref3.value;
    return value === color;
  });
  var previousColorFromPalette = _uiColor.highlightColorPalette.find(function (_ref4) {
    var value = _ref4.value;
    return value === previousColor;
  });
  var newColorLabel = newColorFromPalette ? newColorFromPalette.label : color;
  var previousColorLabel = previousColorFromPalette ? previousColorFromPalette.label : previousColor;
  return {
    action: _analytics.ACTION.FORMATTED,
    actionSubject: _analytics.ACTION_SUBJECT.TEXT,
    actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_BACKGROUND_COLOR,
    eventType: _analytics.EVENT_TYPE.TRACK,
    attributes: {
      newColor: newColorLabel.toLowerCase(),
      previousColor: previousColorLabel ? previousColorLabel.toLowerCase() : '',
      inputMethod: inputMethod
    }
  };
};