"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatingToolbarHighlightColorWithIntl = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _analytics = require("@atlaskit/editor-common/analytics");
var _hooks = require("@atlaskit/editor-common/hooks");
var _icons = require("@atlaskit/editor-common/icons");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _messages = require("@atlaskit/editor-common/messages");
var _styles = require("@atlaskit/editor-common/styles");
var _uiMenu = require("@atlaskit/editor-common/ui-menu");
var _editorPalette = require("@atlaskit/editor-palette");
var _highlight = _interopRequireDefault(require("@atlaskit/icon/core/highlight"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/utility/migration/chevron-down"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _EditorHighlightIcon = require("./shared/EditorHighlightIcon");
var _PaletteDropdown = require("./shared/PaletteDropdown");
var _useDropdownEvents2 = require("./shared/useDropdownEvents");
/**
 * @jsxRuntime classic
 * @jsx jsx
 */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var expandIconContainerHighlightStyle = (0, _react2.css)({
  margin: "0px ".concat("var(--ds-space-negative-050, -4px)")
});
var highlightIconContainerStyle = (0, _react2.css)({
  marginTop: "var(--ds-space-negative-050, -4px)"
});
var FloatingToolbarHighlightColor = function FloatingToolbarHighlightColor(_ref) {
  var pluginInjectionApi = _ref.pluginInjectionApi,
    formatMessage = _ref.intl.formatMessage;
  var toolbarItemRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isDropdownOpen = _useState2[0],
    setIsDropdownOpen = _useState2[1];
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(pluginInjectionApi, ['highlight']),
    highlightState = _useSharedPluginState.highlightState;
  var setDropdownOpen = function setDropdownOpen(isOpen) {
    var _pluginInjectionApi$a;
    setIsDropdownOpen(isOpen);
    pluginInjectionApi === null || pluginInjectionApi === void 0 || (_pluginInjectionApi$a = pluginInjectionApi.analytics) === null || _pluginInjectionApi$a === void 0 || _pluginInjectionApi$a.actions.fireAnalyticsEvent({
      action: isOpen ? _analytics.ACTION.OPENED : _analytics.ACTION.CLOSED,
      actionSubject: _analytics.ACTION_SUBJECT.TOOLBAR,
      actionSubjectId: _analytics.ACTION_SUBJECT_ID.FORMAT_BACKGROUND_COLOR,
      eventType: _analytics.EVENT_TYPE.TRACK,
      attributes: {
        inputMethod: _analytics.INPUT_METHOD.FLOATING_TB
      }
    });
  };
  var _useDropdownEvents = (0, _useDropdownEvents2.useDropdownEvents)({
      toolbarItemRef: toolbarItemRef,
      setIsDropdownOpen: setDropdownOpen,
      isDropdownOpen: isDropdownOpen,
      pluginInjectionApi: pluginInjectionApi
    }),
    handleClick = _useDropdownEvents.handleClick,
    handleKeyDown = _useDropdownEvents.handleKeyDown,
    handleClickOutside = _useDropdownEvents.handleClickOutside,
    handleEscapeKeydown = _useDropdownEvents.handleEscapeKeydown,
    handleColorChange = _useDropdownEvents.handleColorChange,
    isOpenedByKeyboard = _useDropdownEvents.isOpenedByKeyboard;

  // Don't render the toolbar option while the plugin is initialising
  if (!highlightState) {
    return null;
  }
  var toolbarButtonLabel = formatMessage(_messages.highlightMessages.highlight);

  // Get the design token for the  active color (if it exists) to modify the toolbar
  // icon, but show the nice rainbow if none is selected
  var activeColorToken = highlightState.activeColor === null ? null : (0, _editorPalette.hexToEditorTextBackgroundPaletteColor)(highlightState.activeColor);
  var title = (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? (0, _keymaps.tooltip)(_keymaps.toggleHighlightPalette, toolbarButtonLabel) : toolbarButtonLabel;
  return (0, _react2.jsx)(_PaletteDropdown.PaletteDropdown, {
    isOpen: isDropdownOpen && !highlightState.disabled,
    activeColor: highlightState.activeColor,
    trigger: (0, _react2.jsx)(_uiMenu.ToolbarButton
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides, @atlaskit/ui-styling-standard/no-imported-style-values
    , {
      css: _styles.disableBlueBorderStyles,
      buttonId: _uiMenu.TOOLBAR_BUTTON.BACKGROUND_COLOR,
      spacing: (0, _experiments.editorExperiment)('platform_editor_controls', 'variant1') ? 'default' : 'compact',
      disabled: highlightState.disabled,
      selected: isDropdownOpen,
      "aria-label": title,
      "aria-expanded": isDropdownOpen,
      "aria-haspopup": true,
      title: title,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      ref: toolbarItemRef,
      iconBefore:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') ?
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      (0, _react2.jsx)("div", {
        css: _styles.triggerWrapperStylesWithPadding
      }, (0, _react2.jsx)(_icons.DynamicStrokeIconDecoration, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled,
        icon: (0, _react2.jsx)(_highlight.default, {
          label: "",
          color: "currentColor",
          spacing: "spacious"
        })
      }),
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      (0, _react2.jsx)("span", {
        css: _styles.expandIconContainerStyle
      }, (0, _react2.jsx)(_chevronDown.default, {
        label: "",
        color: "currentColor"
      }))) : (0, _react2.jsx)("span", {
        css: highlightIconContainerStyle
      }, (0, _react2.jsx)(_EditorHighlightIcon.EditorHighlightIcon, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled
      })),
      iconAfter:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      (0, _platformFeatureFlags.fg)('platform-visual-refresh-icons') ? undefined : (0, _react2.jsx)("span", {
        css: expandIconContainerHighlightStyle
      }, (0, _react2.jsx)(_chevronDown.default, {
        label: "",
        color: "currentColor"
      }))
    }, (0, _experiments.editorExperiment)('platform_editor_controls', 'control') && formatMessage(_messages.highlightMessages.highlightFloatingToolbar)),
    onColorChange: function onColorChange(color) {
      return handleColorChange({
        color: color,
        inputMethod: _analytics.INPUT_METHOD.FLOATING_TB
      });
    },
    isOpenedByKeyboard: isOpenedByKeyboard,
    handleClickOutside: handleClickOutside,
    handleEscapeKeydown: handleEscapeKeydown
  });
};
var FloatingToolbarHighlightColorWithIntl = exports.FloatingToolbarHighlightColorWithIntl = (0, _reactIntlNext.injectIntl)(FloatingToolbarHighlightColor);