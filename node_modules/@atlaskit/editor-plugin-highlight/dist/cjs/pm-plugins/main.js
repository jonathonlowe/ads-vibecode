"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.highlightPluginKey = exports.createPlugin = exports.HighlightPluginAction = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _state = require("@atlaskit/editor-prosemirror/state");
var _color = require("../editor-commands/color");
var _disabled = require("../editor-commands/disabled");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var highlightPluginKey = exports.highlightPluginKey = new _state.PluginKey('highlight');
var HighlightPluginAction = exports.HighlightPluginAction = /*#__PURE__*/function (HighlightPluginAction) {
  HighlightPluginAction[HighlightPluginAction["CHANGE_COLOR"] = 0] = "CHANGE_COLOR";
  HighlightPluginAction[HighlightPluginAction["SET_PALETTE"] = 1] = "SET_PALETTE";
  return HighlightPluginAction;
}({});
var createPlugin = exports.createPlugin = function createPlugin(_ref) {
  var api = _ref.api;
  return new _safePlugin.SafePlugin({
    key: highlightPluginKey,
    state: {
      init: function init(_, editorState) {
        return {
          activeColor: null,
          disabled: (0, _disabled.getDisabledState)(editorState),
          isPaletteOpen: false
        };
      },
      apply: function apply(tr, pluginState, _oldState, newState) {
        var _tr$getMeta;
        var action = (_tr$getMeta = tr.getMeta(highlightPluginKey)) === null || _tr$getMeta === void 0 ? void 0 : _tr$getMeta.type;
        switch (action) {
          case HighlightPluginAction.CHANGE_COLOR:
            var _tr$getMeta2 = tr.getMeta(highlightPluginKey),
              color = _tr$getMeta2.color;
            return _objectSpread(_objectSpread({}, pluginState), {}, {
              activeColor: color
            });
          case HighlightPluginAction.SET_PALETTE:
            var _tr$getMeta3 = tr.getMeta(highlightPluginKey),
              isPaletteOpen = _tr$getMeta3.isPaletteOpen;
            return _objectSpread(_objectSpread({}, pluginState), {}, {
              isPaletteOpen: isPaletteOpen
            });
          default:
            return _objectSpread(_objectSpread({}, pluginState), {}, {
              activeColor: (0, _color.getActiveColor)(tr),
              disabled: (0, _disabled.getDisabledState)(newState)
            });
        }
      }
    }
  });
};