/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { injectIntl } from 'react-intl-next';
import { INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { DynamicStrokeIconDecoration } from '@atlaskit/editor-common/icons';
import { getAriaKeyshortcuts, toggleHighlightPalette, tooltip } from '@atlaskit/editor-common/keymaps';
import { highlightMessages as messages } from '@atlaskit/editor-common/messages';
import { disableBlueBorderStyles, expandIconContainerStyle, expandIconWrapperStyle, triggerWrapperStylesWithPadding } from '@atlaskit/editor-common/styles';
import { TOOLBAR_BUTTON, ToolbarButton } from '@atlaskit/editor-common/ui-menu';
import { hexToEditorTextBackgroundPaletteColor } from '@atlaskit/editor-palette';
import HighlightIcon from '@atlaskit/icon/core/highlight';
import ChevronDownIcon from '@atlaskit/icon/utility/migration/chevron-down';
import { fg } from '@atlaskit/platform-feature-flags';
import { Flex } from '@atlaskit/primitives/compiled';
import { setPalette } from '../editor-commands/palette';
import { EditorHighlightIcon } from './shared/EditorHighlightIcon';
import { PaletteDropdown } from './shared/PaletteDropdown';
import { useDropdownEvents } from './shared/useDropdownEvents';
const PrimaryToolbarHighlightColor = ({
  popupsMountPoint,
  popupsBoundariesElement,
  popupsScrollableElement,
  isToolbarReducedSpacing,
  disabled,
  pluginInjectionApi,
  intl: {
    formatMessage
  },
  editorView
}) => {
  const toolbarItemRef = useRef(null);
  const {
    highlightState
  } = useSharedPluginState(pluginInjectionApi, ['highlight']);
  const setIsDropdownOpen = isOpen => {
    if (!(highlightState !== null && highlightState !== void 0 && highlightState.disabled)) {
      const {
        state,
        dispatch
      } = editorView;
      // Ignored via go/ees005
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      setPalette(pluginInjectionApi)({
        isPaletteOpen: isOpen,
        inputMethod: INPUT_METHOD.TOOLBAR
      })(state, dispatch);
    }
  };
  const isDropdownOpen = !!(highlightState !== null && highlightState !== void 0 && highlightState.isPaletteOpen);
  const {
    handleClick,
    handleKeyDown,
    handleClickOutside,
    handleEscapeKeydown,
    handleColorChange,
    isOpenedByKeyboard
  } = useDropdownEvents({
    toolbarItemRef,
    setIsDropdownOpen,
    isDropdownOpen,
    pluginInjectionApi
  });

  // Don't render the toolbar option while the plugin is initialising
  if (!highlightState) {
    return null;
  }
  const toolbarButtonLabel = formatMessage(messages.highlight);

  // Get the design token for the  active color (if it exists) to modify the toolbar
  // icon, but show the nice rainbow if none is selected
  const activeColorToken = highlightState.activeColor === null ? null : hexToEditorTextBackgroundPaletteColor(highlightState.activeColor);
  return jsx(Flex, {
    alignItems: "center"
  }, jsx(PaletteDropdown, {
    popupsMountPoint: popupsMountPoint,
    popupsBoundariesElement: popupsBoundariesElement,
    popupsScrollableElement: popupsScrollableElement,
    isOpen: isDropdownOpen && !highlightState.disabled,
    activeColor: highlightState.activeColor,
    trigger: jsx(ToolbarButton
    // eslint-disable-next-line @atlaskit/design-system/no-unsafe-style-overrides, @atlaskit/ui-styling-standard/no-imported-style-values
    , {
      css: disableBlueBorderStyles,
      buttonId: TOOLBAR_BUTTON.BACKGROUND_COLOR,
      spacing: isToolbarReducedSpacing ? 'none' : 'default',
      disabled: disabled || highlightState.disabled,
      selected: isDropdownOpen,
      "aria-label": tooltip(toggleHighlightPalette, toolbarButtonLabel),
      "aria-keyshortcuts": getAriaKeyshortcuts(toggleHighlightPalette),
      "aria-expanded": isDropdownOpen,
      "aria-haspopup": true,
      title: tooltip(toggleHighlightPalette, toolbarButtonLabel),
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      ref: toolbarItemRef,
      iconBefore:
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      fg('platform-visual-refresh-icons') ?
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values
      jsx("div", {
        css: triggerWrapperStylesWithPadding
      }, jsx(DynamicStrokeIconDecoration, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled,
        icon: jsx(HighlightIcon, {
          label: "",
          color: "currentColor",
          spacing: "spacious"
        })
      }),
      //eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
      jsx("span", {
        css: expandIconContainerStyle
      }, jsx(ChevronDownIcon, {
        label: "",
        color: "currentColor"
      }))) : jsx(Flex, null, jsx(EditorHighlightIcon, {
        selectedColor: activeColorToken,
        disabled: highlightState.disabled
      }), jsx("span", {
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        css: expandIconWrapperStyle
      }, jsx(ChevronDownIcon, {
        label: ""
      })))
    }),
    onColorChange: color => handleColorChange({
      color,
      inputMethod: INPUT_METHOD.TOOLBAR
    }),
    isOpenedByKeyboard: isOpenedByKeyboard,
    handleClickOutside: handleClickOutside,
    handleEscapeKeydown: handleEscapeKeydown
  }));
};
export const PrimaryToolbarHighlightColorWithIntl = injectIntl(PrimaryToolbarHighlightColor);