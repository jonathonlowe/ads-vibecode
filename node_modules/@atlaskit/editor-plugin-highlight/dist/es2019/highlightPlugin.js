import React from 'react';
import { backgroundColor } from '@atlaskit/adf-schema';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { changeColor } from './editor-commands/change-color';
import { keymapPlugin } from './pm-plugins/keymap';
import { createPlugin, highlightPluginKey } from './pm-plugins/main';
import { FloatingToolbarHighlightColorWithIntl as FloatingToolbarHighlightColor } from './ui/FloatingToolbarHighlightColor';
import { PrimaryToolbarHighlightColorWithIntl as PrimaryToolbarHighlightColor } from './ui/PrimaryToolbarHighlightColor';
export const highlightPlugin = ({
  api,
  config: options
}) => {
  var _api$analytics, _api$primaryToolbar;
  const editorAnalyticsAPI = api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  const primaryToolbarComponent = ({
    popupsMountPoint,
    popupsBoundariesElement,
    popupsScrollableElement,
    disabled,
    isToolbarReducedSpacing,
    editorView
  }) => {
    return /*#__PURE__*/React.createElement(PrimaryToolbarHighlightColor, {
      popupsMountPoint: popupsMountPoint,
      popupsBoundariesElement: popupsBoundariesElement,
      popupsScrollableElement: popupsScrollableElement,
      disabled: disabled,
      isToolbarReducedSpacing: isToolbarReducedSpacing,
      pluginInjectionApi: api,
      editorView: editorView
    });
  };
  api === null || api === void 0 ? void 0 : (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 ? void 0 : _api$primaryToolbar.actions.registerComponent({
    name: 'highlight',
    component: primaryToolbarComponent
  });
  return {
    name: 'highlight',
    marks() {
      return [{
        name: 'backgroundColor',
        mark: backgroundColor
      }];
    },
    commands: {
      changeColor: changeColor(editorAnalyticsAPI)
    },
    pmPlugins: () => [{
      name: 'highlight',
      plugin: () => createPlugin({
        api
      })
    }, {
      name: 'highlightKeymap',
      plugin: () => keymapPlugin({
        api
      })
    }],
    getSharedState(editorState) {
      if (!editorState) {
        return;
      }
      return highlightPluginKey.getState(editorState);
    },
    pluginsOptions: {
      selectionToolbar() {
        var _api$selectionToolbar, _api$selectionToolbar2, _api$selectionToolbar3;
        if ((api === null || api === void 0 ? void 0 : (_api$selectionToolbar = api.selectionToolbar) === null || _api$selectionToolbar === void 0 ? void 0 : (_api$selectionToolbar2 = _api$selectionToolbar.sharedState) === null || _api$selectionToolbar2 === void 0 ? void 0 : (_api$selectionToolbar3 = _api$selectionToolbar2.currentState()) === null || _api$selectionToolbar3 === void 0 ? void 0 : _api$selectionToolbar3.toolbarDocking) === 'none' && editorExperiment('platform_editor_controls', 'variant1', {
          exposure: true
        })) {
          const toolbarCustom = {
            type: 'custom',
            render: (_view, _idx, dispatchAnalyticsEvent) => /*#__PURE__*/React.createElement(FloatingToolbarHighlightColor, {
              dispatchAnalyticsEvent: dispatchAnalyticsEvent,
              pluginInjectionApi: api
            }),
            fallback: []
          };
          const rank = editorExperiment('platform_editor_controls', 'variant1') ? 5 : -9;
          return {
            rank,
            isToolbarAbove: true,
            items: [toolbarCustom],
            pluginName: 'highlight'
          };
        } else {
          return undefined;
        }
      }
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
};