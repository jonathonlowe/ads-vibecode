import { useCallback, useEffect, useRef } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { useMediaClient } from '../MediaClientProvider';
import { getCopyIntentErrorPayload, getCopyIntentSuccessPayload } from './copyIntentAnalytics';
import { getDocument } from './getDocument';
function useCurrentValueRef(value) {
  const ref = useRef(value);
  ref.current = value;
  return ref;
}
export const useCopyIntent = (id, options = {}) => {
  const mediaClient = useMediaClient();
  const innerRef = useRef(null);
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const registerCopyIntentRef = useCurrentValueRef(async () => {
    try {
      await mediaClient.file.registerCopyIntent(id, options.collectionName);
      createAnalyticsEvent(getCopyIntentSuccessPayload(id));
    } catch (err) {
      createAnalyticsEvent(getCopyIntentErrorPayload(err, id));
    }
  });
  const copyNodeRef = useCallback(elem => {
    innerRef.current = elem;
    if (fg('platform_media_cross_client_copy')) {
      elem === null || elem === void 0 ? void 0 : elem.addEventListener('contextmenu', () => {
        registerCopyIntentRef.current();
      });
    }
  }, [registerCopyIntentRef]);
  const onGlobalCopy = useCallback(async () => {
    var _getSelection;
    const currentCopyTarget = innerRef.current;
    const currentSelectionContainsNode = currentCopyTarget && ((_getSelection = getSelection()) === null || _getSelection === void 0 ? void 0 : _getSelection.containsNode(currentCopyTarget, true));
    if (currentSelectionContainsNode) {
      registerCopyIntentRef.current();
    }
  }, [registerCopyIntentRef]);
  useEffect(() => {
    if (fg('platform_media_cross_client_copy')) {
      var _getDocument;
      (_getDocument = getDocument()) === null || _getDocument === void 0 ? void 0 : _getDocument.addEventListener('copy', onGlobalCopy);
    }
    return () => {
      var _getDocument2;
      return (_getDocument2 = getDocument()) === null || _getDocument2 === void 0 ? void 0 : _getDocument2.removeEventListener('copy', onGlobalCopy);
    };
  }, [onGlobalCopy]);
  return {
    copyNodeRef
  };
};