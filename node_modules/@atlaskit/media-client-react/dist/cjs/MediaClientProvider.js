"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMediaClient = exports.mediaClientsMap = exports.getMediaClient = exports.MediaClientProvider = exports.MediaClientContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _mediaClient = require("@atlaskit/media-client");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MediaClientContext = exports.MediaClientContext = /*#__PURE__*/_react.default.createContext(undefined);
var mediaClientsMap = exports.mediaClientsMap = new Map();
var getMediaClient = exports.getMediaClient = function getMediaClient(mediaClientConfig) {
  // The Provider defines mediaClientConfig as required,
  // but integrators may skip it when using Media Card to display external images
  // i.e. a Media Client is not needed.
  // An empty mediaClientConfig object `{}` won't fall into this case,
  // but that case is handled internally by Media Client.
  if (!mediaClientConfig) {
    return new _mediaClient.MediaClient({
      authProvider: function authProvider() {
        return Promise.resolve({
          clientId: '',
          token: '',
          baseUrl: ''
        });
      }
    });
  }
  var mediaClient = mediaClientsMap.get(mediaClientConfig);
  if (!mediaClient) {
    mediaClient = new _mediaClient.MediaClient(mediaClientConfig);
    mediaClientsMap.set(mediaClientConfig, mediaClient);
  }
  return mediaClient;
};
var MediaClientProvider = exports.MediaClientProvider = function MediaClientProvider(_ref) {
  var children = _ref.children,
    clientConfig = _ref.clientConfig;
  var mediaClient = (0, _react.useMemo)(function () {
    return getMediaClient(clientConfig);
  }, [clientConfig]);
  return /*#__PURE__*/_react.default.createElement(MediaClientContext.Provider, {
    value: mediaClient
  }, children);
};
var useMediaClient = exports.useMediaClient = function useMediaClient() {
  var mediaClient = _react.default.useContext(MediaClientContext);
  if (!mediaClient) {
    throw new Error('No MediaClient set, use MediaClientProvider to set one');
  }
  return mediaClient;
};