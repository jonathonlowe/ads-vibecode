"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyIntent = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _MediaClientProvider = require("../MediaClientProvider");
var _copyIntentAnalytics = require("./copyIntentAnalytics");
var _getDocument3 = require("./getDocument");
function useCurrentValueRef(value) {
  var ref = (0, _react.useRef)(value);
  ref.current = value;
  return ref;
}
var useCopyIntent = exports.useCopyIntent = function useCopyIntent(id) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mediaClient = (0, _MediaClientProvider.useMediaClient)();
  var innerRef = (0, _react.useRef)(null);
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var registerCopyIntentRef = useCurrentValueRef( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return mediaClient.file.registerCopyIntent(id, options.collectionName);
        case 3:
          createAnalyticsEvent((0, _copyIntentAnalytics.getCopyIntentSuccessPayload)(id));
          _context.next = 9;
          break;
        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](0);
          createAnalyticsEvent((0, _copyIntentAnalytics.getCopyIntentErrorPayload)(_context.t0, id));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 6]]);
  })));
  var copyNodeRef = (0, _react.useCallback)(function (elem) {
    innerRef.current = elem;
    if ((0, _platformFeatureFlags.fg)('platform_media_cross_client_copy')) {
      elem === null || elem === void 0 || elem.addEventListener('contextmenu', function () {
        registerCopyIntentRef.current();
      });
    }
  }, [registerCopyIntentRef]);
  var onGlobalCopy = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
    var _getSelection;
    var currentCopyTarget, currentSelectionContainsNode;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          currentCopyTarget = innerRef.current;
          currentSelectionContainsNode = currentCopyTarget && ((_getSelection = getSelection()) === null || _getSelection === void 0 ? void 0 : _getSelection.containsNode(currentCopyTarget, true));
          if (currentSelectionContainsNode) {
            registerCopyIntentRef.current();
          }
        case 3:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })), [registerCopyIntentRef]);
  (0, _react.useEffect)(function () {
    if ((0, _platformFeatureFlags.fg)('platform_media_cross_client_copy')) {
      var _getDocument;
      (_getDocument = (0, _getDocument3.getDocument)()) === null || _getDocument === void 0 || _getDocument.addEventListener('copy', onGlobalCopy);
    }
    return function () {
      var _getDocument2;
      return (_getDocument2 = (0, _getDocument3.getDocument)()) === null || _getDocument2 === void 0 ? void 0 : _getDocument2.removeEventListener('copy', onGlobalCopy);
    };
  }, [onGlobalCopy]);
  return {
    copyNodeRef: copyNodeRef
  };
};