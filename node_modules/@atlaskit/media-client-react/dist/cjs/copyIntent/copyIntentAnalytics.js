"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCopyIntentSuccessPayload = exports.getCopyIntentErrorPayload = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _mediaClient = require("@atlaskit/media-client");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getRequestErrorDetails = function getRequestErrorDetails(err) {
  if ((0, _mediaClient.isRequestError)(err)) {
    var _err$metadata, _err$metadata2, _err$metadata3, _err$metadata4;
    return {
      request: {
        statusCode: (_err$metadata = err.metadata) === null || _err$metadata === void 0 ? void 0 : _err$metadata.statusCode,
        traceContext: (_err$metadata2 = err.metadata) === null || _err$metadata2 === void 0 ? void 0 : _err$metadata2.traceContext,
        mediaEnv: (_err$metadata3 = err.metadata) === null || _err$metadata3 === void 0 ? void 0 : _err$metadata3.mediaEnv,
        mediaRegion: (_err$metadata4 = err.metadata) === null || _err$metadata4 === void 0 ? void 0 : _err$metadata4.mediaRegion
      }
    };
  }
};
var getCopyIntentErrorPayload = exports.getCopyIntentErrorPayload = function getCopyIntentErrorPayload(error) {
  var fileId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return {
    eventType: 'operational',
    action: 'failed',
    actionSubject: 'mediaCopyIntent',
    failReason: (0, _mediaClient.isRequestError)(error) ? error.reason : 'nativeError',
    attributes: _objectSpread({
      status: 'fail',
      fileAttributes: {
        fileId: fileId
      }
    }, getRequestErrorDetails(error))
  };
};
var getCopyIntentSuccessPayload = exports.getCopyIntentSuccessPayload = function getCopyIntentSuccessPayload() {
  var fileId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return {
    eventType: 'operational',
    action: 'succeeded',
    actionSubject: 'mediaCopyIntent',
    attributes: {
      fileAttributes: {
        fileId: fileId
      }
    }
  };
};