import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useMemo } from 'react';
import { MediaClient } from '@atlaskit/media-client';
import { createMediaStore } from '@atlaskit/media-state';
import { MediaClientContext } from '../MediaClientProvider';
export var mockedMediaClientConfig = {
  authProvider: function () {
    var _authProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", {
              clientId: 'MockedMediaClientProvider-client-id',
              token: 'MockedMediaClientProvider-token',
              baseUrl: 'MockedMediaClientProvider-service-host'
            });
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function authProvider() {
      return _authProvider.apply(this, arguments);
    }
    return authProvider;
  }()
};
export var MockedMediaClientProvider = function MockedMediaClientProvider(_ref) {
  var children = _ref.children,
    mediaStore = _ref.mediaStore,
    mockedMediaApi = _ref.mockedMediaApi,
    mediaClientConfig = _ref.mediaClientConfig;
  // WARNING: when mediaStore is updated externally, it gets out of sync with FileStreamCache. This resutls in unexpected behaviour.
  var currentStore = useMemo(function () {
    return mediaStore || createMediaStore();
  }, [mediaStore]);
  var resolvedMediaClientConfig = useMemo(function () {
    return _objectSpread(_objectSpread({}, mockedMediaClientConfig), mediaClientConfig);
  }, [mediaClientConfig]);
  var mediaClient = useMemo(function () {
    return new MediaClient(resolvedMediaClientConfig, currentStore, mockedMediaApi);
  }, [mockedMediaApi, currentStore, resolvedMediaClientConfig]);
  return /*#__PURE__*/React.createElement(MediaClientContext.Provider, {
    value: mediaClient
  }, children);
};