import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useCallback, useEffect, useRef } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { useMediaClient } from '../MediaClientProvider';
import { getCopyIntentErrorPayload, getCopyIntentSuccessPayload } from './copyIntentAnalytics';
import { getDocument } from './getDocument';
function useCurrentValueRef(value) {
  var ref = useRef(value);
  ref.current = value;
  return ref;
}
export var useCopyIntent = function useCopyIntent(id) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mediaClient = useMediaClient();
  var innerRef = useRef(null);
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var registerCopyIntentRef = useCurrentValueRef( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return mediaClient.file.registerCopyIntent(id, options.collectionName);
        case 3:
          createAnalyticsEvent(getCopyIntentSuccessPayload(id));
          _context.next = 9;
          break;
        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](0);
          createAnalyticsEvent(getCopyIntentErrorPayload(_context.t0, id));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 6]]);
  })));
  var copyNodeRef = useCallback(function (elem) {
    innerRef.current = elem;
    if (fg('platform_media_cross_client_copy')) {
      elem === null || elem === void 0 || elem.addEventListener('contextmenu', function () {
        registerCopyIntentRef.current();
      });
    }
  }, [registerCopyIntentRef]);
  var onGlobalCopy = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _getSelection;
    var currentCopyTarget, currentSelectionContainsNode;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          currentCopyTarget = innerRef.current;
          currentSelectionContainsNode = currentCopyTarget && ((_getSelection = getSelection()) === null || _getSelection === void 0 ? void 0 : _getSelection.containsNode(currentCopyTarget, true));
          if (currentSelectionContainsNode) {
            registerCopyIntentRef.current();
          }
        case 3:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })), [registerCopyIntentRef]);
  useEffect(function () {
    if (fg('platform_media_cross_client_copy')) {
      var _getDocument;
      (_getDocument = getDocument()) === null || _getDocument === void 0 || _getDocument.addEventListener('copy', onGlobalCopy);
    }
    return function () {
      var _getDocument2;
      return (_getDocument2 = getDocument()) === null || _getDocument2 === void 0 ? void 0 : _getDocument2.removeEventListener('copy', onGlobalCopy);
    };
  }, [onGlobalCopy]);
  return {
    copyNodeRef: copyNodeRef
  };
};