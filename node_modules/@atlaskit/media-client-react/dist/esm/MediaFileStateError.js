import _createClass from "@babel/runtime/helpers/createClass";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
// TODO: deprecate https://product-fabric.atlassian.net/browse/CXP-4669
/** Will be deprecated. Use Media Client `toCommonMediaClientError` instead  */
export var MediaFileStateError = /*#__PURE__*/function (_Error) {
  function MediaFileStateError(id, reason) {
    var _this;
    var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var details = arguments.length > 3 ? arguments[3] : undefined;
    _classCallCheck(this, MediaFileStateError);
    _this = _callSuper(this, MediaFileStateError, [reason]);
    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    _this.id = id;
    _this.reason = reason;
    _this.message = message;
    _this.details = details;
    Object.setPrototypeOf(_this, (this instanceof MediaFileStateError ? this.constructor : void 0).prototype);

    // https://v8.dev/docs/stack-trace-api
    if ('captureStackTrace' in Error) {
      Error.captureStackTrace(_this, this instanceof MediaFileStateError ? this.constructor : void 0);
    }
    return _this;
  }
  _inherits(MediaFileStateError, _Error);
  return _createClass(MediaFileStateError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export function isMediaFileStateError(err) {
  return err instanceof Error && 'id' in err;
}
export function getFileStateErrorReason(err) {
  var _err$details;
  return isMediaFileStateError(err) ? (_err$details = err.details) === null || _err$details === void 0 ? void 0 : _err$details.reason : 'unknown';
}