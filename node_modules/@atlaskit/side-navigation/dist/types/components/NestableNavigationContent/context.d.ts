import { type MutableRefObject } from 'react';
/**
 * @internal
 */
export interface NestedContextValue {
    currentStackId: string;
    onNest: (id: string) => void;
    onUnNest: () => void;
    stack: string[];
    parentId: string;
    backButton?: React.ReactNode;
    childIds: MutableRefObject<Set<string>>;
    forceShowTopScrollIndicator: boolean | undefined;
    activeParentId?: string;
    goBackButtonRef?: React.MutableRefObject<HTMLButtonElement | null>;
    isDefaultFocusControl?: boolean;
    focusGoBackButton?: boolean;
}
/**
 * @internal
 */
export declare const NestedContext: import("react").Context<NestedContextValue | undefined>;
export declare const useNestedContext: () => NestedContextValue;
/**
 * Used by children of the NestableNavigationContent component to see if they should render or not.
 * If `shouldRender` returns `true` - return your nodes.
 * If it returns `false` - either return `null` or `children` if you have children.
 */
export declare const useShouldNestedElementRender: () => {
    shouldRender: boolean;
};
