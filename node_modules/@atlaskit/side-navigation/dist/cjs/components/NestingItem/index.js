/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _arrowRightArrowRightCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/arrow-right--arrow-right-circle"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _colors = require("@atlaskit/theme/colors");
var _index = require("../index");
var _NestableNavigationContent = require("../NestableNavigationContent");
var _context = require("../NestableNavigationContent/context");
var _hooks = require("../utils/hooks");
var _excluded = ["children", "iconAfter", "title", "onClick", "className", "isDisabled", "isSelected", "id", "component", "testId"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var styles = {
  iconContainer: "_1e0c1nu9",
  nestingItem: "_udl3glyw _kqsfglyw _udrwglyw _13qvglyw _9mqr1kw7 _povs1kw7 _uv2d1kw7 _atks1kw7",
  nestingItemDisabled: "_1c06idpf _udl3glyw"
};

// Doesn't extend from ButtonItemProps because it blows ERT up.

/**
 * NestingItem will render itself differently depending in what context it is rendered in.
 * When not open - it will render itself as an item.
 * When open - it will render its children.
 */
var NestingItem = function NestingItem(props) {
  var children = props.children,
    iconAfter = props.iconAfter,
    title = props.title,
    onClick = props.onClick,
    className = props.className,
    isDisabled = props.isDisabled,
    isSelected = props.isSelected,
    id = props.id,
    component = props.component,
    testId = props.testId,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useNestedContext = (0, _context.useNestedContext)(),
    currentStackId = _useNestedContext.currentStackId,
    onNest = _useNestedContext.onNest,
    onUnNest = _useNestedContext.onUnNest,
    contextualBackButton = _useNestedContext.backButton,
    stack = _useNestedContext.stack,
    childIds = _useNestedContext.childIds,
    forceShowTopScrollIndicator = _useNestedContext.forceShowTopScrollIndicator,
    activeParentId = _useNestedContext.activeParentId,
    goBackButtonRef = _useNestedContext.goBackButtonRef,
    isDefaultFocusControl = _useNestedContext.isDefaultFocusControl,
    focusGoBackButton = _useNestedContext.focusGoBackButton;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isInteracted = _useState2[0],
    setIsInteracted = _useState2[1];
  var parentItemRef = (0, _react.useRef)(null);

  // To avoid error we need to make sure that the component is wrapped in ForwardRef
  var isForwardRefCheck = function isForwardRefCheck(component) {
    var _component$prototype;
    if (component !== null && component !== void 0 && (_component$prototype = component.prototype) !== null && _component$prototype !== void 0 && _component$prototype.isReactComponent) {
      return false;
    }
    return (component === null || component === void 0 ? void 0 : component.$$typeof) === Symbol.for('react.forward_ref');
  };
  var shouldFocus = isDefaultFocusControl && (0, _platformFeatureFlags.fg)('platform-side-navigation-keyboard-focus');
  var backButtonRef = shouldFocus ? goBackButtonRef : null;
  var activeParentRef = shouldFocus ? parentItemRef : null;
  (0, _react.useEffect)(function () {
    if (shouldFocus) {
      if (activeParentId === id) {
        var _parentItemRef$curren;
        parentItemRef === null || parentItemRef === void 0 || (_parentItemRef$curren = parentItemRef.current) === null || _parentItemRef$curren === void 0 || _parentItemRef$curren.focus();
      }
      if (focusGoBackButton) {
        var _goBackButtonRef$curr;
        goBackButtonRef === null || goBackButtonRef === void 0 || (_goBackButtonRef$curr = goBackButtonRef.current) === null || _goBackButtonRef$curr === void 0 || _goBackButtonRef$curr.focus();
      }
    }
  }, [activeParentId, id, goBackButtonRef, focusGoBackButton, isDefaultFocusControl, shouldFocus]);
  var backButton = props.overrides && props.overrides.GoBackItem && props.overrides.GoBackItem.render && props.overrides.GoBackItem.render({
    onClick: onUnNest,
    testId: testId && "".concat(testId, "--go-back-item"),
    ref: backButtonRef
  }) || contextualBackButton;
  var context = (0, _react.useMemo)(function () {
    return {
      stack: stack,
      currentStackId: currentStackId,
      onNest: onNest,
      onUnNest: onUnNest,
      backButton: backButton,
      parentId: id,
      childIds: childIds,
      forceShowTopScrollIndicator: forceShowTopScrollIndicator,
      activeParentId: activeParentId,
      goBackButtonRef: goBackButtonRef,
      isDefaultFocusControl: isDefaultFocusControl,
      focusGoBackButton: focusGoBackButton
    };
  }, [stack, currentStackId, onNest, onUnNest, backButton, id, childIds, forceShowTopScrollIndicator, activeParentId, goBackButtonRef, isDefaultFocusControl, focusGoBackButton]);
  (0, _hooks.useChildIdsEffect)(childIds, id);
  var isNormalClick = function isNormalClick(e) {
    return !(e.button || e.metaKey || e.altKey || e.ctrlKey || e.shiftKey);
  };

  /**
   * We want both the on nest handler and the onclick handler to be called.
   * We create a wrapper function to call both.
   */
  var onClickHandler = (0, _react.useCallback)(function (e) {
    if (isInteracted) {
      // We return early if this has been interacted with because its assumed
      // this will be already exiting - so we don't want to double up the click.
      return;
    }

    // Avoid a nesting transition if a modifier key is detected during click.
    // @ts-expect-error - Argument of type 'MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>' is not assignable to parameter of type 'MouseEvent'
    if (isNormalClick(e)) {
      setIsInteracted(true);
      onNest(id);
    }
    onClick && onClick(e);
  }, [isInteracted, onClick, onNest, id]);
  if (currentStackId === id) {
    return /*#__PURE__*/_react.default.createElement(_context.NestedContext.Provider, {
      value: context
    }, stack.length >= 1 && /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      paddingBlock: "space.075",
      paddingInline: "space.100"
    }, backButton), /*#__PURE__*/_react.default.createElement(_index.NavigationContent, {
      testId: testId,
      showTopScrollIndicator: forceShowTopScrollIndicator || stack.length >= 1
    }, children));
  }
  if ([_NestableNavigationContent.ROOT_ID].concat((0, _toConsumableArray2.default)(stack)).includes(id)) {
    return children;
  }
  var componentProps = _objectSpread(_objectSpread({
    iconAfter: /*#__PURE__*/_react.default.createElement(_react.Fragment, null, iconAfter ? /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      xcss: styles.iconContainer,
      "data-custom-icon": true,
      as: "span"
    }, iconAfter) : null, /*#__PURE__*/_react.default.createElement(_compiled.Box, {
      "data-right-arrow": true,
      xcss: styles.iconContainer,
      as: "span"
    }, /*#__PURE__*/_react.default.createElement(_arrowRightArrowRightCircle.default, {
      testId: testId && "".concat(testId, "--item--right-arrow"),
      color: "currentColor",
      LEGACY_secondaryColor: "var(--ds-surface, ".concat(_colors.N10, ")"),
      label: ""
    }))),
    onClick: onClickHandler,
    isSelected: isSelected,
    isDisabled: isDisabled,
    testId: testId && "".concat(testId, "--item")
  }, rest), {}, {
    children: title
  });
  if (component) {
    return /*#__PURE__*/_react.default.createElement(_index.CustomItem, (0, _extends2.default)({
      ref: isForwardRefCheck(component) ? parentItemRef : null
    }, componentProps, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
      className: (0, _runtime.ax)([styles.nestingItem, isDisabled && styles.nestingItemDisabled, className])
      //@ts-expect-error TODO Fix legit TypeScript 3.9.6 improved inference error
      ,
      component: component
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_index.ButtonItem, (0, _extends2.default)({
    ref: activeParentRef
  }, componentProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: (0, _runtime.ax)([styles.nestingItem, isDisabled && styles.nestingItemDisabled, className])
  }));
};
var _default = exports.default = NestingItem;