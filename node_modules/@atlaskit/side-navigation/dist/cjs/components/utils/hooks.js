"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChildIdsEffect = exports.useChildIds = void 0;
var _react = require("react");
var _NestableNavigationContent = require("../NestableNavigationContent");
var useChildIds = exports.useChildIds = function useChildIds(currentStackId, committedStack, onUnknownNest) {
  var childIdsRef = (0, _react.useRef)(new Set());
  (0, _react.useEffect)(function () {
    // we are holding navigation item IDs in childIdsRef
    // check if the current displayed nav item (currentStackId) is in childIdsRef. if it's not, this means it's undefined
    if (currentStackId === _NestableNavigationContent.ROOT_ID || !childIdsRef.current.size || childIdsRef.current.has(currentStackId) || !onUnknownNest) {
      return;
    }
    onUnknownNest(committedStack || [currentStackId]);
  }, [currentStackId, committedStack, onUnknownNest]);
  return {
    childIdsRef: childIdsRef
  };
};
var useChildIdsEffect = exports.useChildIdsEffect = function useChildIdsEffect(childIds, id) {
  (0, _react.useEffect)(function () {
    if (!childIds || !childIds.current) {
      return;
    }
    if (!childIds.current.has(id)) {
      childIds.current.add(id);
    }
    return function () {
      // eslint-disable-next-line react-hooks/exhaustive-deps
      childIds.current.delete(id);
    };
    // childIds shouldn't change as it's a ref
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);
};