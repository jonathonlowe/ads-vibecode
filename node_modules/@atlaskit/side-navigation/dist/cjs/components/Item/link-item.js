"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _menu = require("@atlaskit/menu");
var _styles = require("../../common/styles");
var _context = require("../NestableNavigationContent/context");
var _excluded = ["cssFn", "href"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * __Link item__
 *
 * Renders an item wrapped in an anchor tag, useful when you have an item that
 * should change routes using native browser navigation. For SPA transitions use
 * a [custom item](https://atlassian.design/components/side-navigation/examples#custom-item)
 * with the respective router logic.
 *
 * - [Examples](https://atlassian.design/components/side-navigation/examples#link-item)
 * - [Code](https://atlassian.design/components/side-navigation/code)
 */
var LinkItem = /*#__PURE__*/(0, _react.forwardRef)(
// Type needed on props to extract types with extract react types.
function (_ref, ref) {
  var cssFn = _ref.cssFn,
    href = _ref.href,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useShouldNestedEleme = (0, _context.useShouldNestedElementRender)(),
    shouldRender = _useShouldNestedEleme.shouldRender;
  if (!shouldRender) {
    return null;
  }
  var cssOverride = (0, _styles.overrideStyleFunction)(_styles.baseSideNavItemStyle, cssFn);

  // Anchor content will be handled by LinkItem
  // eslint-disable-next-line @atlaskit/design-system/no-deprecated-apis, @repo/internal/react/no-unsafe-overrides, jsx-a11y/anchor-has-content
  return /*#__PURE__*/_react.default.createElement(_menu.LinkItem, (0, _extends2.default)({
    ref: ref,
    cssFn: cssOverride,
    href: href
  }, rest));
});
var _default = exports.default = LinkItem;