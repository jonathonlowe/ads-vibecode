import { useEffect } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { hideToolbar, showToolbar } from './editor-commands/commands';
import { createPlugin } from './pm-plugins/main';
import { pasteOptionsPluginKey, ToolbarDropdownOption } from './types/types';
import { buildToolbar, isToolbarVisible } from './ui/toolbar';
export const pasteOptionsToolbarPlugin = ({
  config,
  api
}) => {
  var _api$analytics;
  const editorAnalyticsAPI = api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  return {
    name: 'pasteOptionsToolbarPlugin',
    pmPlugins() {
      return [{
        name: 'pasteOptionsToolbarPlugin',
        plugin: ({
          dispatch
        }) => createPlugin(dispatch)
      }];
    },
    pluginsOptions: {
      floatingToolbar(state, intl) {
        const pastePluginState = pasteOptionsPluginKey.getState(state);
        if (pastePluginState.showToolbar) {
          return buildToolbar(state, intl, editorAnalyticsAPI);
        }
        return;
      }
    },
    usePluginHook({
      editorView
    }) {
      const {
        pasteState
      } = useSharedPluginState(api, ['paste']);
      const lastContentPasted = pasteState === null || pasteState === void 0 ? void 0 : pasteState.lastContentPasted;
      useEffect(() => {
        if (!lastContentPasted) {
          hideToolbar()(editorView.state, editorView.dispatch);
          return;
        }
        let selectedOption = ToolbarDropdownOption.None;
        if (!lastContentPasted.isPlainText) {
          selectedOption = ToolbarDropdownOption.RichText;
        } else if (lastContentPasted.isShiftPressed) {
          selectedOption = ToolbarDropdownOption.PlainText;
        } else {
          selectedOption = ToolbarDropdownOption.Markdown;
        }
        if (!isToolbarVisible(editorView.state, lastContentPasted)) {
          return;
        }
        showToolbar(lastContentPasted, selectedOption)(editorView.state, editorView.dispatch);
      }, [lastContentPasted, editorView]);
    }
  };
};