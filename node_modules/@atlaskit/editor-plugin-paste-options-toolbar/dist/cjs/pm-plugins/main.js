"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlugin = createPlugin;
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _model = require("@atlaskit/editor-prosemirror/model");
var _view = require("@atlaskit/editor-prosemirror/view");
var _commands = require("../editor-commands/commands");
var _types = require("../types/types");
var _constants = require("./constants");
var _pluginFactory = require("./plugin-factory");
function createPlugin(dispatch) {
  return new _safePlugin.SafePlugin({
    key: _types.pasteOptionsPluginKey,
    state: (0, _pluginFactory.createPluginState)(dispatch, {
      showToolbar: false,
      pasteStartPos: 0,
      pasteEndPos: 0,
      plaintext: '',
      isPlainText: false,
      highlightContent: false,
      highlightDecorationSet: _view.DecorationSet.empty,
      richTextSlice: _model.Slice.empty,
      selectedOption: _types.ToolbarDropdownOption.None
    }),
    view: function view(editorView) {
      return {
        update: function update(view, prevState) {
          return prevState;
        }
      };
    },
    props: {
      handleDOMEvents: {
        // Hide toolbar when clicked outside the editor
        blur: _commands.checkAndHideToolbar,
        // Hide toolbar when clicked anywhere within the editor, tr.getMeta('pointer') does not work if clicked on the same line after pasting so relying on mousedown event
        mousedown: _commands.checkAndHideToolbar
      },
      handleKeyDown: function handleKeyDown(view) {
        (0, _commands.checkAndHideToolbar)(view);
        return false;
      },
      decorations: function decorations(state) {
        var _pasteOptionsPluginKe, _pasteOptionsPluginKe2;
        var _ref = _types.pasteOptionsPluginKey.getState(state) || {},
          highlightContent = _ref.highlightContent,
          pasteStartPos = _ref.pasteStartPos;
        var decorationSet = (_pasteOptionsPluginKe = (_pasteOptionsPluginKe2 = _types.pasteOptionsPluginKey.getState(state)) === null || _pasteOptionsPluginKe2 === void 0 ? void 0 : _pasteOptionsPluginKe2.highlightDecorationSet) !== null && _pasteOptionsPluginKe !== void 0 ? _pasteOptionsPluginKe : _view.DecorationSet.empty;
        if (!highlightContent) {
          return decorationSet;
        }
        var selection = state.tr.selection;
        var pasteEndPos = selection.$anchor.pos;
        var highlightDecoration = _view.Decoration.inline(pasteStartPos, pasteEndPos, {
          class: _constants.TEXT_HIGHLIGHT_CLASS
        }, {
          key: _constants.PASTE_HIGHLIGHT_DECORATION_KEY
        });
        return decorationSet.add(state.doc, [highlightDecoration]);
      }
    }
  });
}