"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPluginState = exports.createPluginState = exports.createCommand = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@atlaskit/editor-common/utils");
var _actions = require("../editor-actions/actions");
var _types = require("../types/types");
var _constants = require("./constants");
var _reducer = require("./reducer");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _pluginFactory = (0, _utils.pluginFactory)(_types.pasteOptionsPluginKey, _reducer.reducer, {
    mapping: function mapping(tr, pluginState) {
      if (!tr.docChanged || !pluginState.showToolbar) {
        return pluginState;
      }
      var oldPasteStartPos = pluginState.pasteStartPos;
      var oldPasteEndPos = pluginState.pasteEndPos;
      var newPasteStartPos = tr.mapping.map(oldPasteStartPos);
      var newPasteEndPos = tr.mapping.map(oldPasteEndPos);

      //this is true when user changes format from the toolbar.
      //only change pasteEndPos in this case
      if (changedFormatFromToolbar(tr)) {
        return _objectSpread(_objectSpread({}, pluginState), {}, {
          pasteEndPos: newPasteEndPos
        });
      }
      if (oldPasteStartPos === newPasteStartPos && oldPasteEndPos === newPasteEndPos) {
        return pluginState;
      }
      return _objectSpread(_objectSpread({}, pluginState), {}, {
        pasteStartPos: newPasteStartPos,
        pasteEndPos: newPasteEndPos
      });
    },
    onSelectionChanged: function onSelectionChanged(tr, pluginState) {
      // Detect click outside the editor
      if (tr.getMeta('outsideProsemirrorEditorClicked')) {
        return _objectSpread(_objectSpread({}, pluginState), {}, {
          showToolbar: false,
          highlightContent: false
        });
      }
      return pluginState;
    }
  }),
  createPluginState = exports.createPluginState = _pluginFactory.createPluginState,
  createCommand = exports.createCommand = _pluginFactory.createCommand,
  getPluginState = exports.getPluginState = _pluginFactory.getPluginState;
var changedFormatFromToolbar = function changedFormatFromToolbar(tr) {
  var meta = tr.getMeta(_constants.PASTE_OPTIONS_META_ID);
  if (meta && meta.type === _actions.PastePluginActionTypes.CHANGE_FORMAT) {
    return true;
  }
  return false;
};