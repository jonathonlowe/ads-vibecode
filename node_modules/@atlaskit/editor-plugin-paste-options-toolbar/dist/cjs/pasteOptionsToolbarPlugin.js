"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pasteOptionsToolbarPlugin = void 0;
var _react = require("react");
var _hooks = require("@atlaskit/editor-common/hooks");
var _commands = require("./editor-commands/commands");
var _main = require("./pm-plugins/main");
var _types = require("./types/types");
var _toolbar = require("./ui/toolbar");
var pasteOptionsToolbarPlugin = exports.pasteOptionsToolbarPlugin = function pasteOptionsToolbarPlugin(_ref) {
  var _api$analytics;
  var config = _ref.config,
    api = _ref.api;
  var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  return {
    name: 'pasteOptionsToolbarPlugin',
    pmPlugins: function pmPlugins() {
      return [{
        name: 'pasteOptionsToolbarPlugin',
        plugin: function plugin(_ref2) {
          var dispatch = _ref2.dispatch;
          return (0, _main.createPlugin)(dispatch);
        }
      }];
    },
    pluginsOptions: {
      floatingToolbar: function floatingToolbar(state, intl) {
        var pastePluginState = _types.pasteOptionsPluginKey.getState(state);
        if (pastePluginState.showToolbar) {
          return (0, _toolbar.buildToolbar)(state, intl, editorAnalyticsAPI);
        }
        return;
      }
    },
    usePluginHook: function usePluginHook(_ref3) {
      var editorView = _ref3.editorView;
      var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['paste']),
        pasteState = _useSharedPluginState.pasteState;
      var lastContentPasted = pasteState === null || pasteState === void 0 ? void 0 : pasteState.lastContentPasted;
      (0, _react.useEffect)(function () {
        if (!lastContentPasted) {
          (0, _commands.hideToolbar)()(editorView.state, editorView.dispatch);
          return;
        }
        var selectedOption = _types.ToolbarDropdownOption.None;
        if (!lastContentPasted.isPlainText) {
          selectedOption = _types.ToolbarDropdownOption.RichText;
        } else if (lastContentPasted.isShiftPressed) {
          selectedOption = _types.ToolbarDropdownOption.PlainText;
        } else {
          selectedOption = _types.ToolbarDropdownOption.Markdown;
        }
        if (!(0, _toolbar.isToolbarVisible)(editorView.state, lastContentPasted)) {
          return;
        }
        (0, _commands.showToolbar)(lastContentPasted, selectedOption)(editorView.state, editorView.dispatch);
      }, [lastContentPasted, editorView]);
    }
  };
};