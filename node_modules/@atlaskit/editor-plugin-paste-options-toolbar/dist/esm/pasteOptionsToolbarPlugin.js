import { useEffect } from 'react';
import { useSharedPluginState } from '@atlaskit/editor-common/hooks';
import { hideToolbar, showToolbar } from './editor-commands/commands';
import { createPlugin } from './pm-plugins/main';
import { pasteOptionsPluginKey, ToolbarDropdownOption } from './types/types';
import { buildToolbar, isToolbarVisible } from './ui/toolbar';
export var pasteOptionsToolbarPlugin = function pasteOptionsToolbarPlugin(_ref) {
  var _api$analytics;
  var config = _ref.config,
    api = _ref.api;
  var editorAnalyticsAPI = api === null || api === void 0 || (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions;
  return {
    name: 'pasteOptionsToolbarPlugin',
    pmPlugins: function pmPlugins() {
      return [{
        name: 'pasteOptionsToolbarPlugin',
        plugin: function plugin(_ref2) {
          var dispatch = _ref2.dispatch;
          return createPlugin(dispatch);
        }
      }];
    },
    pluginsOptions: {
      floatingToolbar: function floatingToolbar(state, intl) {
        var pastePluginState = pasteOptionsPluginKey.getState(state);
        if (pastePluginState.showToolbar) {
          return buildToolbar(state, intl, editorAnalyticsAPI);
        }
        return;
      }
    },
    usePluginHook: function usePluginHook(_ref3) {
      var editorView = _ref3.editorView;
      var _useSharedPluginState = useSharedPluginState(api, ['paste']),
        pasteState = _useSharedPluginState.pasteState;
      var lastContentPasted = pasteState === null || pasteState === void 0 ? void 0 : pasteState.lastContentPasted;
      useEffect(function () {
        if (!lastContentPasted) {
          hideToolbar()(editorView.state, editorView.dispatch);
          return;
        }
        var selectedOption = ToolbarDropdownOption.None;
        if (!lastContentPasted.isPlainText) {
          selectedOption = ToolbarDropdownOption.RichText;
        } else if (lastContentPasted.isShiftPressed) {
          selectedOption = ToolbarDropdownOption.PlainText;
        } else {
          selectedOption = ToolbarDropdownOption.Markdown;
        }
        if (!isToolbarVisible(editorView.state, lastContentPasted)) {
          return;
        }
        showToolbar(lastContentPasted, selectedOption)(editorView.state, editorView.dispatch);
      }, [lastContentPasted, editorView]);
    }
  };
};