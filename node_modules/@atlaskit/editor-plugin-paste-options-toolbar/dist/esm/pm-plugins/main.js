import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { Slice } from '@atlaskit/editor-prosemirror/model';
import { Decoration, DecorationSet } from '@atlaskit/editor-prosemirror/view';
import { checkAndHideToolbar } from '../editor-commands/commands';
import { pasteOptionsPluginKey, ToolbarDropdownOption } from '../types/types';
import { PASTE_HIGHLIGHT_DECORATION_KEY, TEXT_HIGHLIGHT_CLASS } from './constants';
import { createPluginState } from './plugin-factory';
export function createPlugin(dispatch) {
  return new SafePlugin({
    key: pasteOptionsPluginKey,
    state: createPluginState(dispatch, {
      showToolbar: false,
      pasteStartPos: 0,
      pasteEndPos: 0,
      plaintext: '',
      isPlainText: false,
      highlightContent: false,
      highlightDecorationSet: DecorationSet.empty,
      richTextSlice: Slice.empty,
      selectedOption: ToolbarDropdownOption.None
    }),
    view: function view(editorView) {
      return {
        update: function update(view, prevState) {
          return prevState;
        }
      };
    },
    props: {
      handleDOMEvents: {
        // Hide toolbar when clicked outside the editor
        blur: checkAndHideToolbar,
        // Hide toolbar when clicked anywhere within the editor, tr.getMeta('pointer') does not work if clicked on the same line after pasting so relying on mousedown event
        mousedown: checkAndHideToolbar
      },
      handleKeyDown: function handleKeyDown(view) {
        checkAndHideToolbar(view);
        return false;
      },
      decorations: function decorations(state) {
        var _pasteOptionsPluginKe, _pasteOptionsPluginKe2;
        var _ref = pasteOptionsPluginKey.getState(state) || {},
          highlightContent = _ref.highlightContent,
          pasteStartPos = _ref.pasteStartPos;
        var decorationSet = (_pasteOptionsPluginKe = (_pasteOptionsPluginKe2 = pasteOptionsPluginKey.getState(state)) === null || _pasteOptionsPluginKe2 === void 0 ? void 0 : _pasteOptionsPluginKe2.highlightDecorationSet) !== null && _pasteOptionsPluginKe !== void 0 ? _pasteOptionsPluginKe : DecorationSet.empty;
        if (!highlightContent) {
          return decorationSet;
        }
        var selection = state.tr.selection;
        var pasteEndPos = selection.$anchor.pos;
        var highlightDecoration = Decoration.inline(pasteStartPos, pasteEndPos, {
          class: TEXT_HIGHLIGHT_CLASS
        }, {
          key: PASTE_HIGHLIGHT_DECORATION_KEY
        });
        return decorationSet.add(state.doc, [highlightDecoration]);
      }
    }
  });
}