"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.itemIcon = exports.TypeAheadListItem = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _reactIntlNext = require("react-intl-next");
var _hooks = require("@atlaskit/editor-common/hooks");
var _quickInsert = require("@atlaskit/editor-common/quick-insert");
var _typeAhead = require("@atlaskit/editor-common/type-ahead");
var _editorSharedStyles = require("@atlaskit/editor-shared-styles");
var _shortcut = require("@atlaskit/editor-shared-styles/shortcut");
var _menu = require("@atlaskit/menu");
var _colors = require("@atlaskit/theme/colors");
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
var itemIcon = exports.itemIcon = (0, _react2.css)({
  width: "var(--ds-space-500, 40px)",
  height: "var(--ds-space-500, 40px)",
  overflow: 'hidden',
  border: "1px solid ".concat("var(--ds-border, rgba(223, 225, 229, 0.5))") /* N60 at 50% */,
  borderRadius: "var(--ds-border-radius, 3px)",
  boxSizing: 'border-box',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  div: {
    width: "var(--ds-space-500, 40px)",
    height: "var(--ds-space-500, 40px)"
  }
});
var itemIconSize = (0, _react2.css)({
  width: "var(--ds-space-400, 32px)",
  height: "var(--ds-space-400, 32px)",
  // Icon svgs may contain nested svg, which are likely smaller than 32px
  // Hence only change the parent svg
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors
  'svg:first-of-type': {
    width: "var(--ds-space-400, 32px)",
    height: "var(--ds-space-400, 32px)"
  },
  // AI icons may contain div as container of the icon
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors
  div: {
    width: "var(--ds-space-400, 32px)",
    height: "var(--ds-space-400, 32px)"
  }
});

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var itemBody = (0, _react2.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: nowrap;\n\tjustify-content: space-between;\n"])));
var itemText = (0, _react2.css)({
  whiteSpace: 'initial',
  color: "".concat("var(--ds-text, ".concat(_colors.N800, ")"))
});
var itemTitle = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: '1.4'
});
var itemTitleOverride = (0, _react2.css)({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)"
});
var itemDescription = (0, _react2.css)({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values, @atlaskit/design-system/use-tokens-typography
  fontSize: "".concat((0, _editorSharedStyles.relativeFontSizeToBase16)(12), ";"),
  color: "".concat("var(--ds-text-subtlest, ".concat(_colors.N200, ")"), ";"),
  marginTop: "var(--ds-space-050, 4px)".concat(";")
});
var itemDescriptionOverride = (0, _react2.css)({
  font: "var(--ds-font-body-small, normal 400 11px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, \"Helvetica Neue\", sans-serif)",
  marginTop: 0
});

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression, @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
var itemAfter = (0, _react2.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2.default)(["\n\tflex: 0 0 auto;\n"])));

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Ignored via go/DSP-18766
var customRenderItemDivStyle = (0, _react2.css)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2.default)(["\n\toverflow: hidden;\n\t&:focus {\n\t\tbox-shadow: inset 2px 0px 0px ", ";\n\t\tbackground-color: ", ";\n\t\toutline: none;\n\t}\n"])), "var(--ds-border-focused, ".concat(_colors.B400, ")"), "var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30, ")"));

/**
 * This CSS emulates the desired behaviour with :focus-visible for firefox.
 * Firefox unfortunately does not register keyboard focus if user mouseDown and drag a typeahead item
 * resulting in focus-visible style not drawn.
 */
var selectionFrame = {
  '& > button:focus': {
    boxShadow: "inset 2px 0px 0px ".concat("var(--ds-border-focused, ".concat(_colors.B400, ")"), ";"),
    backgroundColor: "".concat("var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30, ")")),
    outline: 'none',
    '&:active': {
      boxShadow: 'none'
    }
  },
  '& > button:hover': {
    backgroundColor: 'inherit',
    outline: 'none'
  }
};

// eslint-disable-next-line @atlaskit/design-system/no-css-tagged-template-expression -- Ignored via go/DSP-18766
var selectedStyle = (0, _react2.css)(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2.default)(["\n\tbackground-color: ", ";\n\tbox-shadow: inset 2px 0px 0px ", ";\n"])), "var(--ds-background-neutral-subtle-hovered, ".concat(_colors.N30, ")"), "var(--ds-border-focused, ".concat(_colors.B400, ")"));
var disabledStyle = (0, _react2.css)({
  color: "var(--ds-text-disabled, #091E424F)"
});
var FallbackIcon = /*#__PURE__*/_react.default.memo(function (_ref) {
  var label = _ref.label;
  return (0, _react2.jsx)(_quickInsert.IconFallback, null);
});
var noop = function noop() {};
var CustomItemComponentWrapper = /*#__PURE__*/_react.default.memo(function (props) {
  var customRenderItem = props.customRenderItem,
    isSelected = props.isSelected,
    itemIsDisabled = props.itemIsDisabled,
    ariaLabel = props.ariaLabel,
    itemsLength = props.itemsLength,
    customItemRef = props.customItemRef,
    insertSelectedItem = props.insertSelectedItem,
    itemIndex = props.itemIndex;
  var Comp = customRenderItem;
  var listItemClasses = (0, _react.useMemo)(function () {
    return [customRenderItemDivStyle, isSelected && !itemIsDisabled && selectedStyle, itemIsDisabled && disabledStyle];
  }, [isSelected, itemIsDisabled]);
  return (0, _react2.jsx)("div", {
    "aria-selected": isSelected,
    role: "option",
    "aria-label": ariaLabel,
    "aria-setsize": itemsLength,
    "aria-posinset": itemIndex,
    tabIndex: 0
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    ,
    css: listItemClasses
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: "ak-typeahead-item ".concat(isSelected ? 'typeahead-selected-item' : '')
    //CSS classes added for test cases purpose
    ,
    ref: customItemRef
  }, (0, _react2.jsx)("div", {
    "aria-hidden": true
  }, (0, _react2.jsx)(Comp, {
    onClick: insertSelectedItem,
    isSelected: false //The selection styles are handled in the parent div instead. Hence isSelected is made false always.
    ,
    onHover: noop
  })));
});
var TypeAheadListItem = exports.TypeAheadListItem = /*#__PURE__*/_react.default.memo(function (_ref2) {
  var item = _ref2.item,
    itemsLength = _ref2.itemsLength,
    selectedIndex = _ref2.selectedIndex,
    onItemClick = _ref2.onItemClick,
    itemIndex = _ref2.itemIndex,
    ariaLabel = _ref2.ariaLabel,
    moreElementsInQuickInsertViewEnabled = _ref2.moreElementsInQuickInsertViewEnabled,
    api = _ref2.api,
    firstOnlineSupportedIndex = _ref2.firstOnlineSupportedIndex;
  var _useSharedPluginState = (0, _hooks.useSharedPluginState)(api, ['connectivity']),
    connectivityState = _useSharedPluginState.connectivityState;
  var isItemDisabled = function isItemDisabled(item) {
    var _item$isDisabledOffli;
    return (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && ((_item$isDisabledOffli = item === null || item === void 0 ? void 0 : item.isDisabledOffline) !== null && _item$isDisabledOffli !== void 0 ? _item$isDisabledOffli : false);
  };
  var itemIsDisabled = isItemDisabled(item);
  var isFirstEnabledIndex = (connectivityState === null || connectivityState === void 0 ? void 0 : connectivityState.mode) === 'offline' && itemIndex === firstOnlineSupportedIndex && selectedIndex === -1;

  /**
   * To select and highlight the first Item when no item is selected
   * However selectedIndex remains -1, So that user does not skip the first item when down arrow key is used from typeahead query(inputQuery.tsx)
   */
  var isSelected = false;
  // Feature gated - connectivity is only available on desktop and behind a feature gate on full page mode
  if (connectivityState === undefined) {
    isSelected = itemIndex === selectedIndex || selectedIndex === -1 && itemIndex === 0;
  } else {
    isSelected = itemIndex === selectedIndex || selectedIndex === -1 && (itemIndex === 0 || isFirstEnabledIndex) && !itemIsDisabled;
  }

  // Assistive text
  var intl = (0, _reactIntlNext.useIntl)();
  var descriptionText = item.description ? "".concat(item.description, ".") : '';
  var shortcutText = item.keyshortcut ? " ".concat(intl.formatMessage(_typeAhead.typeAheadListMessages.shortcutLabel), " ").concat(item.keyshortcut, ".") : '';
  var icon = item.icon,
    title = item.title,
    customRenderItem = item.render;
  var elementIcon = (0, _react.useMemo)(function () {
    return (0, _react2.jsx)("div", {
      css: [itemIcon, moreElementsInQuickInsertViewEnabled && itemIconSize]
    }, icon ? icon() : (0, _react2.jsx)(FallbackIcon, {
      label: title
    }));
  }, [icon, title, moreElementsInQuickInsertViewEnabled]);
  var insertSelectedItem = (0, _react.useCallback)(function () {
    if (itemIsDisabled) {
      return;
    }
    onItemClick(_typeAhead.SelectItemMode.SELECTED, itemIndex);
  }, [onItemClick, itemIndex, itemIsDisabled]);
  var customItemRef = _react.default.useRef(null);
  var buttonItemRef = _react.default.useRef(null);
  var shouldUpdateFocus = selectedIndex === itemIndex && !isFirstEnabledIndex;
  var listItemClasses = (0, _react.useMemo)(function () {
    return [selectionFrame, isSelected && !itemIsDisabled && selectedStyle];
  }, [isSelected, itemIsDisabled]);
  (0, _react.useLayoutEffect)(function () {
    if (shouldUpdateFocus) {
      var _customItemRef$curren;
      customItemRef === null || customItemRef === void 0 || (_customItemRef$curren = customItemRef.current) === null || _customItemRef$curren === void 0 || _customItemRef$curren.focus();
    }
  }, [customItemRef, shouldUpdateFocus]);
  (0, _react.useLayoutEffect)(function () {
    if (shouldUpdateFocus) {
      var _buttonItemRef$curren;
      buttonItemRef === null || buttonItemRef === void 0 || (_buttonItemRef$curren = buttonItemRef.current) === null || _buttonItemRef$curren === void 0 || _buttonItemRef$curren.focus();
    }
  }, [buttonItemRef, shouldUpdateFocus]);
  if (customRenderItem) {
    return (0, _react2.jsx)(CustomItemComponentWrapper, {
      itemIsDisabled: itemIsDisabled,
      customRenderItem: customRenderItem,
      isSelected: isSelected,
      ariaLabel: ariaLabel,
      itemsLength: itemsLength,
      customItemRef: customItemRef,
      insertSelectedItem: insertSelectedItem,
      itemIndex: itemIndex
    });
  }
  return (
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage -- Ignored via go/DSP-18766
    (0, _react2.jsx)("span", {
      css: listItemClasses
    }, (0, _react2.jsx)(_menu.ButtonItem, {
      onClick: insertSelectedItem,
      iconBefore: elementIcon,
      isSelected: isSelected,
      "aria-selected": isSelected,
      "aria-label": title
      // TODO: ED-26959 - aria-description is in draft for ARIA 1.3.
      // For now replace it with aria-describedby.
      // eslint-disable-next-line jsx-a11y/aria-props
      ,
      "aria-description": "".concat(descriptionText, " ").concat(shortcutText),
      "aria-setsize": itemsLength,
      "aria-posinset": itemIndex,
      role: "option",
      ref: buttonItemRef,
      isDisabled: itemIsDisabled
      // @ts-ignore
      ,
      css: listItemClasses
    }, (0, _react2.jsx)("div", {
      "aria-hidden": true
    }, (0, _react2.jsx)("div", {
      css: [itemText]
    }, (0, _react2.jsx)("div", {
      css: itemBody
    }, (0, _react2.jsx)("div", {
      css: [itemTitle, moreElementsInQuickInsertViewEnabled && itemTitleOverride, itemIsDisabled && disabledStyle]
    }, item.title), (0, _react2.jsx)("div", {
      css: itemAfter
    }, item.keyshortcut && (0, _react2.jsx)("div", {
      css: _shortcut.shortcutStyle
    }, item.keyshortcut))), (0, _react2.jsx)("div", {
      css: [itemDescription, moreElementsInQuickInsertViewEnabled && itemDescriptionOverride, itemIsDisabled && disabledStyle]
    }, item.description)))))
  );
});