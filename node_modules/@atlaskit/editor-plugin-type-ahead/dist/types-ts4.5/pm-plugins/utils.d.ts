import type { IntlShape } from 'react-intl-next';
import { type ExtractInjectionAPI, type TypeAheadItem } from '@atlaskit/editor-common/types';
import type { EditorState } from '@atlaskit/editor-prosemirror/state';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import { type TypeAheadPlugin } from '../typeAheadPluginType';
import type { TypeAheadHandler } from '../types';
export declare const isTypeAheadHandler: (handler: any) => handler is TypeAheadHandler;
/** Is a typeahead plugin open? */
export declare const isTypeAheadOpen: (editorState: EditorState) => boolean;
export declare const getPluginState: (editorState: EditorState) => import("../types").TypeAheadPluginState | undefined;
export declare const getTypeAheadHandler: (editorState: EditorState) => TypeAheadHandler | undefined;
export declare const getTypeAheadQuery: (editorState: EditorState) => string | undefined;
export declare const isTypeAheadAllowed: (state: EditorState) => boolean;
export declare const findHandler: (id: string, state: EditorState) => TypeAheadHandler | null;
export declare const skipForwardToSafeItem: ({ currentIndex, nextIndex, listSize, itemIsDisabled, }: {
    currentIndex: number;
    nextIndex: number;
    listSize: number;
    itemIsDisabled: (idx: number) => boolean;
}) => number;
export declare const skipBackwardToSafeItem: ({ currentIndex, nextIndex, listSize, itemIsDisabled, }: {
    currentIndex: number;
    nextIndex: number;
    listSize: number;
    itemIsDisabled: (idx: number) => boolean;
}) => number;
export declare const findHandlerByTrigger: ({ trigger, editorState, }: {
    trigger: string;
    editorState: EditorState;
}) => TypeAheadHandler | null;
type MoveSelectedIndexProps = {
    editorView: EditorView;
    direction: 'next' | 'previous';
    api: ExtractInjectionAPI<TypeAheadPlugin> | undefined;
};
export declare const moveSelectedIndex: ({ editorView, direction, api }: MoveSelectedIndexProps) => () => void;
type TypeAheadAssistiveLabels = {
    popupAriaLabel: string;
    listItemAriaLabel?: string;
};
export declare const getTypeAheadListAriaLabels: (trigger: string | undefined, intl: IntlShape, item?: TypeAheadItem) => TypeAheadAssistiveLabels;
export {};
