import type { TypeAheadItem } from '@atlaskit/editor-common/provider-factory';
import { SelectItemMode } from '@atlaskit/editor-common/type-ahead';
import type { Command } from '@atlaskit/editor-common/types';
import type { EditorView } from '@atlaskit/editor-prosemirror/view';
import type { TypeAheadHandler, TypeAheadInputMethod } from '../types';
type CloseOptions = {
    insertCurrentQueryAsRawText: boolean;
    attachCommand?: Command;
};
type InsertItemProps = {
    contentItem: TypeAheadItem;
    query: string;
    sourceListItem: TypeAheadItem[];
};
/**
 * Please do not use it. Ping #help-editor and talk to the Lego team before use it.
 *
 * @private
 * @deprecated
 *
 */
export declare const createTypeAheadTools: (editorView: EditorView) => {
    isOpen: () => TypeAheadHandler | false;
    currentQuery: () => string | undefined;
    close: (options?: CloseOptions) => boolean;
    openMention: (inputMethod: TypeAheadInputMethod) => boolean;
    searchMention: (query?: string) => {
        type: (appendValue: string) => Promise<TypeAheadItem[]> | undefined;
        result: () => Promise<TypeAheadItem[] | undefined>;
        close: (options?: CloseOptions) => boolean;
        insert: ({ index, mode }: {
            index: number;
            mode?: SelectItemMode | undefined;
        }) => Promise<void>;
    };
    openQuickInsert: (inputMethod: TypeAheadInputMethod) => boolean;
    searchQuickInsert: (query?: string) => {
        type: (appendValue: string) => Promise<TypeAheadItem[]> | undefined;
        result: () => Promise<TypeAheadItem[] | undefined>;
        close: (options?: CloseOptions) => boolean;
        insert: ({ index, mode }: {
            index: number;
            mode?: SelectItemMode | undefined;
        }) => Promise<void>;
    };
    openEmoji: (inputMethod: TypeAheadInputMethod) => boolean;
    searchEmoji: (query?: string) => {
        type: (appendValue: string) => Promise<TypeAheadItem[]> | undefined;
        result: () => Promise<TypeAheadItem[] | undefined>;
        close: (options?: CloseOptions) => boolean;
        insert: ({ index, mode }: {
            index: number;
            mode?: SelectItemMode | undefined;
        }) => Promise<void>;
    };
    insertItemMention: ({ contentItem, query, sourceListItem }: InsertItemProps) => boolean;
    insertItemEmoji: ({ contentItem, query, sourceListItem }: InsertItemProps) => boolean;
    insertItemQuickInsert: ({ contentItem, query, sourceListItem }: InsertItemProps) => boolean;
};
export {};
