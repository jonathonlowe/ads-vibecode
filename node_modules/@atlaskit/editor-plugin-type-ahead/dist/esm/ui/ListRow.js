import React, { useEffect, useRef } from 'react';
export function ListRow(_ref) {
  var children = _ref.children,
    registerChild = _ref.registerChild,
    measure = _ref.measure,
    index = _ref.index,
    style = _ref.style,
    isVisible = _ref.isVisible,
    isScrolling = _ref.isScrolling,
    onMouseMove = _ref.onMouseMove;
  var childElementRef = useRef(null);
  var setListElementRef = function setListElementRef(element) {
    registerChild === null || registerChild === void 0 || registerChild(element !== null && element !== void 0 ? element : undefined);
  };
  useEffect(function () {
    // Do not measure if the row is not visible or is scrolling for performance reasons.
    if (!childElementRef.current || !isVisible || isScrolling) {
      return;
    }
    var observer = new ResizeObserver(function () {
      return measure();
    });
    observer.observe(childElementRef.current);
    return function () {
      return observer.disconnect();
    };
  }, [isScrolling, isVisible, measure]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    React.createElement("div", {
      ref: setListElementRef,
      style: style,
      "data-index": index
    }, /*#__PURE__*/React.createElement("div", {
      ref: childElementRef,
      "data-testid": "list-item-height-observed-".concat(index),
      onMouseMove: onMouseMove
    }, children))
  );
}