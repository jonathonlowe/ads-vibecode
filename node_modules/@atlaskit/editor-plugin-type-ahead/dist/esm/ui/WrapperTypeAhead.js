import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';
import { ACTION, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { SelectItemMode, TypeAheadAvailableNodes } from '@atlaskit/editor-common/type-ahead';
import { fg } from '@atlaskit/platform-feature-flags';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { fireTypeAheadClosedAnalyticsEvent } from '../pm-plugins/analytics';
import { updateQuery } from '../pm-plugins/commands/update-query';
import { itemIsDisabled as _itemIsDisabled } from '../pm-plugins/item-is-disabled';
import { getPluginState, moveSelectedIndex, skipForwardToSafeItem } from '../pm-plugins/utils';
import { useItemInsert } from './hooks/use-item-insert';
import { useLoadItems } from './hooks/use-load-items';
import { useOnForceSelect } from './hooks/use-on-force-select';
import { InputQuery } from './InputQuery';
export var WrapperTypeAhead = /*#__PURE__*/React.memo(function (_ref) {
  var triggerHandler = _ref.triggerHandler,
    editorView = _ref.editorView,
    anchorElement = _ref.anchorElement,
    shouldFocusCursorInsideQuery = _ref.shouldFocusCursorInsideQuery,
    popupsMountPoint = _ref.popupsMountPoint,
    popupsBoundariesElement = _ref.popupsBoundariesElement,
    popupsScrollableElement = _ref.popupsScrollableElement,
    inputMethod = _ref.inputMethod,
    getDecorationPosition = _ref.getDecorationPosition,
    reopenQuery = _ref.reopenQuery,
    onUndoRedo = _ref.onUndoRedo,
    api = _ref.api;
  // @ts-ignore
  var openElementBrowserModal = triggerHandler === null || triggerHandler === void 0 ? void 0 : triggerHandler.openElementBrowserModal;
  var showViewMore = (triggerHandler === null || triggerHandler === void 0 ? void 0 : triggerHandler.id) === TypeAheadAvailableNodes.QUICK_INSERT && !!openElementBrowserModal && editorExperiment('platform_editor_controls', 'variant1');
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    closed = _useState2[0],
    setClosed = _useState2[1];
  var _useState3 = useState(reopenQuery || ''),
    _useState4 = _slicedToArray(_useState3, 2),
    query = _useState4[0],
    setQuery = _useState4[1];
  var queryRef = useRef(query);
  var editorViewRef = useRef(editorView);
  var items = useLoadItems(triggerHandler, editorView, query, showViewMore);
  useEffect(function () {
    if (!closed && fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.handleIntentToStartEdit({
        shouldStartTimer: false,
        shouldPersistActiveSession: true
      }));
    }
  }, [closed, api]);
  useLayoutEffect(function () {
    queryRef.current = query;
  }, [query]);
  var _useItemInsert = useItemInsert(triggerHandler, editorView, items, api),
    _useItemInsert2 = _slicedToArray(_useItemInsert, 2),
    onItemInsert = _useItemInsert2[0],
    onTextInsert = _useItemInsert2[1];
  var selectNextItem = useMemo(function () {
    return moveSelectedIndex({
      editorView: editorView,
      direction: 'next',
      api: api
    });
  }, [editorView, api]);
  var selectPreviousItem = useMemo(function () {
    return moveSelectedIndex({
      editorView: editorView,
      direction: 'previous',
      api: api
    });
  }, [editorView, api]);
  var cancel = useCallback(function (_ref2) {
    var setSelectionAt = _ref2.setSelectionAt,
      addPrefixTrigger = _ref2.addPrefixTrigger,
      text = _ref2.text,
      forceFocusOnEditor = _ref2.forceFocusOnEditor;
    if (editorExperiment('platform_editor_controls', 'variant1') && fg('platform_editor_controls_patch_4')) {
      fireTypeAheadClosedAnalyticsEvent(api, ACTION.CANCELLED, !!queryRef.current, INPUT_METHOD.KEYBOARD);
    }
    setClosed(true);
    var fullquery = addPrefixTrigger ? "".concat(triggerHandler.trigger).concat(text) : text;
    onTextInsert({
      forceFocusOnEditor: forceFocusOnEditor,
      setSelectionAt: setSelectionAt,
      text: fullquery
    });
  }, [api, triggerHandler.trigger, onTextInsert]);
  var insertSelectedItem = useCallback(function () {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SelectItemMode.SELECTED;
    var view = editorViewRef.current;

    // Ignored via go/ees005
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    var _ref3 = getPluginState(view.state),
      selectedIndex = _ref3.selectedIndex;
    var safeSelectedIndex = skipForwardToSafeItem({
      currentIndex: selectedIndex,
      nextIndex: 1,
      listSize: items.length,
      itemIsDisabled: function itemIsDisabled(idx) {
        return _itemIsDisabled(items[idx], api);
      }
    });
    // If the only safe index is -1 then none are safe - do not insert item
    if (safeSelectedIndex === -1) {
      return;
    }
    if (editorExperiment('platform_editor_controls', 'variant1') && fg('platform_editor_controls_patch_4')) {
      fireTypeAheadClosedAnalyticsEvent(api, ACTION.INSERTED, !!queryRef.current, INPUT_METHOD.KEYBOARD);
    }
    setClosed(true);
    queueMicrotask(function () {
      onItemInsert({
        mode: mode,
        index: selectedIndex,
        query: queryRef.current
      });
    });
  }, [onItemInsert, api, items]);
  var showTypeAheadPopupList = useCallback(function () {}, []);
  var closePopup = useCallback(function () {
    setClosed(true);
  }, []);
  useEffect(function () {
    var view = editorViewRef.current;
    var pluginState = getPluginState(view.state);
    if (query.length === 0 || query === (pluginState === null || pluginState === void 0 ? void 0 : pluginState.query) || !(pluginState !== null && pluginState !== void 0 && pluginState.triggerHandler)) {
      return;
    }
    updateQuery(query)(view.state, view.dispatch);
  }, [query, reopenQuery]);
  useOnForceSelect({
    triggerHandler: triggerHandler,
    items: items,
    query: query,
    editorView: editorView,
    closePopup: closePopup
  });
  if (closed) {
    return null;
  }
  if (!triggerHandler) {
    return null;
  }
  return /*#__PURE__*/React.createElement(InputQuery, {
    triggerQueryPrefix: triggerHandler === null || triggerHandler === void 0 ? void 0 : triggerHandler.trigger,
    onQueryChange: setQuery,
    onItemSelect: insertSelectedItem,
    selectNextItem: selectNextItem,
    selectPreviousItem: selectPreviousItem,
    onQueryFocus: showTypeAheadPopupList,
    cancel: cancel,
    forceFocus: shouldFocusCursorInsideQuery,
    onUndoRedo: onUndoRedo,
    reopenQuery: reopenQuery,
    editorView: editorView,
    items: items
  });
});
WrapperTypeAhead.displayName = 'WrapperTypeAhead';