import { GapCursorSelection } from '@atlaskit/editor-common/selection';
import { NodeSelection, TextSelection } from '@atlaskit/editor-prosemirror/state';
import { ACTIONS } from '../actions';
import { pluginKey } from '../key';
export var openTypeAhead = function openTypeAhead(props) {
  return function (tr) {
    var triggerHandler = props.triggerHandler,
      inputMethod = props.inputMethod,
      query = props.query,
      removePrefixTriggerOnCancel = props.removePrefixTriggerOnCancel;
    tr.setMeta(pluginKey, {
      action: ACTIONS.OPEN_TYPEAHEAD_AT_CURSOR,
      params: {
        triggerHandler: triggerHandler,
        inputMethod: inputMethod,
        query: query,
        removePrefixTriggerOnCancel: removePrefixTriggerOnCancel
      }
    });
  };
};
export var openTypeAheadAtCursor = function openTypeAheadAtCursor(_ref) {
  var triggerHandler = _ref.triggerHandler,
    inputMethod = _ref.inputMethod,
    query = _ref.query,
    removePrefixTriggerOnCancel = _ref.removePrefixTriggerOnCancel;
  return function (_ref2) {
    var tr = _ref2.tr;
    openTypeAhead({
      triggerHandler: triggerHandler,
      inputMethod: inputMethod,
      query: query,
      removePrefixTriggerOnCancel: removePrefixTriggerOnCancel
    })(tr);
    var selection = tr.selection;
    var isInline = selection instanceof NodeSelection && selection.node.type.isInline;
    if (!(selection instanceof TextSelection || selection instanceof GapCursorSelection || selection instanceof NodeSelection)) {
      return tr;
    }
    if (selection instanceof GapCursorSelection) {
      // Create space for the typeahead menu in gap cursor
      tr.insertText(' ');
      // delete 1 pos before wherever selection is now - that will delete the empty space
      tr.delete(tr.selection.from - 1, tr.selection.from);
    } else {
      var _selection$$head, _selection$$head$pare, _selection$$head$pare2;
      if (selection instanceof NodeSelection) {
        if (isInline) {
          tr.deleteSelection();
          return tr;
        }
        return tr;
      }
      if (!selection.$cursor) {
        tr.deleteSelection();
        return tr;
      }

      // Search & Destroy placeholder
      var cursorPos = selection.$cursor.pos;
      var nodeAtCursor = tr.doc.nodeAt(cursorPos);
      var isPlaceholderAtCursorPosition = nodeAtCursor && nodeAtCursor.type.name === 'placeholder';
      if (nodeAtCursor && isPlaceholderAtCursorPosition) {
        tr.delete(cursorPos, cursorPos + nodeAtCursor.nodeSize);
      }

      // ME-2375 remove the superfluous '@' inserted before decoration
      // by composition (https://github.com/ProseMirror/prosemirror/issues/903)
      //
      // Update:
      // Now also handles any use case with superfluous typeahead triggers (ie. '@', ':', '/')
      // being inserted due to composition by checking if we have the trigger
      // directly before the typeahead. This should not happen unless it has
      // been eroneously added because we require whitespace/newline for typeahead.
      if (cursorPos >= 2 && !!(selection !== null && selection !== void 0 && (_selection$$head = selection.$head) !== null && _selection$$head !== void 0 && (_selection$$head = _selection$$head.parent) !== null && _selection$$head !== void 0 && _selection$$head.textContent) && (_selection$$head$pare = (_selection$$head$pare2 = selection.$head.parent.textContent).endsWith) !== null && _selection$$head$pare !== void 0 && _selection$$head$pare.call(_selection$$head$pare2, triggerHandler.trigger)) {
        tr.delete(cursorPos - 1, cursorPos);
      }
    }
    return tr;
  };
};