import React from 'react';
import { IntlProvider } from 'react-intl-next';
import uuid from 'uuid';
import { keyName as keyNameNormalized } from 'w3c-keyname';
import { redo, undo } from '@atlaskit/editor-prosemirror/history';
import { TextSelection } from '@atlaskit/editor-prosemirror/state';
import { Decoration, DecorationSet } from '@atlaskit/editor-prosemirror/view';
import { fg } from '@atlaskit/platform-feature-flags';
import { B400 } from '@atlaskit/theme/colors';
import { WrapperTypeAhead } from '../ui/WrapperTypeAhead';
import { closeTypeAhead } from './commands/close-type-ahead';
import { TYPE_AHEAD_DECORATION_DATA_ATTRIBUTE, TYPE_AHEAD_DECORATION_KEY } from './constants';
import { StatsModifier } from './stats-modifier';
import { getTypeAheadQuery } from './utils';
export var factoryDecorations = function factoryDecorations(_ref) {
  var intl = _ref.intl,
    popupMountRef = _ref.popupMountRef,
    nodeViewPortalProviderAPI = _ref.nodeViewPortalProviderAPI,
    api = _ref.api;
  var createDecorations = function createDecorations(tr, _ref2) {
    var triggerHandler = _ref2.triggerHandler,
      inputMethod = _ref2.inputMethod,
      reopenQuery = _ref2.reopenQuery;
    var selection = tr.selection;
    if (!(selection instanceof TextSelection) || !selection.$cursor) {
      return {
        decorationSet: DecorationSet.empty,
        stats: null,
        decorationElement: null
      };
    }
    var decorationId = "decoration_id_".concat(TYPE_AHEAD_DECORATION_KEY, "_").concat(uuid());
    var $cursor = selection.$cursor;
    var typeaheadComponent = document.createElement('mark');
    var stats = new StatsModifier();
    var shouldFocusCursorInsideQuery = true;
    var deco = Decoration.widget($cursor.pos, function (editorView, getDecorationPositionUnsafe) {
      var getDecorationPosition = function getDecorationPosition() {
        try {
          return getDecorationPositionUnsafe();
        } catch (e) {
          return undefined;
        }
      };
      typeaheadComponent.setAttribute('id', decorationId);
      typeaheadComponent.setAttribute('role', 'search');
      typeaheadComponent.dataset.typeAheadQuery = 'true';
      typeaheadComponent.dataset.trigger = triggerHandler.trigger;

      // This line below seems weird,
      // we need that cuz the clickAreaHelper
      // will try to hijack any click event coming
      // from the inside of the Editor
      // packages/editor/editor-core/src/ui/Addon/click-area-helper.ts
      typeaheadComponent.dataset.editorPopup = 'true';
      typeaheadComponent.dataset.typeAhead = TYPE_AHEAD_DECORATION_DATA_ATTRIBUTE;
      typeaheadComponent.style.color = "var(--ds-text-accent-blue, ".concat(B400, ")");
      typeaheadComponent.style.backgroundColor = 'transparent';
      var onUndoRedo = function onUndoRedo(inputType) {
        if (!['historyUndo', 'historyRedo'].includes(inputType)) {
          return false;
        }
        var hasReopenQuery = typeof reopenQuery === 'string' && reopenQuery.trim().length > 0;
        var currentQuery = getTypeAheadQuery(editorView.state);
        if (hasReopenQuery || (currentQuery === null || currentQuery === void 0 ? void 0 : currentQuery.length) === 0) {
          var command = inputType === 'historyUndo' ? undo : redo;
          var _tr = editorView.state.tr;
          var fakeDispatch = function fakeDispatch(customTr) {
            _tr = customTr;
          };
          var result = command(editorView.state, fakeDispatch);
          if (result) {
            closeTypeAhead(_tr);
            editorView.dispatch(_tr);
            editorView.focus();
          }
          return result;
        }
        return false;
      };
      nodeViewPortalProviderAPI.render(function () {
        var _popupMountRef$curren, _popupMountRef$curren2, _popupMountRef$curren3;
        return /*#__PURE__*/React.createElement(IntlProvider, {
          defaultLocale: fg('platform_editor_update_type_ahead_locale') ? intl.defaultLocale || 'en-US' : undefined,
          locale: intl.locale || (fg('platform_editor_update_type_ahead_locale') ? 'en-US' : 'en'),
          messages: intl.messages,
          formats: intl.formats
        }, /*#__PURE__*/React.createElement(WrapperTypeAhead, {
          triggerHandler: triggerHandler,
          editorView: editorView,
          anchorElement: typeaheadComponent,
          inputMethod: inputMethod,
          getDecorationPosition: getDecorationPosition,
          shouldFocusCursorInsideQuery: shouldFocusCursorInsideQuery,
          popupsMountPoint: (_popupMountRef$curren = popupMountRef.current) === null || _popupMountRef$curren === void 0 ? void 0 : _popupMountRef$curren.popupsMountPoint,
          popupsBoundariesElement: (_popupMountRef$curren2 = popupMountRef.current) === null || _popupMountRef$curren2 === void 0 ? void 0 : _popupMountRef$curren2.popupsBoundariesElement,
          popupsScrollableElement: (_popupMountRef$curren3 = popupMountRef.current) === null || _popupMountRef$curren3 === void 0 ? void 0 : _popupMountRef$curren3.popupsScrollableElement,
          onUndoRedo: onUndoRedo,
          reopenQuery: reopenQuery,
          api: api
        }));
      }, typeaheadComponent, decorationId);
      shouldFocusCursorInsideQuery = false;
      return typeaheadComponent;
    }, {
      isTypeAheadDecoration: true,
      key: decorationId,
      side: 0,
      stopEvent: function stopEvent(e) {
        var key = keyNameNormalized(e);
        var sel = document.getSelection();
        if ('ArrowLeft' === key && (sel === null || sel === void 0 ? void 0 : sel.anchorOffset) === 0) {
          return false;
        }
        return true;
      },
      ignoreSelection: false
    });
    return {
      decorationSet: DecorationSet.create(tr.doc, [deco]),
      decorationElement: typeaheadComponent,
      stats: stats
    };
  };
  var removeDecorations = function removeDecorations(decorationSet) {
    if (!decorationSet || decorationSet === DecorationSet.empty) {
      return false;
    }
    var typeAheadDecorations = decorationSet.find(undefined, undefined, function (spec) {
      return spec.isTypeAheadDecoration;
    });
    if (!typeAheadDecorations || typeAheadDecorations.length === 0) {
      return false;
    }
    typeAheadDecorations.forEach(function (_ref3) {
      var spec = _ref3.spec;
      if (!spec.key) {
        return;
      }
      var decoElement = document.querySelector("#".concat(spec.key));
      if (!decoElement) {
        return;
      }
      nodeViewPortalProviderAPI.remove(spec.key);
    });
    if (fg('platform_editor_ease_of_use_metrics')) {
      var _api$metrics;
      api === null || api === void 0 || api.core.actions.execute(api === null || api === void 0 || (_api$metrics = api.metrics) === null || _api$metrics === void 0 ? void 0 : _api$metrics.commands.startActiveSessionTimer());
    }
    return true;
  };
  return {
    createDecorations: createDecorations,
    removeDecorations: removeDecorations
  };
};