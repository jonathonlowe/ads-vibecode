import React, { useEffect, useRef } from 'react';
export function ListRow({
  children,
  registerChild,
  measure,
  index,
  style,
  isVisible,
  isScrolling,
  onMouseMove
}) {
  const childElementRef = useRef(null);
  const setListElementRef = element => {
    registerChild === null || registerChild === void 0 ? void 0 : registerChild(element !== null && element !== void 0 ? element : undefined);
  };
  useEffect(() => {
    // Do not measure if the row is not visible or is scrolling for performance reasons.
    if (!childElementRef.current || !isVisible || isScrolling) {
      return;
    }
    const observer = new ResizeObserver(() => measure());
    observer.observe(childElementRef.current);
    return () => observer.disconnect();
  }, [isScrolling, isVisible, measure]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    React.createElement("div", {
      ref: setListElementRef,
      style: style,
      "data-index": index
    }, /*#__PURE__*/React.createElement("div", {
      ref: childElementRef,
      "data-testid": `list-item-height-observed-${index}`,
      onMouseMove: onMouseMove
    }, children))
  );
}