"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.keymapPlugin = keymapPlugin;
var _analytics = require("@atlaskit/editor-common/analytics");
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _utils = require("@atlaskit/editor-common/utils");
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _editorCommands = require("../editor-commands");
function keymapPlugin(editorAnalyticsAPI) {
  var list = {};
  (0, _keymaps.bindKeymapWithCommand)(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.findShortcutByKeymap)(_keymaps.indent), (0, _editorCommands.getIndentCommand)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.KEYBOARD), list);
  (0, _keymaps.bindKeymapWithCommand)(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.findShortcutByKeymap)(_keymaps.outdent), (0, _editorCommands.getOutdentCommand)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.KEYBOARD), list);
  (0, _keymaps.bindKeymapWithCommand)(
  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.findShortcutByKeymap)(_keymaps.backspace), function (state, dispatch) {
    var selection = state.selection;
    if ((0, _utils.isTextSelection)(selection) && selection.$cursor && selection.$cursor.parentOffset === 0) {
      return dispatch ? (0, _editorCommands.getOutdentCommand)(editorAnalyticsAPI)(_analytics.INPUT_METHOD.KEYBOARD)(state, dispatch) : false;
    }
    return false;
  }, list);
  return (0, _keymap.keymap)(list);
}
var _default = exports.default = keymapPlugin;