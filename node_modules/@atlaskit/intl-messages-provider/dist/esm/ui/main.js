import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useMemo } from 'react';
import { IntlProvider } from 'react-intl-next';
import { useMessages } from '../services/use-messages';
import { useSafeIntl } from '../services/use-safe-intl';
export default function IntlMessagesProvider(_ref) {
  var loaderFn = _ref.loaderFn,
    children = _ref.children,
    defaultMessages = _ref.defaultMessages;
  var intl = useSafeIntl();
  var messages = useMessages(intl.locale, loaderFn);

  /**
   * IntlProvider does not inherit from upstream IntlProviders,
   * we lookup messages in the context and pass them downstream
   * This prevents the missing messages error
   */
  var mergedMessages = useMemo(function () {
    return _objectSpread(_objectSpread(_objectSpread({}, defaultMessages), intl.messages), messages);
  }, [intl, messages, defaultMessages]);
  return /*#__PURE__*/React.createElement(IntlProvider, {
    defaultLocale: "en",
    locale: intl.locale,
    onError: intl.onError,
    messages: mergedMessages
  }, children);
}