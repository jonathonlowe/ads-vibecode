"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setProvider = exports.resolved = exports.matched = exports.finish = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// queues a match at a given position in the document
var matched = exports.matched = function matched(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    resolving: [].concat((0, _toConsumableArray2.default)(state.resolving), [{
      start: action.start,
      end: action.end,
      match: action.match
    }])
  });
};

// store the replacement for a match
var resolved = exports.resolved = function resolved(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    matches: [].concat((0, _toConsumableArray2.default)(state.matches), [{
      replacement: action.replacement,
      matchString: action.matchString
    }])
  });
};

// indicates a replacement in the document has been completed, and removes the match from both resolving and matches
var finish = exports.finish = function finish(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    resolving: state.resolving.filter(function (resolving) {
      return resolving.match[0] !== action.matchString;
    }),
    matches: state.matches.filter(function (matching) {
      return matching.matchString !== action.matchString;
    })
  });
};

// sets the autoformatting provider in the shared plugin state
var setProvider = exports.setProvider = function setProvider(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    autoformattingProvider: action.provider
  });
};