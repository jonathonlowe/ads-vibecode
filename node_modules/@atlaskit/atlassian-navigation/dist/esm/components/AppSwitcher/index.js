import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component", "href", "id", "isDisabled", "isSelected", "label", "onBlur", "onClick", "onFocus", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseUp", "target", "testId", "tooltip"],
  _excluded2 = ["component", "href", "id", "isDisabled", "isSelected", "label", "onBlur", "onClick", "onFocus", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseUp", "target", "testId", "tooltip"];
import React, { forwardRef } from 'react';
import Nav4AppSwitcherIcon from '@atlaskit/icon/core/app-switcher';
import AppSwitcherIcon from '@atlaskit/icon/core/migration/app-switcher';
import { IconButton } from '../IconButton';
/**
 * _App switcher__
 *
 * An AppSwitcher button that can be passed into `AtlassianNavigation`'s
 * `renderAppSwitcher` prop.
 *
 * - [Examples](https://atlassian.design/components/atlassian-navigation/examples#app-switcher)
 * - [Code](https://atlassian.design/components/atlassian-navigation/code)
 */
export var AppSwitcher = /*#__PURE__*/forwardRef(function (props, ref) {
  var component = props.component,
    href = props.href,
    id = props.id,
    isDisabled = props.isDisabled,
    isSelected = props.isSelected,
    label = props.label,
    onBlur = props.onBlur,
    onClick = props.onClick,
    onFocus = props.onFocus,
    onMouseDown = props.onMouseDown,
    onMouseEnter = props.onMouseEnter,
    onMouseLeave = props.onMouseLeave,
    onMouseUp = props.onMouseUp,
    target = props.target,
    testId = props.testId,
    tooltip = props.tooltip,
    rest = _objectWithoutProperties(props, _excluded);
  return /*#__PURE__*/React.createElement(IconButton, _extends({
    component: component,
    href: href,
    icon: /*#__PURE__*/React.createElement(AppSwitcherIcon, {
      color: "currentColor",
      spacing: "spacious",
      label: typeof tooltip === 'string' ? tooltip : 'Switch apps'
    }),
    id: id,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseUp: onMouseUp,
    ref: ref,
    target: target,
    testId: testId,
    tooltip: tooltip
    // These are all explicit, leaving it in just in case
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest));
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export var AppSwitcherNav4 = /*#__PURE__*/forwardRef(function (props, ref) {
  var component = props.component,
    href = props.href,
    id = props.id,
    isDisabled = props.isDisabled,
    isSelected = props.isSelected,
    label = props.label,
    onBlur = props.onBlur,
    onClick = props.onClick,
    onFocus = props.onFocus,
    onMouseDown = props.onMouseDown,
    onMouseEnter = props.onMouseEnter,
    onMouseLeave = props.onMouseLeave,
    onMouseUp = props.onMouseUp,
    target = props.target,
    testId = props.testId,
    tooltip = props.tooltip,
    rest = _objectWithoutProperties(props, _excluded2);
  return /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: /*#__PURE__*/React.createElement(Nav4AppSwitcherIcon, {
      label: typeof tooltip === 'string' ? tooltip : 'Switch apps',
      color: "var(--ds-icon, #44546F)"
    }),
    component: component,
    href: href,
    id: id,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseUp: onMouseUp,
    ref: ref,
    target: target,
    testId: testId,
    tooltip: tooltip
    // These are all explicit, leaving it in just in case
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest));
});

// exists only to extract props
// eslint-disable-next-line @repo/internal/react/use-noop, import/no-anonymous-default-export
export default (function (props) {});