"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getObservableFromFile = exports.chunkinator = void 0;
var _tap = require("rxjs/operators/tap");
var _concatMap = require("rxjs/operators/concatMap");
var _bufferCount = require("rxjs/operators/bufferCount");
var _fromPromise = require("rxjs/observable/fromPromise");
var _slicenator = require("./slicenator");
var _hashinator = require("./hashinator");
var _uploadinator = require("./uploadinator");
var _processinator = require("./processinator");
var _utils = require("./utils");
var _from = require("rxjs/observable/from");
var getObservableFromFile = exports.getObservableFromFile = function getObservableFromFile(file, options, callbacks) {
  return (0, _fromPromise.fromPromise)((0, _utils.fetchBlob)(file)).pipe((0, _concatMap.concatMap)(function (blob) {
    var chunkSize = options.chunkSize;
    var onProgress = callbacks.onProgress;
    var totalChunks = Math.ceil(blob.size / chunkSize);
    var slicenatedBlobs = (0, _slicenator.slicenator)(blob, {
      size: chunkSize
    });
    var hashinatedBlobs = (0, _hashinator.hashinator)(slicenatedBlobs, {
      concurrency: options.hashingConcurrency,
      hasher: options.hashingFunction
    });
    var uploadedChunks = 0;
    var uploadedBlobs = (0, _uploadinator.uploadinator)(hashinatedBlobs, {
      concurrency: options.uploadingConcurrency,
      uploader: options.uploadingFunction
    });
    if (onProgress) {
      uploadedBlobs = uploadedBlobs.pipe((0, _tap.tap)(function () {
        uploadedChunks += 1;
        onProgress(uploadedChunks / totalChunks);
      }));
    }
    return (0, _processinator.processinator)(uploadedBlobs, {
      batchSize: options.processingBatchSize,
      processor: options.processingFunction
    }).pipe((0, _concatMap.concatMap)(function (batchedChunks) {
      return (0, _from.from)(batchedChunks);
    }), (0, _bufferCount.bufferCount)(totalChunks));
  }));
};
var chunkinator = exports.chunkinator = function chunkinator(file, options, callbacks) {
  return getObservableFromFile(file, options, callbacks);
};