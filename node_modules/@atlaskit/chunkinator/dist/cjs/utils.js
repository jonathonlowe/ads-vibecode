"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncMap = void 0;
exports.fetchBlob = fetchBlob;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Observable = require("rxjs/Observable");
var _mergeMap = require("rxjs/operators/mergeMap");
function fetchBlob(_x) {
  return _fetchBlob.apply(this, arguments);
}
function _fetchBlob() {
  _fetchBlob = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(file) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof file === 'string')) {
            _context.next = 6;
            break;
          }
          _context.next = 3;
          return fetch(file).then(function (response) {
            return response.blob();
          });
        case 3:
          return _context.abrupt("return", _context.sent);
        case 6:
          return _context.abrupt("return", file);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _fetchBlob.apply(this, arguments);
}
var notify = function notify(promise, observer, onReady) {
  var notifier = {
    notifyIfReady: function notifyIfReady() {
      return false;
    }
  };
  promise.then(function (value) {
    notifier.notifyIfReady = function () {
      observer.next(value);
      observer.complete();
      return true;
    };
    onReady(notifier);
  }, function (reason) {
    notifier.notifyIfReady = function () {
      observer.error(reason);
      return true;
    };
    onReady(notifier);
  });
  return notifier;
};
var mapper = function mapper(project) {
  var notifiers = new Array();
  var onReady = function onReady() {
    // find the first non-ready notifier in the queue,
    // while invoking all ready notifiers that we encounter along the way
    var notReadyIdx = notifiers.findIndex(function (notifier) {
      return !notifier.notifyIfReady();
    });
    if (notReadyIdx > 0) {
      // remove all the notifiers we invoked
      notifiers.splice(0, notReadyIdx);
    }
  };
  return function (value) {
    return new _Observable.Observable(function (sub) {
      notifiers.push(notify(project(value), sub, onReady));
    });
  };
};
var asyncMap = exports.asyncMap = function asyncMap(project, concurrent) {
  return (0, _mergeMap.mergeMap)(mapper(project), concurrent);
};