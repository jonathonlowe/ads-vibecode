import { Observable } from 'rxjs/Observable';
import { mergeMap } from 'rxjs/operators/mergeMap';
export async function fetchBlob(file) {
  if (typeof file === 'string') {
    return await fetch(file).then(response => response.blob());
  } else {
    return file;
  }
}
const notify = (promise, observer, onReady) => {
  const notifier = {
    notifyIfReady: () => false
  };
  promise.then(value => {
    notifier.notifyIfReady = () => {
      observer.next(value);
      observer.complete();
      return true;
    };
    onReady(notifier);
  }, reason => {
    notifier.notifyIfReady = () => {
      observer.error(reason);
      return true;
    };
    onReady(notifier);
  });
  return notifier;
};
const mapper = project => {
  const notifiers = new Array();
  const onReady = () => {
    // find the first non-ready notifier in the queue,
    // while invoking all ready notifiers that we encounter along the way
    const notReadyIdx = notifiers.findIndex(notifier => !notifier.notifyIfReady());
    if (notReadyIdx > 0) {
      // remove all the notifiers we invoked
      notifiers.splice(0, notReadyIdx);
    }
  };
  return value => new Observable(sub => {
    notifiers.push(notify(project(value), sub, onReady));
  });
};
export const asyncMap = (project, concurrent) => mergeMap(mapper(project), concurrent);