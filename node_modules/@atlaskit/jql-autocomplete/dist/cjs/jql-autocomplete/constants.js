"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unclosedStringTokens = exports.rulesWithContext = exports.predicateOperators = exports.operators = exports.WHERE_CLAUSE = exports.ORDER_BY_CLAUSE = void 0;
var _jqlParser = require("@atlaskit/jql-parser");
var WHERE_CLAUSE = exports.WHERE_CLAUSE = 'where';
var ORDER_BY_CLAUSE = exports.ORDER_BY_CLAUSE = 'orderBy';

// TODO: do something with this

var operators = exports.operators = ['=', '!=', '>', '<', '>=', '<=', 'in', 'not in', '~', '!~', 'is', 'is not', 'was', 'was in', 'was not in', 'was not', 'changed'];
var predicateOperators = exports.predicateOperators = ['after', 'before', 'on', 'during', 'by', 'from', 'to'];

/**
 * Here we maintain an opinionated subset of rules we believe need to leverage context data.
 * New rules supported by autocomplete that require contextual data should be included here.
 */
var rulesWithContext = exports.rulesWithContext = [_jqlParser.JQLParser.RULE_jqlField, _jqlParser.JQLParser.RULE_jqlEqualsOperator, _jqlParser.JQLParser.RULE_jqlLikeOperator, _jqlParser.JQLParser.RULE_jqlComparisonOperator, _jqlParser.JQLParser.RULE_jqlInOperator, _jqlParser.JQLParser.RULE_jqlIsOperator, _jqlParser.JQLParser.RULE_jqlWasOperator, _jqlParser.JQLParser.RULE_jqlWasInOperator, _jqlParser.JQLParser.RULE_jqlChangedOperator, _jqlParser.JQLParser.RULE_jqlValue, _jqlParser.JQLParser.RULE_jqlListStart, _jqlParser.JQLParser.RULE_jqlFunction];

/**
 * A subset/collection of parser tokens for strings with unclosed single or double quote
 */
var unclosedStringTokens = exports.unclosedStringTokens = [_jqlParser.JQLParser.UNCLOSED_QUOTE_STRING, _jqlParser.JQLParser.UNCLOSED_SQUOTE_STRING];