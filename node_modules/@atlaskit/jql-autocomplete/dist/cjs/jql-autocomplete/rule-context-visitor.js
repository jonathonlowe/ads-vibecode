"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuleContextVisitor = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _jqlParser = require("@atlaskit/jql-parser");
var _constants = require("./constants");
var _util = require("./util");
var _excluded = ["errorNodes"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var RuleContextVisitor = exports.RuleContextVisitor = /*#__PURE__*/(0, _createClass2.default)(function RuleContextVisitor(ruleSuggestion, ruleList, rule, tokenStream, maybeCaretToken) {
  var _this = this;
  (0, _classCallCheck2.default)(this, RuleContextVisitor);
  (0, _defineProperty2.default)(this, "visitJqlQuery", function (ctx) {
    var whereCtx = ctx.jqlWhere();
    var orderByCtx = ctx.jqlOrderBy();
    var ctxToVisit = _this.getCtxToVisit([whereCtx, orderByCtx]);
    var ruleContext = _objectSpread({}, ctxToVisit === null || ctxToVisit === void 0 ? void 0 : ctxToVisit.accept(_this));
    if (_this.rule === _jqlParser.JQLParser.RULE_jqlField) {
      ruleContext.clause = _this.ruleList.includes(_jqlParser.JQLParser.RULE_jqlWhere) ? _constants.WHERE_CLAUSE : _constants.ORDER_BY_CLAUSE;
    }
    return ruleContext;
  });
  (0, _defineProperty2.default)(this, "visitJqlWhere", function (ctx) {
    return ctx.jqlOrClause().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlOrderBy", function () {
    return {};
  });
  (0, _defineProperty2.default)(this, "visitJqlOrClause", function (ctx) {
    var ctxToVisit = _this.getCtxToVisit(ctx.jqlAndClause());
    return _objectSpread({}, ctxToVisit === null || ctxToVisit === void 0 ? void 0 : ctxToVisit.accept(_this));
  });
  (0, _defineProperty2.default)(this, "visitJqlAndClause", function (ctx) {
    var ctxToVisit = _this.getCtxToVisit(ctx.jqlNotClause());
    return _objectSpread({}, ctxToVisit === null || ctxToVisit === void 0 ? void 0 : ctxToVisit.accept(_this));
  });
  (0, _defineProperty2.default)(this, "visitJqlNotClause", function (ctx) {
    var ctxToVisit = _this.getCtxToVisit([ctx.jqlNotClause(), ctx.jqlSubClause(), ctx.jqlTerminalClause()]);
    return _objectSpread({}, ctxToVisit === null || ctxToVisit === void 0 ? void 0 : ctxToVisit.accept(_this));
  });
  (0, _defineProperty2.default)(this, "visitJqlSubClause", function (ctx) {
    var orCtx = ctx.jqlOrClause();
    return _objectSpread({}, orCtx === null || orCtx === void 0 ? void 0 : orCtx.accept(_this));
  });
  (0, _defineProperty2.default)(this, "visitJqlTerminalClause", function (ctx) {
    var fieldCtx = ctx.jqlField();
    var rhsCtx = ctx.jqlTerminalClauseRhs();
    var _rhsCtx$accept = rhsCtx.accept(_this),
      errorNodes = _rhsCtx$accept.errorNodes,
      rhsRuleContext = (0, _objectWithoutProperties2.default)(_rhsCtx$accept, _excluded);
    return _objectSpread(_objectSpread(_objectSpread({}, fieldCtx.accept(_this)), rhsRuleContext), _this.getCtxFromErrorNodes(errorNodes));
  });
  (0, _defineProperty2.default)(this, "visitJqlField", function (ctx) {
    if (_this.rule === _jqlParser.JQLParser.RULE_jqlField) {
      return {};
    }
    return {
      field: _this.tokenStream.getText(ctx)
    };
  });
  (0, _defineProperty2.default)(this, "visitJqlNumberField", function (ctx) {
    return _this.visitJqlField(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlNonNumberField", function (ctx) {
    return _this.visitJqlField(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlEqualsClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlEqualsOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlEqualsOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlLikeClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlLikeOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlLikeOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlComparisonClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlComparisonOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlComparisonOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlInClause", function (ctx) {
    var operatorContext = ctx.jqlInOperator().accept(_this);
    var listCtx = ctx.jqlList();
    if (listCtx !== undefined && _this.isReplacePosAtCtx(listCtx)) {
      return _objectSpread(_objectSpread({}, operatorContext), listCtx.accept(_this));
    }
    return _objectSpread({}, operatorContext);
  });
  (0, _defineProperty2.default)(this, "visitJqlInOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlIsClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlIsOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlIsOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlWasClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlWasOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlWasOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlWasInClause", function (ctx) {
    var operatorContext = ctx.jqlWasInOperator().accept(_this);
    var listCtx = ctx.jqlList();
    if (listCtx !== undefined && _this.isReplacePosAtCtx(listCtx)) {
      return _objectSpread(_objectSpread({}, operatorContext), listCtx.accept(_this));
    }
    return _objectSpread({}, operatorContext);
  });
  (0, _defineProperty2.default)(this, "visitJqlWasInOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlChangedClause", function (ctx) {
    // We can skip visiting operand in this case as this clause type doesn't support list operands
    return ctx.jqlChangedOperator().accept(_this);
  });
  (0, _defineProperty2.default)(this, "visitJqlChangedOperator", function (ctx) {
    return _this.visitOperator(ctx);
  });
  (0, _defineProperty2.default)(this, "visitJqlList", function (ctx) {
    var _getPositionFromParse = (0, _util.getPositionFromParserRule)(ctx.jqlListStart()),
      _getPositionFromParse2 = (0, _slicedToArray2.default)(_getPositionFromParse, 2),
      _ = _getPositionFromParse2[0],
      leftParenStop = _getPositionFromParse2[1];
    try {
      var _getPositionFromParse3 = (0, _util.getPositionFromParserRule)(ctx.jqlListEnd()),
        _getPositionFromParse4 = (0, _slicedToArray2.default)(_getPositionFromParse3, 1),
        rightParenStart = _getPositionFromParse4[0];
      if (_this.replacePositionStart >= leftParenStop && _this.replacePositionStart <= rightParenStart) {
        return {
          isList: true
        };
      }
    } catch (error) {
      // There are some queries (e.g. "project in (jsw jsd") where visiting `jqlListEnd` context
      // results in an error, as RPAREN token doesn't exist and parse tree contains an error node
      // that prevents ANTLR from recovering. For context purposes, this means we are inside the list.
      return {
        isList: true
      };
    }
    return {};
  });
  (0, _defineProperty2.default)(this, "visitOperator", function (ctx) {
    // In some situations, e.g. "project was in|", autocomplete returns both operator and operand
    // rules as candidates. For the operand rule, we want to have "was" as operator in context, even
    // though the parse tree in this case says that the operator is "was in". For this reason, we
    // get text before replace position start and check if result is one of the supported operators.
    var textBeforeReplacePosition = _this.tokenStream.getText(ctx).substring(0, _this.replacePositionStart - ctx.start.startIndex);
    var maybeOperator = (0, _util.normalizeText)(textBeforeReplacePosition);
    if ((0, _util.isOperator)(maybeOperator)) {
      return {
        operator: maybeOperator
      };
    }
    return {};
  });
  /**
   * Returns whether replace position start for our candidate lies within the provided rule context,
   * or it's a whitespace token starting where the rule context ends. In those cases, we can assume
   * the provided rule context contains the relevant contextual data for our candidate rule.
   *
   * NOTE: This assumption is not airtight and there could be scenarios which violate this
   * assumption if we introduce new candidates or context nodes in the future.
   */
  (0, _defineProperty2.default)(this, "isReplacePosAtCtx", function (ctx) {
    var _getPositionFromParse5 = (0, _util.getPositionFromParserRule)(ctx),
      _getPositionFromParse6 = (0, _slicedToArray2.default)(_getPositionFromParse5, 2),
      start = _getPositionFromParse6[0],
      stop = _getPositionFromParse6[1];
    return _this.replacePositionStart >= start && _this.replacePositionStart <= stop || !!_this.maybeCaretToken && _this.maybeCaretToken.type === _jqlParser.JQLLexer.MATCHWS && _this.maybeCaretToken.startIndex === stop;
  });
  /**
   * Given a list of parser rule contexts, this function returns which one should be visited
   * based on replace position start (i.e. the parser rule context that contains the relevant
   * information for our candidate rule).
   *
   * This can be called by visitor functions to select the adequate child rule context to visit,
   * for instance when we have multiple terminal clauses in a compound clause.
   */
  (0, _defineProperty2.default)(this, "getCtxToVisit", function (contexts) {
    var definedContexts = contexts.filter(function (context) {
      return context !== undefined;
    });
    for (var i = 0; i < definedContexts.length; i++) {
      var ctx = definedContexts[i];
      if (_this.isReplacePosAtCtx(ctx)) {
        return ctx;
      }
    }
    return undefined;
  });
  /**
   * Recover from the clause type ambiguities described in {@link visitChildren}.
   */
  (0, _defineProperty2.default)(this, "getCtxFromErrorNodes", function (errorNodes) {
    if (errorNodes !== undefined) {
      var textBeforeReplacePosition = errorNodes.filter(function (errorNode) {
        return errorNode.payload.startIndex < _this.replacePositionStart;
      }).map(function (errorNode) {
        return errorNode.payload.text;
      }).join(' ');
      var maybeOperator = (0, _util.normalizeText)(textBeforeReplacePosition);
      if ((0, _util.isOperator)(maybeOperator)) {
        return {
          operator: maybeOperator
        };
      }
    }
    return {};
  });
  /**
   * If this function is called, it means parse tree contains error nodes. In some situations, this
   * is due to ambiguities we can recover from (e.g. "issuetype was ", which can be a WAS or WAS IN
   * clause). To help return the right context in these cases, we expose error nodes in the current
   * rule context, allowing upstream visitors to decide how to handle them.
   */
  (0, _defineProperty2.default)(this, "visitChildren", function (node) {
    var errorNodes = [];
    for (var i = 0; i < node.childCount; i++) {
      errorNodes.push(node.getChild(i));
    }
    return {
      errorNodes: errorNodes
    };
  });
  (0, _defineProperty2.default)(this, "visit", function () {
    throw new Error('Unsupported operation visit(ParseTree)');
  });
  (0, _defineProperty2.default)(this, "visitErrorNode", function () {
    throw new Error('Unsupported operation visitErrorNode(ErrorNode)');
  });
  (0, _defineProperty2.default)(this, "visitTerminal", function () {
    throw new Error('Unsupported operation visitTerminal(TerminalNode)');
  });
  this.ruleList = ruleList;
  this.rule = rule;
  this.tokenStream = tokenStream;
  this.maybeCaretToken = maybeCaretToken;
  var _ruleSuggestion$repla = (0, _slicedToArray2.default)(ruleSuggestion.replacePosition, 1);
  this.replacePositionStart = _ruleSuggestion$repla[0];
});