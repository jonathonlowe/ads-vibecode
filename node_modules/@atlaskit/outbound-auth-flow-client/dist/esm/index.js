import _typeof from "@babel/runtime/helpers/typeof";
import { AuthError } from './error';
import { isOfTypeAuthError } from './types';
export function auth(startUrl, windowFeatures) {
  return new Promise(function (resolve, reject) {
    var authWindow = null;
    var authWindowInterval;
    var handleAuthWindowMessage = function handleAuthWindowMessage(event) {
      if (event.source !== authWindow) {
        return;
      }
      var data = event.data;
      if (_typeof(data) !== 'object') {
        return;
      }
      switch (data.type) {
        case 'outbound-auth:success':
          finish();
          resolve();
          break;
        case 'outbound-auth:failure':
          finish();
          var errorType = data.errorType.toLowerCase();
          if (isOfTypeAuthError(errorType)) {
            reject(new AuthError(data.message, errorType));
          } else {
            reject(new AuthError(data.message));
          }
          break;
      }
    };
    var handleAuthWindowInterval = function handleAuthWindowInterval() {
      if (authWindow && authWindow.closed) {
        finish();
        reject(new AuthError('The auth window was closed', 'auth_window_closed'));
      }
    };
    var start = function start() {
      window.addEventListener('message', handleAuthWindowMessage);
      authWindow = window.open(startUrl, startUrl, windowFeatures);
      authWindowInterval = window.setInterval(handleAuthWindowInterval, 500);
    };
    var finish = function finish() {
      clearInterval(authWindowInterval);
      window.removeEventListener('message', handleAuthWindowMessage);
      if (authWindow) {
        authWindow.close();
        authWindow = null;
      }
    };
    start();
  });
}
export { AuthError } from './error';