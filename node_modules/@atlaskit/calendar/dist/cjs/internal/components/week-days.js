"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _box = _interopRequireDefault(require("@atlaskit/primitives/box"));
var _date = _interopRequireDefault(require("./date"));
var _weekDayGrid = _interopRequireDefault(require("./week-day-grid"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var WeekDays = /*#__PURE__*/(0, _react.memo)(function WeekDays(_ref) {
  var weeks = _ref.weeks,
    handleClickDay = _ref.handleClickDay,
    monthsLong = _ref.monthsLong,
    shouldSetFocus = _ref.shouldSetFocus,
    tabIndex = _ref.tabIndex,
    testId = _ref.testId;
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    role: "rowgroup",
    testId: testId && "".concat(testId, "--month")
  }, weeks.map(function (week, i) {
    return /*#__PURE__*/_react.default.createElement(_weekDayGrid.default, {
      key: i,
      testId: testId && "".concat(testId, "--week")
    }, week.values.map(function (weekDay) {
      return /*#__PURE__*/_react.default.createElement(_date.default, {
        key: "".concat(week.id, "-").concat(weekDay.id),
        isDisabled: weekDay.isDisabled,
        isFocused: weekDay.isFocused,
        isToday: weekDay.isToday,
        dayLong: weekDay.weekDayName,
        month: weekDay.month,
        monthLong: monthsLong[weekDay.month - 1],
        onClick: handleClickDay,
        isPreviouslySelected: weekDay.isPreviouslySelected,
        isSelected: weekDay.isSelected,
        isSibling: weekDay.isSiblingMonth,
        year: weekDay.year,
        shouldSetFocus: shouldSetFocus,
        tabIndex: tabIndex,
        testId: testId
      }, weekDay.day);
    }));
  }));
});
WeekDays.displayName = 'WeekDays';

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = WeekDays;