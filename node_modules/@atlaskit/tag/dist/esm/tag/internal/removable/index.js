/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef, memo, useCallback, useState } from 'react';
import { useCallbackWithAnalytics } from '@atlaskit/analytics-next';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import noop from '@atlaskit/ds-lib/noop';
import { ExitingPersistence, ShrinkOut } from '@atlaskit/motion';
import { fg } from '@atlaskit/platform-feature-flags';
import { removalActiveBackgroundColors, removalHoverBackgroundColors, removalTextColors } from '../../../styles';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import RemoveButton from './remove-button';
var textLinkCssVar = '--ds-ctl';
var textDefaultCssVar = '--ds-ct';
var textActiveCssVar = '--ds-ctp';
var backgroundHoverCssVar = '--ds-cbh';
var backgroundActiveCssVar = '--ds-cba';
var TagStatus = /*#__PURE__*/function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
  return TagStatus;
}(TagStatus || {});
var packageName = "@atlaskit/tag";
var packageVersion = "14.0.7";
var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};

/**
 * These hide the focus ring for the tag when its remove button is focused,
 * preventing a double focus ring.
 */
var removingStyles = null;
var RemovableTagComponent = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var appearance = _ref.appearance,
    _ref$elemBefore = _ref.elemBefore,
    elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
    _ref$isRemovable = _ref.isRemovable,
    isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
    _ref$text = _ref.text,
    text = _ref$text === void 0 ? '' : _ref$text,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'standard' : _ref$color,
    href = _ref.href,
    removeButtonLabel = _ref.removeButtonLabel,
    testId = _ref.testId,
    _ref$onBeforeRemoveAc = _ref.onBeforeRemoveAction,
    onBeforeRemoveAction = _ref$onBeforeRemoveAc === void 0 ? defaultBeforeRemoveAction : _ref$onBeforeRemoveAc,
    _ref$onAfterRemoveAct = _ref.onAfterRemoveAction,
    onAfterRemoveAction = _ref$onAfterRemoveAct === void 0 ? noop : _ref$onAfterRemoveAct,
    linkComponent = _ref.linkComponent;
  var _useState = useState(TagStatus.Showing),
    _useState2 = _slicedToArray(_useState, 2),
    status = _useState2[0],
    setStatus = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHoverCloseButton = _useState4[0],
    setIsHoverCloseButton = _useState4[1];
  var onAfterRemoveActionWithAnalytics = useCallbackWithAnalytics(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: packageName,
      packageVersion: packageVersion
    }
  }, 'atlaskit');
  var handleRemoveComplete = useCallback(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = useCallback(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = useCallback(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';
    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = useCallback(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = useCallback(function () {
    return setStatus(TagStatus.Showing);
  }, []);
  var handleMouseOver = useCallback(function () {
    return setIsHoverCloseButton(true);
  }, []);
  var handleMouseOut = useCallback(function () {
    return setIsHoverCloseButton(false);
  }, []);
  var removeButton = isRemovable ? /*#__PURE__*/React.createElement(RemoveButton, {
    "aria-label": "".concat(removeButtonLabel || 'Remove', " ").concat(text),
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    testId: "close-button-".concat(testId)
  }) : undefined;
  var content = /*#__PURE__*/React.createElement(Content, {
    elemBefore: elemBefore,
    isRemovable: isRemovable,
    text: text,
    color: color,
    href: href,
    linkComponent: linkComponent
  });
  var hoverCloseButtonColors = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({
    backgroundColor: fg('platform-component-visual-refresh') ? "var(--ds-background-neutral-subtle, #00000000)" : undefined
  }, backgroundHoverCssVar, fg('platform-component-visual-refresh') ? undefined : removalHoverBackgroundColors), backgroundActiveCssVar, fg('platform-component-visual-refresh') ? undefined : removalActiveBackgroundColors), textDefaultCssVar, fg('platform-component-visual-refresh') ? undefined : removalTextColors), textActiveCssVar, fg('platform-component-visual-refresh') ? undefined : removalTextColors), textLinkCssVar, fg('platform-component-visual-refresh') ? undefined : removalTextColors);
  return /*#__PURE__*/React.createElement(ExitingPersistence, null, !(status === TagStatus.Removed) && /*#__PURE__*/React.createElement(ShrinkOut, null, function (motion) {
    return /*#__PURE__*/React.createElement(BaseTag, {
      ref: mergeRefs([motion.ref, ref]),
      appearance: appearance,
      color: color,
      testId: testId,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: isHoverCloseButton ? hoverCloseButtonColors : undefined,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      "data-ishoverclosebutton": isHoverCloseButton,
      href: href,
      before: /*#__PURE__*/React.createElement(Before, {
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton,
      className: ax([status === TagStatus.Removing && "_z30c1r31 _twwiglyw _1pka1o36 _bqhtfiwo"])
    });
  }));
});

/**
 * __Removable tag__
 *
 * A tag labels UI objects for quick recognition and navigation.
 *
 * Once a tag has been removed, it cannot be re-rendered. Removable tags are visible in "edit" mode or in multi-select controls.
 *
 */
var RemovableTag = /*#__PURE__*/memo(RemovableTagComponent);
export default RemovableTag;