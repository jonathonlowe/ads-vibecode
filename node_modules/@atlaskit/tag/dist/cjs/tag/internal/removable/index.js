/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./index.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _motion = require("@atlaskit/motion");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _styles = require("../../../styles");
var _base = _interopRequireDefault(require("../shared/base"));
var _before = _interopRequireDefault(require("../shared/before"));
var _content = _interopRequireDefault(require("../shared/content"));
var _removeButton = _interopRequireDefault(require("./remove-button"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var textLinkCssVar = '--ds-ctl';
var textDefaultCssVar = '--ds-ct';
var textActiveCssVar = '--ds-ctp';
var backgroundHoverCssVar = '--ds-cbh';
var backgroundActiveCssVar = '--ds-cba';
var TagStatus = /*#__PURE__*/function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
  return TagStatus;
}(TagStatus || {});
var packageName = "@atlaskit/tag";
var packageVersion = "14.0.7";
var defaultBeforeRemoveAction = function defaultBeforeRemoveAction() {
  return true;
};

/**
 * These hide the focus ring for the tag when its remove button is focused,
 * preventing a double focus ring.
 */
var removingStyles = null;
var RemovableTagComponent = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var appearance = _ref.appearance,
    _ref$elemBefore = _ref.elemBefore,
    elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
    _ref$isRemovable = _ref.isRemovable,
    isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
    _ref$text = _ref.text,
    text = _ref$text === void 0 ? '' : _ref$text,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'standard' : _ref$color,
    href = _ref.href,
    removeButtonLabel = _ref.removeButtonLabel,
    testId = _ref.testId,
    _ref$onBeforeRemoveAc = _ref.onBeforeRemoveAction,
    onBeforeRemoveAction = _ref$onBeforeRemoveAc === void 0 ? defaultBeforeRemoveAction : _ref$onBeforeRemoveAc,
    _ref$onAfterRemoveAct = _ref.onAfterRemoveAction,
    onAfterRemoveAction = _ref$onAfterRemoveAct === void 0 ? _noop.default : _ref$onAfterRemoveAct,
    linkComponent = _ref.linkComponent;
  var _useState = (0, _react.useState)(TagStatus.Showing),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    status = _useState2[0],
    setStatus = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isHoverCloseButton = _useState4[0],
    setIsHoverCloseButton = _useState4[1];
  var onAfterRemoveActionWithAnalytics = (0, _analyticsNext.useCallbackWithAnalytics)(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: packageName,
      packageVersion: packageVersion
    }
  }, 'atlaskit');
  var handleRemoveComplete = (0, _react.useCallback)(function () {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  var handleRemoveRequest = (0, _react.useCallback)(function () {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  var onKeyPress = (0, _react.useCallback)(function (e) {
    var spacebarOrEnter = e.key === ' ' || e.key === 'Enter';
    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  var removingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Removing);
  }, []);
  var showingTag = (0, _react.useCallback)(function () {
    return setStatus(TagStatus.Showing);
  }, []);
  var handleMouseOver = (0, _react.useCallback)(function () {
    return setIsHoverCloseButton(true);
  }, []);
  var handleMouseOut = (0, _react.useCallback)(function () {
    return setIsHoverCloseButton(false);
  }, []);
  var removeButton = isRemovable ? /*#__PURE__*/React.createElement(_removeButton.default, {
    "aria-label": "".concat(removeButtonLabel || 'Remove', " ").concat(text),
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    testId: "close-button-".concat(testId)
  }) : undefined;
  var content = /*#__PURE__*/React.createElement(_content.default, {
    elemBefore: elemBefore,
    isRemovable: isRemovable,
    text: text,
    color: color,
    href: href,
    linkComponent: linkComponent
  });
  var hoverCloseButtonColors = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({
    backgroundColor: (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? "var(--ds-background-neutral-subtle, #00000000)" : undefined
  }, backgroundHoverCssVar, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? undefined : _styles.removalHoverBackgroundColors), backgroundActiveCssVar, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? undefined : _styles.removalActiveBackgroundColors), textDefaultCssVar, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? undefined : _styles.removalTextColors), textActiveCssVar, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? undefined : _styles.removalTextColors), textLinkCssVar, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? undefined : _styles.removalTextColors);
  return /*#__PURE__*/React.createElement(_motion.ExitingPersistence, null, !(status === TagStatus.Removed) && /*#__PURE__*/React.createElement(_motion.ShrinkOut, null, function (motion) {
    return /*#__PURE__*/React.createElement(_base.default, {
      ref: (0, _mergeRefs.default)([motion.ref, ref]),
      appearance: appearance,
      color: color,
      testId: testId,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: isHoverCloseButton ? hoverCloseButtonColors : undefined,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      "data-ishoverclosebutton": isHoverCloseButton,
      href: href,
      before: /*#__PURE__*/React.createElement(_before.default, {
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton,
      className: (0, _runtime.ax)([status === TagStatus.Removing && "_z30c1r31 _twwiglyw _1pka1o36 _bqhtfiwo"])
    });
  }));
});

/**
 * __Removable tag__
 *
 * A tag labels UI objects for quick recognition and navigation.
 *
 * Once a tag has been removed, it cannot be re-rendered. Removable tags are visible in "edit" mode or in multi-select controls.
 *
 */
var RemovableTag = /*#__PURE__*/(0, _react.memo)(RemovableTagComponent);
var _default = exports.default = RemovableTag;