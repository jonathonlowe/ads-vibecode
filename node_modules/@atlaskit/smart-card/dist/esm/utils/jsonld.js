import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var emptyData = {
  '@context': {
    '@vocab': 'https://www.w3.org/ns/activitystreams#',
    atlassian: 'https://schema.atlassian.com/ns/vocabulary#',
    schema: 'http://schema.org/'
  },
  '@type': 'Object'
};
export var getEmptyJsonLd = function getEmptyJsonLd() {
  return emptyData;
};
export var getUnauthorizedJsonLd = function getUnauthorizedJsonLd() {
  return {
    meta: {
      visibility: 'restricted',
      access: 'unauthorized',
      auth: [],
      definitionId: 'provider-not-found'
    },
    data: _objectSpread({}, emptyData)
  };
};
export var getForbiddenJsonLd = function getForbiddenJsonLd() {
  return {
    meta: {
      visibility: 'restricted',
      access: 'forbidden',
      auth: [],
      definitionId: 'provider-not-found'
    },
    data: _objectSpread({}, emptyData)
  };
};