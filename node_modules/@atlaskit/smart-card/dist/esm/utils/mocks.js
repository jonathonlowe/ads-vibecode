import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { CardClient } from '@atlaskit/link-provider';
export var mockContext = {
  '@vocab': 'https://www.w3.org/ns/activitystreams#',
  atlassian: 'https://schema.atlassian.com/ns/vocabulary#',
  schema: 'http://schema.org/'
};
export var mockGenerator = {
  '@type': 'Application',
  '@id': 'https://www.atlassian.com/#Jira',
  name: 'Jira'
};
export var mockByUrl = function mockByUrl(url) {
  return {
    meta: {
      visibility: 'public',
      access: 'granted',
      auth: [],
      definitionId: 'd1',
      key: 'object-provider',
      resourceType: 'object-resource',
      subproduct: 'object-subproduct',
      product: 'object-product'
    },
    data: {
      '@context': {
        '@vocab': 'https://www.w3.org/ns/activitystreams#',
        atlassian: 'https://schema.atlassian.com/ns/vocabulary#',
        schema: 'http://schema.org/'
      },
      '@type': 'Object',
      name: url,
      summary: 'Here is your serving of cheese: ðŸ§€',
      'schema:potentialAction': {
        '@id': 'comment',
        '@type': 'CommentAction',
        identifier: 'object-provider',
        name: 'Comment'
      },
      preview: {
        href: 'https://www.ilovecheese.com'
      },
      url: url
    }
  };
};
var errorResponseData = {
  '@context': {
    '@vocab': 'https://www.w3.org/ns/activitystreams#',
    atlassian: 'https://schema.atlassian.com/ns/vocabulary#',
    schema: 'http://schema.org/'
  },
  '@type': 'Object',
  name: 'I love cheese',
  url: 'https://some.url'
};
var successfulResponseData = _objectSpread(_objectSpread({}, errorResponseData), {}, {
  summary: 'Here is your serving of cheese: ðŸ§€',
  'schema:potentialAction': {
    '@id': 'download',
    '@type': 'DownloadAction',
    identifier: 'object-provider',
    name: 'Download'
  },
  'atlassian:downloadUrl': 'https://some-download.url',
  'atlassian:ari': 'ari:cloud:example:1234',
  preview: {
    href: 'https://www.ilovecheese.com'
  }
});
var jsonLdResponse = {
  meta: {
    visibility: 'public',
    access: 'granted',
    auth: [],
    definitionId: 'd1',
    key: 'object-provider'
  },
  data: successfulResponseData
};
var nounDataResponse = {
  nounData: {
    id: 'I love cheese',
    displayName: 'I love cheese',
    url: 'https://some.url',
    lastUpdatedAt: '2025-01-08T22:26:52.501Z',
    thumbnail: {
      externalUrl: 'https://www.ilovecheese.com'
    },
    'atlassian:design': {
      liveEmbedUrl: 'https://www.ilovecheese.com',
      type: 'FILE',
      inspectUrl: 'https://www.ilovecheese.com',
      iconUrl: 'https://www.ilovecheese.com'
    }
  }
};
export var mocks = {
  success: _objectSpread({}, jsonLdResponse),
  nounDataSuccess: _objectSpread(_objectSpread(_objectSpread({}, jsonLdResponse), nounDataResponse), {}, {
    meta: _objectSpread(_objectSpread({}, jsonLdResponse.meta), {}, {
      generator: {
        name: 'I love cheese',
        icon: {
          url: 'https://www.ilovecheese.com'
        }
      }
    })
  }),
  notFound: {
    meta: {
      visibility: 'not_found',
      access: 'forbidden',
      auth: [],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: errorResponseData
  },
  forbidden: {
    meta: {
      visibility: 'restricted',
      access: 'forbidden',
      auth: [{
        key: 'some-flow',
        displayName: 'Flow',
        url: 'https://outbound-auth/flow'
      }],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: errorResponseData
  },
  forbiddenWithNoAuth: {
    meta: {
      visibility: 'restricted',
      access: 'forbidden',
      auth: [],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: errorResponseData
  },
  unauthorized: {
    meta: {
      visibility: 'restricted',
      access: 'unauthorized',
      auth: [{
        key: 'some-flow',
        displayName: 'Flow',
        url: 'https://outbound-auth/flow'
      }],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: errorResponseData
  },
  unauthorizedWithNoAuth: {
    meta: {
      visibility: 'restricted',
      access: 'unauthorized',
      auth: [],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: errorResponseData
  },
  actionSuccess: {
    meta: {
      visibility: 'public',
      access: 'granted',
      auth: [],
      definitionId: 'd1'
    },
    data: {
      status: 'CompletedStatus'
    }
  },
  analytics: {
    status: 'resolved',
    details: {
      meta: {
        visibility: 'public',
        access: 'granted',
        auth: [],
        definitionId: 'spaghetti-id',
        key: 'spaghetti-key',
        resourceType: 'spaghetti-resource',
        subproduct: 'spaghetti-subproduct',
        product: 'spaghetti-product'
      }
    }
  },
  withDatasource: {
    meta: {
      visibility: 'public',
      access: 'granted',
      auth: [],
      definitionId: 'd1',
      key: 'object-provider'
    },
    data: successfulResponseData,
    datasources: [{
      key: 'datasource-jira-issues',
      parameters: {
        jql: '(text ~ "test*" OR summary ~ "test*") order by created DESC',
        cloudId: '16f8b71e'
      },
      id: '1234-test-id-321',
      ari: 'ari:cloud:linking-platform::datasource/1234-test-id-321',
      description: 'For extracting a list of Jira issues using JQL',
      name: 'Jira issues'
    }]
  }
};
export var fakeResponse = function fakeResponse() {
  return Promise.resolve(mocks.success);
};
export var fakeFactory = function fakeFactory(implementation, implementationPost, implementationPrefetch, implementationAri) {
  return /*#__PURE__*/function (_CardClient) {
    function CustomClient() {
      _classCallCheck(this, CustomClient);
      return _callSuper(this, CustomClient, arguments);
    }
    _inherits(CustomClient, _CardClient);
    return _createClass(CustomClient, [{
      key: "fetchData",
      value: // @ts-ignore
      function () {
        var _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return implementation(url);
              case 2:
                return _context.abrupt("return", _context.sent);
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function fetchData(_x) {
          return _fetchData.apply(this, arguments);
        }
        return fetchData;
      }() // @ts-ignore
    }, {
      key: "postData",
      value: function () {
        var _postData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return implementationPost();
              case 2:
                return _context2.abrupt("return", _context2.sent);
              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        function postData() {
          return _postData.apply(this, arguments);
        }
        return postData;
      }() // @ts-ignore
    }, {
      key: "prefetchData",
      value: function () {
        var _prefetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return implementationPrefetch();
              case 2:
                return _context3.abrupt("return", _context3.sent);
              case 3:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        function prefetchData() {
          return _prefetchData.apply(this, arguments);
        }
        return prefetchData;
      }() // @ts-ignore
    }, {
      key: "fetchDataAris",
      value: function () {
        var _fetchDataAris = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(aris) {
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return implementationAri(aris);
              case 2:
                return _context4.abrupt("return", _context4.sent);
              case 3:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        function fetchDataAris(_x2) {
          return _fetchDataAris.apply(this, arguments);
        }
        return fetchDataAris;
      }()
    }]);
  }(CardClient);
};
export var waitFor = function waitFor() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return new Promise(function (res) {
    return setTimeout(res, time);
  });
};