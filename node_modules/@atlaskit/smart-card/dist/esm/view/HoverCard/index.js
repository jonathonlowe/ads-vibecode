import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { di } from 'react-magnetic-di';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { useAnalyticsEvents } from '../../common/analytics/generated/use-analytics-events';
import { CardDisplay } from '../../constants';
import { failUfoExperience, startUfoExperience } from '../../state/analytics';
import { SmartLinkModalProvider } from '../../state/modal';
import { useSmartLinkAnalyticsContext } from '../../utils/analytics/SmartLinkAnalyticsContext';
import { HOVER_CARD_SOURCE, HoverCardComponent } from './components/HoverCardComponent';
var HoverCardWithErrorBoundary = function HoverCardWithErrorBoundary(props) {
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var url = props.url,
    id = props.id,
    children = props.children;
  var analyticsContext = useSmartLinkAnalyticsContext({
    display: CardDisplay.HoverCardPreview,
    id: id,
    source: HOVER_CARD_SOURCE,
    url: url
  });
  var onError = useCallback(function (error, info) {
    startUfoExperience('smart-link-rendered', id || 'NULL');
    failUfoExperience('smart-link-rendered', id || 'NULL');
    failUfoExperience('smart-link-authenticated', id || 'NULL');
    fireEvent('ui.smartLink.renderFailed', _objectSpread(_objectSpread({}, analyticsContext === null || analyticsContext === void 0 ? void 0 : analyticsContext.attributes), {}, {
      display: CardDisplay.HoverCardPreview,
      id: id !== null && id !== void 0 ? id : null,
      error: error,
      errorInfo: info
    }));
  }, [analyticsContext, id, fireEvent]);
  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    fallback: children,
    onError: onError
  }, /*#__PURE__*/React.createElement(SmartLinkModalProvider, null, /*#__PURE__*/React.createElement(HoverCardComponent, props, children)));
};
var HoverCardWithoutAnalyticsContext = withAnalyticsEvents()(HoverCardWithErrorBoundary);

/**
 * A hover preview component using within smart links,
 * e.g. inline card's hover preview and auth tooltip, flexible card's hover preview.
 *
 * This component contains additional props that smart-card internal components
 * use to configure hover preview behaviour.
 */
export var HoverCard = function HoverCard(props) {
  return /*#__PURE__*/React.createElement(HoverCardWithoutAnalyticsContext, props);
};

/**
 * A standalone hover preview component
 */
export var StandaloneHoverCard = function StandaloneHoverCard(props) {
  return /*#__PURE__*/React.createElement(HoverCard, props);
};