import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { useEffect, useRef, useState } from 'react';
/**
 * A kind of cheap logarithmic backoff. Fire analytics after the user has
 * dwelled for 5 seconds, then 10 seconds, and so on.
 */
var INTERVALS_TO_LOG = [5, 10, 15, 20, 25, 30, 45, 60, 90, 120, 180];
export var IframeDwellTracker = function IframeDwellTracker(_ref) {
  var isIframeLoaded = _ref.isIframeLoaded,
    isMouseOver = _ref.isMouseOver,
    isWindowFocused = _ref.isWindowFocused,
    iframePercentVisible = _ref.iframePercentVisible,
    onIframeDwell = _ref.onIframeDwell;
  var _useState = useState({
      time: 0,
      percentVisible: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    dwell = _useState2[0],
    setDwell = _useState2[1];
  var dwellTimeoutId = useRef();

  // fire analytics when the dwell timer reaches 5 seconds
  useEffect(function () {
    if (dwell.time > 0 && INTERVALS_TO_LOG.includes(dwell.time)) {
      onIframeDwell && onIframeDwell(dwell.time, dwell.percentVisible);
    }
  }, [dwell, onIframeDwell]);

  // start and stop tracking dwell time
  useEffect(function () {
    var incrementDwellTime = function incrementDwellTime() {
      // callback is called on dwell state changes, so change percentVisible and time together
      setDwell(function (_ref2) {
        var time = _ref2.time;
        return {
          time: time + 1,
          // snapshot of percent visible, rounded down to nearest 5%
          percentVisible: Math.floor((iframePercentVisible || 0) * 20) * 5
        };
      });
    };
    if (isIframeLoaded && isMouseOver && isWindowFocused && iframePercentVisible > 0.75) {
      if (dwellTimeoutId.current) {
        clearInterval(dwellTimeoutId.current);
      }
      dwellTimeoutId.current = setInterval(incrementDwellTime, 1000);
    }
    return function () {
      if (dwellTimeoutId.current) {
        clearInterval(dwellTimeoutId.current);
      }
    };
  }, [setDwell, isMouseOver, isWindowFocused, isIframeLoaded, iframePercentVisible]);
  return null;
};