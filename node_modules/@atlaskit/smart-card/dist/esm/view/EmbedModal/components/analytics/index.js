import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback } from 'react';
import { CardDisplay } from '../../../../constants';
import { failUfoExperience, startUfoExperience, succeedUfoExperience } from '../../../../state/analytics';
import { EmbedModalSize } from '../../types';
var getResizeFrom = function getResizeFrom(size) {
  return size === EmbedModalSize.Small ? EmbedModalSize.Large : EmbedModalSize.Small;
};
var withAnalytics = function withAnalytics(Component) {
  return function (props) {
    var fireEvent = props.fireEvent,
      extensionKey = props.extensionKey,
      id = props.id,
      onClose = props.onClose,
      onOpen = props.onOpen,
      onOpenFailed = props.onOpenFailed,
      onResize = props.onResize,
      origin = props.origin;
    var handleOnOpen = useCallback(function (context) {
      fireEvent === null || fireEvent === void 0 || fireEvent('screen.embedPreviewModal.viewed', {
        origin: origin !== null && origin !== void 0 ? origin : null,
        size: context.size
      });
      succeedUfoExperience('smart-link-rendered', id || 'NULL', {
        extensionKey: extensionKey,
        display: CardDisplay.EmbedPreview
      });

      // UFO will disregard this if authentication experience has not yet been started
      succeedUfoExperience('smart-link-authenticated', id || 'NULL', {
        display: CardDisplay.EmbedPreview
      });
      fireEvent === null || fireEvent === void 0 || fireEvent('ui.smartLink.renderSuccess', {
        display: CardDisplay.EmbedPreview
      });
      if (onOpen) {
        onOpen(context);
      }
    }, [fireEvent, extensionKey, id, onOpen, origin]);
    var handleOnOpenFailed = useCallback(function (error, errorInfo) {
      startUfoExperience('smart-link-rendered', id || 'NULL');
      failUfoExperience('smart-link-rendered', id || 'NULL');
      failUfoExperience('smart-link-authenticated', id || 'NULL');
      fireEvent === null || fireEvent === void 0 || fireEvent('ui.smartLink.renderFailed', {
        display: CardDisplay.EmbedPreview,
        error: error,
        errorInfo: errorInfo,
        id: id !== null && id !== void 0 ? id : null
      });
      if (onOpenFailed) {
        onOpenFailed(error, errorInfo);
      }
    }, [fireEvent, id, onOpenFailed]);
    var handleOnClose = useCallback(function (context) {
      var _context$duration;
      fireEvent === null || fireEvent === void 0 || fireEvent('ui.modal.closed.embedPreview', {
        origin: origin !== null && origin !== void 0 ? origin : null,
        previewTime: (_context$duration = context.duration) !== null && _context$duration !== void 0 ? _context$duration : null,
        size: context.size
      });
      if (onClose) {
        onClose(context);
      }
    }, [fireEvent, onClose, origin]);
    var handleOnResize = useCallback(function (context) {
      fireEvent === null || fireEvent === void 0 || fireEvent('ui.button.clicked.embedPreviewResize', {
        newSize: context.size,
        origin: origin !== null && origin !== void 0 ? origin : null,
        previousSize: getResizeFrom(context.size)
      });
      if (onResize) {
        onResize(context);
      }
    }, [fireEvent, onResize, origin]);
    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
      onClose: handleOnClose,
      onOpen: handleOnOpen,
      onOpenFailed: handleOnOpenFailed,
      onResize: handleOnResize
    }));
  };
};
export default withAnalytics;