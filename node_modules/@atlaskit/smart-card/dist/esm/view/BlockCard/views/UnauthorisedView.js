/* UnauthorisedView.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["testId"];
import "./UnauthorisedView.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useMemo } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { extractProvider } from '@atlaskit/link-extractors';
import { fg } from '@atlaskit/platform-feature-flags';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../messages';
import { hasAuthScopeOverrides } from '../../../state/helpers';
import UnauthorisedViewContent from '../../common/UnauthorisedViewContent';
import { AuthorizeAction } from '../actions/AuthorizeAction';
import UnresolvedView from './unresolved-view';
import { withFlexibleUIBlockCardStyle } from './utils/withFlexibleUIBlockCardStyle';
var contentStylesOld = null;
var contentStyles = null;

/**
 * This view represents a Block card that has an 'Unauthorized' status .
 * It should have a "Connect" button that will allow a user to connect their account and view the block card.
 *
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
var UnauthorisedView = function UnauthorisedView(_ref) {
  var _cardState$details, _extractProvider;
  var _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-unauthorized-view' : _ref$testId,
    props = _objectWithoutProperties(_ref, _excluded);
  var cardState = props.cardState,
    onAuthorize = props.onAuthorize;
  var data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  var providerName = (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text;
  var isProductIntegrationSupported = hasAuthScopeOverrides(cardState === null || cardState === void 0 ? void 0 : cardState.details);
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var handleAuthorize = useCallback(function () {
    if (onAuthorize) {
      fireEvent('track.applicationAccount.authStarted', {});
      onAuthorize();
    }
  }, [onAuthorize, fireEvent]);
  var content = useMemo(function () {
    return onAuthorize ? /*#__PURE__*/React.createElement(UnauthorisedViewContent, {
      providerName: providerName,
      isProductIntegrationSupported: isProductIntegrationSupported,
      testId: testId
    }) : /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[providerName ? 'unauthorised_account_description' : 'unauthorised_account_description_no_provider'], {
      values: {
        context: providerName
      }
    }));
  }, [isProductIntegrationSupported, onAuthorize, providerName, testId]);
  var actions = useMemo(function () {
    return onAuthorize ? [AuthorizeAction(handleAuthorize, providerName)] : [];
  }, [handleAuthorize, onAuthorize, providerName]);
  return /*#__PURE__*/React.createElement(UnresolvedView, _extends({}, props, {
    actions: actions,
    testId: testId
  }), /*#__PURE__*/React.createElement("div", {
    "data-testid": "".concat(testId, "-content"),
    className: ax([fg('platform-linking-visual-refresh-v1') ? "_11c8dcr7 _syaz1fxt _19pku2gc" : "_11c8dcr7 _syaz131l _19pkcxkx"])
  }, content));
};
export default withFlexibleUIBlockCardStyle(UnauthorisedView);