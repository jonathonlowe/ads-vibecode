import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { useControlDataExportConfig } from '../../state/hooks/use-control-data-export-config';
import { getIsDataExportEnabled } from '../../utils/should-data-export';
import { handleClickCommon } from '../common/utils';
import { CardLinkView } from '../LinkView';
import ErroredView from './views/ErroredView';
import ForbiddenView from './views/ForbiddenView';
import NotFoundView from './views/NotFoundView';
import ResolvedView from './views/ResolvedView';
import UnauthorisedView from './views/UnauthorisedView';
export var BlockCard = function BlockCard(_ref) {
  var id = _ref.id,
    url = _ref.url,
    cardState = _ref.cardState,
    authFlow = _ref.authFlow,
    handleAuthorize = _ref.handleAuthorize,
    handleFrameClick = _ref.handleFrameClick,
    renderers = _ref.renderers,
    isSelected = _ref.isSelected,
    onResolve = _ref.onResolve,
    onError = _ref.onError,
    testId = _ref.testId,
    actionOptions = _ref.actionOptions;
  var status = cardState.status;
  var blockCardProps = {
    id: id,
    cardState: cardState,
    url: url,
    testId: testId,
    onClick: function onClick(event) {
      return handleClickCommon(event, handleFrameClick);
    },
    onError: onError,
    onResolve: onResolve,
    renderers: renderers,
    actionOptions: actionOptions
  };
  var _useControlDataExport = useControlDataExportConfig(),
    _useControlDataExport2 = _useControlDataExport.shouldControlDataExport,
    shouldControlDataExport = _useControlDataExport2 === void 0 ? false : _useControlDataExport2;
  switch (status) {
    case 'pending':
    case 'resolving':
      return /*#__PURE__*/React.createElement(ResolvedView, _extends({}, blockCardProps, {
        testId: "smart-block-resolving-view"
      }));
    case 'resolved':
      if (fg('platform_smart_links_controlled_dsp_export_view')) {
        if (getIsDataExportEnabled(shouldControlDataExport, cardState.details)) {
          return /*#__PURE__*/React.createElement(UnauthorisedView, _extends({}, blockCardProps, {
            onAuthorize: handleAuthorize
          }));
        }
      }
      return /*#__PURE__*/React.createElement(ResolvedView, blockCardProps);
    case 'unauthorized':
      return /*#__PURE__*/React.createElement(UnauthorisedView, _extends({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'forbidden':
      return /*#__PURE__*/React.createElement(ForbiddenView, _extends({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'not_found':
      return /*#__PURE__*/React.createElement(NotFoundView, _extends({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'fallback':
    case 'errored':
    default:
      if (onError) {
        onError({
          url: url,
          status: status
        });
      }
      if (authFlow && authFlow === 'disabled') {
        return /*#__PURE__*/React.createElement(CardLinkView, {
          link: url,
          isSelected: isSelected,
          onClick: handleFrameClick,
          testId: "".concat(testId, "-").concat(status)
        });
      }
      return /*#__PURE__*/React.createElement(ErroredView, _extends({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
  }
};