/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import LockLockedIcon from '@atlaskit/icon/core/lock-locked';
import LegacyLockIcon from '@atlaskit/icon/glyph/lock-filled';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { N500, R400 } from '@atlaskit/theme/colors';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { ActionButton } from '../common/action-button';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import withFrameStyleControl from '../utils/withFrameStyleControl';
var styles = {
  iconWrapper: "_2hwx1i6y"
};
var fallbackUnauthorizedIcon = function fallbackUnauthorizedIcon() {
  if (fg('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/React.createElement(LockLockedIcon, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small"
    });
  }
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: styles.iconWrapper
    }, /*#__PURE__*/React.createElement(LockLockedIcon, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small"
    }));
  }
  return /*#__PURE__*/React.createElement(AKIconWrapper, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
    label: "error",
    size: "small",
    primaryColor: "var(--ds-icon-danger, ".concat(R400, ")")
  }));
};
export var InlineCardUnauthorizedView = function InlineCardUnauthorizedView(_ref) {
  var url = _ref.url,
    id = _ref.id,
    icon = _ref.icon,
    onAuthorise = _ref.onAuthorise,
    onClick = _ref.onClick,
    isSelected = _ref.isSelected,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'inline-card-unauthorized-view' : _ref$testId,
    _ref$showHoverPreview = _ref.showHoverPreview,
    showHoverPreview = _ref$showHoverPreview === void 0 ? false : _ref$showHoverPreview,
    truncateInline = _ref.truncateInline,
    context = _ref.context;
  var frameRef = React.useRef(null);
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var handleConnectAccount = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (onAuthorise) {
      fireEvent('track.applicationAccount.authStarted', {});
      onAuthorise();
    }
  }, [fireEvent, onAuthorise]);
  var renderActionButton = React.useCallback(function () {
    var Button = withFrameStyleControl(ButtonOld, frameRef);
    if (fg('platform-linking-visual-refresh-v1')) {
      return /*#__PURE__*/React.createElement(ActionButton, {
        onClick: handleConnectAccount,
        testId: "button-connect-account"
      }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_link_account_card_name, {
        values: {
          context: context
        }
      })));
    }
    return onAuthorise ? /*#__PURE__*/React.createElement(Button, {
      spacing: "none",
      component: IconStyledButtonOldVisualRefresh,
      onClick: handleConnectAccount,
      testId: "button-connect-account"
    }, /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.connect_link_account_card_name, {
      values: {
        context: context
      }
    }))) : undefined;
  }, [handleConnectAccount, onAuthorise, context]);
  var inlineCardUnauthenticatedView = /*#__PURE__*/React.createElement(Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
    icon: icon ? icon : fallbackUnauthorizedIcon(),
    title: url,
    link: url,
    onClick: onClick,
    titleColor: "var(--ds-text-subtle, ".concat(N500, ")")
  }), renderActionButton());
  if (onAuthorise && showHoverPreview) {
    return /*#__PURE__*/React.createElement(HoverCard, {
      url: url,
      id: id
    }, inlineCardUnauthenticatedView);
  }
  return inlineCardUnauthenticatedView;
};