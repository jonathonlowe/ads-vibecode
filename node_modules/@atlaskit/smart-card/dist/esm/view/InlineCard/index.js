import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { extractProvider, extractSmartLinkProvider } from '@atlaskit/link-extractors';
import { useFeatureFlag } from '@atlaskit/link-provider';
import { fg } from '@atlaskit/platform-feature-flags';
import { SmartLinkStatus } from '../../constants';
import { extractRequestAccessContextImproved } from '../../extractors/common/context/extractAccessContext';
import { extractInlineProps } from '../../extractors/inline';
import { getExtensionKey } from '../../state/helpers';
import { getEmptyJsonLd, getForbiddenJsonLd } from '../../utils/jsonld';
import { CardLinkView } from '../LinkView';
import { InlineCardErroredView } from './ErroredView';
import { InlineCardForbiddenView } from './ForbiddenView';
import { InlineCardResolvedView } from './ResolvedView';
import { InlineCardResolvingView } from './ResolvingView';
import { InlineCardUnauthorizedView } from './UnauthorisedView';
export { InlineCardResolvedView, InlineCardResolvingView, InlineCardErroredView, InlineCardForbiddenView, InlineCardUnauthorizedView };
export var InlineCard = function InlineCard(_ref) {
  var _details$meta, _providerForbidden$te;
  var id = _ref.id,
    url = _ref.url,
    cardState = _ref.cardState,
    handleAuthorize = _ref.handleAuthorize,
    handleFrameClick = _ref.handleFrameClick,
    isSelected = _ref.isSelected,
    isHovered = _ref.isHovered,
    renderers = _ref.renderers,
    onResolve = _ref.onResolve,
    onError = _ref.onError,
    testId = _ref.testId,
    inlinePreloaderStyle = _ref.inlinePreloaderStyle,
    showHoverPreview = _ref.showHoverPreview,
    hoverPreviewOptions = _ref.hoverPreviewOptions,
    actionOptions = _ref.actionOptions,
    removeTextHighlightingFromTitle = _ref.removeTextHighlightingFromTitle,
    resolvingPlaceholder = _ref.resolvingPlaceholder,
    truncateInline = _ref.truncateInline;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var status = cardState.status,
    details = cardState.details;
  var cardDetails = details && details.data || getEmptyJsonLd();
  var extensionKey = getExtensionKey(details);
  var testIdWithStatus = testId ? "".concat(testId, "-").concat(status, "-view") : undefined;
  var showHoverPreviewFlag = useFeatureFlag('showHoverPreview');
  if (showHoverPreview === undefined && showHoverPreviewFlag !== undefined) {
    showHoverPreview = Boolean(showHoverPreviewFlag);
  }
  var resolvedProps = status === SmartLinkStatus.Resolved ? extractInlineProps(details, renderers, removeTextHighlightingFromTitle, false) : {};
  useEffect(function () {
    switch (status) {
      case SmartLinkStatus.Resolved:
        onResolve === null || onResolve === void 0 || onResolve({
          url: url,
          title: resolvedProps.title
        });
        break;
      case SmartLinkStatus.Errored:
      case SmartLinkStatus.Fallback:
      case SmartLinkStatus.Forbidden:
      case SmartLinkStatus.NotFound:
      case SmartLinkStatus.Unauthorized:
        if (onError) {
          onError({
            status: status,
            url: url
          });
        }
        break;
    }
  }, [onError, onResolve, status, url, resolvedProps.title]);
  switch (status) {
    case 'pending':
    case 'resolving':
      return /*#__PURE__*/React.createElement(InlineCardResolvingView, {
        url: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        testId: testIdWithStatus,
        inlinePreloaderStyle: inlinePreloaderStyle,
        resolvingPlaceholder: resolvingPlaceholder,
        truncateInline: truncateInline
      });
    case 'resolved':
      return /*#__PURE__*/React.createElement(InlineCardResolvedView, _extends({}, resolvedProps, {
        id: id,
        showHoverPreview: showHoverPreview,
        hoverPreviewOptions: hoverPreviewOptions,
        actionOptions: actionOptions,
        link: url,
        isSelected: isSelected,
        isHovered: isHovered,
        onClick: handleFrameClick,
        testId: testIdWithStatus,
        truncateInline: truncateInline
      }));
    case 'unauthorized':
      var provider = fg('smart_links_noun_support') ? extractSmartLinkProvider(details) : extractProvider(cardDetails);
      return /*#__PURE__*/React.createElement(InlineCardUnauthorizedView, {
        icon: provider && provider.icon,
        context: provider && provider.text,
        url: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        onAuthorise: handleAuthorize,
        testId: testIdWithStatus,
        showHoverPreview: showHoverPreview,
        id: id,
        extensionKey: extensionKey,
        truncateInline: truncateInline
      });
    case 'forbidden':
      var providerForbidden = fg('smart_links_noun_support') ? extractSmartLinkProvider(details) : extractProvider(cardDetails);
      var cardMetadata = (_details$meta = details === null || details === void 0 ? void 0 : details.meta) !== null && _details$meta !== void 0 ? _details$meta : getForbiddenJsonLd().meta;
      var requestAccessContext = extractRequestAccessContextImproved({
        jsonLd: cardMetadata,
        url: url,
        product: (_providerForbidden$te = providerForbidden === null || providerForbidden === void 0 ? void 0 : providerForbidden.text) !== null && _providerForbidden$te !== void 0 ? _providerForbidden$te : '',
        createAnalyticsEvent: createAnalyticsEvent
      });
      return /*#__PURE__*/React.createElement(InlineCardForbiddenView, {
        url: url,
        icon: providerForbidden && providerForbidden.icon,
        context: providerForbidden === null || providerForbidden === void 0 ? void 0 : providerForbidden.text,
        isSelected: isSelected,
        onClick: handleFrameClick,
        onAuthorise: handleAuthorize,
        testId: testIdWithStatus,
        requestAccessContext: requestAccessContext,
        showHoverPreview: showHoverPreview,
        truncateInline: truncateInline
      });
    case 'not_found':
      var providerNotFound = fg('smart_links_noun_support') ? extractSmartLinkProvider(details) : extractProvider(cardDetails);
      return /*#__PURE__*/React.createElement(InlineCardErroredView, {
        url: url,
        icon: providerNotFound && providerNotFound.icon,
        isSelected: isSelected,
        message: "Can't find link",
        onClick: handleFrameClick,
        testId: testIdWithStatus || 'inline-card-not-found-view',
        showHoverPreview: showHoverPreview,
        truncateInline: truncateInline
      });
    case 'fallback':
    case 'errored':
    default:
      return /*#__PURE__*/React.createElement(CardLinkView, {
        link: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        testId: testIdWithStatus || 'inline-card-errored-view',
        truncateInline: truncateInline
      });
  }
};