import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// This is another layer on top of the AFE ManualRulesContainer.
// It is necessary that this container wraps the entire "automation" component and not nested. Else the user input form will not render correctly.
// This container provides an automation context to all children components through the useAutomationMenu hook.
import React, { createContext, useContext, useState } from 'react';
import { ManualRulesContainer } from '../../manual-triggers-container';
var AutomationMenuContext = /*#__PURE__*/createContext(undefined);
var AutomationMenuProvider = function AutomationMenuProvider(_ref) {
  var children = _ref.children,
    value = _ref.value;
  return /*#__PURE__*/React.createElement(AutomationMenuContext.Provider, {
    value: value
  }, children);
};

// Hook that can be used anywhere under the AutomationMenuContextContainer to access the AutomationMenuContext values
export var useAutomationMenu = function useAutomationMenu() {
  var context = useContext(AutomationMenuContext);
  if (context === undefined) {
    throw new Error('useAutomationMenu must be used within a AutomationMenuProvider');
  }
  return context;
};
export var AutomationMenuContextContainer = function AutomationMenuContextContainer(_ref2) {
  var baseAutomationUrl = _ref2.baseAutomationUrl,
    analyticsSource = _ref2.analyticsSource,
    objectAri = _ref2.objectAri,
    siteAri = _ref2.siteAri,
    canManageAutomation = _ref2.canManageAutomation,
    children = _ref2.children,
    emptyStateDescription = _ref2.emptyStateDescription,
    emptyStateAdminDescription = _ref2.emptyStateAdminDescription,
    _onRuleInvocationSuccess = _ref2.onRuleInvocationSuccess,
    _onRuleInvocationFailure = _ref2.onRuleInvocationFailure,
    onRuleInvocationLifecycleDone = _ref2.onRuleInvocationLifecycleDone;
  var _useState = useState('NONE'),
    _useState2 = _slicedToArray(_useState, 2),
    ruleExecutionState = _useState2[0],
    setRuleExecutionState = _useState2[1];
  return /*#__PURE__*/React.createElement(ManualRulesContainer, {
    site: siteAri,
    query: {
      objects: [objectAri]
    },
    onRuleInvocationLifecycleStarted: function onRuleInvocationLifecycleStarted() {
      setRuleExecutionState('NONE');
    },
    onRuleInvocationLifecycleDone: onRuleInvocationLifecycleDone,
    onRuleInvocationSuccess: function onRuleInvocationSuccess() {
      setRuleExecutionState('SUCCEED');
      _onRuleInvocationSuccess === null || _onRuleInvocationSuccess === void 0 || _onRuleInvocationSuccess();
    },
    onRuleInvocationFailure: function onRuleInvocationFailure() {
      setRuleExecutionState('FAILURE');
      _onRuleInvocationFailure === null || _onRuleInvocationFailure === void 0 || _onRuleInvocationFailure();
    }
  }, function (props) {
    var contextValue = _objectSpread(_objectSpread({}, props), {}, {
      fetchError: props.error,
      analyticsSource: analyticsSource,
      objectAri: objectAri,
      baseAutomationUrl: baseAutomationUrl,
      canManageAutomation: canManageAutomation,
      emptyStateDescription: emptyStateDescription,
      emptyStateAdminDescription: emptyStateAdminDescription,
      ruleExecutionState: ruleExecutionState
    });
    return /*#__PURE__*/React.createElement(AutomationMenuProvider, {
      value: contextValue
    }, children());
  });
};