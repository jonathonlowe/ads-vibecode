/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { forwardRef, useCallback, useMemo } from 'react';
import { LoadingButton } from '@atlaskit/button';
import Button, { IconButton, LinkButton, LinkIconButton } from '@atlaskit/button/new';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import Tooltip from '@atlaskit/tooltip';
import { SmartLinkSize } from '../../../../../../constants';
import { useFlexibleUiOptionContext } from '../../../../../../state/flexible-ui-context';
import { withOverrideCss } from '../../../common/with-override-css';
import { sizeToButtonSpacing } from '../../../utils';
// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var IconOnlyLarge = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var SizeSmall = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var SizeSmallIconOnly = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var SizeSmallNotIconOnly = null;
var IconButtonAppearanceMap = {
  default: 'default',
  danger: undefined,
  link: 'default',
  primary: 'primary',
  subtle: 'subtle',
  'subtle-link': 'subtle',
  warning: undefined
};
var ButtonAppearanceMap = {
  default: 'default',
  danger: 'danger',
  link: 'default',
  primary: 'primary',
  subtle: 'subtle',
  'subtle-link': 'subtle',
  warning: 'warning'
};
var tooltipOptions = {
  hideTooltipOnClick: true
};
var ActionButtonRefreshNew = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    content = _ref.content,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    isLoading = _ref.isLoading,
    onClick = _ref.onClick,
    size = _ref.size,
    testId = _ref.testId,
    tooltipMessage = _ref.tooltipMessage,
    isDisabled = _ref.isDisabled,
    href = _ref.href,
    ariaLabel = _ref.ariaLabel;
  var iconOnly = !content;
  var onButtonClick = useCallback(function (handler) {
    return function (e) {
      e.preventDefault();
      handler();
    };
  }, []);
  var button = useMemo(function () {
    var isLinkButton = !!href;
    var spacing = size === SmartLinkSize.Large || size === SmartLinkSize.XLarge ? 'default' : 'compact';
    if (iconOnly) {
      var icon = iconBefore || iconAfter;
      var iconFn = function iconFn() {
        return icon || null;
      };
      if (isLinkButton) {
        return /*#__PURE__*/React.createElement(LinkIconButton, {
          appearance: IconButtonAppearanceMap[appearance],
          icon: iconFn,
          href: href,
          isDisabled: isDisabled,
          isTooltipDisabled: false,
          label: tooltipMessage,
          onClick: onButtonClick(onClick),
          spacing: spacing,
          testId: testId,
          tooltip: tooltipOptions
        });
      }
      return /*#__PURE__*/React.createElement(IconButton, {
        appearance: IconButtonAppearanceMap[appearance],
        icon: iconFn,
        isDisabled: isDisabled,
        isLoading: isLoading,
        isTooltipDisabled: false,
        label: tooltipMessage,
        onClick: onButtonClick(onClick),
        spacing: spacing,
        testId: testId,
        tooltip: tooltipOptions
      });
    }
    var iconBeforeFn = function iconBeforeFn() {
      return iconBefore || null;
    };
    var iconAfterFn = function iconAfterFn() {
      return iconAfter || null;
    };
    if (isLinkButton) {
      return /*#__PURE__*/React.createElement(Tooltip, {
        content: tooltipMessage,
        hideTooltipOnClick: true,
        testId: "".concat(testId, "-tooltip")
      }, /*#__PURE__*/React.createElement(LinkButton, {
        appearance: ButtonAppearanceMap[appearance],
        "aria-label": ariaLabel,
        iconAfter: iconAfterFn,
        iconBefore: iconBeforeFn,
        isDisabled: isDisabled,
        href: href,
        onClick: onButtonClick(onClick),
        spacing: spacing,
        testId: testId
      }, content));
    }
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: tooltipMessage,
      hideTooltipOnClick: true,
      testId: "".concat(testId, "-tooltip")
    }, /*#__PURE__*/React.createElement(Button, {
      appearance: ButtonAppearanceMap[appearance],
      "aria-label": ariaLabel,
      iconAfter: iconAfterFn,
      iconBefore: iconBeforeFn,
      isDisabled: isDisabled,
      isLoading: isLoading,
      onClick: onButtonClick(onClick),
      spacing: spacing,
      testId: testId
    }, content));
  }, [appearance, ariaLabel, content, href, iconAfter, iconBefore, iconOnly, isDisabled, isLoading, onButtonClick, onClick, size, testId, tooltipMessage]);
  return /*#__PURE__*/React.createElement(Box, {
    testId: "".concat(testId, "-button-wrapper"),
    ref: ref
  }, button);
});

// On cleanup of platform-linking-visual-refresh-v1, this should become
// export default withOverrideCss(ActionButton);
var ActionButtonRefreshNewWithOverrideCss = withOverrideCss(ActionButtonRefreshNew);

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var ActionButtonNew = function ActionButtonNew(_ref2) {
  var _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,
    content = _ref2.content,
    iconAfter = _ref2.iconAfter,
    iconBefore = _ref2.iconBefore,
    isLoading = _ref2.isLoading,
    onClick = _ref2.onClick,
    size = _ref2.size,
    testId = _ref2.testId,
    tooltipMessage = _ref2.tooltipMessage,
    isDisabled = _ref2.isDisabled,
    href = _ref2.href,
    ariaLabel = _ref2.ariaLabel,
    className = _ref2.className;
  var iconOnly = !content;
  var onButtonClick = useCallback(function (handler) {
    return function (e) {
      e.preventDefault();
      handler();
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([size === SmartLinkSize.Large && iconOnly && "_1gflidpf _or3fidpf _1ddvidpf _1hhaidpf _yhjmidpf _1trnidpf _1fstidpf _1xceidpf _1gqnidpf _1qdmidpf _df2ridpf _j1twidpf _11lvidpf _192bidpf _vbn7idpf _wfu3idpf _1i3bidpf _13gwidpf _4wlcidpf _rehaidpf _mp2fidpf _ro8midpf _1l0qidpf _1bnaidpf _3kh9idpf _i2vxidpf _8pvjidpf _1e1oidpf _1vtwidpf _ijvwidpf _tpwpidpf _1ad8idpf", size === SmartLinkSize.Small && "_11c8dcr7 _k48p1wq8", size === SmartLinkSize.Small && iconOnly && "_1gfl1xvx _or3f1xvx _1ddv1xvx _1hha1xvx _yhjm1xvx _1trn1xvx _1fst1xvx _1xce1xvx _1gqn1xvx _1qdm1xvx _df2r1xvx _j1tw1xvx _11lv1xvx _192b1xvx _vbn71xvx _wfu31xvx", size === SmartLinkSize.Small && !iconOnly && "_11lvpdf9 _192bpdf9 _vbn7pdf9 _wfu3pdf9 _yhjmpdf9 _1trnpdf9 _1fstpdf9 _1xcepdf9", className]),
    "data-testid": "".concat(testId, "-button-wrapper")
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: tooltipMessage,
    hideTooltipOnClick: true,
    testId: "".concat(testId, "-tooltip")
  }, /*#__PURE__*/React.createElement(LoadingButton, {
    appearance: appearance,
    iconAfter: iconAfter,
    iconBefore: iconBefore,
    isDisabled: isDisabled,
    isLoading: isLoading,
    onClick: onButtonClick(onClick),
    spacing: sizeToButtonSpacing[size],
    testId: testId,
    href: href,
    "aria-label": ariaLabel
  }, content)));
};
var ActionButtonHideLegacyButton = function ActionButtonHideLegacyButton(props) {
  var ui = useFlexibleUiOptionContext();
  if (ui !== null && ui !== void 0 && ui.hideLegacyButton || ui !== null && ui !== void 0 && ui.removeBlockRestriction && fg('platform-linking-flexible-card-openness')) {
    return /*#__PURE__*/React.createElement(ActionButtonRefreshNewWithOverrideCss, props);
  }
  return /*#__PURE__*/React.createElement(ActionButtonNew, props);
};
var ActionButton = function ActionButton(props) {
  return fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(ActionButtonHideLegacyButton, props) : /*#__PURE__*/React.createElement(ActionButtonNew, props);
};
export default ActionButton;