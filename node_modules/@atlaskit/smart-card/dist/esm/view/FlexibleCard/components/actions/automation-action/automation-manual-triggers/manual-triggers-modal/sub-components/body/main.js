import React, { useEffect } from 'react';
import { useAutomationMenu } from '../../menu-context';
import { AutomationModalErrorState } from '../error-state';
import { AutomationModalRuleList } from '../rule-list';
import { Skeleton } from '../skeleton';
export var AutomationModalBody = function AutomationModalBody(_ref) {
  var selectedRule = _ref.selectedRule,
    setSelectedRule = _ref.setSelectedRule;
  var _useAutomationMenu = useAutomationMenu(),
    triggerFetch = _useAutomationMenu.triggerFetch,
    initialised = _useAutomationMenu.initialised,
    rules = _useAutomationMenu.rules,
    fetchError = _useAutomationMenu.fetchError;
  useEffect(function () {
    void triggerFetch();
    // Want to ensure that triggerFetch is only called once when the component is mounted.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (!initialised) {
    return /*#__PURE__*/React.createElement(Skeleton, {
      lineCount: 10
    });
  } else if (fetchError && rules.length === 0) {
    return /*#__PURE__*/React.createElement(AutomationModalErrorState, null);
  }
  return /*#__PURE__*/React.createElement(AutomationModalRuleList, {
    selectedRule: selectedRule,
    setSelectedRule: setSelectedRule
  });
};