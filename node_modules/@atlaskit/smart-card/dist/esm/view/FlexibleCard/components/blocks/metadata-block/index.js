/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["maxLines", "status", "testId", "primary", "secondary"];
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
/* eslint-disable @atlaskit/design-system/use-tokens-typography */

import { fg } from '@atlaskit/platform-feature-flags';
import { SmartLinkAlignment, SmartLinkDirection, SmartLinkSize, SmartLinkStatus, SmartLinkWidth } from '../../../../../constants';
import Block from '../block';
import ElementGroup from '../element-group';
import { renderElementItems } from '../utils';
var DEFAULT_MAX_LINES = 2;
var MAXIMUM_MAX_LINES = 2;
var MINIMUM_MAX_LINES = 1;
var truncateStyles = {
  '1': "_1reo15vq _18m915vq _1e0ccj1k _1bto1l2s _1nmz1hna _1yyjkb7n _sudp1e54",
  '2': "_1reo15vq _18m915vq _1e0ccj1k _1bto1l2s _1nmz1hna _1yyjcs5v _sudp1e54"
};
var sizeStylesOld = {
  xlarge: "_vwz41m1q _102k1k7u",
  large: "_vwz41m1q _102k1k7u",
  medium: "_vwz41k8s _102k1wto",
  small: "_vwz41k8s _102k1wto"
};
var sizeStyles = {
  xlarge: "_102k8vuz",
  large: "_102k8vuz",
  medium: "_102kckbl",
  small: "_102kckbl"
};
var getMaxLines = function getMaxLines(maxLines) {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};

/**
 * Represents a MetadataBlock, designed to contain groups of metadata in the form of elements.
 * Accepts an array of elements to be shown either primary (left hand side) or secondary (right hand side).
 * @public
 * @param {MetadataBlockProps} MetadataBlockProps
 * @see Block
 */
var MetadataBlock = function MetadataBlock(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-metadata' : _ref$testId,
    _ref$primary = _ref.primary,
    primary = _ref$primary === void 0 ? [] : _ref$primary,
    _ref$secondary = _ref.secondary,
    secondary = _ref$secondary === void 0 ? [] : _ref$secondary,
    blockProps = _objectWithoutProperties(_ref, _excluded);
  if (primary.length === 0 && secondary.length === 0 || status !== SmartLinkStatus.Resolved) {
    return null;
  }
  var primaryElements = renderElementItems(primary);
  var secondaryElements = renderElementItems(secondary);
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? SmartLinkSize.Medium : _blockProps$size;
  var maxLinesTotal = getMaxLines(maxLines);
  return /*#__PURE__*/React.createElement(Block, _extends({}, blockProps, {
    testId: "".concat(testId, "-resolved-view")
  }), primaryElements && /*#__PURE__*/React.createElement(ElementGroup, {
    align: SmartLinkAlignment.Left,
    direction: SmartLinkDirection.Horizontal,
    width: SmartLinkWidth.Flexible,
    size: size,
    className: ax([truncateStyles[maxLinesTotal], !fg('platform-linking-visual-refresh-v1') && sizeStylesOld[size], fg('platform-linking-visual-refresh-v1') && sizeStyles[size]])
  }, primaryElements), secondaryElements && /*#__PURE__*/React.createElement(ElementGroup, {
    align: SmartLinkAlignment.Right,
    direction: SmartLinkDirection.Horizontal,
    width: SmartLinkWidth.Flexible,
    size: size,
    className: ax([truncateStyles[maxLinesTotal], !fg('platform-linking-visual-refresh-v1') && sizeStylesOld[size], fg('platform-linking-visual-refresh-v1') && sizeStyles[size]])
  }, secondaryElements));
};
export default MetadataBlock;