import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["maxLines", "status", "testId", "text"];
import React from 'react';
import { SmartLinkStatus } from '../../../../../constants';
import { Snippet } from '../../elements';
import { getMaxLines } from '../../utils';
import Block from '../block';
var DEFAULT_MAX_LINES = 3;
var MAXIMUM_MAX_LINES = 6;
var MINIMUM_MAX_LINES = 1;

/**
 * Represents a SnippetBlock, which is used to display longer form text content, like descriptions.
 * @public
 * @param {SnippetBlockProps} SnippetBlockProps
 * @see Block
 */
var SnippetBlock = function SnippetBlock(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-snippet' : _ref$testId,
    text = _ref.text,
    blockProps = _objectWithoutProperties(_ref, _excluded);
  if (status !== SmartLinkStatus.Resolved && !text) {
    return null;
  }
  var snippetMaxLines = getMaxLines(maxLines, DEFAULT_MAX_LINES, MAXIMUM_MAX_LINES, MINIMUM_MAX_LINES);
  var statusTestId = !text ? 'resolved' : 'non-resolved';
  return /*#__PURE__*/React.createElement(Block, _extends({}, blockProps, {
    testId: "".concat(testId, "-").concat(statusTestId, "-view")
  }), /*#__PURE__*/React.createElement(Snippet, {
    maxLines: snippetMaxLines,
    content: text
  }));
};
export default SnippetBlock;