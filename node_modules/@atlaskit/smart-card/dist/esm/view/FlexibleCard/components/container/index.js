/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["containerSize"];
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @atlaskit/design-system/consistent-css-prop-usage */
/* eslint-disable @atlaskit/ui-styling-standard/no-unsafe-values */

import React, { useContext } from 'react';
import { di } from 'react-magnetic-di';
import { fg } from '@atlaskit/platform-feature-flags';
import { N40 } from '@atlaskit/theme/colors';
import { MediaPlacement, SmartLinkSize, SmartLinkTheme } from '../../../../constants';
import { FlexibleUiContext } from '../../../../state/flexible-ui-context';
import { isFlexUiPreviewPresent } from '../../../../state/flexible-ui-context/utils';
import { isFlexibleUiBlock, isFlexibleUiPreviewBlock, isFlexibleUiTitleBlock, isStyleCacheProvider } from '../../../../utils/flexible';
import { TitleBlock } from '../blocks';
import HoverCardControl from './hover-card-control';
import LayeredLink from './layered-link';
export var getChildrenOptions = function getChildrenOptions(children, context) {
  var options = {};
  if (isFlexUiPreviewPresent(context)) {
    React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child)) {
        if (isFlexibleUiPreviewBlock(child)) {
          var placement = child.props.placement;
          if (placement === MediaPlacement.Left) {
            options.previewOnLeft = true;
          }
          if (placement === MediaPlacement.Right) {
            options.previewOnRight = true;
          }
        }
      }
    });
  }
  return options;
};
var renderChildren = function renderChildren(children, containerSize, containerTheme, status, retry, onClick, removeBlockRestriction) {
  return React.Children.map(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && isFlexibleUiBlock(child)) {
      if (isFlexibleUiTitleBlock(child)) {
        if (isStyleCacheProvider(child)) {
          return updateChildrenTitleBlock(child, {
            onClick: onClick,
            retry: retry,
            containerSize: containerSize,
            status: status,
            theme: containerTheme
          });
        } else {
          var _blockSize = child.props.size;
          var _size = _blockSize || containerSize;
          return /*#__PURE__*/React.cloneElement(child, {
            // @ts-expect-error
            onClick: onClick,
            retry: retry,
            size: _size,
            status: status,
            theme: containerTheme
          });
        }
      }
      var blockSize = child.props.size;
      var size = blockSize || containerSize;
      if (isStyleCacheProvider(child)) {
        return updateChildrenBlock(child, size, status);
      }

      // @ts-expect-error
      return /*#__PURE__*/React.cloneElement(child, {
        size: size,
        status: status
      });
    }
    if (fg('platform-linking-flexible-card-openness')) {
      if (removeBlockRestriction) {
        return child;
      }
    }
  });
};
var updateChildrenBlock = function updateChildrenBlock(node, size, status) {
  var updatedChildren = React.Children.map(node.props.children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && isFlexibleUiBlock(child)) {
      // @ts-expect-error
      return /*#__PURE__*/React.cloneElement(child, {
        size: size,
        status: status
      });
    }
    return child;
  });
  return /*#__PURE__*/React.cloneElement(node, {
    children: updatedChildren
  });
};
var updateChildrenTitleBlock = function updateChildrenTitleBlock(node, _ref) {
  var containerSize = _ref.containerSize,
    props = _objectWithoutProperties(_ref, _excluded);
  var updatedChildren = React.Children.map(node.props.children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child) && isFlexibleUiTitleBlock(child)) {
      var _ref2 = child.props,
        blockSize = _ref2.size;
      var size = blockSize || containerSize;
      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, props), {}, {
        size: size
      }));
    } else {
      return child;
    }
  });
  return /*#__PURE__*/React.cloneElement(node, {
    children: updatedChildren
  });
};

/**
 * Note: This function is only necessary for CompiledCSS within Jest tests due to the way it handles Styles.
 * CompiledCSS will inject a StyleCacheProvider around the component tree, which
 * causes the children to be wrapped in a StyleCacheProvider as well. This function recursively
 * searches for the first valid TitleBlock within the children of the StyleCacheProvider.
 */
var _getFlexibleUiBlock = function getFlexibleUiBlock(node) {
  if (! /*#__PURE__*/React.isValidElement(node)) {
    return undefined;
  }
  if (node.type === TitleBlock) {
    return node;
  }
  if (isStyleCacheProvider(node)) {
    // Component wrapped with compiled at runtime, check for children
    var isChildrenValid;
    React.Children.map(node.props.children, function (child) {
      var _child$type;
      if (typeof child.type !== 'string' && ((_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) !== 'Style') {
        isChildrenValid = _getFlexibleUiBlock(child);
      }
    });
    return isChildrenValid;
  }
  return undefined;
};
export { _getFlexibleUiBlock as getFlexibleUiBlock };
var getTitleBlockProps = function getTitleBlockProps(children) {
  var block = React.Children.toArray(children).map(function (child) {
    return _getFlexibleUiBlock(child);
  }).filter(function (x) {
    return x !== undefined;
  }).at(0);
  if ( /*#__PURE__*/React.isValidElement(block)) {
    return block.props;
  }
};
var getLayeredLink = function getLayeredLink(testId, context, children, onClick) {
  var _ref3 = context || {},
    title = _ref3.title,
    _ref3$url = _ref3.url,
    url = _ref3$url === void 0 ? '' : _ref3$url;
  var _ref4 = getTitleBlockProps(children) || {},
    target = _ref4.anchorTarget,
    text = _ref4.text;
  return /*#__PURE__*/React.createElement(LayeredLink, {
    onClick: onClick,
    target: target,
    testId: testId,
    text: text || title,
    url: url
  });
};
var baseStyleCommon = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var backgroundStyleOld = null;
var backgroundStyles = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var elevationStylesOld = null;
var elevationStyles = null;
var clickableContainerStyles = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var gapStyleMapOld = {
  xlarge: "_zulp1jvo",
  large: "_zulph3jc",
  medium: "_zulp1qos",
  small: "_zulpfzsm"
};
var gapStyleMap = {
  xlarge: "_zulpr2fv",
  large: "_zulpzu5n",
  medium: "_zulp1bpf",
  small: "_zulpswc3"
};

/**
 * Get container padding based on smart link size
 * Equivalent version for DS primitives space token is getPrimitivesPaddingSpaceBySize()
 * at view/FlexibleCard/components/utils.tsx
 */
var getPadding = function getPadding(size) {
  if (fg('platform-linking-visual-refresh-v1')) {
    switch (size) {
      case SmartLinkSize.XLarge:
        return "var(--ds-space-300, 24px)";
      case SmartLinkSize.Large:
        return "var(--ds-space-250, 20px)";
      case SmartLinkSize.Medium:
        return "var(--ds-space-200, 16px)";
      case SmartLinkSize.Small:
      default:
        return "var(--ds-space-100, 8px)";
    }
  }
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.5rem';
    case SmartLinkSize.Large:
      return '1.25rem';
    case SmartLinkSize.Medium:
      return '1rem';
    case SmartLinkSize.Small:
    default:
      return '.5rem';
  }
};
var getGap = function getGap(size) {
  if (fg('platform-linking-visual-refresh-v1')) {
    switch (size) {
      case SmartLinkSize.XLarge:
        return "var(--ds-space-250, 20px)";
      case SmartLinkSize.Large:
        return "var(--ds-space-200, 16px)";
      case SmartLinkSize.Medium:
        return "var(--ds-space-100, 8px)";
      case SmartLinkSize.Small:
      default:
        return "var(--ds-space-050, 4px)";
    }
  }
  switch (size) {
    case SmartLinkSize.XLarge:
      return '1.25rem';
    case SmartLinkSize.Large:
      return '1rem';
    case SmartLinkSize.Medium:
      return '.5rem';
    case SmartLinkSize.Small:
    default:
      return '.25rem';
  }
};

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var previewOnLeftStyleMapOld = {
  xlarge: "_19bv15sf _y5vk1k92",
  large: "_19bvf557 _y5vk1j6v",
  medium: "_19bvqox2 _y5vk1kwk",
  small: "_19bv1ltm _y5vk6mu8"
};
var previewOnLeftStyleMap = {
  xlarge: "_19bver0k _y5vk1ejb",
  large: "_19bv16ru _y5vkv47k",
  medium: "_19bv1g7w _y5vk1eak",
  small: "_19bvlbes _y5vku2gc"
};

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
var previewOnRightStyleMapOld = {
  xlarge: "_u5f315sf _1yob1k92",
  large: "_u5f3f557 _1yob1j6v",
  medium: "_u5f3qox2 _1yob1kwk",
  small: "_u5f31ltm _1yob6mu8"
};
var previewOnRightStyleMap = {
  xlarge: "_u5f3er0k _1yob1ejb",
  large: "_u5f316ru _1yobv47k",
  medium: "_u5f31g7w _1yob1eak",
  small: "_u5f3lbes _1yobu2gc"
};

/**
 * A container is a hidden component that build the Flexible Smart Link.
 * All the Flexible UI components are wrapped inside the container.
 * It inherits the ui props from Card component and applies the custom styling
 * accordingly.
 * @internal
 * @see Block
 */
var Container = function Container(_ref5) {
  var children = _ref5.children,
    _ref5$clickableContai = _ref5.clickableContainer,
    clickableContainer = _ref5$clickableContai === void 0 ? false : _ref5$clickableContai,
    _ref5$hideBackground = _ref5.hideBackground,
    hideBackground = _ref5$hideBackground === void 0 ? false : _ref5$hideBackground,
    _ref5$hideElevation = _ref5.hideElevation,
    hideElevation = _ref5$hideElevation === void 0 ? false : _ref5$hideElevation,
    _ref5$hidePadding = _ref5.hidePadding,
    hidePadding = _ref5$hidePadding === void 0 ? false : _ref5$hidePadding,
    onClick = _ref5.onClick,
    retry = _ref5.retry,
    _ref5$showHoverPrevie = _ref5.showHoverPreview,
    showHoverPreview = _ref5$showHoverPrevie === void 0 ? false : _ref5$showHoverPrevie,
    hoverPreviewOptions = _ref5.hoverPreviewOptions,
    actionOptions = _ref5.actionOptions,
    _ref5$removeBlockRest = _ref5.removeBlockRestriction,
    removeBlockRestriction = _ref5$removeBlockRest === void 0 ? false : _ref5$removeBlockRest,
    _ref5$size = _ref5.size,
    size = _ref5$size === void 0 ? SmartLinkSize.Medium : _ref5$size,
    status = _ref5.status,
    _ref5$testId = _ref5.testId,
    testId = _ref5$testId === void 0 ? 'smart-links-container' : _ref5$testId,
    _ref5$theme = _ref5.theme,
    theme = _ref5$theme === void 0 ? SmartLinkTheme.Link : _ref5$theme;
  var padding = hidePadding ? fg('platform-linking-visual-refresh-v1') ? '0px' : '0rem' : getPadding(size);
  var gap = getGap(size);
  var context = useContext(FlexibleUiContext);
  var _getChildrenOptions = getChildrenOptions(children, context),
    previewOnLeft = _getChildrenOptions.previewOnLeft,
    previewOnRight = _getChildrenOptions.previewOnRight;
  var canShowHoverPreview = showHoverPreview && status === 'resolved';
  // `retry` object contains action that can be performed on
  // unresolved link (unauthorized, forbidden, not found, etc.)
  var canShowAuthTooltip = showHoverPreview && status === 'unauthorized' && retry !== undefined;
  var containerPaddingStyles = null;
  var container = fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement("div", {
    "data-smart-link-container": true,
    "data-testid": testId,
    className: ax(["_1e0c1txw _2lx21bp4 _1ul9idpf _1reo15vq _kqswh2mm _1pcmkb7n _1v7y1i6y _ufn21i6y", gapStyleMap[size], !hideBackground && "_bfhkhp5a", "_1yt418y6 _jb7v18y6 _y5vk167t _1yob1wow _r37x1r5k", previewOnLeft && previewOnLeftStyleMap[size], previewOnRight && previewOnRightStyleMap[size], !hideElevation && "_19itpp12 _2rkob7nn _19pkv77o _2hwxv77o _otyrv77o _18u0v77o", clickableContainer && "_nqwih2mm _18ywh2mm _1nq3h2mm _1t4ckb7n _1nxdkb7n _xnbykb7n"]),
    style: {
      "--_1xumd0e": ix(padding),
      "--_73mooq": ix(previewOnLeft ? gap : padding),
      "--_12k13bg": ix(previewOnRight ? gap : padding),
      "--_18x9sjc": ix("1px solid ".concat("var(--ds-border, #091E4224)"))
    }
  }, clickableContainer ? getLayeredLink(testId, context, children, onClick) : null, renderChildren(children, size, theme, status, retry, onClick, removeBlockRestriction)) : /*#__PURE__*/React.createElement("div", {
    "data-smart-link-container": true,
    "data-testid": testId,
    className: ax(["_1e0c1txw _2lx21bp4 _1ul9idpf _1reo15vq _kqswh2mm _1pcmkb7n _1v7y1i6y _ufn21i6y", gapStyleMapOld[size], !hideBackground && "_bfhkhp5a", "_1yt418y6 _jb7v18y6 _y5vk167t _1yob1wow _r37x1r5k", previewOnLeft && previewOnLeftStyleMapOld[size], previewOnRight && previewOnRightStyleMapOld[size], !hideElevation && "_19itn8v0 _2rkopd34 _19pkv77o _2hwxv77o _otyrv77o _18u0v77o", clickableContainer && "_nqwih2mm _18ywh2mm _1nq3h2mm _1t4ckb7n _1nxdkb7n _xnbykb7n"]),
    style: {
      "--_1xumd0e": ix(padding),
      "--_73mooq": ix(previewOnLeft ? gap : padding),
      "--_12k13bg": ix(previewOnRight ? gap : padding),
      "--_vzvmm2": ix("1px solid ".concat("var(--ds-border, ".concat(N40, ")")))
    }
  }, clickableContainer ? getLayeredLink(testId, context, children, onClick) : null, renderChildren(children, size, theme, status, retry, onClick, removeBlockRestriction));
  if (context !== null && context !== void 0 && context.url && (canShowHoverPreview || canShowAuthTooltip)) {
    return /*#__PURE__*/React.createElement(HoverCardControl, {
      isHoverPreview: canShowHoverPreview,
      isAuthTooltip: canShowAuthTooltip,
      actionOptions: actionOptions,
      testId: testId,
      url: context.url,
      hoverPreviewOptions: hoverPreviewOptions
    }, container);
  }
  return container;
};
export default Container;