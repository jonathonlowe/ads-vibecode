import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import Lozenge from '@atlaskit/lozenge';
import { fg } from '@atlaskit/platform-feature-flags';
var withErrorBoundary = function withErrorBoundary(Component) {
  return function (props) {
    var fallback = useMemo(function () {
      var _props$testId;
      return /*#__PURE__*/React.createElement(Lozenge, _extends({
        appearance: props === null || props === void 0 ? void 0 : props.appearance
      }, fg('platform-component-visual-refresh') ? {
        isBold: true
      } : undefined, {
        testId: "".concat((_props$testId = props === null || props === void 0 ? void 0 : props.testId) !== null && _props$testId !== void 0 ? _props$testId : 'smart-element-lozenge-action', "-fallback")
      }), props === null || props === void 0 ? void 0 : props.text);
    }, [props === null || props === void 0 ? void 0 : props.appearance, props === null || props === void 0 ? void 0 : props.testId, props === null || props === void 0 ? void 0 : props.text]);
    return /*#__PURE__*/React.createElement(ErrorBoundary, {
      fallback: fallback
    }, /*#__PURE__*/React.createElement(Component, props));
  };
};
export default withErrorBoundary;