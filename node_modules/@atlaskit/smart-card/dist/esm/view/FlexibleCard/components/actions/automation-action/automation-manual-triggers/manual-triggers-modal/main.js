import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useState } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import Modal, { ModalBody, ModalFooter } from '@atlaskit/modal-dialog';
import { AutomationMenuContextContainer } from './menu-context';
import { AutomationModalBody } from './sub-components/body';
import { AutomationModalExecutionState } from './sub-components/execution-state-message';
import { AutomationModalFooter } from './sub-components/footer';
import { AutomationModalHeader } from './sub-components/header';
export var AutomationModal = function AutomationModal(_ref) {
  var baseAutomationUrl = _ref.baseAutomationUrl,
    siteAri = _ref.siteAri,
    objectAri = _ref.objectAri,
    canManageAutomation = _ref.canManageAutomation,
    onClose = _ref.onClose,
    onCloseComplete = _ref.onCloseComplete,
    modalTitle = _ref.modalTitle,
    modalDescription = _ref.modalDescription,
    emptyStateDescription = _ref.emptyStateDescription,
    emptyStateAdminDescription = _ref.emptyStateAdminDescription,
    analyticsSource = _ref.analyticsSource;
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    selectedRule = _useState2[0],
    setSelectedRule = _useState2[1];
  useEffect(function () {
    createAnalyticsEvent({
      type: 'sendScreenEvent',
      data: {
        name: analyticsSource
      }
    }).fire();
  }, [createAnalyticsEvent, analyticsSource]);
  return /*#__PURE__*/React.createElement(AutomationMenuContextContainer, {
    baseAutomationUrl: baseAutomationUrl,
    objectAri: objectAri,
    siteAri: siteAri,
    canManageAutomation: canManageAutomation,
    analyticsSource: analyticsSource,
    emptyStateDescription: emptyStateDescription,
    emptyStateAdminDescription: emptyStateAdminDescription,
    onRuleInvocationSuccess: onClose,
    onRuleInvocationFailure: function onRuleInvocationFailure() {
      return setSelectedRule(undefined);
    }
  }, function () {
    return /*#__PURE__*/React.createElement(Modal, {
      onClose: onClose,
      onCloseComplete: onCloseComplete,
      width: 600,
      height: 480,
      testId: "smart-card-automation-action-modal"
    }, /*#__PURE__*/React.createElement(AutomationModalHeader, {
      modalTitle: modalTitle,
      modalDescription: modalDescription
    }), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(AutomationModalBody, {
      selectedRule: selectedRule,
      setSelectedRule: setSelectedRule
    })), /*#__PURE__*/React.createElement(AutomationModalExecutionState, null), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(AutomationModalFooter, {
      selectedRule: selectedRule,
      onClose: onClose
    })));
  });
};