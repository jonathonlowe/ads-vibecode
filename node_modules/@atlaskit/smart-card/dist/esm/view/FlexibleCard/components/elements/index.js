import { ElementName } from '../../../../constants';
import { createElement } from './utils';

// Attention: Keep the export name and element name the same.
// This will help reducing the code for mapping elements inside
// createElement and renderElementItems
/**
 * Creates a AssignedTo text element using the data from AssignedTo in the Flexible UI Context.
 * @see Text
 */
export var AssignedTo = createElement(ElementName.AssignedTo);
/**
 * An AvatarGroup element using the data from AssignedToGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
export var AssignedToGroup = createElement(ElementName.AssignedToGroup);
/**
 * Creates a AttachmentCount Badge element using the data from AttachmentCount in the Flexible UI Context.
 * @see Badge
 */
export var AttachmentCount = createElement(ElementName.AttachmentCount);
/**
 * An AvatarGroup element using the data from AuthorGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
export var AuthorGroup = createElement(ElementName.AuthorGroup);
/**
 * Creates a Checklist Badge element using the data from ChecklistProgress in the Flexible UI Context.
 * @see Badge
 */
export var ChecklistProgress = createElement(ElementName.ChecklistProgress);
/**
 * An AvatarGroup element using the data from CollaboratorGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
export var CollaboratorGroup = createElement(ElementName.CollaboratorGroup);
/**
 * Creates a CommentCount Badge element using the data from CommentCount in the Flexible UI Context.
 * @see Badge
 */
export var CommentCount = createElement(ElementName.CommentCount);
/**
 * Creates a CreatedOn DateTime element using the data from CreatedOn in the Flexible UI Context.
 * @see DateTime
 */
export var CreatedOn = createElement(ElementName.CreatedOn);
/**
 * Creates a CreatedBy text element using the data from CreatedBy in the Flexible UI Context.
 * @see Text
 */
export var CreatedBy = createElement(ElementName.CreatedBy);
/**
 * Creates a DueOn Lozenge element using the data from dueOn in the Flexible UI Context.
 * @see Lozenge
 */
export var DueOn = createElement(ElementName.DueOn);
/**
 * Creates an element that contains Last Commit hash
 */
export var LatestCommit = createElement(ElementName.LatestCommit);
/**
 * Creates a LinkIcon Icon element using the data from LinkIcon in the Flexible UI Context.
 * @see Icon
 */
export var LinkIcon = createElement(ElementName.LinkIcon);
/**
 * Creates a Location Link element.
 * This represents the location or container of the resource.
 * @see Link
 */
export var Location = createElement(ElementName.Location);
/**
 * Creates a ModifiedBy Text element using the data from ModifiedBy in the Flexible UI Context.
 * @see Text
 */
export var ModifiedBy = createElement(ElementName.ModifiedBy);
/**
 * Creates a ModifiedOn DateTime element using the data from ModifiedOn in the Flexible UI Context.
 * @see DateTime
 */
export var ModifiedOn = createElement(ElementName.ModifiedOn);
/**
 * Creates a OwnedBy text element using the data from OwnedBy in the Flexible UI Context.
 * @see Text
 */
export var OwnedBy = createElement(ElementName.OwnedBy);
/**
 * An AvatarGroup element using the data from OwnedByGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
export var OwnedByGroup = createElement(ElementName.OwnedByGroup);
/**
 * Creates a Preview element using the data from Preview in the Flexible UI Context.
 * @see Preview
 */
export { default as Preview } from './preview';
/**
 * Creates a Priority Badge element using the data from Priority in the Flexible UI Context.
 * @see Badge
 */
export var Priority = createElement(ElementName.Priority);
/**
 * Creates a ProgrammingLanguage Badge element using the data from ProgrammingLanguage in the Flexible UI Context.
 * @see Badge
 */
export var ProgrammingLanguage = createElement(ElementName.ProgrammingLanguage);
/**
 * Creates a Provider Badge element using the data from Provider in the Flexible UI Context.
 * @see Badge
 */
export var Provider = createElement(ElementName.Provider);
/**
 * Creates a ReactCount Badge element using the data from ReactCount in the Flexible UI Context.
 * @see Badge
 */
export var ReactCount = createElement(ElementName.ReactCount);
/**
 * Creates a ReadTime Text element using the data from readTime in the Flexible UI Context
 */
export var ReadTime = createElement(ElementName.ReadTime);
/**
 * Creates a SentOn DateTime element using the data from SentOn in the Flexible UI Context.
 * @see DateTime
 */
export var SentOn = createElement(ElementName.SentOn);
/**
 * Creates a Snippet element using the data from Snippet in the Flexible UI Context.
 * @see Text
 */
export { default as Snippet } from './snippet-element';
/**
 * Creates a SourceBranch Text element using the data from sourceBranch in the Flexible UI Context.
 * @see Text
 */
export var SourceBranch = createElement(ElementName.SourceBranch);
/**
 * Creates a State Lozenge element using the data from State in the Flexible UI Context.
 * @see Lozenge
 */
export var State = createElement(ElementName.State);
/**
 * Creates a SubscriberCount Badge element using the data from SubscriberCount in the Flexible UI Context.
 * @see Badge
 */
export var SubscriberCount = createElement(ElementName.SubscriberCount);
/**
 * Create a SubTasks Badge element using the data from subTasks in the Flexible UI Context.
 * @see Badge
 */
export var SubTasksProgress = createElement(ElementName.SubTasksProgress);
/**
 * Create a StoryPoints Badge element using the data from storyPoints in the Flexible UI Context.
 * @see AtlaskitBadge
 */
export var StoryPoints = createElement(ElementName.StoryPoints);
/**
 * Creates a TargetBranch Text element using the data from targetBranch in the Flexible UI Context.
 * @see Text
 */
export var TargetBranch = createElement(ElementName.TargetBranch);
/**
 * Creates a Title Link element using the data from Title in the Flexible UI Context.
 * This represents the main link text within the Smart Link.
 * @see Link
 */
export var Title = createElement(ElementName.Title);
/**
 * Creates a ViewCount Badge element using the data from ViewCount in the Flexible UI Context.
 * @see Badge
 */
export var ViewCount = createElement(ElementName.ViewCount);
/**
 * Creates a VoteCount Badge element using the data from VoteCount in the Flexible UI Context.
 * @see Badge
 */
export var VoteCount = createElement(ElementName.VoteCount);
export { default as AppliedToComponentsCount } from './applied-to-components-count';