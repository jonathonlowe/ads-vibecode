import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["name", "hideContent", "hideIcon", "onClick", "isDisabled"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback } from 'react';
import * as Actions from '../../../actions';
var ActionGroupItem = function ActionGroupItem(_ref) {
  var item = _ref.item,
    size = _ref.size,
    appearance = _ref.appearance,
    asDropDownItems = _ref.asDropDownItems,
    onActionItemClick = _ref.onActionItemClick;
  var name = item.name,
    hideContent = item.hideContent,
    hideIcon = item.hideIcon,
    onClick = item.onClick,
    isDisabled = item.isDisabled,
    props = _objectWithoutProperties(item, _excluded);
  var handleOnClick = useCallback(function () {
    if (onActionItemClick) {
      onActionItemClick();
    }
    if (onClick) {
      onClick();
    }
  }, [onActionItemClick, onClick]);
  var Action = name in Actions ? Actions[name] : undefined;
  if (!Action) {
    return null;
  }
  var actionProps = _objectSpread({}, props);
  if (hideContent && !asDropDownItems) {
    actionProps.content = '';
  }
  if (hideIcon) {
    actionProps.icon = undefined;
  }
  if (item !== null && item !== void 0 && item.entryPointWrapper) {
    actionProps.wrapper = item.entryPointWrapper;
  }
  return /*#__PURE__*/React.createElement(Action, _extends({
    asDropDownItem: asDropDownItems,
    size: size,
    appearance: appearance,
    onClick: handleOnClick,
    isDisabled: isDisabled
  }, actionProps));
};
export default ActionGroupItem;