import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect, useMemo } from 'react';
import { useAnalyticsEvents } from '../../common/analytics/generated/use-analytics-events';
import { SmartLinkStatus } from '../../constants';
import { FlexibleUiContext, FlexibleUiOptionContext } from '../../state/flexible-ui-context';
import { useAISummaryConfig } from '../../state/hooks/use-ai-summary-config';
import useResolve from '../../state/hooks/use-resolve';
import Container from './components/container';
import { getContextByStatus, getRetryOptions } from './utils';

/**
 * This represents a Flexible Card: a link represented by a card with metadata.
 * This is the container in which all Flexible UI Blocks and Elements exist.
 * Note: TitleBlock is mandatory for a Flexible Card to render.
 * @see Container
 */
var FlexibleCard = function FlexibleCard(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'flexible' : _ref$appearance,
    cardState = _ref.cardState,
    children = _ref.children,
    id = _ref.id,
    onAuthorize = _ref.onAuthorize,
    onClick = _ref.onClick,
    onError = _ref.onError,
    onResolve = _ref.onResolve,
    origin = _ref.origin,
    renderers = _ref.renderers,
    showHoverPreview = _ref.showHoverPreview,
    hoverPreviewOptions = _ref.hoverPreviewOptions,
    actionOptions = _ref.actionOptions,
    testId = _ref.testId,
    ui = _ref.ui,
    url = _ref.url;
  var aiSummaryConfig = useAISummaryConfig();
  var resolve = useResolve();
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var cardType = cardState.status,
    details = cardState.details;
  var status = cardType;
  var context = useMemo(function () {
    return getContextByStatus({
      aiSummaryConfig: aiSummaryConfig,
      appearance: appearance,
      fireEvent: fireEvent,
      response: details,
      id: id,
      origin: origin,
      renderers: renderers,
      resolve: resolve,
      actionOptions: actionOptions,
      status: status,
      url: url
    });
  }, [aiSummaryConfig, appearance, details, fireEvent, id, origin, renderers, actionOptions, resolve, status, url]);
  var retry = getRetryOptions(url, status, details, onAuthorize);
  var _ref2 = context || {},
    title = _ref2.title;
  useEffect(function () {
    switch (status) {
      case SmartLinkStatus.Resolved:
        if (onResolve) {
          onResolve({
            title: title,
            url: url
          });
        }
        break;
      case SmartLinkStatus.Errored:
      case SmartLinkStatus.Fallback:
      case SmartLinkStatus.Forbidden:
      case SmartLinkStatus.NotFound:
      case SmartLinkStatus.Unauthorized:
        if (onError) {
          onError({
            status: status,
            url: url
          });
        }
        break;
    }
  }, [onError, onResolve, status, title, url]);
  return /*#__PURE__*/React.createElement(FlexibleUiOptionContext.Provider, {
    value: ui
  }, /*#__PURE__*/React.createElement(FlexibleUiContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(Container, _extends({
    testId: testId
  }, ui, {
    onClick: onClick,
    retry: retry,
    showHoverPreview: showHoverPreview,
    hoverPreviewOptions: hoverPreviewOptions,
    actionOptions: actionOptions,
    status: status
  }), children)));
};
export default FlexibleCard;