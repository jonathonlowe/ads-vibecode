import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { extractLink, extractPreview as extractPreviewData, extractProvider, extractTitle } from '@atlaskit/link-extractors';
import { ActionName, CardAction } from '../../index';
import { getExtensionKey } from '../../state/helpers';
import { canShowAction } from '../../utils/actions/can-show-action';
import { openEmbedModal } from '../../view/EmbedModal/utils';
import { extractIsSupportTheming } from '../common/meta/extractIsSupportTheming';
import { extractIsTrusted } from '../common/meta/extractIsTrusted';
import { extractLinkIcon } from '../flexible/icon';
import { extractInvokeDownloadAction } from './extract-invoke-download-action';
import { extractInvokeViewAction } from './extract-invoke-view-action';
export var extractInvokePreviewAction = function extractInvokePreviewAction(param) {
  var _extractPreviewData;
  var actionOptions = param.actionOptions,
    display = param.appearance,
    fireEvent = param.fireEvent,
    onClose = param.onClose,
    id = param.id,
    origin = param.origin,
    response = param.response;
  if (!canShowAction(CardAction.PreviewAction, actionOptions)) {
    return;
  }
  var data = response.data;
  var meta = response.meta;
  var src = (_extractPreviewData = extractPreviewData(data, 'web')) === null || _extractPreviewData === void 0 ? void 0 : _extractPreviewData.src;
  if (src) {
    var url = extractLink(data);
    var extensionKey = getExtensionKey(response);
    return {
      actionFn: function () {
        var _actionFn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _extractProvider;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", openEmbedModal({
                  fireEvent: fireEvent,
                  extensionKey: extensionKey,
                  id: id,
                  invokeDownloadAction: extractInvokeDownloadAction(param),
                  invokeViewAction: extractInvokeViewAction(param, true),
                  isSupportTheming: extractIsSupportTheming(meta),
                  isTrusted: extractIsTrusted(meta),
                  linkIcon: extractLinkIcon(response),
                  providerName: (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text,
                  onClose: onClose,
                  origin: origin,
                  src: src,
                  title: extractTitle(data),
                  url: url
                }));
              case 1:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function actionFn() {
          return _actionFn.apply(this, arguments);
        }
        return actionFn;
      }(),
      actionSubjectId: 'invokePreviewScreen',
      actionType: ActionName.PreviewAction,
      display: display,
      extensionKey: extensionKey,
      id: id
    };
  }
};