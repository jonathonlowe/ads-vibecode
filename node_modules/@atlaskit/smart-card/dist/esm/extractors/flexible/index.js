import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["appearance", "fireEvent", "id", "origin", "renderers", "resolve", "actionOptions", "response", "aiSummaryConfig"];
import { extractAri, extractDateCreated, extractDateUpdated, extractLink, extractPersonCreatedBy, extractPersonOwnedBy, extractTitle } from '@atlaskit/link-extractors';
import { extractSummary } from '../common/primitives';
import { extractFlexibleCardActions } from './actions';
import { extractPersonsUpdatedBy } from './collaboratorGroup';
import extractPreview from './extract-preview';
import extractPriority from './extract-priority';
import extractState from './extract-state';
import { extractLinkIcon } from './icon';
import extractProviderIcon from './icon/extract-provider-icon';
import { extractLatestCommit } from './latest-commit';
import { extractAppliedToComponentsCount, extractAssignedTo, extractAttachmentCount, extractChecklistProgress, extractCommentCount, extractCreatedBy, extractDueOn, extractLocation, extractModifiedBy, extractOwnedBy, extractPersonAssignedToAsArray, extractProgrammingLanguage, extractReactCount, extractReadTime, extractSentOn, extractSourceBranch, extractStoryPoints, extractSubscriberCount, extractSubTasksProgress, extractTargetBranch, extractViewCount, extractVoteCount } from './utils';
var extractFlexibleUiContext = function extractFlexibleUiContext() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var appearance = _ref.appearance,
    fireEvent = _ref.fireEvent,
    id = _ref.id,
    origin = _ref.origin,
    renderers = _ref.renderers,
    resolve = _ref.resolve,
    actionOptions = _ref.actionOptions,
    response = _ref.response,
    aiSummaryConfig = _ref.aiSummaryConfig,
    props = _objectWithoutProperties(_ref, _excluded);
  if (!response) {
    return undefined;
  }
  var data = response.data;
  var url = extractLink(data);
  return {
    actions: extractFlexibleCardActions({
      actionOptions: actionOptions,
      aiSummaryConfig: aiSummaryConfig,
      appearance: appearance,
      fireEvent: fireEvent,
      id: id,
      origin: origin,
      response: response,
      url: props.url // Use the original URL in edge cases, such as short links for AI summary and copy link actions.
    }),
    appliedToComponentsCount: extractAppliedToComponentsCount(data),
    assignedToGroup: extractPersonAssignedToAsArray(data),
    attachmentCount: extractAttachmentCount(data),
    authorGroup: extractPersonCreatedBy(data),
    ownedByGroup: extractPersonOwnedBy(data),
    collaboratorGroup: extractPersonsUpdatedBy(data),
    commentCount: extractCommentCount(data),
    viewCount: extractViewCount(data),
    reactCount: extractReactCount(data),
    voteCount: extractVoteCount(data),
    checklistProgress: extractChecklistProgress(data),
    createdBy: extractCreatedBy(data),
    ownedBy: extractOwnedBy(data),
    assignedTo: extractAssignedTo(data),
    createdOn: extractDateCreated(data),
    dueOn: extractDueOn(data),
    latestCommit: extractLatestCommit(data),
    linkIcon: extractLinkIcon(response, renderers),
    location: extractLocation(data),
    modifiedBy: extractModifiedBy(data),
    modifiedOn: extractDateUpdated(data),
    preview: extractPreview(data),
    priority: extractPriority(data),
    provider: extractProviderIcon(data),
    programmingLanguage: extractProgrammingLanguage(data),
    readTime: extractReadTime(data),
    sentOn: extractSentOn(data),
    snippet: extractSummary(data) || undefined,
    // Explicitly set here to remove an empty string
    sourceBranch: extractSourceBranch(data),
    state: extractState(response, actionOptions, id, appearance, origin, fireEvent, resolve),
    subscriberCount: extractSubscriberCount(data),
    subTasksProgress: extractSubTasksProgress(data),
    storyPoints: extractStoryPoints(data),
    targetBranch: extractTargetBranch(data),
    title: extractTitle(data) || url,
    url: url,
    ari: extractAri(data)
  };
};
export default extractFlexibleUiContext;