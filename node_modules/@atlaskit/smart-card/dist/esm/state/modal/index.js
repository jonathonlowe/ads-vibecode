import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { Suspense, useCallback, useContext, useMemo, useState } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { StopPropagation } from '../../view/common/stop-propagation';
var FALLBACK_API = {
  open: function open() {},
  close: function close() {}
};
export var SmartLinkModalContext = /*#__PURE__*/React.createContext(FALLBACK_API);
export var SmartLinkModalProvider = function SmartLinkModalProvider(_ref) {
  var children = _ref.children;
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    element = _useState2[0],
    setElement = _useState2[1];
  var api = useMemo(function () {
    return {
      open: function open(modal) {
        return setElement( /*#__PURE__*/React.createElement(Suspense, {
          fallback: null
        }, /*#__PURE__*/React.createElement(StopPropagation, null, modal)));
      },
      close: function close() {
        return setElement(null);
      }
    };
  }, []);
  var fallbackRender = useCallback(function (_ref2) {
    var resetErrorBoundary = _ref2.resetErrorBoundary;
    resetErrorBoundary();
    return null;
  }, []);
  var onReset = useCallback(function () {
    return setElement(null);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SmartLinkModalContext.Provider, {
    value: api
  }, children), /*#__PURE__*/React.createElement(ErrorBoundary, {
    fallbackRender: fallbackRender,
    onReset: onReset
  }, element));
};

/**
 * Open (lazy load) modal
 *
 * This hook injects the element below Card and standalone HoverCard component.
 * It is intended to solve the issue where modal triggered by the parent component
 * disappear when the parent component is unmounted.
 *
 * For example, clicking on hover card action to open a modal. Once the modal is opened,
 * hover card disappears.
 *
 * Usage:
 *   const modal = useSmartLinkModal()
 *   modal.open(<SomeLazyLoadModal isOpen={true} onClose={() => modal.close()} />);
 */
export var useSmartLinkModal = function useSmartLinkModal() {
  return useContext(SmartLinkModalContext);
};