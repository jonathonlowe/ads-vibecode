import { useCallback } from 'react';
import { extractAri, extractLink } from '@atlaskit/link-extractors';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { failUfoExperience, startUfoExperience, succeedUfoExperience } from '../../analytics';
import { useSmartCardState } from '../../store';
import { useAISummary } from '../use-ai-summary';
import { useAISummaryConfig } from '../use-ai-summary-config';
var EXPERIENCE_NAME = 'smart-link-ai-summary';
var useAISummaryAction = function useAISummaryAction(url) {
  var _cardState$details;
  var _useAISummaryConfig = useAISummaryConfig(),
    baseUrl = _useAISummaryConfig.baseUrl,
    envKey = _useAISummaryConfig.envKey,
    product = _useAISummaryConfig.product;
  var cardState = useSmartCardState(url);
  var _useAnalyticsEvents = useAnalyticsEvents(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  var ari = data && extractAri(data);
  var dataUrl = data && extractLink(data) || '';
  var onStart = useCallback(function (id) {
    startUfoExperience(EXPERIENCE_NAME, id);
  }, []);
  var onSuccess = useCallback(function (id) {
    fireEvent('operational.summary.success', {});
    succeedUfoExperience(EXPERIENCE_NAME, id);
  }, [fireEvent]);
  var onError = useCallback(function (id, reason) {
    /**
     * Errors should only be counted to the SLO if they are not due to acceptable use violations
     * HIPAA content detected or exceeding context length.
     */

    var isSloError = reason === undefined ? true : !['ACCEPTABLE_USE_VIOLATIONS', 'HIPAA_CONTENT_DETECTED', 'EXCEEDING_CONTEXT_LENGTH_ERROR'].includes(reason);
    fireEvent('operational.summary.failed', {
      reason: reason || null,
      isSloError: isSloError
    });
    failUfoExperience(EXPERIENCE_NAME, id);
  }, [fireEvent]);
  return useAISummary({
    url: dataUrl,
    ari: ari,
    product: product,
    envKey: envKey,
    baseUrl: baseUrl,
    onStart: onStart,
    onSuccess: onSuccess,
    onError: onError
  });
};
export default useAISummaryAction;