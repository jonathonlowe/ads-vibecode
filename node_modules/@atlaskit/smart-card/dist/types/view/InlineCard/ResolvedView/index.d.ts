import React from 'react';
import { type LozengeProps } from '../../../types';
import type { CardActionOptions } from '../../Card/types';
import { type HoverPreviewOptions } from '../../HoverCard/types';
export interface InlineCardResolvedViewProps {
    /** A unique ID for a Smart Link. */
    id?: string;
    /** The optional con of the service (e.g. Dropbox/Asana/Google/etc) to display */
    icon?: React.ReactNode;
    /** The name of the resource */
    title?: string;
    /** The the optional lozenge that might represent the statux of the resource */
    lozenge?: LozengeProps;
    /** A flag that determines whether the card is selected in edit mode. */
    isSelected?: boolean;
    /** A flag that determines whether a card is in hover state in edit mode. Currently used for inline only */
    isHovered?: boolean;
    /** The optional url */
    link?: string;
    /** The optional click handler */
    onClick?: React.EventHandler<React.MouseEvent | React.KeyboardEvent>;
    /** A `testId` prop is provided for specified elements, which is a unique string that appears as a data attribute `data-testid` in the rendered code, serving as a hook for automated tests */
    testId?: string;
    /** The color of the title text only (not including the icon) */
    titleTextColor?: string;
    /** The Emoji icon prefix that was added to the title text via Add emoji button */
    titlePrefix?: React.ReactNode;
    /** Enables showing a custom preview on hover of link */
    showHoverPreview?: boolean;
    hoverPreviewOptions?: HoverPreviewOptions;
    /** Configure visibility of server and client actions */
    actionOptions?: CardActionOptions;
    /** Truncates the card to one line */
    truncateInline?: boolean;
}
export declare class InlineCardResolvedView extends React.Component<InlineCardResolvedViewProps> {
    renderLozenge(): React.JSX.Element | null;
    render(): React.JSX.Element;
}
