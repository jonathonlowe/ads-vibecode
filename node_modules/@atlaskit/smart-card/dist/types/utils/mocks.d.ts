import { type JsonLd } from '@atlaskit/json-ld-types';
import { SmartLinkResponse } from '@atlaskit/linking-types';
export declare const mockContext: {
    readonly '@vocab': "https://www.w3.org/ns/activitystreams#";
    readonly atlassian: "https://schema.atlassian.com/ns/vocabulary#";
    readonly schema: "http://schema.org/";
};
export declare const mockGenerator: {
    '@type': string;
    '@id': string;
    name: string;
};
export declare const mockByUrl: (url: string) => JsonLd.Response<JsonLd.Data.BaseData>;
export declare const mocks: {
    success: JsonLd.Response<JsonLd.Data.BaseData>;
    nounDataSuccess: SmartLinkResponse;
    notFound: JsonLd.Response<JsonLd.Data.BaseData>;
    forbidden: JsonLd.Response<JsonLd.Data.BaseData>;
    forbiddenWithNoAuth: JsonLd.Response<JsonLd.Data.BaseData>;
    unauthorized: JsonLd.Response<JsonLd.Data.BaseData>;
    unauthorizedWithNoAuth: JsonLd.Response<JsonLd.Data.BaseData>;
    actionSuccess: {
        meta: {
            visibility: string;
            access: string;
            auth: never[];
            definitionId: string;
        };
        data: {
            status: string;
        };
    };
    analytics: {
        status: "resolved";
        details: {
            meta: {
                visibility: "public";
                access: "granted";
                auth: never[];
                definitionId: string;
                key: string;
                resourceType: string;
                subproduct: string;
                product: string;
            };
        };
    };
    withDatasource: {
        meta: {
            visibility: string;
            access: string;
            auth: never[];
            definitionId: string;
            key: string;
        };
        data: {
            summary: string;
            'schema:potentialAction': {
                '@id': string;
                '@type': string;
                identifier: string;
                name: string;
            };
            'atlassian:downloadUrl': string;
            'atlassian:ari': string;
            preview: {
                href: string;
            };
            '@context': {
                '@vocab': string;
                atlassian: string;
                schema: string;
            };
            '@type': string;
            name: string;
            url: string;
        };
        datasources: {
            key: string;
            parameters: {
                jql: string;
                cloudId: string;
            };
            id: string;
            ari: string;
            description: string;
            name: string;
        }[];
    };
};
export declare const fakeResponse: () => Promise<JsonLd.Response<JsonLd.Data.BaseData>>;
export declare const fakeFactory: any;
export declare const waitFor: (time?: number) => Promise<unknown>;
