"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _linkExtractors = require("@atlaskit/link-extractors");
var _useAnalyticsEvents2 = require("../../../common/analytics/generated/use-analytics-events");
var _analytics = require("../../analytics");
var _store = require("../../store");
var _useAiSummary = require("../use-ai-summary");
var _useAiSummaryConfig = require("../use-ai-summary-config");
var EXPERIENCE_NAME = 'smart-link-ai-summary';
var useAISummaryAction = function useAISummaryAction(url) {
  var _cardState$details;
  var _useAISummaryConfig = (0, _useAiSummaryConfig.useAISummaryConfig)(),
    baseUrl = _useAISummaryConfig.baseUrl,
    envKey = _useAISummaryConfig.envKey,
    product = _useAISummaryConfig.product;
  var cardState = (0, _store.useSmartCardState)(url);
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  var ari = data && (0, _linkExtractors.extractAri)(data);
  var dataUrl = data && (0, _linkExtractors.extractLink)(data) || '';
  var onStart = (0, _react.useCallback)(function (id) {
    (0, _analytics.startUfoExperience)(EXPERIENCE_NAME, id);
  }, []);
  var onSuccess = (0, _react.useCallback)(function (id) {
    fireEvent('operational.summary.success', {});
    (0, _analytics.succeedUfoExperience)(EXPERIENCE_NAME, id);
  }, [fireEvent]);
  var onError = (0, _react.useCallback)(function (id, reason) {
    /**
     * Errors should only be counted to the SLO if they are not due to acceptable use violations
     * HIPAA content detected or exceeding context length.
     */

    var isSloError = reason === undefined ? true : !['ACCEPTABLE_USE_VIOLATIONS', 'HIPAA_CONTENT_DETECTED', 'EXCEEDING_CONTEXT_LENGTH_ERROR'].includes(reason);
    fireEvent('operational.summary.failed', {
      reason: reason || null,
      isSloError: isSloError
    });
    (0, _analytics.failUfoExperience)(EXPERIENCE_NAME, id);
  }, [fireEvent]);
  return (0, _useAiSummary.useAISummary)({
    url: dataUrl,
    ari: ari,
    product: product,
    envKey: envKey,
    baseUrl: baseUrl,
    onStart: onStart,
    onSuccess: onSuccess,
    onError: onError
  });
};
var _default = exports.default = useAISummaryAction;