"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.succeedUfoExperience = exports.startUfoExperience = exports.failUfoExperience = exports.addMetadataToExperience = void 0;
var _ufo = require("@atlaskit/ufo");
var inlineExperience = {
  platform: {
    component: 'smart-links'
  },
  type: _ufo.ExperienceTypes.Experience,
  performanceType: _ufo.ExperiencePerformanceTypes.InlineResult
};
var renderExperience = {
  platform: {
    component: 'smart-links'
  },
  type: _ufo.ExperienceTypes.Load,
  performanceType: _ufo.ExperiencePerformanceTypes.PageSegmentLoad
};
var aiExperience = {
  platform: {
    component: 'smart-links'
  },
  type: _ufo.ExperienceTypes.Experience,
  performanceType: _ufo.ExperiencePerformanceTypes.InlineResult
};
var ufoExperiences = {
  'smart-link-rendered': new _ufo.ConcurrentExperience('smart-link-rendered', renderExperience),
  'smart-link-authenticated': new _ufo.ConcurrentExperience('smart-link-authenticated', inlineExperience),
  'smart-link-action-invocation': new _ufo.ConcurrentExperience('smart-link-action-invocation', inlineExperience),
  'smart-link-ai-summary': new _ufo.ConcurrentExperience('smart-link-ai-summary', aiExperience)
};
var startUfoExperience = exports.startUfoExperience = function startUfoExperience(experienceName, id, properties) {
  var experience = ufoExperiences[experienceName].getInstance(id);
  experience.start();
  if (properties) {
    experience.addMetadata(properties);
  }
};
var succeedUfoExperience = exports.succeedUfoExperience = function succeedUfoExperience(experienceName, id, properties) {
  var experience = ufoExperiences[experienceName].getInstance(id);
  experience.success({
    metadata: properties
  });
};
var failUfoExperience = exports.failUfoExperience = function failUfoExperience(experienceName, id, properties) {
  var experience = ufoExperiences[experienceName].getInstance(id);
  experience.failure({
    metadata: properties
  });
};
var addMetadataToExperience = exports.addMetadataToExperience = function addMetadataToExperience(experienceName, id, properties) {
  ufoExperiences[experienceName].getInstance(id).addMetadata(properties);
};