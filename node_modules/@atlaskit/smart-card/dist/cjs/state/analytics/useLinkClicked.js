"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMouseDownEvent = exports.useLinkClicked = exports.ClickButton = void 0;
var _react = require("react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _click = require("../../utils/analytics/click");
var ClickButton = exports.ClickButton = /*#__PURE__*/function (ClickButton) {
  ClickButton[ClickButton["Left"] = 0] = "Left";
  ClickButton[ClickButton["Middle"] = 1] = "Middle";
  ClickButton[ClickButton["Right"] = 2] = "Right";
  return ClickButton;
}({});
var useLinkClicked = exports.useLinkClicked = function useLinkClicked(handler, predicate) {
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  return (0, _react.useCallback)(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var event = args[0];
    handler === null || handler === void 0 || handler.apply(null, args);
    if (!predicate || predicate !== null && predicate !== void 0 && predicate(event)) {
      (0, _click.fireLinkClickedEvent)(createAnalyticsEvent)(event);
    }
  }, [handler, predicate, createAnalyticsEvent]);
};
var isNotLeftClick = function isNotLeftClick(event) {
  return event.button !== 0;
};
var useMouseDownEvent = exports.useMouseDownEvent = function useMouseDownEvent(onMouseDown) {
  return useLinkClicked(onMouseDown, isNotLeftClick);
};