"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractIconFromDocument = void 0;
var _react = _interopRequireDefault(require("react"));
var _ = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/document/16"));
var _2 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/generic/16"));
var _3 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/presentation/16"));
var _4 = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/spreadsheet/16"));
var _5 = _interopRequireDefault(require("@atlaskit/icon-object/glyph/blog/16"));
var _fileDocumentFilled = _interopRequireDefault(require("@atlaskit/icon/core/migration/file--document-filled"));
var _pageDocumentFilled = _interopRequireDefault(require("@atlaskit/icon/core/migration/page--document-filled"));
var _linkExtractors = require("@atlaskit/link-extractors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _blogIcon = _interopRequireDefault(require("../../../common/ui/icons/blog-icon"));
var _chartBarIcon = _interopRequireDefault(require("../../../common/ui/icons/chart-bar-icon"));
var _fileIcon = _interopRequireDefault(require("../../../common/ui/icons/file-icon"));
var _listBulletIcon = _interopRequireDefault(require("../../../common/ui/icons/list-bullet-icon"));
var _liveDocumentIcon = _interopRequireDefault(require("../../../common/ui/icons/live-document-icon"));
var _pageIcon = _interopRequireDefault(require("../../../common/ui/icons/page-icon"));
var _utils = require("../../../utils");
var _prioritiseIcon = require("./prioritiseIcon");
// TODO Delete this and rename BlogIconNew to BlogIcon when cleaning platform-smart-card-icon-migration
var BlogIcon = function BlogIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_blogIcon.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_5.default, props);
};

// TODO Delete this and rename FileIconNew to FileIcon when cleaning platform-smart-card-icon-migration
var FileIcon = function FileIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_fileIcon.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_2.default, props);
};

// TODO Delete this and rename DocumentIconNew to DocumentIcon when cleaning platform-smart-card-icon-migration
var DocumentIcon = function DocumentIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_pageIcon.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_.default, props);
};

// TODO Delete this and rename PresentationIconNew to PresentationIcon when cleaning platform-smart-card-icon-migration
var PresentationIcon = function PresentationIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_chartBarIcon.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_3.default, props);
};

// TODO Delete this and rename SpreadsheetIconNew to SpreadsheetIcon when cleaning platform-smart-card-icon-migration
var SpreadsheetIcon = function SpreadsheetIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_listBulletIcon.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_4.default, props);
};

// TODO Delete this and rename DocumentFilledIconNew to DocumentFilledIcon when cleaning platform-smart-card-icon-migration
var DocumentFilledIcon = function DocumentFilledIcon(props) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/_react.default.createElement(_fileDocumentFilled.default, props);
  }
  return /*#__PURE__*/_react.default.createElement(_pageDocumentFilled.default, props);
};
/**
 * Extracts an icon for a document pbject
 *
 * @param type - The type of the document.
 * @param opts - The options for extracting the icon.
 * @returns The React node representing the extracted icon, or `undefined` if no icon is found.
 */
var extractIconFromDocument = exports.extractIconFromDocument = function extractIconFromDocument(type, opts) {
  var iconFromType = documentTypeToIcon(type, opts);
  var iconFromFileFormat = documentFileFormatToIcon(opts);
  var iconFromProvider = opts.provider && opts.provider.icon;
  return (0, _prioritiseIcon.prioritiseIcon)({
    fileFormatIcon: iconFromFileFormat,
    documentTypeIcon: iconFromType,
    urlIcon: opts.icon,
    providerIcon: iconFromProvider
  });
};
var documentFileFormatToIcon = function documentFileFormatToIcon(opts) {
  if (opts.fileFormat) {
    return (0, _utils.getIconForFileType)(opts.fileFormat);
  }
};
var documentTypeToIcon = function documentTypeToIcon(type, opts) {
  switch (type) {
    case 'schema:BlogPosting':
      return /*#__PURE__*/_react.default.createElement(BlogIcon, {
        label: opts.showIconLabel ? opts.title || 'blog' : '',
        testId: "blog-icon"
      });
    case 'schema:DigitalDocument':
      return digitalDocumentToIcon(opts);
    case 'schema:TextDigitalDocument':
      return /*#__PURE__*/_react.default.createElement(DocumentIcon, {
        label: opts.showIconLabel ? opts.title || 'document' : '',
        testId: "document-icon"
      });
    case 'schema:PresentationDigitalDocument':
      return /*#__PURE__*/_react.default.createElement(PresentationIcon, {
        label: opts.showIconLabel ? opts.title || 'presentation' : '',
        testId: "presentation-icon"
      });
    case 'schema:SpreadsheetDigitalDocument':
      return /*#__PURE__*/_react.default.createElement(SpreadsheetIcon, {
        label: opts.showIconLabel ? opts.title || 'spreadsheet' : '',
        testId: "spreadsheet-icon"
      });
    case 'atlassian:Template':
      return /*#__PURE__*/_react.default.createElement(DocumentFilledIcon, {
        color: "currentColor",
        label: opts.showIconLabel ? opts.title || 'template' : '',
        testId: "document-filled-icon"
      });
    case 'atlassian:UndefinedLink':
      return /*#__PURE__*/_react.default.createElement(DocumentIcon, {
        label: opts.showIconLabel ? opts.title || 'undefinedLink' : '',
        testId: "document-icon"
      });
  }
};

/**
 * Enables providers to represent `schema:DigitalDocument` in a manner which
 * aligns with their customers when representing provider-specific types, which
 * do not apply across multiple providers.
 * @example Confluence digital documents represent 'live documents', specific to Confluence.
 * @remark This mechanism will be superseded by backend-driven icon URLs as part
 * of go/j/MODES-5864. Do not add more!
 */
var digitalDocumentToIcon = function digitalDocumentToIcon(opts) {
  var _opts$provider;
  if ((_opts$provider = opts.provider) !== null && _opts$provider !== void 0 && _opts$provider.id && (0, _linkExtractors.isConfluenceGenerator)(opts.provider.id)) {
    return /*#__PURE__*/_react.default.createElement(_liveDocumentIcon.default, {
      label: "live-doc",
      testId: "live-doc-icon"
    });
  } else {
    return /*#__PURE__*/_react.default.createElement(FileIcon, {
      label: opts.showIconLabel ? opts.title || 'file' : '',
      testId: "file-icon"
    });
  }
};