"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractEmbedProps = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _linkExtractors = require("@atlaskit/link-extractors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _jsonld = require("../../utils/jsonld");
var _icon = require("../common/icon");
var _extractIsSupportTheming = require("../common/meta/extractIsSupportTheming");
var _extractIsTrusted = require("../common/meta/extractIsTrusted");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var extractEmbedPreview = function extractEmbedPreview(jsonLd, platform, iframeUrlType) {
  var preview = (0, _linkExtractors.extractPreview)(jsonLd, platform, iframeUrlType);
  if (preview && preview.src) {
    return _objectSpread(_objectSpread({}, preview), {}, {
      src: preview.src
    });
  }
};
function generateContext(jsonLd) {
  var provider = (0, _linkExtractors.extractProvider)(jsonLd);
  if (!provider) {
    return undefined;
  }

  // If no icon is supplied, return existing context
  if (!jsonLd.icon) {
    return provider;
  }
  var generator = jsonLd.generator;
  var icon = (0, _icon.prioritiseIcon)({
    fileFormatIcon: undefined,
    documentTypeIcon: undefined,
    urlIcon: (0, _linkExtractors.extractUrlFromIconJsonLd)(jsonLd.icon),
    // We still attempt to follow the icon priority function even if no generator (and therefore provider icon) is defined
    providerIcon: generator && typeof generator !== 'string' && generator['@type'] !== 'Link' && (0, _linkExtractors.extractProviderIcon)(generator.icon)
  });
  return _objectSpread(_objectSpread({}, provider), {}, {
    icon: icon ? icon : provider.icon
  });
}

/**
 * We can migrate this to link extractors once we have deprecated JsonLd
 */
function extractSmartLinkContext(response) {
  if ((0, _linkExtractors.isEntityPresent)(response)) {
    return (0, _linkExtractors.extractEntityProvider)(response);
  }
  return generateContext(response === null || response === void 0 ? void 0 : response.data);
}
var extractEmbedProps = exports.extractEmbedProps = function extractEmbedProps(response, platform, iframeUrlType) {
  var meta = response === null || response === void 0 ? void 0 : response.meta;
  var jsonLd = (response === null || response === void 0 ? void 0 : response.data) || (0, _jsonld.getEmptyJsonLd)();
  if ((0, _platformFeatureFlags.fg)('smart_links_noun_support')) {
    return {
      link: (0, _linkExtractors.extractSmartLinkUrl)(response) || '',
      title: (0, _linkExtractors.extractSmartLinkTitle)(response),
      context: extractSmartLinkContext(response),
      preview: (0, _linkExtractors.extractSmartLinkEmbed)(response, iframeUrlType),
      isTrusted: (0, _extractIsTrusted.extractIsTrusted)(meta),
      isSupportTheming: (0, _extractIsSupportTheming.extractIsSupportTheming)(meta)
    };
  }
  return {
    link: (0, _linkExtractors.extractLink)(jsonLd) || '',
    title: (0, _linkExtractors.extractTitle)(jsonLd),
    context: generateContext(jsonLd),
    preview: extractEmbedPreview(jsonLd, platform, iframeUrlType),
    isTrusted: (0, _extractIsTrusted.extractIsTrusted)(meta),
    isSupportTheming: (0, _extractIsSupportTheming.extractIsSupportTheming)(meta)
  };
};