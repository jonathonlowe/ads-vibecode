"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractInvokePreviewAction = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _linkExtractors = require("@atlaskit/link-extractors");
var _index = require("../../index");
var _helpers = require("../../state/helpers");
var _canShowAction = require("../../utils/actions/can-show-action");
var _utils = require("../../view/EmbedModal/utils");
var _extractIsSupportTheming = require("../common/meta/extractIsSupportTheming");
var _extractIsTrusted = require("../common/meta/extractIsTrusted");
var _icon = require("../flexible/icon");
var _extractInvokeDownloadAction = require("./extract-invoke-download-action");
var _extractInvokeViewAction = require("./extract-invoke-view-action");
var extractInvokePreviewAction = exports.extractInvokePreviewAction = function extractInvokePreviewAction(param) {
  var _extractPreviewData;
  var actionOptions = param.actionOptions,
    display = param.appearance,
    fireEvent = param.fireEvent,
    onClose = param.onClose,
    id = param.id,
    origin = param.origin,
    response = param.response;
  if (!(0, _canShowAction.canShowAction)(_index.CardAction.PreviewAction, actionOptions)) {
    return;
  }
  var data = response.data;
  var meta = response.meta;
  var src = (_extractPreviewData = (0, _linkExtractors.extractPreview)(data, 'web')) === null || _extractPreviewData === void 0 ? void 0 : _extractPreviewData.src;
  if (src) {
    var url = (0, _linkExtractors.extractLink)(data);
    var extensionKey = (0, _helpers.getExtensionKey)(response);
    return {
      actionFn: function () {
        var _actionFn = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          var _extractProvider;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", (0, _utils.openEmbedModal)({
                  fireEvent: fireEvent,
                  extensionKey: extensionKey,
                  id: id,
                  invokeDownloadAction: (0, _extractInvokeDownloadAction.extractInvokeDownloadAction)(param),
                  invokeViewAction: (0, _extractInvokeViewAction.extractInvokeViewAction)(param, true),
                  isSupportTheming: (0, _extractIsSupportTheming.extractIsSupportTheming)(meta),
                  isTrusted: (0, _extractIsTrusted.extractIsTrusted)(meta),
                  linkIcon: (0, _icon.extractLinkIcon)(response),
                  providerName: (_extractProvider = (0, _linkExtractors.extractProvider)(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text,
                  onClose: onClose,
                  origin: origin,
                  src: src,
                  title: (0, _linkExtractors.extractTitle)(data),
                  url: url
                }));
              case 1:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function actionFn() {
          return _actionFn.apply(this, arguments);
        }
        return actionFn;
      }(),
      actionSubjectId: 'invokePreviewScreen',
      actionType: _index.ActionName.PreviewAction,
      display: display,
      extensionKey: extensionKey,
      id: id
    };
  }
};