"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractInvokeViewAction = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _linkExtractors = require("@atlaskit/link-extractors");
var _index = require("../../index");
var _helpers = require("../../state/helpers");
var _utils = require("../../utils");
var _canShowAction = require("../../utils/actions/can-show-action");
var _extractActions = require("../common/actions/extractActions");
var extractInvokeViewAction = exports.extractInvokeViewAction = function extractInvokeViewAction(_ref, force) {
  var actionOptions = _ref.actionOptions,
    appearance = _ref.appearance,
    id = _ref.id,
    response = _ref.response;
  if (!(0, _canShowAction.canShowAction)(_index.CardAction.ViewAction, actionOptions)) {
    return;
  }
  var data = response.data;
  if (!data) {
    return;
  }
  var url = (0, _linkExtractors.extractLink)(data);
  var viewActionExists = (0, _extractActions.getActionsFromJsonLd)(data).find(function (action) {
    return action['@type'] === 'ViewAction';
  });
  if (url && (viewActionExists || force)) {
    return {
      actionFn: function () {
        var _actionFn = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", (0, _utils.openUrl)(url));
              case 1:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        function actionFn() {
          return _actionFn.apply(this, arguments);
        }
        return actionFn;
      }(),
      actionSubjectId: 'shortcutGoToLink',
      actionType: 'ViewAction',
      definitionId: (0, _helpers.getDefinitionId)(response),
      display: appearance,
      extensionKey: (0, _helpers.getExtensionKey)(response),
      id: id,
      resourceType: (0, _helpers.getResourceType)(response)
    };
  }
};