"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardWithUrlContent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _useAnalyticsEvents2 = require("../../common/analytics/generated/use-analytics-events");
var _constants = require("../../constants");
var _state = require("../../state");
var _analytics = require("../../state/analytics");
var _helpers = require("../../state/helpers");
var _modal = require("../../state/modal");
var _utils = require("../../utils");
var _combineActionOptions = require("../../utils/actions/combine-action-options");
var _click = require("../../utils/analytics/click");
var _SmartLinkAnalyticsContext = require("../../utils/analytics/SmartLinkAnalyticsContext");
var _flexible = require("../../utils/flexible");
var measure = _interopRequireWildcard(require("../../utils/performance"));
var _BlockCard = require("../BlockCard");
var _EmbedCard = require("../EmbedCard");
var _FlexibleCard = _interopRequireDefault(require("../FlexibleCard"));
var _InlineCard = require("../InlineCard");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function Component(_ref) {
  var id = _ref.id,
    url = _ref.url,
    isSelected = _ref.isSelected,
    isHovered = _ref.isHovered,
    frameStyle = _ref.frameStyle,
    platform = _ref.platform,
    onClick = _ref.onClick,
    appearance = _ref.appearance,
    onResolve = _ref.onResolve,
    onError = _ref.onError,
    testId = _ref.testId,
    actionOptionsProp = _ref.actionOptions,
    inheritDimensions = _ref.inheritDimensions,
    embedIframeRef = _ref.embedIframeRef,
    embedIframeUrlType = _ref.embedIframeUrlType,
    inlinePreloaderStyle = _ref.inlinePreloaderStyle,
    ui = _ref.ui,
    children = _ref.children,
    showHoverPreview = _ref.showHoverPreview,
    hoverPreviewOptions = _ref.hoverPreviewOptions,
    removeTextHighlightingFromTitle = _ref.removeTextHighlightingFromTitle,
    resolvingPlaceholder = _ref.resolvingPlaceholder,
    truncateInline = _ref.truncateInline;
  var _useAnalyticsEventsNe = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEventsNe.createAnalyticsEvent;
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;

  // Get state, actions for this card.
  var _useSmartLink = (0, _state.useSmartLink)(id, url),
    state = _useSmartLink.state,
    actions = _useSmartLink.actions,
    config = _useSmartLink.config,
    renderers = _useSmartLink.renderers,
    error = _useSmartLink.error;
  var definitionId = (0, _helpers.getDefinitionId)(state.details);
  var extensionKey = (0, _helpers.getExtensionKey)(state.details);
  var resourceType = (0, _helpers.getResourceType)(state.details);
  var services = (0, _helpers.getServices)(state.details);
  var isFlexibleUi = (0, _react.useMemo)(function () {
    return (0, _flexible.isFlexibleUiCard)(children, (0, _platformFeatureFlags.fg)('platform-linking-flexible-card-openness') ? ui : undefined);
  }, [children, ui]);
  var actionOptions = (0, _combineActionOptions.combineActionOptions)({
    actionOptions: actionOptionsProp,
    platform: platform
  });

  // Setup UI handlers.
  var handleClickWrapper = (0, _react.useCallback)(function (event) {
    var isModifierKeyPressed = (0, _utils.isSpecialEvent)(event);
    fireEvent('ui.smartLink.clicked', {
      id: id,
      display: isFlexibleUi ? _constants.CardDisplay.Flexible : appearance,
      definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null,
      isModifierKeyPressed: isModifierKeyPressed
    });
    if (!onClick && !isFlexibleUi) {
      var clickUrl = (0, _helpers.getClickUrl)(url, state.details);
      // Ctrl+left click on mac typically doesn't trigger onClick
      // The event could have potentially had `e.preventDefault()` called on it by now
      // event by smart card internally
      // If it has been called then only then can `isModifierKeyPressed` be true.
      var target = isModifierKeyPressed ? '_blank' : '_self';
      window.open(clickUrl, target);
      (0, _click.fireLinkClickedEvent)(createAnalyticsEvent)(event, {
        attributes: {
          clickOutcome: target === '_blank' ? 'clickThroughNewTabOrWindow' : 'clickThrough'
        }
      });
    } else {
      if (onClick) {
        onClick(event);
      }
      (0, _click.fireLinkClickedEvent)(createAnalyticsEvent)(event);
    }
  }, [id, url, state.details, appearance, definitionId, onClick, isFlexibleUi, createAnalyticsEvent, fireEvent]);
  var handleAuthorize = (0, _react.useCallback)(function () {
    return actions.authorize(appearance);
  }, [actions, appearance]);
  var handleRetry = (0, _react.useCallback)(function () {
    actions.reload();
  }, [actions]);
  var handleInvoke = (0, _react.useCallback)(function (opts) {
    return actions.invoke(opts, appearance);
  }, [actions, appearance]);

  // NB: for each status change in a Smart Link, a performance mark is created.
  // Measures are sent relative to the first mark, matching what a user sees.
  (0, _react.useEffect)(function () {
    measure.mark(id, state.status);
    if (state.status !== 'pending' && state.status !== 'resolving') {
      var _state$error, _state$error2;
      measure.create(id, state.status);
      if (state.status === 'resolved') {
        var _measure$getMeasure$d, _measure$getMeasure;
        fireEvent('operational.smartLink.resolved', {
          definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null,
          duration: (_measure$getMeasure$d = (_measure$getMeasure = measure.getMeasure(id, state.status)) === null || _measure$getMeasure === void 0 ? void 0 : _measure$getMeasure.duration) !== null && _measure$getMeasure$d !== void 0 ? _measure$getMeasure$d : null
        });
      } else if (((_state$error = state.error) === null || _state$error === void 0 ? void 0 : _state$error.type) !== 'ResolveUnsupportedError' && ((_state$error2 = state.error) === null || _state$error2 === void 0 ? void 0 : _state$error2.type) !== 'UnsupportedError') {
        fireEvent('operational.smartLink.unresolved', {
          definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null,
          reason: state.status,
          error: state.error === undefined ? null : {
            name: state.error.name,
            kind: state.error.kind,
            type: state.error.type
          }
        });
      }
    }
  }, [id, appearance, state.status, state.error, definitionId, extensionKey, resourceType, fireEvent]);

  // NB: once the smart-card has rendered into an end state, we capture
  // this as a successful render. These can be one of:
  // - the resolved state: when metadata is shown;
  // - the unresolved states: viz. forbidden, not_found, unauthorized, errored.
  (0, _react.useEffect)(function () {
    if ((0, _helpers.isFinalState)(state.status)) {
      (0, _analytics.succeedUfoExperience)('smart-link-rendered', id || 'NULL', {
        extensionKey: extensionKey,
        display: isFlexibleUi ? 'flexible' : appearance
      });

      // UFO will disregard this if authentication experience has not yet been started
      (0, _analytics.succeedUfoExperience)('smart-link-authenticated', id || 'NULL', {
        display: isFlexibleUi ? 'flexible' : appearance
      });
      fireEvent('ui.smartLink.renderSuccess', {
        display: isFlexibleUi ? 'flexible' : appearance
      });
    }
  }, [appearance, extensionKey, fireEvent, id, isFlexibleUi, state.status]);
  var onIframeDwell = (0, _react.useCallback)(function (dwellTime, dwellPercentVisible) {
    fireEvent('ui.smartLinkIframe.dwelled', {
      id: id,
      definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null,
      display: isFlexibleUi ? 'flexible' : appearance,
      dwellPercentVisible: dwellPercentVisible,
      dwellTime: dwellTime
    });
  }, [id, appearance, definitionId, isFlexibleUi, fireEvent]);
  var onIframeFocus = (0, _react.useCallback)(function () {
    fireEvent('ui.smartLinkIframe.focused', {
      id: id,
      definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null,
      display: isFlexibleUi ? 'flexible' : appearance
    });
  }, [id, appearance, definitionId, isFlexibleUi, fireEvent]);
  if (isFlexibleUi) {
    var cardState = state;
    if (error) {
      if ((error === null || error === void 0 ? void 0 : error.name) === 'APIError') {
        cardState = {
          status: 'errored'
        };
      } else {
        throw error;
      }
    }
    return /*#__PURE__*/_react.default.createElement(_FlexibleCard.default, {
      id: id,
      cardState: cardState,
      onAuthorize: services.length && handleAuthorize || undefined,
      onClick: handleClickWrapper,
      origin: "smartLinkCard",
      renderers: renderers,
      ui: ui,
      showHoverPreview: showHoverPreview,
      hoverPreviewOptions: hoverPreviewOptions,
      actionOptions: actionOptions,
      url: url,
      testId: testId,
      onResolve: onResolve,
      onError: onError
    }, children);
  }

  // We have to keep this last to prevent hook order from being violated
  if (error) {
    throw error;
  }
  switch (appearance) {
    case 'inline':
      return /*#__PURE__*/_react.default.createElement(_InlineCard.InlineCard, {
        id: id,
        url: url,
        renderers: renderers,
        cardState: state,
        handleAuthorize: services.length && handleAuthorize || undefined,
        handleFrameClick: handleClickWrapper,
        isSelected: isSelected,
        isHovered: isHovered,
        onResolve: onResolve,
        onError: onError,
        testId: testId,
        inlinePreloaderStyle: inlinePreloaderStyle,
        showHoverPreview: showHoverPreview,
        hoverPreviewOptions: hoverPreviewOptions,
        actionOptions: actionOptions,
        removeTextHighlightingFromTitle: removeTextHighlightingFromTitle,
        resolvingPlaceholder: resolvingPlaceholder,
        truncateInline: truncateInline
      });
    case 'block':
      return /*#__PURE__*/_react.default.createElement(_BlockCard.BlockCard, {
        id: id,
        url: url,
        renderers: renderers,
        authFlow: config && config.authFlow,
        cardState: state,
        handleAuthorize: services.length && handleAuthorize || undefined,
        handleFrameClick: handleClickWrapper,
        isSelected: isSelected,
        onResolve: onResolve,
        onError: onError,
        testId: testId,
        actionOptions: actionOptions
      });
    case 'embed':
      return /*#__PURE__*/_react.default.createElement(_EmbedCard.EmbedCard, {
        id: id,
        url: url,
        renderers: renderers,
        cardState: state,
        iframeUrlType: embedIframeUrlType,
        handleAuthorize: services.length && handleAuthorize || undefined,
        handleErrorRetry: handleRetry,
        handleFrameClick: handleClickWrapper,
        handleInvoke: handleInvoke,
        isSelected: isSelected,
        frameStyle: frameStyle,
        platform: platform,
        onResolve: onResolve,
        onError: onError,
        testId: testId,
        inheritDimensions: inheritDimensions,
        actionOptions: actionOptions,
        ref: embedIframeRef,
        onIframeDwell: onIframeDwell,
        onIframeFocus: onIframeFocus
      });
  }
}
var CardWithUrlContent = exports.CardWithUrlContent = function CardWithUrlContent(props) {
  var display = (0, _flexible.isFlexibleUiCard)(props.children, (0, _platformFeatureFlags.fg)('platform-linking-flexible-card-openness') ? props === null || props === void 0 ? void 0 : props.ui : undefined) ? _constants.CardDisplay.Flexible : props.appearance;
  return /*#__PURE__*/_react.default.createElement(_modal.SmartLinkModalProvider, null, /*#__PURE__*/_react.default.createElement(_SmartLinkAnalyticsContext.SmartLinkAnalyticsContext, {
    url: props.url,
    id: props.id,
    display: display
  }, /*#__PURE__*/_react.default.createElement(Component, props)));
};