"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hoverCardClassName = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _linkProvider = require("@atlaskit/link-provider");
var _useAnalyticsEvents2 = require("../../../common/analytics/generated/use-analytics-events");
var _constants = require("../../../constants");
var _helpers = require("../../../state/helpers");
var _store = require("../../../state/store");
var _utils = require("../../../utils");
var _aiSummary = require("../../../utils/ai-summary");
var _click = require("../../../utils/analytics/click");
var _styled = require("../styled");
var _utils2 = require("../utils");
var _ContentContainer = _interopRequireDefault(require("./ContentContainer"));
var _forbidden = _interopRequireDefault(require("./views/forbidden"));
var _resolved = _interopRequireDefault(require("./views/resolved"));
var _resolving = _interopRequireDefault(require("./views/resolving"));
var _unauthorised = _interopRequireDefault(require("./views/unauthorised"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var hoverCardClassName = exports.hoverCardClassName = 'smart-links-hover-preview';
var HoverCardContent = function HoverCardContent(_ref) {
  var _linkState$status, _cardState$details;
  var _ref$id = _ref.id,
    id = _ref$id === void 0 ? '' : _ref$id,
    cardState = _ref.cardState,
    onActionClick = _ref.onActionClick,
    onResolve = _ref.onResolve,
    renderers = _ref.renderers,
    url = _ref.url,
    onMouseEnter = _ref.onMouseEnter,
    onMouseLeave = _ref.onMouseLeave,
    actionOptions = _ref.actionOptions;
  var _useAnalyticsEventsNe = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEventsNe.createAnalyticsEvent;
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var extensionKey = (0, _react.useMemo)(function () {
    return (0, _helpers.getExtensionKey)(cardState.details);
  }, [cardState.details]);
  var linkState = (0, _store.useSmartCardState)(url);
  var linkStatus = (_linkState$status = linkState.status) !== null && _linkState$status !== void 0 ? _linkState$status : 'pending';
  var definitionId = (0, _react.useMemo)(function () {
    return (0, _helpers.getDefinitionId)(cardState.details);
  }, [cardState.details]);
  var _useSmartLinkContext = (0, _linkProvider.useSmartLinkContext)(),
    isAdminHubAIEnabled = _useSmartLinkContext.isAdminHubAIEnabled;
  var isAISummaryEnabled = (0, _aiSummary.getIsAISummaryEnabled)(isAdminHubAIEnabled, cardState.details);
  var services = (0, _helpers.getServices)(linkState.details);
  var statusRef = (0, _react.useRef)(linkStatus);
  var fireEventRef = (0, _react.useRef)(fireEvent);
  var definitionIdRef = (0, _react.useRef)(definitionId);
  (0, _react.useEffect)(function () {
    /**
     * Must access object value via ref because its not stable
     * and it can trigger useEffect to re-run below
     */
    if (statusRef.current !== linkStatus) {
      statusRef.current = linkStatus;
    }
    if (fireEventRef.current !== fireEvent) {
      fireEventRef.current = fireEvent;
    }
    if (definitionIdRef.current !== definitionId) {
      definitionIdRef.current = definitionId;
    }
  }, [linkStatus, fireEvent, definitionId]);
  (0, _react.useEffect)(function () {
    var _definitionIdRef$curr;
    var previewDisplay = 'card';
    var previewInvokeMethod = 'mouse_hover';
    var cardOpenTime = Date.now();
    var fireEventCurrent = fireEventRef.current;
    fireEventCurrent('ui.hoverCard.viewed', {
      previewDisplay: previewDisplay,
      previewInvokeMethod: previewInvokeMethod,
      definitionId: (_definitionIdRef$curr = definitionIdRef.current) !== null && _definitionIdRef$curr !== void 0 ? _definitionIdRef$curr : null
    });
    return function () {
      var _definitionIdRef$curr2;
      var hoverTime = Date.now() - cardOpenTime;
      fireEventCurrent('ui.hoverCard.dismissed', {
        previewDisplay: previewDisplay,
        previewInvokeMethod: previewInvokeMethod,
        hoverTime: hoverTime,
        definitionId: (_definitionIdRef$curr2 = definitionIdRef.current) !== null && _definitionIdRef$curr2 !== void 0 ? _definitionIdRef$curr2 : null
      });
    };
  }, []);
  var onClick = (0, _react.useCallback)(function (event) {
    var isModifierKeyPressed = (0, _utils.isSpecialEvent)(event);
    fireEvent('ui.smartLink.clicked.titleGoToLink', {
      id: id,
      display: _constants.CardDisplay.HoverCardPreview,
      isModifierKeyPressed: isModifierKeyPressed,
      definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null
    });
    (0, _click.fireLinkClickedEvent)(createAnalyticsEvent)(event);
  }, [createAnalyticsEvent, id, fireEvent, definitionId]);
  var data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  var _getMetadata = (0, _utils2.getMetadata)(extensionKey, data),
    subtitle = _getMetadata.subtitle;
  var titleMaxLines = subtitle && subtitle.length > 0 ? 1 : 2;
  var titleBlockProps = {
    maxLines: titleMaxLines,
    size: _constants.SmartLinkSize.Large,
    position: _constants.SmartLinkPosition.Center,
    subtitle: subtitle
  };
  var flexibleCardProps = {
    appearance: _constants.CardDisplay.HoverCardPreview,
    cardState: cardState,
    onClick: onClick,
    onResolve: onResolve,
    origin: 'smartLinkPreviewHoverCard',
    renderers: renderers,
    actionOptions: actionOptions,
    ui: _styled.flexibleUiOptions,
    url: url,
    children: null
  };
  var onClickStopPropagation = (0, _react.useCallback)(function (e) {
    return e.stopPropagation();
  }, []);
  var getCardView = function getCardView(cardState) {
    if (cardState.metadataStatus === 'pending') {
      return /*#__PURE__*/_react.default.createElement(_resolving.default, {
        flexibleCardProps: flexibleCardProps,
        titleBlockProps: titleBlockProps
      });
    }
    if (cardState.status === 'unauthorized' && services !== null && services !== void 0 && services.length) {
      return /*#__PURE__*/_react.default.createElement(_unauthorised.default, {
        extensionKey: extensionKey,
        id: id,
        flexibleCardProps: flexibleCardProps,
        url: url
      });
    }
    if (cardState.status === 'forbidden' || cardState.status === 'not_found') {
      return /*#__PURE__*/_react.default.createElement(_forbidden.default, {
        flexibleCardProps: flexibleCardProps
      });
    }
    if (cardState.status === 'resolved') {
      return /*#__PURE__*/_react.default.createElement(_resolved.default, {
        cardState: cardState,
        extensionKey: extensionKey,
        flexibleCardProps: flexibleCardProps,
        isAISummaryEnabled: isAISummaryEnabled,
        onActionClick: onActionClick,
        titleBlockProps: titleBlockProps,
        url: url
      });
    }
    return null;
  };
  var cardView = getCardView(cardState);
  return cardView ? /*#__PURE__*/_react.default.createElement(_ContentContainer.default, {
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClickStopPropagation,
    isAIEnabled: isAISummaryEnabled,
    url: url
  }, cardView) : null;
};
var _default = exports.default = HoverCardContent;