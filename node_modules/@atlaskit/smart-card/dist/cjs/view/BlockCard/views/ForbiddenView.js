/* ForbiddenView.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./ForbiddenView.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _reactIntlNext = require("react-intl-next");
var _analyticsNext = require("@atlaskit/analytics-next");
var _lockLocked = _interopRequireDefault(require("@atlaskit/icon/core/lock-locked"));
var _lock = _interopRequireDefault(require("@atlaskit/icon/glyph/lock"));
var _linkExtractors = require("@atlaskit/link-extractors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _extractAccessContext = require("../../../extractors/common/context/extractAccessContext");
var _extractHostname = _interopRequireDefault(require("../../../extractors/common/hostname/extractHostname"));
var _messages = require("../../../messages");
var _intlUtils = require("../../../utils/intl-utils");
var _jsonld = require("../../../utils/jsonld");
var _text = _interopRequireDefault(require("../../FlexibleCard/components/elements/text"));
var _ForbiddenAction = require("../actions/ForbiddenAction");
var _unresolvedView = _interopRequireDefault(require("./unresolved-view"));
var _withFlexibleUIBlockCardStyle = require("./utils/withFlexibleUIBlockCardStyle");
var _excluded = ["testId"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var textStyles = null;

/**
 * This view represent a Block Card with the 'Forbidden' status.
 * It should have a "Try another account" button that will allow a user to connect another account and view the block card.
 *
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
var ForbiddenView = function ForbiddenView(_ref) {
  var _details$meta;
  var _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-forbidden-view' : _ref$testId,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var intl = (0, _reactIntlNext.useIntl)();
  var cardState = props.cardState,
    onAuthorize = props.onAuthorize,
    url = props.url;
  var details = cardState === null || cardState === void 0 ? void 0 : cardState.details;
  var cardMetadata = (_details$meta = details === null || details === void 0 ? void 0 : details.meta) !== null && _details$meta !== void 0 ? _details$meta : (0, _jsonld.getForbiddenJsonLd)().meta;
  var provider = (0, _linkExtractors.extractProvider)(details === null || details === void 0 ? void 0 : details.data);
  var providerName = (provider === null || provider === void 0 ? void 0 : provider.text) || '';
  var messageContext = (0, _react.useMemo)(function () {
    var hostname = /*#__PURE__*/React.createElement("b", null, (0, _extractHostname.default)(url));
    return {
      product: providerName,
      hostname: hostname
    };
  }, [providerName, url]);
  var requestAccessContext = (0, _react.useMemo)(function () {
    return (0, _extractAccessContext.extractRequestAccessContextImproved)({
      jsonLd: cardMetadata,
      url: url,
      product: providerName,
      createAnalyticsEvent: createAnalyticsEvent
    });
  }, [cardMetadata, providerName, url, createAnalyticsEvent]);
  var title = (0, _react.useMemo)(function () {
    var descriptor = (0, _intlUtils.toMessage)(_messages.messages.invalid_permissions, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.titleMessageKey);
    return intl.formatMessage(descriptor, {
      product: providerName
    });
  }, [intl, providerName, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.titleMessageKey]);
  var actions = (0, _react.useMemo)(function () {
    var actionFromAccessContext = [];
    var tryAnotherAccountAction = onAuthorize ? [(0, _ForbiddenAction.ForbiddenAction)(onAuthorize, 'try_another_account')] : [];
    if (requestAccessContext) {
      var action = requestAccessContext.action,
        callToActionMessageKey = requestAccessContext.callToActionMessageKey;
      actionFromAccessContext = action && callToActionMessageKey ? [(0, _ForbiddenAction.ForbiddenAction)(action.promise, callToActionMessageKey, messageContext, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.buttonDisabled)] : [];
    }
    return [].concat(tryAnotherAccountAction, (0, _toConsumableArray2.default)(actionFromAccessContext));
  }, [onAuthorize, requestAccessContext, messageContext]);
  return /*#__PURE__*/React.createElement(_unresolvedView.default, (0, _extends2.default)({}, props, {
    actions: actions,
    showPreview: true,
    testId: testId,
    title: title
  }), (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(_lockLocked.default, {
    label: "forbidden-lock-icon",
    color: "var(--ds-icon-danger, #C9372C)",
    LEGACY_fallbackIcon: _lock.default,
    LEGACY_size: "small",
    testId: "".concat(testId, "-lock-icon")
  }) :
  /*#__PURE__*/
  // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons -- TODO - https://product-fabric.atlassian.net/browse/DSP-19497
  React.createElement(_lock.default, {
    label: "forbidden-lock-icon",
    size: "small",
    primaryColor: "var(--ds-icon-danger, ".concat(_colors.R300, ")"),
    testId: "".concat(testId, "-lock-icon")
  }), /*#__PURE__*/React.createElement(_text.default, {
    maxLines: 3,
    message: {
      descriptor: (0, _intlUtils.toMessage)(_messages.messages.invalid_permissions_description, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.descriptiveMessageKey),
      values: messageContext
    },
    className: (0, _runtime.ax)([(0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && "_syaz1fxt"])
  }));
};
var _default = exports.default = (0, _withFlexibleUIBlockCardStyle.withFlexibleUIBlockCardStyle)(ForbiddenView);