"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockCard = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _useControlDataExportConfig = require("../../state/hooks/use-control-data-export-config");
var _shouldDataExport = require("../../utils/should-data-export");
var _utils = require("../common/utils");
var _LinkView = require("../LinkView");
var _ErroredView = _interopRequireDefault(require("./views/ErroredView"));
var _ForbiddenView = _interopRequireDefault(require("./views/ForbiddenView"));
var _NotFoundView = _interopRequireDefault(require("./views/NotFoundView"));
var _ResolvedView = _interopRequireDefault(require("./views/ResolvedView"));
var _UnauthorisedView = _interopRequireDefault(require("./views/UnauthorisedView"));
var BlockCard = exports.BlockCard = function BlockCard(_ref) {
  var id = _ref.id,
    url = _ref.url,
    cardState = _ref.cardState,
    authFlow = _ref.authFlow,
    handleAuthorize = _ref.handleAuthorize,
    handleFrameClick = _ref.handleFrameClick,
    renderers = _ref.renderers,
    isSelected = _ref.isSelected,
    onResolve = _ref.onResolve,
    onError = _ref.onError,
    testId = _ref.testId,
    actionOptions = _ref.actionOptions;
  var status = cardState.status;
  var blockCardProps = {
    id: id,
    cardState: cardState,
    url: url,
    testId: testId,
    onClick: function onClick(event) {
      return (0, _utils.handleClickCommon)(event, handleFrameClick);
    },
    onError: onError,
    onResolve: onResolve,
    renderers: renderers,
    actionOptions: actionOptions
  };
  var _useControlDataExport = (0, _useControlDataExportConfig.useControlDataExportConfig)(),
    _useControlDataExport2 = _useControlDataExport.shouldControlDataExport,
    shouldControlDataExport = _useControlDataExport2 === void 0 ? false : _useControlDataExport2;
  switch (status) {
    case 'pending':
    case 'resolving':
      return /*#__PURE__*/_react.default.createElement(_ResolvedView.default, (0, _extends2.default)({}, blockCardProps, {
        testId: "smart-block-resolving-view"
      }));
    case 'resolved':
      if ((0, _platformFeatureFlags.fg)('platform_smart_links_controlled_dsp_export_view')) {
        if ((0, _shouldDataExport.getIsDataExportEnabled)(shouldControlDataExport, cardState.details)) {
          return /*#__PURE__*/_react.default.createElement(_UnauthorisedView.default, (0, _extends2.default)({}, blockCardProps, {
            onAuthorize: handleAuthorize
          }));
        }
      }
      return /*#__PURE__*/_react.default.createElement(_ResolvedView.default, blockCardProps);
    case 'unauthorized':
      return /*#__PURE__*/_react.default.createElement(_UnauthorisedView.default, (0, _extends2.default)({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'forbidden':
      return /*#__PURE__*/_react.default.createElement(_ForbiddenView.default, (0, _extends2.default)({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'not_found':
      return /*#__PURE__*/_react.default.createElement(_NotFoundView.default, (0, _extends2.default)({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
    case 'fallback':
    case 'errored':
    default:
      if (onError) {
        onError({
          url: url,
          status: status
        });
      }
      if (authFlow && authFlow === 'disabled') {
        return /*#__PURE__*/_react.default.createElement(_LinkView.CardLinkView, {
          link: url,
          isSelected: isSelected,
          onClick: handleFrameClick,
          testId: "".concat(testId, "-").concat(status)
        });
      }
      return /*#__PURE__*/_react.default.createElement(_ErroredView.default, (0, _extends2.default)({}, blockCardProps, {
        onAuthorize: handleAuthorize
      }));
  }
};