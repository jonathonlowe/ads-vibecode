"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockTransformedRules = exports.mockRules = exports.mockInvokeUrl = exports.mockGetUrl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _types = require("./types");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var mockScope = {
  resources: []
};
var mockRules = exports.mockRules = {
  data: [{
    id: 0,
    name: 'Test rule 0 (no inputs)',
    ruleScope: mockScope,
    userInputs: []
  }, {
    id: 1,
    name: 'Test rule 1 (has inputs)',
    ruleScope: mockScope,
    userInputs: [{
      defaultValue: '',
      displayName: 'Test user input',
      inputType: _types.UserInputType.TEXT,
      required: false,
      variableName: 'testUserInput'
    }]
  }, {
    id: 2,
    name: 'Test rule 2 (has multiple inputs)',
    ruleScope: mockScope,
    userInputs: [{
      defaultValue: '',
      displayName: 'Text user input',
      inputType: _types.UserInputType.TEXT,
      required: false,
      variableName: 'textUserInput'
    }, {
      defaultValue: '',
      displayName: 'Number user input',
      inputType: _types.UserInputType.NUMBER,
      required: false,
      variableName: 'numberUserInput'
    }, {
      defaultValue: true,
      displayName: 'Boolean user input',
      inputType: _types.UserInputType.BOOLEAN,
      required: false,
      variableName: 'booleanUserInput'
    }, {
      defaultValue: [''],
      displayName: 'Dropdown user input',
      inputType: _types.UserInputType.DROPDOWN,
      required: false,
      variableName: 'dropdownUserInput'
    }, {
      defaultValue: '',
      displayName: 'Paragraph user input',
      inputType: _types.UserInputType.PARAGRAPH,
      required: false,
      variableName: 'paragraphUserInput'
    }]
  }]
};
var mockTransformedRules = exports.mockTransformedRules = [_objectSpread(_objectSpread({}, mockRules.data[0]), {}, {
  userInputPrompts: mockRules.data[0].userInputs
}), _objectSpread(_objectSpread({}, mockRules.data[1]), {}, {
  userInputPrompts: mockRules.data[1].userInputs
}), _objectSpread(_objectSpread({}, mockRules.data[2]), {}, {
  userInputPrompts: mockRules.data[2].userInputs
})];
var mockGetUrl = exports.mockGetUrl = 'https://test-api/get/rules';
var mockInvokeUrl = exports.mockInvokeUrl = 'https://test-api/invoke';