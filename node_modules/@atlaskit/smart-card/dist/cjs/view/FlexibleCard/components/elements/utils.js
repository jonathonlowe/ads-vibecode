"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createElement = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntlNext = require("react-intl-next");
var _constants = require("../../../../constants");
var _messages = require("../../../../messages");
var _flexibleUiContext = require("../../../../state/flexible-ui-context");
var _appliedToComponentsCount = _interopRequireDefault(require("./applied-to-components-count"));
var _atlaskitBadge = _interopRequireDefault(require("./atlaskit-badge"));
var _avatarGroup = _interopRequireDefault(require("./avatar-group"));
var _badge = _interopRequireDefault(require("./badge"));
var _dateTime = _interopRequireDefault(require("./date-time"));
var _icon = _interopRequireDefault(require("./icon"));
var _link = _interopRequireDefault(require("./link"));
var _lozenge = _interopRequireDefault(require("./lozenge"));
var _media = _interopRequireDefault(require("./media"));
var _text = _interopRequireDefault(require("./text"));
var _elementMappings;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var elementMappings = (_elementMappings = {}, (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_elementMappings, _constants.ElementName.AppliedToComponentsCount, {
  component: _appliedToComponentsCount.default,
  props: {
    icon: _constants.IconType.Component
  }
}), _constants.ElementName.AttachmentCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.Attachment
  }
}), _constants.ElementName.AuthorGroup, {
  component: _avatarGroup.default
}), _constants.ElementName.ChecklistProgress, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.CheckItem
  }
}), _constants.ElementName.CollaboratorGroup, {
  component: _avatarGroup.default
}), _constants.ElementName.CommentCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.Comment
  }
}), _constants.ElementName.ViewCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.View
  }
}), _constants.ElementName.ReactCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.React
  }
}), _constants.ElementName.VoteCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.Vote
  }
}), _constants.ElementName.CreatedBy, {
  component: _text.default
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_elementMappings, _constants.ElementName.OwnedBy, {
  component: _text.default
}), _constants.ElementName.AssignedTo, {
  component: _text.default
}), _constants.ElementName.AssignedToGroup, {
  component: _avatarGroup.default
}), _constants.ElementName.OwnedByGroup, {
  component: _avatarGroup.default
}), _constants.ElementName.CreatedOn, {
  component: _dateTime.default
}), _constants.ElementName.DueOn, {
  component: _lozenge.default
}), _constants.ElementName.LatestCommit, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.Commit
  }
}), _constants.ElementName.LinkIcon, {
  component: _icon.default
}), _constants.ElementName.ModifiedBy, {
  component: _text.default
}), _constants.ElementName.ModifiedOn, {
  component: _dateTime.default
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_elementMappings, _constants.ElementName.Preview, {
  component: _media.default
}), _constants.ElementName.Priority, {
  component: _badge.default
}), _constants.ElementName.ProgrammingLanguage, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.ProgrammingLanguage
  }
}), _constants.ElementName.Provider, {
  component: _badge.default
}), _constants.ElementName.ReadTime, {
  component: _text.default
}), _constants.ElementName.SentOn, {
  component: _dateTime.default
}), _constants.ElementName.SourceBranch, {
  component: _text.default
}), _constants.ElementName.State, {
  component: _lozenge.default
}), _constants.ElementName.SubscriberCount, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.Subscriber
  }
}), _constants.ElementName.SubTasksProgress, {
  component: _badge.default,
  props: {
    icon: _constants.IconType.SubTasksProgress
  }
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_elementMappings, _constants.ElementName.StoryPoints, {
  component: _atlaskitBadge.default
}), _constants.ElementName.TargetBranch, {
  component: _text.default
}), _constants.ElementName.Title, {
  component: _link.default
}), _constants.ElementName.Location, {
  component: _link.default,
  props: {
    theme: _constants.SmartLinkInternalTheme.Grey
  }
}));
var getContextKey = function getContextKey(name) {
  // Attempt to predict context prop name in advance to reduce the amount of
  // code run during runtime
  return name.length > 0 ? name.charAt(0).toLowerCase() + name.slice(1) : undefined;
};
var getData = function getData(elementName, contextKey, context) {
  if (!context) {
    return undefined;
  }
  var data = context[contextKey];
  switch (elementName) {
    case _constants.ElementName.AssignedToGroup:
    case _constants.ElementName.AuthorGroup:
    case _constants.ElementName.CollaboratorGroup:
    case _constants.ElementName.OwnedByGroup:
      var AvatarGroupsWithFallback = [_constants.ElementName.AssignedToGroup];
      var showFallbackAvatar = AvatarGroupsWithFallback.includes(elementName);
      return toAvatarGroupProps(data, showFallbackAvatar);
    case _constants.ElementName.AppliedToComponentsCount:
    case _constants.ElementName.AttachmentCount:
    case _constants.ElementName.ChecklistProgress:
    case _constants.ElementName.CommentCount:
    case _constants.ElementName.ViewCount:
    case _constants.ElementName.ReactCount:
    case _constants.ElementName.VoteCount:
    case _constants.ElementName.ProgrammingLanguage:
    case _constants.ElementName.SubscriberCount:
    case _constants.ElementName.LatestCommit:
    case _constants.ElementName.SubTasksProgress:
      return toBadgeProps(data);
    case _constants.ElementName.StoryPoints:
      return toAtlaskitBadgeProps(data);
    case _constants.ElementName.CreatedBy:
      return toFormattedTextProps(_messages.messages.created_by, context.createdBy);
    case _constants.ElementName.AssignedTo:
      return toFormattedTextProps(_messages.messages.assigned_to, context.assignedTo);
    case _constants.ElementName.OwnedBy:
      return toFormattedTextProps(_messages.messages.owned_by, context.ownedBy);
    case _constants.ElementName.CreatedOn:
      return toDateTimeProps('created', context.createdOn);
    case _constants.ElementName.DueOn:
      return toDateLozengeProps(context.dueOn);
    case _constants.ElementName.ModifiedBy:
      return toFormattedTextProps(_messages.messages.modified_by, context.modifiedBy);
    case _constants.ElementName.ModifiedOn:
      return toDateTimeProps('modified', context.modifiedOn);
    case _constants.ElementName.SentOn:
      return toDateTimeProps('sent', context.sentOn);
    case _constants.ElementName.ReadTime:
      return toFormattedTextProps(_messages.messages.read_time, data);
    case _constants.ElementName.SourceBranch:
    case _constants.ElementName.TargetBranch:
      return toTextProps(data);
    case _constants.ElementName.Title:
      return toLinkProps(context.title, context.url);
    default:
      return (0, _typeof2.default)(data) === 'object' ? data : undefined;
  }
};
var toAvatarGroupProps = function toAvatarGroupProps(items, showFallbackAvatar) {
  return items ? {
    items: items
  } : showFallbackAvatar ? {
    items: []
  } : undefined;
};
var toBadgeProps = function toBadgeProps(label) {
  return label ? {
    label: label
  } : undefined;
};
var toAtlaskitBadgeProps = function toAtlaskitBadgeProps(value) {
  return value ? {
    value: value
  } : undefined;
};
var toDateLozengeProps = function toDateLozengeProps(dateString) {
  if (dateString) {
    var text = Date.parse(dateString) ? /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedDate, {
      value: new Date(dateString),
      year: "numeric",
      month: "short",
      day: "numeric",
      formatMatcher: "best fit"
    }) : dateString;
    return {
      text: text
    };
  }
};
var toDateTimeProps = function toDateTimeProps(type, dateString) {
  return dateString ? {
    date: new Date(dateString),
    type: type
  } : undefined;
};
var toFormattedTextProps = function toFormattedTextProps(descriptor, context) {
  return context ? {
    message: {
      descriptor: descriptor,
      values: {
        context: context
      }
    }
  } : undefined;
};
var toLinkProps = function toLinkProps(text, url) {
  return text ? {
    text: text,
    url: url
  } : undefined;
};
var toTextProps = function toTextProps(content) {
  return content ? {
    content: content
  } : undefined;
};
var createElement = exports.createElement = function createElement(name) {
  var _ref = elementMappings[name] || {},
    BaseElement = _ref.component,
    props = _ref.props;
  var contextKey = getContextKey(name);
  if (!BaseElement) {
    throw Error("Element ".concat(name, " does not exist."));
  }
  return function (overrides) {
    var context = (0, _react.useContext)(_flexibleUiContext.FlexibleUiContext);
    var data = getData(name, contextKey, context);
    return data ? /*#__PURE__*/_react.default.createElement(BaseElement, (0, _extends2.default)({}, props, data, overrides, {
      name: name
    })) : null;
  };
};