"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _constants = require("../../../../../constants");
var _elements = require("../../elements");
var _utils = require("../../utils");
var _block = _interopRequireDefault(require("../block"));
var _excluded = ["maxLines", "status", "testId", "text"];
var DEFAULT_MAX_LINES = 3;
var MAXIMUM_MAX_LINES = 6;
var MINIMUM_MAX_LINES = 1;

/**
 * Represents a SnippetBlock, which is used to display longer form text content, like descriptions.
 * @public
 * @param {SnippetBlockProps} SnippetBlockProps
 * @see Block
 */
var SnippetBlock = function SnippetBlock(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? _constants.SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-snippet' : _ref$testId,
    text = _ref.text,
    blockProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  if (status !== _constants.SmartLinkStatus.Resolved && !text) {
    return null;
  }
  var snippetMaxLines = (0, _utils.getMaxLines)(maxLines, DEFAULT_MAX_LINES, MAXIMUM_MAX_LINES, MINIMUM_MAX_LINES);
  var statusTestId = !text ? 'resolved' : 'non-resolved';
  return /*#__PURE__*/_react.default.createElement(_block.default, (0, _extends2.default)({}, blockProps, {
    testId: "".concat(testId, "-").concat(statusTestId, "-view")
  }), /*#__PURE__*/_react.default.createElement(_elements.Snippet, {
    maxLines: snippetMaxLines,
    content: text
  }));
};
var _default = exports.default = SnippetBlock;