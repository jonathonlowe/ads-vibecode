"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactLoadable = _interopRequireDefault(require("react-loadable"));
var _ = _interopRequireDefault(require("@atlaskit/icon-file-type/glyph/document/16"));
var _2 = _interopRequireDefault(require("@atlaskit/icon-object/glyph/blog/16"));
var _logo = require("@atlaskit/logo");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
var _blogIcon = _interopRequireDefault(require("../../../../../common/ui/icons/blog-icon"));
var _liveDocumentIcon = _interopRequireDefault(require("../../../../../common/ui/icons/live-document-icon"));
var _pageIcon = _interopRequireDefault(require("../../../../../common/ui/icons/page-icon"));
var _constants = require("../../../../../constants");
var _utils = require("../../../../../utils");
var _importIconMapperOld;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != (0, _typeof2.default)(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// prettier-ignore
var importIconMapperOld = (_importIconMapperOld = {}, (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.Archive, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphArchive" */'@atlaskit/icon-file-type/glyph/archive/16'));
  });
}), _constants.IconType.Audio, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphAudio" */'@atlaskit/icon-file-type/glyph/audio/16'));
  });
}), _constants.IconType.Code, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphCode" */'@atlaskit/icon-file-type/glyph/source-code/16'));
  });
}), _constants.IconType.Executable, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphExecutable" */'@atlaskit/icon-file-type/glyph/executable/16'));
  });
}), _constants.IconType.File, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphFile" */'@atlaskit/icon-file-type/glyph/generic/16'));
  });
}), _constants.IconType.Folder, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphFolder" */'@atlaskit/icon-file-type/glyph/folder/16'));
  });
}), _constants.IconType.Generic, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGeneric" */'@atlaskit/icon-file-type/glyph/generic/16'));
  });
}), _constants.IconType.GIF, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGIF" */'@atlaskit/icon-file-type/glyph/gif/16'));
  });
}), _constants.IconType.GoogleDocs, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGoogleDocs" */'@atlaskit/icon-file-type/glyph/google-doc/16'));
  });
}), _constants.IconType.GoogleForms, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGoogleForms" */'@atlaskit/icon-file-type/glyph/google-form/16'));
  });
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.GoogleSheets, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGoogleSheets" */'@atlaskit/icon-file-type/glyph/google-sheet/16'));
  });
}), _constants.IconType.GoogleSlides, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphGoogleSlides" */'@atlaskit/icon-file-type/glyph/google-slide/16'));
  });
}), _constants.IconType.Image, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphImage" */'@atlaskit/icon-file-type/glyph/image/16'));
  });
}), _constants.IconType.MSExcel, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMSExcel" */'@atlaskit/icon-file-type/glyph/excel-spreadsheet/16'));
  });
}), _constants.IconType.MSPowerpoint, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMSPowerpoint" */'@atlaskit/icon-file-type/glyph/powerpoint-presentation/16'));
  });
}), _constants.IconType.MSWord, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMSWord" */'@atlaskit/icon-file-type/glyph/word-document/16'));
  });
}), _constants.IconType.PDF, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphPDF" */'@atlaskit/icon-file-type/glyph/pdf-document/16'));
  });
}), _constants.IconType.Presentation, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphPresentation" */'@atlaskit/icon-file-type/glyph/presentation/16'));
  });
}), _constants.IconType.Sketch, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphSketch" */'@atlaskit/icon-file-type/glyph/sketch/16'));
  });
}), _constants.IconType.Spreadsheet, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphSpreadsheet" */'@atlaskit/icon-file-type/glyph/spreadsheet/16'));
  });
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.Template, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphTemplate" */'@atlaskit/icon/glyph/document-filled'));
  });
}), _constants.IconType.Video, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphVideo" */'@atlaskit/icon-file-type/glyph/video/16'));
  });
}), _constants.IconType.Branch, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphBranch" */'@atlaskit/icon-object/glyph/branch/16'));
  });
}), _constants.IconType.Commit, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphCommit" */'@atlaskit/icon-object/glyph/commit/16'));
  });
}), _constants.IconType.Project, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphProject" */'@atlaskit/icon/glyph/people-group'));
  });
}), _constants.IconType.PullRequest, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphPullRequest" */'@atlaskit/icon-object/glyph/pull-request/16'));
  });
}), _constants.IconType.Repo, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphRepo" */'@atlaskit/icon-object/glyph/code/16'));
  });
}), _constants.IconType.Bug, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphBug" */'@atlaskit/icon-object/glyph/bug/16'));
  });
}), _constants.IconType.Change, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphChange" */'@atlaskit/icon-object/glyph/changes/16'));
  });
}), _constants.IconType.Epic, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphEpic" */'@atlaskit/icon-object/glyph/epic/16'));
  });
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.Incident, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphIncident" */'@atlaskit/icon-object/glyph/incident/16'));
  });
}), _constants.IconType.Problem, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphProblem" */'@atlaskit/icon-object/glyph/problem/16'));
  });
}), _constants.IconType.ServiceRequest, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphServiceRequest" */'@atlaskit/icon-object/glyph/issue/16'));
  });
}), _constants.IconType.Story, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphStory" */'@atlaskit/icon-object/glyph/story/16'));
  });
}), _constants.IconType.SubTask, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphSubTask" */'@atlaskit/icon-object/glyph/subtask/16'));
  });
}), _constants.IconType.Task, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphTask" */'@atlaskit/icon-object/glyph/task/16'));
  });
}), _constants.IconType.Confluence, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphConfluence" */'@atlaskit/logo/confluence-icon'));
  }).then(function (_ref) {
    var ConfluenceIcon = _ref.ConfluenceIcon;
    return {
      default: ConfluenceIcon
    };
  });
}), _constants.IconType.Jira, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphJira" */'@atlaskit/logo/jira-icon'));
  }).then(function (_ref2) {
    var JiraIcon = _ref2.JiraIcon;
    return {
      default: JiraIcon
    };
  });
}), _constants.IconType.Default, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphDefault" */'@atlaskit/icon/glyph/link'));
  });
}), _constants.IconType.Error, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphError" */'@atlaskit/icon/glyph/error'));
  });
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.Forbidden, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphForbidden" */'@atlaskit/icon/glyph/lock-filled'));
  });
}), _constants.IconType.Attachment, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphAttachment" */'@atlaskit/icon/glyph/attachment'));
  });
}), _constants.IconType.CheckItem, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphAttachment" */'@atlaskit/icon/glyph/task'));
  });
}), _constants.IconType.Comment, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphComment" */'@atlaskit/icon/glyph/comment'));
  });
}), _constants.IconType.View, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphComment" */'@atlaskit/icon/glyph/watch'));
  });
}), _constants.IconType.React, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphComment" */'@atlaskit/icon/glyph/like'));
  });
}), _constants.IconType.Vote, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphComment" */'@atlaskit/icon/glyph/arrow-up'));
  });
}), _constants.IconType.PriorityBlocker, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphBlocker" */'@atlaskit/icon-priority/glyph/priority-blocker'));
  });
}), _constants.IconType.PriorityCritical, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphCritical" */'@atlaskit/icon-priority/glyph/priority-critical'));
  });
}), _constants.IconType.PriorityHigh, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphHigh" */'@atlaskit/icon-priority/glyph/priority-high'));
  });
}), (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.PriorityHighest, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphHighest" */'@atlaskit/icon-priority/glyph/priority-highest'));
  });
}), _constants.IconType.PriorityLow, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphLow" */'@atlaskit/icon-priority/glyph/priority-low'));
  });
}), _constants.IconType.PriorityLowest, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphLowest" */'@atlaskit/icon-priority/glyph/priority-lowest'));
  });
}), _constants.IconType.PriorityMajor, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMajor" */'@atlaskit/icon-priority/glyph/priority-major'));
  });
}), _constants.IconType.PriorityMedium, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMedium" */'@atlaskit/icon-priority/glyph/priority-medium'));
  });
}), _constants.IconType.PriorityMinor, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphMinor" */'@atlaskit/icon-priority/glyph/priority-minor'));
  });
}), _constants.IconType.PriorityTrivial, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphTrivial" */'@atlaskit/icon-priority/glyph/priority-trivial'));
  });
}), _constants.IconType.PriorityUndefined, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphUndefined" */'@atlaskit/icon/glyph/question'));
  });
}), _constants.IconType.ProgrammingLanguage, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphProgrammingLanguage" */'@atlaskit/icon/glyph/code'));
  });
}), _constants.IconType.Subscriber, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphSubscriber" */'@atlaskit/icon/glyph/people'));
  });
}), (0, _defineProperty2.default)(_importIconMapperOld, _constants.IconType.SubTasksProgress, function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(require( /* webpackChunkName: "glyphSubtaskProgress" */'@atlaskit/icon/glyph/subtask'));
  });
}));
var getIconImportFn = function getIconImportFn(icon, size) {
  if ((0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration')) {
    var item = (0, _utils.getLazyIcons)()[icon];
    if ((0, _utils.isIconSizeLarge)(size) && item !== null && item !== void 0 && item.large) {
      return item.large;
    }
    return item === null || item === void 0 ? void 0 : item.default;
  }
  return importIconMapperOld[icon];
};
var importIcon = function importIcon(importFn) {
  return (0, _reactLoadable.default)({
    loader: function loader() {
      return importFn().then(function (module) {
        return module.default;
      });
    },
    loading: function loading() {
      return null;
    }
  }); // Because we're using dynamic loading here, TS will not be able to infer the type.
};
var AtlaskitIcon = function AtlaskitIcon(_ref3) {
  var icon = _ref3.icon,
    label = _ref3.label,
    testId = _ref3.testId,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? _constants.SmartLinkSize.Medium : _ref3$size;
  var DocumentIcon = (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? _pageIcon.default : _.default;
  var BlogIcon = (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? _blogIcon.default : _2.default;

  // Check for synchonously loaded icons first for SSR purposes
  switch (icon) {
    case _constants.IconType.Document:
      return /*#__PURE__*/_react.default.createElement(DocumentIcon, (0, _extends2.default)({
        label: label !== null && label !== void 0 ? label : 'document',
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size
      }));
    case _constants.IconType.Blog:
      return /*#__PURE__*/_react.default.createElement(BlogIcon, (0, _extends2.default)({
        label: label !== null && label !== void 0 ? label : 'blog',
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size
      }));
    case _constants.IconType.LiveDocument:
      return /*#__PURE__*/_react.default.createElement(_liveDocumentIcon.default, (0, _extends2.default)({
        label: label !== null && label !== void 0 ? label : 'live-doc',
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size
      }));
  }
  var importFn = getIconImportFn(icon, size);
  if (!importFn) {
    return null;
  }
  var ImportedIcon = importIcon(importFn);
  switch (icon) {
    case _constants.IconType.Confluence:
      return /*#__PURE__*/_react.default.createElement(_logo.ConfluenceIcon, (0, _extends2.default)({
        appearance: "brand",
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size === _constants.SmartLinkSize.Large ? 'small' : 'xsmall'
      }));
    case _constants.IconType.Jira:
      return /*#__PURE__*/_react.default.createElement(_logo.JiraIcon, (0, _extends2.default)({
        appearance: "brand",
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size === _constants.SmartLinkSize.Large ? 'small' : 'xsmall'
      }));
    case _constants.IconType.Error:
    case _constants.IconType.Forbidden:
      return /*#__PURE__*/_react.default.createElement(ImportedIcon, (0, _extends2.default)({
        label: label,
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? {
        size: size,
        color: "var(--ds-icon-danger, #C9372C)"
      } : {
        primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")")
      }));
    default:
      return /*#__PURE__*/_react.default.createElement(ImportedIcon, (0, _extends2.default)({
        label: label,
        testId: testId
      }, (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') && {
        size: size
      }));
  }
};
var _default = exports.default = AtlaskitIcon;