/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./index.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("../../../../../constants");
var _block = _interopRequireDefault(require("../block"));
var _elementGroup = _interopRequireDefault(require("../element-group"));
var _utils = require("../utils");
var _excluded = ["maxLines", "status", "testId", "primary", "secondary"];
/* eslint-disable @atlaskit/design-system/use-tokens-typography */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var DEFAULT_MAX_LINES = 2;
var MAXIMUM_MAX_LINES = 2;
var MINIMUM_MAX_LINES = 1;
var truncateStyles = {
  '1': "_1reo15vq _18m915vq _1e0ccj1k _1bto1l2s _1nmz1hna _1yyjkb7n _sudp1e54",
  '2': "_1reo15vq _18m915vq _1e0ccj1k _1bto1l2s _1nmz1hna _1yyjcs5v _sudp1e54"
};
var sizeStylesOld = {
  xlarge: "_vwz41m1q _102k1k7u",
  large: "_vwz41m1q _102k1k7u",
  medium: "_vwz41k8s _102k1wto",
  small: "_vwz41k8s _102k1wto"
};
var sizeStyles = {
  xlarge: "_102k8vuz",
  large: "_102k8vuz",
  medium: "_102kckbl",
  small: "_102kckbl"
};
var getMaxLines = function getMaxLines(maxLines) {
  if (maxLines > MAXIMUM_MAX_LINES) {
    return DEFAULT_MAX_LINES;
  }
  if (maxLines < MINIMUM_MAX_LINES) {
    return MINIMUM_MAX_LINES;
  }
  return maxLines;
};

/**
 * Represents a MetadataBlock, designed to contain groups of metadata in the form of elements.
 * Accepts an array of elements to be shown either primary (left hand side) or secondary (right hand side).
 * @public
 * @param {MetadataBlockProps} MetadataBlockProps
 * @see Block
 */
var MetadataBlock = function MetadataBlock(_ref) {
  var _ref$maxLines = _ref.maxLines,
    maxLines = _ref$maxLines === void 0 ? DEFAULT_MAX_LINES : _ref$maxLines,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? _constants.SmartLinkStatus.Fallback : _ref$status,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'smart-block-metadata' : _ref$testId,
    _ref$primary = _ref.primary,
    primary = _ref$primary === void 0 ? [] : _ref$primary,
    _ref$secondary = _ref.secondary,
    secondary = _ref$secondary === void 0 ? [] : _ref$secondary,
    blockProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  if (primary.length === 0 && secondary.length === 0 || status !== _constants.SmartLinkStatus.Resolved) {
    return null;
  }
  var primaryElements = (0, _utils.renderElementItems)(primary);
  var secondaryElements = (0, _utils.renderElementItems)(secondary);
  var _blockProps$size = blockProps.size,
    size = _blockProps$size === void 0 ? _constants.SmartLinkSize.Medium : _blockProps$size;
  var maxLinesTotal = getMaxLines(maxLines);
  return /*#__PURE__*/React.createElement(_block.default, (0, _extends2.default)({}, blockProps, {
    testId: "".concat(testId, "-resolved-view")
  }), primaryElements && /*#__PURE__*/React.createElement(_elementGroup.default, {
    align: _constants.SmartLinkAlignment.Left,
    direction: _constants.SmartLinkDirection.Horizontal,
    width: _constants.SmartLinkWidth.Flexible,
    size: size,
    className: (0, _runtime.ax)([truncateStyles[maxLinesTotal], !(0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && sizeStylesOld[size], (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && sizeStyles[size]])
  }, primaryElements), secondaryElements && /*#__PURE__*/React.createElement(_elementGroup.default, {
    align: _constants.SmartLinkAlignment.Right,
    direction: _constants.SmartLinkDirection.Horizontal,
    width: _constants.SmartLinkWidth.Flexible,
    size: size,
    className: (0, _runtime.ax)([truncateStyles[maxLinesTotal], !(0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && sizeStylesOld[size], (0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1') && sizeStyles[size]])
  }, secondaryElements));
};
var _default = exports.default = MetadataBlock;