"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppliedToComponentsCount", {
  enumerable: true,
  get: function get() {
    return _appliedToComponentsCount.default;
  }
});
exports.OwnedByGroup = exports.OwnedBy = exports.ModifiedOn = exports.ModifiedBy = exports.Location = exports.LinkIcon = exports.LatestCommit = exports.DueOn = exports.CreatedOn = exports.CreatedBy = exports.CommentCount = exports.CollaboratorGroup = exports.ChecklistProgress = exports.AuthorGroup = exports.AttachmentCount = exports.AssignedToGroup = exports.AssignedTo = void 0;
Object.defineProperty(exports, "Preview", {
  enumerable: true,
  get: function get() {
    return _preview.default;
  }
});
exports.SentOn = exports.ReadTime = exports.ReactCount = exports.Provider = exports.ProgrammingLanguage = exports.Priority = void 0;
Object.defineProperty(exports, "Snippet", {
  enumerable: true,
  get: function get() {
    return _snippetElement.default;
  }
});
exports.VoteCount = exports.ViewCount = exports.Title = exports.TargetBranch = exports.SubscriberCount = exports.SubTasksProgress = exports.StoryPoints = exports.State = exports.SourceBranch = void 0;
var _constants = require("../../../../constants");
var _utils = require("./utils");
var _preview = _interopRequireDefault(require("./preview"));
var _snippetElement = _interopRequireDefault(require("./snippet-element"));
var _appliedToComponentsCount = _interopRequireDefault(require("./applied-to-components-count"));
// Attention: Keep the export name and element name the same.
// This will help reducing the code for mapping elements inside
// createElement and renderElementItems
/**
 * Creates a AssignedTo text element using the data from AssignedTo in the Flexible UI Context.
 * @see Text
 */
var AssignedTo = exports.AssignedTo = (0, _utils.createElement)(_constants.ElementName.AssignedTo);
/**
 * An AvatarGroup element using the data from AssignedToGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
var AssignedToGroup = exports.AssignedToGroup = (0, _utils.createElement)(_constants.ElementName.AssignedToGroup);
/**
 * Creates a AttachmentCount Badge element using the data from AttachmentCount in the Flexible UI Context.
 * @see Badge
 */
var AttachmentCount = exports.AttachmentCount = (0, _utils.createElement)(_constants.ElementName.AttachmentCount);
/**
 * An AvatarGroup element using the data from AuthorGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
var AuthorGroup = exports.AuthorGroup = (0, _utils.createElement)(_constants.ElementName.AuthorGroup);
/**
 * Creates a Checklist Badge element using the data from ChecklistProgress in the Flexible UI Context.
 * @see Badge
 */
var ChecklistProgress = exports.ChecklistProgress = (0, _utils.createElement)(_constants.ElementName.ChecklistProgress);
/**
 * An AvatarGroup element using the data from CollaboratorGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
var CollaboratorGroup = exports.CollaboratorGroup = (0, _utils.createElement)(_constants.ElementName.CollaboratorGroup);
/**
 * Creates a CommentCount Badge element using the data from CommentCount in the Flexible UI Context.
 * @see Badge
 */
var CommentCount = exports.CommentCount = (0, _utils.createElement)(_constants.ElementName.CommentCount);
/**
 * Creates a CreatedOn DateTime element using the data from CreatedOn in the Flexible UI Context.
 * @see DateTime
 */
var CreatedOn = exports.CreatedOn = (0, _utils.createElement)(_constants.ElementName.CreatedOn);
/**
 * Creates a CreatedBy text element using the data from CreatedBy in the Flexible UI Context.
 * @see Text
 */
var CreatedBy = exports.CreatedBy = (0, _utils.createElement)(_constants.ElementName.CreatedBy);
/**
 * Creates a DueOn Lozenge element using the data from dueOn in the Flexible UI Context.
 * @see Lozenge
 */
var DueOn = exports.DueOn = (0, _utils.createElement)(_constants.ElementName.DueOn);
/**
 * Creates an element that contains Last Commit hash
 */
var LatestCommit = exports.LatestCommit = (0, _utils.createElement)(_constants.ElementName.LatestCommit);
/**
 * Creates a LinkIcon Icon element using the data from LinkIcon in the Flexible UI Context.
 * @see Icon
 */
var LinkIcon = exports.LinkIcon = (0, _utils.createElement)(_constants.ElementName.LinkIcon);
/**
 * Creates a Location Link element.
 * This represents the location or container of the resource.
 * @see Link
 */
var Location = exports.Location = (0, _utils.createElement)(_constants.ElementName.Location);
/**
 * Creates a ModifiedBy Text element using the data from ModifiedBy in the Flexible UI Context.
 * @see Text
 */
var ModifiedBy = exports.ModifiedBy = (0, _utils.createElement)(_constants.ElementName.ModifiedBy);
/**
 * Creates a ModifiedOn DateTime element using the data from ModifiedOn in the Flexible UI Context.
 * @see DateTime
 */
var ModifiedOn = exports.ModifiedOn = (0, _utils.createElement)(_constants.ElementName.ModifiedOn);
/**
 * Creates a OwnedBy text element using the data from OwnedBy in the Flexible UI Context.
 * @see Text
 */
var OwnedBy = exports.OwnedBy = (0, _utils.createElement)(_constants.ElementName.OwnedBy);
/**
 * An AvatarGroup element using the data from OwnedByGroup in the Flexible UI Context.
 * @see AvatarGroup
 */
var OwnedByGroup = exports.OwnedByGroup = (0, _utils.createElement)(_constants.ElementName.OwnedByGroup);
/**
 * Creates a Preview element using the data from Preview in the Flexible UI Context.
 * @see Preview
 */

/**
 * Creates a Priority Badge element using the data from Priority in the Flexible UI Context.
 * @see Badge
 */
var Priority = exports.Priority = (0, _utils.createElement)(_constants.ElementName.Priority);
/**
 * Creates a ProgrammingLanguage Badge element using the data from ProgrammingLanguage in the Flexible UI Context.
 * @see Badge
 */
var ProgrammingLanguage = exports.ProgrammingLanguage = (0, _utils.createElement)(_constants.ElementName.ProgrammingLanguage);
/**
 * Creates a Provider Badge element using the data from Provider in the Flexible UI Context.
 * @see Badge
 */
var Provider = exports.Provider = (0, _utils.createElement)(_constants.ElementName.Provider);
/**
 * Creates a ReactCount Badge element using the data from ReactCount in the Flexible UI Context.
 * @see Badge
 */
var ReactCount = exports.ReactCount = (0, _utils.createElement)(_constants.ElementName.ReactCount);
/**
 * Creates a ReadTime Text element using the data from readTime in the Flexible UI Context
 */
var ReadTime = exports.ReadTime = (0, _utils.createElement)(_constants.ElementName.ReadTime);
/**
 * Creates a SentOn DateTime element using the data from SentOn in the Flexible UI Context.
 * @see DateTime
 */
var SentOn = exports.SentOn = (0, _utils.createElement)(_constants.ElementName.SentOn);
/**
 * Creates a Snippet element using the data from Snippet in the Flexible UI Context.
 * @see Text
 */

/**
 * Creates a SourceBranch Text element using the data from sourceBranch in the Flexible UI Context.
 * @see Text
 */
var SourceBranch = exports.SourceBranch = (0, _utils.createElement)(_constants.ElementName.SourceBranch);
/**
 * Creates a State Lozenge element using the data from State in the Flexible UI Context.
 * @see Lozenge
 */
var State = exports.State = (0, _utils.createElement)(_constants.ElementName.State);
/**
 * Creates a SubscriberCount Badge element using the data from SubscriberCount in the Flexible UI Context.
 * @see Badge
 */
var SubscriberCount = exports.SubscriberCount = (0, _utils.createElement)(_constants.ElementName.SubscriberCount);
/**
 * Create a SubTasks Badge element using the data from subTasks in the Flexible UI Context.
 * @see Badge
 */
var SubTasksProgress = exports.SubTasksProgress = (0, _utils.createElement)(_constants.ElementName.SubTasksProgress);
/**
 * Create a StoryPoints Badge element using the data from storyPoints in the Flexible UI Context.
 * @see AtlaskitBadge
 */
var StoryPoints = exports.StoryPoints = (0, _utils.createElement)(_constants.ElementName.StoryPoints);
/**
 * Creates a TargetBranch Text element using the data from targetBranch in the Flexible UI Context.
 * @see Text
 */
var TargetBranch = exports.TargetBranch = (0, _utils.createElement)(_constants.ElementName.TargetBranch);
/**
 * Creates a Title Link element using the data from Title in the Flexible UI Context.
 * This represents the main link text within the Smart Link.
 * @see Link
 */
var Title = exports.Title = (0, _utils.createElement)(_constants.ElementName.Title);
/**
 * Creates a ViewCount Badge element using the data from ViewCount in the Flexible UI Context.
 * @see Badge
 */
var ViewCount = exports.ViewCount = (0, _utils.createElement)(_constants.ElementName.ViewCount);
/**
 * Creates a VoteCount Badge element using the data from VoteCount in the Flexible UI Context.
 * @see Badge
 */
var VoteCount = exports.VoteCount = (0, _utils.createElement)(_constants.ElementName.VoteCount);