/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./index.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _storageClient = require("@atlaskit/frontend-utilities/storage-client");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var LOCAL_STORAGE_CLIENT_KEY = '@atlaskit/smart-card';
var LOCAL_STORAGE_DISCOVERY_KEY = 'action-discovery-ai-summarise';
var LOCAL_STORAGE_DISCOVERY_VALUE = 'discovered';
var LOCAL_STORAGE_DISCOVERY_EXPIRY_IN_MS = 15552000000; // 180 days
var LOCAL_STORAGE_DISCOVERY_REQUIRED_TIME = 2000;
var pulseKeyframes = null;
var pulseStyles = null;

/**
 * This is a hacky solution to help with the feature discovery.
 * This implementation must be removed once the experiment is completed.
 * Cleanup on https://product-fabric.atlassian.net/browse/EDM-9649
 */
var FeatureDiscovery = function FeatureDiscovery(_ref) {
  var children = _ref.children,
    testId = _ref.testId;
  var renderedTime = (0, _react.useRef)();
  var storageClient = (0, _react.useMemo)(function () {
    return new _storageClient.StorageClient(LOCAL_STORAGE_CLIENT_KEY);
  }, []);
  var discovered = (0, _react.useMemo)(function () {
    try {
      return storageClient.getItem(LOCAL_STORAGE_DISCOVERY_KEY) === LOCAL_STORAGE_DISCOVERY_VALUE;
    } catch (_unused) {
      // If localStorage is not available, don't show feature discovery component. Treat it as 'discovered'.
      return true;
    }
  }, [storageClient]);
  (0, _react.useEffect)(function () {
    renderedTime.current = Date.now();
    return function () {
      if (!discovered && renderedTime.current) {
        var duration = Date.now() - renderedTime.current;
        if (duration > LOCAL_STORAGE_DISCOVERY_REQUIRED_TIME) {
          try {
            storageClient.setItemWithExpiry(LOCAL_STORAGE_DISCOVERY_KEY, LOCAL_STORAGE_DISCOVERY_VALUE, LOCAL_STORAGE_DISCOVERY_EXPIRY_IN_MS);
          } catch (_unused2) {
            // silent error
          }
        }
      }
    };
  }, [storageClient, discovered]);
  var component = (0, _react.useMemo)(function () {
    if (!discovered) {
      return /*#__PURE__*/React.createElement("span", {
        "data-testid": "".concat(testId, "-discovery"),
        className: (0, _runtime.ax)(["_2rko1l7b _y44v1kew _1e0c116y _16qs10kv"]),
        style: {
          "--_zsb6fb": (0, _runtime.ix)("0 0 0 0 ".concat("var(--ds-border-discovery, #8270DB)")),
          "--_d0o24t": (0, _runtime.ix)("".concat(pulseKeyframes, " 2s cubic-bezier(0.5, 0, 0, 1) 0.25s both 2"))
        }
      }, children);
    }
  }, [children, discovered, testId]);
  return component !== null && component !== void 0 ? component : children;
};
var _default = exports.default = FeatureDiscovery;