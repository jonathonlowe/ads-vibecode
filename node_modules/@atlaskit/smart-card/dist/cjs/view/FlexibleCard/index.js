"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _useAnalyticsEvents2 = require("../../common/analytics/generated/use-analytics-events");
var _constants = require("../../constants");
var _flexibleUiContext = require("../../state/flexible-ui-context");
var _useAiSummaryConfig = require("../../state/hooks/use-ai-summary-config");
var _useResolve = _interopRequireDefault(require("../../state/hooks/use-resolve"));
var _container = _interopRequireDefault(require("./components/container"));
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * This represents a Flexible Card: a link represented by a card with metadata.
 * This is the container in which all Flexible UI Blocks and Elements exist.
 * Note: TitleBlock is mandatory for a Flexible Card to render.
 * @see Container
 */
var FlexibleCard = function FlexibleCard(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'flexible' : _ref$appearance,
    cardState = _ref.cardState,
    children = _ref.children,
    id = _ref.id,
    onAuthorize = _ref.onAuthorize,
    onClick = _ref.onClick,
    onError = _ref.onError,
    onResolve = _ref.onResolve,
    origin = _ref.origin,
    renderers = _ref.renderers,
    showHoverPreview = _ref.showHoverPreview,
    hoverPreviewOptions = _ref.hoverPreviewOptions,
    actionOptions = _ref.actionOptions,
    testId = _ref.testId,
    ui = _ref.ui,
    url = _ref.url;
  var aiSummaryConfig = (0, _useAiSummaryConfig.useAISummaryConfig)();
  var resolve = (0, _useResolve.default)();
  var _useAnalyticsEvents = (0, _useAnalyticsEvents2.useAnalyticsEvents)(),
    fireEvent = _useAnalyticsEvents.fireEvent;
  var cardType = cardState.status,
    details = cardState.details;
  var status = cardType;
  var context = (0, _react.useMemo)(function () {
    return (0, _utils.getContextByStatus)({
      aiSummaryConfig: aiSummaryConfig,
      appearance: appearance,
      fireEvent: fireEvent,
      response: details,
      id: id,
      origin: origin,
      renderers: renderers,
      resolve: resolve,
      actionOptions: actionOptions,
      status: status,
      url: url
    });
  }, [aiSummaryConfig, appearance, details, fireEvent, id, origin, renderers, actionOptions, resolve, status, url]);
  var retry = (0, _utils.getRetryOptions)(url, status, details, onAuthorize);
  var _ref2 = context || {},
    title = _ref2.title;
  (0, _react.useEffect)(function () {
    switch (status) {
      case _constants.SmartLinkStatus.Resolved:
        if (onResolve) {
          onResolve({
            title: title,
            url: url
          });
        }
        break;
      case _constants.SmartLinkStatus.Errored:
      case _constants.SmartLinkStatus.Fallback:
      case _constants.SmartLinkStatus.Forbidden:
      case _constants.SmartLinkStatus.NotFound:
      case _constants.SmartLinkStatus.Unauthorized:
        if (onError) {
          onError({
            status: status,
            url: url
          });
        }
        break;
    }
  }, [onError, onResolve, status, title, url]);
  return /*#__PURE__*/_react.default.createElement(_flexibleUiContext.FlexibleUiOptionContext.Provider, {
    value: ui
  }, /*#__PURE__*/_react.default.createElement(_flexibleUiContext.FlexibleUiContext.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_container.default, (0, _extends2.default)({
    testId: testId
  }, ui, {
    onClick: onClick,
    retry: retry,
    showHoverPreview: showHoverPreview,
    hoverPreviewOptions: hoverPreviewOptions,
    actionOptions: actionOptions,
    status: status
  }), children)));
};
var _default = exports.default = FlexibleCard;