"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Frame = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useLinkClicked = require("../../../state/analytics/useLinkClicked");
var _styled = require("./styled");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Frame = exports.Frame = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var isSelected = props.isSelected,
    children = props.children,
    onClick = props.onClick,
    link = props.link,
    withoutBackground = props.withoutBackground,
    testId = props.testId,
    className = props.className,
    isHovered = props.isHovered,
    truncateInline = props.truncateInline;
  var handleClick = (0, _react.useCallback)(function (event) {
    if (onClick) {
      event.preventDefault();
      event.stopPropagation();
      onClick(event);
    }
  }, [onClick]);
  var handleKeyPress = (0, _react.useCallback)(function (event) {
    if (event.key !== ' ' && event.key !== 'Enter') {
      return;
    }
    if (onClick) {
      event.preventDefault();
      event.stopPropagation();
      onClick(event);
    }
  }, [onClick]);
  var handleMouseDown = (0, _useLinkClicked.useMouseDownEvent)();
  var isInteractive = Boolean(onClick);
  var isAnchor = Boolean(link || onClick);

  // Depending on whenever Frame was given onClick or link itself we display span or anchor elements
  var Wrapper = isAnchor ? _styled.WrapperAnchor : _styled.WrapperSpan;
  return /*#__PURE__*/_react.default.createElement(Wrapper, {
    href: link,
    withoutBackground: withoutBackground,
    isSelected: isSelected,
    isInteractive: isInteractive,
    tabIndex: isInteractive ? 0 : undefined,
    role: isInteractive ? 'button' : undefined,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onKeyPress: handleKeyPress,
    "data-testid": testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className,
    ref: ref,
    isHovered: isHovered,
    truncateInline: truncateInline
  }, children);
});