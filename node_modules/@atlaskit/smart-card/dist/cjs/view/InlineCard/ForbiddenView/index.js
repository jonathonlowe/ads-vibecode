/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineCardForbiddenView = void 0;
require("./index.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactIntlNext = require("react-intl-next");
var _button = _interopRequireDefault(require("@atlaskit/button"));
var _lockLocked = _interopRequireDefault(require("@atlaskit/icon/core/lock-locked"));
var _lockFilled = _interopRequireDefault(require("@atlaskit/icon/glyph/lock-filled"));
var _lozenge = _interopRequireDefault(require("@atlaskit/lozenge"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _compiled = require("@atlaskit/primitives/compiled");
var _colors = require("@atlaskit/theme/colors");
var _messages = require("../../../messages");
var _HoverCard = require("../../HoverCard");
var _actionButton = require("../common/action-button");
var _Frame = require("../Frame");
var _Icon = require("../Icon");
var _IconAndTitleLayout = require("../IconAndTitleLayout");
var _styled = require("../styled");
var _withFrameStyleControl = _interopRequireDefault(require("../utils/withFrameStyleControl"));
var styles = {
  iconWrapper: "_2hwx1i6y _1e0cbu77",
  actionButtonLozengeStyle: "_2rkogqwt _bfhksm61 _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t"
};
var fallbackForbiddenIcon = function fallbackForbiddenIcon() {
  if ((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/_react.default.createElement(_lockLocked.default, {
      label: "error",
      color: "var(--ds-icon-danger, #C9372C)",
      LEGACY_fallbackIcon: _lockFilled.default,
      LEGACY_size: "small",
      testId: "forbidden-view-fallback-icon"
    });
  }
  return (0, _platformFeatureFlags.fg)('platform-smart-card-icon-migration') ? /*#__PURE__*/_react.default.createElement(_compiled.Box, {
    as: "span",
    xcss: styles.iconWrapper
  }, /*#__PURE__*/_react.default.createElement(_lockLocked.default, {
    label: "error",
    color: "var(--ds-icon-danger, #C9372C)",
    LEGACY_fallbackIcon: _lockFilled.default,
    LEGACY_size: "small",
    testId: "forbidden-view-fallback-icon"
  })) : /*#__PURE__*/_react.default.createElement(_Icon.AKIconWrapper, null, /*#__PURE__*/_react.default.createElement(_lockFilled.default, {
    label: "error",
    size: "small",
    primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")"),
    testId: "forbidden-view-fallback-icon"
  }));
};
var InlineCardForbiddenView = exports.InlineCardForbiddenView = function InlineCardForbiddenView(_ref) {
  var url = _ref.url,
    icon = _ref.icon,
    onClick = _ref.onClick,
    isSelected = _ref.isSelected,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'inline-card-forbidden-view' : _ref$testId,
    truncateInline = _ref.truncateInline,
    requestAccessContext = _ref.requestAccessContext,
    onAuthorise = _ref.onAuthorise,
    context = _ref.context,
    showHoverPreview = _ref.showHoverPreview;
  var frameRef = _react.default.useRef(null);
  var _React$useState = _react.default.useState(!!(requestAccessContext !== null && requestAccessContext !== void 0 && requestAccessContext.callToActionMessageKey)),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
    hasRequestAccessContextMessage = _React$useState2[0];
  var handleRetry = _react.default.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (onAuthorise) {
      onAuthorise();
    } else {
      var _requestAccessContext;
      requestAccessContext === null || requestAccessContext === void 0 || (_requestAccessContext = requestAccessContext.action) === null || _requestAccessContext === void 0 || _requestAccessContext.promise();
    }
  }, [onAuthorise, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.action]);
  var renderForbiddenAccessMessage = _react.default.useCallback(function () {
    if (requestAccessContext !== null && requestAccessContext !== void 0 && requestAccessContext.callToActionMessageKey) {
      var callToActionMessageKey = requestAccessContext.callToActionMessageKey;
      return /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, (0, _extends2.default)({}, _messages.messages[callToActionMessageKey], {
        values: {
          product: context
        }
      }));
    }
    return /*#__PURE__*/_react.default.createElement(_reactIntlNext.FormattedMessage, _messages.messages.invalid_permissions, function (formattedMessage) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, formattedMessage);
    });
  }, [context, requestAccessContext]);
  var renderActionButton = _react.default.useCallback(function () {
    var Button = (0, _withFrameStyleControl.default)(_button.default, frameRef);
    var accessType = requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.accessType;
    if (hasRequestAccessContextMessage) {
      if ((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1')) {
        var isDisabled = accessType === 'PENDING_REQUEST_EXISTS';
        return /*#__PURE__*/_react.default.createElement(_actionButton.ActionButton, {
          isDisabled: isDisabled,
          onClick: handleRetry,
          testId: "button-connect-other-account"
        }, renderForbiddenAccessMessage());
      }
      return /*#__PURE__*/_react.default.createElement(Button, {
        spacing: "none",
        onClick: handleRetry,
        component: _styled.IconStyledButtonOldVisualRefresh,
        testId: "button-connect-other-account",
        role: "button",
        isDisabled: accessType === 'PENDING_REQUEST_EXISTS'
      }, renderForbiddenAccessMessage());
    }
    if (onAuthorise) {
      if ((0, _platformFeatureFlags.fg)('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/_react.default.createElement(_IconAndTitleLayout.LozengeWrapper, null, /*#__PURE__*/_react.default.createElement(_compiled.Pressable, {
          xcss: styles.actionButtonLozengeStyle,
          onClick: handleRetry,
          testId: "button-connect-other-account"
        }, /*#__PURE__*/_react.default.createElement(_lozenge.default, (0, _extends2.default)({
          appearance: "moved"
        }, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? {
          isBold: true
        } : undefined), renderForbiddenAccessMessage())));
      }
      return /*#__PURE__*/_react.default.createElement(Button, {
        spacing: "none",
        onClick: handleRetry,
        appearance: "subtle-link",
        testId: "button-connect-other-account",
        role: "button"
      }, /*#__PURE__*/_react.default.createElement(_IconAndTitleLayout.LozengeWrapper, null, /*#__PURE__*/_react.default.createElement(_lozenge.default, (0, _extends2.default)({
        appearance: 'moved'
      }, (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') ? {
        isBold: true
      } : undefined), renderForbiddenAccessMessage())));
    }
    return null;
  }, [handleRetry, hasRequestAccessContextMessage, onAuthorise, renderForbiddenAccessMessage, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.accessType]);
  var content = /*#__PURE__*/_react.default.createElement(_Frame.Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/_react.default.createElement(_IconAndTitleLayout.IconAndTitleLayout, {
    icon: icon ? icon : fallbackForbiddenIcon(),
    link: url,
    title: url,
    onClick: onClick,
    titleColor: "var(--ds-text-subtle, ".concat(_colors.N500, ")")
  }), renderActionButton());
  if (showHoverPreview) {
    return /*#__PURE__*/_react.default.createElement(_HoverCard.HoverCard, {
      url: url
    }, content);
  }
  return content;
};