"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineCard = void 0;
Object.defineProperty(exports, "InlineCardErroredView", {
  enumerable: true,
  get: function get() {
    return _ErroredView.InlineCardErroredView;
  }
});
Object.defineProperty(exports, "InlineCardForbiddenView", {
  enumerable: true,
  get: function get() {
    return _ForbiddenView.InlineCardForbiddenView;
  }
});
Object.defineProperty(exports, "InlineCardResolvedView", {
  enumerable: true,
  get: function get() {
    return _ResolvedView.InlineCardResolvedView;
  }
});
Object.defineProperty(exports, "InlineCardResolvingView", {
  enumerable: true,
  get: function get() {
    return _ResolvingView.InlineCardResolvingView;
  }
});
Object.defineProperty(exports, "InlineCardUnauthorizedView", {
  enumerable: true,
  get: function get() {
    return _UnauthorisedView.InlineCardUnauthorizedView;
  }
});
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _linkExtractors = require("@atlaskit/link-extractors");
var _linkProvider = require("@atlaskit/link-provider");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("../../constants");
var _extractAccessContext = require("../../extractors/common/context/extractAccessContext");
var _inline = require("../../extractors/inline");
var _helpers = require("../../state/helpers");
var _jsonld = require("../../utils/jsonld");
var _LinkView = require("../LinkView");
var _ErroredView = require("./ErroredView");
var _ForbiddenView = require("./ForbiddenView");
var _ResolvedView = require("./ResolvedView");
var _ResolvingView = require("./ResolvingView");
var _UnauthorisedView = require("./UnauthorisedView");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var InlineCard = exports.InlineCard = function InlineCard(_ref) {
  var _details$meta, _providerForbidden$te;
  var id = _ref.id,
    url = _ref.url,
    cardState = _ref.cardState,
    handleAuthorize = _ref.handleAuthorize,
    handleFrameClick = _ref.handleFrameClick,
    isSelected = _ref.isSelected,
    isHovered = _ref.isHovered,
    renderers = _ref.renderers,
    onResolve = _ref.onResolve,
    onError = _ref.onError,
    testId = _ref.testId,
    inlinePreloaderStyle = _ref.inlinePreloaderStyle,
    showHoverPreview = _ref.showHoverPreview,
    hoverPreviewOptions = _ref.hoverPreviewOptions,
    actionOptions = _ref.actionOptions,
    removeTextHighlightingFromTitle = _ref.removeTextHighlightingFromTitle,
    resolvingPlaceholder = _ref.resolvingPlaceholder,
    truncateInline = _ref.truncateInline;
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var status = cardState.status,
    details = cardState.details;
  var cardDetails = details && details.data || (0, _jsonld.getEmptyJsonLd)();
  var extensionKey = (0, _helpers.getExtensionKey)(details);
  var testIdWithStatus = testId ? "".concat(testId, "-").concat(status, "-view") : undefined;
  var showHoverPreviewFlag = (0, _linkProvider.useFeatureFlag)('showHoverPreview');
  if (showHoverPreview === undefined && showHoverPreviewFlag !== undefined) {
    showHoverPreview = Boolean(showHoverPreviewFlag);
  }
  var resolvedProps = status === _constants.SmartLinkStatus.Resolved ? (0, _inline.extractInlineProps)(details, renderers, removeTextHighlightingFromTitle, false) : {};
  (0, _react.useEffect)(function () {
    switch (status) {
      case _constants.SmartLinkStatus.Resolved:
        onResolve === null || onResolve === void 0 || onResolve({
          url: url,
          title: resolvedProps.title
        });
        break;
      case _constants.SmartLinkStatus.Errored:
      case _constants.SmartLinkStatus.Fallback:
      case _constants.SmartLinkStatus.Forbidden:
      case _constants.SmartLinkStatus.NotFound:
      case _constants.SmartLinkStatus.Unauthorized:
        if (onError) {
          onError({
            status: status,
            url: url
          });
        }
        break;
    }
  }, [onError, onResolve, status, url, resolvedProps.title]);
  switch (status) {
    case 'pending':
    case 'resolving':
      return /*#__PURE__*/_react.default.createElement(_ResolvingView.InlineCardResolvingView, {
        url: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        testId: testIdWithStatus,
        inlinePreloaderStyle: inlinePreloaderStyle,
        resolvingPlaceholder: resolvingPlaceholder,
        truncateInline: truncateInline
      });
    case 'resolved':
      return /*#__PURE__*/_react.default.createElement(_ResolvedView.InlineCardResolvedView, (0, _extends2.default)({}, resolvedProps, {
        id: id,
        showHoverPreview: showHoverPreview,
        hoverPreviewOptions: hoverPreviewOptions,
        actionOptions: actionOptions,
        link: url,
        isSelected: isSelected,
        isHovered: isHovered,
        onClick: handleFrameClick,
        testId: testIdWithStatus,
        truncateInline: truncateInline
      }));
    case 'unauthorized':
      var provider = (0, _platformFeatureFlags.fg)('smart_links_noun_support') ? (0, _linkExtractors.extractSmartLinkProvider)(details) : (0, _linkExtractors.extractProvider)(cardDetails);
      return /*#__PURE__*/_react.default.createElement(_UnauthorisedView.InlineCardUnauthorizedView, {
        icon: provider && provider.icon,
        context: provider && provider.text,
        url: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        onAuthorise: handleAuthorize,
        testId: testIdWithStatus,
        showHoverPreview: showHoverPreview,
        id: id,
        extensionKey: extensionKey,
        truncateInline: truncateInline
      });
    case 'forbidden':
      var providerForbidden = (0, _platformFeatureFlags.fg)('smart_links_noun_support') ? (0, _linkExtractors.extractSmartLinkProvider)(details) : (0, _linkExtractors.extractProvider)(cardDetails);
      var cardMetadata = (_details$meta = details === null || details === void 0 ? void 0 : details.meta) !== null && _details$meta !== void 0 ? _details$meta : (0, _jsonld.getForbiddenJsonLd)().meta;
      var requestAccessContext = (0, _extractAccessContext.extractRequestAccessContextImproved)({
        jsonLd: cardMetadata,
        url: url,
        product: (_providerForbidden$te = providerForbidden === null || providerForbidden === void 0 ? void 0 : providerForbidden.text) !== null && _providerForbidden$te !== void 0 ? _providerForbidden$te : '',
        createAnalyticsEvent: createAnalyticsEvent
      });
      return /*#__PURE__*/_react.default.createElement(_ForbiddenView.InlineCardForbiddenView, {
        url: url,
        icon: providerForbidden && providerForbidden.icon,
        context: providerForbidden === null || providerForbidden === void 0 ? void 0 : providerForbidden.text,
        isSelected: isSelected,
        onClick: handleFrameClick,
        onAuthorise: handleAuthorize,
        testId: testIdWithStatus,
        requestAccessContext: requestAccessContext,
        showHoverPreview: showHoverPreview,
        truncateInline: truncateInline
      });
    case 'not_found':
      var providerNotFound = (0, _platformFeatureFlags.fg)('smart_links_noun_support') ? (0, _linkExtractors.extractSmartLinkProvider)(details) : (0, _linkExtractors.extractProvider)(cardDetails);
      return /*#__PURE__*/_react.default.createElement(_ErroredView.InlineCardErroredView, {
        url: url,
        icon: providerNotFound && providerNotFound.icon,
        isSelected: isSelected,
        message: "Can't find link",
        onClick: handleFrameClick,
        testId: testIdWithStatus || 'inline-card-not-found-view',
        showHoverPreview: showHoverPreview,
        truncateInline: truncateInline
      });
    case 'fallback':
    case 'errored':
    default:
      return /*#__PURE__*/_react.default.createElement(_LinkView.CardLinkView, {
        link: url,
        isSelected: isSelected,
        onClick: handleFrameClick,
        testId: testIdWithStatus || 'inline-card-errored-view',
        truncateInline: truncateInline
      });
  }
};