import { type ReactElement } from 'react';
import { type RenderOptions, type RenderResult } from '@testing-library/react';
import type { Ari, Environment, InvocationResponse, InvocationResult, UserInputs } from './types';
/**
 * Creates a stubbed invocation API call for triggering rules. Will return
 * the supplied invocation result for all objects the rule was called
 * for.
 */
export declare const createStubInvokeManuallyTriggeredRule: (stubbedInvocationResultForAllObjects: InvocationResult, responseDelay?: number) => (_env: Environment | null, _site: Ari, _ruleId: number, objects: string[], _inputs?: UserInputs) => Promise<InvocationResponse>;
/**
 * Render into a container which is appended to `document.body`.
 *
 * Includes `IntlProvider` wrapper
 *
 * @param node The React element to render
 * @param dependencies List of React Magnetic DI dependencies to inject
 * @param options React Testing Library options
 */
export declare const renderWithDi: (node: ReactElement, dependencies?: any[], options?: RenderOptions & {
    target?: any;
}) => RenderResult;
export declare const createGenericComponent: <T extends unknown = any>(displayName: string, renderChildren?: boolean, childrenParams?: unknown) => T;
