/// <reference types="react" />
import { type FrameStyle } from '../types';
export interface ExpandedFrameProps {
    isPlaceholder?: boolean;
    href?: string;
    icon?: React.ReactNode;
    text?: React.ReactNode;
    minWidth?: number;
    maxWidth?: number;
    children?: React.ReactNode;
    /** A flag that determines whether the card is selected in edit mode. */
    isSelected?: boolean;
    /** A prop that determines the style of a frame: whether to show it, hide it or only show it when a user hovers over embed */
    frameStyle?: FrameStyle;
    /** The optional click handler */
    onClick?: (evt: React.MouseEvent) => void;
    /** For testing purposes only */
    testId?: string;
    /** If dimensions of the card are to be inherited from the parent */
    inheritDimensions?: boolean;
    /**
     * To enable scrolling in use cases where the content will not have it's own scrollbar.
     *
     * Requires `setOverflow` to be set to true.
     *
     * Always enable this when when the card is not resolved so the connect account button is not hiddden.
     */
    allowScrollBar?: boolean;
    /**
     * Should the CSS `overflow` property be set to hidden or auto (clipping or
     * supporting a scroll bar), or left out altogether.
     *
     * Set to true when embed is unresolved to prevent account connection button being unreachable.
     *
     * Set to false when the card is resolved to mitigate blurry embed card issue (EDM-7188).
     * @default true
     */
    setOverflow?: boolean;
}
export declare const ExpandedFrame: ({ isPlaceholder, children, onClick, icon, text, isSelected, frameStyle, href, minWidth, maxWidth, testId, inheritDimensions, allowScrollBar, setOverflow, }: ExpandedFrameProps) => JSX.Element;
