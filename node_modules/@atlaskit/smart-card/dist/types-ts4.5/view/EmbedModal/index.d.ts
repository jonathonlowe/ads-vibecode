import React from 'react';
import { EmbedModalSize } from './types';
declare const _default: (props: {
    fireEvent?: (<K extends keyof import("../../common/analytics/generated/analytics.types").AnalyticsEventAttributes>(eventKey: K, ...params_1: undefined extends import("../../common/analytics/generated/analytics.types").AnalyticsEventAttributes[K] ? [
        param?: import("../../common/analytics/generated/analytics.types").AnalyticsEventAttributes[K] | undefined
    ] : [
        param: import("../../common/analytics/generated/analytics.types").AnalyticsEventAttributes[K]
    ]) => void) | undefined;
    invokeDownloadAction?: import("../../state/hooks/use-invoke-client-action/types").InvokeClientActionProps | undefined;
    invokeViewAction?: import("../../state/hooks/use-invoke-client-action/types").InvokeClientActionProps | undefined;
    iframeName: string;
    isTrusted?: boolean | undefined;
    isSupportTheming?: boolean | undefined;
    linkIcon?: import("../../state/flexible-ui-context/types").Icon | undefined;
    onClose: (context: import("./types").EmbedModalContext) => void;
    onOpen?: ((context: import("./types").EmbedModalContext) => void) | undefined;
    onOpenFailed?: ((error: Error, errorInfo: React.ErrorInfo) => void) | undefined;
    onResize?: ((context: import("./types").EmbedModalContext) => void) | undefined;
    providerName?: string | undefined;
    showModal?: boolean | undefined;
    size?: EmbedModalSize | undefined;
    src?: string | undefined;
    testId?: string | undefined;
    title?: string | undefined;
    url?: string | undefined;
} & import("./components/analytics/types").WithAnalytics) => React.JSX.Element;
export default _default;
