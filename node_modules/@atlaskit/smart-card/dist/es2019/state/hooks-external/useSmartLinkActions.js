import { useMemo } from 'react';
import uuid from 'uuid';
import { useAnalyticsEvents } from '../../common/analytics/generated/use-analytics-events';
import { extractInvokeDownloadAction } from '../../extractors/action/extract-invoke-download-action';
import { extractInvokePreviewAction } from '../../extractors/action/extract-invoke-preview-action';
import { extractInvokeViewAction } from '../../extractors/action/extract-invoke-view-action';
import { messages } from '../../messages';
import { toAction } from '../../utils/actions/to-action';
import useInvokeClientAction from '../hooks/use-invoke-client-action';
import { useSmartCardState as useLinkState } from '../store';
export function useSmartLinkActions({
  url,
  appearance,
  origin,
  actionOptions
}) {
  const id = useMemo(() => uuid(), []);
  const linkState = useLinkState(url);
  const {
    fireEvent
  } = useAnalyticsEvents();
  const invokeClientAction = useInvokeClientAction({
    fireEvent
  });
  if (linkState.details && !(actionOptions !== null && actionOptions !== void 0 && actionOptions.hide)) {
    const actions = [];
    const invokeParam = {
      actionOptions,
      appearance,
      id,
      response: linkState.details
    };
    const downloadActionProps = extractInvokeDownloadAction(invokeParam);
    if (downloadActionProps) {
      actions.push(toAction(downloadActionProps, invokeClientAction, messages.download, 'download-content'));
    }
    const viewActionProps = extractInvokeViewAction(invokeParam);
    if (viewActionProps) {
      actions.push(toAction(viewActionProps, invokeClientAction, messages.view, 'view-content'));
    }
    const previewActionProps = extractInvokePreviewAction({
      ...invokeParam,
      fireEvent,
      origin
    });
    if (previewActionProps) {
      actions.push(toAction(previewActionProps, invokeClientAction, messages.preview_improved, 'preview-content'));
    }
    return actions;
  }
  return [];
}