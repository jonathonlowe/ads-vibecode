import React, { Suspense, useCallback, useContext, useMemo, useState } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { StopPropagation } from '../../view/common/stop-propagation';
const FALLBACK_API = {
  open: () => {},
  close: () => {}
};
export const SmartLinkModalContext = /*#__PURE__*/React.createContext(FALLBACK_API);
export const SmartLinkModalProvider = ({
  children
}) => {
  const [element, setElement] = useState(null);
  const api = useMemo(() => ({
    open: modal => setElement( /*#__PURE__*/React.createElement(Suspense, {
      fallback: null
    }, /*#__PURE__*/React.createElement(StopPropagation, null, modal))),
    close: () => setElement(null)
  }), []);
  const fallbackRender = useCallback(({
    resetErrorBoundary
  }) => {
    resetErrorBoundary();
    return null;
  }, []);
  const onReset = useCallback(() => setElement(null), []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SmartLinkModalContext.Provider, {
    value: api
  }, children), /*#__PURE__*/React.createElement(ErrorBoundary, {
    fallbackRender: fallbackRender,
    onReset: onReset
  }, element));
};

/**
 * Open (lazy load) modal
 *
 * This hook injects the element below Card and standalone HoverCard component.
 * It is intended to solve the issue where modal triggered by the parent component
 * disappear when the parent component is unmounted.
 *
 * For example, clicking on hover card action to open a modal. Once the modal is opened,
 * hover card disappears.
 *
 * Usage:
 *   const modal = useSmartLinkModal()
 *   modal.open(<SomeLazyLoadModal isOpen={true} onClose={() => modal.close()} />);
 */
export const useSmartLinkModal = () => useContext(SmartLinkModalContext);