export const CONTENT_URL_SECURITY_AND_PERMISSIONS = 'https://support.atlassian.com/confluence-cloud/docs/insert-links-and-anchors/#Smart-links';
export const CONTENT_URL_3P_ACCOUNT_AUTH = 'https://support.atlassian.com/confluence-cloud/docs/what-data-is-sent-and-received-when-pasting-a-smart-link/';
export const CONTENT_URL_AI = 'https://www.atlassian.com/trust/atlassian-intelligence';
export const CONTENT_URL_AI_TROUBLESHOOTING = 'https://status.atlassian.com/';
export const CONTENT_URL_ACCEPTABLE_USE_POLICY = 'https://www.atlassian.com/legal/acceptable-use-policy';

/**
 * The alignment of Flexible UI component.
 */
export let SmartLinkAlignment = /*#__PURE__*/function (SmartLinkAlignment) {
  SmartLinkAlignment["Left"] = "left";
  SmartLinkAlignment["Right"] = "right";
  return SmartLinkAlignment;
}({});

/**
 * The direction of Flexible UI components. It establish the main-axis
 * or how the child components laid out inside the parent component.
 * Similar to flex's flex-direction concept.
 */
export let SmartLinkDirection = /*#__PURE__*/function (SmartLinkDirection) {
  SmartLinkDirection["Horizontal"] = "horizontal";
  SmartLinkDirection["Vertical"] = "vertical";
  return SmartLinkDirection;
}({});

/**
 * The positioning of the component within the parent component.
 * Similar to flex's align-items or align-self concept.
 */
export let SmartLinkPosition = /*#__PURE__*/function (SmartLinkPosition) {
  SmartLinkPosition["Top"] = "top";
  SmartLinkPosition["Center"] = "center";
  return SmartLinkPosition;
}({});

/**
 * The sizing options of the Flexible UI component. Every component
 * has or inherits the sizing props. Implementation varies
 * as per component.
 */
export let SmartLinkSize = /*#__PURE__*/function (SmartLinkSize) {
  SmartLinkSize["XLarge"] = "xlarge";
  SmartLinkSize["Large"] = "large";
  SmartLinkSize["Medium"] = "medium";
  SmartLinkSize["Small"] = "small";
  return SmartLinkSize;
}({});

/**
 * Smart Links link request status
 */
export let SmartLinkStatus = /*#__PURE__*/function (SmartLinkStatus) {
  SmartLinkStatus["Pending"] = "pending";
  SmartLinkStatus["Resolving"] = "resolving";
  SmartLinkStatus["Resolved"] = "resolved";
  SmartLinkStatus["Forbidden"] = "forbidden";
  SmartLinkStatus["Errored"] = "errored";
  SmartLinkStatus["NotFound"] = "not_found";
  SmartLinkStatus["Unauthorized"] = "unauthorized";
  SmartLinkStatus["Fallback"] = "fallback";
  return SmartLinkStatus;
}({});

/**
 * Flexible UI theme available on the Card level.
 * This determine the styling of the link.
 */
export let SmartLinkTheme = /*#__PURE__*/function (SmartLinkTheme) {
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  SmartLinkTheme["Black"] = "black";
  SmartLinkTheme["Link"] = "link";
  return SmartLinkTheme;
}({});
export let SmartLinkInternalTheme = /*#__PURE__*/function (SmartLinkInternalTheme) {
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage
  SmartLinkInternalTheme["Grey"] = "grey";
  return SmartLinkInternalTheme;
}({});

/**
 * Determines whether the container size will fit to the content
 * or expand to the available width or the parent component.
 * Similar to flex's flex-grow concept.
 */
export let SmartLinkWidth = /*#__PURE__*/function (SmartLinkWidth) {
  SmartLinkWidth["FitToContent"] = "fit-to-content";
  SmartLinkWidth["Flexible"] = "flexible";
  return SmartLinkWidth;
}({});

/**
 * Flexible UI element name - each reflecting the link data its represented.
 * When adding an element...
 * 1) Create base element if it doesn't already exist.
 *    Base element are inside src/view/FlexibleCard/components/elements.
 *    E.g. Badge, DateTime, Icon, Lozenge, etc.
 * 2) Update FlexibleUiContext with the new prop for data representing
 *    the element, preferably with the same name as the element itself.
 *    (src/state/flexible-ui-context/types.ts)
 * 3) Update Flexible UI extractor (src/extractors/flexible/index.ts)
 * 4) Set base element and data mapping
 *    (src/view/FlexibleCard/components/elements/utils.tsx)
 * 5) Create element. (src/view/FlexibleCard/components/elements/index.ts)
 * 6) Update element ElementDisplaySchema for inline/block display
 *    (src/view/FlexibleCard/components/blocks/utils.tsx)
 */
export let ElementName = /*#__PURE__*/function (ElementName) {
  ElementName["AppliedToComponentsCount"] = "AppliedToComponentsCount";
  ElementName["AssignedTo"] = "AssignedTo";
  ElementName["AssignedToGroup"] = "AssignedToGroup";
  ElementName["AttachmentCount"] = "AttachmentCount";
  ElementName["AuthorGroup"] = "AuthorGroup";
  ElementName["ChecklistProgress"] = "ChecklistProgress";
  ElementName["CollaboratorGroup"] = "CollaboratorGroup";
  ElementName["CommentCount"] = "CommentCount";
  ElementName["CreatedBy"] = "CreatedBy";
  ElementName["CreatedOn"] = "CreatedOn";
  ElementName["DueOn"] = "DueOn";
  ElementName["LatestCommit"] = "LatestCommit";
  ElementName["LinkIcon"] = "LinkIcon";
  ElementName["Location"] = "Location";
  ElementName["ModifiedBy"] = "ModifiedBy";
  ElementName["ModifiedOn"] = "ModifiedOn";
  ElementName["OwnedBy"] = "OwnedBy";
  ElementName["OwnedByGroup"] = "OwnedByGroup";
  ElementName["Preview"] = "Preview";
  ElementName["Priority"] = "Priority";
  ElementName["ProgrammingLanguage"] = "ProgrammingLanguage";
  ElementName["Provider"] = "Provider";
  ElementName["ReactCount"] = "ReactCount";
  ElementName["ReadTime"] = "ReadTime";
  ElementName["Snippet"] = "Snippet";
  ElementName["SourceBranch"] = "SourceBranch";
  ElementName["State"] = "State";
  ElementName["SubscriberCount"] = "SubscriberCount";
  ElementName["SubTasksProgress"] = "SubTasksProgress";
  ElementName["StoryPoints"] = "StoryPoints";
  ElementName["TargetBranch"] = "TargetBranch";
  ElementName["Title"] = "Title";
  ElementName["ViewCount"] = "ViewCount";
  ElementName["VoteCount"] = "VoteCount";
  ElementName["SentOn"] = "SentOn";
  return ElementName;
}({});

/**
 * Flexible UI action (button)
 */
export let ActionName = /*#__PURE__*/function (ActionName) {
  ActionName["CopyLinkAction"] = "CopyLinkAction";
  ActionName["DeleteAction"] = "DeleteAction";
  ActionName["EditAction"] = "EditAction";
  ActionName["FollowAction"] = "FollowAction";
  ActionName["PreviewAction"] = "PreviewAction";
  ActionName["AutomationAction"] = "AutomationAction";
  ActionName["DownloadAction"] = "DownloadAction";
  ActionName["CustomAction"] = "CustomAction";
  return ActionName;
}({});
export let InternalActionName = /*#__PURE__*/function (InternalActionName) {
  InternalActionName["AISummaryAction"] = "AISummaryAction";
  InternalActionName["ViewRelatedLinksAction"] = "ViewRelatedLinksAction";
  return InternalActionName;
}({});
/**
 * Flexible UI icons - each mapped to AK icons.
 */

export let IconType = /*#__PURE__*/function (IconType) {
  IconType["Archive"] = "FileType:Archive";
  IconType["Audio"] = "FileType:Audio";
  IconType["Blog"] = "FileType:Blog";
  IconType["Code"] = "FileType:Code";
  IconType["Document"] = "FileType:Document";
  IconType["Executable"] = "FileType:Executable";
  IconType["File"] = "FileType:File";
  IconType["Folder"] = "FileType:Folder";
  IconType["Generic"] = "FileType:Generic";
  IconType["GIF"] = "FileType:GIF";
  IconType["GoogleDocs"] = "FileType:GoogleDocs";
  IconType["GoogleForms"] = "FileType:GoogleForms";
  IconType["GoogleSheets"] = "FileType:GoogleSheets";
  IconType["GoogleSlides"] = "FileType:GoogleSlides";
  IconType["Image"] = "FileType.Image";
  IconType["MSExcel"] = "FileType:Excel";
  IconType["MSPowerpoint"] = "FileType:Powerpoint";
  IconType["MSWord"] = "FileType:WordDocument";
  IconType["PDF"] = "FileType:PDF";
  IconType["Presentation"] = "FileType:Presentation";
  IconType["Sketch"] = "FileType:Sketch";
  IconType["Spreadsheet"] = "FileType:Spreadsheet";
  IconType["Template"] = "FileType:Template";
  IconType["Video"] = "FileType:Video";
  // BitBucket?
  IconType["Branch"] = "BitBucket:Branch";
  IconType["Commit"] = "BitBucket:Commit";
  IconType["Project"] = "BitBucket:Project";
  IconType["PullRequest"] = "BitBucket:PullRequest";
  IconType["Repo"] = "BitBucket:Repo";
  // Jira?
  IconType["Bug"] = "Jira:Bug";
  IconType["Change"] = "Jira:Change";
  IconType["Epic"] = "Jira:Epic";
  IconType["Incident"] = "Jira:Incident";
  IconType["Problem"] = "Jira:Problem";
  IconType["ServiceRequest"] = "Jira:ServiceRequest";
  IconType["Story"] = "Jira:Story";
  IconType["SubTask"] = "Jira:SubTask";
  IconType["Task"] = "Jira:Task";
  // Confluence
  IconType["LiveDocument"] = "Confluence:LiveDocument";
  // Provider
  IconType["Confluence"] = "Provider:Confluence";
  IconType["Jira"] = "Provider:Jira";
  // Fallback
  IconType["Default"] = "Default";
  IconType["Error"] = "Default:Error";
  IconType["Forbidden"] = "Default:Forbidden";
  // Badge
  IconType["Attachment"] = "Badge:Attachment";
  IconType["CheckItem"] = "Badge:Task";
  IconType["Comment"] = "Badge:Comment";
  IconType["Component"] = "Badge:Component";
  IconType["View"] = "Badge:View";
  IconType["React"] = "Badge:React";
  IconType["Vote"] = "Badge:Vote";
  IconType["PriorityBlocker"] = "Badge:PriorityBlocker";
  IconType["PriorityCritical"] = "Badge:PriorityCritical";
  IconType["PriorityHigh"] = "Badge:PriorityHigh";
  IconType["PriorityHighest"] = "Badge:PriorityHighest";
  IconType["PriorityLow"] = "Badge:PriorityLow";
  IconType["PriorityLowest"] = "Badge:PriorityLowest";
  IconType["PriorityMajor"] = "Badge:PriorityMajor";
  IconType["PriorityMedium"] = "Badge:PriorityMedium";
  IconType["PriorityMinor"] = "Badge:PriorityMinor";
  IconType["PriorityTrivial"] = "Badge:PriorityTrivial";
  IconType["PriorityUndefined"] = "Badge:PriorityUndefined";
  IconType["ProgrammingLanguage"] = "Badge:ProgrammingLanguage";
  IconType["Subscriber"] = "Badge:Subscriber";
  IconType["SubTasksProgress"] = "Badge:SubTask";
  return IconType;
}({});

/**
 * Type for Flexible UI's Media element
 */
export let MediaType = /*#__PURE__*/function (MediaType) {
  MediaType["Image"] = "image";
  return MediaType;
}({});
export let MediaPlacement = /*#__PURE__*/function (MediaPlacement) {
  MediaPlacement["Left"] = "left";
  MediaPlacement["Right"] = "right";
  return MediaPlacement;
}({});
export let CardDisplay = /*#__PURE__*/function (CardDisplay) {
  CardDisplay["Inline"] = "inline";
  CardDisplay["Block"] = "block";
  CardDisplay["Embed"] = "embed";
  CardDisplay["EmbedPreview"] = "embedPreview";
  CardDisplay["Flexible"] = "flexible";
  CardDisplay["HoverCardPreview"] = "hoverCardPreview";
  return CardDisplay;
}({});