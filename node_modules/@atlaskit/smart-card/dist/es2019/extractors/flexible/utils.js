import { extractPersonAssignedTo, extractPersonCreatedBy, extractPersonOwnedBy, extractPersonUpdatedBy } from '@atlaskit/link-extractors';
const extractLinkName = link => {
  if (link && typeof link === 'object' && link['@type'] === 'Link') {
    return link.name;
  }
};
const extractValue = (data, key) => {
  return data === null || data === void 0 ? void 0 : data[key];
};
export const extractCommentCount = data => extractValue(data, 'schema:commentCount');
export const extractAppliedToComponentsCount = data => extractValue(data, 'atlassian:appliedToComponentsCount');
export const extractDueOn = data => extractValue(data, 'endTime');
export const extractViewCount = data => extractValue(data, 'atlassian:viewCount');
export const extractReactCount = data => extractValue(data, 'atlassian:reactCount');
export const extractVoteCount = data => extractValue(data, 'atlassian:voteCount');
export const extractOwnedBy = data => {
  const persons = extractPersonOwnedBy(data);
  if (persons && persons.length) {
    return persons[0].name;
  }
};
export const extractAssignedTo = data => {
  const person = extractPersonAssignedTo(data);
  if (person) {
    return person.name;
  }
};
export const extractPersonAssignedToAsArray = data => {
  const person = extractPersonAssignedTo(data);
  return person ? [person] : undefined;
};
export const extractCreatedBy = data => {
  const persons = extractPersonCreatedBy(data);
  if (persons && persons.length) {
    return persons[0].name;
  }
};
export const extractModifiedBy = data => {
  const person = extractPersonUpdatedBy(data);
  if (person) {
    return person.name;
  }
};
export const extractProgrammingLanguage = data => extractValue(data, 'schema:programmingLanguage');
export const extractSourceBranch = data => extractLinkName(data['atlassian:mergeSource']);
export const extractSubscriberCount = data => extractValue(data, 'atlassian:subscriberCount');
export const extractAttachmentCount = data => extractValue(data, 'atlassian:attachmentCount');
export const extractTargetBranch = data => extractLinkName(data['atlassian:mergeDestination']);
export const extractChecklistProgress = data => {
  const checkItemsObj = extractValue(data, 'atlassian:checkItems');
  return checkItemsObj ? `${checkItemsObj.checkedItems}/${checkItemsObj.totalItems}` : undefined;
};
export const extractLocation = data => {
  const {
    url,
    name
  } = extractValue(data, 'location') || {};
  if (url && name && typeof url === 'string') {
    return {
      text: name,
      url
    };
  }
};
export const extractSubTasksProgress = data => {
  const subTasksObject = extractValue(data, 'atlassian:subTasks');
  return subTasksObject && subTasksObject.totalCount ? `${subTasksObject.resolvedCount}/${subTasksObject.totalCount}` : undefined;
};
export const extractReadTime = data => {
  return extractValue(data, 'atlassian:readTimeInMinutes');
};
export const extractSentOn = data => {
  return extractValue(data, 'dateSent');
};
export const extractStoryPoints = data => {
  return extractValue(data, 'atlassian:storyPoints');
};