import React from 'react';
import DocumentIconOld from '@atlaskit/icon-file-type/glyph/document/16';
import FileIconOld from '@atlaskit/icon-file-type/glyph/generic/16';
import PresentationIconOld from '@atlaskit/icon-file-type/glyph/presentation/16';
import SpreadsheetIconOld from '@atlaskit/icon-file-type/glyph/spreadsheet/16';
import BlogIconOld from '@atlaskit/icon-object/glyph/blog/16';
import DocumentFilledIconNew from '@atlaskit/icon/core/migration/file--document-filled';
import DocumentFilledIconOld from '@atlaskit/icon/core/migration/page--document-filled';
import { isConfluenceGenerator } from '@atlaskit/link-extractors';
import { fg } from '@atlaskit/platform-feature-flags';
import BlogIconNew from '../../../common/ui/icons/blog-icon';
import PresentationIconNew from '../../../common/ui/icons/chart-bar-icon';
import FileIconNew from '../../../common/ui/icons/file-icon';
import SpreadsheetIconNew from '../../../common/ui/icons/list-bullet-icon';
import LiveDocumentIcon from '../../../common/ui/icons/live-document-icon';
import DocumentIconNew from '../../../common/ui/icons/page-icon';
import { getIconForFileType } from '../../../utils';
import { prioritiseIcon } from './prioritiseIcon';

// TODO Delete this and rename BlogIconNew to BlogIcon when cleaning platform-smart-card-icon-migration
const BlogIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(BlogIconNew, props);
  }
  return /*#__PURE__*/React.createElement(BlogIconOld, props);
};

// TODO Delete this and rename FileIconNew to FileIcon when cleaning platform-smart-card-icon-migration
const FileIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(FileIconNew, props);
  }
  return /*#__PURE__*/React.createElement(FileIconOld, props);
};

// TODO Delete this and rename DocumentIconNew to DocumentIcon when cleaning platform-smart-card-icon-migration
const DocumentIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(DocumentIconNew, props);
  }
  return /*#__PURE__*/React.createElement(DocumentIconOld, props);
};

// TODO Delete this and rename PresentationIconNew to PresentationIcon when cleaning platform-smart-card-icon-migration
const PresentationIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(PresentationIconNew, props);
  }
  return /*#__PURE__*/React.createElement(PresentationIconOld, props);
};

// TODO Delete this and rename SpreadsheetIconNew to SpreadsheetIcon when cleaning platform-smart-card-icon-migration
const SpreadsheetIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(SpreadsheetIconNew, props);
  }
  return /*#__PURE__*/React.createElement(SpreadsheetIconOld, props);
};

// TODO Delete this and rename DocumentFilledIconNew to DocumentFilledIcon when cleaning platform-smart-card-icon-migration
const DocumentFilledIcon = props => {
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(DocumentFilledIconNew, props);
  }
  return /*#__PURE__*/React.createElement(DocumentFilledIconOld, props);
};
/**
 * Extracts an icon for a document pbject
 *
 * @param type - The type of the document.
 * @param opts - The options for extracting the icon.
 * @returns The React node representing the extracted icon, or `undefined` if no icon is found.
 */
export const extractIconFromDocument = (type, opts) => {
  const iconFromType = documentTypeToIcon(type, opts);
  const iconFromFileFormat = documentFileFormatToIcon(opts);
  const iconFromProvider = opts.provider && opts.provider.icon;
  return prioritiseIcon({
    fileFormatIcon: iconFromFileFormat,
    documentTypeIcon: iconFromType,
    urlIcon: opts.icon,
    providerIcon: iconFromProvider
  });
};
const documentFileFormatToIcon = opts => {
  if (opts.fileFormat) {
    return getIconForFileType(opts.fileFormat);
  }
};
const documentTypeToIcon = (type, opts) => {
  switch (type) {
    case 'schema:BlogPosting':
      return /*#__PURE__*/React.createElement(BlogIcon, {
        label: opts.showIconLabel ? opts.title || 'blog' : '',
        testId: "blog-icon"
      });
    case 'schema:DigitalDocument':
      return digitalDocumentToIcon(opts);
    case 'schema:TextDigitalDocument':
      return /*#__PURE__*/React.createElement(DocumentIcon, {
        label: opts.showIconLabel ? opts.title || 'document' : '',
        testId: "document-icon"
      });
    case 'schema:PresentationDigitalDocument':
      return /*#__PURE__*/React.createElement(PresentationIcon, {
        label: opts.showIconLabel ? opts.title || 'presentation' : '',
        testId: "presentation-icon"
      });
    case 'schema:SpreadsheetDigitalDocument':
      return /*#__PURE__*/React.createElement(SpreadsheetIcon, {
        label: opts.showIconLabel ? opts.title || 'spreadsheet' : '',
        testId: "spreadsheet-icon"
      });
    case 'atlassian:Template':
      return /*#__PURE__*/React.createElement(DocumentFilledIcon, {
        color: "currentColor",
        label: opts.showIconLabel ? opts.title || 'template' : '',
        testId: "document-filled-icon"
      });
    case 'atlassian:UndefinedLink':
      return /*#__PURE__*/React.createElement(DocumentIcon, {
        label: opts.showIconLabel ? opts.title || 'undefinedLink' : '',
        testId: "document-icon"
      });
  }
};

/**
 * Enables providers to represent `schema:DigitalDocument` in a manner which
 * aligns with their customers when representing provider-specific types, which
 * do not apply across multiple providers.
 * @example Confluence digital documents represent 'live documents', specific to Confluence.
 * @remark This mechanism will be superseded by backend-driven icon URLs as part
 * of go/j/MODES-5864. Do not add more!
 */
const digitalDocumentToIcon = opts => {
  var _opts$provider;
  if ((_opts$provider = opts.provider) !== null && _opts$provider !== void 0 && _opts$provider.id && isConfluenceGenerator(opts.provider.id)) {
    return /*#__PURE__*/React.createElement(LiveDocumentIcon, {
      label: "live-doc",
      testId: "live-doc-icon"
    });
  } else {
    return /*#__PURE__*/React.createElement(FileIcon, {
      label: opts.showIconLabel ? opts.title || 'file' : '',
      testId: "file-icon"
    });
  }
};