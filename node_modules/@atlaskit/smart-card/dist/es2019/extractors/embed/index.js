import { extractEntityProvider, extractLink, extractPreview, extractProvider, extractProviderIcon, extractSmartLinkEmbed, extractSmartLinkTitle, extractSmartLinkUrl, extractTitle, extractUrlFromIconJsonLd, isEntityPresent } from '@atlaskit/link-extractors';
import { fg } from '@atlaskit/platform-feature-flags';
import { getEmptyJsonLd } from '../../utils/jsonld';
import { prioritiseIcon } from '../common/icon';
import { extractIsSupportTheming } from '../common/meta/extractIsSupportTheming';
import { extractIsTrusted } from '../common/meta/extractIsTrusted';
const extractEmbedPreview = (jsonLd, platform, iframeUrlType) => {
  const preview = extractPreview(jsonLd, platform, iframeUrlType);
  if (preview && preview.src) {
    return {
      ...preview,
      src: preview.src
    };
  }
};
function generateContext(jsonLd) {
  const provider = extractProvider(jsonLd);
  if (!provider) {
    return undefined;
  }

  // If no icon is supplied, return existing context
  if (!jsonLd.icon) {
    return provider;
  }
  const generator = jsonLd.generator;
  const icon = prioritiseIcon({
    fileFormatIcon: undefined,
    documentTypeIcon: undefined,
    urlIcon: extractUrlFromIconJsonLd(jsonLd.icon),
    // We still attempt to follow the icon priority function even if no generator (and therefore provider icon) is defined
    providerIcon: generator && typeof generator !== 'string' && generator['@type'] !== 'Link' && extractProviderIcon(generator.icon)
  });
  return {
    ...provider,
    icon: icon ? icon : provider.icon
  };
}

/**
 * We can migrate this to link extractors once we have deprecated JsonLd
 */
function extractSmartLinkContext(response) {
  if (isEntityPresent(response)) {
    return extractEntityProvider(response);
  }
  return generateContext(response === null || response === void 0 ? void 0 : response.data);
}
export const extractEmbedProps = (response, platform, iframeUrlType) => {
  const meta = response === null || response === void 0 ? void 0 : response.meta;
  const jsonLd = (response === null || response === void 0 ? void 0 : response.data) || getEmptyJsonLd();
  if (fg('smart_links_noun_support')) {
    return {
      link: extractSmartLinkUrl(response) || '',
      title: extractSmartLinkTitle(response),
      context: extractSmartLinkContext(response),
      preview: extractSmartLinkEmbed(response, iframeUrlType),
      isTrusted: extractIsTrusted(meta),
      isSupportTheming: extractIsSupportTheming(meta)
    };
  }
  return {
    link: extractLink(jsonLd) || '',
    title: extractTitle(jsonLd),
    context: generateContext(jsonLd),
    preview: extractEmbedPreview(jsonLd, platform, iframeUrlType),
    isTrusted: extractIsTrusted(meta),
    isSupportTheming: extractIsSupportTheming(meta)
  };
};