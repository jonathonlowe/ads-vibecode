import { extractLink, extractPreview as extractPreviewData, extractProvider, extractTitle } from '@atlaskit/link-extractors';
import { ActionName, CardAction } from '../../index';
import { getExtensionKey } from '../../state/helpers';
import { canShowAction } from '../../utils/actions/can-show-action';
import { openEmbedModal } from '../../view/EmbedModal/utils';
import { extractIsSupportTheming } from '../common/meta/extractIsSupportTheming';
import { extractIsTrusted } from '../common/meta/extractIsTrusted';
import { extractLinkIcon } from '../flexible/icon';
import { extractInvokeDownloadAction } from './extract-invoke-download-action';
import { extractInvokeViewAction } from './extract-invoke-view-action';
export const extractInvokePreviewAction = param => {
  var _extractPreviewData;
  const {
    actionOptions,
    appearance: display,
    fireEvent,
    onClose,
    id,
    origin,
    response
  } = param;
  if (!canShowAction(CardAction.PreviewAction, actionOptions)) {
    return;
  }
  const data = response.data;
  const meta = response.meta;
  const src = (_extractPreviewData = extractPreviewData(data, 'web')) === null || _extractPreviewData === void 0 ? void 0 : _extractPreviewData.src;
  if (src) {
    const url = extractLink(data);
    const extensionKey = getExtensionKey(response);
    return {
      actionFn: async () => {
        var _extractProvider;
        return openEmbedModal({
          fireEvent,
          extensionKey,
          id,
          invokeDownloadAction: extractInvokeDownloadAction(param),
          invokeViewAction: extractInvokeViewAction(param, true),
          isSupportTheming: extractIsSupportTheming(meta),
          isTrusted: extractIsTrusted(meta),
          linkIcon: extractLinkIcon(response),
          providerName: (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text,
          onClose,
          origin,
          src,
          title: extractTitle(data),
          url
        });
      },
      actionSubjectId: 'invokePreviewScreen',
      actionType: ActionName.PreviewAction,
      display,
      extensionKey,
      id
    };
  }
};