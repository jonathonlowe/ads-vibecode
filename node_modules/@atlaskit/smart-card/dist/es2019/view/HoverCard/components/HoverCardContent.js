import React, { useCallback, useEffect, useMemo, useRef } from 'react';
import { useAnalyticsEvents as useAnalyticsEventsNext } from '@atlaskit/analytics-next';
import { useSmartLinkContext } from '@atlaskit/link-provider';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { CardDisplay, SmartLinkPosition, SmartLinkSize } from '../../../constants';
import { getDefinitionId, getExtensionKey, getServices } from '../../../state/helpers';
import { useSmartCardState } from '../../../state/store';
import { isSpecialEvent } from '../../../utils';
import { getIsAISummaryEnabled } from '../../../utils/ai-summary';
import { fireLinkClickedEvent } from '../../../utils/analytics/click';
import { flexibleUiOptions } from '../styled';
import { getMetadata } from '../utils';
import ContentContainer from './ContentContainer';
import HoverCardForbiddenView from './views/forbidden';
import HoverCardResolvedView from './views/resolved';
import HoverCardLoadingView from './views/resolving';
import HoverCardUnauthorisedView from './views/unauthorised';
export const hoverCardClassName = 'smart-links-hover-preview';
const HoverCardContent = ({
  id = '',
  cardState,
  onActionClick,
  onResolve,
  renderers,
  url,
  onMouseEnter,
  onMouseLeave,
  actionOptions
}) => {
  var _linkState$status, _cardState$details;
  const {
    createAnalyticsEvent
  } = useAnalyticsEventsNext();
  const {
    fireEvent
  } = useAnalyticsEvents();
  const extensionKey = useMemo(() => getExtensionKey(cardState.details), [cardState.details]);
  const linkState = useSmartCardState(url);
  const linkStatus = (_linkState$status = linkState.status) !== null && _linkState$status !== void 0 ? _linkState$status : 'pending';
  const definitionId = useMemo(() => getDefinitionId(cardState.details), [cardState.details]);
  const {
    isAdminHubAIEnabled
  } = useSmartLinkContext();
  const isAISummaryEnabled = getIsAISummaryEnabled(isAdminHubAIEnabled, cardState.details);
  const services = getServices(linkState.details);
  const statusRef = useRef(linkStatus);
  const fireEventRef = useRef(fireEvent);
  const definitionIdRef = useRef(definitionId);
  useEffect(() => {
    /**
     * Must access object value via ref because its not stable
     * and it can trigger useEffect to re-run below
     */
    if (statusRef.current !== linkStatus) {
      statusRef.current = linkStatus;
    }
    if (fireEventRef.current !== fireEvent) {
      fireEventRef.current = fireEvent;
    }
    if (definitionIdRef.current !== definitionId) {
      definitionIdRef.current = definitionId;
    }
  }, [linkStatus, fireEvent, definitionId]);
  useEffect(() => {
    var _definitionIdRef$curr;
    const previewDisplay = 'card';
    const previewInvokeMethod = 'mouse_hover';
    const cardOpenTime = Date.now();
    const fireEventCurrent = fireEventRef.current;
    fireEventCurrent('ui.hoverCard.viewed', {
      previewDisplay,
      previewInvokeMethod,
      definitionId: (_definitionIdRef$curr = definitionIdRef.current) !== null && _definitionIdRef$curr !== void 0 ? _definitionIdRef$curr : null
    });
    return () => {
      var _definitionIdRef$curr2;
      const hoverTime = Date.now() - cardOpenTime;
      fireEventCurrent('ui.hoverCard.dismissed', {
        previewDisplay,
        previewInvokeMethod,
        hoverTime,
        definitionId: (_definitionIdRef$curr2 = definitionIdRef.current) !== null && _definitionIdRef$curr2 !== void 0 ? _definitionIdRef$curr2 : null
      });
    };
  }, []);
  const onClick = useCallback(event => {
    const isModifierKeyPressed = isSpecialEvent(event);
    fireEvent('ui.smartLink.clicked.titleGoToLink', {
      id,
      display: CardDisplay.HoverCardPreview,
      isModifierKeyPressed,
      definitionId: definitionId !== null && definitionId !== void 0 ? definitionId : null
    });
    fireLinkClickedEvent(createAnalyticsEvent)(event);
  }, [createAnalyticsEvent, id, fireEvent, definitionId]);
  const data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  const {
    subtitle
  } = getMetadata(extensionKey, data);
  const titleMaxLines = subtitle && subtitle.length > 0 ? 1 : 2;
  const titleBlockProps = {
    maxLines: titleMaxLines,
    size: SmartLinkSize.Large,
    position: SmartLinkPosition.Center,
    subtitle: subtitle
  };
  const flexibleCardProps = {
    appearance: CardDisplay.HoverCardPreview,
    cardState: cardState,
    onClick: onClick,
    onResolve: onResolve,
    origin: 'smartLinkPreviewHoverCard',
    renderers: renderers,
    actionOptions,
    ui: flexibleUiOptions,
    url: url,
    children: null
  };
  const onClickStopPropagation = useCallback(e => e.stopPropagation(), []);
  const getCardView = cardState => {
    if (cardState.metadataStatus === 'pending') {
      return /*#__PURE__*/React.createElement(HoverCardLoadingView, {
        flexibleCardProps: flexibleCardProps,
        titleBlockProps: titleBlockProps
      });
    }
    if (cardState.status === 'unauthorized' && services !== null && services !== void 0 && services.length) {
      return /*#__PURE__*/React.createElement(HoverCardUnauthorisedView, {
        extensionKey: extensionKey,
        id: id,
        flexibleCardProps: flexibleCardProps,
        url: url
      });
    }
    if (cardState.status === 'forbidden' || cardState.status === 'not_found') {
      return /*#__PURE__*/React.createElement(HoverCardForbiddenView, {
        flexibleCardProps: flexibleCardProps
      });
    }
    if (cardState.status === 'resolved') {
      return /*#__PURE__*/React.createElement(HoverCardResolvedView, {
        cardState: cardState,
        extensionKey: extensionKey,
        flexibleCardProps: flexibleCardProps,
        isAISummaryEnabled: isAISummaryEnabled,
        onActionClick: onActionClick,
        titleBlockProps: titleBlockProps,
        url: url
      });
    }
    return null;
  };
  const cardView = getCardView(cardState);
  return cardView ? /*#__PURE__*/React.createElement(ContentContainer, {
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClickStopPropagation,
    isAIEnabled: isAISummaryEnabled,
    url: url
  }, cardView) : null;
};
export default HoverCardContent;