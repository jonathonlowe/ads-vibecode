import React, { useCallback, useRef, useState } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import extractPreview from '../../../extractors/flexible/extract-preview';
import { PreviewBlock } from '../../FlexibleCard/components/blocks';
const ImagePreview = ({
  data,
  fallbackElementHeight
}) => {
  const transitionStarted = useRef(false);
  const previewBlockRef = useRef(null);
  const [showPreview, setShowPreview] = useState(true);
  const [dynamicStyles, setDynamicStyles] = useState({});

  // Set Preview to a fixed height to enable transitions
  const onPreviewRender = useCallback(() => {
    if (previewBlockRef.current) {
      var _previewBlockRef$curr;
      const previewHeight = (_previewBlockRef$curr = previewBlockRef.current) === null || _previewBlockRef$curr === void 0 ? void 0 : _previewBlockRef$curr.getBoundingClientRect().height;
      setDynamicStyles({
        borderTopLeftRadius: "var(--ds-border-radius-200, 8px)",
        borderTopRightRadius: "var(--ds-border-radius-200, 8px)",
        marginBottom: fg('platform-linking-visual-refresh-v1') ? "var(--ds-space-100, 8px)" : '0.5rem',
        ...(previewHeight ? {
          height: `${previewHeight}px`
        } : {})
      });
    }
  }, []);

  // On error set Preview to Fallback height with transition
  const onPreviewError = useCallback(() => {
    if (transitionStarted.current === false) {
      setDynamicStyles({
        transition: 'height 300ms ease-in-out',
        height: `${fallbackElementHeight}px`
      });
      transitionStarted.current = true;
    }
  }, [fallbackElementHeight]);
  const onPreviewTransitionEnd = useCallback(() => {
    setShowPreview(false);
  }, []);
  return showPreview && data && extractPreview(data) ? /*#__PURE__*/React.createElement(PreviewBlock, {
    onError: onPreviewError,
    ignoreContainerPadding: true,
    onTransitionEnd: onPreviewTransitionEnd,
    blockRef: previewBlockRef,
    onRender: onPreviewRender
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: dynamicStyles
  }) : null;
};
export default ImagePreview;