import React, { useCallback } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { di } from 'react-magnetic-di';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import { useAnalyticsEvents } from '../../common/analytics/generated/use-analytics-events';
import { CardDisplay } from '../../constants';
import { failUfoExperience, startUfoExperience } from '../../state/analytics';
import { SmartLinkModalProvider } from '../../state/modal';
import { useSmartLinkAnalyticsContext } from '../../utils/analytics/SmartLinkAnalyticsContext';
import { HOVER_CARD_SOURCE, HoverCardComponent } from './components/HoverCardComponent';
const HoverCardWithErrorBoundary = props => {
  const {
    fireEvent
  } = useAnalyticsEvents();
  const {
    url,
    id,
    children
  } = props;
  const analyticsContext = useSmartLinkAnalyticsContext({
    display: CardDisplay.HoverCardPreview,
    id,
    source: HOVER_CARD_SOURCE,
    url
  });
  const onError = useCallback((error, info) => {
    startUfoExperience('smart-link-rendered', id || 'NULL');
    failUfoExperience('smart-link-rendered', id || 'NULL');
    failUfoExperience('smart-link-authenticated', id || 'NULL');
    fireEvent('ui.smartLink.renderFailed', {
      ...(analyticsContext === null || analyticsContext === void 0 ? void 0 : analyticsContext.attributes),
      display: CardDisplay.HoverCardPreview,
      id: id !== null && id !== void 0 ? id : null,
      error: error,
      errorInfo: info
    });
  }, [analyticsContext, id, fireEvent]);
  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    fallback: children,
    onError: onError
  }, /*#__PURE__*/React.createElement(SmartLinkModalProvider, null, /*#__PURE__*/React.createElement(HoverCardComponent, props, children)));
};
const HoverCardWithoutAnalyticsContext = withAnalyticsEvents()(HoverCardWithErrorBoundary);

/**
 * A hover preview component using within smart links,
 * e.g. inline card's hover preview and auth tooltip, flexible card's hover preview.
 *
 * This component contains additional props that smart-card internal components
 * use to configure hover preview behaviour.
 */
export const HoverCard = props => {
  return /*#__PURE__*/React.createElement(HoverCardWithoutAnalyticsContext, props);
};

/**
 * A standalone hover preview component
 */
export const StandaloneHoverCard = props => /*#__PURE__*/React.createElement(HoverCard, props);