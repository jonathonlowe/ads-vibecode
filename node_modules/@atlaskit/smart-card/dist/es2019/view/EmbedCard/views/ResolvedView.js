import React from 'react';
import LinkGlyph from '@atlaskit/icon/core/migration/link';
import { useThemeObserver } from '@atlaskit/tokens';
import { getPreviewUrlWithTheme } from '../../../utils';
import { ExpandedFrame } from '../components/ExpandedFrame';
import { Frame } from '../components/Frame';
import { ImageIcon } from '../components/ImageIcon';
export const EmbedCardResolvedView = /*#__PURE__*/React.forwardRef(({
  link,
  context,
  onClick,
  isSelected,
  frameStyle,
  preview,
  title,
  isTrusted,
  testId = 'embed-card-resolved-view',
  inheritDimensions,
  onIframeDwell,
  onIframeFocus,
  isSupportTheming
}, embedIframeRef) => {
  const iconFromContext = context === null || context === void 0 ? void 0 : context.icon;
  const src = typeof iconFromContext === 'string' ? iconFromContext : undefined;
  const text = title || (context === null || context === void 0 ? void 0 : context.text);
  const linkGlyph = React.useMemo(() => /*#__PURE__*/React.createElement(LinkGlyph, {
    label: "icon",
    LEGACY_size: "small",
    testId: "embed-card-fallback-icon",
    color: "currentColor"
  }), []);
  let icon = React.useMemo(() => {
    if ( /*#__PURE__*/React.isValidElement(iconFromContext)) {
      return iconFromContext;
    }
    return /*#__PURE__*/React.createElement(ImageIcon, {
      src: src,
      default: linkGlyph
    });
  }, [src, linkGlyph, iconFromContext]);
  const themeState = useThemeObserver();
  let previewUrl = preview === null || preview === void 0 ? void 0 : preview.src;
  if (previewUrl && isSupportTheming) {
    previewUrl = getPreviewUrlWithTheme(previewUrl, themeState);
  }
  return /*#__PURE__*/React.createElement(ExpandedFrame, {
    isSelected: isSelected,
    frameStyle: frameStyle,
    href: link,
    testId: testId,
    icon: icon,
    text: text,
    onClick: onClick,
    inheritDimensions: inheritDimensions,
    setOverflow: false
  }, /*#__PURE__*/React.createElement(Frame, {
    url: previewUrl,
    isTrusted: isTrusted,
    testId: testId,
    ref: embedIframeRef,
    onIframeDwell: onIframeDwell,
    onIframeFocus: onIframeFocus,
    title: text
  }));
});