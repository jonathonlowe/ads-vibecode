/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useMemo } from 'react';
import { FormattedMessage } from 'react-intl-next';
import Heading from '@atlaskit/heading';
import DownloadIcon from '@atlaskit/icon/core/download';
import FullscreenExitIcon from '@atlaskit/icon/core/fullscreen-exit';
import CrossIcon from '@atlaskit/icon/core/migration/close--cross';
import VidFullScreenOnIcon from '@atlaskit/icon/core/migration/fullscreen-enter--vid-full-screen-on';
import ShortcutIcon from '@atlaskit/icon/core/migration/link-external--shortcut';
import DownloadIconLegacy from '@atlaskit/icon/glyph/download';
import VidFullScreenOffIcon from '@atlaskit/icon/glyph/vid-full-screen-off';
import { useModal } from '@atlaskit/modal-dialog';
import { fg } from '@atlaskit/platform-feature-flags';
import { messages } from '../../../../messages';
import { Icon } from '../../../common/Icon';
import { MAX_MODAL_SIZE } from '../../constants';
import LinkInfoButton from './link-info-button';
const containerStylesOld = null;
const containerStyles = null;
const iconSize = '24px';

// EDM-7328: CSS Specificity
// An embed modal icon css for img, span, svg has specificity weight of 0-1-1.
// Specify flex ui icon selector to increase specificity weight to 0-2-1.
const iconCss = null;
const titleCssOld = null;
const titleCss = null;
const actionCss = null;
const LinkInfo = ({
  icon,
  providerName,
  onDownloadButtonClick,
  onResizeButtonClick,
  onViewButtonClick,
  size,
  testId,
  title
}) => {
  const {
    onClose
  } = useModal();
  const downloadButton = useMemo(() => {
    if (onDownloadButtonClick) {
      return /*#__PURE__*/React.createElement(LinkInfoButton, {
        content: /*#__PURE__*/React.createElement(FormattedMessage, messages.download),
        icon: /*#__PURE__*/React.createElement(DownloadIcon, {
          label: messages.download.defaultMessage,
          LEGACY_fallbackIcon: DownloadIconLegacy,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onDownloadButtonClick,
        testId: `${testId}-download`
      });
    }
  }, [onDownloadButtonClick, testId]);
  const urlButton = useMemo(() => {
    if (onViewButtonClick) {
      const content = providerName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, messages.viewIn), " ", providerName) : /*#__PURE__*/React.createElement(FormattedMessage, messages.viewOriginal);
      return /*#__PURE__*/React.createElement(LinkInfoButton, {
        content: content,
        icon: /*#__PURE__*/React.createElement(ShortcutIcon, {
          label: messages.viewOriginal.defaultMessage,
          spacing: "spacious",
          color: "currentColor"
        }),
        onClick: onViewButtonClick,
        testId: `${testId}-url`
      });
    }
  }, [onViewButtonClick, providerName, testId]);
  const sizeButton = useMemo(() => {
    const isFullScreen = size === MAX_MODAL_SIZE;
    const message = isFullScreen ? messages.preview_min_size : messages.preview_max_size;
    const icon = isFullScreen ? /*#__PURE__*/React.createElement(FullscreenExitIcon, {
      LEGACY_fallbackIcon: VidFullScreenOffIcon,
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    }) : /*#__PURE__*/React.createElement(VidFullScreenOnIcon, {
      label: message.defaultMessage,
      spacing: "spacious",
      color: "currentColor"
    });
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      React.createElement("span", {
        className: "smart-link-resize-button"
      }, /*#__PURE__*/React.createElement(LinkInfoButton, {
        content: /*#__PURE__*/React.createElement(FormattedMessage, message),
        icon: icon,
        onClick: onResizeButtonClick,
        testId: `${testId}-resize`
      }))
    );
  }, [onResizeButtonClick, size, testId]);
  return /*#__PURE__*/React.createElement("div", {
    className: ax([fg('platform-linking-visual-refresh-v1') ? "_zulpu2gc _1e0c1txw _19bv1ejb _u5f31ejb _ca0q1ejb _n3tdpxbi _1wpz1fhb _4t3i1tcg" : "_zulpu2gc _4cvr1h6o _1e0c1txw _1bah1yb4 _ca0q1ejb _u5f31ejb _n3tddlk8 _19bv1ejb"])
  }, icon && /*#__PURE__*/React.createElement("div", {
    "data-testid": `${testId}-icon`,
    className: ax(["_4t3i1tcg _gire1tcg _yrry1tcg _1bnm1tcg _bna71tcg _1xjx1tcg _17521tcg _1tke1tcg _x9xj1tcg _v5981tcg _z15s1tcg _qci81tcg _15iz1tcg _erub1tcg _c71l1tcg _1q121tcg _2s1x1tcg _1rh41tcg _19l31tcg _1pr21tcg _1u5t1tcg _1bsb1tcg _1xyl1tcg _1h1b1tcg _prfw1tcg _mezj1tcg _e2oo1tcg _w8l51tcg _1ul91tcg _1ekg1tcg _jbhf1tcg _11hh1tcg _1rg21tcg _q7cv1tcg _xwbj1tcg _p12f1tcg _1mj01tcg _1r9c1tcg _1xch1tcg _rtys1tcg _b8nk1tcg _4x201tcg"])
  }, /*#__PURE__*/React.createElement(Icon, icon)), /*#__PURE__*/React.createElement("div", {
    className: ax([fg('platform-linking-visual-refresh-v1') ? "_16jlkb7n _1o9zidpf _i0dlf1ug _1e0c1txw _2lx21bp4 _1bah1h6o _1wpz1fhb" : "_16jlkb7n _1o9zkb7n _i0dl1wug _yrj2kb7n _1wkfkb7n _923e1wug _1umonbxd _101p15vq _12bo15vq _r8nti7a9 _1flvcj1k _4wztidpf _c7bk1l2s _1r7d1hna _uepwkb7n _shpw1e54 _130wgktf"])
  }, /*#__PURE__*/React.createElement(Heading, {
    size: fg('platform-linking-visual-refresh-v1') ? 'small' : 'medium',
    color: fg('platform-linking-visual-refresh-v1') ? 'color.text' : undefined,
    testId: `${testId}-title`
  }, title), /*#__PURE__*/React.createElement("span", {
    tabIndex: 0
  })), /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _zulp1b66 _1e0c1txw _3kllglyw"])
  }, downloadButton, urlButton, sizeButton, /*#__PURE__*/React.createElement(LinkInfoButton, {
    content: /*#__PURE__*/React.createElement(FormattedMessage, messages.preview_close),
    icon: /*#__PURE__*/React.createElement(CrossIcon, {
      label: messages.preview_close.defaultMessage,
      color: "currentColor",
      spacing: "spacious"
    }),
    onClick: onClose,
    testId: `${testId}-close`
  })));
};
export default LinkInfo;