/* UnauthorisedView.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./UnauthorisedView.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useMemo } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { extractProvider } from '@atlaskit/link-extractors';
import { fg } from '@atlaskit/platform-feature-flags';
import { useAnalyticsEvents } from '../../../common/analytics/generated/use-analytics-events';
import { messages } from '../../../messages';
import { hasAuthScopeOverrides } from '../../../state/helpers';
import UnauthorisedViewContent from '../../common/UnauthorisedViewContent';
import { AuthorizeAction } from '../actions/AuthorizeAction';
import UnresolvedView from './unresolved-view';
import { withFlexibleUIBlockCardStyle } from './utils/withFlexibleUIBlockCardStyle';
const contentStylesOld = null;
const contentStyles = null;

/**
 * This view represents a Block card that has an 'Unauthorized' status .
 * It should have a "Connect" button that will allow a user to connect their account and view the block card.
 *
 * @see SmartLinkStatus
 * @see FlexibleCardProps
 */
const UnauthorisedView = ({
  testId = 'smart-block-unauthorized-view',
  ...props
}) => {
  var _cardState$details, _extractProvider;
  const {
    cardState,
    onAuthorize
  } = props;
  const data = (_cardState$details = cardState.details) === null || _cardState$details === void 0 ? void 0 : _cardState$details.data;
  const providerName = (_extractProvider = extractProvider(data)) === null || _extractProvider === void 0 ? void 0 : _extractProvider.text;
  const isProductIntegrationSupported = hasAuthScopeOverrides(cardState === null || cardState === void 0 ? void 0 : cardState.details);
  const {
    fireEvent
  } = useAnalyticsEvents();
  const handleAuthorize = useCallback(() => {
    if (onAuthorize) {
      fireEvent('track.applicationAccount.authStarted', {});
      onAuthorize();
    }
  }, [onAuthorize, fireEvent]);
  const content = useMemo(() => onAuthorize ? /*#__PURE__*/React.createElement(UnauthorisedViewContent, {
    providerName: providerName,
    isProductIntegrationSupported: isProductIntegrationSupported,
    testId: testId
  }) : /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[providerName ? 'unauthorised_account_description' : 'unauthorised_account_description_no_provider'], {
    values: {
      context: providerName
    }
  })), [isProductIntegrationSupported, onAuthorize, providerName, testId]);
  const actions = useMemo(() => onAuthorize ? [AuthorizeAction(handleAuthorize, providerName)] : [], [handleAuthorize, onAuthorize, providerName]);
  return /*#__PURE__*/React.createElement(UnresolvedView, _extends({}, props, {
    actions: actions,
    testId: testId
  }), /*#__PURE__*/React.createElement("div", {
    "data-testid": `${testId}-content`,
    className: ax([fg('platform-linking-visual-refresh-v1') ? "_11c8dcr7 _syaz1fxt _19pku2gc" : "_11c8dcr7 _syaz131l _19pkcxkx"])
  }, content));
};
export default withFlexibleUIBlockCardStyle(UnauthorisedView);