/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import ErrorIconCore from '@atlaskit/icon/core/migration/error';
import ErrorIcon from '@atlaskit/icon/utility/migration/error';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { R300 } from '@atlaskit/theme/colors';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { ActionButton } from '../common/action-button';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { IconAndTitleLayout } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import withFrameStyleControl from '../utils/withFrameStyleControl';
const styles = {
  iconWrapper: "_2hwx1i6y"
};
const fallbackIcon = () => {
  if (fg('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/React.createElement(ErrorIconCore, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_size: "small",
      testId: "errored-view-default-icon"
    });
  }
  if (fg('platform-smart-card-icon-migration')) {
    return /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: styles.iconWrapper
    }, /*#__PURE__*/React.createElement(ErrorIcon, {
      color: "var(--ds-icon-danger, #C9372C)",
      label: "error",
      LEGACY_size: "small",
      testId: "errored-view-default-icon"
    }));
  }
  return /*#__PURE__*/React.createElement(AKIconWrapper, null, /*#__PURE__*/React.createElement(ErrorIcon, {
    label: "error",
    LEGACY_size: "small",
    color: `var(--ds-icon-danger, ${R300})`,
    testId: "errored-view-default-icon"
  }));
};
export const InlineCardErroredView = ({
  url,
  onClick,
  isSelected,
  testId = 'inline-card-errored-view',
  icon,
  message,
  onRetry,
  truncateInline,
  showHoverPreview
}) => {
  const frameRef = React.useRef(null);
  const hashAction = !!onRetry;
  const handleRetry = React.useCallback(event => {
    if (onRetry) {
      event.preventDefault();
      event.stopPropagation();
      onRetry();
    }
  }, [onRetry]);
  const renderActionButton = React.useCallback(() => {
    const Button = withFrameStyleControl(ButtonOld, frameRef);
    return onRetry && (fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(ActionButton, {
      onClick: handleRetry
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.try_again)) : /*#__PURE__*/React.createElement(Button, {
      spacing: "none",
      component: IconStyledButtonOldVisualRefresh,
      onClick: handleRetry,
      role: "button"
    }, /*#__PURE__*/React.createElement(FormattedMessage, messages.try_again)));
  }, [handleRetry, onRetry]);
  const content = fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Frame, {
    link: hashAction ? undefined : url,
    onClick: hashAction ? undefined : onClick,
    isSelected: isSelected,
    ref: frameRef,
    testId: testId,
    truncateInline: truncateInline
  }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
    icon: icon || fallbackIcon(),
    link: hashAction ? url : undefined,
    title: url,
    onClick: hashAction ? onClick : undefined,
    rightSide: message
  }), renderActionButton()) : /*#__PURE__*/React.createElement(Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
    icon: icon || fallbackIcon(),
    link: url,
    title: url,
    onClick: onClick,
    rightSide: message
  }), renderActionButton());
  if (showHoverPreview) {
    return /*#__PURE__*/React.createElement(HoverCard, {
      url: url
    }, content);
  }
  return content;
};