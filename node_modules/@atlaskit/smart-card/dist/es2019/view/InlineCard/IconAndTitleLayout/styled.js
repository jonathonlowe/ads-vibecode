/* styled.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./styled.compiled.css";
import { forwardRef } from 'react';
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
// Wraps all icons represented in Inline Links. Icons have three sources/types:
// - JSON-LD: from the generator.icon property coming back from ORS.
// - @atlaskit/icon: for lock icons, unauthorized, etc.
// - @atlaskit/icon-object: for object icons, e.g. repository, branch, etc.
// NB: the first set of overrides style icons imported from @atlaskit/icon-object correctly.
// NB: the second set of overrides style icons imported from @atlaskit/icon correctly.
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766

// TODO: remove this override behaviour for @atlaskit/icon-object
const IconObjectOverrides = `
  & > span {
    height: 16px;
    width: 16px;
    position: absolute;
    top: 3px;
    left: 0;
    & > svg {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
`;

// TODO: remove this override behaviour for @atlaskit/icon
const IconOverrides = `
  & > * > span {
    height: 16px;
    width: 16px;
    position: absolute;
    left: 0;
    & > svg {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
`;

// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
export const IconWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_uiztglyw _17047vkz _iibf7vkz _lacastnw _1yg7idpf _15x0stnw _k9fw1ssb _1tr81ssb _q3v31ooe _1f027vkz _nbgx7vkz _4d7tstnw _o5fv1l7b _3g5ridpf _1fqgstnw _d1gw1ssb _1gx11ssb _18lx1ooe", __cmplp.className])
  }));
});

// Wraps all emoji in Inline Links similar to icon
// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  IconWrapperOldVisualRefresh.displayName = 'IconWrapperOldVisualRefresh';
}
export const EmojiWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1o8l _2hwxv77o _uiztglyw _17047vkz _iibf7vkz _lacastnw _1yg7idpf _15x0stnw _k9fw1ssb _1tr81ssb _q3v31ooe _1f027vkz _nbgx7vkz _4d7tstnw _o5fv1l7b _3g5ridpf _1fqgstnw _d1gw1ssb _1gx11ssb _18lx1ooe", __cmplp.className])
  }));
});

// The main 'wrapping' element, title of the content.
// NB: `white-space` adds little whitespace before wrapping.
// NB: `word-break` line breaks as soon as an overflow takes place.
// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  EmojiWrapperOldVisualRefresh.displayName = 'EmojiWrapperOldVisualRefresh';
}
export const IconTitleWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_o5721jtm _1nmz9jpi _16d9qvcn _ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", __cmplp.className])
  }));
});

// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  IconTitleWrapperOldVisualRefresh.displayName = 'IconTitleWrapperOldVisualRefresh';
}
export const LozengeWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1o8l _s7n4t94y _19pkidpf _2hwx1b66 _otyridpf _18u0v77o", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  LozengeWrapperOldVisualRefresh.displayName = 'LozengeWrapperOldVisualRefresh';
}
export const RightIconPositionWrapper = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_18u0v77o _kqswh2mm _1e0c1o8l", __cmplp.className])
  }));
});

// The following components are used to absolutely position icons in the vertical center.
// - IconPositionWrapper: the `relative` parent which has no height in itself.
// - IconEmptyWrapper: the child which forces `IconPositionWrapper` to have a height.
// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  RightIconPositionWrapper.displayName = 'RightIconPositionWrapper';
}
export const IconPositionWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_2hwx1b66 _kqswh2mm _1e0c1o8l", __cmplp.className])
  }));
});

// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  IconPositionWrapperOldVisualRefresh.displayName = 'IconPositionWrapperOldVisualRefresh';
}
export const IconEmptyWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1bsb7vkz _4t3i1osq _1e0c1o8l _tzy4idpf", __cmplp.className])
  }));
});

// With emotion it's not possible to use reference to `TitleWrapper` as part of a selector,
// TODO Delete when cleaning platform-linking-visual-refresh-v1
// To achieve same result we use classname instead.
if (process.env.NODE_ENV !== 'production') {
  IconEmptyWrapperOldVisualRefresh.displayName = 'IconEmptyWrapperOldVisualRefresh';
}
export const TitleWrapperClassNameOldVisualRefresh = 'smart-link-title-wrapper';

// TODO Delete when cleaning platform-linking-visual-refresh-v1
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled, @atlaskit/ui-styling-standard/no-exported-styles, @atlaskit/design-system/no-empty-styled-expression -- Ignored via go/DSP-18766
export const TitleWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  TitleWrapperOldVisualRefresh.displayName = 'TitleWrapperOldVisualRefresh';
}