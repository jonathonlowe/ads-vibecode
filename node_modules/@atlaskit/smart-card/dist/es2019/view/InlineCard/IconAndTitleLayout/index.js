/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { forwardRef } from 'react';
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { di } from 'react-magnetic-di';
import ImageLoader from 'react-render-image';
import LinkIcon from '@atlaskit/icon/core/migration/link';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { B400, N200 } from '@atlaskit/theme/colors';
import { Icon, Shimmer } from '../Icon';
import { EmojiWrapperOldVisualRefresh, IconEmptyWrapperOldVisualRefresh, IconPositionWrapperOldVisualRefresh, IconWrapperOldVisualRefresh, TitleWrapperClassNameOldVisualRefresh } from './styled';
const iconWrapperStyle = null;
const iconImageStyle = null;
const styles = {
  iconEmptyStyle: "_1bsb7vkz _4t3i1osq _1e0c1o8l _tzy4idpf",
  iconOuterWrapperStyle: "_1e0c1o8l _2hwx1b66 _kqswh2mm",
  iconTitleWrapperStyle: "_o5721jtm _1nmz9jpi _16d9qvcn _ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66",
  linkStyle: "_2rkogqwt",
  noLinkAppearanceStyle: "_syaz131l _18u01b66"
};
// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- Ignored via go/DSP-18766
const NoLinkAppearanceOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_syaz1wmz _18u01b66", __cmplp.className])
  }));
});

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled -- Ignored via go/DSP-18766
if (process.env.NODE_ENV !== 'production') {
  NoLinkAppearanceOldVisualRefresh.displayName = 'NoLinkAppearanceOldVisualRefresh';
}
const LinkAppearance = forwardRef(({
  as: C = "a",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_syaz1y58 _9oik1r31 _1bnxglyw _jf4cnqa1", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  LinkAppearance.displayName = 'LinkAppearance';
}
export const IconAndTitleLayout = ({
  icon,
  emoji,
  defaultIcon,
  onClick,
  children,
  title,
  titleColor,
  titleTextColor,
  link,
  rightSide,
  testId = 'inline-card-icon-and-title'
}) => {
  const renderAtlaskitIcon = React.useCallback(() => {
    if (emoji) {
      if (fg('platform-linking-visual-refresh-v1')) {
        return emoji;
      }
      return /*#__PURE__*/React.createElement(EmojiWrapperOldVisualRefresh, null, emoji);
    }
    if (!icon || typeof icon === 'string') {
      return null;
    }
    if (fg('platform-linking-visual-refresh-v1')) {
      return icon;
    }
    return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, icon);
  }, [emoji, icon]);
  const renderImageIcon = React.useCallback((errored, testId) => {
    if (!icon || typeof icon !== 'string') {
      return null;
    }
    if (fg('platform-linking-visual-refresh-v1')) {
      return /*#__PURE__*/React.createElement(ImageLoader, {
        src: icon,
        loaded: /*#__PURE__*/React.createElement("img", {
          src: icon,
          "data-testid": `${testId}-image`,
          alt: "",
          className: ax(["_c71l7vkz _p12f7vkz _1bsb1osq"])
        }),
        errored: errored,
        loading: /*#__PURE__*/React.createElement(Shimmer, {
          testId: `${testId}-loading`
        })
      });
    }
    return /*#__PURE__*/React.createElement(ImageLoader, {
      src: icon,
      loaded:
      /*#__PURE__*/
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
      React.createElement(Icon, {
        className: "smart-link-icon",
        src: icon,
        "data-testid": `${testId}-image`,
        alt: ""
      }),
      errored: errored,
      loading: /*#__PURE__*/React.createElement(Shimmer, {
        testId: `${testId}-loading`
      })
    });
  }, [icon]);
  const renderIconPlaceholder = React.useCallback(testId => {
    if (fg('platform-linking-visual-refresh-v1')) {
      return defaultIcon || /*#__PURE__*/React.createElement(LinkIcon, {
        label: "link",
        LEGACY_size: "small",
        testId: `${testId}-default`,
        color: "currentColor"
      });
    }
    if (defaultIcon) {
      return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, defaultIcon);
    }
    return /*#__PURE__*/React.createElement(IconWrapperOldVisualRefresh, null, /*#__PURE__*/React.createElement(LinkIcon, {
      label: "link",
      LEGACY_size: "small",
      testId: `${testId}-default`,
      color: "currentColor"
    }));
  }, [defaultIcon]);
  const renderIcon = React.useCallback(testId => {
    const icon = renderAtlaskitIcon();
    if (icon) {
      return icon;
    }
    const placeholder = renderIconPlaceholder(testId);
    const image = renderImageIcon(placeholder, testId);
    return image || placeholder;
  }, [renderAtlaskitIcon, renderIconPlaceholder, renderImageIcon]);
  const handleClick = React.useCallback(event => {
    if (onClick) {
      event.preventDefault();
      event.stopPropagation();
      onClick(event);
    }
  }, [onClick]);
  const handleKeyPress = React.useCallback(event => {
    if (event.key !== ' ' && event.key !== 'Enter') {
      return;
    }
    if (onClick) {
      event.preventDefault();
      event.stopPropagation();
      onClick(event);
    }
  }, [onClick]);

  // maybe consider memoising this after clean up
  const titlePart = /*#__PURE__*/React.createElement(React.Fragment, null, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Box, {
    as: "span"
    // EDM-12119: This is set here to help with the positioning of the icon to be in the middle of inline display.
    // We cannot set the fix font because inline is taking the parent container font size into account.
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    ,
    style: {
      lineHeight: `1`
    },
    xcss: styles.iconOuterWrapperStyle,
    testId: "icon-position-wrapper"
  }, children || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: styles.iconEmptyStyle,
    testId: "icon-empty-wrapper"
  }), /*#__PURE__*/React.createElement("span", {
    "data-testId": "icon-wrapper",
    className: ax(["_11c81o8v _2rkoyh40 _1e0c116y _kqswstnw _2hwx1b66 _4t3i7vkz _1bsb7vkz _154i1ssb _1ltv1ssb _t9ec1ooe _uiztglyw"])
  }, renderIcon(testId)))) : /*#__PURE__*/React.createElement(IconPositionWrapperOldVisualRefresh, {
    "data-testid": "icon-position-wrapper"
  }, children || /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconEmptyWrapperOldVisualRefresh, {
    "data-testid": "icon-empty-wrapper"
  }), renderIcon(testId))), fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(Box, {
    as: "span",
    style: {
      color: titleTextColor
    }
  }, title) : /*#__PURE__*/React.createElement("span", {
    style: {
      color: titleTextColor
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: TitleWrapperClassNameOldVisualRefresh
  }, title));
  return /*#__PURE__*/React.createElement(React.Fragment, null, fg('platform-linking-visual-refresh-v1') ? /*#__PURE__*/React.createElement(IconTitleWrapper, {
    style: {
      color: titleColor
    },
    testId: testId
  }, link ? /*#__PURE__*/React.createElement(LinkAppearance, {
    href: link,
    onClick: handleClick,
    onKeyPress: handleKeyPress,
    className: ax([styles.linkStyle])
  }, titlePart) : titlePart, rightSide ? /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: styles.noLinkAppearanceStyle
  }, rightSide) : null) : /*#__PURE__*/React.createElement(IconTitleWrapperOldVisualRefresh, {
    style: {
      color: titleColor
    },
    "data-testid": testId
  }, link ? /*#__PURE__*/React.createElement(LinkAppearance, {
    href: link,
    onClick: handleClick,
    onKeyPress: handleKeyPress
  }, titlePart) : titlePart, rightSide ? /*#__PURE__*/React.createElement(NoLinkAppearanceOldVisualRefresh, null, rightSide) : null));
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const IconTitleWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_o5721jtm _1nmz9jpi _16d9qvcn _ca0qv77o _u5f31b66 _n3tdv77o _19bv1b66", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  IconTitleWrapperOldVisualRefresh.displayName = 'IconTitleWrapperOldVisualRefresh';
}
export const IconTitleWrapper = props => {
  if (fg('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/React.createElement(Box, _extends({
      as: "span",
      xcss: styles.iconTitleWrapperStyle
    }, props));
  }
  // note: This is just to get the types to work due to compiled css weirdness.
  return /*#__PURE__*/React.createElement(IconTitleWrapperOldVisualRefresh, props);
};

// eslint-disable-next-line @atlaskit/ui-styling-standard/no-styled
const LozengeWrapperOldVisualRefresh = forwardRef(({
  as: C = "span",
  style: __cmpls,
  ...__cmplp
}, __cmplr) => {
  return /*#__PURE__*/React.createElement(C, _extends({}, __cmplp, {
    style: __cmpls,
    ref: __cmplr,
    className: ax(["_1e0c1o8l _s7n4t94y _19pkidpf _2hwx1b66 _otyridpf _18u0v77o", __cmplp.className])
  }));
});
if (process.env.NODE_ENV !== 'production') {
  LozengeWrapperOldVisualRefresh.displayName = 'LozengeWrapperOldVisualRefresh';
}
export const LozengeWrapper = props => {
  // note: This is just to get the types to work due to compiled css weirdness.
  return /*#__PURE__*/React.createElement(LozengeWrapperOldVisualRefresh, props);
};