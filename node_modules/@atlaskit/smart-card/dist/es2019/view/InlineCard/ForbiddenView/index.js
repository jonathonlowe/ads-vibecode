/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React from 'react';
import { FormattedMessage } from 'react-intl-next';
import ButtonOld from '@atlaskit/button';
import LockLockedIcon from '@atlaskit/icon/core/lock-locked';
import LegacyLockIcon from '@atlaskit/icon/glyph/lock-filled';
import Lozenge from '@atlaskit/lozenge';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box, Pressable } from '@atlaskit/primitives/compiled';
import { N500, R400 } from '@atlaskit/theme/colors';
import { messages } from '../../../messages';
import { HoverCard } from '../../HoverCard';
import { ActionButton } from '../common/action-button';
import { Frame } from '../Frame';
import { AKIconWrapper } from '../Icon';
import { IconAndTitleLayout, LozengeWrapper } from '../IconAndTitleLayout';
import { IconStyledButtonOldVisualRefresh } from '../styled';
import withFrameStyleControl from '../utils/withFrameStyleControl';
const styles = {
  iconWrapper: "_2hwx1i6y _1e0cbu77",
  actionButtonLozengeStyle: "_2rkogqwt _bfhksm61 _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t"
};
const fallbackForbiddenIcon = () => {
  if (fg('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/React.createElement(LockLockedIcon, {
      label: "error",
      color: "var(--ds-icon-danger, #C9372C)",
      LEGACY_fallbackIcon: LegacyLockIcon,
      LEGACY_size: "small",
      testId: "forbidden-view-fallback-icon"
    });
  }
  return fg('platform-smart-card-icon-migration') ? /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: styles.iconWrapper
  }, /*#__PURE__*/React.createElement(LockLockedIcon, {
    label: "error",
    color: "var(--ds-icon-danger, #C9372C)",
    LEGACY_fallbackIcon: LegacyLockIcon,
    LEGACY_size: "small",
    testId: "forbidden-view-fallback-icon"
  })) : /*#__PURE__*/React.createElement(AKIconWrapper, null, /*#__PURE__*/React.createElement(LegacyLockIcon, {
    label: "error",
    size: "small",
    primaryColor: `var(--ds-icon-danger, ${R400})`,
    testId: "forbidden-view-fallback-icon"
  }));
};
export const InlineCardForbiddenView = ({
  url,
  icon,
  onClick,
  isSelected,
  testId = 'inline-card-forbidden-view',
  truncateInline,
  requestAccessContext,
  onAuthorise,
  context,
  showHoverPreview
}) => {
  const frameRef = React.useRef(null);
  const [hasRequestAccessContextMessage] = React.useState(!!(requestAccessContext !== null && requestAccessContext !== void 0 && requestAccessContext.callToActionMessageKey));
  const handleRetry = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    if (onAuthorise) {
      onAuthorise();
    } else {
      var _requestAccessContext;
      requestAccessContext === null || requestAccessContext === void 0 ? void 0 : (_requestAccessContext = requestAccessContext.action) === null || _requestAccessContext === void 0 ? void 0 : _requestAccessContext.promise();
    }
  }, [onAuthorise, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.action]);
  const renderForbiddenAccessMessage = React.useCallback(() => {
    if (requestAccessContext !== null && requestAccessContext !== void 0 && requestAccessContext.callToActionMessageKey) {
      const {
        callToActionMessageKey
      } = requestAccessContext;
      return /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages[callToActionMessageKey], {
        values: {
          product: context
        }
      }));
    }
    return /*#__PURE__*/React.createElement(FormattedMessage, messages.invalid_permissions, formattedMessage => /*#__PURE__*/React.createElement(React.Fragment, null, formattedMessage));
  }, [context, requestAccessContext]);
  const renderActionButton = React.useCallback(() => {
    const Button = withFrameStyleControl(ButtonOld, frameRef);
    const accessType = requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.accessType;
    if (hasRequestAccessContextMessage) {
      if (fg('platform-linking-visual-refresh-v1')) {
        const isDisabled = accessType === 'PENDING_REQUEST_EXISTS';
        return /*#__PURE__*/React.createElement(ActionButton, {
          isDisabled: isDisabled,
          onClick: handleRetry,
          testId: "button-connect-other-account"
        }, renderForbiddenAccessMessage());
      }
      return /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        onClick: handleRetry,
        component: IconStyledButtonOldVisualRefresh,
        testId: "button-connect-other-account",
        role: "button",
        isDisabled: accessType === 'PENDING_REQUEST_EXISTS'
      }, renderForbiddenAccessMessage());
    }
    if (onAuthorise) {
      if (fg('platform-linking-visual-refresh-v1')) {
        return /*#__PURE__*/React.createElement(LozengeWrapper, null, /*#__PURE__*/React.createElement(Pressable, {
          xcss: styles.actionButtonLozengeStyle,
          onClick: handleRetry,
          testId: "button-connect-other-account"
        }, /*#__PURE__*/React.createElement(Lozenge, _extends({
          appearance: "moved"
        }, fg('platform-component-visual-refresh') ? {
          isBold: true
        } : undefined), renderForbiddenAccessMessage())));
      }
      return /*#__PURE__*/React.createElement(Button, {
        spacing: "none",
        onClick: handleRetry,
        appearance: "subtle-link",
        testId: "button-connect-other-account",
        role: "button"
      }, /*#__PURE__*/React.createElement(LozengeWrapper, null, /*#__PURE__*/React.createElement(Lozenge, _extends({
        appearance: 'moved'
      }, fg('platform-component-visual-refresh') ? {
        isBold: true
      } : undefined), renderForbiddenAccessMessage())));
    }
    return null;
  }, [handleRetry, hasRequestAccessContextMessage, onAuthorise, renderForbiddenAccessMessage, requestAccessContext === null || requestAccessContext === void 0 ? void 0 : requestAccessContext.accessType]);
  const content = /*#__PURE__*/React.createElement(Frame, {
    testId: testId,
    isSelected: isSelected,
    ref: frameRef,
    truncateInline: truncateInline
  }, /*#__PURE__*/React.createElement(IconAndTitleLayout, {
    icon: icon ? icon : fallbackForbiddenIcon(),
    link: url,
    title: url,
    onClick: onClick,
    titleColor: `var(--ds-text-subtle, ${N500})`
  }), renderActionButton());
  if (showHoverPreview) {
    return /*#__PURE__*/React.createElement(HoverCard, {
      url: url
    }, content);
  }
  return content;
};