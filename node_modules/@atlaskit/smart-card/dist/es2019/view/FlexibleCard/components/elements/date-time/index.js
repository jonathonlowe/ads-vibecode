/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { selectUnit } from '@formatjs/intl-utils';
import { FormattedMessage, useIntl } from 'react-intl-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { messages } from '../../../../../messages';
// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
const stylesOld = null;
const styles = null;
const typeToDescriptorMap = {
  created: {
    relative: messages.created_on_relative,
    absolute: messages.created_on_absolute
  },
  modified: {
    relative: messages.modified_on_relative,
    absolute: messages.modified_on_absolute
  },
  sent: {
    relative: messages.sent_on_relative,
    absolute: messages.sent_on_absolute
  }
};

/**
 * A base element that displays an ISO Timestamp in text.
 * @internal
 * @param {DateTimeProps} DateTimeProps - The props necessary for the DateTime element.
 * @see CreatedOn
 * @see ModifiedOn
 * @see SentOn
 */
const DateTime = ({
  date,
  name,
  className,
  type,
  testId = 'smart-element-date-time',
  text
}) => {
  const {
    formatRelativeTime,
    formatDate
  } = useIntl();
  if (!type || !date) {
    return null;
  }
  const isLongerThenWeek = Math.abs(date.getTime() - Date.now()) > 1000 * 60 * 60 * 24 * 7;
  let context;
  let typeVariant;
  if (isLongerThenWeek) {
    typeVariant = 'absolute';
    context = formatDate(date, {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  } else {
    const {
      value,
      unit
    } = selectUnit(date, Date.now());
    typeVariant = 'relative';
    context = formatRelativeTime(value, unit, {
      numeric: 'auto'
    });
  }
  return /*#__PURE__*/React.createElement("span", {
    "data-separator": true,
    "data-smart-element": name,
    "data-smart-element-date-time": true,
    "data-testid": testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: ax([!fg('platform-linking-visual-refresh-v1') && "_11c8dcr7 _1reo15vq _18m915vq _syaz131l _1e0ccj1k _1bto1l2s _1nmz1hna _1yyjkb7n _sudp1e54 _102k1j6v", fg('platform-linking-visual-refresh-v1') && "_11c81o8v _1reo15vq _18m915vq _syaz1gjq _1e0ccj1k _1ul9idpf _1bto1l2s _1nmz1hna _1yyjkb7n _sudp1e54 _102k7vkz", className])
  }, text ? `${text} ${context}` : /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, typeToDescriptorMap[type][typeVariant], {
    values: {
      context
    }
  })));
};
export default DateTime;