// This is another layer on top of the AFE ManualRulesContainer.
// It is necessary that this container wraps the entire "automation" component and not nested. Else the user input form will not render correctly.
// This container provides an automation context to all children components through the useAutomationMenu hook.
import React, { createContext, useContext, useState } from 'react';
import { ManualRulesContainer } from '../../manual-triggers-container';
const AutomationMenuContext = /*#__PURE__*/createContext(undefined);
const AutomationMenuProvider = ({
  children,
  value
}) => {
  return /*#__PURE__*/React.createElement(AutomationMenuContext.Provider, {
    value: value
  }, children);
};

// Hook that can be used anywhere under the AutomationMenuContextContainer to access the AutomationMenuContext values
export const useAutomationMenu = () => {
  const context = useContext(AutomationMenuContext);
  if (context === undefined) {
    throw new Error('useAutomationMenu must be used within a AutomationMenuProvider');
  }
  return context;
};
export const AutomationMenuContextContainer = ({
  baseAutomationUrl,
  analyticsSource,
  objectAri,
  siteAri,
  canManageAutomation,
  children,
  emptyStateDescription,
  emptyStateAdminDescription,
  onRuleInvocationSuccess,
  onRuleInvocationFailure,
  onRuleInvocationLifecycleDone
}) => {
  const [ruleExecutionState, setRuleExecutionState] = useState('NONE');
  return /*#__PURE__*/React.createElement(ManualRulesContainer, {
    site: siteAri,
    query: {
      objects: [objectAri]
    },
    onRuleInvocationLifecycleStarted: () => {
      setRuleExecutionState('NONE');
    },
    onRuleInvocationLifecycleDone: onRuleInvocationLifecycleDone,
    onRuleInvocationSuccess: () => {
      setRuleExecutionState('SUCCEED');
      onRuleInvocationSuccess === null || onRuleInvocationSuccess === void 0 ? void 0 : onRuleInvocationSuccess();
    },
    onRuleInvocationFailure: () => {
      setRuleExecutionState('FAILURE');
      onRuleInvocationFailure === null || onRuleInvocationFailure === void 0 ? void 0 : onRuleInvocationFailure();
    }
  }, props => {
    const contextValue = {
      ...props,
      fetchError: props.error,
      analyticsSource,
      objectAri,
      baseAutomationUrl,
      canManageAutomation,
      emptyStateDescription,
      emptyStateAdminDescription,
      ruleExecutionState
    };
    return /*#__PURE__*/React.createElement(AutomationMenuProvider, {
      value: contextValue
    }, children());
  });
};