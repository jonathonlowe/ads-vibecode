/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useMemo } from 'react';
import { useIntl } from 'react-intl-next';
import AtlaskitAvatarGroup from '@atlaskit/avatar-group';
import { fg } from '@atlaskit/platform-feature-flags';
import { ElementName, SmartLinkSize } from '../../../../../constants';
import { messages } from '../../../../../messages';
import { getFormattedMessageAsString } from '../../utils';
const MAX_COUNT = 4;
const styles = null;
const stylesMap = {
  xlarge: "_1e0c116y _1kvxu2gc _102oidpf",
  large: "_1e0c116y _1kvxu2gc _102oidpf",
  medium: "_1e0c116y _1kvxu2gc _102oidpf _6fu61k92 _1rrq1k92 _udwj1k92 _10pr1k92",
  small: "_1e0c116y _1kvxu2gc _102oidpf _6fu61k92 _1rrq1k92 _udwj1k92 _10pr1k92"
};
const getPersonNameWithPrefix = (elementName, personName, intl) => {
  switch (elementName) {
    case ElementName.AssignedToGroup:
      return getFormattedMessageAsString(intl, messages.assigned_to, personName);
    case ElementName.OwnedByGroup:
      return getFormattedMessageAsString(intl, messages.owned_by, personName);
    case ElementName.AuthorGroup:
      return getFormattedMessageAsString(intl, messages.created_by, personName);
    default:
      return personName;
  }
};

/**
 * A base element that displays a group of avatars.
 * @internal
 * @param {AvatarGroupProps} AvatarGroupProps - The props necessary for the AvatarGroup.
 * @see AuthorGroup
 * @see CollaboratorGroup
 */
const AvatarGroup = ({
  items = [],
  maxCount = MAX_COUNT,
  name,
  className,
  size = SmartLinkSize.Medium,
  testId = 'smart-element-avatar-group',
  showNamePrefix = false,
  showFallbackAvatar = true
}) => {
  const intl = useIntl();
  const data = useMemo(() => {
    if (!items.length && showFallbackAvatar) {
      switch (name) {
        case ElementName.AssignedToGroup:
          return [{
            name: getFormattedMessageAsString(intl, messages.unassigned)
          }];
        default:
          return [];
      }
    }

    //show a name prefix if there is one Avatar in a group only
    if (name && items.length === 1 && showNamePrefix) {
      return items.map(person => {
        return {
          ...person,
          name: getPersonNameWithPrefix(name, person.name, intl) || person.name
        };
      });
    }
    return items;
  }, [name, items, showNamePrefix, showFallbackAvatar, intl]);
  if (!data.length) {
    return null;
  }
  return /*#__PURE__*/React.createElement("span", _extends({}, fg('platform-linking-visual-refresh-v1') ? {} : {
    ['data-fit-to-content']: true
  }, {
    "data-smart-element": name,
    "data-smart-element-avatar-group": true,
    "data-testid": testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: ax([stylesMap[size], fg('platform-linking-visual-refresh-v1') && "_1ul91ns9", className])
  }), /*#__PURE__*/React.createElement(AtlaskitAvatarGroup, {
    maxCount: maxCount,
    appearance: "stack",
    size: "small",
    data: data,
    testId: testId
  }));
};
export default AvatarGroup;