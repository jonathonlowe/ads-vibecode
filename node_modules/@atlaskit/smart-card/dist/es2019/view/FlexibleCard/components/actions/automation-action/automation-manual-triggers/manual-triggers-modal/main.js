import React, { useEffect, useState } from 'react';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import Modal, { ModalBody, ModalFooter } from '@atlaskit/modal-dialog';
import { AutomationMenuContextContainer } from './menu-context';
import { AutomationModalBody } from './sub-components/body';
import { AutomationModalExecutionState } from './sub-components/execution-state-message';
import { AutomationModalFooter } from './sub-components/footer';
import { AutomationModalHeader } from './sub-components/header';
export const AutomationModal = ({
  baseAutomationUrl,
  siteAri,
  objectAri,
  canManageAutomation,
  onClose,
  onCloseComplete,
  modalTitle,
  modalDescription,
  emptyStateDescription,
  emptyStateAdminDescription,
  analyticsSource
}) => {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const [selectedRule, setSelectedRule] = useState();
  useEffect(() => {
    createAnalyticsEvent({
      type: 'sendScreenEvent',
      data: {
        name: analyticsSource
      }
    }).fire();
  }, [createAnalyticsEvent, analyticsSource]);
  return /*#__PURE__*/React.createElement(AutomationMenuContextContainer, {
    baseAutomationUrl: baseAutomationUrl,
    objectAri: objectAri,
    siteAri: siteAri,
    canManageAutomation: canManageAutomation,
    analyticsSource: analyticsSource,
    emptyStateDescription: emptyStateDescription,
    emptyStateAdminDescription: emptyStateAdminDescription,
    onRuleInvocationSuccess: onClose,
    onRuleInvocationFailure: () => setSelectedRule(undefined)
  }, () => {
    return /*#__PURE__*/React.createElement(Modal, {
      onClose: onClose,
      onCloseComplete: onCloseComplete,
      width: 600,
      height: 480,
      testId: "smart-card-automation-action-modal"
    }, /*#__PURE__*/React.createElement(AutomationModalHeader, {
      modalTitle: modalTitle,
      modalDescription: modalDescription
    }), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(AutomationModalBody, {
      selectedRule: selectedRule,
      setSelectedRule: setSelectedRule
    })), /*#__PURE__*/React.createElement(AutomationModalExecutionState, null), /*#__PURE__*/React.createElement(ModalFooter, null, /*#__PURE__*/React.createElement(AutomationModalFooter, {
      selectedRule: selectedRule,
      onClose: onClose
    })));
  });
};