/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
/* eslint-disable @atlaskit/design-system/use-tokens-typography */

import React, { forwardRef } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { Box } from '@atlaskit/primitives/compiled';
import { IconType } from '../../../../../constants';
import { messages } from '../../../../../messages';
import AtlaskitIcon from '../../common/atlaskit-icon';
import ImageIcon from '../../common/image-icon';
import { withOverrideCss } from '../../common/with-override-css';
import { getFormattedMessage } from '../../utils';
const styles = {
  container: "_zulp1b66 _1e0c116y _4cvr1h6o _1ul91ns9",
  icon: "_1e0c116y _v4pn116y _1b94116y _1ii7116y _4t3i7vkz _bna77vkz _1xjx7vkz _17527vkz _ca0qze3t _14bqze3t _1oh2ze3t _i2i3ze3t _u5f3ze3t _3tceze3t _99ztze3t _uhasze3t _n3tdze3t _1ym6ze3t _1m2uze3t _5jw9ze3t _19bvze3t _1xr1ze3t _9n9oze3t _7wy9ze3t _1bsb7vkz _mezj7vkz _e2oo7vkz _w8l57vkz _s7n4nkob _rtqbnkob _e4kmnkob _z239nkob",
  text: "_11c81o8v"
};
const colorMap = {
  subtle: "_syaz131l",
  default: "_syaz1gjq"
};
const badgeStyles = null;
const iconStyles = null;

// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
const labelStylesOld = null;
const messageMapper = {
  [IconType.PriorityBlocker]: messages.priority_blocker,
  [IconType.PriorityCritical]: messages.priority_critical,
  [IconType.PriorityHigh]: messages.priority_high,
  [IconType.PriorityHighest]: messages.priority_highest,
  [IconType.PriorityLow]: messages.priority_low,
  [IconType.PriorityLowest]: messages.priority_lowest,
  [IconType.PriorityMajor]: messages.priority_major,
  [IconType.PriorityMedium]: messages.priority_medium,
  [IconType.PriorityMinor]: messages.priority_minor,
  [IconType.PriorityTrivial]: messages.priority_trivial,
  [IconType.PriorityUndefined]: messages.priority_undefined
};
const getFormattedMessageFromIcon = icon => {
  if (icon) {
    const descriptor = messageMapper[icon];
    if (descriptor) {
      return getFormattedMessage({
        descriptor
      });
    }
  }
};
const renderAtlaskitIcon = (icon, testId) => {
  if (icon) {
    return /*#__PURE__*/React.createElement(AtlaskitIcon, {
      icon: icon,
      label: icon,
      testId: `${testId}-icon`
    });
  }
};
const renderImageIcon = (url, testId) => {
  if (url) {
    return /*#__PURE__*/React.createElement(ImageIcon, {
      testId: testId,
      url: url
    });
  }
};

/**
 * A base element that displays some text with an associated icon.
 * @internal
 * @param {BadgeProps} BadgeProps - The props necessary for the Badge.
 * @see CommentCount
 * @see ViewCount
 * @see ReactCount
 * @see VoteCount
 * @see SubscriberCount
 * @see Priority
 * @see ProgrammingLanguage
 * @see Provider
 */
const BadgeRefreshNew = /*#__PURE__*/forwardRef(({
  appearance = 'default',
  hideIcon = false,
  icon,
  label,
  name,
  testId = 'smart-element-badge',
  url
}, ref) => {
  const formattedMessageOrLabel = getFormattedMessageFromIcon(icon) || label;
  const badgeIcon = renderAtlaskitIcon(icon, testId) || renderImageIcon(url, testId);
  if (!formattedMessageOrLabel || !badgeIcon) {
    return null;
  }
  return /*#__PURE__*/React.createElement("span", {
    "data-smart-element": name,
    "data-smart-element-badge": true,
    "data-testid": testId,
    ref: ref,
    className: ax([styles.container, colorMap[appearance]])
  }, !hideIcon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: styles.icon
  }, badgeIcon), /*#__PURE__*/React.createElement(Box, {
    as: "span",
    testId: `${testId}-label`,
    xcss: styles.text
  }, formattedMessageOrLabel));
});

// On cleanup of platform-linking-visual-refresh-v1, this should become
// export default withOverrideCss(Badge);
const BadgeRefreshNewWithOverrideCss = withOverrideCss(BadgeRefreshNew);

/**
 * A base element that displays some text with an associated icon.
 * @internal
 * @param {BadgeProps} BadgeProps - The props necessary for the Badge.
 * @see CommentCount
 * @see ViewCount
 * @see ReactCount
 * @see VoteCount
 * @see SubscriberCount
 * @see Priority
 * @see ProgrammingLanguage
 * @see Provider
 */
const BadgeCompiledNew = ({
  hideIcon = false,
  icon,
  label,
  name,
  className,
  testId = 'smart-element-badge',
  url
}) => {
  const formattedMessageOrLabel = getFormattedMessageFromIcon(icon) || label;
  const badgeIcon = renderAtlaskitIcon(icon, testId) || renderImageIcon(url, testId);
  if (!formattedMessageOrLabel || !badgeIcon) {
    return null;
  }
  return /*#__PURE__*/React.createElement("span", _extends({}, fg('platform-linking-visual-refresh-v1') ? {} : {
    ['data-fit-to-content']: true
  }, {
    "data-smart-element": name,
    "data-smart-element-badge": true,
    "data-testid": testId
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: ax(["_4cvr1h6o _1e0c116y _1ul91ns9", className])
  }), !hideIcon && /*#__PURE__*/React.createElement("span", {
    className: ax(["_16jlidpf _1o9zidpf _i0dl1wug _syaz1oju _vwz4idpf _s7n4nkob _4t3i1j6v _1tke1j6v _c71l1j6v _1bsb1j6v _1ul91j6v _p12f1j6v _i2i3idpf _uhasidpf _5jw9idpf _7wy9idpf _bna71j6v _1xjx1j6v _17521j6v _qci81j6v _15iz1j6v _erub1j6v _19l31j6v _1pr21j6v _1u5t1j6v _mezj1j6v _e2oo1j6v _w8l51j6v _1rg21j6v _q7cv1j6v _xwbj1j6v _rtys1j6v _b8nk1j6v _4x201j6v _1jtnidpf _13t3idpf _rm9uidpf _rtqbnkob _e4kmnkob _z239nkob"])
  }, badgeIcon), /*#__PURE__*/React.createElement("span", {
    "data-testid": `${testId}-label`,
    className: ax(["_11c8dcr7 _syaz131l _19bv1xvx _s7n4nkob"])
  }, formattedMessageOrLabel));
};
const Badge = props => {
  if (fg('platform-linking-visual-refresh-v1')) {
    return /*#__PURE__*/React.createElement(BadgeRefreshNewWithOverrideCss, props);
  } else {
    return /*#__PURE__*/React.createElement(BadgeCompiledNew, props);
  }
};
export default Badge;