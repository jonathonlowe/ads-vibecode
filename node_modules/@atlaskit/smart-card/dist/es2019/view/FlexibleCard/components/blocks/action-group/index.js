/* index.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./index.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
/* eslint-disable @atlaskit/ui-styling-standard/no-nested-selectors */

import { useCallback, useMemo, useState } from 'react';
import { FormattedMessage } from 'react-intl-next';
import { di } from 'react-magnetic-di';
import ButtonGroup from '@atlaskit/button/button-group';
import Button from '@atlaskit/button/standard-button';
import DropdownMenu from '@atlaskit/dropdown-menu';
import MoreIcon from '@atlaskit/icon/core/migration/show-more-horizontal--more';
import { fg } from '@atlaskit/platform-feature-flags';
import Tooltip from '@atlaskit/tooltip';
import { SmartLinkSize } from '../../../../../constants';
import { messages } from '../../../../../messages';
import { useFlexibleUiContext, useFlexibleUiOptionContext } from '../../../../../state/flexible-ui-context';
import { sizeToButtonSpacing } from '../../utils';
import { filterActionItems } from '../utils';
import ActionGroupItem from './action-group-item';
// TODO: Remove on fg cleanup: platform-linking-visual-refresh-v1
const stylesOld = null;
const styles = null;
const renderActionItems = (items = [], size = SmartLinkSize.Medium, appearance, asDropDownItems, onActionItemClick) => items.map((item, idx) => /*#__PURE__*/React.createElement(ActionGroupItem, {
  item: item,
  key: idx,
  size: size,
  appearance: appearance,
  asDropDownItems: asDropDownItems,
  onActionItemClick: onActionItemClick
}));

/**
 * Creates a group of Action components. Accepts an array of Actions, in addition to some styling
 * preferences.
 * @internal
 * @param {ActionGroupProps} ActionGroupProps
 * @see Action
 */
const ActionGroup = ({
  items = [],
  size = SmartLinkSize.Medium,
  appearance,
  visibleButtonsNum = 2,
  onDropdownOpenChange
}) => {
  const context = useFlexibleUiContext();
  const ui = useFlexibleUiOptionContext();
  const [isOpen, setIsOpen] = useState(false);
  const renderableActionItems = useMemo(() => filterActionItems(items, context), [context, items]);
  const isMoreThenTwoItems = renderableActionItems.length > visibleButtonsNum;
  const onOpenChange = useCallback(attrs => {
    setIsOpen(attrs.isOpen);
    if (onDropdownOpenChange) {
      onDropdownOpenChange(attrs.isOpen);
    }
  }, [onDropdownOpenChange]);
  const onActionItemClick = useCallback(() => {
    if (isOpen) {
      onOpenChange({
        isOpen: false
      });
    }
  }, [isOpen, onOpenChange]);
  const actionButtons = useMemo(() => {
    const actionItems = isMoreThenTwoItems ? renderableActionItems.slice(0, visibleButtonsNum - 1) : renderableActionItems;
    return renderActionItems(actionItems, size, appearance, false, onActionItemClick);
  }, [appearance, isMoreThenTwoItems, onActionItemClick, renderableActionItems, size, visibleButtonsNum]);
  const moreActionDropdown = useMemo(() => {
    const actionItems = isMoreThenTwoItems ? renderableActionItems.slice(visibleButtonsNum - 1) : [];
    if (actionItems.length > 0) {
      const spacing = sizeToButtonSpacing[size];
      const moreIcon = /*#__PURE__*/React.createElement(MoreIcon, {
        label: "more",
        color: "currentColor"
      });
      const formatMessage = /*#__PURE__*/React.createElement(FormattedMessage, messages.more_actions);
      return /*#__PURE__*/React.createElement(DropdownMenu, {
        isOpen: isOpen,
        onOpenChange: onOpenChange,
        trigger: ({
          triggerRef,
          ...props
        }) => /*#__PURE__*/React.createElement(Tooltip, {
          content: formatMessage,
          hideTooltipOnClick: true,
          testId: "action-group-more-button-tooltip",
          tag: "span"
        }, /*#__PURE__*/React.createElement(Button, _extends({}, props, {
          spacing: spacing,
          testId: "action-group-more-button",
          iconBefore: moreIcon,
          ref: triggerRef
        }))),
        testId: "action-group-dropdown",
        zIndex: ui === null || ui === void 0 ? void 0 : ui.zIndex
      }, renderActionItems(actionItems, size, appearance, true, onActionItemClick));
    }
    return null;
  }, [appearance, isMoreThenTwoItems, isOpen, onActionItemClick, onOpenChange, renderableActionItems, size, ui === null || ui === void 0 ? void 0 : ui.zIndex, visibleButtonsNum]);
  return renderableActionItems.length > 0 ? /*#__PURE__*/React.createElement("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax([!fg('platform-linking-visual-refresh-v1') && "_1e0c116y _vwz41j6v _dzc21h6o _1ilq1i6y", fg('platform-linking-visual-refresh-v1') && "_1e0c116y _dzc21h6o _1ilq1i6y", "actions-button-group"]),
    "data-action-open": isOpen
  }, /*#__PURE__*/React.createElement(ButtonGroup, null, actionButtons, moreActionDropdown)) : null;
};
export default ActionGroup;