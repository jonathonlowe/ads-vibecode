import React from 'react';
import { SafePlugin } from '@atlaskit/editor-common/safe-plugin';
import { redo, undo } from '@atlaskit/editor-prosemirror/history';
import { editorExperiment } from '@atlaskit/tmp-editor-statsig/experiments';
import { attachInputMeta } from './pm-plugins/attach-input-meta';
import { InputSource } from './pm-plugins/enums';
import { keymapPlugin } from './pm-plugins/keymaps';
import { createPlugin } from './pm-plugins/main';
import { forceFocus } from './pm-plugins/utils';
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default
import ToolbarUndoRedo from './ui/ToolbarUndoRedo';
export var undoRedoPlugin = function undoRedoPlugin(_ref) {
  var _api$primaryToolbar;
  var api = _ref.api;
  var editorViewRef = {
    current: null
  };
  var primaryToolbarComponent = function primaryToolbarComponent(_ref2) {
    var editorView = _ref2.editorView,
      disabled = _ref2.disabled,
      isToolbarReducedSpacing = _ref2.isToolbarReducedSpacing;
    return /*#__PURE__*/React.createElement(ToolbarUndoRedo, {
      isReducedSpacing: isToolbarReducedSpacing,
      disabled: disabled,
      editorView: editorView,
      api: api
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'undoRedoPlugin',
    component: primaryToolbarComponent
  });
  var handleUndo = function handleUndo(inputSource) {
    if (!editorViewRef.current) {
      return false;
    }
    return forceFocus(editorViewRef.current, api)(attachInputMeta(inputSource || InputSource.EXTERNAL)(undo));
  };
  var handleRedo = function handleRedo(inputSource) {
    if (!editorViewRef.current) {
      return false;
    }
    return forceFocus(editorViewRef.current, api)(attachInputMeta(inputSource || InputSource.EXTERNAL)(redo));
  };
  return {
    name: 'undoRedoPlugin',
    actions: {
      undo: handleUndo,
      redo: handleRedo
    },
    pmPlugins: function pmPlugins() {
      var plugins = [{
        name: 'undoRedoKeyMap',
        plugin: function plugin() {
          return keymapPlugin();
        }
      }, {
        name: 'undoRedoPlugin',
        plugin: function plugin(options) {
          return createPlugin(options);
        }
      }];
      if (editorExperiment('platform_editor_controls', 'variant1', {
        exposure: false
      })) {
        plugins.push({
          name: 'undoRedoGetEditorViewReferencePlugin',
          plugin: function plugin() {
            return new SafePlugin({
              view: function view(editorView) {
                editorViewRef.current = editorView;
                return {
                  destroy: function destroy() {
                    editorViewRef.current = null;
                  }
                };
              }
            });
          }
        });
      }
      return plugins;
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
};