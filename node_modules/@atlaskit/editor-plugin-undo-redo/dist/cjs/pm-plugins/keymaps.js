"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keymapPlugin = keymapPlugin;
var _keymaps = require("@atlaskit/editor-common/keymaps");
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _keymap = require("@atlaskit/editor-prosemirror/keymap");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _commands = require("./commands");
function keymapPlugin() {
  var list = {};

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)((0, _keymaps.findKeyMapForBrowser)(_keymaps.redo), _commands.redoFromKeyboard, list);
  if ((0, _platformFeatureFlags.fg)('platform_editor_cmd_y_mac_redo_shortcut')) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    (0, _keymaps.bindKeymapWithCommand)((0, _keymaps.findKeyMapForBrowser)(_keymaps.redoAlt), _commands.redoFromKeyboard, list);
  }

  // Ignored via go/ees005
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  (0, _keymaps.bindKeymapWithCommand)(_keymaps.undo.common, _commands.undoFromKeyboard, list);
  return new _safePlugin.SafePlugin({
    props: {
      handleKeyDown: function handleKeyDown(view, event) {
        var keyboardEvent = (0, _keymaps.isCapsLockOnAndModifyKeyboardEvent)(event);
        return (0, _keymap.keydownHandler)(list)(view, keyboardEvent);
      }
    }
  });
}