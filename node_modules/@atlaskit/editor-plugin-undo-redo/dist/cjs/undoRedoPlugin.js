"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undoRedoPlugin = void 0;
var _react = _interopRequireDefault(require("react"));
var _safePlugin = require("@atlaskit/editor-common/safe-plugin");
var _history = require("@atlaskit/editor-prosemirror/history");
var _experiments = require("@atlaskit/tmp-editor-statsig/experiments");
var _attachInputMeta = require("./pm-plugins/attach-input-meta");
var _enums = require("./pm-plugins/enums");
var _keymaps = require("./pm-plugins/keymaps");
var _main = require("./pm-plugins/main");
var _utils = require("./pm-plugins/utils");
var _ToolbarUndoRedo = _interopRequireDefault(require("./ui/ToolbarUndoRedo"));
// Ignored via go/ees005
// eslint-disable-next-line import/no-named-as-default

var undoRedoPlugin = exports.undoRedoPlugin = function undoRedoPlugin(_ref) {
  var _api$primaryToolbar;
  var api = _ref.api;
  var editorViewRef = {
    current: null
  };
  var primaryToolbarComponent = function primaryToolbarComponent(_ref2) {
    var editorView = _ref2.editorView,
      disabled = _ref2.disabled,
      isToolbarReducedSpacing = _ref2.isToolbarReducedSpacing;
    return /*#__PURE__*/_react.default.createElement(_ToolbarUndoRedo.default, {
      isReducedSpacing: isToolbarReducedSpacing,
      disabled: disabled,
      editorView: editorView,
      api: api
    });
  };
  api === null || api === void 0 || (_api$primaryToolbar = api.primaryToolbar) === null || _api$primaryToolbar === void 0 || _api$primaryToolbar.actions.registerComponent({
    name: 'undoRedoPlugin',
    component: primaryToolbarComponent
  });
  var handleUndo = function handleUndo(inputSource) {
    if (!editorViewRef.current) {
      return false;
    }
    return (0, _utils.forceFocus)(editorViewRef.current, api)((0, _attachInputMeta.attachInputMeta)(inputSource || _enums.InputSource.EXTERNAL)(_history.undo));
  };
  var handleRedo = function handleRedo(inputSource) {
    if (!editorViewRef.current) {
      return false;
    }
    return (0, _utils.forceFocus)(editorViewRef.current, api)((0, _attachInputMeta.attachInputMeta)(inputSource || _enums.InputSource.EXTERNAL)(_history.redo));
  };
  return {
    name: 'undoRedoPlugin',
    actions: {
      undo: handleUndo,
      redo: handleRedo
    },
    pmPlugins: function pmPlugins() {
      var plugins = [{
        name: 'undoRedoKeyMap',
        plugin: function plugin() {
          return (0, _keymaps.keymapPlugin)();
        }
      }, {
        name: 'undoRedoPlugin',
        plugin: function plugin(options) {
          return (0, _main.createPlugin)(options);
        }
      }];
      if ((0, _experiments.editorExperiment)('platform_editor_controls', 'variant1', {
        exposure: false
      })) {
        plugins.push({
          name: 'undoRedoGetEditorViewReferencePlugin',
          plugin: function plugin() {
            return new _safePlugin.SafePlugin({
              view: function view(editorView) {
                editorViewRef.current = editorView;
                return {
                  destroy: function destroy() {
                    editorViewRef.current = null;
                  }
                };
              }
            });
          }
        });
      }
      return plugins;
    },
    primaryToolbarComponent: !(api !== null && api !== void 0 && api.primaryToolbar) ? primaryToolbarComponent : undefined
  };
};