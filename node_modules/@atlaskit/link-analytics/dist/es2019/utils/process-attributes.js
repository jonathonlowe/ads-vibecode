import { normalizeUrl } from '@atlaskit/linking-common/url';
const getSourceEvent = payload => {
  const base = (payload.eventName ? [payload.eventName] : [payload.actionSubject, payload.action]).filter(Boolean);
  if (base.length) {
    const baseStr = base.join(' ');
    return payload.actionSubjectId ? `${baseStr} (${payload.actionSubjectId})` : baseStr;
  }
  if (payload['data'] && typeof payload['data'] === 'object') {
    return getSourceEvent({
      ...payload['data']
    });
  }
  return null;
};
const extractFromEventContext = (propertyNames, event) => {
  return event.context.reduce((acc, contextItem) => {
    propertyNames.forEach(propertyName => {
      const value = contextItem[propertyName];
      if (value) {
        acc.push(value);
      }
    });
    return acc;
  }, []);
};
const extractAttributesFromEvent = event => {
  var _event$payload$attrib;
  const contextAttributes = extractFromEventContext(['attributes'], event).reduce((result, extraAttributes) => {
    if (typeof extraAttributes === 'object' && extraAttributes !== null) {
      return {
        ...result,
        ...extraAttributes
      };
    }
    return result;
  }, {});
  return {
    ...contextAttributes,
    ...((_event$payload$attrib = event.payload.attributes) !== null && _event$payload$attrib !== void 0 ? _event$payload$attrib : {})
  };
};
const ACTION_INPUT_METHOD_NAME_MAP = {
  created: 'creationMethod',
  updated: 'updateMethod',
  deleted: 'deleteMethod'
};
const DEFAULT_ATTRIBUTES_MAP = {
  created: {
    sourceEvent: null,
    creationMethod: 'unknown'
  },
  updated: {
    sourceEvent: null,
    updateMethod: 'unknown'
  },
  deleted: {
    sourceEvent: null,
    deleteMethod: 'unknown'
  }
};

/**
 * Given an event, derive a set of attributes
 */
export const processAttributesFromBaseEvent = (action, event) => {
  const sourceEvent = getSourceEvent(event.payload);
  const [component] = extractFromEventContext(['component', 'componentName'], event);
  if (typeof component === 'string' && component.toLowerCase() === 'linkpicker') {
    const attribute = ACTION_INPUT_METHOD_NAME_MAP[action];
    const {
      linkFieldContentInputMethod: inputMethod
    } = extractAttributesFromEvent(event);
    return {
      sourceEvent,
      [attribute]: `linkpicker_${inputMethod !== null && inputMethod !== void 0 ? inputMethod : 'none'}`
    };
  }
  return {
    sourceEvent
  };
};
export const mergeAttributes = (action, details, event, attributes) => {
  const defaultAttributes = DEFAULT_ATTRIBUTES_MAP[action];
  const derivedAttributes = event ? processAttributesFromBaseEvent(action, event) : {};
  return {
    ...defaultAttributes,
    ...attributes,
    ...derivedAttributes,
    smartLinkId: details.smartLinkId
  };
};
export const getDomainFromUrl = url => {
  try {
    const normalizedUrl = normalizeUrl(url);
    if (!normalizedUrl) {
      return null;
    }
    return new URL(normalizedUrl).hostname;
  } catch {
    return null;
  }
};