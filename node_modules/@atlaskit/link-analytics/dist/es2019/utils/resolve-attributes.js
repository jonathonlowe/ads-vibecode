import { getResolvedAttributes } from './get-resolved-attributes';
const hasMessage = err => {
  return !!(typeof err === 'object' && err && 'message' in err);
};
const hasType = err => {
  return !!(typeof err === 'object' && err && 'type' in err);
};
const getLinkData = async ({
  url
}, client, store) => {
  var _store$getState$url;
  const cachedDetails = (_store$getState$url = store.getState()[url]) === null || _store$getState$url === void 0 ? void 0 : _store$getState$url.details;

  // fetch data if it's not already available in the store
  if (!cachedDetails) {
    try {
      const data = await client.fetchData(url);
      return [data];
    } catch (err) {
      if (hasType(err) && typeof err.type === 'string' && err.type === 'ResolveUnsupportedError') {
        return [, 'not_found'];
      }
      if (hasMessage(err) && typeof err.message === 'string' && err.message.includes('Invalid URL')) {
        return [, 'not_found'];
      }
      return [, 'errored'];
    }
  }
  return [cachedDetails];
};

/**
 * Resolves the attributes for a link using the link client and store
 */
export const resolveAttributes = async (linkDetails, client, store) => {
  const [linkData, status] = await getLinkData(linkDetails, client, store);
  return {
    ...getResolvedAttributes(linkDetails, linkData, status)
  };
};