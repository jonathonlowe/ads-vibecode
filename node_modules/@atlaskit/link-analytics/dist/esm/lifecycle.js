import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { useMemo } from 'react';
import { useAnalyticsEvents, createAndFireEvent } from '@atlaskit/analytics-next';
import { useSmartLinkContext } from '@atlaskit/link-provider';
import { EVENT_CHANNEL } from './common/utils/constants';
import createEventPayload from './common/utils/analytics/create-event-payload';
import { runWhenIdle } from './utils';
import { useDatasourceClientExtension } from '@atlaskit/link-client-extension';

/**
 * Exposes callbacks to fire analytics events for the lifecycle (create, update and deletion) of links
 * @returns An object containing the analytic lifecycle methods
 *
 * @example Link created Example
 *
 * ```ts
 * export const ExampleComponent = () => {
 *   const linkAnalytics = useSmartLinkLifecycleAnalytics();
 *
 *   const handleCreateLink = ({ url }) => {
 *     // ... do stuff
 *     // Call when a link is created
 *     linkAnalytics.linkCreated({ url })
 *   }
 *
 *   return (
 *     <SomeLinkCreatingComponent onCreateLink={handleCreateLink} />
 *   )
 * }
 * ```
 */
export var useSmartLinkLifecycleAnalytics = function useSmartLinkLifecycleAnalytics() {
  var _useAnalyticsEvents = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useSmartLinkContext = useSmartLinkContext(),
    store = _useSmartLinkContext.store,
    client = _useSmartLinkContext.connections.client;
  return useMemo(function () {
    var factory = function factory(action) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        try {
          runWhenIdle(function () {
            createAndFireEvent(EVENT_CHANNEL)(createEventPayload('operational.fireAnalyticEvent.commenced', {
              action: action
            }))(createAnalyticsEvent);
          });
          runWhenIdle( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            var _yield$import, fireEvent;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return import( /* webpackChunkName: "@atlaskit-internal_@atlaskit/link-analytics/fire-event" */'./fire-event');
                case 2:
                  _yield$import = _context.sent;
                  fireEvent = _yield$import.default;
                  fireEvent(action, createAnalyticsEvent, client, store).apply(void 0, args);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        } catch (error) {
          createAndFireEvent(EVENT_CHANNEL)(createEventPayload('operational.fireAnalyticEvent.failed', {
            error: error instanceof Error ? error.toString() : '',
            action: action
          }))(createAnalyticsEvent);
        }
      };
    };
    return {
      linkCreated: factory('created'),
      linkUpdated: factory('updated'),
      linkDeleted: factory('deleted')
    };
  }, [client, store, createAnalyticsEvent]);
};
export var useDatasourceLifecycleAnalytics = function useDatasourceLifecycleAnalytics() {
  var _useAnalyticsEvents2 = useAnalyticsEvents(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var _useDatasourceClientE = useDatasourceClientExtension(),
    getDatasourceData = _useDatasourceClientE.getDatasourceData;
  return useMemo(function () {
    var factory = function factory(action) {
      return function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        try {
          runWhenIdle(function () {
            createAndFireEvent(EVENT_CHANNEL)(createEventPayload('operational.fireAnalyticEvent.commenced', {
              action: action
            }))(createAnalyticsEvent);
          });
          runWhenIdle( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
            var _yield$import2, fireDatasourceEvent;
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return import( /* webpackChunkName: "@atlaskit-internal_@atlaskit/link-analytics/fire-event" */'./fire-event');
                case 2:
                  _yield$import2 = _context2.sent;
                  fireDatasourceEvent = _yield$import2.fireDatasourceEvent;
                  fireDatasourceEvent(action, createAnalyticsEvent, getDatasourceData).apply(void 0, args);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        } catch (error) {
          createAndFireEvent(EVENT_CHANNEL)(createEventPayload('operational.fireAnalyticEvent.failed', {
            error: error instanceof Error ? error.toString() : '',
            action: action
          }))(createAnalyticsEvent);
        }
      };
    };
    return {
      datasourceCreated: factory('created'),
      datasourceUpdated: factory('updated'),
      datasourceDeleted: factory('deleted')
    };
  }, [createAnalyticsEvent, getDatasourceData]);
};