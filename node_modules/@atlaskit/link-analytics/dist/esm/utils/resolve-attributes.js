import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _typeof from "@babel/runtime/helpers/typeof";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getResolvedAttributes } from './get-resolved-attributes';
var hasMessage = function hasMessage(err) {
  return !!(_typeof(err) === 'object' && err && 'message' in err);
};
var hasType = function hasType(err) {
  return !!(_typeof(err) === 'object' && err && 'type' in err);
};
var getLinkData = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, client, store) {
    var _store$getState$url;
    var url, cachedDetails, data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          url = _ref.url;
          cachedDetails = (_store$getState$url = store.getState()[url]) === null || _store$getState$url === void 0 ? void 0 : _store$getState$url.details; // fetch data if it's not already available in the store
          if (cachedDetails) {
            _context.next = 17;
            break;
          }
          _context.prev = 3;
          _context.next = 6;
          return client.fetchData(url);
        case 6:
          data = _context.sent;
          return _context.abrupt("return", [data]);
        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](3);
          if (!(hasType(_context.t0) && typeof _context.t0.type === 'string' && _context.t0.type === 'ResolveUnsupportedError')) {
            _context.next = 14;
            break;
          }
          return _context.abrupt("return", [, 'not_found']);
        case 14:
          if (!(hasMessage(_context.t0) && typeof _context.t0.message === 'string' && _context.t0.message.includes('Invalid URL'))) {
            _context.next = 16;
            break;
          }
          return _context.abrupt("return", [, 'not_found']);
        case 16:
          return _context.abrupt("return", [, 'errored']);
        case 17:
          return _context.abrupt("return", [cachedDetails]);
        case 18:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[3, 10]]);
  }));
  return function getLinkData(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Resolves the attributes for a link using the link client and store
 */
export var resolveAttributes = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(linkDetails, client, store) {
    var _yield$getLinkData, _yield$getLinkData2, linkData, status;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return getLinkData(linkDetails, client, store);
        case 2:
          _yield$getLinkData = _context2.sent;
          _yield$getLinkData2 = _slicedToArray(_yield$getLinkData, 2);
          linkData = _yield$getLinkData2[0];
          status = _yield$getLinkData2[1];
          return _context2.abrupt("return", _objectSpread({}, getResolvedAttributes(linkDetails, linkData, status)));
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function resolveAttributes(_x4, _x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();