import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _typeof from "@babel/runtime/helpers/typeof";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { normalizeUrl } from '@atlaskit/linking-common/url';
var _getSourceEvent = function getSourceEvent(payload) {
  var base = (payload.eventName ? [payload.eventName] : [payload.actionSubject, payload.action]).filter(Boolean);
  if (base.length) {
    var baseStr = base.join(' ');
    return payload.actionSubjectId ? "".concat(baseStr, " (").concat(payload.actionSubjectId, ")") : baseStr;
  }
  if (payload['data'] && _typeof(payload['data']) === 'object') {
    return _getSourceEvent(_objectSpread({}, payload['data']));
  }
  return null;
};
var extractFromEventContext = function extractFromEventContext(propertyNames, event) {
  return event.context.reduce(function (acc, contextItem) {
    propertyNames.forEach(function (propertyName) {
      var value = contextItem[propertyName];
      if (value) {
        acc.push(value);
      }
    });
    return acc;
  }, []);
};
var extractAttributesFromEvent = function extractAttributesFromEvent(event) {
  var _event$payload$attrib;
  var contextAttributes = extractFromEventContext(['attributes'], event).reduce(function (result, extraAttributes) {
    if (_typeof(extraAttributes) === 'object' && extraAttributes !== null) {
      return _objectSpread(_objectSpread({}, result), extraAttributes);
    }
    return result;
  }, {});
  return _objectSpread(_objectSpread({}, contextAttributes), (_event$payload$attrib = event.payload.attributes) !== null && _event$payload$attrib !== void 0 ? _event$payload$attrib : {});
};
var ACTION_INPUT_METHOD_NAME_MAP = {
  created: 'creationMethod',
  updated: 'updateMethod',
  deleted: 'deleteMethod'
};
var DEFAULT_ATTRIBUTES_MAP = {
  created: {
    sourceEvent: null,
    creationMethod: 'unknown'
  },
  updated: {
    sourceEvent: null,
    updateMethod: 'unknown'
  },
  deleted: {
    sourceEvent: null,
    deleteMethod: 'unknown'
  }
};

/**
 * Given an event, derive a set of attributes
 */
export var processAttributesFromBaseEvent = function processAttributesFromBaseEvent(action, event) {
  var sourceEvent = _getSourceEvent(event.payload);
  var _extractFromEventCont = extractFromEventContext(['component', 'componentName'], event),
    _extractFromEventCont2 = _slicedToArray(_extractFromEventCont, 1),
    component = _extractFromEventCont2[0];
  if (typeof component === 'string' && component.toLowerCase() === 'linkpicker') {
    var attribute = ACTION_INPUT_METHOD_NAME_MAP[action];
    var _extractAttributesFro = extractAttributesFromEvent(event),
      inputMethod = _extractAttributesFro.linkFieldContentInputMethod;
    return _defineProperty({
      sourceEvent: sourceEvent
    }, attribute, "linkpicker_".concat(inputMethod !== null && inputMethod !== void 0 ? inputMethod : 'none'));
  }
  return {
    sourceEvent: sourceEvent
  };
};
export var mergeAttributes = function mergeAttributes(action, details, event, attributes) {
  var defaultAttributes = DEFAULT_ATTRIBUTES_MAP[action];
  var derivedAttributes = event ? processAttributesFromBaseEvent(action, event) : {};
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultAttributes), attributes), derivedAttributes), {}, {
    smartLinkId: details.smartLinkId
  });
};
export var getDomainFromUrl = function getDomainFromUrl(url) {
  try {
    var normalizedUrl = normalizeUrl(url);
    if (!normalizedUrl) {
      return null;
    }
    return new URL(normalizedUrl).hostname;
  } catch (_unused) {
    return null;
  }
};