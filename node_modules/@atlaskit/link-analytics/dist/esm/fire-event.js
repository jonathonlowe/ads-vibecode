import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { getDomainFromUrl, mergeAttributes } from './utils';
import { resolveAttributes } from './utils';
import { EVENT_CHANNEL } from './common/utils/constants';
import createEventPayload from './common/utils/analytics/create-event-payload';
import { getStatus } from '@atlaskit/linking-common';
import { DEFAULT_GET_DATASOURCE_DATA_PAGE_SIZE } from '@atlaskit/link-client-extension';
var PACKAGE_DATA = {
  packageName: "@atlaskit/link-analytics",
  packageVersion: "9.1.1"
};
var fireEvent = function fireEvent(action, createAnalyticsEvent, client, store) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(details, sourceEvent) {
      var attributes,
        resolvedAttributes,
        mergedAttributes,
        payload,
        event,
        _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            attributes = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            _context.next = 3;
            return resolveAttributes(details, client, store);
          case 3:
            resolvedAttributes = _context.sent;
            mergedAttributes = mergeAttributes(action, details, sourceEvent, _objectSpread(_objectSpread({}, attributes), resolvedAttributes));
            payload = createEventPayload("track.link.".concat(action), mergedAttributes);
            event = createAnalyticsEvent(_objectSpread(_objectSpread({}, payload), {}, {
              nonPrivacySafeAttributes: {
                domainName: getDomainFromUrl(details.url)
              }
            }));
            event.context.push(PACKAGE_DATA);
            event.fire(EVENT_CHANNEL);
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};
export default fireEvent;
export var fireDatasourceEvent = function fireDatasourceEvent(action, createAnalyticsEvent, getDatasourceData) {
  return /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(details, sourceEvent) {
      var _schema$defaultProper, _schema$defaultProper2, _schema$properties, _details$url;
      var attributes,
        _yield$getDatasourceD,
        _yield$getDatasourceD2,
        totalItemCount,
        schema,
        meta,
        _yield$getDatasourceD3,
        extensionKey,
        destinationObjectTypes,
        status,
        resolvedAttributes,
        mergedAttributes,
        payload,
        event,
        _payload,
        _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            attributes = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            _context2.next = 3;
            return getDatasourceData(details.datasourceId, {
              parameters: details.parameters,
              // Currently, pageSize doesn't change the values we are interested in
              pageSize: DEFAULT_GET_DATASOURCE_DATA_PAGE_SIZE,
              includeSchema: true,
              fields: []
            });
          case 3:
            _yield$getDatasourceD = _context2.sent;
            _yield$getDatasourceD2 = _yield$getDatasourceD.data;
            totalItemCount = _yield$getDatasourceD2.totalCount;
            schema = _yield$getDatasourceD2.schema;
            meta = _yield$getDatasourceD.meta;
            _yield$getDatasourceD3 = _yield$getDatasourceD.meta;
            extensionKey = _yield$getDatasourceD3.extensionKey;
            destinationObjectTypes = _yield$getDatasourceD3.destinationObjectTypes;
            status = getStatus({
              meta: meta
            });
            resolvedAttributes = {
              extensionKey: extensionKey,
              status: status,
              destinationObjectTypes: destinationObjectTypes,
              totalItemCount: totalItemCount,
              displayedColumnCount: (_schema$defaultProper = schema === null || schema === void 0 || (_schema$defaultProper2 = schema.defaultProperties) === null || _schema$defaultProper2 === void 0 ? void 0 : _schema$defaultProper2.length) !== null && _schema$defaultProper !== void 0 ? _schema$defaultProper : schema === null || schema === void 0 || (_schema$properties = schema.properties) === null || _schema$properties === void 0 ? void 0 : _schema$properties.length
            };
            mergedAttributes = mergeAttributes(action, _objectSpread(_objectSpread({}, details), {}, {
              url: (_details$url = details.url) !== null && _details$url !== void 0 ? _details$url : 'unknown'
            }), sourceEvent, _objectSpread(_objectSpread({}, resolvedAttributes), attributes));
            payload = createEventPayload("track.datasource.".concat(action), mergedAttributes);
            event = createAnalyticsEvent(_objectSpread(_objectSpread({}, payload), {}, {
              nonPrivacySafeAttributes: {
                domainName: details.url ? getDomainFromUrl(details.url) : ''
              }
            }));
            if (extensionKey === 'jira-object-provider' && action === 'created') {
              // macro inserted event name is consistent with what confluence uses for JIM inserts
              _payload = createEventPayload("track.macro.inserted", _objectSpread({}, mergedAttributes));
              createAnalyticsEvent(_objectSpread(_objectSpread({}, _payload), {}, {
                actionSubjectId: 'jlol'
              })).fire(EVENT_CHANNEL);
            }
            event.context.push(PACKAGE_DATA);
            event.fire(EVENT_CHANNEL);
          case 19:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
};