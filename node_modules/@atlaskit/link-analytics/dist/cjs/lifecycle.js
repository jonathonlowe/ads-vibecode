"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSmartLinkLifecycleAnalytics = exports.useDatasourceLifecycleAnalytics = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _analyticsNext = require("@atlaskit/analytics-next");
var _linkProvider = require("@atlaskit/link-provider");
var _constants = require("./common/utils/constants");
var _createEventPayload = _interopRequireDefault(require("./common/utils/analytics/create-event-payload"));
var _utils = require("./utils");
var _linkClientExtension = require("@atlaskit/link-client-extension");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Exposes callbacks to fire analytics events for the lifecycle (create, update and deletion) of links
 * @returns An object containing the analytic lifecycle methods
 *
 * @example Link created Example
 *
 * ```ts
 * export const ExampleComponent = () => {
 *   const linkAnalytics = useSmartLinkLifecycleAnalytics();
 *
 *   const handleCreateLink = ({ url }) => {
 *     // ... do stuff
 *     // Call when a link is created
 *     linkAnalytics.linkCreated({ url })
 *   }
 *
 *   return (
 *     <SomeLinkCreatingComponent onCreateLink={handleCreateLink} />
 *   )
 * }
 * ```
 */
var useSmartLinkLifecycleAnalytics = exports.useSmartLinkLifecycleAnalytics = function useSmartLinkLifecycleAnalytics() {
  var _useAnalyticsEvents = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var _useSmartLinkContext = (0, _linkProvider.useSmartLinkContext)(),
    store = _useSmartLinkContext.store,
    client = _useSmartLinkContext.connections.client;
  return (0, _react.useMemo)(function () {
    var factory = function factory(action) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        try {
          (0, _utils.runWhenIdle)(function () {
            (0, _analyticsNext.createAndFireEvent)(_constants.EVENT_CHANNEL)((0, _createEventPayload.default)('operational.fireAnalyticEvent.commenced', {
              action: action
            }))(createAnalyticsEvent);
          });
          (0, _utils.runWhenIdle)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
            var _yield$import, fireEvent;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Promise.resolve().then(function () {
                    return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_@atlaskit/link-analytics/fire-event" */'./fire-event'));
                  });
                case 2:
                  _yield$import = _context.sent;
                  fireEvent = _yield$import.default;
                  fireEvent(action, createAnalyticsEvent, client, store).apply(void 0, args);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        } catch (error) {
          (0, _analyticsNext.createAndFireEvent)(_constants.EVENT_CHANNEL)((0, _createEventPayload.default)('operational.fireAnalyticEvent.failed', {
            error: error instanceof Error ? error.toString() : '',
            action: action
          }))(createAnalyticsEvent);
        }
      };
    };
    return {
      linkCreated: factory('created'),
      linkUpdated: factory('updated'),
      linkDeleted: factory('deleted')
    };
  }, [client, store, createAnalyticsEvent]);
};
var useDatasourceLifecycleAnalytics = exports.useDatasourceLifecycleAnalytics = function useDatasourceLifecycleAnalytics() {
  var _useAnalyticsEvents2 = (0, _analyticsNext.useAnalyticsEvents)(),
    createAnalyticsEvent = _useAnalyticsEvents2.createAnalyticsEvent;
  var _useDatasourceClientE = (0, _linkClientExtension.useDatasourceClientExtension)(),
    getDatasourceData = _useDatasourceClientE.getDatasourceData;
  return (0, _react.useMemo)(function () {
    var factory = function factory(action) {
      return function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        try {
          (0, _utils.runWhenIdle)(function () {
            (0, _analyticsNext.createAndFireEvent)(_constants.EVENT_CHANNEL)((0, _createEventPayload.default)('operational.fireAnalyticEvent.commenced', {
              action: action
            }))(createAnalyticsEvent);
          });
          (0, _utils.runWhenIdle)( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
            var _yield$import2, fireDatasourceEvent;
            return _regenerator.default.wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return Promise.resolve().then(function () {
                    return _interopRequireWildcard(require( /* webpackChunkName: "@atlaskit-internal_@atlaskit/link-analytics/fire-event" */'./fire-event'));
                  });
                case 2:
                  _yield$import2 = _context2.sent;
                  fireDatasourceEvent = _yield$import2.fireDatasourceEvent;
                  fireDatasourceEvent(action, createAnalyticsEvent, getDatasourceData).apply(void 0, args);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        } catch (error) {
          (0, _analyticsNext.createAndFireEvent)(_constants.EVENT_CHANNEL)((0, _createEventPayload.default)('operational.fireAnalyticEvent.failed', {
            error: error instanceof Error ? error.toString() : '',
            action: action
          }))(createAnalyticsEvent);
        }
      };
    };
    return {
      datasourceCreated: factory('created'),
      datasourceUpdated: factory('updated'),
      datasourceDeleted: factory('deleted')
    };
  }, [createAnalyticsEvent, getDatasourceData]);
};