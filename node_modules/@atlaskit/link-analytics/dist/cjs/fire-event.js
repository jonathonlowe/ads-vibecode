"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fireDatasourceEvent = exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _utils = require("./utils");
var _constants = require("./common/utils/constants");
var _createEventPayload = _interopRequireDefault(require("./common/utils/analytics/create-event-payload"));
var _linkingCommon = require("@atlaskit/linking-common");
var _linkClientExtension = require("@atlaskit/link-client-extension");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PACKAGE_DATA = {
  packageName: "@atlaskit/link-analytics",
  packageVersion: "9.1.1"
};
var fireEvent = function fireEvent(action, createAnalyticsEvent, client, store) {
  return /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(details, sourceEvent) {
      var attributes,
        resolvedAttributes,
        mergedAttributes,
        payload,
        event,
        _args = arguments;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            attributes = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            _context.next = 3;
            return (0, _utils.resolveAttributes)(details, client, store);
          case 3:
            resolvedAttributes = _context.sent;
            mergedAttributes = (0, _utils.mergeAttributes)(action, details, sourceEvent, _objectSpread(_objectSpread({}, attributes), resolvedAttributes));
            payload = (0, _createEventPayload.default)("track.link.".concat(action), mergedAttributes);
            event = createAnalyticsEvent(_objectSpread(_objectSpread({}, payload), {}, {
              nonPrivacySafeAttributes: {
                domainName: (0, _utils.getDomainFromUrl)(details.url)
              }
            }));
            event.context.push(PACKAGE_DATA);
            event.fire(_constants.EVENT_CHANNEL);
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};
var _default = exports.default = fireEvent;
var fireDatasourceEvent = exports.fireDatasourceEvent = function fireDatasourceEvent(action, createAnalyticsEvent, getDatasourceData) {
  return /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(details, sourceEvent) {
      var _schema$defaultProper, _schema$defaultProper2, _schema$properties, _details$url;
      var attributes,
        _yield$getDatasourceD,
        _yield$getDatasourceD2,
        totalItemCount,
        schema,
        meta,
        _yield$getDatasourceD3,
        extensionKey,
        destinationObjectTypes,
        status,
        resolvedAttributes,
        mergedAttributes,
        payload,
        event,
        _payload,
        _args2 = arguments;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            attributes = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            _context2.next = 3;
            return getDatasourceData(details.datasourceId, {
              parameters: details.parameters,
              // Currently, pageSize doesn't change the values we are interested in
              pageSize: _linkClientExtension.DEFAULT_GET_DATASOURCE_DATA_PAGE_SIZE,
              includeSchema: true,
              fields: []
            });
          case 3:
            _yield$getDatasourceD = _context2.sent;
            _yield$getDatasourceD2 = _yield$getDatasourceD.data;
            totalItemCount = _yield$getDatasourceD2.totalCount;
            schema = _yield$getDatasourceD2.schema;
            meta = _yield$getDatasourceD.meta;
            _yield$getDatasourceD3 = _yield$getDatasourceD.meta;
            extensionKey = _yield$getDatasourceD3.extensionKey;
            destinationObjectTypes = _yield$getDatasourceD3.destinationObjectTypes;
            status = (0, _linkingCommon.getStatus)({
              meta: meta
            });
            resolvedAttributes = {
              extensionKey: extensionKey,
              status: status,
              destinationObjectTypes: destinationObjectTypes,
              totalItemCount: totalItemCount,
              displayedColumnCount: (_schema$defaultProper = schema === null || schema === void 0 || (_schema$defaultProper2 = schema.defaultProperties) === null || _schema$defaultProper2 === void 0 ? void 0 : _schema$defaultProper2.length) !== null && _schema$defaultProper !== void 0 ? _schema$defaultProper : schema === null || schema === void 0 || (_schema$properties = schema.properties) === null || _schema$properties === void 0 ? void 0 : _schema$properties.length
            };
            mergedAttributes = (0, _utils.mergeAttributes)(action, _objectSpread(_objectSpread({}, details), {}, {
              url: (_details$url = details.url) !== null && _details$url !== void 0 ? _details$url : 'unknown'
            }), sourceEvent, _objectSpread(_objectSpread({}, resolvedAttributes), attributes));
            payload = (0, _createEventPayload.default)("track.datasource.".concat(action), mergedAttributes);
            event = createAnalyticsEvent(_objectSpread(_objectSpread({}, payload), {}, {
              nonPrivacySafeAttributes: {
                domainName: details.url ? (0, _utils.getDomainFromUrl)(details.url) : ''
              }
            }));
            if (extensionKey === 'jira-object-provider' && action === 'created') {
              // macro inserted event name is consistent with what confluence uses for JIM inserts
              _payload = (0, _createEventPayload.default)("track.macro.inserted", _objectSpread({}, mergedAttributes));
              createAnalyticsEvent(_objectSpread(_objectSpread({}, _payload), {}, {
                actionSubjectId: 'jlol'
              })).fire(_constants.EVENT_CHANNEL);
            }
            event.context.push(PACKAGE_DATA);
            event.fire(_constants.EVENT_CHANNEL);
          case 19:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
};