import React from 'react';
import { expandWithNestedExpand, nestedExpand } from '@atlaskit/adf-schema';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, INPUT_METHOD } from '@atlaskit/editor-common/analytics';
import { toolbarInsertBlockMessages as messages } from '@atlaskit/editor-common/messages';
import { IconExpand } from '@atlaskit/editor-common/quick-insert';
import { createWrapSelectionTransaction } from '@atlaskit/editor-common/utils';
import { createExpandNode, insertExpand, insertExpandWithInputMethod } from './commands';
import { expandKeymap } from './pm-plugins/keymap';
import { createPlugin } from './pm-plugins/main';
import { getToolbarConfig } from './toolbar';

// Ignored via go/ees005
// eslint-disable-next-line prefer-const
export let expandPlugin = ({
  config: options = {},
  api
}) => {
  var _api$analytics, _api$analytics2;
  return {
    name: 'expand',
    nodes() {
      return [{
        name: 'expand',
        node: expandWithNestedExpand
      }, {
        name: 'nestedExpand',
        node: nestedExpand
      }];
    },
    actions: {
      insertExpand: insertExpand(api === null || api === void 0 ? void 0 : (_api$analytics = api.analytics) === null || _api$analytics === void 0 ? void 0 : _api$analytics.actions),
      insertExpandWithInputMethod: insertExpandWithInputMethod(api === null || api === void 0 ? void 0 : (_api$analytics2 = api.analytics) === null || _api$analytics2 === void 0 ? void 0 : _api$analytics2.actions)
    },
    pmPlugins() {
      return [{
        name: 'expand',
        plugin: ({
          dispatch,
          getIntl,
          nodeViewPortalProviderAPI
        }) => {
          var _options$allowInterac;
          return createPlugin(dispatch, getIntl, options.appearance, options.useLongPressSelection, api, nodeViewPortalProviderAPI, (_options$allowInterac = options.allowInteractiveExpand) !== null && _options$allowInterac !== void 0 ? _options$allowInterac : true, options.__livePage);
        }
      }, {
        name: 'expandKeymap',
        plugin: () => expandKeymap(api, {
          __livePage: options.__livePage
        })
      }];
    },
    pluginsOptions: {
      floatingToolbar: getToolbarConfig(api),
      quickInsert: ({
        formatMessage
      }) => {
        if (options && options.allowInsertion !== true) {
          return [];
        }
        return [{
          id: 'expand',
          title: formatMessage(messages.expand),
          description: formatMessage(messages.expandDescription),
          keywords: ['accordion', 'collapse'],
          priority: 600,
          icon: () => /*#__PURE__*/React.createElement(IconExpand, null),
          action(insert, state) {
            var _api$analytics3;
            const node = createExpandNode(state);
            if (!node) {
              return false;
            }
            const tr = state.selection.empty ? insert(node) : createWrapSelectionTransaction({
              state,
              type: node.type
            });
            api === null || api === void 0 ? void 0 : (_api$analytics3 = api.analytics) === null || _api$analytics3 === void 0 ? void 0 : _api$analytics3.actions.attachAnalyticsEvent({
              action: ACTION.INSERTED,
              actionSubject: ACTION_SUBJECT.DOCUMENT,
              actionSubjectId: node.type === state.schema.nodes.nestedExpand ? ACTION_SUBJECT_ID.NESTED_EXPAND : ACTION_SUBJECT_ID.EXPAND,
              attributes: {
                inputMethod: INPUT_METHOD.QUICK_INSERT
              },
              eventType: EVENT_TYPE.TRACK
            })(tr);
            return tr;
          }
        }];
      }
    }
  };
};