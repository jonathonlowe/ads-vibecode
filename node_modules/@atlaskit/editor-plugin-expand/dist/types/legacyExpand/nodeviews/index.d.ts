import type { IntlShape } from 'react-intl-next';
import { type PortalProviderAPI } from '@atlaskit/editor-common/portal';
import type { SetSelectionRelativeToNode } from '@atlaskit/editor-common/selection';
import type { ExtractInjectionAPI, getPosHandler, getPosHandlerNode } from '@atlaskit/editor-common/types';
import type { Node as PmNode } from '@atlaskit/editor-prosemirror/model';
import type { Decoration, EditorView, NodeView } from '@atlaskit/editor-prosemirror/view';
import type { ExpandPlugin } from '../../types';
export declare class ExpandNodeView implements NodeView {
    private selectNearNode;
    private __livePage;
    private cleanUpEditorDisabledOnChange?;
    node: PmNode;
    view: EditorView;
    dom: HTMLElement;
    contentDOM?: HTMLElement;
    icon?: HTMLElement | null;
    input?: HTMLInputElement | null;
    titleContainer?: HTMLElement | null;
    content?: HTMLElement | null;
    getPos: getPosHandlerNode;
    intl: IntlShape;
    allowInteractiveExpand: boolean;
    isMobile: boolean;
    api: ExtractInjectionAPI<ExpandPlugin> | undefined;
    nodeViewPortalProviderAPI: PortalProviderAPI;
    decorationCleanup?: () => boolean | undefined;
    renderKey: string;
    constructor(node: PmNode, view: EditorView, getPos: getPosHandlerNode, getIntl: () => IntlShape, isMobile: boolean, selectNearNode: SetSelectionRelativeToNode | undefined, api: ExtractInjectionAPI<ExpandPlugin> | undefined, nodeViewPortalProviderAPI: PortalProviderAPI, allowInteractiveExpand?: boolean, __livePage?: boolean, cleanUpEditorDisabledOnChange?: (() => void) | undefined);
    private initHandlers;
    private focusTitle;
    private handleIconKeyDown;
    private renderIcon;
    private handleClick;
    private handleInput;
    private handleFocus;
    private handleInputFocus;
    private handleBlur;
    private handleTitleKeydown;
    private deleteExpand;
    private toggleExpand;
    private moveToOutsideOfTitle;
    private isCollapsed;
    private setRightGapCursor;
    private setLeftGapCursor;
    private handleArrowRightFromTitle;
    private handleArrowLeftFromTitle;
    private handleUndoFromTitle;
    private handleRedoFromTitle;
    private getContentEditable;
    stopEvent(event: Event): boolean;
    ignoreMutation(mutationRecord: MutationRecord | {
        type: 'selection';
        target: Node;
    }): boolean;
    update(node: PmNode, _decorations: readonly Decoration[]): boolean;
    destroy(): void;
}
export default function ({ getIntl, isMobile, api, nodeViewPortalProviderAPI, allowInteractiveExpand, __livePage, }: {
    getIntl: () => IntlShape;
    isMobile: boolean;
    api: ExtractInjectionAPI<ExpandPlugin> | undefined;
    nodeViewPortalProviderAPI: PortalProviderAPI;
    allowInteractiveExpand: boolean;
    __livePage: boolean;
}): (node: PmNode, view: EditorView, getPos: getPosHandler) => NodeView;
