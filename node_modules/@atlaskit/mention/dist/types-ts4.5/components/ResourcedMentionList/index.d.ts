import React from 'react';
import { type WithAnalyticsEventsProps } from '@atlaskit/analytics-next';
import { type MentionProvider } from '../../api/MentionResource';
import { type PresenceProvider } from '../../api/PresenceResource';
import { type MentionDescription, type OnMentionEvent } from '../../types';
export interface Props {
    resourceProvider: MentionProvider;
    presenceProvider?: PresenceProvider;
    query?: string;
    onSelection?: OnMentionEvent;
    resourceError?: Error;
}
export interface State {
    resourceError?: Error;
    mentions: MentionDescription[];
}
export declare class ResourcedMentionListWithoutAnalytics extends React.PureComponent<Props & WithAnalyticsEventsProps, State> {
    private subscriberKey;
    private mentionListRef?;
    constructor(props: Props & WithAnalyticsEventsProps);
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    selectNext: () => void;
    selectPrevious: () => void;
    selectIndex: (index: number, callback?: () => any) => void;
    selectId: (id: string, callback?: () => any) => void;
    chooseCurrentSelection: () => void;
    mentionsCount: () => number;
    private subscribeMentionProvider;
    private subscribePresenceProvider;
    private unsubscribeMentionProvider;
    private unsubscribePresenceProvider;
    private applyPropChanges;
    private refreshPresences;
    private filterChange;
    private sendAnalytics;
    private filterError;
    private presenceUpdate;
    private notifySelection;
    private handleMentionListRef;
    render(): React.JSX.Element;
}
declare const ResourcedMentionList: React.ForwardRefExoticComponent<Omit<Props, keyof WithAnalyticsEventsProps> & React.RefAttributes<any>>;
type ResourcedMentionList = ResourcedMentionListWithoutAnalytics;
export default ResourcedMentionList;
