"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _styles = require("./styles");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var Scrollable = exports.default = /*#__PURE__*/function (_React$PureComponent) {
  function Scrollable() {
    var _this;
    (0, _classCallCheck2.default)(this, Scrollable);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Scrollable, [].concat(args));
    // API
    (0, _defineProperty2.default)(_this, "reveal", function (child) {
      if (child && _this.scrollableDiv) {
        var childNode = (0, _reactDom.findDOMNode)(child);
        // Not using Element.scrollIntoView as it scrolls even to top/bottom of view even if
        // already visible
        var scrollableRect = _this.scrollableDiv.getBoundingClientRect();
        var elementRect = childNode.getBoundingClientRect();
        if (elementRect.top < scrollableRect.top) {
          _this.scrollableDiv.scrollTop += elementRect.top - scrollableRect.top;
        } else if (elementRect.bottom > scrollableRect.bottom) {
          _this.scrollableDiv.scrollTop += elementRect.bottom - scrollableRect.bottom;
        }
      }
    });
    (0, _defineProperty2.default)(_this, "handleRef", function (ref) {
      _this.scrollableDiv = ref;
    });
    return _this;
  }
  (0, _inherits2.default)(Scrollable, _React$PureComponent);
  return (0, _createClass2.default)(Scrollable, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_styles.ScrollableStyle, {
        ref: this.handleRef
      }, this.props.children);
    }
  }]);
}(_react.default.PureComponent);