import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import Heading from '@atlaskit/heading';
import { Stack, Text, xcss } from '@atlaskit/primitives';
import { DefaultAdvisedAction, DefaultHeadline, DifferentText, LoginAgain } from '../../util/i18n';
import { GenericErrorIllustration } from './GenericErrorIllustration';
var advisedActionMessages = {
  '401': LoginAgain,
  '403': DifferentText,
  default: DefaultAdvisedAction
};
var MentionListError = /*#__PURE__*/function (_React$PureComponent) {
  function MentionListError() {
    _classCallCheck(this, MentionListError);
    return _callSuper(this, MentionListError, arguments);
  }
  _inherits(MentionListError, _React$PureComponent);
  return _createClass(MentionListError, [{
    key: "render",
    value: function render() {
      var error = this.props.error;
      var ErrorMessage = MentionListError.getAdvisedActionMessage(error);
      return /*#__PURE__*/React.createElement(Stack, {
        space: "space.400",
        alignBlock: "center",
        alignInline: "center",
        xcss: mentionListErrorStyles
      }, /*#__PURE__*/React.createElement(GenericErrorIllustration, null), /*#__PURE__*/React.createElement(Stack, {
        space: "space.100"
      }, /*#__PURE__*/React.createElement(Heading, {
        size: "xsmall",
        as: "div"
      }, /*#__PURE__*/React.createElement(DefaultHeadline, null)), /*#__PURE__*/React.createElement(Text, {
        as: "p",
        color: "color.text.subtle"
      }, /*#__PURE__*/React.createElement(ErrorMessage, null))));
    }
  }], [{
    key: "getAdvisedActionMessage",
    value:
    /**
     * Translate the supplied Error into a message suitable for display in the MentionList.
     *
     * @param error the error to be displayed
     */
    function getAdvisedActionMessage(error) {
      if (error && error.hasOwnProperty('statusCode')) {
        var httpError = error;
        return advisedActionMessages[httpError.statusCode.toString()] || advisedActionMessages.default;
      }
      return advisedActionMessages.default;
    }
  }]);
}(React.PureComponent);
export { MentionListError as default };
var mentionListErrorStyles = xcss({
  paddingBlock: 'space.500',
  textAlign: 'center'
});