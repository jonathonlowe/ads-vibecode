import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { OPERATIONAL_EVENT_TYPE, UI_EVENT_TYPE } from '@atlaskit/analytics-gas-types';
import { ELEMENTS_CHANNEL } from '../_constants';
import { ComponentNames, isSpecialMentionText } from '../types';
var packageName = "@atlaskit/mention";
var packageVersion = "24.1.4";
export var SLI_EVENT_TYPE = 'sli';
export var SMART_EVENT_TYPE = 'smart';
export var fireAnalyticsMentionTypeaheadEvent = function fireAnalyticsMentionTypeaheadEvent(props) {
  return function (action, duration) {
    var userIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var query = arguments.length > 3 ? arguments[3] : undefined;
    if (props.createAnalyticsEvent) {
      var eventPayload = {
        action: action,
        actionSubject: ComponentNames.TYPEAHEAD,
        attributes: {
          packageName: packageName,
          packageVersion: packageVersion,
          componentName: ComponentNames.MENTION,
          duration: Math.round(duration),
          userIds: userIds,
          queryLength: query ? query.length : 0
        },
        eventType: OPERATIONAL_EVENT_TYPE
      };
      var analyticsEvent = props.createAnalyticsEvent(eventPayload);
      analyticsEvent.fire(ELEMENTS_CHANNEL);
    }
  };
};
export var fireAnalyticsMentionEvent = function fireAnalyticsMentionEvent(createEvent) {
  return function (actionSubject, action, text, id, accessLevel) {
    var payload = {
      action: action,
      actionSubject: actionSubject,
      eventType: UI_EVENT_TYPE,
      attributes: {
        packageName: packageName,
        packageVersion: packageVersion,
        componentName: ComponentNames.MENTION,
        accessLevel: accessLevel,
        isSpecial: isSpecialMentionText(text),
        userId: id
      }
    };
    var event = createEvent(payload);
    event.fire(ELEMENTS_CHANNEL);
    return event;
  };
};
export var fireSliAnalyticsEvent = function fireSliAnalyticsEvent(props) {
  return function (actionSubject, action) {
    if (props.createAnalyticsEvent) {
      var eventPayload = buildSliPayload(actionSubject, action);
      props.createAnalyticsEvent(eventPayload).fire(ELEMENTS_CHANNEL);
    }
  };
};
export var buildSliPayload = function buildSliPayload(actionSubject, action, attributes) {
  var eventPayload = {
    action: action,
    actionSubject: actionSubject,
    eventType: OPERATIONAL_EVENT_TYPE,
    attributes: _objectSpread({
      packageName: packageName,
      packageVersion: packageVersion,
      componentName: ComponentNames.MENTION
    }, attributes)
  };
  return eventPayload;
};
export var fireAnalyticsMentionHydrationEvent = function fireAnalyticsMentionHydrationEvent(props) {
  return function (action, userId, fromCache, duration) {
    if (props.createAnalyticsEvent) {
      var eventPayload = {
        action: action,
        actionSubject: ComponentNames.MENTION,
        actionSubjectId: 'hydration',
        attributes: {
          packageName: packageName,
          packageVersion: packageVersion,
          componentName: ComponentNames.MENTION,
          userId: userId,
          fromCache: fromCache,
          duration: Math.round(duration)
        },
        eventType: OPERATIONAL_EVENT_TYPE
      };
      var analyticsEvent = props.createAnalyticsEvent(eventPayload);
      analyticsEvent.fire(ELEMENTS_CHANNEL);
    }
  };
};

// OLD Analytics
var MENTION_ANALYTICS_PREFIX = 'atlassian.fabric.mention';
export var fireAnalytics = function fireAnalytics(firePrivateAnalyticsEvent) {
  return function (eventName, text, accessLevel) {
    if (firePrivateAnalyticsEvent) {
      firePrivateAnalyticsEvent("".concat(MENTION_ANALYTICS_PREFIX, ".").concat(eventName), {
        accessLevel: accessLevel,
        isSpecial: isSpecialMentionText(text)
      });
    }
  };
};