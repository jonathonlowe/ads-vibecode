{"version":3,"file":"TypeAlias.js","sourceRoot":"","sources":["../../src/TypeAlias.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH,mCAAwD;AAExD,6CAA0C;AAE1C,iCAAiC;AACjC,MAAa,SAAU,SAAQ,uBAAU;IAGrC,YAAmB,IAAY,EAAE,MAAY;QACzC,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;IAC7B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC;IAED,IAAW,IAAI;QACX,OAAO,gBAAQ,CAAC,KAAK,CAAC;IAC1B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,qBAAa,CAAC,UAAU,CAAC;IACpC,CAAC;CACJ;AAnBD,8BAmBC","sourcesContent":["/*\n * This file is released under the MIT license.\n * Copyright (c) 2023, Mike Lischke\n *\n * See LICENSE file for more info.\n */\n\nimport { ReferenceKind, Type, TypeKind } from \"./types\";\n\nimport { BaseSymbol } from \"./BaseSymbol\";\n\n/** An alias for another type. */\nexport class TypeAlias extends BaseSymbol implements Type {\n    private targetType: Type;\n\n    public constructor(name: string, target: Type) {\n        super(name);\n        this.targetType = target;\n    }\n\n    public get baseTypes(): Type[] {\n        return [this.targetType];\n    }\n\n    public get kind(): TypeKind {\n        return TypeKind.Alias;\n    }\n\n    public get reference(): ReferenceKind {\n        return ReferenceKind.Irrelevant;\n    }\n}\n"]}