{"version":3,"file":"FundamentalType.js","sourceRoot":"","sources":["../../src/FundamentalType.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH,mCAAwD;AAExD,2FAA2F;AAC3F,MAAa,eAAe;IAWxB,YAAmB,IAAY,EAAE,QAAQ,GAAG,gBAAQ,CAAC,OAAO,EAAE,aAAa,GAAG,qBAAa,CAAC,UAAU;QAClG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,EAAE,CAAC;IACd,CAAC;IAED,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;;AA1BsB,2BAAW,GAAG,IAAI,eAAe,CAAC,KAAK,EAAE,gBAAQ,CAAC,OAAO,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;AACnF,yBAAS,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,gBAAQ,CAAC,KAAK,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;AACjF,0BAAU,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,gBAAQ,CAAC,MAAM,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;AACpF,wBAAQ,GAAG,IAAI,eAAe,CAAC,MAAM,EAAE,gBAAQ,CAAC,OAAO,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;AAJ/F,0CAAe","sourcesContent":["/*\n * This file is released under the MIT license.\n * Copyright (c) 2023, Mike Lischke\n *\n * See LICENSE file for more info.\n */\n\nimport { Type, TypeKind, ReferenceKind } from \"./types\";\n\n/** A single class for all fundamental types. They are distinguished via the kind field. */\nexport class FundamentalType implements Type {\n    public static readonly integerType = new FundamentalType(\"int\", TypeKind.Integer, ReferenceKind.Instance);\n    public static readonly floatType = new FundamentalType(\"float\", TypeKind.Float, ReferenceKind.Instance);\n    public static readonly stringType = new FundamentalType(\"string\", TypeKind.String, ReferenceKind.Instance);\n    public static readonly boolType = new FundamentalType(\"bool\", TypeKind.Boolean, ReferenceKind.Instance);\n\n    public name: string;\n\n    private typeKind: TypeKind;\n    private referenceKind: ReferenceKind;\n\n    public constructor(name: string, typeKind = TypeKind.Unknown, referenceKind = ReferenceKind.Irrelevant) {\n        this.name = name;\n        this.typeKind = typeKind;\n        this.referenceKind = referenceKind;\n    }\n\n    public get baseTypes(): Type[] {\n        return [];\n    }\n\n    public get kind(): TypeKind {\n        return this.typeKind;\n    }\n\n    public get reference(): ReferenceKind {\n        return this.referenceKind;\n    }\n}\n"]}