"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazySuspense = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../utils");
var _context = require("./context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * This component implements a multi step system in order to be consumed on SSR
 * and still allow hydration and render a suspense boundary without having React
 * throw away the SSR content or complaining that the html code does not match.
 *
 * Most of the behaciour is implemented by communicating via context with the
 * lazy child. The lazy component is indeed responsible of collecting its own
 * SSR output and let this suspense alternative render it as fallback.
 *
 * To be clear, it does not render Suspense on the server: it only renders
 * a context provider in order to pass the fallback down to the child being
 * rendered if the lazy component is not there.
 *
 * Then on the client, during hydration, it renders the same provider with
 * two children: the first is the real Suspense component, that renders
 * the lazy child, catching any promise being thrown and wait; the second
 * is the hydration compliant component: it maintains SSR content until
 * the suspended promise is resolved.
 *
 * So during this step, if there is SSR content Suspense renders null and
 * the hydration fallback is rendered as sibling. If not, the lazy child
 * will signal to render the fallback prop, removing the hydration fallback.
 *
 * Once the suspended promise is resolved, Suspense will remove its own
 * fallback but will also tell LazySuspense to get rid of the hydration one.
 *
 */
class LazySuspense extends _react.Component {
  state = {
    // Used on server to render fallback down the tree
    fallback: this.props.fallback,
    // Used on client to replace fallback with magic input
    setFallback: fallback => {
      if (this.hydrationFallback === fallback) return;
      this.hydrationFallback = fallback;
      // Schedule an update so we force switch from the sibling tree
      // back to the suspense boundary
      if (this.mounted) this.forceUpdate();
    }
  };
  hydrationFallback = null;
  mounted = false;
  constructor(props) {
    super(props);
    this.DynamicFallback.displayName = 'DynamicFallback';
  }
  componentDidMount() {
    this.mounted = true;
  }
  DynamicFallback = ({
    children,
    outsideSuspense
  }) => {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, _react.useLayoutEffect)(() => {
      return () => {
        // the effect cleanup is called by the Suspense boundary itself
        // when both Lazy AND the eventual promises thrown are done
        // so Suspense will re-render with actual content and we remove
        // the hydration fallback at the same time
        if (!outsideSuspense) this.state.setFallback(null);
      };
    }, [outsideSuspense]);
    return outsideSuspense ? children(this.hydrationFallback ? this.hydrationFallback : null) : children(this.hydrationFallback ? null : this.props.fallback);
  };
  renderFallback(outsideSuspense) {
    const {
      DynamicFallback
    } = this;

    // Use render prop component to allow switch to hydration fallback
    return /*#__PURE__*/_react.default.createElement(DynamicFallback, {
      outsideSuspense: outsideSuspense
    }, fallback => fallback);
  }
  renderServer() {
    return /*#__PURE__*/_react.default.createElement(_context.LazySuspenseContext.Provider, {
      value: this.state
    }, this.props.children);
  }
  renderClient() {
    return /*#__PURE__*/_react.default.createElement(_context.LazySuspenseContext.Provider, {
      value: this.state
    }, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
      fallback: this.renderFallback(false)
    }, this.props.children), (!this.mounted || this.hydrationFallback) && this.renderFallback(true));
  }
  render() {
    return (0, _utils.isNodeEnvironment)() ? this.renderServer() : this.renderClient();
  }
}
exports.LazySuspense = LazySuspense;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,