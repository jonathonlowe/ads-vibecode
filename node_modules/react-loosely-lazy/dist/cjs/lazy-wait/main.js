"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazyWait = void 0;
var _react = _interopRequireWildcard(require("react"));
var _context = require("./context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const LazyWait = ({
  until,
  children
}) => {
  const closestWait = (0, _react.useContext)(_context.WaitContext);
  const value = (0, _react.useRef)(until && closestWait.currentValue() ? 1 : 0);
  const subscribers = (0, _react.useRef)(new Set());
  const api = (0, _react.useRef)({
    subscribe: subscriber => {
      subscribers.current.add(subscriber);
      return () => {
        subscribers.current.delete(subscriber);
      };
    },
    currentValue: () => value.current
  });
  (0, _react.useEffect)(() => {
    // Notify subscribers when until prop or closest until value changes
    const notify = () => {
      value.current = closestWait.currentValue() && until ? 1 : 0;
      subscribers.current.forEach(subscriber => subscriber());
    };
    notify();
    return closestWait.subscribe(notify);
  }, [closestWait, until]);
  return /*#__PURE__*/_react.default.createElement(_context.WaitContext.Provider, {
    value: api.current
  }, children);
};
exports.LazyWait = LazyWait;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY29udGV4dCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkxhenlXYWl0IiwidW50aWwiLCJjaGlsZHJlbiIsImNsb3Nlc3RXYWl0IiwidXNlQ29udGV4dCIsIldhaXRDb250ZXh0IiwidmFsdWUiLCJ1c2VSZWYiLCJjdXJyZW50VmFsdWUiLCJzdWJzY3JpYmVycyIsIlNldCIsImFwaSIsInN1YnNjcmliZSIsInN1YnNjcmliZXIiLCJjdXJyZW50IiwiYWRkIiwiZGVsZXRlIiwidXNlRWZmZWN0Iiwibm90aWZ5IiwiZm9yRWFjaCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGF6eS13YWl0L21haW4udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IFN1YnNjcmlwdGlvbkNvbnRleHRWYWx1ZSB9IGZyb20gJy4uL2xhenkvdHlwZXMnO1xuXG5pbXBvcnQgeyBXYWl0Q29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5cbmV4cG9ydCB0eXBlIExhenlXYWl0UHJvcHMgPSB7XG4gIHVudGlsOiBib29sZWFuO1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcblxuZXhwb3J0IGNvbnN0IExhenlXYWl0ID0gKHsgdW50aWwsIGNoaWxkcmVuIH06IExhenlXYWl0UHJvcHMpID0+IHtcbiAgY29uc3QgY2xvc2VzdFdhaXQgPSB1c2VDb250ZXh0KFdhaXRDb250ZXh0KTtcbiAgY29uc3QgdmFsdWUgPSB1c2VSZWYodW50aWwgJiYgY2xvc2VzdFdhaXQuY3VycmVudFZhbHVlKCkgPyAxIDogMCk7XG4gIGNvbnN0IHN1YnNjcmliZXJzID0gdXNlUmVmPFNldDwoKSA9PiB2b2lkPj4obmV3IFNldCgpKTtcbiAgY29uc3QgYXBpID0gdXNlUmVmPFN1YnNjcmlwdGlvbkNvbnRleHRWYWx1ZT4oe1xuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlciA9PiB7XG4gICAgICBzdWJzY3JpYmVycy5jdXJyZW50LmFkZChzdWJzY3JpYmVyKTtcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc3Vic2NyaWJlcnMuY3VycmVudC5kZWxldGUoc3Vic2NyaWJlcik7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3VycmVudFZhbHVlOiAoKSA9PiB2YWx1ZS5jdXJyZW50LFxuICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIE5vdGlmeSBzdWJzY3JpYmVycyB3aGVuIHVudGlsIHByb3Agb3IgY2xvc2VzdCB1bnRpbCB2YWx1ZSBjaGFuZ2VzXG4gICAgY29uc3Qgbm90aWZ5ID0gKCkgPT4ge1xuICAgICAgdmFsdWUuY3VycmVudCA9IGNsb3Nlc3RXYWl0LmN1cnJlbnRWYWx1ZSgpICYmIHVudGlsID8gMSA6IDA7XG4gICAgICBzdWJzY3JpYmVycy5jdXJyZW50LmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKCkpO1xuICAgIH07XG5cbiAgICBub3RpZnkoKTtcblxuICAgIHJldHVybiBjbG9zZXN0V2FpdC5zdWJzY3JpYmUobm90aWZ5KTtcbiAgfSwgW2Nsb3Nlc3RXYWl0LCB1bnRpbF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFdhaXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXthcGkuY3Vy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