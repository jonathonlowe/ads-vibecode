"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaceholderFallbackHydrate = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const PlaceholderFallbackHydrate = ({
  id,
  content
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
    type: "hidden",
    "data-lazy-begin": id
  }), content.map((el, i) => {
    const {
      tagName = '',
      childNodes = [],
      attributes = []
    } = el;
    const props = Array.from(attributes).reduce(_utils.attrToProp, {
      key: String(i)
    });
    // text node
    if (!tagName) return /*#__PURE__*/(0, _react.createElement)(_react.Fragment, props, el.textContent);

    // childless tag
    if (!childNodes.length) return /*#__PURE__*/(0, _react.createElement)(tagName.toLowerCase(), props);

    // tag with content
    return /*#__PURE__*/(0, _react.createElement)(tagName.toLowerCase(), {
      ...props,
      dangerouslySetInnerHTML: {
        __html: ''
      },
      suppressHydrationWarning: true
    });
  }), /*#__PURE__*/_react.default.createElement("input", {
    type: "hidden",
    "data-lazy-end": id
  }));
};
exports.PlaceholderFallbackHydrate = PlaceholderFallbackHydrate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJQbGFjZWhvbGRlckZhbGxiYWNrSHlkcmF0ZSIsImlkIiwiY29udGVudCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsInR5cGUiLCJtYXAiLCJlbCIsInRhZ05hbWUiLCJjaGlsZE5vZGVzIiwiYXR0cmlidXRlcyIsInByb3BzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwiYXR0clRvUHJvcCIsImtleSIsIlN0cmluZyIsInRleHRDb250ZW50IiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGF6eS9wbGFjZWhvbGRlcnMvaHlkcmF0ZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYXR0clRvUHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgUGxhY2Vob2xkZXJGYWxsYmFja0h5ZHJhdGVQcm9wcyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgY29udGVudDogSFRNTEVsZW1lbnRbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBQbGFjZWhvbGRlckZhbGxiYWNrSHlkcmF0ZSA9ICh7XG4gIGlkLFxuICBjb250ZW50LFxufTogUGxhY2Vob2xkZXJGYWxsYmFja0h5ZHJhdGVQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGRhdGEtbGF6eS1iZWdpbj17aWR9IC8+XG4gICAgICB7Y29udGVudC5tYXAoKGVsOiBIVE1MRWxlbWVudCwgaTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGFnTmFtZSA9ICcnLCBjaGlsZE5vZGVzID0gW10sIGF0dHJpYnV0ZXMgPSBbXSB9ID0gZWw7XG4gICAgICAgIGNvbnN0IHByb3BzID0gQXJyYXkuZnJvbShhdHRyaWJ1dGVzKS5yZWR1Y2UoYXR0clRvUHJvcCwge1xuICAgICAgICAgIGtleTogU3RyaW5nKGkpLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGV4dCBub2RlXG4gICAgICAgIGlmICghdGFnTmFtZSkgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIHByb3BzLCBlbC50ZXh0Q29udGVudCk7XG5cbiAgICAgICAgLy8gY2hpbGRsZXNzIHRhZ1xuICAgICAgICBpZiAoIWNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgcHJvcHMpO1xuXG4gICAgICAgIC8vIHRhZyB3aXRoIGNvbnRlbnRcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnTmFtZS50b0xvd2VyQ2FzZSgpLCB7XG4gICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiAnJyB9LFxuICAgICAgICAgIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9KX1cbiAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgZGF0YS1sYXp5LWVuZD17aWR9IC8+XG4gICAgPC8+XG4gICk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFBeUMsU0FBQUUseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUosd0JBQUFJLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBT2xDLE1BQU1XLDBCQUEwQixHQUFHQSxDQUFDO0VBQ3pDQyxFQUFFO0VBQ0ZDO0FBQytCLENBQUMsS0FBSztFQUNyQyxvQkFDRTFCLE1BQUEsQ0FBQVUsT0FBQSxDQUFBaUIsYUFBQSxDQUFBM0IsTUFBQSxDQUFBVSxPQUFBLENBQUFrQixRQUFBLHFCQUNFNUIsTUFBQSxDQUFBVSxPQUFBLENBQUFpQixhQUFBO0lBQU9FLElBQUksRUFBQyxRQUFRO0lBQUMsbUJBQWlCSjtFQUFHLENBQUUsQ0FBQyxFQUMzQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQ0MsRUFBZSxFQUFFVCxDQUFTLEtBQUs7SUFDM0MsTUFBTTtNQUFFVSxPQUFPLEdBQUcsRUFBRTtNQUFFQyxVQUFVLEdBQUcsRUFBRTtNQUFFQyxVQUFVLEdBQUc7SUFBRyxDQUFDLEdBQUdILEVBQUU7SUFDN0QsTUFBTUksS0FBSyxHQUFHQyxLQUFLLENBQUNDLElBQUksQ0FBQ0gsVUFBVSxDQUFDLENBQUNJLE1BQU0sQ0FBQ0MsaUJBQVUsRUFBRTtNQUN0REMsR0FBRyxFQUFFQyxNQUFNLENBQUNuQixDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBQ0Y7SUFDQSxJQUFJLENBQUNVLE9BQU8sRUFBRSxvQkFBTyxJQUFBTCxvQkFBYSxFQUFDQyxlQUFRLEVBQUVPLEtBQUssRUFBRUosRUFBRSxDQUFDVyxXQUFXLENBQUM7O0lBRW5FO0lBQ0EsSUFBSSxDQUFDVCxVQUFVLENBQUNVLE1BQU0sRUFDcEIsb0JBQU8sSUFBQWhCLG9CQUFhLEVBQUNLLE9BQU8sQ0FBQ1ksV0FBVyxDQUFDLENBQUMsRUFBRVQsS0FBSyxDQUFDOztJQUVwRDtJQUNBLG9CQUFPLElBQUFSLG9CQUFhLEVBQUNLLE9BQU8sQ0FBQ1ksV0FBVyxDQUFDLENBQUMsRUFBRTtNQUMxQyxHQUFHVCxLQUFLO01BQ1JVLHVCQUF1QixFQUFFO1FBQUVDLE1BQU0sRUFBRTtNQUFHLENBQUM7TUFDdkNDLHdCQUF3QixFQUFFO0lBQzVCLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQyxlQUNGL0MsTUFBQSxDQUFBVSxPQUFBLENBQUFpQixhQUFBO0lBQU9FLElBQUksRUFBQyxRQUFRO0lBQUMsaUJBQWVKO0VBQUcsQ0FBRSxDQUN6QyxDQUFDO0FBRVAsQ0FBQztBQUFDdUIsT0FBQSxDQUFBeEIsMEJBQUEsR0FBQUEsMEJBQUEiLCJpZ25vcmVMaXN0IjpbXX0=