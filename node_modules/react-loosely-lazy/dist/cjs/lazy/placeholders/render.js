"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaceholderFallbackRender = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function isLinkPrefetch(el) {
  return el.tagName === 'LINK' && el.rel === 'prefetch';
}
const usePlaceholderRender = (resolveId, content) => {
  const hydrationRef = (0, _react.useRef)(null);
  const {
    current: ssrDomNodes
  } = (0, _react.useRef)(content || []);
  (0, _react.useLayoutEffect)(() => {
    const element = hydrationRef.current;
    const {
      parentNode
    } = element || {};
    if (parentNode && !parentNode.contains(ssrDomNodes[0])) {
      ssrDomNodes.reverse().forEach(node => {
        // this fixes an issue with Chrome that re-triggers and cancels prefetch
        // when node is appended again, making network panel quite noisy
        if (isLinkPrefetch(node)) node.rel = '';
        parentNode.insertBefore(node, element.nextSibling);
      });
    }
    return () => {
      ssrDomNodes.forEach(node => {
        var _node$parentNode;
        return (_node$parentNode = node.parentNode) === null || _node$parentNode === void 0 ? void 0 : _node$parentNode.removeChild(node);
      });
    };
    // [hydrationRef.current, ssrDomNodes] are expected to be stable
    // with the second one never changing by design and the first one changing after first render
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return hydrationRef;
};
const PlaceholderFallbackRender = ({
  id,
  content
}) => {
  const placeholderRef = usePlaceholderRender(id, content);
  return /*#__PURE__*/_react.default.createElement("input", {
    type: "hidden",
    "data-lazy-begin": id,
    ref: placeholderRef
  });
};
exports.PlaceholderFallbackRender = PlaceholderFallbackRender;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJpc0xpbmtQcmVmZXRjaCIsImVsIiwidGFnTmFtZSIsInJlbCIsInVzZVBsYWNlaG9sZGVyUmVuZGVyIiwicmVzb2x2ZUlkIiwiY29udGVudCIsImh5ZHJhdGlvblJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJzc3JEb21Ob2RlcyIsInVzZUxheW91dEVmZmVjdCIsImVsZW1lbnQiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJyZXZlcnNlIiwiZm9yRWFjaCIsIm5vZGUiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsIl9ub2RlJHBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIlBsYWNlaG9sZGVyRmFsbGJhY2tSZW5kZXIiLCJpZCIsInBsYWNlaG9sZGVyUmVmIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJyZWYiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xhenkvcGxhY2Vob2xkZXJzL3JlbmRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBpc0xpbmtQcmVmZXRjaChlbDogSFRNTEVsZW1lbnQpOiBlbCBpcyBIVE1MTGlua0VsZW1lbnQge1xuICByZXR1cm4gZWwudGFnTmFtZSA9PT0gJ0xJTksnICYmIChlbCBhcyBIVE1MTGlua0VsZW1lbnQpLnJlbCA9PT0gJ3ByZWZldGNoJztcbn1cblxuY29uc3QgdXNlUGxhY2Vob2xkZXJSZW5kZXIgPSAocmVzb2x2ZUlkOiBzdHJpbmcsIGNvbnRlbnQ6IEhUTUxFbGVtZW50W10pID0+IHtcbiAgY29uc3QgaHlkcmF0aW9uUmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgeyBjdXJyZW50OiBzc3JEb21Ob2RlcyB9ID0gdXNlUmVmKGNvbnRlbnQgfHwgKFtdIGFzIEhUTUxFbGVtZW50W10pKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBoeWRyYXRpb25SZWYuY3VycmVudDtcbiAgICBjb25zdCB7IHBhcmVudE5vZGUgfSA9IGVsZW1lbnQgfHwge307XG5cbiAgICBpZiAocGFyZW50Tm9kZSAmJiAhcGFyZW50Tm9kZS5jb250YWlucyhzc3JEb21Ob2Rlc1swXSkpIHtcbiAgICAgIHNzckRvbU5vZGVzLnJldmVyc2UoKS5mb3JFYWNoKChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAvLyB0aGlzIGZpeGVzIGFuIGlzc3VlIHdpdGggQ2hyb21lIHRoYXQgcmUtdHJpZ2dlcnMgYW5kIGNhbmNlbHMgcHJlZmV0Y2hcbiAgICAgICAgLy8gd2hlbiBub2RlIGlzIGFwcGVuZGVkIGFnYWluLCBtYWtpbmcgbmV0d29yayBwYW5lbCBxdWl0ZSBub2lzeVxuICAgICAgICBpZiAoaXNMaW5rUHJlZmV0Y2gobm9kZSkpIG5vZGUucmVsID0gJyc7XG5cbiAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgKGVsZW1lbnQgYXMgYW55KS5uZXh0U2libGluZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3NyRG9tTm9kZXMuZm9yRWFjaCgobm9kZTogSFRNTEVsZW1lbnQpID0+XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQobm9kZSlcbiAgICAgICk7XG4gICAgfTtcbiAgICAvLyBbaHlkcmF0aW9uUmVmLmN1cnJlbnQsIHNzckRvbU5vZGVzXSBhcmUgZXhwZWN0ZWQgdG8gYmUgc3RhYmxlXG4gICAgLy8gd2l0aCB0aGUgc2Vjb25kIG9uZSBuZXZlciBjaGFuZ2luZyBieSBkZXNpZ24gYW5kIHRoZSBmaXJzdCBvbmUgY2hhbmdpbmcgYWZ0ZXIgZmlyc3QgcmVuZGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGh5ZHJhdGlvblJlZjtcbn07XG5cbmV4cG9ydCB0eXBlIFBsYWNlaG9sZGVyRmFsbGJhY2tSZW5kZXJQcm9wcyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgY29udGVudDogSFRNTEVsZW1lbnRbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBQbGFjZWhvbGRlckZhbGxiYWNrUmVuZGVyID0gKHtcbiAgaWQsXG4gIGNvbnRlbnQsXG59OiBQbGFjZWhvbGRlckZhbGxiYWNrUmVuZGVyUHJvcHMpID0+IHtcbiAgY29uc3QgcGxhY2Vob2xkZXJSZWYgPSB1c2VQbGFjZWhvbGRlclJlbmRlcihpZCwgY29udGVudCk7XG5cbiAgcmV0dXJuIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgZGF0YS1sYXp5LWJlZ2luPXtpZH0gcmVmPXtwbGFjZWhvbGRlclJlZn0gLz47XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBdUQsU0FBQUMseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUgsd0JBQUFHLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEs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