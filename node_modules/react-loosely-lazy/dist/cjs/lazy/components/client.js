"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComponentClient = createComponentClient;
var _react = _interopRequireWildcard(require("react"));
var _config = require("../../config");
var _constants = require("../../constants");
var _lazyWait = require("../../lazy-wait");
var _phase = require("../../phase");
var _suspense = require("../../suspense");
var _constants2 = require("../constants");
var _errors = require("../errors");
var _render = require("../placeholders/render");
var _hydrate = require("../placeholders/hydrate");
var _preload = require("../preload");
var _profiler = require("../../profiler");
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function createComponentClient({
  defer,
  deferred,
  dataLazyId,
  moduleId
}) {
  const {
    requestIdleCallback = setTimeout
  } = window;
  const ResolvedLazy = /*#__PURE__*/(0, _react.lazy)(() => deferred.promise);
  return props => {
    // use a single piece of state to hold info about progress or eventually
    // throw an error. We do change it via direct mutation as re-renders
    // break Suspense in React 18, making it lose hydration state
    const [status, bubbleError] = (0, _react.useState)(() => ({
      noWait: undefined,
      phase: defer === _constants.PHASE.AFTER_PAINT ? false : true,
      preloaded: defer === _constants.PHASE.AFTER_PAINT ? false : true,
      started: false
    }));
    const profiler = (0, _react.useContext)(_profiler.ProfilerContext).current;
    const load = () => {
      if (status.started || !status.phase || !status.noWait) {
        return;
      }
      status.started = true;
      let onResolve;
      if (profiler) {
        const eventInfo = {
          identifier: moduleId
        };
        onResolve = () => {
          profiler.onLoadComplete(eventInfo);
        };
        profiler.onLoadStart(eventInfo);
      }
      const result = deferred.start().catch(err => {
        // Throw the error within the component lifecycle
        // refer to https://github.com/facebook/react/issues/11409
        bubbleError(() => {
          throw (0, _errors.createLoaderError)(err);
        });
      });
      if (onResolve) {
        result.then(onResolve);
      }
    };

    // Subscribe to LazyWait context, triggering load when until is true
    (0, _utils.useSubscription)({
      context: _lazyWait.WaitContext,
      load,
      onValue: v => status.noWait = v === 1
    });
    if (defer === _constants.PHASE.AFTER_PAINT) {
      // Subscribe to LazyPhase context, triggering load when own phase starts
      (0, _utils.useSubscription)({
        context: _phase.LazyPhaseContext,
        load,
        onValue: v => status.phase = v >= defer
      });

      // Schedule preloading as will be needed soon
      (0, _react.useMemo)(() => {
        if (!status.preloaded) {
          status.preloaded = true;
          requestIdleCallback(() => {
            if (status.started) return;
            (0, _preload.preloadAsset)({
              loader: deferred.preload,
              moduleId,
              priority: _constants2.PRIORITY.LOW
            });
          });
        }
      }, [status]);
    }
    const {
      setFallback
    } = (0, _react.useContext)(_suspense.LazySuspenseContext);
    (0, _react.useMemo)(() => {
      // find SSR content (or fallbacks) wrapped in inputs based on lazyId
      const content = (_constants.COLLECTED.get(dataLazyId) || []).shift();
      if (!content) return;

      // override Suspense fallback with magic input wrappers
      const component = (0, _config.getConfig)().mode === _config.MODE.RENDER ? /*#__PURE__*/_react.default.createElement(_render.PlaceholderFallbackRender, {
        id: dataLazyId,
        content: content
      }) : /*#__PURE__*/_react.default.createElement(_hydrate.PlaceholderFallbackHydrate, {
        id: dataLazyId,
        content: content
      });
      setFallback(component);
    }, [setFallback]);
    return /*#__PURE__*/_react.default.createElement(ResolvedLazy, props);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,