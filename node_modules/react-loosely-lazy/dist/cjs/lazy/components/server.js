"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComponentServer = createComponentServer;
var _manifest = require("@react-loosely-lazy/manifest");
var _react = _interopRequireWildcard(require("react"));
var _config = require("../../config");
var _constants = require("../../constants");
var _suspense = require("../../suspense");
var _utils = require("../../utils");
var _errors = require("../errors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function load(moduleId, loader) {
  try {
    return (0, _utils.getExport)(loader());
  } catch (err) {
    throw (0, _errors.createLoaderError)(err);
  }
}
function createComponentServer({
  dataLazyId,
  defer,
  loader,
  moduleId,
  ssr
}) {
  return props => {
    var _getAssetUrlsFromId;
    const Resolved = ssr ? load(moduleId, loader) : null;
    const {
      fallback
    } = (0, _react.useContext)(_suspense.LazySuspenseContext);
    const {
      crossOrigin,
      manifest
    } = (0, _config.getConfig)();
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
      type: "hidden",
      "data-lazy-begin": dataLazyId
    }), defer !== _constants.PHASE.LAZY && ((_getAssetUrlsFromId = (0, _manifest.getAssetUrlsFromId)(manifest, moduleId)) === null || _getAssetUrlsFromId === void 0 ? void 0 : _getAssetUrlsFromId.map(url => /*#__PURE__*/_react.default.createElement("link", {
      key: url,
      rel: defer === _constants.PHASE.PAINT ? 'preload' : 'prefetch',
      href: url,
      crossOrigin: crossOrigin,
      as: "script"
    }))), Resolved ? /*#__PURE__*/_react.default.createElement(Resolved, props) : fallback, /*#__PURE__*/_react.default.createElement("input", {
      type: "hidden",
      "data-lazy-end": dataLazyId
    }));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWFuaWZlc3QiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfY29uZmlnIiwiX2NvbnN0YW50cyIsIl9zdXNwZW5zZSIsIl91dGlscyIsIl9lcnJvcnMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJsb2FkIiwibW9kdWxlSWQiLCJsb2FkZXIiLCJnZXRFeHBvcnQiLCJlcnIiLCJjcmVhdGVMb2FkZXJFcnJvciIsImNyZWF0ZUNvbXBvbmVudFNlcnZlciIsImRhdGFMYXp5SWQiLCJkZWZlciIsInNzciIsInByb3BzIiwiX2dldEFzc2V0VXJsc0Zyb21JZCIsIlJlc29sdmVkIiwiZmFsbGJhY2siLCJ1c2VDb250ZXh0IiwiTGF6eVN1c3BlbnNlQ29udGV4dCIsImNyb3NzT3JpZ2luIiwibWFuaWZlc3QiLCJnZXRDb25maWciLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJ0eXBlIiwiUEhBU0UiLCJMQVpZIiwiZ2V0QXNzZXRVcmxzRnJvbUlkIiwibWFwIiwidXJsIiwia2V5IiwicmVsIiwiUEFJTlQiLCJocmVmIiwiYXMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGF6eS9jb21wb25lbnRzL3NlcnZlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXNzZXRVcmxzRnJvbUlkIH0gZnJvbSAnQHJlYWN0LWxvb3NlbHktbGF6eS9tYW5pZmVzdCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50UHJvcHMsIENvbXBvbmVudFR5cGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBQSEFTRSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBMYXp5U3VzcGVuc2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vc3VzcGVuc2UnO1xuaW1wb3J0IHsgZ2V0RXhwb3J0IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5pbXBvcnQgeyBjcmVhdGVMb2FkZXJFcnJvciB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBTZXJ2ZXJMb2FkZXIgfSBmcm9tICcuLi9sb2FkZXInO1xuXG5mdW5jdGlvbiBsb2FkPEM+KG1vZHVsZUlkOiBzdHJpbmcsIGxvYWRlcjogU2VydmVyTG9hZGVyPEM+KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdldEV4cG9ydChsb2FkZXIoKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IGNyZWF0ZUxvYWRlckVycm9yKGVycik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudFNlcnZlcjxDIGV4dGVuZHMgQ29tcG9uZW50VHlwZTxhbnk+Pih7XG4gIGRhdGFMYXp5SWQsXG4gIGRlZmVyLFxuICBsb2FkZXIsXG4gIG1vZHVsZUlkLFxuICBzc3IsXG59OiB7XG4gIGRhdGFMYXp5SWQ6IHN0cmluZztcbiAgZGVmZXI6IG51bWJlcjtcbiAgbG9hZGVyOiBTZXJ2ZXJMb2FkZXI8Qz47XG4gIG1vZHVsZUlkOiBzdHJpbmc7XG4gIHNzcjogYm9vbGVhbjtcbn0pIHtcbiAgcmV0dXJuIChwcm9wczogQ29tcG9uZW50UHJvcHM8Qz4pID0+IHtcbiAgICBjb25zdCBSZXNvbHZlZCA9IHNzciA/IGxvYWQobW9kdWxlSWQsIGxvYWRlcikgOiBudWxsO1xuICAgIGNvbnN0IHsgZmFsbGJhY2sgfSA9IHVzZUNvbnRleHQoTGF6eVN1c3BlbnNlQ29udGV4dCk7XG4gICAgY29uc3QgeyBjcm9zc09yaWdpbiwgbWFuaWZlc3QgfSA9IGdldENvbmZpZygpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgZGF0YS1sYXp5LWJlZ2luPXtkYXRhTGF6eUlkfSAvPlxuICAgICAgICB7ZGVmZXIgIT09IFBIQVNFLkxBWlkgJiZcbiAgICAgICAgICBnZXRBc3NldFVybHNGcm9tSWQobWFuaWZlc3QsIG1vZHVsZUlkKT8ubWFwKHVybCA9PiAoXG4gICAgICAgICAgICA8bGlua1xuICAgICAgICAgICAgICBrZXk9e3VybH1cbiAgICAgICAgICAgICAgcmVsPXtkZWZlciA9PT0gUEhBU0UuUEFJTlQgPyAncHJlbG9hZCcgOiAncHJlZmV0Y2gnfVxuICAgICAgICAgICAgICBocmVmPXt1cmx9XG4gICAgICAgICAgICAgIGNyb3NzT3JpZ2luPXtjcm9zc09yaWdpbn1cbiAgICAgICAgICAgICAgYXM9XCJzY3JpcHRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAge1Jlc29sdmVkID8gPFJlc29sdmVkIHsuLi5wcm9wc30gLz4gOiBmYWxsYmFja31cbiAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBkYXRhLWxhenktZW5kPXtkYXRhTGF6eUlkfSAvPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBR0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssU0FBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sTUFBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sT0FBQSxHQUFBUCxPQUFBO0FBQThDLFNBQUFRLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLENBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFQLHdCQUFBTyxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsQ0FBQUgsT0FBQSxHQUFBTCxDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUc5QyxTQUFTVyxJQUFJQSxDQUFJQyxRQUFnQixFQUFFQyxNQUF1QixFQUFFO0VBQzFELElBQUk7SUFDRixPQUFPLElBQUFDLGdCQUFTLEVBQUNELE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDNUIsQ0FBQyxDQUFDLE9BQU9FLEdBQUcsRUFBRTtJQUNaLE1BQU0sSUFBQUMseUJBQWlCLEVBQUNELEdBQUcsQ0FBQztFQUM5QjtBQUNGO0FBRU8sU0FBU0UscUJBQXFCQSxDQUErQjtFQUNsRUMsVUFBVTtFQUNWQyxLQUFLO0VBQ0xOLE1BQU07RUFDTkQsUUFBUTtFQUNSUTtBQU9GLENBQUMsRUFBRTtFQUNELE9BQVFDLEtBQXdCLElBQUs7SUFBQSxJQUFBQyxtQkFBQTtJQUNuQyxNQUFNQyxRQUFRLEdBQUdILEdBQUcsR0FBR1QsSUFBSSxDQUFDQyxRQUFRLEVBQUVDLE1BQU0sQ0FBQyxHQUFHLElBQUk7SUFDcEQsTUFBTTtNQUFFVztJQUFTLENBQUMsR0FBRyxJQUFBQyxpQkFBVSxFQUFDQyw2QkFBbUIsQ0FBQztJQUNwRCxNQUFNO01BQUVDLFdBQVc7TUFBRUM7SUFBUyxDQUFDLEdBQUcsSUFBQUMsaUJBQVMsRUFBQyxDQUFDO0lBRTdDLG9CQUNFN0MsTUFBQSxDQUFBYSxPQUFBLENBQUFpQyxhQUFBLENBQUE5QyxNQUFBLENBQUFhLE9BQUEsQ0FBQWtDLFFBQUEscUJBQ0UvQyxNQUFBLENBQUFhLE9BQUEsQ0FBQWlDLGFBQUE7TUFBT0UsSUFBSSxFQUFDLFFBQVE7TUFBQyxtQkFBaUJkO0lBQVcsQ0FBRSxDQUFDLEVBQ25EQyxLQUFLLEtBQUtjLGdCQUFLLENBQUNDLElBQUksTUFBQVosbUJBQUEsR0FDbkIsSUFBQWEsNEJBQWtCLEVBQUNQLFFBQVEsRUFBRWhCLFFBQVEsQ0FBQyxjQUFBVSxtQkFBQSx1QkFBdENBLG1CQUFBLENBQXdDYyxHQUFHLENBQUNDLEdBQUcsaUJBQzdDckQsTUFBQSxDQUFBYSxPQUFBLENBQUFpQyxhQUFBO01BQ0VRLEdBQUcsRUFBRUQsR0FBSTtNQUNURSxHQUFHLEVBQUVwQixLQUFLLEtBQUtjLGdCQUFLLENBQUNPLEtBQUssR0FBRyxTQUFTLEdBQUcsVUFBVztNQUNwREMsSUFBSSxFQUFFSixHQUFJO01BQ1ZWLFdBQVcsRUFBRUEsV0FBWTtNQUN6QmUsRUFBRSxFQUFDO0lBQVEsQ0FDWixDQUNGLENBQUMsR0FDSG5CLFFBQVEsZ0JBQUd2QyxNQUFBLENBQUFhLE9BQUEsQ0FBQWlDLGFBQUEsQ0FBQ1AsUUFBUSxFQUFLRixLQUFRLENBQUMsR0FBR0csUUFBUSxlQUM5Q3hDLE1BQUEsQ0FBQWEsT0FBQSxDQUFBaUMsYUFBQTtNQUFPRSxJQUFJLEVBQUMsUUFBUTtNQUFDLGlCQUFlZDtJQUFXLENBQUUsQ0FDakQsQ0FBQztFQUVQLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==