"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loaderPreloadStrategy = loaderPreloadStrategy;
exports.manifestPreloadStrategy = manifestPreloadStrategy;
exports.preloadAsset = preloadAsset;
exports.webpackPreloadStrategy = webpackPreloadStrategy;
var _manifest = require("@react-loosely-lazy/manifest");
var _cleanup = require("../../cleanup");
var _config = require("../../config");
var _utils = require("../../utils");
var _constants = require("../constants");
var _utils2 = require("./utils");
var _profiler = require("../../profiler");
function manifestPreloadStrategy({
  moduleId,
  rel
}) {
  const {
    manifest
  } = (0, _config.getConfig)();
  const assets = (0, _manifest.getAssetUrlsFromId)(manifest, moduleId);
  if (!assets) {
    throw new Error('Unsupported preload strategy');
  }
  const cleanupLinkTags = assets.map(url => (0, _utils2.insertLinkTag)(url, rel));
  return () => {
    for (const cleanupLinkTag of cleanupLinkTags) {
      cleanupLinkTag();
    }
  };
}
const fakePromise = {
  then: () => fakePromise,
  catch: () => fakePromise,
  finally: () => fakePromise
};
function webpackPreloadStrategy({
  loader,
  rel
}) {
  if (typeof __webpack_require__ === 'undefined' || typeof __webpack_get_script_filename__ === 'undefined') throw new Error('Unsupported preload strategy');

  // Replace requireEnsure to create link tags instead of scripts
  const requireEnsure = __webpack_require__.e;
  const cleanupLinkTags = [];
  __webpack_require__.e = function requirePreload(chunkId) {
    const href = __webpack_get_script_filename__(chunkId);
    cleanupLinkTags.push((0, _utils2.insertLinkTag)(href, rel));
    return fakePromise;
  };
  try {
    loader();
  } catch (err) {
    // Ignore any errors
  }

  // Restore real webpack require ensure
  __webpack_require__.e = requireEnsure;
  return () => {
    for (const cleanupLinkTag of cleanupLinkTags) {
      cleanupLinkTag();
    }
  };
}
function loaderPreloadStrategy({
  loader
}) {
  loader();
  return _cleanup.noopCleanup;
}
function preloadAsset({
  loader,
  moduleId,
  priority
}) {
  var _GlobalReactLooselyLa;
  if ((0, _utils.isNodeEnvironment)()) return _cleanup.noopCleanup;
  (_GlobalReactLooselyLa = _profiler.GlobalReactLooselyLazyProfiler.current) === null || _GlobalReactLooselyLa === void 0 || _GlobalReactLooselyLa.onPreload(moduleId, priority);
  const rel = priority === _constants.PRIORITY.HIGH ? 'preload' : 'prefetch';
  const preloadStrategies = [manifestPreloadStrategy, webpackPreloadStrategy, loaderPreloadStrategy];
  for (const strategy of preloadStrategies) {
    try {
      return strategy({
        loader,
        moduleId,
        rel
      });
    } catch (_) {
      // Try next strategy...
    }
  }
  return _cleanup.noopCleanup;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,