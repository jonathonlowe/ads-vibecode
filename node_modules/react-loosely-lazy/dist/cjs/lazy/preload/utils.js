"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertLinkTag = insertLinkTag;
var _profiler = require("../../profiler");
var _cleanup = require("../../cleanup");
var _config = require("../../config");
function insertLinkTag(href, rel) {
  var _document$head;
  // Skip if already preloaded, prefetched, or loaded
  if (document.querySelector(`link[href="${href}"]`) || document.querySelector(`script[src="${href}"]`)) return _cleanup.noopCleanup;
  const {
    crossOrigin
  } = (0, _config.getConfig)();
  const link = document.createElement('link');
  link.rel = rel;
  link.as = 'script';
  if (crossOrigin) link.crossOrigin = crossOrigin;
  link.href = href;
  const profiler = _profiler.GlobalReactLooselyLazyProfiler.current;
  let removableListener = null;
  if (profiler) {
    const eventInfo = {
      identifier: href
    };
    const listener = () => {
      link.removeEventListener('onload', listener);
      removableListener = null;
      profiler.onLoadComplete(eventInfo);
    };
    link.addEventListener('onload', listener);
    removableListener = listener;
    profiler.onLoadStart(eventInfo);
  }
  (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(link);
  return () => {
    // Remove the link if it is still in the document head
    if (link.parentNode === document.head) {
      var _document$head2;
      (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(link);
    }
    if (removableListener) {
      link.removeEventListener('onload', removableListener);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvZmlsZXIiLCJyZXF1aXJlIiwiX2NsZWFudXAiLCJfY29uZmlnIiwiaW5zZXJ0TGlua1RhZyIsImhyZWYiLCJyZWwiLCJfZG9jdW1lbnQkaGVhZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm5vb3BDbGVhbnVwIiwiY3Jvc3NPcmlnaW4iLCJnZXRDb25maWciLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImFzIiwicHJvZmlsZXIiLCJHbG9iYWxSZWFjdExvb3NlbHlMYXp5UHJvZmlsZXIiLCJjdXJyZW50IiwicmVtb3ZhYmxlTGlzdGVuZXIiLCJldmVudEluZm8iLCJpZGVudGlmaWVyIiwibGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Mb2FkQ29tcGxldGUiLCJhZGRFdmVudExpc3RlbmVyIiwib25Mb2FkU3RhcnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwiX2RvY3VtZW50JGhlYWQyIiwicmVtb3ZlQ2hpbGQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGF6eS9wcmVsb2FkL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdsb2JhbFJlYWN0TG9vc2VseUxhenlQcm9maWxlciB9IGZyb20gJy4uLy4uL3Byb2ZpbGVyJztcbmltcG9ydCB7IG5vb3BDbGVhbnVwIH0gZnJvbSAnLi4vLi4vY2xlYW51cCc7XG5pbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0TGlua1RhZyhocmVmOiBzdHJpbmcsIHJlbDogc3RyaW5nKSB7XG4gIC8vIFNraXAgaWYgYWxyZWFkeSBwcmVsb2FkZWQsIHByZWZldGNoZWQsIG9yIGxvYWRlZFxuICBpZiAoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgbGlua1tocmVmPVwiJHtocmVmfVwiXWApIHx8XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz1cIiR7aHJlZn1cIl1gKVxuICApXG4gICAgcmV0dXJuIG5vb3BDbGVhbnVwO1xuXG4gIGNvbnN0IHsgY3Jvc3NPcmlnaW4gfSA9IGdldENvbmZpZygpO1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gIGxpbmsucmVsID0gcmVsO1xuICBsaW5rLmFzID0gJ3NjcmlwdCc7XG4gIGlmIChjcm9zc09yaWdpbikgbGluay5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuICBsaW5rLmhyZWYgPSBocmVmO1xuXG4gIGNvbnN0IHByb2ZpbGVyID0gR2xvYmFsUmVhY3RMb29zZWx5TGF6eVByb2ZpbGVyLmN1cnJlbnQ7XG4gIGxldCByZW1vdmFibGVMaXN0ZW5lcjogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIGlmIChwcm9maWxlcikge1xuICAgIGNvbnN0IGV2ZW50SW5mbyA9IHsgaWRlbnRpZmllcjogaHJlZiB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgbGluay5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxvYWQnLCBsaXN0ZW5lcik7XG4gICAgICByZW1vdmFibGVMaXN0ZW5lciA9IG51bGw7XG4gICAgICBwcm9maWxlci5vbkxvYWRDb21wbGV0ZShldmVudEluZm8pO1xuICAgIH07XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdvbmxvYWQnLCBsaXN0ZW5lcik7XG4gICAgcmVtb3ZhYmxlTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICBwcm9maWxlci5vbkxvYWRTdGFydChldmVudEluZm8pO1xuICB9XG5cbiAgZG9jdW1lbnQuaGVhZD8uYXBwZW5kQ2hpbGQobGluayk7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICAvLyBSZW1vdmUgdGhlIGxpbmsgaWYgaXQgaXMgc3RpbGwgaW4gdGhlIGRvY3VtZW50IGhlYWRcbiAgICBpZiAobGluay5wYXJlbnROb2RlID09PSBkb2N1bWVudC5oZWFkKSB7XG4gICAgICBkb2N1bWVudC5oZWFkPy5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICB9XG4gICAgaWYgKHJlbW92YWJsZUxpc3RlbmVyKSB7XG4gICAgICBsaW5rLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubG9hZCcsIHJlbW92YWJsZUxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUVPLFNBQVNHLGFBQWFBLENBQUNDLElBQVksRUFBRUMsR0FBVyxFQUFFO0VBQUEsSUFBQUMsY0FBQTtFQUN2RDtFQUNBLElBQ0VDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFFLGNBQWFKLElBQUssSUFBRyxDQUFDLElBQzlDRyxRQUFRLENBQUNDLGFBQWEsQ0FBRSxlQUFjSixJQUFLLElBQUcsQ0FBQyxFQUUvQyxPQUFPSyxvQkFBVztFQUVwQixNQUFNO0lBQUVDO0VBQVksQ0FBQyxHQUFHLElBQUFDLGlCQUFTLEVBQUMsQ0FBQztFQUNuQyxNQUFNQyxJQUFJLEdBQUdMLFFBQVEsQ0FBQ00sYUFBYSxDQUFDLE1BQU0sQ0FBQztFQUUzQ0QsSUFBSSxDQUFDUCxHQUFHLEdBQUdBLEdBQUc7RUFDZE8sSUFBSSxDQUFDRSxFQUFFLEdBQUcsUUFBUTtFQUNsQixJQUFJSixXQUFXLEVBQUVFLElBQUksQ0FBQ0YsV0FBVyxHQUFHQSxXQUFXO0VBQy9DRSxJQUFJLENBQUNSLElBQUksR0FBR0EsSUFBSTtFQUVoQixNQUFNVyxRQUFRLEdBQUdDLHdDQUE4QixDQUFDQyxPQUFPO0VBQ3ZELElBQUlDLGlCQUFzQyxHQUFHLElBQUk7RUFDakQsSUFBSUgsUUFBUSxFQUFFO0lBQ1osTUFBTUksU0FBUyxHQUFHO01BQUVDLFVBQVUsRUFBRWhCO0lBQUssQ0FBQztJQUN0QyxNQUFNaUIsUUFBUSxHQUFHQSxDQUFBLEtBQU07TUFDckJULElBQUksQ0FBQ1UsbUJBQW1CLENBQUMsUUFBUSxFQUFFRCxRQUFRLENBQUM7TUFDNUNILGlCQUFpQixHQUFHLElBQUk7TUFDeEJILFFBQVEsQ0FBQ1EsY0FBYyxDQUFDSixTQUFTLENBQUM7SUFDcEMsQ0FBQztJQUNEUCxJQUFJLENBQUNZLGdCQUFnQixDQUFDLFFBQVEsRUFBRUgsUUFBUSxDQUFDO0lBQ3pDSCxpQkFBaUIsR0FBR0csUUFBUTtJQUM1Qk4sUUFBUSxDQUFDVSxXQUFXLENBQUNOLFNBQVMsQ0FBQztFQUNqQztFQUVBLENBQUFiLGNBQUEsR0FBQUMsUUFBUSxDQUFDbUIsSUFBSSxjQUFBcEIsY0FBQSxlQUFiQSxjQUFBLENBQWVxQixXQUFXLENBQUNmLElBQUksQ0FBQztFQUVoQyxPQUFPLE1BQU07SUFDWDtJQUNBLElBQUlBLElBQUksQ0FBQ2dCLFVBQVUsS0FBS3JCLFFBQVEsQ0FBQ21CLElBQUksRUFBRTtNQUFBLElBQUFHLGVBQUE7TUFDckMsQ0FBQUEsZUFBQSxHQUFBdEIsUUFBUSxDQUFDbUIsSUFBSSxjQUFBRyxlQUFBLGVBQWJBLGVBQUEsQ0FBZUMsV0FBVyxDQUFDbEIsSUFBSSxDQUFDO0lBQ2xDO0lBQ0EsSUFBSU0saUJBQWlCLEVBQUU7TUFDckJOLElBQUksQ0FBQ1UsbUJBQW1CLENBQUMsUUFBUSxFQUFFSixpQkFBaUIsQ0FBQztJQUN2RDtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==