"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_OPTIONS = void 0;
Object.defineProperty(exports, "PRIORITY", {
  enumerable: true,
  get: function () {
    return _constants2.PRIORITY;
  }
});
Object.defineProperty(exports, "isLoaderError", {
  enumerable: true,
  get: function () {
    return _errors.isLoaderError;
  }
});
exports.lazy = lazy;
exports.lazyAfterPaint = lazyAfterPaint;
exports.lazyForPaint = lazyForPaint;
var _manifest = require("@react-loosely-lazy/manifest");
var _config = require("../config");
var _constants = require("../constants");
var _utils = require("../utils");
var _constants2 = require("./constants");
var _client = require("./components/client");
var _server = require("./components/server");
var _deferred = require("./deferred");
var _preload = require("./preload");
var _retry = require("./retry");
var _errors = require("./errors");
function lazyProxy(loader, {
  defer = _constants.PHASE.PAINT,
  moduleId = '',
  ssr = true
} = {}) {
  const isServer = (0, _utils.isNodeEnvironment)();
  const dataLazyId = (0, _utils.hash)(moduleId);
  const LazyInternal = isServer ? (0, _server.createComponentServer)({
    dataLazyId,
    defer,
    loader: loader,
    moduleId,
    ssr
  }) : (0, _client.createComponentClient)({
    dataLazyId,
    defer,
    // We separate the preload from the retryable request, as we do not want the preload to contribute to retry
    // attempts, when the the loader fallback is used
    deferred: (0, _deferred.createDeferred)({
      loader: () => {
        const {
          retry: maxAttempts
        } = (0, _config.getConfig)();
        return (0, _retry.retry)(loader, {
          delay: _constants2.RETRY_DELAY,
          factor: _constants2.RETRY_FACTOR,
          maxAttempts
        });
      },
      preload: loader
    }),
    moduleId
  });
  LazyInternal.displayName = `Lazy(${(0, _utils.displayNameFromId)(moduleId)})`;

  /**
   * Allows getting module chunks urls
   */
  const getAssetUrls = () => {
    const {
      manifest
    } = (0, _config.getConfig)();
    return (0, _manifest.getAssetUrlsFromId)(manifest, moduleId);
  };

  /**
   * Allows imperatively preload/ prefetch the module chunk asset
   */
  const preload = priority => {
    const p = priority !== null && priority !== void 0 ? priority : defer === _constants.PHASE.PAINT ? _constants2.PRIORITY.HIGH : _constants2.PRIORITY.LOW;
    return (0, _preload.preloadAsset)({
      loader,
      moduleId,
      priority: p
    });
  };
  return Object.assign(LazyInternal, {
    getAssetUrls,
    preload
  });
}
const DEFAULT_OPTIONS = exports.DEFAULT_OPTIONS = {
  lazyForPaint: {
    ssr: true,
    defer: _constants.PHASE.PAINT
  },
  lazyAfterPaint: {
    ssr: true,
    defer: _constants.PHASE.AFTER_PAINT
  },
  lazy: {
    ssr: false,
    defer: _constants.PHASE.LAZY
  }
};
function lazyForPaint(loader, opts) {
  return lazyProxy(loader, {
    ...DEFAULT_OPTIONS.lazyForPaint,
    ...(opts || {})
  });
}
function lazyAfterPaint(loader, opts) {
  return lazyProxy(loader, {
    ...DEFAULT_OPTIONS.lazyAfterPaint,
    ...(opts || {})
  });
}
function lazy(loader, opts) {
  return lazyProxy(loader, {
    ...DEFAULT_OPTIONS.lazy,
    ...(opts || {})
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,