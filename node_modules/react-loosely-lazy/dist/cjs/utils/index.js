"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attrToProp = attrToProp;
exports.getExport = exports.displayNameFromId = void 0;
Object.defineProperty(exports, "hash", {
  enumerable: true,
  get: function () {
    return _hash.default;
  }
});
exports.isNodeEnvironment = void 0;
var _hash = _interopRequireDefault(require("./hash"));
const getExport = m => 'default' in m ? m.default : m;
exports.getExport = getExport;
const displayNameFromId = id => {
  const fName = id.split('/').slice(-3).join('/');
  return fName || 'Component';
};

/**
 * Checks to see if we are running inside a node environment or not.
 * Covers jsdom environments.
 *
 * @see https://github.com/jsdom/jsdom/issues/1537
 */
exports.displayNameFromId = displayNameFromId;
const isNodeEnvironment = () => {
  return globalThis !== globalThis.window;
};
exports.isNodeEnvironment = isNodeEnvironment;
function attrToProp(props, attr) {
  switch (attr.name) {
    case 'style':
      // ignore style attr as react does not allow string values
      break;
    case 'class':
      props.className = attr.value;
      break;
    case 'crossorigin':
      props.crossOrigin = attr.value;
      break;
    default:
      props[attr.name] = attr.value;
  }
  return props;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGFzaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZ2V0RXhwb3J0IiwibSIsImRlZmF1bHQiLCJleHBvcnRzIiwiZGlzcGxheU5hbWVGcm9tSWQiLCJpZCIsImZOYW1lIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJpc05vZGVFbnZpcm9ubWVudCIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJhdHRyVG9Qcm9wIiwicHJvcHMiLCJhdHRyIiwibmFtZSIsImNsYXNzTmFtZSIsInZhbHVlIiwiY3Jvc3NPcmlnaW4iXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBoYXNoIH0gZnJvbSAnLi9oYXNoJztcblxuZXhwb3J0IGNvbnN0IGdldEV4cG9ydCA9IChtOiBhbnkpID0+ICgnZGVmYXVsdCcgaW4gbSA/IG0uZGVmYXVsdCA6IG0pO1xuXG5leHBvcnQgY29uc3QgZGlzcGxheU5hbWVGcm9tSWQgPSAoaWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBmTmFtZSA9IGlkLnNwbGl0KCcvJykuc2xpY2UoLTMpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gZk5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG4vKipcbiAqIENoZWNrcyB0byBzZWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW5zaWRlIGEgbm9kZSBlbnZpcm9ubWVudCBvciBub3QuXG4gKiBDb3ZlcnMganNkb20gZW52aXJvbm1lbnRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8xNTM3XG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGVFbnZpcm9ubWVudCA9ICgpID0+IHtcbiAgcmV0dXJuIGdsb2JhbFRoaXMgIT09IGdsb2JhbFRoaXMud2luZG93O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGF0dHJUb1Byb3AocHJvcHM6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9LCBhdHRyOiBBdHRyKSB7XG4gIHN3aXRjaCAoYXR0ci5uYW1lKSB7XG4gICAgY2FzZSAnc3R5bGUnOlxuICAgICAgLy8gaWdub3JlIHN0eWxlIGF0dHIgYXMgcmVhY3QgZG9lcyBub3QgYWxsb3cgc3RyaW5nIHZhbHVlc1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2xhc3MnOlxuICAgICAgcHJvcHMuY2xhc3NOYW1lID0gYXR0ci52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Nyb3Nzb3JpZ2luJzpcbiAgICAgIHByb3BzLmNyb3NzT3JpZ2luID0gYXR0ci52YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcm9wc1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRU8sTUFBTUMsU0FBUyxHQUFJQyxDQUFNLElBQU0sU0FBUyxJQUFJQSxDQUFDLEdBQUdBLENBQUMsQ0FBQ0MsT0FBTyxHQUFHRCxDQUFFO0FBQUNFLE9BQUEsQ0FBQUgsU0FBQSxHQUFBQSxTQUFBO0FBRS9ELE1BQU1JLGlCQUFpQixHQUFJQyxFQUFVLElBQUs7RUFDL0MsTUFBTUMsS0FBSyxHQUFHRCxFQUFFLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUM7RUFFL0MsT0FBT0gsS0FBSyxJQUFJLFdBQVc7QUFDN0IsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQUgsT0FBQSxDQUFBQyxpQkFBQSxHQUFBQSxpQkFBQTtBQU1PLE1BQU1NLGlCQUFpQixHQUFHQSxDQUFBLEtBQU07RUFDckMsT0FBT0MsVUFBVSxLQUFLQSxVQUFVLENBQUNDLE1BQU07QUFDekMsQ0FBQztBQUFDVCxPQUFBLENBQUFPLGlCQUFBLEdBQUFBLGlCQUFBO0FBRUssU0FBU0csVUFBVUEsQ0FBQ0MsS0FBOEIsRUFBRUMsSUFBVSxFQUFFO0VBQ3JFLFFBQVFBLElBQUksQ0FBQ0MsSUFBSTtJQUNmLEtBQUssT0FBTztNQUNWO01BQ0E7SUFDRixLQUFLLE9BQU87TUFDVkYsS0FBSyxDQUFDRyxTQUFTLEdBQUdGLElBQUksQ0FBQ0csS0FBSztNQUM1QjtJQUNGLEtBQUssYUFBYTtNQUNoQkosS0FBSyxDQUFDSyxXQUFXLEdBQUdKLElBQUksQ0FBQ0csS0FBSztNQUM5QjtJQUNGO01BQ0VKLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUMsR0FBR0QsSUFBSSxDQUFDRyxLQUFLO0VBQ2pDO0VBRUEsT0FBT0osS0FBSztBQUNkIiwiaWdub3JlTGlzdCI6W119