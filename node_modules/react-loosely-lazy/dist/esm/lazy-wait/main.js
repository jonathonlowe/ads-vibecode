import React, { useContext, useEffect, useRef } from 'react';
import { WaitContext } from './context';
export const LazyWait = ({
  until,
  children
}) => {
  const closestWait = useContext(WaitContext);
  const value = useRef(until && closestWait.currentValue() ? 1 : 0);
  const subscribers = useRef(new Set());
  const api = useRef({
    subscribe: subscriber => {
      subscribers.current.add(subscriber);
      return () => {
        subscribers.current.delete(subscriber);
      };
    },
    currentValue: () => value.current
  });
  useEffect(() => {
    // Notify subscribers when until prop or closest until value changes
    const notify = () => {
      value.current = closestWait.currentValue() && until ? 1 : 0;
      subscribers.current.forEach(subscriber => subscriber());
    };
    notify();
    return closestWait.subscribe(notify);
  }, [closestWait, until]);
  return /*#__PURE__*/React.createElement(WaitContext.Provider, {
    value: api.current
  }, children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJXYWl0Q29udGV4dCIsIkxhenlXYWl0IiwidW50aWwiLCJjaGlsZHJlbiIsImNsb3Nlc3RXYWl0IiwidmFsdWUiLCJjdXJyZW50VmFsdWUiLCJzdWJzY3JpYmVycyIsIlNldCIsImFwaSIsInN1YnNjcmliZSIsInN1YnNjcmliZXIiLCJjdXJyZW50IiwiYWRkIiwiZGVsZXRlIiwibm90aWZ5IiwiZm9yRWFjaCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXp5LXdhaXQvbWFpbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHsgU3Vic2NyaXB0aW9uQ29udGV4dFZhbHVlIH0gZnJvbSAnLi4vbGF6eS90eXBlcyc7XG5cbmltcG9ydCB7IFdhaXRDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0JztcblxuZXhwb3J0IHR5cGUgTGF6eVdhaXRQcm9wcyA9IHtcbiAgdW50aWw6IGJvb2xlYW47XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgY29uc3QgTGF6eVdhaXQgPSAoeyB1bnRpbCwgY2hpbGRyZW4gfTogTGF6eVdhaXRQcm9wcykgPT4ge1xuICBjb25zdCBjbG9zZXN0V2FpdCA9IHVzZUNvbnRleHQoV2FpdENvbnRleHQpO1xuICBjb25zdCB2YWx1ZSA9IHVzZVJlZih1bnRpbCAmJiBjbG9zZXN0V2FpdC5jdXJyZW50VmFsdWUoKSA/IDEgOiAwKTtcbiAgY29uc3Qgc3Vic2NyaWJlcnMgPSB1c2VSZWY8U2V0PCgpID0+IHZvaWQ+PihuZXcgU2V0KCkpO1xuICBjb25zdCBhcGkgPSB1c2VSZWY8U3Vic2NyaXB0aW9uQ29udGV4dFZhbHVlPih7XG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmVyID0+IHtcbiAgICAgIHN1YnNjcmliZXJzLmN1cnJlbnQuYWRkKHN1YnNjcmliZXIpO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzdWJzY3JpYmVycy5jdXJyZW50LmRlbGV0ZShzdWJzY3JpYmVyKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjdXJyZW50VmFsdWU6ICgpID0+IHZhbHVlLmN1cnJlbnQsXG4gIH0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gTm90aWZ5IHN1YnNjcmliZXJzIHdoZW4gdW50aWwgcHJvcCBvciBjbG9zZXN0IHVudGlsIHZhbHVlIGNoYW5nZXNcbiAgICBjb25zdCBub3RpZnkgPSAoKSA9PiB7XG4gICAgICB2YWx1ZS5jdXJyZW50ID0gY2xvc2VzdFdhaXQuY3VycmVudFZhbHVlKCkgJiYgdW50aWwgPyAxIDogMDtcbiAgICAgIHN1YnNjcmliZXJzLmN1cnJlbnQuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoKSk7XG4gICAgfTtcblxuICAgIG5vdGlmeSgpO1xuXG4gICAgcmV0dXJuIGNsb3Nlc3RXYWl0LnN1YnNjcmliZShub3RpZnkpO1xuICB9LCBbY2xvc2VzdFdhaXQsIHVudGlsXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8V2FpdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2FwaS5jdXJyZW50fT57Y2hpbGRyZW59PC9XYWl0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssSUFBSUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sUUFBUSxPQUFPO0FBSzVELFNBQVNDLFdBQVcsUUFBUSxXQUFXO0FBT3ZDLE9BQU8sTUFBTUMsUUFBUSxHQUFHQSxDQUFDO0VBQUVDLEtBQUs7RUFBRUM7QUFBd0IsQ0FBQyxLQUFLO0VBQzlELE1BQU1DLFdBQVcsR0FBR1AsVUFBVSxDQUFDRyxXQUFXLENBQUM7RUFDM0MsTUFBTUssS0FBSyxHQUFHTixNQUFNLENBQUNHLEtBQUssSUFBSUUsV0FBVyxDQUFDRSxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDakUsTUFBTUMsV0FBVyxHQUFHUixNQUFNLENBQWtCLElBQUlTLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDdEQsTUFBTUMsR0FBRyxHQUFHVixNQUFNLENBQTJCO0lBQzNDVyxTQUFTLEVBQUVDLFVBQVUsSUFBSTtNQUN2QkosV0FBVyxDQUFDSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsVUFBVSxDQUFDO01BRW5DLE9BQU8sTUFBTTtRQUNYSixXQUFXLENBQUNLLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDSCxVQUFVLENBQUM7TUFDeEMsQ0FBQztJQUNILENBQUM7SUFDREwsWUFBWSxFQUFFQSxDQUFBLEtBQU1ELEtBQUssQ0FBQ087RUFDNUIsQ0FBQyxDQUFDO0VBRUZkLFNBQVMsQ0FBQyxNQUFNO0lBQ2Q7SUFDQSxNQUFNaUIsTUFBTSxHQUFHQSxDQUFBLEtBQU07TUFDbkJWLEtBQUssQ0FBQ08sT0FBTyxHQUFHUixXQUFXLENBQUNFLFlBQVksQ0FBQyxDQUFDLElBQUlKLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQztNQUMzREssV0FBVyxDQUFDSyxPQUFPLENBQUNJLE9BQU8sQ0FBQ0wsVUFBVSxJQUFJQSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFREksTUFBTSxDQUFDLENBQUM7SUFFUixPQUFPWCxXQUFXLENBQUNNLFNBQVMsQ0FBQ0ssTUFBTSxDQUFDO0VBQ3RDLENBQUMsRUFBRSxDQUFDWCxXQUFXLEVBQUVGLEtBQUssQ0FBQyxDQUFDO0VBRXhCLG9CQUNFTixLQUFBLENBQUFxQixhQUFBLENBQUNqQixXQUFXLENBQUNrQixRQUFRO0lBQUNiLEtBQUssRUFBRUksR0FBRyxDQUFDRztFQUFRLEdBQUVULFFBQStCLENBQUM7QUFFL0UsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==