import React, { Component, Suspense, useLayoutEffect } from 'react';
import { isNodeEnvironment } from '../utils';
import { LazySuspenseContext } from './context';
/**
 * This component implements a multi step system in order to be consumed on SSR
 * and still allow hydration and render a suspense boundary without having React
 * throw away the SSR content or complaining that the html code does not match.
 *
 * Most of the behaciour is implemented by communicating via context with the
 * lazy child. The lazy component is indeed responsible of collecting its own
 * SSR output and let this suspense alternative render it as fallback.
 *
 * To be clear, it does not render Suspense on the server: it only renders
 * a context provider in order to pass the fallback down to the child being
 * rendered if the lazy component is not there.
 *
 * Then on the client, during hydration, it renders the same provider with
 * two children: the first is the real Suspense component, that renders
 * the lazy child, catching any promise being thrown and wait; the second
 * is the hydration compliant component: it maintains SSR content until
 * the suspended promise is resolved.
 *
 * So during this step, if there is SSR content Suspense renders null and
 * the hydration fallback is rendered as sibling. If not, the lazy child
 * will signal to render the fallback prop, removing the hydration fallback.
 *
 * Once the suspended promise is resolved, Suspense will remove its own
 * fallback but will also tell LazySuspense to get rid of the hydration one.
 *
 */
export class LazySuspense extends Component {
  constructor(props) {
    super(props);
    this.state = {
      // Used on server to render fallback down the tree
      fallback: this.props.fallback,
      // Used on client to replace fallback with magic input
      setFallback: fallback => {
        if (this.hydrationFallback === fallback) return;
        this.hydrationFallback = fallback;
        // Schedule an update so we force switch from the sibling tree
        // back to the suspense boundary
        if (this.mounted) this.forceUpdate();
      }
    };
    this.hydrationFallback = null;
    this.mounted = false;
    this.DynamicFallback = ({
      children,
      outsideSuspense
    }) => {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useLayoutEffect(() => {
        return () => {
          // the effect cleanup is called by the Suspense boundary itself
          // when both Lazy AND the eventual promises thrown are done
          // so Suspense will re-render with actual content and we remove
          // the hydration fallback at the same time
          if (!outsideSuspense) this.state.setFallback(null);
        };
      }, [outsideSuspense]);
      return outsideSuspense ? children(this.hydrationFallback ? this.hydrationFallback : null) : children(this.hydrationFallback ? null : this.props.fallback);
    };
    this.DynamicFallback.displayName = 'DynamicFallback';
  }
  componentDidMount() {
    this.mounted = true;
  }
  renderFallback(outsideSuspense) {
    const {
      DynamicFallback
    } = this;

    // Use render prop component to allow switch to hydration fallback
    return /*#__PURE__*/React.createElement(DynamicFallback, {
      outsideSuspense: outsideSuspense
    }, fallback => fallback);
  }
  renderServer() {
    return /*#__PURE__*/React.createElement(LazySuspenseContext.Provider, {
      value: this.state
    }, this.props.children);
  }
  renderClient() {
    return /*#__PURE__*/React.createElement(LazySuspenseContext.Provider, {
      value: this.state
    }, /*#__PURE__*/React.createElement(Suspense, {
      fallback: this.renderFallback(false)
    }, this.props.children), (!this.mounted || this.hydrationFallback) && this.renderFallback(true));
  }
  render() {
    return isNodeEnvironment() ? this.renderServer() : this.renderClient();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIkNvbXBvbmVudCIsIlN1c3BlbnNlIiwidXNlTGF5b3V0RWZmZWN0IiwiaXNOb2RlRW52aXJvbm1lbnQiLCJMYXp5U3VzcGVuc2VDb250ZXh0IiwiTGF6eVN1c3BlbnNlIiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiZmFsbGJhY2siLCJzZXRGYWxsYmFjayIsImh5ZHJhdGlvbkZhbGxiYWNrIiwibW91bnRlZCIsImZvcmNlVXBkYXRlIiwiRHluYW1pY0ZhbGxiYWNrIiwiY2hpbGRyZW4iLCJvdXRzaWRlU3VzcGVuc2UiLCJkaXNwbGF5TmFtZSIsImNvbXBvbmVudERpZE1vdW50IiwicmVuZGVyRmFsbGJhY2siLCJjcmVhdGVFbGVtZW50IiwicmVuZGVyU2VydmVyIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInJlbmRlckNsaWVudCIsInJlbmRlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdXNwZW5zZS9jb21wb25lbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFN1c3BlbnNlLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBpc05vZGVFbnZpcm9ubWVudCB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgTGF6eVN1c3BlbnNlQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgeyBGYWxsYmFjaywgTGF6eVN1c3BlbnNlQ29udGV4dFR5cGUsIExhenlTdXNwZW5zZVByb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgTGF6eVN1c3BlbnNlU3RhdGUgPSBMYXp5U3VzcGVuc2VDb250ZXh0VHlwZTtcblxudHlwZSBEeW5hbWljRmFsbGJhY2tQcm9wcyA9IHtcbiAgY2hpbGRyZW4oZmFsbGJhY2s6IEZhbGxiYWNrKTogYW55O1xuICBvdXRzaWRlU3VzcGVuc2U6IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGltcGxlbWVudHMgYSBtdWx0aSBzdGVwIHN5c3RlbSBpbiBvcmRlciB0byBiZSBjb25zdW1lZCBvbiBTU1JcbiAqIGFuZCBzdGlsbCBhbGxvdyBoeWRyYXRpb24gYW5kIHJlbmRlciBhIHN1c3BlbnNlIGJvdW5kYXJ5IHdpdGhvdXQgaGF2aW5nIFJlYWN0XG4gKiB0aHJvdyBhd2F5IHRoZSBTU1IgY29udGVudCBvciBjb21wbGFpbmluZyB0aGF0IHRoZSBodG1sIGNvZGUgZG9lcyBub3QgbWF0Y2guXG4gKlxuICogTW9zdCBvZiB0aGUgYmVoYWNpb3VyIGlzIGltcGxlbWVudGVkIGJ5IGNvbW11bmljYXRpbmcgdmlhIGNvbnRleHQgd2l0aCB0aGVcbiAqIGxhenkgY2hpbGQuIFRoZSBsYXp5IGNvbXBvbmVudCBpcyBpbmRlZWQgcmVzcG9uc2libGUgb2YgY29sbGVjdGluZyBpdHMgb3duXG4gKiBTU1Igb3V0cHV0IGFuZCBsZXQgdGhpcyBzdXNwZW5zZSBhbHRlcm5hdGl2ZSByZW5kZXIgaXQgYXMgZmFsbGJhY2suXG4gKlxuICogVG8gYmUgY2xlYXIsIGl0IGRvZXMgbm90IHJlbmRlciBTdXNwZW5zZSBvbiB0aGUgc2VydmVyOiBpdCBvbmx5IHJlbmRlcnNcbiAqIGEgY29udGV4dCBwcm92aWRlciBpbiBvcmRlciB0byBwYXNzIHRoZSBmYWxsYmFjayBkb3duIHRvIHRoZSBjaGlsZCBiZWluZ1xuICogcmVuZGVyZWQgaWYgdGhlIGxhenkgY29tcG9uZW50IGlzIG5vdCB0aGVyZS5cbiAqXG4gKiBUaGVuIG9uIHRoZSBjbGllbnQsIGR1cmluZyBoeWRyYXRpb24sIGl0IHJlbmRlcnMgdGhlIHNhbWUgcHJvdmlkZXIgd2l0aFxuICogdHdvIGNoaWxkcmVuOiB0aGUgZmlyc3QgaXMgdGhlIHJlYWwgU3VzcGVuc2UgY29tcG9uZW50LCB0aGF0IHJlbmRlcnNcbiAqIHRoZSBsYXp5IGNoaWxkLCBjYXRjaGluZyBhbnkgcHJvbWlzZSBiZWluZyB0aHJvd24gYW5kIHdhaXQ7IHRoZSBzZWNvbmRcbiAqIGlzIHRoZSBoeWRyYXRpb24gY29tcGxpYW50IGNvbXBvbmVudDogaXQgbWFpbnRhaW5zIFNTUiBjb250ZW50IHVudGlsXG4gKiB0aGUgc3VzcGVuZGVkIHByb21pc2UgaXMgcmVzb2x2ZWQuXG4gKlxuICogU28gZHVyaW5nIHRoaXMgc3RlcCwgaWYgdGhlcmUgaXMgU1NSIGNvbnRlbnQgU3VzcGVuc2UgcmVuZGVycyBudWxsIGFuZFxuICogdGhlIGh5ZHJhdGlvbiBmYWxsYmFjayBpcyByZW5kZXJlZCBhcyBzaWJsaW5nLiBJZiBub3QsIHRoZSBsYXp5IGNoaWxkXG4gKiB3aWxsIHNpZ25hbCB0byByZW5kZXIgdGhlIGZhbGxiYWNrIHByb3AsIHJlbW92aW5nIHRoZSBoeWRyYXRpb24gZmFsbGJhY2suXG4gKlxuICogT25jZSB0aGUgc3VzcGVuZGVkIHByb21pc2UgaXMgcmVzb2x2ZWQsIFN1c3BlbnNlIHdpbGwgcmVtb3ZlIGl0cyBvd25cbiAqIGZhbGxiYWNrIGJ1dCB3aWxsIGFsc28gdGVsbCBMYXp5U3VzcGVuc2UgdG8gZ2V0IHJpZCBvZiB0aGUgaHlkcmF0aW9uIG9uZS5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBMYXp5U3VzcGVuc2UgZXh0ZW5kcyBDb21wb25lbnQ8XG4gIExhenlTdXNwZW5zZVByb3BzLFxuICBMYXp5U3VzcGVuc2VTdGF0ZVxuPiB7XG4gIHN0YXRlID0ge1xuICAgIC8vIFVzZWQgb24gc2VydmVyIHRvIHJlbmRlciBmYWxsYmFjayBkb3duIHRoZSB0cmVlXG4gICAgZmFsbGJhY2s6IHRoaXMucHJvcHMuZmFsbGJhY2ssXG4gICAgLy8gVXNlZCBvbiBjbGllbnQgdG8gcmVwbGFjZSBmYWxsYmFjayB3aXRoIG1hZ2ljIGlucHV0XG4gICAgc2V0RmFsbGJhY2s6IChmYWxsYmFjazogRmFsbGJhY2spID0+IHtcbiAgICAgIGlmICh0aGlzLmh5ZHJhdGlvbkZhbGxiYWNrID09PSBmYWxsYmFjaykgcmV0dXJuO1xuICAgICAgdGhpcy5oeWRyYXRpb25GYWxsYmFjayA9IGZhbGxiYWNrO1xuICAgICAgLy8gU2NoZWR1bGUgYW4gdXBkYXRlIHNvIHdlIGZvcmNlIHN3aXRjaCBmcm9tIHRoZSBzaWJsaW5nIHRyZWVcbiAgICAgIC8vIGJhY2sgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgICBpZiAodGhpcy5tb3VudGVkKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgfSxcbiAgfTtcblxuICBwcml2YXRlIGh5ZHJhdGlvbkZhbGxiYWNrOiBGYWxsYmFjayA9IG51bGw7XG4gIHByaXZhdGUgbW91bnRlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBMYXp5U3VzcGVuc2VQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLkR5bmFtaWNGYWxsYmFjay5kaXNwbGF5TmFtZSA9ICdEeW5hbWljRmFsbGJhY2snO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgRHluYW1pY0ZhbGxiYWNrOiBGdW5jdGlvbkNvbXBvbmVudDxEeW5hbWljRmFsbGJhY2tQcm9wcz4gPSAoe1xuICAgIGNoaWxkcmVuLFxuICAgIG91dHNpZGVTdXNwZW5zZSxcbiAgfSkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAvLyB0aGUgZWZmZWN0IGNsZWFudXAgaXMgY2FsbGVkIGJ5IHRoZSBTdXNwZW5zZSBib3VuZGFyeSBpdHNlbGZcbiAgICAgICAgLy8gd2hlbiBib3RoIExhenkgQU5EIHRoZSBldmVudHVhbCBwcm9taXNlcyB0aHJvd24gYXJlIGRvbmVcbiAgICAgICAgLy8gc28gU3VzcGVuc2Ugd2lsbCByZS1yZW5kZXIgd2l0aCBhY3R1YWwgY29udGVudCBhbmQgd2UgcmVtb3ZlXG4gICAgICAgIC8vIHRoZSBoeWRyYXRpb24gZmFsbGJhY2sgYXQgdGhlIHNhbWUgdGltZVxuICAgICAgICBpZiAoIW91dHNpZGVTdXNwZW5zZSkgdGhpcy5zdGF0ZS5zZXRGYWxsYmFjayhudWxsKTtcbiAgICAgIH07XG4gICAgfSwgW291dHNpZGVTdXNwZW5zZV0pO1xuXG4gICAgcmV0dXJuIG91dHNpZGVTdXNwZW5zZVxuICAgICAgPyBjaGlsZHJlbih0aGlzLmh5ZHJhdGlvbkZhbGxiYWNrID8gdGhpcy5oeWRyYXRpb25GYWxsYmFjayA6IG51bGwpXG4gICAgICA6IGNoaWxkcmVuKHRoaXMuaHlkcmF0aW9uRmFsbGJhY2sgPyBudWxsIDogdGhpcy5wcm9wcy5mYWxsYmFjayk7XG4gIH07XG5cbiAgcHJpdmF0ZSByZW5kZXJGYWxsYmFjayhvdXRzaWRlU3VzcGVuc2U6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB7IER5bmFtaWNGYWxsYmFjayB9ID0gdGhpcztcblxuICAgIC8vIFVzZSByZW5kZXIgcHJvcCBjb21wb25lbnQgdG8gYWxsb3cgc3dpdGNoIHRvIGh5ZHJhdGlvbiBmYWxsYmFja1xuICAgIHJldHVybiAoXG4gICAgICA8RHluYW1pY0ZhbGxiYWNrIG91dHNpZGVTdXNwZW5zZT17b3V0c2lkZVN1c3BlbnNlfT5cbiAgICAgICAgeyhmYWxsYmFjazogRmFsbGJhY2spID0+IGZhbGxiYWNrfVxuICAgICAgPC9EeW5hbWljRmFsbGJhY2s+XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyU2VydmVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGF6eVN1c3BlbnNlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dGhpcy5zdGF0ZX0+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9MYXp5U3VzcGVuc2VDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckNsaWVudCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExhenlTdXNwZW5zZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3RoaXMuc3RhdGV9PlxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9e3RoaXMucmVuZGVyRmFsbGJhY2soZmFsc2UpfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgeyghdGhpcy5tb3VudGVkIHx8IHRoaXMuaHlkcmF0aW9uRmFsbGJhY2spICYmIHRoaXMucmVuZGVyRmFsbGJhY2sodHJ1ZSl9XG4gICAgICA8L0xhenlTdXNwZW5zZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaXNOb2RlRW52aXJvbm1lbnQoKSA/IHRoaXMucmVuZGVyU2VydmVyKCkgOiB0aGlzLnJlbmRlckNsaWVudCgpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssSUFBSUMsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsUUFBUSxPQUFPO0FBR25FLFNBQVNDLGlCQUFpQixRQUFRLFVBQVU7QUFFNUMsU0FBU0MsbUJBQW1CLFFBQVEsV0FBVztBQVUvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1DLFlBQVksU0FBU0wsU0FBUyxDQUd6QztFQWlCQU0sV0FBV0EsQ0FBQ0MsS0FBd0IsRUFBRTtJQUNwQyxLQUFLLENBQUNBLEtBQUssQ0FBQztJQUFDLEtBakJmQyxLQUFLLEdBQUc7TUFDTjtNQUNBQyxRQUFRLEVBQUUsSUFBSSxDQUFDRixLQUFLLENBQUNFLFFBQVE7TUFDN0I7TUFDQUMsV0FBVyxFQUFHRCxRQUFrQixJQUFLO1FBQ25DLElB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