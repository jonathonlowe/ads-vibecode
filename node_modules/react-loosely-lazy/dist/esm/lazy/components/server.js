import { getAssetUrlsFromId } from '@react-loosely-lazy/manifest';
import React, { useContext } from 'react';
import { getConfig } from '../../config';
import { PHASE } from '../../constants';
import { LazySuspenseContext } from '../../suspense';
import { getExport } from '../../utils';
import { createLoaderError } from '../errors';
function load(moduleId, loader) {
  try {
    return getExport(loader());
  } catch (err) {
    throw createLoaderError(err);
  }
}
export function createComponentServer({
  dataLazyId,
  defer,
  loader,
  moduleId,
  ssr
}) {
  return props => {
    var _getAssetUrlsFromId;
    const Resolved = ssr ? load(moduleId, loader) : null;
    const {
      fallback
    } = useContext(LazySuspenseContext);
    const {
      crossOrigin,
      manifest
    } = getConfig();
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", {
      type: "hidden",
      "data-lazy-begin": dataLazyId
    }), defer !== PHASE.LAZY && ((_getAssetUrlsFromId = getAssetUrlsFromId(manifest, moduleId)) == null ? void 0 : _getAssetUrlsFromId.map(url => /*#__PURE__*/React.createElement("link", {
      key: url,
      rel: defer === PHASE.PAINT ? 'preload' : 'prefetch',
      href: url,
      crossOrigin: crossOrigin,
      as: "script"
    }))), Resolved ? /*#__PURE__*/React.createElement(Resolved, props) : fallback, /*#__PURE__*/React.createElement("input", {
      type: "hidden",
      "data-lazy-end": dataLazyId
    }));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBc3NldFVybHNGcm9tSWQiLCJSZWFjdCIsInVzZUNvbnRleHQiLCJnZXRDb25maWciLCJQSEFTRSIsIkxhenlTdXNwZW5zZUNvbnRleHQiLCJnZXRFeHBvcnQiLCJjcmVhdGVMb2FkZXJFcnJvciIsImxvYWQiLCJtb2R1bGVJZCIsImxvYWRlciIsImVyciIsImNyZWF0ZUNvbXBvbmVudFNlcnZlciIsImRhdGFMYXp5SWQiLCJkZWZlciIsInNzciIsInByb3BzIiwiX2dldEFzc2V0VXJsc0Zyb21JZCIsIlJlc29sdmVkIiwiZmFsbGJhY2siLCJjcm9zc09yaWdpbiIsIm1hbmlmZXN0IiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwidHlwZSIsIkxBWlkiLCJtYXAiLCJ1cmwiLCJrZXkiLCJyZWwiLCJQQUlOVCIsImhyZWYiLCJhcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXp5L2NvbXBvbmVudHMvc2VydmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBc3NldFVybHNGcm9tSWQgfSBmcm9tICdAcmVhY3QtbG9vc2VseS1sYXp5L21hbmlmZXN0JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRQcm9wcywgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IFBIQVNFIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IExhenlTdXNwZW5zZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zdXNwZW5zZSc7XG5pbXBvcnQgeyBnZXRFeHBvcnQgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmltcG9ydCB7IGNyZWF0ZUxvYWRlckVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFNlcnZlckxvYWRlciB9IGZyb20gJy4uL2xvYWRlcic7XG5cbmZ1bmN0aW9uIGxvYWQ8Qz4obW9kdWxlSWQ6IHN0cmluZywgbG9hZGVyOiBTZXJ2ZXJMb2FkZXI8Qz4pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ2V0RXhwb3J0KGxvYWRlcigpKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgY3JlYXRlTG9hZGVyRXJyb3IoZXJyKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50U2VydmVyPEMgZXh0ZW5kcyBDb21wb25lbnRUeXBlPGFueT4+KHtcbiAgZGF0YUxhenlJZCxcbiAgZGVmZXIsXG4gIGxvYWRlcixcbiAgbW9kdWxlSWQsXG4gIHNzcixcbn06IHtcbiAgZGF0YUxhenlJZDogc3RyaW5nO1xuICBkZWZlcjogbnVtYmVyO1xuICBsb2FkZXI6IFNlcnZlckxvYWRlcjxDPjtcbiAgbW9kdWxlSWQ6IHN0cmluZztcbiAgc3NyOiBib29sZWFuO1xufSkge1xuICByZXR1cm4gKHByb3BzOiBDb21wb25lbnRQcm9wczxDPikgPT4ge1xuICAgIGNvbnN0IFJlc29sdmVkID0gc3NyID8gbG9hZChtb2R1bGVJZCwgbG9hZGVyKSA6IG51bGw7XG4gICAgY29uc3QgeyBmYWxsYmFjayB9ID0gdXNlQ29udGV4dChMYXp5U3VzcGVuc2VDb250ZXh0KTtcbiAgICBjb25zdCB7IGNyb3NzT3JpZ2luLCBtYW5pZmVzdCB9ID0gZ2V0Q29uZmlnKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBkYXRhLWxhenktYmVnaW49e2RhdGFMYXp5SWR9IC8+XG4gICAgICAgIHtkZWZlciAhPT0gUEhBU0UuTEFaWSAmJlxuICAgICAgICAgIGdldEFzc2V0VXJsc0Zyb21JZChtYW5pZmVzdCwgbW9kdWxlSWQpPy5tYXAodXJsID0+IChcbiAgICAgICAgICAgIDxsaW5rXG4gICAgICAgICAgICAgIGtleT17dXJsfVxuICAgICAgICAgICAgICByZWw9e2RlZmVyID09PSBQSEFTRS5QQUlOVCA/ICdwcmVsb2FkJyA6ICdwcmVmZXRjaCd9XG4gICAgICAgICAgICAgIGhyZWY9e3VybH1cbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW49e2Nyb3NzT3JpZ2lufVxuICAgICAgICAgICAgICBhcz1cInNjcmlwdFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICB7UmVzb2x2ZWQgPyA8UmVzb2x2ZWQgey4uLnByb3BzfSAvPiA6IGZhbGxiYWNrfVxuICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGRhdGEtbGF6eS1lbmQ9e2RhdGFMYXp5SWR9IC8+XG4gICAgICA8Lz5cbiAgICApO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBa0IsUUFBUSw4QkFBOEI7QUFDakUsT0FBT0MsS0FBSyxJQUFJQyxVQUFVLFFBQVEsT0FBTztBQUd6QyxTQUFTQyxTQUFTLFFBQVEsY0FBYztBQUN4QyxTQUFTQyxLQUFLLFFBQVEsaUJBQWlCO0FBQ3ZDLFNBQVNDLG1CQUFtQixRQUFRLGdCQUFnQjtBQUNwRCxTQUFTQyxTQUFTLFFBQVEsYUFBYTtBQUV2QyxTQUFTQyxpQkFBaUIsUUFBUSxXQUFXO0FBRzdDLFNBQVNDLElBQUlBLENBQUlDLFFBQWdCLEVBQUVDLE1BQXVCLEVBQUU7RUFDMUQsSUFBSTtJQUNGLE9BQU9KLFNBQVMsQ0FBQ0ksTUFBTSxDQUFDLENBQUMsQ0FBQztFQUM1QixDQUFDLENBQUMsT0FBT0MsR0FBRyxFQUFFO0lBQ1osTUFBTUosaUJBQWlCLENBQUNJLEdBQUcsQ0FBQztFQUM5QjtBQUNGO0FBRUEsT0FBTyxTQUFTQyxxQkFBcUJBLENBQStCO0VBQ2xFQyxVQUFVO0VBQ1ZDLEtBQUs7RUFDTEosTUFBTTtFQUNORCxRQUFRO0VBQ1JNO0FBT0YsQ0FBQyxFQUFFO0VBQ0QsT0FBUUMsS0FBd0IsSUFBSztJQUFBLElBQUFDLG1CQUFBO0lBQ25DLE1BQU1DLFFBQVEsR0FBR0gsR0FBRyxHQUFHUCxJQUFJLENBQUNDLFFBQVEsRUFBRUMsTUFBTSxDQUFDLEdBQUcsSUFBSTtJQUNwRCxNQUFNO01BQUVTO0lBQVMsQ0FBQyxHQUFHakIsVUFBVSxDQUFDRyxtQkFBbUIsQ0FBQztJQUNwRCxNQUFNO01BQUVlLFdBQVc7TUFBRUM7SUFBUyxDQUFDLEdBQUdsQixTQUFTLENBQUMsQ0FBQztJQUU3QyxvQkFDRUYsS0FBQSxDQUFBcUIsYUFBQSxDQUFBckIsS0FBQSxDQUFBc0IsUUFBQSxxQkFDRXRCLEtBQUEsQ0FBQXFCLGFBQUE7TUFBT0UsSUFBSSxFQUFDLFFBQVE7TUFBQyxtQkFBaUJYO0lBQVcsQ0FBRSxDQUFDLEVBQ25EQyxLQUFLLEtBQUtWLEtBQUssQ0FBQ3FCLElBQUksTUFBQVIsbUJBQUEsR0FDbkJqQixrQkFBa0IsQ0FBQ3FCLFFBQVEsRUFBRVosUUFBUSxDQUFDLHFCQUF0Q1EsbUJBQUEsQ0FBd0NTLEdBQUcsQ0FBQ0MsR0FBRyxpQkFDN0MxQixLQUFBLENBQUFxQixhQUFBO01BQ0VNLEdBQUcsRUFBRUQsR0FBSTtNQUNURSxHQUFHLEVBQUVmLEtBQUssS0FBS1YsS0FBSyxDQUFDMEIsS0FBSyxHQUFHLFNBQVMsR0FBRyxVQUFXO01BQ3BEQyxJQUFJLEVBQUVKLEdBQUk7TUFDVlAsV0FBVyxFQUFFQSxXQUFZO01BQ3pCWSxFQUFFLEVBQUM7SUFBUSxDQUNaLENBQ0YsQ0FBQyxHQUNIZCxRQUFRLGdCQUFHakIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDSixRQUFRLEVBQUtGLEtBQVEsQ0FBQyxHQUFHRyxRQUFRLGVBQzlDbEIsS0FBQSxDQUFBcUIsYUFBQTtNQUFPRSxJQUFJLEVBQUMsUUFBUTtNQUFDLGlCQUFlWDtJQUFXLENBQUUsQ0FDakQsQ0FBQztFQUVQLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==