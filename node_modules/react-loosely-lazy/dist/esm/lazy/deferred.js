export const createDeferred = ({
  loader,
  preload
}) => {
  let resolve;
  const deferred = {
    promise: new Promise(res => {
      resolve = m => {
        let withDefault;
        deferred.result = m;
        if (!m.default) {
          withDefault = {
            default: m
          };
        }
        res(withDefault ? withDefault : m);
      };
    }),
    result: undefined,
    preload: function (_preload) {
      function preload() {
        return _preload.apply(this, arguments);
      }
      preload.toString = function () {
        return _preload.toString();
      };
      return preload;
    }(() => {
      if (deferred.result) {
        return;
      }
      preload().then(m => {
        deferred.result = m;
      }).catch(() => {
        // Do nothing...
      });
    }),
    start: () => {
      if (deferred.result) {
        resolve(deferred.result);
        return Promise.resolve();
      }

      // Make a new loader request when none have started or resolved yet
      return loader().then(resolve);
    }
  };
  return deferred;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVEZWZlcnJlZCIsImxvYWRlciIsInByZWxvYWQiLCJyZXNvbHZlIiwiZGVmZXJyZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlcyIsIm0iLCJ3aXRoRGVmYXVsdCIsInJlc3VsdCIsImRlZmF1bHQiLCJ1bmRlZmluZWQiLCJfcHJlbG9hZCIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJ0aGVuIiwiY2F0Y2giLCJzdGFydCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXp5L2RlZmVycmVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDbGllbnRMb2FkZXIsIEphdmFTY3JpcHRNb2R1bGUgfSBmcm9tICcuL2xvYWRlcic7XG5cbmV4cG9ydCB0eXBlIENyZWF0ZURlZmVycmVkT3B0aW9uczxDPiA9IHtcbiAgbG9hZGVyOiBDbGllbnRMb2FkZXI8Qz47XG4gIHByZWxvYWQ6IENsaWVudExvYWRlcjxDPjtcbn07XG5cbmV4cG9ydCB0eXBlIERlZmVycmVkPEM+ID0ge1xuICBwcmVsb2FkKCk6IHZvaWQ7XG4gIHByb21pc2U6IFByb21pc2U8SmF2YVNjcmlwdE1vZHVsZTxDPj47XG4gIHJlc3VsdDogSmF2YVNjcmlwdE1vZHVsZTxDPiB8IHZvaWQ7XG4gIHN0YXJ0KCk6IFByb21pc2U8dm9pZD47XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRGVmZXJyZWQgPSA8QyBleHRlbmRzIENvbXBvbmVudFR5cGU8YW55Pj4oe1xuICBsb2FkZXIsXG4gIHByZWxvYWQsXG59OiBDcmVhdGVEZWZlcnJlZE9wdGlvbnM8Qz4pOiBEZWZlcnJlZDxDPiA9PiB7XG4gIGxldCByZXNvbHZlOiAobTogYW55KSA9PiB2b2lkO1xuXG4gIGNvbnN0IGRlZmVycmVkID0ge1xuICAgIHByb21pc2U6IG5ldyBQcm9taXNlPEphdmFTY3JpcHRNb2R1bGU8Qz4+KHJlcyA9PiB7XG4gICAgICByZXNvbHZlID0gKG06IGFueSkgPT4ge1xuICAgICAgICBsZXQgd2l0aERlZmF1bHQ7XG4gICAgICAgIGRlZmVycmVkLnJlc3VsdCA9IG07XG5cbiAgICAgICAgaWYgKCFtLmRlZmF1bHQpIHtcbiAgICAgICAgICB3aXRoRGVmYXVsdCA9IHsgZGVmYXVsdDogbSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzKHdpdGhEZWZhdWx0ID8gd2l0aERlZmF1bHQgOiBtKTtcbiAgICAgIH07XG4gICAgfSksXG4gICAgcmVzdWx0OiB1bmRlZmluZWQsXG4gICAgcHJlbG9hZDogKCkgPT4ge1xuICAgICAgaWYgKGRlZmVycmVkLnJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZWxvYWQoKVxuICAgICAgICAudGhlbigobTogYW55KSA9PiB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzdWx0ID0gbTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAvLyBEbyBub3RoaW5nLi4uXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgc3RhcnQ6ICgpID0+IHtcbiAgICAgIGlmIChkZWZlcnJlZC5yZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZShkZWZlcnJlZC5yZXN1bHQpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBhIG5ldyBsb2FkZXIgcmVxdWVzdCB3aGVuIG5vbmUgaGF2ZSBzdGFydGVkIG9yIHJlc29sdmVkIHlldFxuICAgICAgcmV0dXJuIGxvYWRlcigpLnRoZW4ocmVzb2x2ZSk7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gZGVmZXJyZWQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFlQSxPQUFPLE1BQU1BLGNBQWMsR0FBR0EsQ0FBK0I7RUFDM0RDLE1BQU07RUFDTkM7QUFDd0IsQ0FBQyxLQUFrQjtFQUMzQyxJQUFJQyxPQUF5QjtFQUU3QixNQUFNQyxRQUFRLEdBQUc7SUFDZkMsT0FBTyxFQUFFLElBQUlDLE9BQU8sQ0FBc0JDLEdBQUcsSUFBSTtNQUMvQ0osT0FBTyxHQUFJSyxDQUFNLElBQUs7UUFDcEIsSUFBSUMsV0FBVztRQUNmTCxRQUFRLENBQUNNLE1BQU0sR0FBR0YsQ0FBQztRQUVuQixJQUFJLENBQUNBLENBQUMsQ0FBQ0csT0FBTyxFQUFFO1VBQ2RGLFdBQVcsR0FBRztZQUFFRSxPQUFPLEVBQUVIO1VBQUUsQ0FBQztRQUM5QjtRQUVBRCxHQUFHLENBQUNFLFdBQVcsR0FBR0EsV0FBVyxHQUFHRCxDQUFDLENBQUM7TUFDcEMsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGRSxNQUFNLEVBQUVFLFNBQVM7SUFDakJWLE9BQU8sWUFBQVcsUUFBQTtNQUFBLFNBQUFYLFFBQUE7UUFBQSxPQUFBVyxRQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtNQUFBO01BQUFiLE9BQUEsQ0FBQWMsUUFBQTtRQUFBLE9BQUFILFFBQUEsQ0FBQUcsUUFBQTtNQUFBO01BQUEsT0FBQWQsT0FBQTtJQUFBLEVBQUUsTUFBTTtNQUNiLElBQUlFLFFBQVEsQ0FBQ00sTUFBTSxFQUFFO1FBQ25CO01BQ0Y7TUFFQVIsT0FBTyxDQUFDLENBQUMsQ0FDTmUsSUFBSSxDQUFFVCxDQUFNLElBQUs7UUFDaEJKLFFBQVEsQ0FBQ00sTUFBTSxHQUFHRixDQUFDO01BQ3JCLENBQUMsQ0FBQyxDQUNEVSxLQUFLLENBQUMsTUFBTTtRQUNYO01BQUEsQ0FDRCxDQUFDO0lBQ04sQ0FBQztJQUNEQyxLQUFLLEVBQUVBLENBQUEsS0FBTTtNQUNYLElBQUlmLFFBQVEsQ0FBQ00sTUFBTSxFQUFFO1FBQ25CUCxPQUFPLENBQUNDLFFBQVEsQ0FBQ00sTUFBTSxDQUFDO1FBRXhCLE9BQU9KLE9BQU8sQ0FBQ0gsT0FBTyxDQUFDLENBQUM7TUFDMUI7O01BRUE7TUFDQSxPQUFPRixNQUFNLENBQUMsQ0FBQyxDQUFDZ0IsSUFBSSxDQUFDZCxPQUFPLENBQUM7SUFDL0I7RUFDRixDQUFDO0VBRUQsT0FBT0MsUUFBUTtBQUNqQixDQUFDIiwiaWdub3JlTGlzdCI6W119