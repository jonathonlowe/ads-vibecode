function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { getAssetUrlsFromId } from '@react-loosely-lazy/manifest';
import { getConfig } from '../config';
import { PHASE } from '../constants';
import { hash, displayNameFromId, isNodeEnvironment } from '../utils';
import { PRIORITY, RETRY_DELAY, RETRY_FACTOR } from './constants';
import { createComponentClient } from './components/client';
import { createComponentServer } from './components/server';
import { createDeferred } from './deferred';
import { preloadAsset } from './preload';
import { retry } from './retry';
export { PRIORITY };
function lazyProxy(_loader, {
  defer = PHASE.PAINT,
  moduleId = '',
  ssr = true
} = {}) {
  const isServer = isNodeEnvironment();
  const dataLazyId = hash(moduleId);
  const LazyInternal = isServer ? createComponentServer({
    dataLazyId,
    defer,
    loader: _loader,
    moduleId,
    ssr
  }) : createComponentClient({
    dataLazyId,
    defer,
    // We separate the preload from the retryable request, as we do not want the preload to contribute to retry
    // attempts, when the the loader fallback is used
    deferred: createDeferred({
      loader: () => {
        const {
          retry: maxAttempts
        } = getConfig();
        return retry(_loader, {
          delay: RETRY_DELAY,
          factor: RETRY_FACTOR,
          maxAttempts
        });
      },
      preload: _loader
    }),
    moduleId
  });
  LazyInternal.displayName = `Lazy(${displayNameFromId(moduleId)})`;

  /**
   * Allows getting module chunks urls
   */
  const getAssetUrls = () => {
    const {
      manifest
    } = getConfig();
    return getAssetUrlsFromId(manifest, moduleId);
  };

  /**
   * Allows imperatively preload/ prefetch the module chunk asset
   */
  const preload = priority => {
    const p = priority != null ? priority : defer === PHASE.PAINT ? PRIORITY.HIGH : PRIORITY.LOW;
    return preloadAsset({
      loader: _loader,
      moduleId,
      priority: p
    });
  };
  return Object.assign(LazyInternal, {
    getAssetUrls,
    preload
  });
}
export const DEFAULT_OPTIONS = {
  lazyForPaint: {
    ssr: true,
    defer: PHASE.PAINT
  },
  lazyAfterPaint: {
    ssr: true,
    defer: PHASE.AFTER_PAINT
  },
  lazy: {
    ssr: false,
    defer: PHASE.LAZY
  }
};
export function lazyForPaint(loader, opts) {
  return lazyProxy(loader, _extends({}, DEFAULT_OPTIONS.lazyForPaint, opts || {}));
}
export function lazyAfterPaint(loader, opts) {
  return lazyProxy(loader, _extends({}, DEFAULT_OPTIONS.lazyAfterPaint, opts || {}));
}
export function lazy(loader, opts) {
  return lazyProxy(loader, _extends({}, DEFAULT_OPTIONS.lazy, opts || {}));
}
export { isLoaderError } from './errors';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBc3NldFVybHNGcm9tSWQiLCJnZXRDb25maWciLCJQSEFTRSIsImhhc2giLCJkaXNwbGF5TmFtZUZyb21JZCIsImlzTm9kZUVudmlyb25tZW50IiwiUFJJT1JJVFkiLCJSRVRSWV9ERUxBWSIsIlJFVFJZX0ZBQ1RPUiIsImNyZWF0ZUNvbXBvbmVudENsaWVudCIsImNyZWF0ZUNvbXBvbmVudFNlcnZlciIsImNyZWF0ZURlZmVycmVkIiwicHJlbG9hZEFzc2V0IiwicmV0cnkiLCJsYXp5UHJveHkiLCJsb2FkZXIiLCJkZWZlciIsIlBBSU5UIiwibW9kdWxlSWQiLCJzc3IiLCJpc1NlcnZlciIsImRhdGFMYXp5SWQiLCJMYXp5SW50ZXJuYWwiLCJkZWZlcnJlZCIsIm1heEF0dGVtcHRzIiwiZGVsYXkiLCJmYWN0b3IiLCJwcmVsb2FkIiwiZGlzcGxheU5hbWUiLCJnZXRBc3NldFVybHMiLCJtYW5pZmVzdCIsInByaW9yaXR5IiwicCIsIkhJR0giLCJMT1ciLCJPYmplY3QiLCJhc3NpZ24iLCJERUZBVUxUX09QVElPTlMiLCJsYXp5Rm9yUGFpbnQiLCJsYXp5QWZ0ZXJQYWludCIsIkFGVEVSX1BBSU5UIiwibGF6eSIsIkxBWlkiLCJvcHRzIiwiX2V4dGVuZHMiLCJpc0xvYWRlckVycm9yIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xhenkvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFzc2V0VXJsc0Zyb21JZCB9IGZyb20gJ0ByZWFjdC1sb29zZWx5LWxhenkvbWFuaWZlc3QnO1xuaW1wb3J0IHsgQ29tcG9uZW50UHJvcHMsIENvbXBvbmVudFR5cGUsIEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgUEhBU0UgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgaGFzaCwgZGlzcGxheU5hbWVGcm9tSWQsIGlzTm9kZUVudmlyb25tZW50IH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5pbXBvcnQgeyBQUklPUklUWSwgUkVUUllfREVMQVksIFJFVFJZX0ZBQ1RPUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudENsaWVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jbGllbnQnO1xuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50U2VydmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlcnZlcic7XG5pbXBvcnQgeyBjcmVhdGVEZWZlcnJlZCB9IGZyb20gJy4vZGVmZXJyZWQnO1xuaW1wb3J0IHsgQ2xpZW50TG9hZGVyLCBMb2FkZXIsIFNlcnZlckxvYWRlciB9IGZyb20gJy4vbG9hZGVyJztcbmltcG9ydCB7IHByZWxvYWRBc3NldCB9IGZyb20gJy4vcHJlbG9hZCc7XG5pbXBvcnQgeyByZXRyeSB9IGZyb20gJy4vcmV0cnknO1xuaW1wb3J0IHR5cGUgeyBMYXp5T3B0aW9ucywgTGF6eUNvbXBvbmVudCwgUHJlbG9hZFByaW9yaXR5IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB7IFBSSU9SSVRZIH07XG5leHBvcnQgdHlwZSB7IExhenlPcHRpb25zLCBMYXp5Q29tcG9uZW50IH07XG5cbmZ1bmN0aW9uIGxhenlQcm94eTxDIGV4dGVuZHMgQ29tcG9uZW50VHlwZTxhbnk+PihcbiAgbG9hZGVyOiBMb2FkZXI8Qz4sXG4gIHsgZGVmZXIgPSBQSEFTRS5QQUlOVCwgbW9kdWxlSWQgPSAnJywgc3NyID0gdHJ1ZSB9OiBMYXp5T3B0aW9ucyA9IHt9XG4pOiBMYXp5Q29tcG9uZW50PEM+IHtcbiAgY29uc3QgaXNTZXJ2ZXIgPSBpc05vZGVFbnZpcm9ubWVudCgpO1xuICBjb25zdCBkYXRhTGF6eUlkID0gaGFzaChtb2R1bGVJZCk7XG5cbiAgY29uc3QgTGF6eUludGVybmFsOiBGdW5jdGlvbkNvbXBvbmVudDxDb21wb25lbnRQcm9wczxDPj4gPSBpc1NlcnZlclxuICAgID8gY3JlYXRlQ29tcG9uZW50U2VydmVyKHtcbiAgICAgICAgZGF0YUxhenlJZCxcbiAgICAgICAgZGVmZXIsXG4gICAgICAgIGxvYWRlcjogbG9hZGVyIGFzIFNlcnZlckxvYWRlcjxDPixcbiAgICAgICAgbW9kdWxlSWQsXG4gICAgICAgIHNzcixcbiAgICAgIH0pXG4gICAgOiBjcmVhdGVDb21wb25lbnRDbGllbnQoe1xuICAgICAgICBkYXRhTGF6eUlkLFxuICAgICAgICBkZWZlcixcbiAgICAgICAgLy8gV2Ugc2VwYXJhdGUgdGhlIHByZWxvYWQgZnJvbSB0aGUgcmV0cnlhYmxlIHJlcXVlc3QsIGFzIHdlIGRvIG5vdCB3YW50IHRoZSBwcmVsb2FkIHRvIGNvbnRyaWJ1dGUgdG8gcmV0cnlcbiAgICAgICAgLy8gYXR0ZW1wdHMsIHdoZW4gdGhlIHRoZSBsb2FkZXIgZmFsbGJhY2sgaXMgdXNlZFxuICAgICAgICBkZWZlcnJlZDogY3JlYXRlRGVmZXJyZWQoe1xuICAgICAgICAgIGxvYWRlcjogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyByZXRyeTogbWF4QXR0ZW1wdHMgfSA9IGdldENvbmZpZygpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmV0cnkobG9hZGVyIGFzIENsaWVudExvYWRlcjxDPiwge1xuICAgICAgICAgICAgICBkZWxheTogUkVUUllfREVMQVksXG4gICAgICAgICAgICAgIGZhY3RvcjogUkVUUllfRkFDVE9SLFxuICAgICAgICAgICAgICBtYXhBdHRlbXB0cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJlbG9hZDogbG9hZGVyIGFzIENsaWVudExvYWRlcjxDPixcbiAgICAgICAgfSksXG4gICAgICAgIG1vZHVsZUlkLFxuICAgICAgfSk7XG5cbiAgTGF6eUludGVybmFsLmRpc3BsYXlOYW1lID0gYExhenkoJHtkaXNwbGF5TmFtZUZyb21JZChtb2R1bGVJZCl9KWA7XG5cbiAgLyoqXG4gICAqIEFsbG93cyBnZXR0aW5nIG1vZHVsZSBjaHVua3MgdXJsc1xuICAgKi9cbiAgY29uc3QgZ2V0QXNzZXRVcmxzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbWFuaWZlc3QgfSA9IGdldENvbmZpZygpO1xuXG4gICAgcmV0dXJuIGdldEFzc2V0VXJsc0Zyb21JZChtYW5pZmVzdCwgbW9kdWxlSWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgaW1wZXJhdGl2ZWx5IHByZWxvYWQvIHByZWZldGNoIHRoZSBtb2R1bGUgY2h1bmsgYXNzZXRcbiAgICovXG4gIGNvbnN0IHByZWxvYWQgPSAocHJpb3JpdHk/OiBQcmVsb2FkUHJpb3JpdHkpID0+IHtcbiAgICBjb25zdCBwID1cbiAgICAgIHByaW9yaXR5ID8/IChkZWZlciA9PT0gUEhBU0UuUEFJTlQgPyBQUklPUklUWS5ISUdIIDogUFJJT1JJVFkuTE9XKTtcblxuICAgIHJldHVybiBwcmVsb2FkQXNzZXQoeyBsb2FkZXIsIG1vZHVsZUlkLCBwcmlvcml0eTogcCB9KTtcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihMYXp5SW50ZXJuYWwsIHtcbiAgICBnZXRBc3NldFVybHMsXG4gICAgcHJlbG9hZCxcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09QVElPTlM6IHtcbiAgW2tleTogc3RyaW5nXTogeyBzc3I6IGJvb2xlYW47IGRlZmVyOiBudW1iZXIgfTtcbn0gPSB7XG4gIGxhenlGb3JQYWludDogeyBzc3I6IHRydWUsIGRlZmVyOiBQSEFTRS5QQUlOVCB9LFxuICBsYXp5QWZ0ZXJQYWludDogeyBzc3I6IHRydWUsIGRlZmVyOiBQSEFTRS5BRlRFUl9QQUlOVCB9LFxuICBsYXp5OiB7IHNzcjogZmFsc2UsIGRlZmVyOiBQSEFTRS5MQVpZIH0sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbGF6eUZvclBhaW50PEMgZXh0ZW5kcyBDb21wb25lbnRUeXBlPGFueT4+KFxuICBsb2FkZXI6IExvYWRlcjxDPixcbiAgb3B0cz86IExhenlPcHRpb25zXG4pIHtcbiAgcmV0dXJuIGxhenlQcm94eTxDPihsb2FkZXIsIHtcbiAgICAuLi5ERUZBVUxUX09QVElPTlMubGF6eUZvclBhaW50LFxuICAgIC4uLihvcHRzIHx8IHt9KSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5QWZ0ZXJQYWludDxDIGV4dGVuZHMgQ29tcG9uZW50VHlwZTxhbnk+PihcbiAgbG9hZGVyOiBMb2FkZXI8Qz4sXG4gIG9wdHM/OiBMYXp5T3B0aW9uc1xuKSB7XG4gIHJldHVybiBsYXp5UHJveHk8Qz4obG9hZGVyLCB7XG4gICAgLi4uREVGQVVMVF9PUFRJT05TLmxhenlBZnRlclBhaW50LFxuICAgIC4uLihvcHRzIHx8IHt9KSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5PEMgZXh0ZW5kcyBDb21wb25lbnRUeXBlPGFueT4+KFxuICBsb2FkZXI6IExvYWRlcjxDPixcbiAgb3B0cz86IExhenlPcHRpb25zXG4pIHtcbiAgcmV0dXJuIGxhenlQcm94eTxDPihsb2FkZXIsIHtcbiAgICAuLi5ERUZBVUxUX09QVElPTlMubGF6eSxcbiAgICAuLi4ob3B0cyB8fCB7fSksXG4gIH0pO1xufVxuXG5leHBvcnQgdHlwZSB7IENsaWVudExvYWRlciwgTG9hZGVyLCBTZXJ2ZXJMb2FkZXIgfTtcbmV4cG9ydCB7IGlzTG9hZGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxrQkFBa0IsUUFBUSw4QkFBOEI7QUFHakUsU0FBU0MsU0FBUyxRQUFRLFdBQVc7QUFDckMsU0FBU0MsS0FBSyxRQUFRLGNBQWM7QUFDcEMsU0FBU0MsSUFBSSxFQUFFQyxpQkFBaUIsRUFBRUMsaUJBQWlCLFFBQVEsVUFBVTtBQUVyRSxTQUFTQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxRQUFRLGFBQWE7QUFDakUsU0FBU0MscUJBQXFCLFFBQVEscUJBQXFCO0FBQzNELFNBQVNDLHFCQUFxQixRQUFRLHFCQUFxQjtBQUMzRCxTQUFTQyxjQUFjLFFBQVEsWUFBWTtB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