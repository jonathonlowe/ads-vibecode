function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { createElement, Fragment } from 'react';
import { attrToProp } from '../../utils';
export const PlaceholderFallbackHydrate = ({
  id,
  content
}) => {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    "data-lazy-begin": id
  }), content.map((el, i) => {
    const {
      tagName = '',
      childNodes = [],
      attributes = []
    } = el;
    const props = Array.from(attributes).reduce(attrToProp, {
      key: String(i)
    });
    // text node
    if (!tagName) return /*#__PURE__*/createElement(Fragment, props, el.textContent);

    // childless tag
    if (!childNodes.length) return /*#__PURE__*/createElement(tagName.toLowerCase(), props);

    // tag with content
    return /*#__PURE__*/createElement(tagName.toLowerCase(), _extends({}, props, {
      dangerouslySetInnerHTML: {
        __html: ''
      },
      suppressHydrationWarning: true
    }));
  }), /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    "data-lazy-end": id
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsImF0dHJUb1Byb3AiLCJQbGFjZWhvbGRlckZhbGxiYWNrSHlkcmF0ZSIsImlkIiwiY29udGVudCIsInR5cGUiLCJtYXAiLCJlbCIsImkiLCJ0YWdOYW1lIiwiY2hpbGROb2RlcyIsImF0dHJpYnV0ZXMiLCJwcm9wcyIsIkFycmF5IiwiZnJvbSIsInJlZHVjZSIsImtleSIsIlN0cmluZyIsInRleHRDb250ZW50IiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJfZXh0ZW5kcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xhenkvcGxhY2Vob2xkZXJzL2h5ZHJhdGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGF0dHJUb1Byb3AgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFBsYWNlaG9sZGVyRmFsbGJhY2tIeWRyYXRlUHJvcHMgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IEhUTUxFbGVtZW50W107XG59O1xuXG5leHBvcnQgY29uc3QgUGxhY2Vob2xkZXJGYWxsYmFja0h5ZHJhdGUgPSAoe1xuICBpZCxcbiAgY29udGVudCxcbn06IFBsYWNlaG9sZGVyRmFsbGJhY2tIeWRyYXRlUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBkYXRhLWxhenktYmVnaW49e2lkfSAvPlxuICAgICAge2NvbnRlbnQubWFwKChlbDogSFRNTEVsZW1lbnQsIGk6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCB7IHRhZ05hbWUgPSAnJywgY2hpbGROb2RlcyA9IFtdLCBhdHRyaWJ1dGVzID0gW10gfSA9IGVsO1xuICAgICAgICBjb25zdCBwcm9wcyA9IEFycmF5LmZyb20oYXR0cmlidXRlcykucmVkdWNlKGF0dHJUb1Byb3AsIHtcbiAgICAgICAgICBrZXk6IFN0cmluZyhpKSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRleHQgbm9kZVxuICAgICAgICBpZiAoIXRhZ05hbWUpIHJldHVybiBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBwcm9wcywgZWwudGV4dENvbnRlbnQpO1xuXG4gICAgICAgIC8vIGNoaWxkbGVzcyB0YWdcbiAgICAgICAgaWYgKCFjaGlsZE5vZGVzLmxlbmd0aClcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWdOYW1lLnRvTG93ZXJDYXNlKCksIHByb3BzKTtcblxuICAgICAgICAvLyB0YWcgd2l0aCBjb250ZW50XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ05hbWUudG9Mb3dlckNhc2UoKSwge1xuICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogJycgfSxcbiAgICAgICAgICBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSl9XG4gICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGRhdGEtbGF6eS1lbmQ9e2lkfSAvPlxuICAgIDwvPlxuICApO1xufTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU9BLEtBQUssSUFBSUMsYUFBYSxFQUFFQyxRQUFRLFFBQVEsT0FBTztBQUN0RCxTQUFTQyxVQUFVLFFBQVEsYUFBYTtBQU94QyxPQUFPLE1BQU1DLDBCQUEwQixHQUFHQSxDQUFDO0VBQ3pDQyxFQUFFO0VBQ0ZDO0FBQytCLENBQUMsS0FBSztFQUNyQyxvQkFDRU4sS0FBQSxDQUFBQyxhQUFBLENBQUFELEtBQUEsQ0FBQUUsUUFBQSxxQkFDRUYsS0FBQSxDQUFBQyxhQUFBO0lBQU9NLElBQUksRUFBQyxRQUFRO0lBQUMsbUJBQWlCRjtFQUFHLENBQUUsQ0FBQyxFQUMzQ0MsT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FBQ0MsRUFBZSxFQUFFQyxDQUFTLEtBQUs7SUFDM0MsTUFBTTtNQUFFQyxPQUFPLEdBQUcsRUFBRTtNQUFFQyxVQUFVLEdBQUcsRUFBRTtNQUFFQyxVQUFVLEdBQUc7SUFBRyxDQUFDLEdBQUdKLEVBQUU7SUFDN0QsTUFBTUssS0FBSyxHQUFHQyxLQUFLLENBQUNDLElBQUksQ0FBQ0gsVUFBVSxDQUFDLENBQUNJLE1BQU0sQ0FBQ2QsVUFBVSxFQUFFO01BQ3REZSxHQUFHLEVBQUVDLE1BQU0sQ0FBQ1QsQ0FBQztJQUNmLENBQUMsQ0FBQztJQUNGO0lBQ0EsSUFBSSxDQUFDQyxPQUFPLEVBQUUsb0JBQU9WLGFBQWEsQ0FBQ0MsUUFBUSxFQUFFWSxLQUFLLEVBQUVMLEVBQUUsQ0FBQ1csV0FBVyxDQUFDOztJQUVuRTtJQUNBLElBQUksQ0FBQ1IsVUFBVSxDQUFDUyxNQUFNLEVBQ3BCLG9CQUFPcEIsYUFBYSxDQUFDVSxPQUFPLENBQUNXLFdBQVcsQ0FBQyxDQUFDLEVBQUVSLEtBQUssQ0FBQzs7SUFFcEQ7SUFDQSxvQkFBT2IsYUFBYSxDQUFDVSxPQUFPLENBQUNXLFdBQVcsQ0FBQyxDQUFDLEVBQUFDLFFBQUEsS0FDckNULEtBQUs7TUFDUlUsdUJBQXVCLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQUcsQ0FBQztNQUN2Q0Msd0JBQXdCLEVBQUU7SUFBSSxFQUMvQixDQUFDO0VBQ0osQ0FBQyxDQUFDLGVBQ0YxQixLQUFBLENBQUFDLGFBQUE7SUFBT00sSUFBSSxFQUFDLFFBQVE7SUFBQyxpQkFBZUY7RUFBRyxDQUFFLENBQ3pDLENBQUM7QUFFUCxDQUFDIiwiaWdub3JlTGlzdCI6W119