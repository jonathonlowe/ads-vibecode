import React, { useRef, useLayoutEffect } from 'react';
function isLinkPrefetch(el) {
  return el.tagName === 'LINK' && el.rel === 'prefetch';
}
const usePlaceholderRender = (resolveId, content) => {
  const hydrationRef = useRef(null);
  const {
    current: ssrDomNodes
  } = useRef(content || []);
  useLayoutEffect(() => {
    const element = hydrationRef.current;
    const {
      parentNode
    } = element || {};
    if (parentNode && !parentNode.contains(ssrDomNodes[0])) {
      ssrDomNodes.reverse().forEach(node => {
        // this fixes an issue with Chrome that re-triggers and cancels prefetch
        // when node is appended again, making network panel quite noisy
        if (isLinkPrefetch(node)) node.rel = '';
        parentNode.insertBefore(node, element.nextSibling);
      });
    }
    return () => {
      ssrDomNodes.forEach(node => {
        var _node$parentNode;
        return (_node$parentNode = node.parentNode) == null ? void 0 : _node$parentNode.removeChild(node);
      });
    };
    // [hydrationRef.current, ssrDomNodes] are expected to be stable
    // with the second one never changing by design and the first one changing after first render
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return hydrationRef;
};
export const PlaceholderFallbackRender = ({
  id,
  content
}) => {
  const placeholderRef = usePlaceholderRender(id, content);
  return /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    "data-lazy-begin": id,
    ref: placeholderRef
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZVJlZiIsInVzZUxheW91dEVmZmVjdCIsImlzTGlua1ByZWZldGNoIiwiZWwiLCJ0YWdOYW1lIiwicmVsIiwidXNlUGxhY2Vob2xkZXJSZW5kZXIiLCJyZXNvbHZlSWQiLCJjb250ZW50IiwiaHlkcmF0aW9uUmVmIiwiY3VycmVudCIsInNzckRvbU5vZGVzIiwiZWxlbWVudCIsInBhcmVudE5vZGUiLCJjb250YWlucyIsInJldmVyc2UiLCJmb3JFYWNoIiwibm9kZSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiX25vZGUkcGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiUGxhY2Vob2xkZXJGYWxsYmFja1JlbmRlciIsImlkIiwicGxhY2Vob2xkZXJSZWYiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInJlZiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXp5L3BsYWNlaG9sZGVycy9yZW5kZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gaXNMaW5rUHJlZmV0Y2goZWw6IEhUTUxFbGVtZW50KTogZWwgaXMgSFRNTExpbmtFbGVtZW50IHtcbiAgcmV0dXJuIGVsLnRhZ05hbWUgPT09ICdMSU5LJyAmJiAoZWwgYXMgSFRNTExpbmtFbGVtZW50KS5yZWwgPT09ICdwcmVmZXRjaCc7XG59XG5cbmNvbnN0IHVzZVBsYWNlaG9sZGVyUmVuZGVyID0gKHJlc29sdmVJZDogc3RyaW5nLCBjb250ZW50OiBIVE1MRWxlbWVudFtdKSA9PiB7XG4gIGNvbnN0IGh5ZHJhdGlvblJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHsgY3VycmVudDogc3NyRG9tTm9kZXMgfSA9IHVzZVJlZihjb250ZW50IHx8IChbXSBhcyBIVE1MRWxlbWVudFtdKSk7XG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gaHlkcmF0aW9uUmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgeyBwYXJlbnROb2RlIH0gPSBlbGVtZW50IHx8IHt9O1xuXG4gICAgaWYgKHBhcmVudE5vZGUgJiYgIXBhcmVudE5vZGUuY29udGFpbnMoc3NyRG9tTm9kZXNbMF0pKSB7XG4gICAgICBzc3JEb21Ob2Rlcy5yZXZlcnNlKCkuZm9yRWFjaCgobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgLy8gdGhpcyBmaXhlcyBhbiBpc3N1ZSB3aXRoIENocm9tZSB0aGF0IHJlLXRyaWdnZXJzIGFuZCBjYW5jZWxzIHByZWZldGNoXG4gICAgICAgIC8vIHdoZW4gbm9kZSBpcyBhcHBlbmRlZCBhZ2FpbiwgbWFraW5nIG5ldHdvcmsgcGFuZWwgcXVpdGUgbm9pc3lcbiAgICAgICAgaWYgKGlzTGlua1ByZWZldGNoKG5vZGUpKSBub2RlLnJlbCA9ICcnO1xuXG4gICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIChlbGVtZW50IGFzIGFueSkubmV4dFNpYmxpbmcpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNzckRvbU5vZGVzLmZvckVhY2goKG5vZGU6IEhUTUxFbGVtZW50KSA9PlxuICAgICAgICBub2RlLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpXG4gICAgICApO1xuICAgIH07XG4gICAgLy8gW2h5ZHJhdGlvblJlZi5jdXJyZW50LCBzc3JEb21Ob2Rlc10gYXJlIGV4cGVjdGVkIHRvIGJlIHN0YWJsZVxuICAgIC8vIHdpdGggdGhlIHNlY29uZCBvbmUgbmV2ZXIgY2hhbmdpbmcgYnkgZGVzaWduIGFuZCB0aGUgZmlyc3Qgb25lIGNoYW5naW5nIGFmdGVyIGZpcnN0IHJlbmRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIHJldHVybiBoeWRyYXRpb25SZWY7XG59O1xuXG5leHBvcnQgdHlwZSBQbGFjZWhvbGRlckZhbGxiYWNrUmVuZGVyUHJvcHMgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IEhUTUxFbGVtZW50W107XG59O1xuXG5leHBvcnQgY29uc3QgUGxhY2Vob2xkZXJGYWxsYmFja1JlbmRlciA9ICh7XG4gIGlkLFxuICBjb250ZW50LFxufTogUGxhY2Vob2xkZXJGYWxsYmFja1JlbmRlclByb3BzKSA9PiB7XG4gIGNvbnN0IHBsYWNlaG9sZGVyUmVmID0gdXNlUGxhY2Vob2xkZXJSZW5kZXIoaWQsIGNvbnRlbnQpO1xuXG4gIHJldHVybiA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGRhdGEtbGF6eS1iZWdpbj17aWR9IHJlZj17cGxhY2Vob2xkZXJSZWZ9IC8+O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBSyxJQUFJQyxNQUFNLEVBQUVDLGVBQWUsUUFBUSxPQUFPO0FBRXRELFNBQVNDLGNBQWNBLENBQUNDLEVBQWUsRUFBeUI7RUFDOUQsT0FBT0EsRUFBRSxDQUFDQyxPQUFPLEtBQUssTUFBTSxJQUFLRCxFQUFFLENBQXFCRSxHQUFHLEtBQUssVUFBVTtBQUM1RTtBQUVBLE1BQU1DLG9CQUFvQixHQUFHQSxDQUFDQyxTQUFpQixFQUFFQyxPQUFzQixLQUFLO0VBQzFFLE1BQU1DLFlBQVksR0FBR1QsTUFBTSxDQUEwQixJQUFJLENBQUM7RUFDMUQsTUFBTTtJQUFFVSxPQUFPLEVBQUVDO0VBQVksQ0FBQyxHQUFHWCxNQUFNLENBQUNRLE9BQU8sSUFBSyxFQUFvQixDQUFDO0VBRXpFUCxlQUFlLENBQUMsTUFBTTtJQUNwQixNQUFNVyxPQUFPLEdBQUdILFlBQVksQ0FBQ0MsT0FBTztJQUNwQyxNQUFNO01BQUVHO0lBQVcsQ0FBQyxHQUFHRCxPQUFPLElBQUksQ0FBQyxDQUFDO0lBRXBDLElBQUlDLFVBQVUsSUFBSSxDQUFDQSxVQUFVLENBQUNDLFFBQVEsQ0FBQ0gsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDdERBLFdBQVcsQ0FBQ0ksT0FBTyxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFFQyxJQUFpQixJQUFLO1FBQ25EO1FBQ0E7UUFDQSxJQUFJZixjQUFjLENBQUNlLElBQUksQ0FBQyxFQUFFQSxJQUFJLENBQUNaLEdBQUcsR0FBRyxFQUFFO1FBRXZDUSxVQUFVLENBQUNLLFlBQVksQ0FBQ0QsSUFBSSxFQUFHTCxPQUFPLENBQVNPLFdBQVcsQ0FBQztNQUM3RCxDQUFDLENBQUM7SUFDSjtJQUVBLE9BQU8sTUFBTTtNQUNYUixXQUFXLENBQUNLLE9BQU8sQ0FBRUMsSUFBaUI7UUFBQSxJQUFBRyxnQkFBQTtRQUFBLFFBQUFBLGdCQUFBLEdBQ3BDSCxJQUFJLENBQUNKLFVBQVUscUJBQWZPLGdCQUFBLENBQWlCQyxXQUFXLENBQUNKLElBQUksQ0FBQztNQUFBLENBQ3BDLENBQUM7SUFDSCxDQUFDO0lBQ0Q7SUFDQTtJQUNBO0VBQ0YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLE9BQU9SLFlBQVk7QUFDckIsQ0FBQztBQU9ELE9BQU8sTUFBTWEseUJBQXlCLEdBQUdBLENBQUM7RUFDeENDLEVBQUU7RUFDRmY7QUFDOEIsQ0FBQyxLQUFLO0VBQ3BDLE1BQU1nQixjQUFjLEdBQUdsQixvQkFBb0IsQ0FBQ2lCLEVBQUUsRUFBRWYsT0FBTyxDQUFDO0VBRXhELG9CQUFPVCxLQUFBLENBQUEwQixhQUFBO0lBQU9DLElBQUksRUFBQyxRQUFRO0lBQUMsbUJBQWlCSCxFQUFHO0lBQUNJLEdBQUcsRUFBRUg7RUFBZSxDQUFFLENBQUM7QUFDMUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==