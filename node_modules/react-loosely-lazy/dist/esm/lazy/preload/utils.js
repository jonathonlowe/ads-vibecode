import { GlobalReactLooselyLazyProfiler } from '../../profiler';
import { noopCleanup } from '../../cleanup';
import { getConfig } from '../../config';
export function insertLinkTag(href, rel) {
  var _document$head;
  // Skip if already preloaded, prefetched, or loaded
  if (document.querySelector(`link[href="${href}"]`) || document.querySelector(`script[src="${href}"]`)) return noopCleanup;
  const {
    crossOrigin
  } = getConfig();
  const link = document.createElement('link');
  link.rel = rel;
  link.as = 'script';
  if (crossOrigin) link.crossOrigin = crossOrigin;
  link.href = href;
  const profiler = GlobalReactLooselyLazyProfiler.current;
  let removableListener = null;
  if (profiler) {
    const eventInfo = {
      identifier: href
    };
    const listener = () => {
      link.removeEventListener('onload', listener);
      removableListener = null;
      profiler.onLoadComplete(eventInfo);
    };
    link.addEventListener('onload', listener);
    removableListener = listener;
    profiler.onLoadStart(eventInfo);
  }
  (_document$head = document.head) == null || _document$head.appendChild(link);
  return () => {
    // Remove the link if it is still in the document head
    if (link.parentNode === document.head) {
      var _document$head2;
      (_document$head2 = document.head) == null || _document$head2.removeChild(link);
    }
    if (removableListener) {
      link.removeEventListener('onload', removableListener);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHbG9iYWxSZWFjdExvb3NlbHlMYXp5UHJvZmlsZXIiLCJub29wQ2xlYW51cCIsImdldENvbmZpZyIsImluc2VydExpbmtUYWciLCJocmVmIiwicmVsIiwiX2RvY3VtZW50JGhlYWQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjcm9zc09yaWdpbiIsImxpbmsiLCJjcmVhdGVFbGVtZW50IiwiYXMiLCJwcm9maWxlciIsImN1cnJlbnQiLCJyZW1vdmFibGVMaXN0ZW5lciIsImV2ZW50SW5mbyIsImlkZW50aWZpZXIiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkxvYWRDb21wbGV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkxvYWRTdGFydCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJfZG9jdW1lbnQkaGVhZDIiLCJyZW1vdmVDaGlsZCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXp5L3ByZWxvYWQvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xvYmFsUmVhY3RMb29zZWx5TGF6eVByb2ZpbGVyIH0gZnJvbSAnLi4vLi4vcHJvZmlsZXInO1xuaW1wb3J0IHsgbm9vcENsZWFudXAgfSBmcm9tICcuLi8uLi9jbGVhbnVwJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnRMaW5rVGFnKGhyZWY6IHN0cmluZywgcmVsOiBzdHJpbmcpIHtcbiAgLy8gU2tpcCBpZiBhbHJlYWR5IHByZWxvYWRlZCwgcHJlZmV0Y2hlZCwgb3IgbG9hZGVkXG4gIGlmIChcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBsaW5rW2hyZWY9XCIke2hyZWZ9XCJdYCkgfHxcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPVwiJHtocmVmfVwiXWApXG4gIClcbiAgICByZXR1cm4gbm9vcENsZWFudXA7XG5cbiAgY29uc3QgeyBjcm9zc09yaWdpbiB9ID0gZ2V0Q29uZmlnKCk7XG4gIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cbiAgbGluay5yZWwgPSByZWw7XG4gIGxpbmsuYXMgPSAnc2NyaXB0JztcbiAgaWYgKGNyb3NzT3JpZ2luKSBsaW5rLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG4gIGxpbmsuaHJlZiA9IGhyZWY7XG5cbiAgY29uc3QgcHJvZmlsZXIgPSBHbG9iYWxSZWFjdExvb3NlbHlMYXp5UHJvZmlsZXIuY3VycmVudDtcbiAgbGV0IHJlbW92YWJsZUxpc3RlbmVyOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgaWYgKHByb2ZpbGVyKSB7XG4gICAgY29uc3QgZXZlbnRJbmZvID0geyBpZGVudGlmaWVyOiBocmVmIH07XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBsaW5rLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubG9hZCcsIGxpc3RlbmVyKTtcbiAgICAgIHJlbW92YWJsZUxpc3RlbmVyID0gbnVsbDtcbiAgICAgIHByb2ZpbGVyLm9uTG9hZENvbXBsZXRlKGV2ZW50SW5mbyk7XG4gICAgfTtcbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ29ubG9hZCcsIGxpc3RlbmVyKTtcbiAgICByZW1vdmFibGVMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHByb2ZpbGVyLm9uTG9hZFN0YXJ0KGV2ZW50SW5mbyk7XG4gIH1cblxuICBkb2N1bWVudC5oZWFkPy5hcHBlbmRDaGlsZChsaW5rKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIC8vIFJlbW92ZSB0aGUgbGluayBpZiBpdCBpcyBzdGlsbCBpbiB0aGUgZG9jdW1lbnQgaGVhZFxuICAgIGlmIChsaW5rLnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmhlYWQpIHtcbiAgICAgIGRvY3VtZW50LmhlYWQ/LnJlbW92ZUNoaWxkKGxpbmspO1xuICAgIH1cbiAgICBpZiAocmVtb3ZhYmxlTGlzdGVuZXIpIHtcbiAgICAgIGxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25sb2FkJywgcmVtb3ZhYmxlTGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsOEJBQThCLFFBQVEsZ0JBQWdCO0FBQy9ELFNBQVNDLFdBQVcsUUFBUSxlQUFlO0FBQzNDLFNBQVNDLFNBQVMsUUFBUSxjQUFjO0FBRXhDLE9BQU8sU0FBU0MsYUFBYUEsQ0FBQ0MsSUFBWSxFQUFFQyxHQUFXLEVBQUU7RUFBQSxJQUFBQyxjQUFBO0VBQ3ZEO0VBQ0EsSUFDRUMsUUFBUSxDQUFDQyxhQUFhLENBQUUsY0FBYUosSUFBSyxJQUFHLENBQUMsSUFDOUNHLFFBQVEsQ0FBQ0MsYUFBYSxDQUFFLGVBQWNKLElBQUssSUFBRyxDQUFDLEVBRS9DLE9BQU9ILFdBQVc7RUFFcEIsTUFBTTtJQUFFUTtFQUFZLENBQUMsR0FBR1AsU0FBUyxDQUFDLENBQUM7RUFDbkMsTUFBTVEsSUFBSSxHQUFHSCxRQUFRLENBQUNJLGFBQWEsQ0FBQyxNQUFNLENBQUM7RUFFM0NELElBQUksQ0FBQ0wsR0FBRyxHQUFHQSxHQUFHO0VBQ2RLLElBQUksQ0FBQ0UsRUFBRSxHQUFHLFFBQVE7RUFDbEIsSUFBSUgsV0FBVyxFQUFFQyxJQUFJLENBQUNELFdBQVcsR0FBR0EsV0FBVztFQUMvQ0MsSUFBSSxDQUFDTixJQUFJLEdBQUdBLElBQUk7RUFFaEIsTUFBTVMsUUFBUSxHQUFHYiw4QkFBOEIsQ0FBQ2MsT0FBTztFQUN2RCxJQUFJQyxpQkFBc0MsR0FBRyxJQUFJO0VBQ2pELElBQUlGLFFBQVEsRUFBRTtJQUNaLE1BQU1HLFNBQVMsR0FBRztNQUFFQyxVQUFVLEVBQUViO0lBQUssQ0FBQztJQUN0QyxNQUFNYyxRQUFRLEdBQUdBLENBQUEsS0FBTTtNQUNyQlIsSUFBSSxDQUFDUyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUVELFFBQVEsQ0FBQztNQUM1Q0gsaUJBQWlCLEdBQUcsSUFBSTtNQUN4QkYsUUFBUSxDQUFDTyxjQUFjLENBQUNKLFNBQVMsQ0FBQztJQUNwQyxDQUFDO0lBQ0ROLElBQUksQ0FBQ1csZ0JBQWdCLENBQUMsUUFBUSxFQUFFSCxRQUFRLENBQUM7SUFDekNILGlCQUFpQixHQUFHRyxRQUFRO0lBQzVCTCxRQUFRLENBQUNTLFdBQVcsQ0FBQ04sU0FBUyxDQUFDO0VBQ2pDO0VBRUEsQ0FBQVYsY0FBQSxHQUFBQyxRQUFRLENBQUNnQixJQUFJLGFBQWJqQixjQUFBLENBQWVrQixXQUFXLENBQUNkLElBQUksQ0FBQztFQUVoQyxPQUFPLE1BQU07SUFDWDtJQUNBLElBQUlBLElBQUksQ0FBQ2UsVUFBVSxLQUFLbEIsUUFBUSxDQUFDZ0IsSUFBSSxFQUFFO01BQUEsSUFBQUcsZUFBQTtNQUNyQyxDQUFBQSxlQUFBLEdBQUFuQixRQUFRLENBQUNnQixJQUFJLGFBQWJHLGVBQUEsQ0FBZUMsV0FBVyxDQUFDakIsSUFBSSxDQUFDO0lBQ2xDO0lBQ0EsSUFBSUssaUJBQWlCLEVBQUU7TUFDckJMLElBQUksQ0FBQ1MsbUJBQW1CLENBQUMsUUFBUSxFQUFFSixpQkFBaUIsQ0FBQztJQUN2RDtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==