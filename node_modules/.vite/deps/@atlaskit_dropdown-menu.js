import {
  box_default,
  inline_default,
  stack_default,
  xcss
} from "./chunk-57TNOKYF.js";
import {
  svg_default
} from "./chunk-MKMI5YFB.js";
import {
  esm_default as esm_default2,
  require_chevron_down2 as require_chevron_down,
  useLayering
} from "./chunk-4WHAOU6A.js";
import {
  focus_ring_default
} from "./chunk-PCDGTODS.js";
import "./chunk-C5UHE4AN.js";
import {
  button_default
} from "./chunk-KTS3ZHUN.js";
import {
  spinner_default
} from "./chunk-CGJXAQPS.js";
import {
  mergeRefs
} from "./chunk-HDYTRULV.js";
import {
  KEY_DOWN,
  KEY_END,
  KEY_ENTER,
  KEY_HOME,
  KEY_SPACE,
  KEY_TAB,
  KEY_UP
} from "./chunk-ZGVEQJNH.js";
import "./chunk-XHPNGOQJ.js";
import "./chunk-HQP6RSCY.js";
import {
  use_router_link_default
} from "./chunk-FYOGWMFM.js";
import "./chunk-SYD3CLUV.js";
import "./chunk-RUVWD2PF.js";
import {
  borderRadius,
  gridSize,
  layers,
  propDeprecationWarning
} from "./chunk-IK2BBCJ5.js";
import {
  B400,
  N10,
  N100,
  N20,
  N200,
  N20A,
  N30,
  N300,
  N30A
} from "./chunk-UZBHDBTD.js";
import {
  noop,
  useId
} from "./chunk-CVCFKGGR.js";
import "./chunk-IYLTOISH.js";
import {
  require_dist
} from "./chunk-WGZLMHA6.js";
import "./chunk-UEZMFDUV.js";
import {
  esm_default
} from "./chunk-55ID7ZG3.js";
import {
  ClassNames,
  css,
  init_emotion_react_browser_development_esm,
  jsx,
  keyframes
} from "./chunk-FN3H3NMO.js";
import {
  _extends,
  init_extends
} from "./chunk-BA6HJOCH.js";
import {
  _defineProperty,
  _objectWithoutProperties,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-2WJRDDYS.js";
import "./chunk-IYLHYNH2.js";
import "./chunk-4JLRNKH6.js";
import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
init_slicedToArray();
var import_react10 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-controlled.js
init_slicedToArray();
var import_react = __toESM(require_react());
function useControlled(propValue) {
  var getDefaultPropValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
    return propValue;
  };
  var isControlled = propValue !== void 0;
  var _useState = (0, import_react.useState)(getDefaultPropValue), _useState2 = _slicedToArray(_useState, 2), valueState = _useState2[0], setValue = _useState2[1];
  var isControlledRef = (0, import_react.useRef)(isControlled);
  (0, import_react.useEffect)(function() {
    isControlledRef.current = isControlled;
  }, [isControlled]);
  var value = isControlled ? propValue : valueState;
  var setValueIfUncontrolled = (0, import_react.useCallback)(function(newValue) {
    if (!isControlledRef.current) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-focus-event.js
init_slicedToArray();
var import_react2 = __toESM(require_react());
function useFocus() {
  var _useState = (0, import_react2.useState)(false), _useState2 = _slicedToArray(_useState, 2), isFocused = _useState2[0], setIsFocused = _useState2[1];
  var bindFocus = (0, import_react2.useRef)({
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    }
  });
  (0, import_react2.useEffect)(function() {
    return function() {
      return setIsFocused(false);
    };
  }, []);
  return {
    isFocused,
    bindFocus: bindFocus.current
  };
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
var import_chevron_down = __toESM(require_chevron_down());
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
init_slicedToArray();
var import_react3 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
init_defineProperty();
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/use-generated-id.js
var PREFIX = "ds--dropdown--";
function useGeneratedId() {
  var id = useId();
  return "".concat(PREFIX).concat(id);
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
var actionMap = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, KEY_DOWN, "next"), KEY_UP, "prev"), KEY_HOME, "first"), KEY_END, "last");
var getNextFocusableElement = function getNextFocusableElement2(refs, currentFocusedIdx) {
  if (fg("dropdown-menu-disabled-navigation-fix")) {
    for (var i = 0; i < refs.length - 1; i++) {
      if (currentFocusedIdx + 1 === refs.length) {
        currentFocusedIdx = 0;
      } else {
        currentFocusedIdx++;
      }
      var element = refs[currentFocusedIdx].current;
      var isValid = !!element && !element.hasAttribute("disabled");
      if (isValid) {
        return element;
      }
    }
  } else {
    while (currentFocusedIdx + 1 < refs.length) {
      var _element = refs[++currentFocusedIdx].current;
      var _isValid = !!_element && !_element.hasAttribute("disabled");
      if (_isValid) {
        return _element;
      }
    }
  }
};
var getPrevFocusableElement = function getPrevFocusableElement2(refs, currentFocusedIdx) {
  if (fg("dropdown-menu-disabled-navigation-fix")) {
    for (var i = 0; i < refs.length - 1; i++) {
      if (currentFocusedIdx === 0) {
        currentFocusedIdx = refs.length - 1;
      } else {
        currentFocusedIdx--;
      }
      var element = refs[currentFocusedIdx].current;
      var isValid = !!element && !element.hasAttribute("disabled");
      if (isValid) {
        return element;
      }
    }
  } else {
    while (currentFocusedIdx > 0) {
      var _element2 = refs[--currentFocusedIdx].current;
      var _isValid2 = !!_element2 && !_element2.hasAttribute("disabled");
      if (_isValid2) {
        return _element2;
      }
    }
  }
};
function handleFocus(refs, isLayerDisabled, onClose) {
  return function(e) {
    var _refs$current;
    var currentRefs = (_refs$current = refs.current) !== null && _refs$current !== void 0 ? _refs$current : [];
    var currentFocusedIdx = currentRefs.findIndex(function(_ref) {
      var _document$activeEleme;
      var el = _ref.current;
      return el && ((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.isSameNode(el));
    });
    if (fg("platform_dst_popup-disable-focuslock")) {
      var _document$activeEleme2;
      var isNestedDropdown = !!((_document$activeEleme2 = document.activeElement) !== null && _document$activeEleme2 !== void 0 && _document$activeEleme2.closest("[id^=".concat(PREFIX, "]")));
      if (isLayerDisabled() && isNestedDropdown) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    } else {
      if (isLayerDisabled()) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    }
    var action = actionMap[e.key];
    switch (action) {
      case "next":
        e.preventDefault();
        if (fg("dropdown-menu-disabled-navigation-fix")) {
          var _nextFocusableElement = getNextFocusableElement(currentRefs, currentFocusedIdx);
          _nextFocusableElement === null || _nextFocusableElement === void 0 || _nextFocusableElement.focus();
          break;
        }
        if (currentFocusedIdx < currentRefs.length - 1) {
          var _nextFocusableElement2 = getNextFocusableElement(currentRefs, currentFocusedIdx);
          _nextFocusableElement2 === null || _nextFocusableElement2 === void 0 || _nextFocusableElement2.focus();
        } else {
          var firstFocusableElement = getNextFocusableElement(currentRefs, -1);
          firstFocusableElement === null || firstFocusableElement === void 0 || firstFocusableElement.focus();
        }
        break;
      case "prev":
        e.preventDefault();
        if (fg("dropdown-menu-disabled-navigation-fix")) {
          var _prevFocusableElement = getPrevFocusableElement(currentRefs, currentFocusedIdx);
          _prevFocusableElement === null || _prevFocusableElement === void 0 || _prevFocusableElement.focus();
          break;
        }
        if (currentFocusedIdx > 0) {
          var _prevFocusableElement2 = getPrevFocusableElement(currentRefs, currentFocusedIdx);
          _prevFocusableElement2 === null || _prevFocusableElement2 === void 0 || _prevFocusableElement2.focus();
        } else {
          var lastFocusableElement = getPrevFocusableElement(currentRefs, currentRefs.length);
          lastFocusableElement === null || lastFocusableElement === void 0 || lastFocusableElement.focus();
        }
        break;
      case "first":
        e.preventDefault();
        var nextFocusableElement = getNextFocusableElement(currentRefs, -1);
        nextFocusableElement === null || nextFocusableElement === void 0 || nextFocusableElement.focus();
        break;
      case "last":
        e.preventDefault();
        var prevFocusableElement = getPrevFocusableElement(currentRefs, currentRefs.length);
        prevFocusableElement === null || prevFocusableElement === void 0 || prevFocusableElement.focus();
        break;
      default:
        return;
    }
  };
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
var FocusManagerContext = (0, import_react3.createContext)({
  menuItemRefs: [],
  registerRef: noop
});
var FocusManager = function FocusManager2(_ref) {
  var children = _ref.children, onClose = _ref.onClose;
  var menuItemRefs = (0, import_react3.useRef)([]);
  var _useState = (0, import_react3.useState)(0), _useState2 = _slicedToArray(_useState, 2), refresh = _useState2[0], setRefresh = _useState2[1];
  var registerMode = (0, import_react3.useRef)("ordered");
  registerMode.current = "ordered";
  var registerRef = (0, import_react3.useCallback)(
    function(ref) {
      if (menuItemRefs.current.includes(ref)) {
        return;
      }
      switch (registerMode.current) {
        case "ordered":
          menuItemRefs.current.push(ref);
          break;
        case "unordered":
          registerMode.current = "regenerate";
          menuItemRefs.current = [];
          setRefresh(refresh + 1);
          break;
        case "regenerate":
          break;
        default:
          throw new Error("Unexpected case of ".concat(registerMode.current));
      }
    },
    // Updating register ref on force reload will cause `useRegisterItemWithFocusManager` to re-register
    [refresh]
  );
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled;
  (0, import_react3.useEffect)(function() {
    if (registerMode.current === "ordered") {
      registerMode.current = "unordered";
    }
  });
  (0, import_react3.useEffect)(function() {
    return (0, import_bind_event_listener.bind)(window, {
      type: "keydown",
      listener: handleFocus(menuItemRefs, isLayerDisabled, onClose)
    });
  }, [isLayerDisabled, onClose]);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef
  };
  return import_react3.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var focus_manager_default = FocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var import_react6 = __toESM(require_react());
init_emotion_react_browser_development_esm();

// node_modules/@atlaskit/menu/dist/esm/menu-section/menu-group.js
init_extends();
init_objectWithoutProperties();
init_emotion_react_browser_development_esm();

// node_modules/@atlaskit/menu/dist/esm/internal/components/menu-context.js
var import_react4 = __toESM(require_react());
var SpacingContext = (0, import_react4.createContext)("cozy");
var SELECTION_STYLE_CONTEXT_DO_NOT_USE = (0, import_react4.createContext)("border");

// node_modules/@atlaskit/menu/dist/esm/menu-section/menu-group.js
var _excluded = ["isLoading", "maxWidth", "minWidth", "minHeight", "maxHeight", "testId", "role", "spacing", "className"];
var baseStyles = css({
  display: "flex",
  position: "static",
  flexDirection: "column",
  overflow: "auto"
});
var MenuGroup = function MenuGroup2(_ref) {
  var isLoading = _ref.isLoading, maxWidth = _ref.maxWidth, minWidth = _ref.minWidth, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, testId = _ref.testId, role = _ref.role, _ref$spacing = _ref.spacing, spacing = _ref$spacing === void 0 ? "cozy" : _ref$spacing, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded);
  return jsx(SpacingContext.Provider, {
    value: spacing
  }, jsx(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "border"
  }, jsx("div", _extends({
    "aria-busy": isLoading,
    style: {
      minWidth,
      maxWidth,
      minHeight,
      maxHeight
    },
    css: baseStyles,
    "data-testid": testId,
    role,
    className: UNSAFE_className
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest))));
};
var menu_group_default = MenuGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-checkbox-item.js
function isCheckboxItem(element) {
  var role = element.getAttribute("role");
  return role === "checkbox" || role === "menuitemcheckbox";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-radio-item.js
function isCheckboxItem2(element) {
  var role = element.getAttribute("role");
  return role === "radio" || role === "menuitemradio";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var spinnerContainerStyles = xcss({
  display: "flex",
  minWidth: "160px",
  padding: "space.250",
  justifyContent: "center"
});
var LoadingIndicator = function LoadingIndicator2(_ref) {
  var _ref$statusLabel = _ref.statusLabel, statusLabel = _ref$statusLabel === void 0 ? "Loading" : _ref$statusLabel, testId = _ref.testId;
  return jsx(box_default, {
    xcss: spinnerContainerStyles,
    role: "menuitem"
  }, jsx(spinner_default, {
    size: "small",
    label: statusLabel,
    testId
  }));
};
var MenuWrapper = function MenuWrapper2(_ref2) {
  var children = _ref2.children, isLoading = _ref2.isLoading, maxHeight = _ref2.maxHeight, maxWidth = _ref2.maxWidth, onClose = _ref2.onClose, onUpdate = _ref2.onUpdate, statusLabel = _ref2.statusLabel, setInitialFocusRef = _ref2.setInitialFocusRef, shouldRenderToParent = _ref2.shouldRenderToParent, spacing = _ref2.spacing, testId = _ref2.testId, isTriggeredUsingKeyboard = _ref2.isTriggeredUsingKeyboard, autoFocus = _ref2.autoFocus;
  var _useContext = (0, import_react6.useContext)(FocusManagerContext), menuItemRefs = _useContext.menuItemRefs;
  var closeOnMenuItemClick = function closeOnMenuItemClick2(e) {
    var isTargetMenuItemOrDescendant = menuItemRefs.some(function(menuItemRef) {
      var menuItem = menuItemRef.current;
      if (!menuItem) {
        return false;
      }
      var isCheckboxOrRadio = isCheckboxItem(menuItem) || isCheckboxItem2(menuItem);
      return menuItem.contains(e.target) && !isCheckboxOrRadio;
    });
    if (isTargetMenuItemOrDescendant && onClose) {
      onClose(e);
    }
  };
  (0, import_react6.useLayoutEffect)(function() {
    onUpdate();
  }, [isLoading, onUpdate]);
  (0, import_react6.useEffect)(function() {
    var _menuItemRefs$map$fin;
    var firstFocusableRef = (_menuItemRefs$map$fin = menuItemRefs.map(function(_ref3) {
      var current = _ref3.current;
      return current;
    }).find(function(el) {
      return !!el && !el.hasAttribute("disabled");
    })) !== null && _menuItemRefs$map$fin !== void 0 ? _menuItemRefs$map$fin : null;
    if (shouldRenderToParent && (isTriggeredUsingKeyboard || autoFocus)) {
      firstFocusableRef === null || firstFocusableRef === void 0 || firstFocusableRef.focus();
    }
    setInitialFocusRef === null || setInitialFocusRef === void 0 || setInitialFocusRef(firstFocusableRef);
  }, [menuItemRefs, setInitialFocusRef, autoFocus, shouldRenderToParent, isTriggeredUsingKeyboard]);
  return jsx(menu_group_default, {
    isLoading,
    maxHeight,
    maxWidth,
    onClick: closeOnMenuItemClick,
    role: "menu",
    spacing,
    testId: testId && "".concat(testId, "--menu-group")
  }, isLoading ? jsx(LoadingIndicator, {
    statusLabel,
    testId: testId && "".concat(testId, "--loading-indicator")
  }) : children);
};
var menu_wrapper_default = MenuWrapper;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/selection-store.js
var import_react8 = __toESM(require_react());
var SelectionStoreContext = (0, import_react8.createContext)({
  setItemState: noop,
  getItemState: function getItemState() {
    return void 0;
  },
  setGroupState: noop,
  getGroupState: function getGroupState() {
    return {};
  }
});
var SelectionStore = function SelectionStore2(props) {
  var children = props.children;
  var store = (0, import_react8.useRef)({});
  var context = (0, import_react8.useMemo)(function() {
    return {
      setItemState: function setItemState(group, id, value) {
        if (!store.current[group]) {
          store.current[group] = {};
        }
        store.current[group][id] = value;
      },
      getItemState: function getItemState2(group, id) {
        if (!store.current[group]) {
          return void 0;
        }
        return store.current[group][id];
      },
      setGroupState: function setGroupState(group, value) {
        store.current[group] = value;
      },
      getGroupState: function getGroupState2(group) {
        return store.current[group] || {};
      }
    };
  }, []);
  return import_react8.default.createElement(SelectionStoreContext.Provider, {
    value: context
  }, children);
};
var selection_store_default = SelectionStore;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-register-item-with-focus-manager.js
var import_react9 = __toESM(require_react());
init_esm();
function useRegisterItemWithFocusManager() {
  var hasPopup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var _useContext = (0, import_react9.useContext)(FocusManagerContext), registerRef = _useContext.registerRef;
  var itemRef = (0, import_react9.useRef)(null);
  (0, import_react9.useEffect)(function() {
    if (hasPopup && fg("select-avoid-duplicated-registered-ref")) {
      return;
    }
    registerRef(itemRef);
  }, [registerRef, hasPopup]);
  return itemRef;
}
var use_register_item_with_focus_manager_default = useRegisterItemWithFocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
var _excluded2 = ["ref", "aria-controls", "aria-expanded", "aria-haspopup"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var gridSize2 = gridSize();
var MAX_HEIGHT = "calc(100vh - ".concat(gridSize2 * 2, "px)");
var opposites = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left",
  start: "end",
  auto: "auto",
  end: "start"
};
var getFallbackPlacements = function getFallbackPlacements2(placement) {
  var placementPieces = placement.split("-");
  var mainAxis = placementPieces[0];
  if (!["top", "bottom"].includes(mainAxis)) {
    return void 0;
  } else if (placementPieces.length === 2 && ["start", "end"].includes(placementPieces[1])) {
    var crossAxis = placementPieces[1];
    return ["".concat(mainAxis), "".concat(mainAxis, "-").concat(opposites[crossAxis]), "".concat(opposites[mainAxis], "-").concat(crossAxis), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-").concat(opposites[crossAxis]), "auto"];
  } else {
    return ["".concat(mainAxis, "-start"), "".concat(mainAxis, "-end"), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-start"), "".concat(opposites[mainAxis], "-end"), "auto"];
  }
};
function isKeyboardEvent(event) {
  return event !== null && (event instanceof KeyboardEvent || "nativeEvent" in event && event.nativeEvent instanceof KeyboardEvent);
}
var DropdownMenu = function DropdownMenu2(_ref) {
  var _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus, children = _ref.children, _ref$defaultOpen = _ref.defaultOpen, defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, isOpen = _ref.isOpen, _ref$onOpenChange = _ref.onOpenChange, onOpenChange = _ref$onOpenChange === void 0 ? noop : _ref$onOpenChange, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$shouldFlip = _ref.shouldFlip, shouldFlip = _ref$shouldFlip === void 0 ? true : _ref$shouldFlip, _ref$shouldRenderToPa = _ref.shouldRenderToParent, shouldRenderToParent = _ref$shouldRenderToPa === void 0 ? false : _ref$shouldRenderToPa, returnFocusRef = _ref.returnFocusRef, spacing = _ref.spacing, statusLabel = _ref.statusLabel, testId = _ref.testId, _trigger = _ref.trigger, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? layers.modal() : _ref$zIndex, label = _ref.label, interactionName = _ref.interactionName, strategy = _ref.strategy;
  var _useControlledState = useControlled(isOpen, function() {
    return defaultOpen;
  }), _useControlledState2 = _slicedToArray(_useControlledState, 2), isLocalOpen = _useControlledState2[0], setLocalIsOpen = _useControlledState2[1];
  var triggerRef = (0, import_react10.useRef)(null);
  var _useState = (0, import_react10.useState)(false), _useState2 = _slicedToArray(_useState, 2), isTriggeredUsingKeyboard = _useState2[0], setTriggeredUsingKeyboard = _useState2[1];
  var id = useGeneratedId();
  var itemRef = use_register_item_with_focus_manager_default();
  var fallbackPlacements = (0, import_react10.useMemo)(function() {
    return getFallbackPlacements(placement);
  }, [placement]);
  var handleTriggerClicked = (0, import_react10.useCallback)(
    // TODO: event is an `any` and is being cast incorrectly
    // This means that the public type for `onOpenChange` is incorrect
    // current: (event: React.MouseEvent | React.KeyboardEvent) => void;
    // correct: (event: React.MouseEvent | KeyboardEvent) => void;
    // https://product-fabric.atlassian.net/browse/DSP-4692
    function(event) {
      var newValue = !isLocalOpen;
      var clientX = event.clientX, clientY = event.clientY, type = event.type, detail = event.detail;
      if (type === "keydown") {
        setTriggeredUsingKeyboard(true);
      } else if (clientX === 0 || clientY === 0) {
        setTriggeredUsingKeyboard(true);
      } else if (detail === 0) {
        setTriggeredUsingKeyboard(true);
      } else {
        var _itemRef$current;
        itemRef === null || itemRef === void 0 || (_itemRef$current = itemRef.current) === null || _itemRef$current === void 0 || _itemRef$current.focus();
        setTriggeredUsingKeyboard(false);
      }
      setLocalIsOpen(newValue);
      onOpenChange({
        isOpen: newValue,
        event
      });
    },
    [isLocalOpen, setLocalIsOpen, onOpenChange, itemRef]
  );
  var handleOnClose = (0, import_react10.useCallback)(function(event, currentLevel) {
    var _event$target$closest, _event$target;
    var isTabOrEscapeKey = isKeyboardEvent(event) && (event.key === "Tab" || event.key === "Escape");
    if (event !== null && !isTabOrEscapeKey && event.target instanceof HTMLElement && (_event$target$closest = (_event$target = event.target).closest) !== null && _event$target$closest !== void 0 && _event$target$closest.call(_event$target, "[id^=".concat(PREFIX, "] [aria-haspopup]"))) {
      var _itemRef$current2;
      if (!currentLevel) {
        return;
      }
      var toCloseLevel = (_itemRef$current2 = itemRef.current) === null || _itemRef$current2 === void 0 ? void 0 : _itemRef$current2.dataset["ds-Level"];
      if (toCloseLevel && Number(toCloseLevel) < currentLevel) {
        return;
      }
    }
    if (returnFocusRef) {
      requestAnimationFrame(function() {
        var _returnFocusRef$curre;
        (_returnFocusRef$curre = returnFocusRef.current) === null || _returnFocusRef$curre === void 0 || _returnFocusRef$curre.focus();
      });
    } else if (isKeyboardEvent(event) && (event.key === "Tab" && event.shiftKey || event.key === "Escape")) {
      requestAnimationFrame(function() {
        var _itemRef$current3;
        (_itemRef$current3 = itemRef.current) === null || _itemRef$current3 === void 0 || _itemRef$current3.focus();
      });
    } else if (triggerRef.current) {
      requestAnimationFrame(function() {
        var _triggerRef$current;
        (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || _triggerRef$current.focus();
      });
    }
    var newValue = false;
    setLocalIsOpen(newValue);
    onOpenChange({
      isOpen: newValue,
      event
    });
  }, [itemRef, onOpenChange, returnFocusRef, setLocalIsOpen]);
  var _useFocus = useFocus(), isFocused = _useFocus.isFocused, bindFocus = _useFocus.bindFocus;
  (0, import_react10.useEffect)(function() {
    if (!isFocused) {
      return noop;
    }
    if (isLocalOpen) {
      return noop;
    }
    return (0, import_bind_event_listener2.bind)(window, {
      type: "keydown",
      listener: function openOnKeyDown(e) {
        var isNestedTriggerButton;
        if (e.target instanceof HTMLElement) {
          isNestedTriggerButton = e.target.closest("[id^=".concat(PREFIX, "] [aria-haspopup]"));
        }
        if (e.key === KEY_DOWN && !isNestedTriggerButton) {
          e.preventDefault();
          handleTriggerClicked(e);
        } else if ((e.code === KEY_SPACE || e.key === KEY_ENTER) && e.detail === 0) {
          setTriggeredUsingKeyboard(true);
        } else if (e.key === KEY_TAB && isNestedTriggerButton) {
          handleOnClose(e);
        }
      }
    });
  }, [isFocused, isLocalOpen, handleTriggerClicked, handleOnClose]);
  var conditionalProps = shouldFitContainer ? {
    shouldFitContainer,
    // When shouldFitContainer is true, `fixed` positions are not allowed
    strategy: strategy !== "fixed" ? strategy : void 0
  } : {
    shouldRenderToParent,
    strategy
  };
  return import_react10.default.createElement(selection_store_default, null, import_react10.default.createElement(esm_default2, _extends({
    id: isLocalOpen ? id : void 0,
    shouldFlip,
    isOpen: isLocalOpen,
    shouldReturnFocus: (
      // If returnFocusRef is provided, we **don't** want to return focus to the trigger.
      // Otherwise, Popup will focus on the dropdown trigger after the `returnFocusRef` element is focused.
      returnFocusRef === void 0
    ),
    onClose: handleOnClose,
    zIndex,
    placement,
    fallbackPlacements,
    testId: testId && "".concat(testId, "--content"),
    shouldUseCaptureOnOutsideClick: true
  }, conditionalProps, {
    shouldDisableFocusLock: true,
    trigger: function trigger(_ref2) {
      var ref = _ref2.ref, ariaControls = _ref2["aria-controls"], ariaExpanded = _ref2["aria-expanded"], ariaHasPopup = _ref2["aria-haspopup"], rest = _objectWithoutProperties(_ref2, _excluded2);
      if (typeof _trigger === "function") {
        return _trigger(_objectSpread(_objectSpread(_objectSpread({
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          "aria-haspopup": ariaHasPopup
        }, rest), bindFocus), {}, {
          triggerRef: mergeRefs([ref, triggerRef, itemRef]),
          isSelected: isLocalOpen,
          onClick: handleTriggerClicked,
          testId: testId && "".concat(testId, "--trigger")
        }));
      }
      return import_react10.default.createElement(button_default, _extends({}, bindFocus, {
        ref: mergeRefs([ref, triggerRef, itemRef]),
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        isSelected: isLocalOpen,
        iconAfter: import_chevron_down.default,
        onClick: handleTriggerClicked,
        testId: testId && "".concat(testId, "--trigger"),
        "aria-label": label
      }, fg("platform_button_item-add-ufo-metrics") && {
        interactionName
      }), _trigger);
    },
    content: function content(_ref3) {
      var setInitialFocusRef = _ref3.setInitialFocusRef, update = _ref3.update;
      return import_react10.default.createElement(focus_manager_default, {
        onClose: handleOnClose
      }, import_react10.default.createElement(menu_wrapper_default, {
        spacing,
        maxHeight: MAX_HEIGHT,
        maxWidth: shouldFitContainer ? void 0 : 800,
        onClose: handleOnClose,
        onUpdate: update,
        isLoading,
        statusLabel,
        setInitialFocusRef: isTriggeredUsingKeyboard || autoFocus ? setInitialFocusRef : void 0,
        shouldRenderToParent: shouldRenderToParent || shouldFitContainer,
        isTriggeredUsingKeyboard,
        autoFocus,
        testId: testId && "".concat(testId, "--menu-wrapper")
      }, children));
    }
  })));
};
var dropdown_menu_default = DropdownMenu;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
init_extends();
init_objectWithoutProperties();
var import_react28 = __toESM(require_react());

// node_modules/@atlaskit/menu/dist/esm/menu-item/button-item.js
init_extends();
init_objectWithoutProperties();
var import_react13 = __toESM(require_react());
init_emotion_react_browser_development_esm();
init_esm();

// node_modules/@atlaskit/menu/dist/esm/internal/components/menu-item-primitive.js
var import_react11 = __toESM(require_react());
init_emotion_react_browser_development_esm();
init_esm();
var defaultRender = function defaultRender2(Component, props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    jsx(Component, props)
  );
};
var beforeAfterElementStylesOld = css({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var beforeAfterElementStyles = css({
  display: "flex",
  minWidth: 24,
  minHeight: 24,
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var contentStyles = xcss({
  outline: "none",
  overflow: "hidden",
  textAlign: "left"
});
var truncateStyles = css({
  display: "block",
  overflow: "hidden",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap"
});
var titleStyles = css({
  font: 'var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, "Helvetica Neue", sans-serif)'
});
var wordBreakStyles = css({
  wordBreak: "break-word"
});
var descriptionStyles = css({
  color: "var(--ds-text-subtlest, ".concat(N200, ")"),
  font: 'var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, "Helvetica Neue", sans-serif)'
});
var disabledDescriptionStyles = css({
  color: "var(--ds-text-disabled, ".concat(N200, ")")
});
var positionRelativeStyles = css({
  position: "relative"
});
var primitiveStyles = css({
  display: "flex",
  boxSizing: "border-box",
  width: "100%",
  minHeight: 40,
  margin: "var(--ds-space-0, 0px)",
  alignItems: "center",
  border: 0,
  outline: 0,
  textDecoration: "none",
  userSelect: "none",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "&::-moz-focus-inner": {
    border: 0
  },
  "&:hover": {
    textDecoration: "none"
  }
});
var spacingMapStyles = {
  cozy: css({
    // 8 * 2 (16) + icon (24) === 40
    paddingBlock: "var(--ds-space-100, 8px)",
    paddingInline: "var(--ds-space-200, 16px)"
  }),
  compact: css({
    minHeight: 32,
    // 4 * 2 (8) + icon (24) === 32
    paddingBlock: "var(--ds-space-050, 4px)",
    paddingInline: "var(--ds-space-150, 12px)"
  })
};
var interactiveStyles = css({
  cursor: "pointer"
});
var unselectedStyles = css({
  backgroundColor: "var(--ds-background-neutral-subtle, transparent)",
  color: "currentColor",
  "&:visited": {
    color: "currentColor"
  },
  "&:hover": {
    backgroundColor: "var(--ds-background-neutral-subtle-hovered, ".concat(N20, ")"),
    color: "currentColor"
  },
  "&:active": {
    backgroundColor: "var(--ds-background-neutral-subtle-pressed, ".concat(N30, ")"),
    boxShadow: "none",
    color: "currentColor"
  }
});
var disabledStyles = css({
  cursor: "not-allowed",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "&, :hover, :active": {
    backgroundColor: "var(--ds-background-neutral-subtle, transparent)",
    color: "var(--ds-text-disabled, ".concat(N200, ")")
  }
});
var selectedBorderStyles = css({
  "&::before": {
    width: 2,
    position: "absolute",
    background: "var(--ds-border-selected, transparent)",
    content: '""',
    insetBlockEnd: 0,
    insetBlockStart: 0,
    insetInlineStart: 0
  }
});
var selectedNotchStyles = css({
  "&::before": {
    width: 4,
    position: "absolute",
    background: "var(--ds-border-selected, transparent)",
    borderRadius: "0 ".concat("var(--ds-border-radius, 4px)", " ", "var(--ds-border-radius, 4px)", " 0"),
    content: '""',
    insetBlockEnd: "var(--ds-space-150, 12px)",
    insetBlockStart: "var(--ds-space-150, 12px)",
    insetInlineStart: 0
  }
});
var selectedStyles = css({
  backgroundColor: "var(--ds-background-selected, ".concat(N20, ")"),
  // Fallback set as babel plugin inserts one otherwise
  color: "var(--ds-text-selected, currentColor)",
  "&:visited": {
    color: "var(--ds-text-selected, currentColor)"
  },
  "&:hover": {
    backgroundColor: "var(--ds-background-selected-hovered, ".concat(N20, ")"),
    color: "var(--ds-text-selected, currentColor)"
  },
  "&:active": {
    backgroundColor: "var(--ds-background-selected-pressed, ".concat(N30, ")"),
    color: "var(--ds-text-selected, currentColor)"
  }
});
var gapMap = {
  compact: "space.100",
  cozy: "space.150"
};
var MenuItemPrimitive = function MenuItemPrimitive2(_ref) {
  var children = _ref.children, title = _ref.title, description = _ref.description, iconAfter = _ref.iconAfter, iconBefore = _ref.iconBefore, overrides = _ref.overrides, UNSAFE_externalClassName = _ref.className, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? false : _ref$shouldTitleWrap, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? false : _ref$shouldDescriptio, _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, testId = _ref.testId;
  propDeprecationWarning(
    "@atlaskit/menu",
    "overrides",
    overrides !== void 0,
    ""
    // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  var spacing = (0, import_react11.useContext)(SpacingContext);
  var selectionStyle = (0, import_react11.useContext)(SELECTION_STYLE_CONTEXT_DO_NOT_USE);
  var renderTitle = overrides && overrides.Title && overrides.Title.render || defaultRender;
  var UNSAFE_className = UNSAFE_externalClassName;
  return jsx(ClassNames, null, function(_ref2) {
    var cn = _ref2.css, cx = _ref2.cx;
    return jsx(focus_ring_default, {
      isInset: true
    }, children({
      className: cx([cn([positionRelativeStyles, primitiveStyles, spacingMapStyles[spacing], !isDisabled && !isSelected && unselectedStyles, !isDisabled && isSelected && [selectedStyles, [selectionStyle === "border" && selectedBorderStyles, selectionStyle === "notch" && selectedNotchStyles]], isDisabled ? disabledStyles : interactiveStyles]), UNSAFE_className]),
      children: jsx(inline_default, {
        as: "span",
        spread: "space-between",
        alignBlock: "center",
        space: gapMap[spacing],
        grow: "fill",
        testId: testId && "".concat(testId, "--container")
      }, iconBefore && jsx("span", {
        "data-item-elem-before": true,
        css: fg("platform_ads_component_no_icon_spacing_support") ? beforeAfterElementStyles : beforeAfterElementStylesOld,
        "data-testid": testId && "".concat(testId, "--icon-before")
      }, iconBefore), title && jsx(stack_default, {
        alignBlock: "center",
        grow: "fill",
        xcss: contentStyles
      }, renderTitle("span", {
        children: title,
        className: cn(titleStyles, shouldTitleWrap ? wordBreakStyles : truncateStyles),
        "data-item-title": true
      }), description && jsx("span", {
        "data-item-description": true,
        css: [descriptionStyles, isDisabled && disabledDescriptionStyles, shouldDescriptionWrap ? wordBreakStyles : truncateStyles]
      }, description)), iconAfter && jsx("span", {
        "data-item-elem-after": true,
        css: fg("platform_ads_component_no_icon_spacing_support") ? beforeAfterElementStyles : beforeAfterElementStylesOld,
        "data-testid": testId && "".concat(testId, "--icon-after")
      }, iconAfter))
    }));
  });
};
var menu_item_primitive_default = MenuItemPrimitive;

// node_modules/@atlaskit/menu/dist/esm/menu-item/button-item.js
var _excluded3 = ["children", "cssFn", "description", "iconAfter", "iconBefore", "isDisabled", "isSelected", "onClick", "testId", "overrides", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "interactionName"];
var ButtonItem = (0, import_react13.memo)((0, import_react13.forwardRef)(
  // Type needed on props to extract types with extract react types.
  function(props, ref) {
    var children = props.children, _props$cssFn = props.cssFn, cssFn = _props$cssFn === void 0 ? noop : _props$cssFn, description = props.description, iconAfter = props.iconAfter, iconBefore = props.iconBefore, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isSelected = props.isSelected, isSelected = _props$isSelected === void 0 ? false : _props$isSelected, onClick = props.onClick, testId = props.testId, overrides = props.overrides, onMouseDown = props.onMouseDown, shouldTitleWrap = props.shouldTitleWrap, shouldDescriptionWrap = props.shouldDescriptionWrap, UNSAFE_className = props.className, interactionName = props.interactionName, rest = _objectWithoutProperties(props, _excluded3);
    var onMouseDownHandler = onMouseDown;
    var interactionContext = (0, import_react13.useContext)(esm_default);
    var handleClick = (0, import_react13.useCallback)(function(e) {
      interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
      onClick === null || onClick === void 0 || onClick(e);
    }, [onClick, interactionContext, interactionName]);
    if (!children) {
      return null;
    }
    propDeprecationWarning(
      "@atlaskit/menu",
      "cssFn",
      cssFn !== noop,
      ""
      // TODO: Create DAC post when primitives/xcss are available as alternatives
    );
    return jsx(
      menu_item_primitive_default,
      _extends({
        className: UNSAFE_className
      }, rest, {
        // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
        overrides,
        iconBefore,
        iconAfter,
        isDisabled,
        isSelected,
        description,
        title: children,
        shouldTitleWrap,
        shouldDescriptionWrap,
        css: (
          // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
          cssFn({
            isSelected,
            isDisabled
          })
        ),
        testId: testId && "".concat(testId, "--primitive")
      }),
      function(_ref) {
        var children2 = _ref.children, className = _ref.className;
        return jsx("button", _extends({
          "data-testid": testId
        }, rest, {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          className,
          ref,
          disabled: isDisabled,
          onClick: fg("platform_button_item-add-ufo-metrics") ? handleClick : onClick,
          onMouseDown: onMouseDownHandler,
          type: "button"
        }), children2);
      }
    );
  }
));
var button_item_default = ButtonItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/link-item.js
init_extends();
init_objectWithoutProperties();
var import_react15 = __toESM(require_react());
init_emotion_react_browser_development_esm();
init_esm();
var _excluded4 = ["children", "href", "cssFn", "description", "iconAfter", "iconBefore", "isDisabled", "isSelected", "onClick", "testId", "overrides", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_shouldDisableRouterLink", "UNSAFE_isDraggable", "interactionName"];
var IS_EXTERNAL_LINK_REGEX = /^(?:(http|https):\/\/)/;
var IS_NON_HTTP_BASED = /^(((mailto|tel|sms):)|(#))/;
var preventEvent = function preventEvent2(e) {
  e.preventDefault();
};
var LinkItem = (0, import_react15.memo)((0, import_react15.forwardRef)(
  // Type needed on props to extract types with extract react types.
  function(props, ref) {
    var children = props.children, href = props.href, _props$cssFn = props.cssFn, cssFn = _props$cssFn === void 0 ? noop : _props$cssFn, description = props.description, iconAfter = props.iconAfter, iconBefore = props.iconBefore, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isSelected = props.isSelected, isSelected = _props$isSelected === void 0 ? false : _props$isSelected, onClick = props.onClick, testId = props.testId, overrides = props.overrides, onMouseDown = props.onMouseDown, shouldTitleWrap = props.shouldTitleWrap, shouldDescriptionWrap = props.shouldDescriptionWrap, UNSAFE_className = props.className, UNSAFE_shouldDisableRouterLink = props.UNSAFE_shouldDisableRouterLink, UNSAFE_isDraggable = props.UNSAFE_isDraggable, interactionName = props.interactionName, rest = _objectWithoutProperties(props, _excluded4);
    var onMouseDownHandler = onMouseDown;
    var RouterLink = use_router_link_default();
    var interactionContext = (0, import_react15.useContext)(esm_default);
    var handleClick = (0, import_react15.useCallback)(function(e) {
      interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
      onClick === null || onClick === void 0 || onClick(e);
    }, [onClick, interactionContext, interactionName]);
    if (!children) {
      return null;
    }
    var isExternal = typeof href === "string" && IS_EXTERNAL_LINK_REGEX.test(href);
    var isNonHttpBased = typeof href === "string" && IS_NON_HTTP_BASED.test(href);
    var isEmptyHref = href == null || href === "";
    var isRouterLink = !UNSAFE_shouldDisableRouterLink && RouterLink && !isExternal && !isNonHttpBased && !isEmptyHref;
    var Component = isRouterLink ? RouterLink : "a";
    propDeprecationWarning(
      "@atlaskit/menu",
      "cssFn",
      cssFn !== noop,
      ""
      // TODO: Create DAC post when primitives/xcss are available as alternatives
    );
    return jsx(menu_item_primitive_default, _extends({}, rest, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className: UNSAFE_className,
      overrides,
      iconBefore,
      iconAfter,
      isSelected,
      isDisabled,
      description,
      shouldTitleWrap,
      shouldDescriptionWrap,
      css: (
        // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
        cssFn({
          isSelected,
          isDisabled
        })
      ),
      title: children,
      testId: testId && "".concat(testId, "--primitive")
    }), function(_ref) {
      var children2 = _ref.children, className = _ref.className;
      return jsx(Component, _extends({
        "data-testid": testId,
        "data-is-router-link": testId ? isRouterLink ? "true" : "false" : void 0,
        "data-vc": "link-item"
      }, rest, {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        className,
        href: isDisabled ? void 0 : href
      }, UNSAFE_isDraggable ? {} : {
        draggable: false,
        onDragStart: preventEvent
      }, {
        onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
        onClick: isDisabled ? preventEvent : fg("platform_button_item-add-ufo-metrics") ? handleClick : onClick,
        "aria-current": isSelected ? "page" : void 0,
        "aria-disabled": isDisabled,
        ref
      }), children2);
    });
  }
));
var link_item_default = LinkItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/custom-item.js
init_extends();
init_objectWithoutProperties();
var import_react17 = __toESM(require_react());
init_emotion_react_browser_development_esm();
init_esm();
var _excluded5 = ["component", "cssFn", "isDisabled", "isSelected", "onClick", "testId", "children", "description", "iconAfter", "iconBefore", "overrides", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_isDraggable", "interactionName"];
var preventEvent3 = function preventEvent4(e) {
  e.preventDefault();
};
var CustomItem = (0, import_react17.memo)(
  (0, import_react17.forwardRef)(function(_ref, ref) {
    var Component = _ref.component, _ref$cssFn = _ref.cssFn, cssFn = _ref$cssFn === void 0 ? noop : _ref$cssFn, _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, onClick = _ref.onClick, testId = _ref.testId, children = _ref.children, description = _ref.description, iconAfter = _ref.iconAfter, iconBefore = _ref.iconBefore, overrides = _ref.overrides, onMouseDown = _ref.onMouseDown, shouldTitleWrap = _ref.shouldTitleWrap, shouldDescriptionWrap = _ref.shouldDescriptionWrap, UNSAFE_className = _ref.className, UNSAFE_isDraggable = _ref.UNSAFE_isDraggable, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded5);
    var onMouseDownHandler = onMouseDown;
    var interactionContext = (0, import_react17.useContext)(esm_default);
    var handleClick = (0, import_react17.useCallback)(function(e) {
      interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
      onClick === null || onClick === void 0 || onClick(e);
    }, [onClick, interactionContext, interactionName]);
    if (!Component) {
      return null;
    }
    propDeprecationWarning(
      "@atlaskit/menu",
      "cssFn",
      cssFn !== noop,
      ""
      // TODO: Create DAC post when primitives/xcss are available as alternatives
    );
    return jsx(
      menu_item_primitive_default,
      _extends({
        className: UNSAFE_className
      }, rest, {
        // eslint-disable-next-line @repo/internal/react/no-unsafe-overrides
        overrides,
        description,
        iconAfter,
        title: children,
        iconBefore,
        isSelected,
        isDisabled,
        shouldTitleWrap,
        shouldDescriptionWrap,
        css: css(
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
          cssFn({
            isDisabled,
            isSelected
          })
        ),
        testId: testId && "".concat(testId, "--primitive")
      }),
      function(_ref2) {
        var children2 = _ref2.children, className = _ref2.className;
        return jsx(Component, _extends({
          "data-testid": testId
        }, rest, {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          className,
          ref
        }, UNSAFE_isDraggable ? {} : {
          draggable: false,
          onDragStart: preventEvent3
        }, {
          onMouseDown: isDisabled ? preventEvent3 : onMouseDownHandler,
          onClick: isDisabled ? preventEvent3 : fg("platform_button_item-add-ufo-metrics") ? handleClick : onClick,
          tabIndex: isDisabled ? -1 : void 0,
          "aria-disabled": isDisabled
        }), children2);
      }
    );
  })
  // Dirty hack to get generics working with forward ref [2/2]
);
var custom_item_default = CustomItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-item.js
init_emotion_react_browser_development_esm();

// node_modules/@atlaskit/menu/dist/esm/internal/components/skeleton-shimmer.js
init_emotion_react_browser_development_esm();
var shimmerKeyframes = keyframes({
  from: {
    backgroundColor: "var(--ds-skeleton, ".concat(N20A, ")")
  },
  to: {
    backgroundColor: "var(--ds-skeleton-subtle, ".concat(N30A, ")")
  }
});
var shimmerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::before, ::after": {
    animationDirection: "alternate",
    animationDuration: "1.5s",
    animationIterationCount: "infinite",
    animationName: "".concat(shimmerKeyframes),
    animationTimingFunction: "linear",
    backgroundColor: "var(--ds-skeleton, ".concat(N20A, ")")
  }
});

// node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-item.js
var gridSize3 = gridSize();
var borderRadius2 = borderRadius();
var itemElemSpacing = gridSize3 * 1.5;
var itemExpectedElemSize = gridSize3 * 3;
var itemMinHeight = gridSize3 * 5;
var skeletonItemElemSize = gridSize3 * 2.5;
var itemElemSkeletonOffset = (itemExpectedElemSize - skeletonItemElemSize) / 2;
var skeletonTextBorderRadius = 100;
var skeletonContentHeight = 9;
var skeletonColor = "var(--ds-skeleton, ".concat(N20A, ")");
var skeletonStyles = css({
  display: "flex",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  minHeight: itemMinHeight,
  padding: "0 ".concat("var(--ds-space-250, 20px)"),
  alignItems: "center",
  pointerEvents: "none",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::after": {
    height: skeletonContentHeight,
    backgroundColor: skeletonColor,
    borderRadius: skeletonTextBorderRadius,
    content: '""',
    // This is a little bespoke but we need to push everything down 1px
    // because the skeleton content should align to the bottom of the text.
    // Confirm VR test failures before accepting a change.
    marginBlockStart: 1
  }
});
var defaultWidthStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(1n)::after": {
    flexBasis: "70%"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(2n)::after": {
    flexBasis: "50%"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(3n)::after": {
    flexBasis: "60%"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(4n)::after": {
    flexBasis: "90%"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(5n)::after": {
    flexBasis: "35%"
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  ":nth-of-type(6n)::after": {
    flexBasis: "77%"
  }
});
var customWidthStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::after": {
    flexBasis: "var(--width)"
  }
});
var beforeElementStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::before": {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    width: skeletonItemElemSize,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    height: skeletonItemElemSize,
    flexShrink: 0,
    backgroundColor: skeletonColor,
    content: '""',
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    marginInlineEnd: itemElemSpacing + itemElemSkeletonOffset,
    marginInlineStart: "var(--ds-space-025, 2px)"
  }
});
var avatarStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::before": {
    borderRadius: "100%"
  }
});
var iconStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::before": {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    borderRadius: borderRadius2
  }
});

// node_modules/@atlaskit/menu/dist/esm/menu-item/heading-item.js
init_extends();
init_objectWithoutProperties();
var import_react21 = __toESM(require_react());
init_emotion_react_browser_development_esm();
var _excluded6 = ["children", "testId", "headingLevel", "id", "cssFn", "className"];
var headingStyles = css({
  color: "var(--ds-text-subtle, ".concat(N300, ")"),
  font: 'var(--ds-font-heading-xxsmall, normal 600 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, "Helvetica Neue", sans-serif)',
  paddingBlock: "var(--ds-space-0, 0px)",
  paddingInline: "var(--ds-space-200, 16px)"
});
var HeadingItem = (0, import_react21.memo)(function(_ref) {
  var children = _ref.children, testId = _ref.testId, _ref$headingLevel = _ref.headingLevel, headingLevel = _ref$headingLevel === void 0 ? 2 : _ref$headingLevel, id = _ref.id, _ref$cssFn = _ref.cssFn, cssFn = _ref$cssFn === void 0 ? noop : _ref$cssFn, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded6);
  propDeprecationWarning(
    "@atlaskit/menu",
    "cssFn",
    cssFn !== noop,
    ""
    // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  var UNSAFE_overrides = css(cssFn(void 0));
  return jsx("div", _extends({
    css: [
      headingStyles,
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      UNSAFE_overrides
    ],
    role: "heading",
    "aria-level": headingLevel,
    "data-testid": testId,
    "data-ds--menu--heading-item": true,
    id,
    className: UNSAFE_className
  }, rest), children);
});
var heading_item_default = HeadingItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-heading-item.js
init_emotion_react_browser_development_esm();
var skeletonStyles2 = css({
  paddingBlock: "var(--ds-space-0, 0px)",
  paddingInline: "var(--ds-space-200, 16px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::after": {
    display: "block",
    width: "30%",
    height: "var(--ds-space-100, 8px)",
    backgroundColor: "var(--ds-skeleton, ".concat(N20A, ")"),
    borderRadius: 100,
    content: '""'
  }
});
var defaultWidthStyles2 = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::after": {
    width: "30%"
  }
});
var customWidthStyles2 = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "::after": {
    width: "var(--width)"
  }
});

// node_modules/@atlaskit/menu/dist/esm/menu-section/section.js
init_extends();
init_objectWithoutProperties();
var import_react24 = __toESM(require_react());
init_emotion_react_browser_development_esm();
var _excluded7 = ["children", "overrides", "title", "titleId", "testId", "isScrollable", "hasSeparator", "id", "isList", "className"];
var gridSize4 = 8;
var itemHeadingTopMargin = gridSize4 * 2.5;
var itemHeadingBottomMargin = gridSize4 * 0.75;
var itemHeadingContentHeight = 16;
var skeletonHeadingHeight = gridSize4;
var skeletonHeadingMarginOffset = 3;
var skeletonHeadingTopMargin = itemHeadingTopMargin + (itemHeadingContentHeight - skeletonHeadingHeight) - skeletonHeadingMarginOffset;
var skeletonHeadingBottomMargin = itemHeadingBottomMargin + skeletonHeadingMarginOffset;
var sectionPaddingTopBottom = gridSize4 * 0.75;
var VAR_SEPARATOR_COLOR = "--ds-menu-seperator-color";
var sectionStyles = css({
  "&::before, &::after": {
    display: "block",
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    height: sectionPaddingTopBottom,
    content: '""'
  },
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  "& [data-ds--menu--heading-item]": {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    marginBlockEnd: itemHeadingBottomMargin,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    marginBlockStart: itemHeadingTopMargin,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    "&:first-of-type": {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      marginBlockStart: itemHeadingTopMargin - sectionPaddingTopBottom
    }
  },
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  "& [data-ds--menu--skeleton-heading-item]": {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    marginBlockEnd: skeletonHeadingBottomMargin,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    marginBlockStart: skeletonHeadingTopMargin,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
    "&:first-of-type": {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
      marginBlockStart: skeletonHeadingTopMargin - sectionPaddingTopBottom
    }
  },
  "&:focus": {
    // NOTE: Firefox allows elements that have "overflow: auto" to gain focus (as if it had tab-index="0")
    // We have made a deliberate choice to leave this behaviour as is.
    // This makes the outline go inside by 1px so it can actually be displayed
    // else it gets cut off from the overflow: scroll from the parent menu group.
    outlineOffset: -1
  }
});
var scrollableStyles = css({
  flexShrink: 1,
  overflow: "auto"
});
var unscrollableStyles = css({
  flexShrink: 0
});
var thinSeparatorStyles = css({
  borderBlockStart: "1px solid var(".concat(VAR_SEPARATOR_COLOR, ", ", "var(--ds-border, ".concat(N30A, ")"), ")")
});
var noSeparatorStyles = css({
  // this is to ensure that adjacent sections without separators don't get additional margins.
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/ui-styling-standard/no-unsafe-selectors -- Ignored via go/DSP-18766
  "[data-section] + &": {
    marginBlockStart: -6
  }
});
var Section = (0, import_react24.forwardRef)(function(_ref, ref) {
  var children = _ref.children, overrides = _ref.overrides, title = _ref.title, titleId = _ref.titleId, testId = _ref.testId, isScrollable = _ref.isScrollable, hasSeparator = _ref.hasSeparator, id = _ref.id, _ref$isList = _ref.isList, isList = _ref$isList === void 0 ? false : _ref$isList, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded7);
  propDeprecationWarning(
    "@atlaskit/menu",
    "overrides",
    overrides !== void 0,
    ""
    // TODO: Create DAC post when primitives/xcss are available as alternatives
  );
  var UNSAFE_headingOverrides = overrides && overrides.HeadingItem && overrides.HeadingItem.cssFn;
  var content = isList ? jsx("ul", {
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      margin: 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      padding: 0
    }
  }, import_react24.Children.map(import_react24.Children.toArray(children), function(child, index) {
    return jsx("li", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: {
        listStyleType: "none",
        margin: 0,
        padding: 0
      },
      key: index
    }, child);
  })) : children;
  var childrenMarkup = title !== void 0 ? jsx(import_react24.Fragment, null, jsx(
    heading_item_default,
    {
      cssFn: UNSAFE_headingOverrides,
      testId: testId && "".concat(testId, "--heading"),
      "aria-hidden": true
    },
    title
  ), content) : jsx(import_react24.Fragment, null, content);
  return jsx("div", _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: UNSAFE_className,
    id,
    css: [sectionStyles, isScrollable ? scrollableStyles : unscrollableStyles, hasSeparator ? (
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      thinSeparatorStyles
    ) : noSeparatorStyles],
    "aria-label": title,
    "aria-labelledby": titleId,
    "data-testid": testId,
    role: "group",
    "data-section": true,
    ref
  }), childrenMarkup);
});
var section_default = Section;

// node_modules/@atlaskit/menu/dist/esm/menu-section/popup-menu-group.js
init_extends();
init_objectWithoutProperties();
init_emotion_react_browser_development_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/group-title.js
var import_react27 = __toESM(require_react());
var headingStyles2 = xcss({
  color: "color.text.subtle",
  font: "font.heading.xxsmall",
  paddingBlock: "space.0",
  paddingInline: "space.200"
});
var GroupTitle = function GroupTitle2(_ref) {
  var id = _ref.id, title = _ref.title;
  return import_react27.default.createElement(box_default, {
    "data-ds--menu--heading-item": true,
    role: "menuitem",
    id,
    "aria-hidden": "true",
    xcss: headingStyles2
  }, title);
};
var group_title_default = GroupTitle;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
var _excluded8 = ["children", "id", "isList", "isScrollable", "title", "testId", "hasSeparator", "overrides"];
var DropdownMenuItemGroup = (0, import_react28.forwardRef)(function(_ref, ref) {
  var children = _ref.children, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, title = _ref.title, testId = _ref.testId, hasSeparator = _ref.hasSeparator, overrides = _ref.overrides, rest = _objectWithoutProperties(_ref, _excluded8);
  var uid = useId();
  var titleId = "dropdown-menu-item-group-title-".concat(uid);
  return import_react28.default.createElement(section_default, _extends({
    id,
    ref,
    isList,
    isScrollable,
    hasSeparator,
    testId,
    titleId: title ? titleId : void 0,
    overrides
  }, rest), title && import_react28.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children);
});
var dropdown_menu_item_group_default = DropdownMenuItemGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item.js
init_extends();
init_objectWithoutProperties();
var import_react29 = __toESM(require_react());
init_esm();
var _excluded9 = ["children", "component", "description", "elemAfter", "elemBefore", "href", "isDisabled", "isSelected", "onClick", "rel", "shouldDescriptionWrap", "shouldTitleWrap", "target", "testId", "UNSAFE_shouldDisableRouterLink", "returnFocusRef", "interactionName", "role"];
var DropdownMenuItem = (0, import_react29.forwardRef)(function(_ref, ref) {
  var children = _ref.children, component = _ref.component, description = _ref.description, elemAfter = _ref.elemAfter, elemBefore = _ref.elemBefore, href = _ref.href, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, onClick = _ref.onClick, rel = _ref.rel, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, target = _ref.target, testId = _ref.testId, UNSAFE_shouldDisableRouterLink = _ref.UNSAFE_shouldDisableRouterLink, returnFocusRef = _ref.returnFocusRef, interactionName = _ref.interactionName, role = _ref.role, rest = _objectWithoutProperties(_ref, _excluded9);
  var itemRef = use_register_item_with_focus_manager_default(!!rest["aria-haspopup"]);
  var handleItemClick = (0, import_react29.useCallback)(function(event) {
    if (returnFocusRef !== null && returnFocusRef !== void 0 && returnFocusRef.current) {
      returnFocusRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  }, [onClick, returnFocusRef]);
  if (component) {
    return import_react29.default.createElement(custom_item_default, _extends({
      component,
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      href,
      target,
      rel
    }, fg("platform_button_item-add-ufo-metrics") && {
      interactionName
    }, rest), children);
  } else if (href) {
    return import_react29.default.createElement(link_item_default, _extends({
      description,
      href,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      rel,
      role: "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      target,
      testId,
      UNSAFE_shouldDisableRouterLink
    }, fg("platform_button_item-add-ufo-metrics") && {
      interactionName
    }, rest), children);
  } else {
    return import_react29.default.createElement(button_item_default, _extends({
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      role: role || "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      target,
      rel
    }, fg("platform_button_item-add-ufo-metrics") && {
      interactionName
    }, rest), children);
  }
});
var dropdown_menu_item_default = DropdownMenuItem;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react33 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/checkbox-icon.js
var import_react30 = __toESM(require_react());
init_esm();
var CheckboxIcon = function CheckboxIcon2(_ref) {
  var checked = _ref.checked;
  return import_react30.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react30.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("rect", {
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5",
      fill: "currentColor"
    }), import_react30.default.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
      fill: "inherit"
    })) : import_react30.default.createElement(import_react30.default.Fragment, null, import_react30.default.createElement("rect", {
      fill: "currentColor",
      x: "6",
      y: "6",
      width: "12",
      height: "12",
      rx: "2",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react30.default.createElement("path", {
      d: "M9.707 11.293a1 1 0 10-1.414 1.414l2 2a1 1 0 001.414 0l4-4a1 1 0 10-1.414-1.414L11 12.586l-1.293-1.293z",
      fill: "inherit"
    }))
  ));
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
init_slicedToArray();
var import_react32 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/checkbox-group-context.js
var import_react31 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react31.createContext)("");

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
var useCheckboxState = function useCheckboxState2(_ref) {
  var isSelected = _ref.isSelected, id = _ref.id, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react32.useContext)(SelectionStoreContext), setItemState = _useContext.setItemState, getItemState2 = _useContext.getItemState;
  var groupId = (0, import_react32.useContext)(CheckboxGroupContext);
  var persistedIsSelected = getItemState2(groupId, id);
  var _useState = (0, import_react32.useState)(
    // Initial state is set depending on value being defined or not.
    // This state is only utilised if the checkbox is uncontrolled.
    function() {
      return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
    }
  ), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react32.useCallback)(function(newValue) {
    var nextValue = newValue(persistedIsSelected);
    setLocalIsSelected(nextValue);
    setItemState(groupId, id, nextValue);
  }, [setItemState, persistedIsSelected, groupId, id]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    setItemState(groupId, id, defaultSelected || false);
  }
  return [localIsSelected, setLocalState];
};
var use_checkbox_state_default = useCheckboxState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
var _excluded10 = ["children", "defaultSelected", "description", "id", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "testId", "interactionName"];
var DropdownItemCheckbox = function DropdownItemCheckbox2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, description = _ref.description, id = _ref.id, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, testId = _ref.testId, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded10);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemCheckbox] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useCheckboxState = use_checkbox_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useCheckboxState2 = _slicedToArray(_useCheckboxState, 2), selected = _useCheckboxState2[0], setSelected = _useCheckboxState2[1];
  var onClickHandler = (0, import_react33.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react33.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react33.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    description,
    iconBefore: import_react33.default.createElement(checkbox_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemcheckbox",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId
  }, fg("platform_button_item-add-ufo-metrics") && {
    interactionName
  }, rest), children));
};
var dropdown_item_checkbox_default = DropdownItemCheckbox;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox-group.js
init_extends();
init_objectWithoutProperties();
var import_react34 = __toESM(require_react());
var _excluded11 = ["children", "hasSeparator", "id", "isList", "isScrollable", "overrides", "testId", "title"];
var DropdownItemCheckboxGroup = function DropdownItemCheckboxGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, overrides = _ref.overrides, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded11);
  var uid = useId();
  var titleId = "dropdown-menu-item-checkbox-group-title-".concat(uid);
  return import_react34.default.createElement(CheckboxGroupContext.Provider, {
    value: id
  }, import_react34.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    overrides,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react34.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_checkbox_group_default = DropdownItemCheckboxGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react38 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/radio-icon.js
var import_react35 = __toESM(require_react());
init_esm();
var RadioIcon = function RadioIcon2(_ref) {
  var checked = _ref.checked;
  return import_react35.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react35.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react35.default.createElement(import_react35.default.Fragment, null, import_react35.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "7.5",
      fill: "currentColor",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: "1"
    }), import_react35.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "3",
      fill: "inherit"
    })) : import_react35.default.createElement(import_react35.default.Fragment, null, import_react35.default.createElement("circle", {
      fill: "currentColor",
      cx: "12",
      cy: "12",
      r: "6",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react35.default.createElement("circle", {
      fill: "inherit",
      cx: "12",
      cy: "12",
      r: "2"
    }))
  ));
};
var radio_icon_default = RadioIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
init_defineProperty();
init_slicedToArray();
var import_react37 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
init_extends();
init_defineProperty();
init_slicedToArray();
init_objectWithoutProperties();
var import_react36 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/reset-options-in-group.js
init_defineProperty();
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var resetOptionsInGroup = function resetOptionsInGroup2(group) {
  return Object.keys(group || {}).reduce(function(accumulator, current) {
    return _objectSpread2(_objectSpread2({}, accumulator), {}, _defineProperty({}, current, typeof group[current] === "undefined" ? void 0 : false));
  }, {});
};
var reset_options_in_group_default = resetOptionsInGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
var _excluded12 = ["children", "hasSeparator", "id", "isList", "isScrollable", "overrides", "testId", "title"];
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var RadioGroupContext = (0, import_react36.createContext)({
  id: "",
  radioGroupState: {},
  selectRadioItem: noop
});
var DropdownItemRadioGroup = function DropdownItemRadioGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, overrides = _ref.overrides, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded12);
  var _useContext = (0, import_react36.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var uid = useId();
  var titleId = "dropdown-menu-item-radio-group-title-".concat(uid);
  var _useState = (0, import_react36.useState)(function() {
    return getGroupState2(id);
  }), _useState2 = _slicedToArray(_useState, 2), radioGroupState = _useState2[0], setRadioGroupState = _useState2[1];
  var selectRadioItem = function selectRadioItem2(childId, value) {
    var newValue = _objectSpread3(_objectSpread3({}, reset_options_in_group_default(getGroupState2(id))), {}, _defineProperty({}, childId, value));
    setRadioGroupState(newValue);
    setGroupState(id, newValue);
  };
  return import_react36.default.createElement(RadioGroupContext.Provider, {
    value: {
      id,
      radioGroupState,
      selectRadioItem
    }
  }, import_react36.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    overrides,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react36.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_radio_group_default = DropdownItemRadioGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function useRadioState(_ref) {
  var id = _ref.id, isSelected = _ref.isSelected, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react37.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var _useContext2 = (0, import_react37.useContext)(RadioGroupContext), group = _useContext2.id, radioGroupState = _useContext2.radioGroupState, selectRadioItem = _useContext2.selectRadioItem;
  var persistedIsSelected = radioGroupState[id];
  var _useState = (0, import_react37.useState)(function() {
    return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
  }), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react37.useCallback)(function(newValue) {
    if (!persistedIsSelected) {
      var nextValue = newValue(persistedIsSelected);
      selectRadioItem(id, nextValue);
      setLocalIsSelected(nextValue);
    }
  }, [persistedIsSelected, id, selectRadioItem]);
  (0, import_react37.useEffect)(function() {
    setLocalIsSelected(function() {
      var existing2 = radioGroupState[id];
      return existing2 !== void 0 ? existing2 : defaultSelected || false;
    });
  }, [radioGroupState, group, id, defaultSelected]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    var existing = getGroupState2(group);
    setGroupState(group, _objectSpread4(_objectSpread4({}, reset_options_in_group_default(existing || {})), {}, _defineProperty({}, id, defaultSelected || false)));
  }
  return [localIsSelected, setLocalState];
}
var use_radio_state_default = useRadioState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-voice-over-supported.js
var canUseDOM = function canUseDOM2() {
  return Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
};
var isVoiceOverSupported = function isVoiceOverSupported2() {
  return /Mac OS X/.test(canUseDOM() ? navigator.userAgent : "");
};
var is_voice_over_supported_default = isVoiceOverSupported;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
var _excluded13 = ["children", "defaultSelected", "testId", "id", "title", "description", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "interactionName"];
var DropdownItemRadio = function DropdownItemRadio2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, testId = _ref.testId, id = _ref.id, title = _ref.title, description = _ref.description, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded13);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemRadio] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useRadioState = use_radio_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useRadioState2 = _slicedToArray(_useRadioState, 2), selected = _useRadioState2[0], setSelected = _useRadioState2[1];
  var onClickHandler = (0, import_react38.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react38.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react38.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    description,
    iconBefore: import_react38.default.createElement(radio_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: is_voice_over_supported_default() ? "radio" : "menuitemradio",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId,
    title
  }, fg("platform_button_item-add-ufo-metrics") && {
    interactionName
  }, rest), children));
};
var dropdown_item_radio_default = DropdownItemRadio;
export {
  dropdown_menu_item_default as DropdownItem,
  dropdown_item_checkbox_default as DropdownItemCheckbox,
  dropdown_item_checkbox_group_default as DropdownItemCheckboxGroup,
  dropdown_menu_item_group_default as DropdownItemGroup,
  dropdown_item_radio_default as DropdownItemRadio,
  dropdown_item_radio_group_default as DropdownItemRadioGroup,
  dropdown_menu_default as default
};
//# sourceMappingURL=@atlaskit_dropdown-menu.js.map
