import {
  box_default as box_default2,
  xcss
} from "./chunk-57TNOKYF.js";
import {
  box_default
} from "./chunk-HQP6RSCY.js";
import "./chunk-FYOGWMFM.js";
import "./chunk-SYD3CLUV.js";
import "./chunk-RUVWD2PF.js";
import "./chunk-CVCFKGGR.js";
import "./chunk-IYLTOISH.js";
import "./chunk-WGZLMHA6.js";
import "./chunk-UEZMFDUV.js";
import {
  ax
} from "./chunk-55ID7ZG3.js";
import {
  css,
  init_emotion_react_browser_development_esm,
  jsx
} from "./chunk-FN3H3NMO.js";
import "./chunk-BA6HJOCH.js";
import {
  fg,
  init_esm
} from "./chunk-2WJRDDYS.js";
import "./chunk-IYLHYNH2.js";
import "./chunk-4JLRNKH6.js";
import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@atlaskit/lozenge/dist/esm/index.js
var import_react4 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/lozenge/dist/esm/compiled/index.js
var React = __toESM(require_react());
import "/Users/mjerkovic/Documents/GitHub/ads-vibecode/node_modules/@atlaskit/lozenge/dist/esm/compiled/index.compiled.css";
var import_react = __toESM(require_react());
init_esm();
var stylesOld = {
  container: "_2rkoglpi _1reo15vq _18m915vq _18zr1b66 _1e0c116y _1kz6184x _kqswpfqs _vchhusvi",
  "text.bold.default": "_syaz15cr",
  "text.bold.inprogress": "_syaz15cr",
  "text.bold.moved": "_syazal3n",
  "text.bold.new": "_syaz15cr",
  "text.bold.removed": "_syaz15cr",
  "text.bold.success": "_syaz15cr",
  "text.subtle.default": "_syazjjyb",
  "text.subtle.inprogress": "_syaz1lpn",
  "text.subtle.moved": "_syaz1tm6",
  "text.subtle.new": "_syaz1mvf",
  "text.subtle.removed": "_syaz1ick",
  "text.subtle.success": "_syaz17fi"
};
var stylesOldUnbounded = {
  text: "_1reo15vq _18m915vq _ect41gqc _1wyb1skh _zg8l4jg8 _k48pmoej _vwz47vkz _1bto1l2s _1p1dangw _o5721q9c",
  customLetterspacing: "_1dyz9vsi"
};
var backgroundColorsOld = {
  bold: {
    default: "color.background.neutral.bold",
    inprogress: "color.background.information.bold",
    moved: "color.background.warning.bold",
    new: "color.background.discovery.bold",
    removed: "color.background.danger.bold",
    success: "color.background.success.bold"
  },
  subtle: {
    default: "color.background.neutral",
    inprogress: "color.background.information",
    moved: "color.background.warning",
    new: "color.background.discovery",
    removed: "color.background.danger",
    success: "color.background.success"
  }
};
var stylesNew = {
  container: "_2rko1l7b _1reo15vq _18m915vq _1e0c116y _vchhusvi _kqswpfqs _1kz6184x _bozg1b66 _y4ti1b66",
  containerSubtle: "_1cwg1n1a",
  text: "_1reo15vq _18m915vq _ect41gqc _1wyb1skh _zg8l4jg8 _k48pmoej _vwz47vkz _1bto1l2s _1p1dangw _o5721q9c",
  customLetterspacing: "_1dyz9vsi",
  "bg.bold.default": "_bfhk1fkg",
  "bg.bold.inprogress": "_bfhk1ymo",
  "bg.bold.moved": "_bfhkxmjf",
  "bg.bold.new": "_bfhkshej",
  "bg.bold.removed": "_bfhk1366",
  "bg.bold.success": "_bfhk3uhp",
  "bg.subtle.default": "_bfhksm61",
  "bg.subtle.inprogress": "_bfhksm61",
  "bg.subtle.moved": "_bfhksm61",
  "bg.subtle.new": "_bfhksm61",
  "bg.subtle.removed": "_bfhksm61",
  "bg.subtle.success": "_bfhksm61",
  "border.subtle.default": "_19it14mp",
  "border.subtle.inprogress": "_19it1cy7",
  "border.subtle.moved": "_19itzi1n",
  "border.subtle.new": "_19it1apr",
  "border.subtle.removed": "_19itoa5t",
  "border.subtle.success": "_19it1am1",
  "outline.subtle.default": "_12ji14je _1qu2nqa1 _12y3t94y",
  "outline.subtle.inprogress": "_12jiuisw _1qu2nqa1 _12y3t94y",
  "outline.subtle.moved": "_12jih727 _1qu2nqa1 _12y3t94y",
  "outline.subtle.new": "_12ji157s _1qu2nqa1 _12y3t94y",
  "outline.subtle.removed": "_12jia2c0 _1qu2nqa1 _12y3t94y",
  "outline.subtle.success": "_12jin0nx _1qu2nqa1 _12y3t94y",
  "text.subtle": "_syaz1fxt",
  "text.bold": "_syazwwip"
};
var appearanceTypes = ["default", "inprogress", "moved", "new", "removed", "success"];
var Lozenge = (0, import_react.memo)(function(_ref) {
  var children = _ref.children, testId = _ref.testId, _ref$isBold = _ref.isBold, isBold = _ref$isBold === void 0 ? false : _ref$isBold, _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance, _ref$maxWidth = _ref.maxWidth, maxWidth = _ref$maxWidth === void 0 ? 200 : _ref$maxWidth, style = _ref.style;
  var appearanceStyle = isBold ? "bold" : "subtle";
  var appearanceType = (0, import_react.useMemo)(function() {
    return appearanceTypes.includes(appearance) ? appearance : "default";
  }, [appearance]);
  var maxWidthValue = typeof maxWidth === "string" ? maxWidth : "".concat(maxWidth, "px");
  var maxWidthIsPc = typeof maxWidth === "string" && /%$/.test(maxWidth);
  if (fg("platform-component-visual-refresh")) {
    return React.createElement("span", {
      style: {
        backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
        maxWidth: maxWidthIsPc ? maxWidth : "100%"
      },
      "data-testid": testId,
      className: ax([stylesNew.container, stylesNew["bg.".concat(appearanceStyle, ".").concat(appearanceType)], appearanceStyle === "subtle" && !fg("visual-refresh_drop_5") && stylesNew["border.subtle.".concat(appearanceType)], appearanceStyle === "subtle" && fg("visual-refresh_drop_5") && stylesNew["outline.subtle.".concat(appearanceType)], appearanceStyle === "subtle" && fg("visual-refresh_drop_5") && stylesNew.containerSubtle])
    }, React.createElement("span", {
      style: {
        color: style === null || style === void 0 ? void 0 : style.color,
        // to negate paddingInline specified on Box above
        maxWidth: maxWidthIsPc ? "100%" : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
      },
      "data-testid": testId && "".concat(testId, "--text"),
      className: ax([stylesNew.text, fg("platform-lozenge-custom-letterspacing") && stylesNew.customLetterspacing, stylesNew["text.".concat(appearanceStyle)]])
    }, children));
  }
  return React.createElement(box_default, {
    as: "span",
    backgroundColor: backgroundColorsOld[appearanceStyle][appearanceType],
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      maxWidth: maxWidthIsPc ? maxWidth : "100%"
    },
    paddingInline: "space.050",
    xcss: stylesOld.container,
    testId
  }, React.createElement("span", {
    style: {
      color: style === null || style === void 0 ? void 0 : style.color,
      // to negate paddingInline specified on Box above
      maxWidth: maxWidthIsPc ? "100%" : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
    },
    "data-testid": testId && "".concat(testId, "--text"),
    className: ax([stylesOldUnbounded.text, fg("platform-lozenge-custom-letterspacing") && stylesOldUnbounded.customLetterspacing, stylesOld["text.".concat(appearanceStyle, ".").concat(appearanceType)]])
  }, children));
});
Lozenge.displayName = "Lozenge";
var compiled_default = Lozenge;

// node_modules/@atlaskit/lozenge/dist/esm/Lozenge/index.js
var import_react2 = __toESM(require_react());
init_emotion_react_browser_development_esm();
init_esm();
var baseStylesOld = xcss({
  display: "inline-flex",
  borderRadius: "border.radius",
  blockSize: "min-content",
  position: "static",
  overflow: "hidden"
});
var styles = {
  container: css({
    display: "inline-flex",
    boxSizing: "border-box",
    position: "static",
    blockSize: "min-content",
    borderRadius: "3px",
    overflow: "hidden",
    paddingInline: "var(--ds-space-050, 4px)"
  }),
  containerSubtle: css({
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
    outlineOffset: -1
  }),
  background: {
    bold: {
      default: css({
        backgroundColor: "#DDDEE1"
      }),
      inprogress: css({
        backgroundColor: "#8FB8F6"
      }),
      moved: css({
        backgroundColor: "#F9C84E"
      }),
      new: css({
        backgroundColor: "#D8A0F7"
      }),
      removed: css({
        backgroundColor: "#FD9891"
      }),
      success: css({
        backgroundColor: "#B3DF72"
      })
    },
    subtle: {
      default: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      inprogress: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      moved: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      new: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      removed: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      }),
      success: css({
        backgroundColor: "var(--ds-background-neutral-subtle, #00000000)"
      })
    }
  },
  border: {
    subtle: {
      default: css({
        border: "1px solid #B7B9BE"
      }),
      inprogress: css({
        border: "1px solid #669DF1"
      }),
      moved: css({
        border: "1px solid #FCA700"
      }),
      new: css({
        border: "1px solid #C97CF4"
      }),
      removed: css({
        border: "1px solid #F87168"
      }),
      success: css({
        border: "1px solid #94C748"
      })
    }
  },
  outline: {
    subtle: {
      default: css({
        outline: "1px solid #B7B9BE"
      }),
      inprogress: css({
        outline: "1px solid #669DF1"
      }),
      moved: css({
        outline: "1px solid #FCA700"
      }),
      new: css({
        outline: "1px solid #C97CF4"
      }),
      removed: css({
        outline: "1px solid #F87168"
      }),
      success: css({
        outline: "1px solid #94C748"
      })
    }
  },
  text: {
    subtle: css({
      color: "var(--ds-text, #172B4D)"
    }),
    bold: css({
      color: "#292A2E"
    })
  }
};
var textStyles = css({
  fontFamily: 'var(--ds-font-family-body, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, "Helvetica Neue", sans-serif)',
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  fontSize: "11px",
  fontStyle: "normal",
  fontWeight: "var(--ds-font-weight-bold, 700)",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  lineHeight: "16px",
  overflow: "hidden",
  textOverflow: "ellipsis",
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  textTransform: "uppercase",
  whiteSpace: "nowrap"
});
var customLetterspacingStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
  letterSpacing: 0.165
});
var Lozenge2 = (0, import_react2.memo)(function(_ref) {
  var children = _ref.children, testId = _ref.testId, _ref$isBold = _ref.isBold, isBold = _ref$isBold === void 0 ? false : _ref$isBold, _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance, _ref$maxWidth = _ref.maxWidth, maxWidth = _ref$maxWidth === void 0 ? 200 : _ref$maxWidth, style = _ref.style;
  var appearanceStyle = isBold ? "bold" : "subtle";
  var appearanceType = appearance in styles.background[appearanceStyle] ? appearance : "default";
  var maxWidthValue = typeof maxWidth === "string" ? maxWidth : "".concat(maxWidth, "px");
  var maxWidthIsPc = typeof maxWidth === "string" && /%$/.test(maxWidth);
  if (fg("platform-component-visual-refresh")) {
    return jsx("span", {
      style: {
        backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
        maxWidth: maxWidthIsPc ? maxWidth : "100%"
      },
      css: [styles.container, styles.background[appearanceStyle][appearanceType], appearanceStyle === "subtle" && !fg("visual-refresh_drop_5") && styles.border.subtle[appearanceType], appearanceStyle === "subtle" && fg("visual-refresh_drop_5") && styles.outline.subtle[appearanceType], appearanceStyle === "subtle" && fg("visual-refresh_drop_5") && styles.containerSubtle],
      "data-testid": testId
    }, jsx("span", {
      css: [textStyles, fg("platform-lozenge-custom-letterspacing") && customLetterspacingStyles, styles.text[appearanceStyle]],
      style: {
        color: style === null || style === void 0 ? void 0 : style.color,
        // to negate paddingInline specified on Box above
        maxWidth: maxWidthIsPc ? "100%" : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
      },
      "data-testid": testId && "".concat(testId, "--text")
    }, children));
  }
  var appearanceTypeOld = appearance in backgroundColorsOld2[appearanceStyle] ? appearance : "default";
  return jsx(box_default2, {
    as: "span",
    backgroundColor: backgroundColorsOld2[appearanceStyle][appearanceTypeOld],
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      maxWidth: maxWidthIsPc ? maxWidth : "100%"
    },
    paddingInline: "space.050",
    xcss: baseStylesOld,
    testId
  }, jsx("span", {
    css: [textStyles, fg("platform-lozenge-custom-letterspacing") && customLetterspacingStyles, textColorsOld[appearanceStyle][appearanceType]],
    style: {
      color: style === null || style === void 0 ? void 0 : style.color,
      // to negate paddingInline specified on Box above
      maxWidth: maxWidthIsPc ? "100%" : "calc(".concat(maxWidthValue, " - ", "var(--ds-space-100, 8px)", ")")
    },
    "data-testid": testId && "".concat(testId, "--text")
  }, children));
});
Lozenge2.displayName = "Lozenge";
var Lozenge_default = Lozenge2;
var backgroundColorsOld2 = {
  bold: {
    default: "color.background.neutral.bold",
    inprogress: "color.background.information.bold",
    moved: "color.background.warning.bold",
    new: "color.background.discovery.bold",
    removed: "color.background.danger.bold",
    success: "color.background.success.bold"
  },
  subtle: {
    default: "color.background.neutral",
    inprogress: "color.background.information",
    moved: "color.background.warning",
    new: "color.background.discovery",
    removed: "color.background.danger",
    success: "color.background.success"
  }
};
var textColorsOld = {
  bold: {
    default: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    inprogress: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    moved: css({
      color: "var(--ds-text-warning-inverse, #172B4D)"
    }),
    new: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    removed: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    success: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    })
  },
  subtle: {
    default: css({
      color: "var(--ds-text-subtle, #42526E)"
    }),
    inprogress: css({
      color: "var(--ds-text-information, #0052CC)"
    }),
    moved: css({
      color: "var(--ds-text-warning, #974F0C)"
    }),
    new: css({
      color: "var(--ds-text-discovery, #403294)"
    }),
    removed: css({
      color: "var(--ds-text-danger, #DE350B)"
    }),
    success: css({
      color: "var(--ds-text-success, #006644)"
    })
  }
};

// node_modules/@atlaskit/lozenge/dist/esm/index.js
var Lozenge3 = import_react4.default.memo(function(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    fg("platform_dst_lozenge_fg") ? import_react4.default.createElement(compiled_default, props) : import_react4.default.createElement(Lozenge_default, props)
  );
});
Lozenge3.displayName = "Lozenge";
var esm_default = Lozenge3;
export {
  esm_default as default
};
//# sourceMappingURL=@atlaskit_lozenge.js.map
