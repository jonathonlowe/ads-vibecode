{
  "version": 3,
  "sources": ["../../@atlaskit/primitives/dist/esm/utils/surface-provider.js", "../../@atlaskit/primitives/dist/esm/utils/has-text-ancestor-context.js", "../../@atlaskit/app-provider/dist/esm/router-link-provider/hooks/use-router-link.js", "../../@atlaskit/app-provider/dist/esm/router-link-provider/index.js", "../../@atlaskit/app-provider/dist/esm/app-provider.js", "../../@atlaskit/app-provider/dist/esm/theme-provider.js"],
  "sourcesContent": ["import { createContext, useContext } from 'react';\n/**\n * __Surface context__\n *\n * A surface context provides context information on the current background (if set).\n */\nexport var SurfaceContext = /*#__PURE__*/createContext('elevation.surface');\n\n/**\n * __useSurface__\n *\n * Return the current surface. If no parent sets a surface color it falls back to the default surface.\n *\n * @see SurfaceContext\n */\nexport var useSurface = function useSurface() {\n  return useContext(SurfaceContext);\n};\nSurfaceContext.displayName = 'SurfaceProvider';", "import { createContext, useContext } from 'react';\nvar HasTextAncestorContext = /*#__PURE__*/createContext(false);\n/**\n * @internal\n */\nexport var useHasTextAncestor = function useHasTextAncestor() {\n  return useContext(HasTextAncestorContext);\n};\n/**\n * @internal\n */\nexport var HasTextAncestorProvider = HasTextAncestorContext.Provider;", "import { useContext } from 'react';\nimport { RouterLinkProviderContext } from '../index';\n\n/**\n * __useRouterLink()__\n *\n * Hook: Returns app-configured router link component.\n *\n * A generic can be passed to define advanced link configuration:\n * ```\n * type MyRouterLinkConfig = {\n *  to: string;\n *  replace?: boolean;\n * }\n *\n * const RouterLink = useRouterLink<MyRouterLinkConfig>();\n * ```\n */\nvar useRouterLink = function useRouterLink() {\n  var _useContext = useContext(RouterLinkProviderContext),\n    routerLinkComponent = _useContext.routerLinkComponent;\n  if (routerLinkComponent) {\n    return routerLinkComponent;\n  }\n};\nexport default useRouterLink;", "import React, { createContext } from 'react';\n// eslint-disable-next-line @repo/internal/react/require-jsdoc\nexport var RouterLinkProviderContext = /*#__PURE__*/createContext({});\n/**\n * __RouterLinkProvider__\n *\n * Provides a configured router link component for use\n * within Design System components.\n */\nvar RouterLinkProvider = function RouterLinkProvider(_ref) {\n  var routerLinkComponent = _ref.routerLinkComponent,\n    children = _ref.children;\n  return /*#__PURE__*/React.createElement(RouterLinkProviderContext.Provider, {\n    value: {\n      routerLinkComponent: routerLinkComponent\n    }\n  }, children);\n};\nexport default RouterLinkProvider;", "import React, { createContext, useContext } from 'react';\nimport RouterLinkProvider from './router-link-provider';\nimport ThemeProvider from './theme-provider';\nvar InsideAppProviderContext = /*#__PURE__*/createContext(false);\n/**\n * __App provider__\n *\n * An app provider provides app level configuration such as global theming.\n *\n * Place it at the root of your application.\n */\nfunction AppProvider(_ref) {\n  var children = _ref.children,\n    _ref$defaultColorMode = _ref.defaultColorMode,\n    defaultColorMode = _ref$defaultColorMode === void 0 ? 'light' : _ref$defaultColorMode,\n    defaultTheme = _ref.defaultTheme,\n    routerLinkComponent = _ref.routerLinkComponent,\n    UNSAFE_isThemingDisabled = _ref.UNSAFE_isThemingDisabled;\n  var isInsideAppProvider = useContext(InsideAppProviderContext);\n  if (isInsideAppProvider) {\n    throw new Error('App provider should not be nested within another app provider.');\n  }\n  var routerLinkProvider = /*#__PURE__*/React.createElement(RouterLinkProvider, {\n    routerLinkComponent: routerLinkComponent\n  }, children);\n  return /*#__PURE__*/React.createElement(InsideAppProviderContext.Provider, {\n    value: true\n  }, UNSAFE_isThemingDisabled ? routerLinkProvider : /*#__PURE__*/React.createElement(ThemeProvider, {\n    defaultColorMode: defaultColorMode,\n    defaultTheme: defaultTheme\n  }, routerLinkProvider));\n}\nexport default AppProvider;", "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { bind } from 'bind-event-listener';\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport { getGlobalTheme, setGlobalTheme, ThemeMutationObserver } from '@atlaskit/tokens';\nvar defaultThemeSettings = function defaultThemeSettings() {\n  return {\n    dark: 'dark',\n    light: 'light',\n    spacing: 'spacing',\n    typography: fg('platform-default-typography-modernized') ? 'typography-modernized' : undefined\n  };\n};\nvar ColorModeContext = /*#__PURE__*/createContext(undefined);\nvar SetColorModeContext = /*#__PURE__*/createContext(undefined);\nvar ThemeContext = /*#__PURE__*/createContext(undefined);\nvar SetThemeContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * __UNSAFE_useColorModeForMigration()__\n *\n * Returns the current color mode when inside the app provider.\n * Unlike useColorMode, this utility returns undefined, instead of throwing an error, when the app provider is missing.\n * This allows it to be used by components that need to operate with and without an app provider.\n */\nexport function UNSAFE_useColorModeForMigration() {\n  var value = useContext(ColorModeContext);\n  return value;\n}\n\n/**\n * __useColorMode()__\n *\n * Returns the current color mode when inside the app provider.\n */\nexport function useColorMode() {\n  var value = useContext(ColorModeContext);\n  if (!value) {\n    throw new Error('useColorMode must be used within AppProvider.');\n  }\n  return value;\n}\n\n/**\n * __useSetColorMode()__\n *\n * Returns the color mode setter when inside the app provider.\n */\nexport function useSetColorMode() {\n  var value = useContext(SetColorModeContext);\n  if (!value) {\n    throw new Error('useSetColorMode must be used within AppProvider.');\n  }\n  return value;\n}\n\n/**\n * __useTheme()__\n *\n * Returns the current theme settings when inside the app provider.\n */\nexport function useTheme() {\n  var theme = useContext(ThemeContext);\n  var _useState = useState(theme || getGlobalTheme()),\n    _useState2 = _slicedToArray(_useState, 2),\n    resolvedTheme = _useState2[0],\n    setResolvedTheme = _useState2[1];\n  useEffect(function () {\n    // We are using theme from context so no need to reference the DOM\n    if (theme) {\n      return;\n    }\n    var observer = new ThemeMutationObserver(setResolvedTheme);\n    observer.observe();\n    return function () {\n      return observer.disconnect();\n    };\n  }, [theme]);\n  return resolvedTheme;\n}\n\n/**\n * __useSetTheme()__\n *\n * Returns the theme setter when inside the app provider.\n */\nexport function useSetTheme() {\n  var value = useContext(SetThemeContext);\n  if (!value) {\n    throw new Error('useSetTheme must be used within AppProvider.');\n  }\n  return value;\n}\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\nvar prefersDarkModeMql = isMatchMediaAvailable ? window.matchMedia('(prefers-color-scheme: dark)') : undefined;\n\n// TODO: currently 'auto' color mode will always return 'light' in SSR.\n// Additional work required: https://product-fabric.atlassian.net/browse/DSP-9781\nfunction getReconciledColorMode(colorMode) {\n  if (colorMode === 'auto') {\n    return prefersDarkModeMql !== null && prefersDarkModeMql !== void 0 && prefersDarkModeMql.matches ? 'dark' : 'light';\n  }\n  return colorMode;\n}\n/**\n * __Theme provider__\n *\n * Provides global theming configuration.\n *\n * @internal\n */\nfunction ThemeProvider(_ref) {\n  var children = _ref.children,\n    defaultColorMode = _ref.defaultColorMode,\n    defaultTheme = _ref.defaultTheme;\n  var _useState3 = useState(defaultColorMode),\n    _useState4 = _slicedToArray(_useState3, 2),\n    chosenColorMode = _useState4[0],\n    setChosenColorMode = _useState4[1];\n  var _useState5 = useState(getReconciledColorMode(defaultColorMode)),\n    _useState6 = _slicedToArray(_useState5, 2),\n    reconciledColorMode = _useState6[0],\n    setReconciledColorMode = _useState6[1];\n  var _useState7 = useState(function () {\n      return _objectSpread(_objectSpread({}, defaultThemeSettings()), defaultTheme);\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    theme = _useState8[0],\n    setTheme = _useState8[1];\n  var setColorMode = useCallback(function (colorMode) {\n    setChosenColorMode(colorMode);\n    setReconciledColorMode(getReconciledColorMode(colorMode));\n  }, []);\n  var setPartialTheme = useCallback(function (nextTheme) {\n    setTheme(function (theme) {\n      return _objectSpread(_objectSpread({}, theme), nextTheme);\n    });\n  }, []);\n  var lastSetGlobalThemePromiseRef = useRef(null);\n  useEffect(function () {\n    /**\n     * We need to wait for any previous `setGlobalTheme` calls to finish before calling it again.\n     * This is to prevent race conditions as `setGlobalTheme` is async and mutates the DOM (e.g. sets the\n     * `data-color-mode` attribute on the root element).\n     *\n     * Since we can't safely abort the `setGlobalTheme` execution, we need to wait for it to properly finish before\n     * applying the new theme.\n     *\n     * Without this, we can end up in the following scenario:\n     * 1. app loads with the default 'light' theme, kicking off `setGlobalTheme`\n     * 2. app switches to 'dark' theme after retrieving value persisted in local storage, calling `setGlobalTheme` again\n     * 3. `setGlobalTheme` function execution for `dark` finishes before the initial `light` execution\n     * 4. `setGlobalTheme` function execution for `light` then finishes, resulting in the 'light' theme being applied.\n     */\n    var cleanupLastFnCall = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var unbindFn;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!lastSetGlobalThemePromiseRef.current) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 3;\n              return lastSetGlobalThemePromiseRef.current;\n            case 3:\n              unbindFn = _context.sent;\n              unbindFn();\n              lastSetGlobalThemePromiseRef.current = null;\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function cleanupLastFnCall() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var safelySetGlobalTheme = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var promise;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return cleanupLastFnCall();\n            case 2:\n              promise = setGlobalTheme(_objectSpread(_objectSpread({}, theme), {}, {\n                colorMode: reconciledColorMode\n              }));\n              lastSetGlobalThemePromiseRef.current = promise;\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function safelySetGlobalTheme() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    safelySetGlobalTheme();\n    return function cleanup() {\n      cleanupLastFnCall();\n    };\n  }, [theme, reconciledColorMode]);\n  useEffect(function () {\n    if (!prefersDarkModeMql) {\n      return;\n    }\n    var unbindListener = bind(prefersDarkModeMql, {\n      type: 'change',\n      listener: function listener(event) {\n        if (chosenColorMode === 'auto') {\n          setReconciledColorMode(event.matches ? 'dark' : 'light');\n        }\n      }\n    });\n    return unbindListener;\n  }, [chosenColorMode]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: reconciledColorMode\n  }, /*#__PURE__*/React.createElement(SetColorModeContext.Provider, {\n    value: setColorMode\n  }, /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(SetThemeContext.Provider, {\n    value: setPartialTheme\n  }, children))));\n}\nexport default ThemeProvider;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,mBAA0C;AAMnC,IAAI,qBAA8B,4BAAc,mBAAmB;AASnE,IAAI,aAAa,SAASA,cAAa;AAC5C,aAAO,yBAAW,cAAc;AAClC;AACA,eAAe,cAAc;;;AClB7B,IAAAC,gBAA0C;AAC1C,IAAI,6BAAsC,6BAAc,KAAK;AAItD,IAAI,qBAAqB,SAASC,sBAAqB;AAC5D,aAAO,0BAAW,sBAAsB;AAC1C;AAIO,IAAI,0BAA0B,uBAAuB;;;ACX5D,IAAAC,gBAA2B;;;ACA3B,IAAAC,gBAAqC;AAE9B,IAAI,gCAAyC,6BAAc,CAAC,CAAC;;;ADgBpE,IAAI,gBAAgB,SAASC,iBAAgB;AAC3C,MAAI,kBAAc,0BAAW,yBAAyB,GACpD,sBAAsB,YAAY;AACpC,MAAI,qBAAqB;AACvB,WAAO;AAAA,EACT;AACF;AACA,IAAO,0BAAQ;;;AEzBf,IAAAC,gBAAiD;;;ACAjD;AACA;AACA;AACA,yBAAgC;AAGhC,IAAAC,gBAA2F;AAC3F,iCAAqB;AACrB;AAUA,IAAI,uBAAgC,6BAAc,MAAS;AAC3D,IAAI,0BAAmC,6BAAc,MAAS;AAC9D,IAAI,mBAA4B,6BAAc,MAAS;AACvD,IAAI,sBAA+B,6BAAc,MAAS;AA6E1D,IAAI,wBAAwB,OAAO,WAAW,eAAe,gBAAgB;AAC7E,IAAI,qBAAqB,wBAAwB,OAAO,WAAW,8BAA8B,IAAI;;;ADhGrG,IAAI,+BAAwC,6BAAc,KAAK;",
  "names": ["useSurface", "import_react", "useHasTextAncestor", "import_react", "import_react", "useRouterLink", "import_react", "import_react"]
}
