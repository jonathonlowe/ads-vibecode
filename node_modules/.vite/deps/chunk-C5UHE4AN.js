import {
  css,
  init_emotion_react_browser_development_esm,
  jsx
} from "./chunk-FN3H3NMO.js";
import {
  _extends,
  init_extends
} from "./chunk-BA6HJOCH.js";
import {
  _defineProperty,
  _objectWithoutProperties,
  fg,
  init_defineProperty,
  init_esm,
  init_objectWithoutProperties
} from "./chunk-2WJRDDYS.js";
import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@atlaskit/icon/dist/esm/constants.js
var sizes, dimensions;
var init_constants = __esm({
  "node_modules/@atlaskit/icon/dist/esm/constants.js"() {
    sizes = {
      small: "16px",
      medium: "24px",
      large: "32px",
      xlarge: "48px"
    };
    dimensions = {
      small: {
        width: sizes.small,
        height: sizes.small
      },
      medium: {
        width: sizes.medium,
        height: sizes.medium
      },
      large: {
        width: sizes.large,
        height: sizes.large
      },
      xlarge: {
        width: sizes.xlarge,
        height: sizes.xlarge
      }
    };
  }
});

// node_modules/@atlaskit/icon/dist/esm/components/styles.js
var commonSVGStyles, smallStyles, mediumStyles, largeStyles, xlargeStyles, sizeStyleMap, getIconSize;
var init_styles = __esm({
  "node_modules/@atlaskit/icon/dist/esm/components/styles.js"() {
    init_constants();
    init_emotion_react_browser_development_esm();
    commonSVGStyles = {
      overflow: "hidden",
      pointerEvents: "none",
      /**
       * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
       * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
       * rule) and then override it with currentColor for the color changes to be picked up.
       */
      stop: {
        stopColor: "currentColor"
      }
    };
    smallStyles = css(dimensions.small);
    mediumStyles = css(dimensions.medium);
    largeStyles = css(dimensions.large);
    xlargeStyles = css(dimensions.xlarge);
    sizeStyleMap = {
      small: smallStyles,
      medium: mediumStyles,
      large: largeStyles,
      xlarge: xlargeStyles
    };
    getIconSize = function getIconSize2(_ref) {
      var width = _ref.width, height = _ref.height, size = _ref.size;
      if (width && height) {
        return {
          width,
          height
        };
      }
      if (size) {
        return dimensions[size];
      }
      return void 0;
    };
  }
});

// node_modules/@atlaskit/icon/dist/esm/components/utils.js
var getBackground;
var init_utils = __esm({
  "node_modules/@atlaskit/icon/dist/esm/components/utils.js"() {
    getBackground = function getBackground2() {
      return "var(--ds-surface, #FFFFFF)";
    };
  }
});

// node_modules/@atlaskit/icon/dist/esm/components/icon.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var import_react2, iconStyles, baseHcmStyles, primaryEqualsSecondaryHcmStyles, secondaryTransparentHcmStyles, Icon, icon_default;
var init_icon = __esm({
  "node_modules/@atlaskit/icon/dist/esm/components/icon.js"() {
    init_extends();
    init_defineProperty();
    import_react2 = __toESM(require_react());
    init_emotion_react_browser_development_esm();
    init_styles();
    init_utils();
    iconStyles = css({
      display: "inline-block",
      flexShrink: 0,
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
      lineHeight: 1,
      // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      "> svg": _objectSpread(_objectSpread({}, commonSVGStyles), {}, {
        maxWidth: "100%",
        maxHeight: "100%",
        color: "var(--icon-primary-color)",
        fill: "var(--icon-secondary-color)",
        verticalAlign: "bottom"
      })
    });
    baseHcmStyles = css({
      "@media screen and (forced-colors: active)": {
        // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
        "> svg": {
          filter: "grayscale(1)",
          "--icon-primary-color": "CanvasText",
          // foreground
          "--icon-secondary-color": "Canvas"
          // background
        }
      }
    });
    primaryEqualsSecondaryHcmStyles = css({
      "@media screen and (forced-colors: active)": {
        // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
        "> svg": {
          // if the primaryColor is the same as the secondaryColor we
          // set the --icon-primary-color to Canvas
          // this is usually to convey state i.e. Checkbox checked -> not checked
          "--icon-primary-color": "Canvas"
          // foreground
        }
      }
    });
    secondaryTransparentHcmStyles = css({
      "@media screen and (forced-colors: active)": {
        // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
        "> svg": {
          "--icon-secondary-color": "transparent"
          // background
        }
      }
    });
    Icon = (0, import_react2.memo)(function Icon2(props) {
      var _ref = props, Glyph = _ref.glyph, dangerouslySetGlyph = _ref.dangerouslySetGlyph, _ref$primaryColor = _ref.primaryColor, primaryColor = _ref$primaryColor === void 0 ? "currentColor" : _ref$primaryColor, secondaryColor = _ref.secondaryColor, size = _ref.size, testId = _ref.testId, label = _ref.label, width = _ref.width, height = _ref.height, UNSAFE_margin = _ref.UNSAFE_margin;
      var glyphProps = dangerouslySetGlyph ? {
        dangerouslySetInnerHTML: {
          __html: dangerouslySetGlyph
        }
      } : {
        children: Glyph ? jsx(Glyph, {
          role: "presentation"
        }) : null
      };
      var dimensions2 = getIconSize({
        width,
        height,
        size
      });
      return jsx("span", _extends({
        "data-testid": testId,
        "data-vc": "icon-".concat(testId),
        role: label ? "img" : void 0,
        "aria-label": label ? label : void 0,
        "aria-hidden": label ? void 0 : true,
        style: {
          "--icon-primary-color": primaryColor,
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          "--icon-secondary-color": secondaryColor || getBackground(),
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          margin: UNSAFE_margin
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        }
      }, glyphProps, {
        css: [
          iconStyles,
          baseHcmStyles,
          primaryColor === secondaryColor && primaryEqualsSecondaryHcmStyles,
          secondaryColor === "transparent" && secondaryTransparentHcmStyles,
          // NB: This can be resolved if this component, composes base SVG / and/or skeleton
          // We could then simplify how common styles are dealt with simply by encapsulating them
          // at their appropriate level and/or having a singular approach to css variables in the package
          dimensions2 && // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          css({
            // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
            width: dimensions2.width,
            // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
            height: dimensions2.height,
            // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
            "> svg": dimensions2
          })
        ]
      }));
    });
    icon_default = Icon;
  }
});

// node_modules/@atlaskit/icon/dist/esm/components/icon-facade.js
var import_react4, _excluded, sizeSpacingMap, IconFacade;
var init_icon_facade = __esm({
  "node_modules/@atlaskit/icon/dist/esm/components/icon-facade.js"() {
    init_extends();
    init_objectWithoutProperties();
    import_react4 = __toESM(require_react());
    init_esm();
    init_icon();
    _excluded = ["dangerouslySetGlyph"];
    sizeSpacingMap = {
      utility: {
        small: "compact",
        medium: "spacious"
      },
      core: {
        small: "none",
        medium: "spacious"
      }
    };
    IconFacade = (0, import_react4.memo)(function IconFacade2(_ref) {
      var _props$size;
      var dangerouslySetGlyph = _ref.dangerouslySetGlyph, props = _objectWithoutProperties(_ref, _excluded);
      var NewIcon = props.newIcon;
      var size = (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : "medium";
      var useNewIcon = !props.isFacadeDisabled && // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      fg("platform-visual-refresh-icons-legacy-facade");
      if (useNewIcon && NewIcon && (size === "small" || size === "medium")) {
        if (props.iconType === "utility") {
          var Icon5 = NewIcon;
          return import_react4.default.createElement(Icon5, _extends({}, props, {
            spacing: fg("platform-visual-refresh-icons-facade-button-fix") ? sizeSpacingMap["utility"][size] : "none",
            color: props.primaryColor || "currentColor",
            type: props.iconType
          }));
        } else {
          var _Icon = NewIcon;
          return import_react4.default.createElement(_Icon, _extends({}, props, {
            spacing: sizeSpacingMap["core"][size],
            color: props.primaryColor || "currentColor",
            type: props.iconType
          }));
        }
      }
      return import_react4.default.createElement(Icon, _extends({
        dangerouslySetGlyph
      }, props));
    });
  }
});

// node_modules/@atlaskit/icon/dist/esm/entry-points/base.js
var base_exports = {};
__export(base_exports, {
  Icon: () => Icon,
  IconFacade: () => IconFacade,
  default: () => icon_default
});
var init_base = __esm({
  "node_modules/@atlaskit/icon/dist/esm/entry-points/base.js"() {
    init_icon();
    init_icon_facade();
  }
});

// node_modules/@atlaskit/icon/dist/esm/components/icon-new.js
var import_react5, commonSVGStyles2, svgStyles, iconStyles2, utilityIconStyles, scaleStyles, baseHcmStyles2, scaleSize, sizeMap, baseSizeMap, paddingMap, Icon3, icon_new_default;
var init_icon_new = __esm({
  "node_modules/@atlaskit/icon/dist/esm/components/icon-new.js"() {
    import_react5 = __toESM(require_react());
    init_emotion_react_browser_development_esm();
    init_esm();
    commonSVGStyles2 = css({
      overflow: "hidden",
      pointerEvents: "none",
      /**
       * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
       * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
       * rule) and then override it with currentColor for the color changes to be picked up.
       */
      // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
      stop: {
        stopColor: "currentColor"
      }
    });
    svgStyles = css({
      color: "currentColor",
      verticalAlign: "bottom"
    });
    iconStyles2 = css({
      display: "inline-block",
      boxSizing: "border-box",
      flexShrink: 0,
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
      lineHeight: 1,
      paddingInlineEnd: "var(--ds--button--new-icon-padding-end, 0)",
      paddingInlineStart: "var(--ds--button--new-icon-padding-start, 0)"
    });
    utilityIconStyles = css({
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
      lineHeight: "var(--ds-space-150, 12px)"
    });
    scaleStyles = css({
      width: "inherit",
      height: "inherit"
    });
    baseHcmStyles2 = css({
      "@media screen and (forced-colors: active)": {
        color: "CanvasText",
        filter: "grayscale(1)"
      }
    });
    scaleSize = css({
      width: "inherit",
      height: "inherit"
    });
    sizeMap = {
      core: {
        none: css({
          width: "var(--ds-space-200, 16px)",
          height: "var(--ds-space-200, 16px)"
        }),
        spacious: css({
          width: "var(--ds-space-300, 24px)",
          height: "var(--ds-space-300, 24px)"
        })
      },
      utility: {
        none: css({
          width: "var(--ds-space-150, 12px)",
          height: "var(--ds-space-150, 12px)"
        }),
        compact: css({
          width: "var(--ds-space-200, 16px)",
          height: "var(--ds-space-200, 16px)"
        }),
        spacious: css({
          width: "var(--ds-space-300, 24px)",
          height: "var(--ds-space-300, 24px)"
        })
      }
    };
    baseSizeMap = {
      core: 16,
      utility: 12
    };
    paddingMap = {
      core: {
        none: 0,
        spacious: 4
      },
      utility: {
        none: 0,
        compact: 2,
        spacious: 6
      }
    };
    Icon3 = (0, import_react5.memo)(function Icon4(props) {
      var _props$type, _props$spacing3, _props$spacing4;
      var _ref = props, _ref$color = _ref.color, color = _ref$color === void 0 ? "currentColor" : _ref$color, testId = _ref.testId, label = _ref.label, LEGACY_primaryColor = _ref.LEGACY_primaryColor, LEGACY_secondaryColor = _ref.LEGACY_secondaryColor, LEGACY_size = _ref.LEGACY_size, FallbackIcon = _ref.LEGACY_fallbackIcon, dangerouslySetGlyph = _ref.dangerouslySetGlyph, shouldScale = _ref.shouldScale, LEGACY_margin = _ref.LEGACY_margin;
      var dangerouslySetInnerHTML = dangerouslySetGlyph ? {
        __html: dangerouslySetGlyph
      } : void 0;
      if (FallbackIcon && !fg("platform-visual-refresh-icons")) {
        return jsx(FallbackIcon, {
          primaryColor: LEGACY_primaryColor !== null && LEGACY_primaryColor !== void 0 ? LEGACY_primaryColor : color,
          secondaryColor: LEGACY_secondaryColor,
          size: LEGACY_size,
          label,
          testId,
          UNSAFE_margin: LEGACY_margin
        });
      }
      var baseSize = baseSizeMap[(_props$type = props.type) !== null && _props$type !== void 0 ? _props$type : "core"];
      var viewBoxPadding;
      if (props.type === "utility") {
        var _props$spacing;
        viewBoxPadding = paddingMap[props.type][(_props$spacing = props.spacing) !== null && _props$spacing !== void 0 ? _props$spacing : "none"];
      } else {
        var _props$spacing2;
        viewBoxPadding = paddingMap["core"][(_props$spacing2 = props.spacing) !== null && _props$spacing2 !== void 0 ? _props$spacing2 : "none"];
      }
      var viewBoxSize = baseSize + 2 * viewBoxPadding;
      return jsx("span", {
        "data-testid": testId,
        role: label ? "img" : void 0,
        "aria-label": label ? label : void 0,
        "aria-hidden": label ? void 0 : true,
        style: {
          color
        },
        css: [iconStyles2, baseHcmStyles2, shouldScale && scaleStyles, props.type === "utility" && utilityIconStyles]
      }, jsx("svg", {
        fill: "none",
        viewBox: "".concat(0 - viewBoxPadding, " ").concat(0 - viewBoxPadding, " ").concat(viewBoxSize, " ").concat(viewBoxSize),
        role: "presentation",
        css: [commonSVGStyles2, svgStyles, shouldScale ? scaleSize : props.type === "utility" ? sizeMap[props.type][(_props$spacing3 = props.spacing) !== null && _props$spacing3 !== void 0 ? _props$spacing3 : "none"] : sizeMap["core"][(_props$spacing4 = props.spacing) !== null && _props$spacing4 !== void 0 ? _props$spacing4 : "none"]],
        dangerouslySetInnerHTML
      }));
    });
    icon_new_default = Icon3;
  }
});

// node_modules/@atlaskit/icon/dist/esm/entry-points/base-new.js
var base_new_exports = {};
__export(base_new_exports, {
  Icon: () => Icon3,
  default: () => icon_new_default
});
var init_base_new = __esm({
  "node_modules/@atlaskit/icon/dist/esm/entry-points/base-new.js"() {
    init_icon_new();
  }
});

export {
  init_icon_new,
  base_new_exports,
  init_base_new,
  init_constants,
  commonSVGStyles,
  sizeStyleMap,
  init_styles,
  getBackground,
  init_utils,
  init_icon,
  IconFacade,
  base_exports,
  init_base
};
//# sourceMappingURL=chunk-C5UHE4AN.js.map
