import {
  require_react_dom
} from "./chunk-XHPNGOQJ.js";
import {
  layers
} from "./chunk-IK2BBCJ5.js";
import {
  N0,
  N800
} from "./chunk-UZBHDBTD.js";
import {
  noop,
  useIdSeed,
  usePlatformLeafSyntheticEventHandler
} from "./chunk-CVCFKGGR.js";
import {
  require_dist
} from "./chunk-WGZLMHA6.js";
import {
  _toConsumableArray
} from "./chunk-UEZMFDUV.js";
import {
  ax,
  cssCustomPropertyValue
} from "./chunk-55ID7ZG3.js";
import {
  css,
  init_emotion_react_browser_development_esm,
  jsx
} from "./chunk-FN3H3NMO.js";
import {
  _extends,
  init_extends
} from "./chunk-BA6HJOCH.js";
import {
  _defineProperty,
  _slicedToArray,
  fg,
  init_defineProperty,
  init_esm,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-2WJRDDYS.js";
import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function") return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function") return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        if (hasElementType && a instanceof Element) return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual2(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-auto-focus.js
var import_react = __toESM(require_react());
function useAutoFocus(ref, autoFocus) {
  var initialMount = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(function() {
    if (ref && initialMount.current && autoFocus && ref.current) {
      ref.current.focus();
    }
    initialMount.current = false;
  }, [autoFocus, ref]);
}

// node_modules/@atlaskit/ds-lib/dist/esm/utils/keycodes.js
var KEY_UP = "ArrowUp";
var KEY_DOWN = "ArrowDown";
var KEY_HOME = "Home";
var KEY_END = "End";
var KEY_TAB = "Tab";
var KEY_ENTER = "Enter";
var KEY_SPACE = "Space";
var ESCAPE = "Escape";

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
init_extends();
init_slicedToArray();
init_defineProperty();
var import_react34 = __toESM(require_react());
var import_bind_event_listener4 = __toESM(require_dist());

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-close-on-escape-press.js
var import_react2 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose, isDisabled = _ref.isDisabled;
  var escapePressed = (0, import_react2.useRef)(false);
  var onKeyDown = (0, import_react2.useCallback)(function(e) {
    if (isDisabled || escapePressed.current || e.key !== ESCAPE) {
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled]);
  var onKeyUp = (0, import_react2.useCallback)(function() {
    escapePressed.current = false;
  }, []);
  (0, import_react2.useEffect)(function() {
    return (0, import_bind_event_listener.bindAll)(document, [{
      type: "keydown",
      listener: onKeyDown
    }, {
      type: "keyup",
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-stable-ref.js
var import_react3 = __toESM(require_react());
function useStableRef(value) {
  var ref = (0, import_react3.useRef)(value);
  (0, import_react3.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref;
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer.js
init_slicedToArray();
var import_react5 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-context.js
var import_react4 = __toESM(require_react());
var OpenLayerObserverContext = (0, import_react4.createContext)(null);

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer.js
var noNamespaceSymbol = Symbol("no-namespace");

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-notify-open-layer-observer.js
var import_react8 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-open-layer-observer-namespace.js
var import_react7 = __toESM(require_react());

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-namespace-context.js
var import_react6 = __toESM(require_react());
var OpenLayerObserverNamespaceContext = (0, import_react6.createContext)(null);

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-open-layer-observer-namespace.js
function useOpenLayerObserverNamespace() {
  var namespace = (0, import_react7.useContext)(OpenLayerObserverNamespaceContext);
  return namespace;
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-notify-open-layer-observer.js
function useNotifyOpenLayerObserver(_ref) {
  var isOpen = _ref.isOpen, onClose = _ref.onClose;
  var context = (0, import_react8.useContext)(OpenLayerObserverContext);
  var namespace = useOpenLayerObserverNamespace();
  (0, import_react8.useEffect)(function() {
    if (fg("platform_dst_open_layer_observer_close_layers")) {
      return;
    }
    if (context === null) {
      return;
    }
    if (!isOpen) {
      return;
    }
    context.increment();
    return function cleanup() {
      context.decrement();
    };
  }, [context, isOpen, namespace]);
  (0, import_react8.useEffect)(function() {
    if (!fg("platform_dst_open_layer_observer_close_layers")) {
      return;
    }
    if (context === null) {
      return;
    }
    if (!isOpen) {
      return;
    }
    return context.onClose(onClose, {
      namespace
    });
  }, [context, isOpen, namespace, onClose]);
}

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/use-open-layer-observer.js
var import_react9 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/layering/dist/esm/components/open-layer-observer/open-layer-observer-namespace-provider.js
var import_react10 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/durations.js
var durations = {
  none: 0,
  small: 100,
  medium: 350,
  large: 700
};
var EXITING_MOTION_MULTIPLIER = 0.5;
var exitingDurations = {
  none: durations.none,
  small: durations.small * EXITING_MOTION_MULTIPLIER,
  medium: durations.medium * EXITING_MOTION_MULTIPLIER,
  large: durations.large * EXITING_MOTION_MULTIPLIER
};

// node_modules/@atlaskit/motion/dist/esm/utils/accessibility.js
init_slicedToArray();
var import_react11 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());
var isMatchMediaAvailable = function isMatchMediaAvailable2() {
  return typeof window !== "undefined" && "matchMedia" in window;
};
var isReducedMotion = function isReducedMotion2() {
  if (!isMatchMediaAvailable()) {
    return false;
  }
  var _window$matchMedia = window.matchMedia("(prefers-reduced-motion: reduce)"), matches = _window$matchMedia.matches;
  return matches;
};

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
var import_react18 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
init_slicedToArray();
var import_react17 = __toESM(require_react());
import "/Users/mjerkovic/Documents/GitHub/ads-vibecode/node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.compiled.css";
init_esm();

// node_modules/@atlaskit/motion/dist/esm/utils/timer-hooks.js
var import_react12 = __toESM(require_react());
var getHookDeps = function getHookDeps2(opts) {
  switch (opts.cleanup) {
    case "next-effect":
      return void 0;
    case "unmount":
    default:
      return [];
  }
};
var useSetTimeout = function useSetTimeout2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    cleanup: "unmount"
  };
  var timeouts = (0, import_react12.useRef)([]);
  (0, import_react12.useEffect)(function() {
    return function() {
      if (timeouts.current.length) {
        timeouts.current.forEach(function(id) {
          return clearTimeout(id);
        });
        timeouts.current = [];
      }
    };
  }, getHookDeps(opts));
  return (0, import_react12.useCallback)(function(handler, timeout) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var id = setTimeout.apply(void 0, [function() {
      timeouts.current = timeouts.current.filter(function(timeoutId) {
        return timeoutId !== id;
      });
      handler();
    }, timeout].concat(args));
    timeouts.current.push(id);
  }, []);
};

// node_modules/@atlaskit/motion/dist/esm/entering/exiting-persistence.js
init_slicedToArray();
var import_react13 = __toESM(require_react());
init_esm();
var emptyContext = {
  // Motions will always appear if not inside a exiting persistence component.
  appear: true,
  isExiting: false
};
var ExitingContext = (0, import_react13.createContext)(emptyContext);
var wrapChildWithContextProvider = function wrapChildWithContextProvider2(child) {
  var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyContext;
  return import_react13.default.createElement(ExitingContext.Provider, {
    key: "".concat(child.key, "-provider"),
    value
  }, child);
};
var childrenToArray = function childrenToArray2(children) {
  var childrenAsArray = [];
  import_react13.Children.toArray(children).forEach(function(child) {
    if (typeof child !== "boolean" && Boolean(child)) {
      childrenAsArray.push(child);
    }
  });
  return childrenAsArray;
};
var spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious2(current, previous) {
  var splicedChildren = previous.concat([]);
  var previousMap = childrenToObj(previous);
  for (var i = 0; i < current.length; i++) {
    var child = current[i];
    var childIsNew = !previousMap[child.key];
    if (childIsNew) {
      splicedChildren.splice(i + 1, 0, child);
    }
  }
  return splicedChildren;
};
var childrenToObj = function childrenToObj2(children) {
  return children.reduce(function(acc, child) {
    acc[child.key] = child;
    return acc;
  }, {});
};
var getMissingKeys = function getMissingKeys2(current, previous) {
  var currentMapKeys = new Set(current.map(function(child) {
    return child.key;
  }));
  var missing = /* @__PURE__ */ new Set();
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var _key = element.key;
    if (!currentMapKeys.has(_key)) {
      missing.add(_key);
    }
  }
  return missing;
};
var ExitingPersistence = (0, import_react13.memo)(function(_ref) {
  var _ref$appear = _ref.appear, appear = _ref$appear === void 0 ? false : _ref$appear, children = _ref.children, exitThenEnter = _ref.exitThenEnter;
  var _useState = (0, import_react13.useState)([null, children]), _useState2 = _slicedToArray(_useState, 2), stateChildren = _useState2[0], setChildren = _useState2[1];
  var _useState3 = (0, import_react13.useState)([]), _useState4 = _slicedToArray(_useState3, 2), exitingChildren = _useState4[0], setExitingChildren = _useState4[1];
  var _useState5 = (0, import_react13.useState)(function() {
    return {
      appear,
      isExiting: false
    };
  }), _useState6 = _slicedToArray(_useState5, 2), defaultContext = _useState6[0], setDefaultContext = _useState6[1];
  (0, import_react13.useEffect)(function() {
    if (!defaultContext.appear) {
      setDefaultContext({
        appear: true,
        isExiting: false
      });
    }
  }, []);
  if (isReducedMotion() && !fg("platform_design_system_motion_on_finish_fix")) {
    return children;
  }
  if (typeof stateChildren === "boolean") {
    return children;
  }
  var _stateChildren = _slicedToArray(stateChildren, 2), previousChildren = _stateChildren[0], currentChildren = _stateChildren[1];
  var previous = childrenToArray(previousChildren);
  var current = childrenToArray(currentChildren);
  if (currentChildren !== children) {
    setChildren([currentChildren, children]);
  }
  var missingKeys = getMissingKeys(current, previous);
  var isSomeChildRemoved = !!missingKeys.size;
  var visibleChildren = current;
  if (isSomeChildRemoved) {
    visibleChildren = spliceNewElementsIntoPrevious(current, previous);
  }
  if (exitThenEnter) {
    if (exitingChildren.length) {
      visibleChildren = exitingChildren;
    } else {
      var nextExitingChildren = visibleChildren.filter(function(child) {
        return missingKeys.has(child.key);
      });
      if (nextExitingChildren.length) {
        setExitingChildren(nextExitingChildren);
      }
    }
  }
  if (missingKeys.size) {
    visibleChildren = visibleChildren.map(function(child) {
      var isExiting = missingKeys.has(child.key);
      return wrapChildWithContextProvider(child, {
        appear: true,
        isExiting,
        onFinish: isExiting ? function() {
          missingKeys.delete(child.key);
          if (missingKeys.size === 0) {
            setChildren([null, children]);
            setExitingChildren([]);
          }
        } : void 0
      });
    });
  } else {
    visibleChildren = visibleChildren.map(function(child) {
      return wrapChildWithContextProvider(child, defaultContext);
    });
  }
  return visibleChildren;
});
var useExitingPersistence = function useExitingPersistence2() {
  return (0, import_react13.useContext)(ExitingContext);
};
ExitingPersistence.displayName = "ExitingPersistence";
var exiting_persistence_default = ExitingPersistence;

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
init_slicedToArray();
var import_react16 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-layout-effect.js
var import_react14 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-unique-id.js
var import_react15 = __toESM(require_react());
function useUniqueId() {
  var identifier = (0, import_react15.useRef)("");
  if (!identifier.current) {
    identifier.current = "_" + (Number(String(Math.random()).slice(2)) + Date.now() + Math.round(performance.now())).toString(36);
  }
  return identifier.current;
}

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
var StaggeredEntranceContext = (0, import_react16.createContext)(function() {
  return {
    isReady: true,
    delay: 0,
    ref: noop
  };
});
var useStaggeredEntrance = function useStaggeredEntrance2() {
  var indentifier = useUniqueId();
  var context = (0, import_react16.useContext)(StaggeredEntranceContext);
  return context(indentifier);
};

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
var EnteringMotion = function EnteringMotion2(_ref) {
  var children = _ref.children, animationTimingFunction = _ref.animationTimingFunction, _ref$animationTimingF = _ref.animationTimingFunctionExiting, animationTimingFunctionExiting = _ref$animationTimingF === void 0 ? animationTimingFunction : _ref$animationTimingF, enteringAnimation = _ref.enteringAnimation, _ref$exitingAnimation = _ref.exitingAnimation, exitingAnimation = _ref$exitingAnimation === void 0 ? enteringAnimation : _ref$exitingAnimation, isPaused = _ref.isPaused, onFinishMotion = _ref.onFinish, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? "large" : _ref$duration;
  var staggered = useStaggeredEntrance();
  var _useExitingPersistenc = useExitingPersistence(), isExiting = _useExitingPersistenc.isExiting, onExitFinished = _useExitingPersistenc.onFinish, appear = _useExitingPersistenc.appear;
  var setTimeout2 = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? "exiting" : "entering";
  var _useState = (0, import_react17.useState)(appear), _useState2 = _slicedToArray(_useState, 2), hasAnimationStyles = _useState2[0], setHasAnimationStyles = _useState2[1];
  (0, import_react17.useEffect)(function() {
    var isCancelled = false;
    if (paused) {
      return;
    }
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }
    var onAnimationEnd = function onAnimationEnd2() {
      if (state === "exiting") {
        onExitFinished === null || onExitFinished === void 0 || onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion === null || onFinishMotion === void 0 || onFinishMotion(state);
    };
    if (isReducedMotion() && fg("platform_design_system_motion_on_finish_fix")) {
      onAnimationEnd();
      return;
    }
    setHasAnimationStyles(true);
    setTimeout2(onAnimationEnd, isExiting ? exitingDurations[duration] : durations[duration] + delay);
    return function() {
      isCancelled = true;
    };
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout2]);
  return children({
    ref: staggered.ref,
    // @ts-expect-error: `ax` is not typed correctly
    className: hasAnimationStyles ? ax([ax(["_1o51eoah _1y0co91m _1bumglyw _sedtglyw"]), paused && ax(["_1y0ctrqk"]), duration === "small" && ax(["_5sag1yx9"]), duration === "medium" && ax(["_5sag1ttt"]), duration === "large" && ax(["_5sagpwmj"]), isExiting && duration === "small" && ax(["_5sag14ed"]), isExiting && duration === "medium" && ax(["_5sagluct"]), isExiting && duration === "large" && ax(["_5sag1ttt"]), isExiting && ax(["_ju255cps _1o51q7pw"]), !isExiting && animationTimingFunction === "linear" && ax(["_1pglp3kn"]), !isExiting && animationTimingFunction === "ease-out" && ax(["_1pgldkwg"]), !isExiting && animationTimingFunction === "ease-in" && ax(["_1pgl1nzg"]), !isExiting && animationTimingFunction === "ease-in-out" && ax(["_1pgl1fu8"]), isExiting && animationTimingFunction === "linear" && ax(["_1pglp3kn"]), isExiting && animationTimingFunctionExiting === "ease-out" && ax(["_1pgldkwg"]), isExiting && animationTimingFunctionExiting === "ease-in" && ax(["_1pgl1nzg"]), isExiting && animationTimingFunctionExiting === "ease-in-out" && ax(["_1pgl1fu8"]), (!isExiting && enteringAnimation === "fade-in" || isExiting && exitingAnimation === "fade-in") && ax(["_j7hq1cgr"]), (!isExiting && enteringAnimation === "fade-out" || isExiting && exitingAnimation === "fade-out") && ax(["_j7hq1lln"]), (!isExiting && enteringAnimation === "zoom-in" || isExiting && exitingAnimation === "zoom-in") && ax(["_j7hqe8p0"]), (!isExiting && enteringAnimation === "zoom-out" || isExiting && exitingAnimation === "zoom-out") && ax(["_j7hqy6ql"]), (!isExiting && enteringAnimation === "slide-in-from-top" || isExiting && exitingAnimation === "slide-in-from-top") && ax(["_j7hqqshu"]), (!isExiting && enteringAnimation === "slide-out-from-top" || isExiting && exitingAnimation === "slide-out-from-top") && ax(["_j7hq7ri4"]), (!isExiting && enteringAnimation === "slide-in-from-right" || isExiting && exitingAnimation === "slide-in-from-right") && ax(["_j7hqdfjr"]), (!isExiting && enteringAnimation === "slide-out-from-right" || isExiting && exitingAnimation === "slide-out-from-right") && ax(["_j7hqonfj"]), (!isExiting && enteringAnimation === "slide-in-from-bottom" || isExiting && exitingAnimation === "slide-in-from-bottom") && ax(["_j7hq1liq"]), (!isExiting && enteringAnimation === "slide-out-from-bottom" || isExiting && exitingAnimation === "slide-out-from-bottom") && ax(["_j7hqhnf1"]), (!isExiting && enteringAnimation === "slide-in-from-left" || isExiting && exitingAnimation === "slide-in-from-left") && ax(["_j7hq1bh1"]), (!isExiting && enteringAnimation === "slide-out-from-left" || isExiting && exitingAnimation === "slide-out-from-left") && ax(["_j7hqj08w"]), (!isExiting && enteringAnimation === "fade-in-from-top" || isExiting && exitingAnimation === "fade-in-from-top") && ax(["_j7hq2iua"]), (!isExiting && enteringAnimation === "fade-out-from-top" || isExiting && exitingAnimation === "fade-out-from-top") && ax(["_j7hq39va"]), (!isExiting && enteringAnimation === "fade-in-from-left" || isExiting && exitingAnimation === "fade-in-from-left") && ax(["_j7hq15m2"]), (!isExiting && enteringAnimation === "fade-out-from-left" || isExiting && exitingAnimation === "fade-out-from-left") && ax(["_j7hq1yiv"]), (!isExiting && enteringAnimation === "fade-in-from-bottom" || isExiting && exitingAnimation === "fade-in-from-bottom") && ax(["_j7hq1w00"]), (!isExiting && enteringAnimation === "fade-out-from-bottom" || isExiting && exitingAnimation === "fade-out-from-bottom") && ax(["_j7hqzy3z"]), (!isExiting && enteringAnimation === "fade-in-from-right" || isExiting && exitingAnimation === "fade-in-from-right") && ax(["_j7hqpqak"]), (!isExiting && enteringAnimation === "fade-out-from-right" || isExiting && exitingAnimation === "fade-out-from-right") && ax(["_j7hq1ebg"]), (!isExiting && enteringAnimation === "fade-in-from-top-constant" || isExiting && exitingAnimation === "fade-in-from-top-constant") && ax(["_j7hqm2e2"]), (!isExiting && enteringAnimation === "fade-out-from-top-constant" || isExiting && exitingAnimation === "fade-out-from-top-constant") && ax(["_j7hq97jn"]), (!isExiting && enteringAnimation === "fade-in-from-left-constant" || isExiting && exitingAnimation === "fade-in-from-left-constant") && ax(["_j7hqovgq"]), (!isExiting && enteringAnimation === "fade-out-from-left-constant" || isExiting && exitingAnimation === "fade-out-from-left-constant") && ax(["_j7hq15do"]), (!isExiting && enteringAnimation === "fade-in-from-bottom-constant" || isExiting && exitingAnimation === "fade-in-from-bottom-constant") && ax(["_j7hq797a"]), (!isExiting && enteringAnimation === "fade-out-from-bottom-constant" || isExiting && exitingAnimation === "fade-out-from-bottom-constant") && ax(["_j7hqwo7r"]), (!isExiting && enteringAnimation === "fade-in-from-right-constant" || isExiting && exitingAnimation === "fade-in-from-right-constant") && ax(["_j7hqt8u5"]), (!isExiting && enteringAnimation === "fade-out-from-right-constant" || isExiting && exitingAnimation === "fade-out-from-right-constant") && ax(["_j7hq1pgp"])]) : "",
    style: {
      animationDelay: "".concat(delay, "ms")
    }
  }, state);
};
var keyframes_motion_default = EnteringMotion;

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
var invertedDirection = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var FadeIn = function FadeIn2(_ref) {
  var children = _ref.children, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? "large" : _ref$duration, entranceDirection = _ref.entranceDirection, exitDirection = _ref.exitDirection, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? "proportional" : _ref$distance, onFinish = _ref.onFinish, isPaused = _ref.isPaused;
  var invertedEntranceDirection = entranceDirection !== void 0 ? invertedDirection[entranceDirection] : void 0;
  var isExitDirect = Boolean(exitDirection || invertedEntranceDirection) ? "fade-out-from-".concat(exitDirection || invertedEntranceDirection).concat(distance === "proportional" ? "" : "-constant") : "fade-out";
  return import_react18.default.createElement(keyframes_motion_default, {
    duration,
    enteringAnimation: entranceDirection ? "fade-in-from-".concat(entranceDirection).concat(distance === "proportional" ? "" : "-constant") : "fade-in",
    exitingAnimation: isExitDirect,
    animationTimingFunction: "ease-in-out",
    onFinish,
    isPaused
  }, children);
};
var fade_in_default = FadeIn;

// node_modules/@atlaskit/motion/dist/esm/resizing/height.js
init_objectWithoutProperties();
init_slicedToArray();
var import_react21 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-element-ref.js
var import_react19 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-snapshot-before-update.js
var import_react20 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/zoom-in.js
var import_react22 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/slide-in.js
var import_react23 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/shrink-out.js
init_slicedToArray();

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
init_esm();

// node_modules/@atlaskit/popper/dist/esm/popper.js
init_slicedToArray();
var import_react24 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React13 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React10 = __toESM(require_react());
var ManagerReferenceNodeContext = React10.createContext();
var ManagerReferenceNodeSetterContext = React10.createContext();
function Manager(_ref) {
  var children = _ref.children;
  var _React$useState = React10.useState(null), referenceNode = _React$useState[0], setReferenceNode = _React$useState[1];
  var hasUnmounted = React10.useRef(false);
  React10.useEffect(function() {
    return function() {
      hasUnmounted.current = true;
    };
  }, []);
  var handleSetReferenceNode = React10.useCallback(function(node) {
    if (!hasUnmounted.current) {
      setReferenceNode(node);
    }
  }, []);
  return React10.createElement(ManagerReferenceNodeContext.Provider, {
    value: referenceNode
  }, React10.createElement(ManagerReferenceNodeSetterContext.Provider, {
    value: handleSetReferenceNode
  }, children));
}

// node_modules/react-popper/lib/esm/utils.js
var React11 = __toESM(require_react());
var unwrapArray = function unwrapArray2(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke2(fn2) {
  if (typeof fn2 === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn2.apply(void 0, args);
  }
};
var setRef = function setRef2(ref, node) {
  if (typeof ref === "function") {
    return safeInvoke(ref, node);
  } else if (ref != null) {
    ref.current = node;
  }
};
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React11.useLayoutEffect : React11.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React12 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = React12.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React12.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React12.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React12.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React12.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Popper.js
var NOOP = function NOOP2() {
  return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE2() {
  return Promise.resolve(null);
};
var EMPTY_MODIFIERS2 = [];
function Popper(_ref) {
  var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom" : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "absolute" : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS2 : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
  var referenceNode = React13.useContext(ManagerReferenceNodeContext);
  var _React$useState = React13.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
  var _React$useState2 = React13.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
  React13.useEffect(function() {
    setRef(innerRef, popperElement);
  }, [innerRef, popperElement]);
  var options = React13.useMemo(function() {
    return {
      placement,
      strategy,
      onFirstUpdate,
      modifiers: [].concat(modifiers, [{
        name: "arrow",
        enabled: arrowElement != null,
        options: {
          element: arrowElement
        }
      }])
    };
  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);
  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update = _usePopper.update;
  var childrenProps = React13.useMemo(function() {
    return {
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : placement,
      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
      arrowProps: {
        style: styles.arrow,
        ref: setArrowElement
      },
      forceUpdate: forceUpdate || NOOP,
      update: update || NOOP_PROMISE
    };
  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
  return unwrapArray(children)(childrenProps);
}

// node_modules/react-popper/lib/esm/Reference.js
var React14 = __toESM(require_react());
var import_warning = __toESM(require_warning());
function Reference(_ref) {
  var children = _ref.children, innerRef = _ref.innerRef;
  var setReferenceNode = React14.useContext(ManagerReferenceNodeSetterContext);
  var refHandler = React14.useCallback(function(node) {
    setRef(innerRef, node);
    safeInvoke(setReferenceNode, node);
  }, [innerRef, setReferenceNode]);
  React14.useEffect(function() {
    return function() {
      return setRef(innerRef, null);
    };
  }, []);
  React14.useEffect(function() {
    (0, import_warning.default)(Boolean(setReferenceNode), "`Reference` should not be used outside of a `Manager` component.");
  }, [setReferenceNode]);
  return unwrapArray(children)({
    ref: refHandler
  });
}

// node_modules/@atlaskit/popper/dist/esm/max-size.js
init_slicedToArray();
function getMaxSizeModifiers(_ref) {
  var viewportPadding2 = _ref.viewportPadding;
  return [{
    /**
     * Performing DOM measurements in the 'read' phase,
     * which is the convention for popper modifiers
     */
    name: "maxSizeData",
    enabled: true,
    phase: "read",
    fn: function fn2(_ref2) {
      var state = _ref2.state, name = _ref2.name;
      if (!window.visualViewport) {
        return;
      }
      state.modifiersData[name] = {
        viewport: {
          width: window.visualViewport.width,
          height: window.visualViewport.height
        }
      };
    }
  }, {
    /**
     * Applying max size CSS
     */
    name: "maxSize",
    enabled: true,
    phase: "beforeWrite",
    requiresIfExists: ["offset", "preventOverflow", "flip"],
    fn: function fn2(_ref3) {
      var _data$viewport, _data$viewport2, _state$modifiersData$2, _state$modifiersData;
      var state = _ref3.state;
      var data = state.modifiersData.maxSizeData;
      if (typeof (data === null || data === void 0 || (_data$viewport = data.viewport) === null || _data$viewport === void 0 ? void 0 : _data$viewport.width) !== "number" || typeof (data === null || data === void 0 || (_data$viewport2 = data.viewport) === null || _data$viewport2 === void 0 ? void 0 : _data$viewport2.height) !== "number") {
        return;
      }
      var viewport2 = data.viewport;
      var _state$modifiersData$ = state.modifiersData.popperOffsets, popperOffsets2 = _state$modifiersData$ === void 0 ? {
        x: 0,
        y: 0
      } : _state$modifiersData$;
      var _state$placement$spli = state.placement.split("-"), _state$placement$spli2 = _slicedToArray(_state$placement$spli, 1), basePlacement = _state$placement$spli2[0];
      var placementOffset = (_state$modifiersData$2 = (_state$modifiersData = state.modifiersData) === null || _state$modifiersData === void 0 || (_state$modifiersData = _state$modifiersData.offset) === null || _state$modifiersData === void 0 ? void 0 : _state$modifiersData[state.placement]) !== null && _state$modifiersData$2 !== void 0 ? _state$modifiersData$2 : {
        x: 0,
        y: 0
      };
      var maxWidth = viewport2.width - 2 * viewportPadding2;
      var maxHeight = viewport2.height - 2 * viewportPadding2;
      if (basePlacement === "top") {
        maxHeight = state.rects.reference.y + // Viewport-relative position of reference element
        placementOffset.y - // Space between popper and reference
        viewportPadding2;
      }
      if (basePlacement === "bottom") {
        maxHeight = viewport2.height - popperOffsets2.y - // Viewport-relative position of popper
        viewportPadding2;
      }
      if (basePlacement === "left") {
        maxWidth = state.rects.reference.x + // Viewport-relative position of reference element
        placementOffset.x - // Space between popper and reference
        viewportPadding2;
      }
      if (basePlacement === "right") {
        maxWidth = viewport2.width - popperOffsets2.x - // Viewport-relative position of popper
        viewportPadding2;
      }
      state.styles.popper.maxWidth = "".concat(maxWidth, "px");
      state.styles.popper.maxHeight = "".concat(maxHeight, "px");
    }
  }];
}

// node_modules/@atlaskit/popper/dist/esm/popper.js
var viewportPadding = 5;
var constantModifiers = [{
  name: "flip",
  options: {
    flipVariations: false,
    padding: viewportPadding,
    boundary: "clippingParents",
    rootBoundary: "viewport"
  }
}];
function defaultChildrenFn() {
  return null;
}
var defaultOffset = [0, 8];
function Popper2(_ref) {
  var _ref$children = _ref.children, children = _ref$children === void 0 ? defaultChildrenFn : _ref$children, _ref$offset = _ref.offset, offset2 = _ref$offset === void 0 ? defaultOffset : _ref$offset, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$referenceElement = _ref.referenceElement, referenceElement = _ref$referenceElement === void 0 ? void 0 : _ref$referenceElement, modifiers = _ref.modifiers, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy, _ref$shouldFitViewpor = _ref.shouldFitViewport, shouldFitViewport = _ref$shouldFitViewpor === void 0 ? false : _ref$shouldFitViewpor;
  var _offset = _slicedToArray(offset2, 2), offsetX = _offset[0], offsetY = _offset[1];
  var internalModifiers = (0, import_react24.useMemo)(function() {
    var preventOverflowModifier = {
      name: "preventOverflow",
      options: {
        padding: viewportPadding,
        rootBoundary: shouldFitViewport ? "viewport" : "document"
      }
    };
    var offsetModifier = {
      name: "offset",
      options: {
        offset: [offsetX, offsetY]
      }
    };
    var maxSizeModifiers = shouldFitViewport ? getMaxSizeModifiers({
      viewportPadding
    }) : [];
    return [].concat(constantModifiers, [preventOverflowModifier, offsetModifier], _toConsumableArray(maxSizeModifiers));
  }, [offsetX, offsetY, shouldFitViewport]);
  var mergedModifiers = (0, import_react24.useMemo)(function() {
    if (modifiers == null) {
      return internalModifiers;
    }
    return [].concat(_toConsumableArray(internalModifiers), _toConsumableArray(modifiers));
  }, [internalModifiers, modifiers]);
  return import_react24.default.createElement(
    Popper,
    {
      modifiers: mergedModifiers,
      placement,
      strategy,
      referenceElement
    },
    children
  );
}

// node_modules/@atlaskit/portal/dist/esm/portal.js
var import_react30 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
var import_react25 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@atlaskit/portal/dist/esm/internal/constants.js
var portalParentClassName = "atlaskit-portal-container";
var portalParentSelector = "body > .atlaskit-portal-container";
var portalClassName = "atlaskit-portal";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-dom-utils.js
var createContainer = function createContainer2(zIndex) {
  var container = document.createElement("div");
  container.className = portalClassName;
  container.style.zIndex = "".concat(zIndex);
  return container;
};
var getBody = function getBody2() {
  return document.body;
};
var getPortalParent = function getPortalParent2() {
  var parentElement = document.querySelector(portalParentSelector);
  if (!parentElement) {
    var _getBody;
    var parent = document.createElement("div");
    parent.className = portalParentClassName;
    parent.style.display = "flex";
    (_getBody = getBody()) === null || _getBody === void 0 || _getBody.appendChild(parent);
    return parent;
  }
  return parentElement;
};
var removePortalContainer = function removePortalContainer2(container) {
  getPortalParent().removeChild(container);
};
var appendPortalContainerIfNotAppended = function appendPortalContainerIfNotAppended2(container) {
  if (!container.parentElement) {
    getPortalParent().appendChild(container);
  }
};
var isDocumentDefined = function isDocumentDefined2() {
  return document !== void 0;
};
var createAtlaskitPortal = function createAtlaskitPortal2(zIndex) {
  if (isDocumentDefined()) {
    var atlaskitportal = document.createElement("div");
    atlaskitportal.className = portalClassName;
    atlaskitportal.style.zIndex = "".concat(zIndex);
    return atlaskitportal;
  }
};
var createPortalParent = function createPortalParent2() {
  if (isDocumentDefined()) {
    var parentElement = document.querySelector(portalParentSelector);
    if (!parentElement) {
      var _getBody2;
      var parent = document.createElement("div");
      parent.className = portalParentClassName;
      parent.style.display = "flex";
      (_getBody2 = getBody()) === null || _getBody2 === void 0 || _getBody2.appendChild(parent);
      return parent;
    }
    return parentElement;
  }
};

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
function InternalPortal(props) {
  var zIndex = props.zIndex, children = props.children;
  var container = (0, import_react25.useMemo)(function() {
    return createContainer(zIndex);
  }, [zIndex]);
  appendPortalContainerIfNotAppended(container);
  (0, import_react25.useEffect)(function() {
    return function() {
      removePortalContainer(container);
    };
  }, [container]);
  return (0, import_react_dom.createPortal)(children, container);
}

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal-new.js
init_slicedToArray();
var import_react27 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-isomorphic-layout-effect.js
var import_react26 = __toESM(require_react());
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? import_react26.useLayoutEffect : import_react26.useEffect;

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal-new.js
function InternalPortalNew(props) {
  var zIndex = props.zIndex, children = props.children;
  var _useState = (0, import_react27.useState)(null), _useState2 = _slicedToArray(_useState, 2), atlaskitPortal = _useState2[0], setAtlaskitPortal = _useState2[1];
  useIsomorphicLayoutEffect2(function() {
    var tempPortalContainer = createAtlaskitPortal(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = createPortalParent();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function() {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);
  var suspendedChildren = import_react27.default.createElement(import_react27.Suspense, {
    fallback: null
  }, children);
  return atlaskitPortal ? (0, import_react_dom2.createPortal)(suspendedChildren, atlaskitPortal) : null;
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-is-subsequent-render.js
init_slicedToArray();
var import_react28 = __toESM(require_react());
var useIsSubsequentRender = function useIsSubsequentRender2(mountStrategy) {
  var _useState = (0, import_react28.useState)(false), _useState2 = _slicedToArray(_useState, 2), isSubsequentRender = _useState2[0], setIsSubsequentRender = _useState2[1];
  var _useState3 = (0, import_react28.useState)(function() {
    return mountStrategy === "layoutEffect" ? useIsomorphicLayoutEffect2 : import_react28.useEffect;
  }), _useState4 = _slicedToArray(_useState3, 1), useMountEffect = _useState4[0];
  useMountEffect(function() {
    setIsSubsequentRender(true);
  }, []);
  return isSubsequentRender;
};
var use_is_subsequent_render_default = useIsSubsequentRender;

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var import_react29 = __toESM(require_react());

// node_modules/@atlaskit/portal/dist/esm/constants.js
var PORTAL_MOUNT_EVENT = "akPortalMount";
var PORTAL_UNMOUNT_EVENT = "akPortalUnmount";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-custom-event.js
var zIndexToName = {
  100: "card",
  200: "navigation",
  300: "dialog",
  400: "layer",
  500: "blanket",
  510: "modal",
  600: "flag",
  700: "spotlight",
  9999: "tooltip"
};
var getLayerName = function getLayerName2(zIndex) {
  return zIndexToName.hasOwnProperty(zIndex) ? zIndexToName[zIndex] : null;
};
var getEvent = function getEvent2(eventName, zIndex) {
  var detail = {
    layer: getLayerName(Number(zIndex)),
    zIndex
  };
  return new CustomEvent(eventName, {
    detail
  });
};
function firePortalEvent(eventName, zIndex) {
  var event = getEvent(eventName, zIndex);
  window.dispatchEvent(event);
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var useFirePortalEvent = function useFirePortalEvent2(zIndex) {
  var zIndexNumber = Number(zIndex);
  (0, import_react29.useEffect)(function() {
    firePortalEvent(PORTAL_MOUNT_EVENT, zIndexNumber);
    return function() {
      firePortalEvent(PORTAL_UNMOUNT_EVENT, zIndexNumber);
    };
  }, [zIndexNumber]);
};
var use_portal_event_default = useFirePortalEvent;

// node_modules/@atlaskit/portal/dist/esm/portal.js
function Portal(_ref) {
  var _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex, children = _ref.children, _ref$mountStrategy = _ref.mountStrategy, mountStrategy = _ref$mountStrategy === void 0 ? "effect" : _ref$mountStrategy;
  var isSubsequentRender = use_is_subsequent_render_default(mountStrategy);
  use_portal_event_default(zIndex);
  return !fg("platform_design_system_team_portal_logic_r18_fix") ? isSubsequentRender ? import_react30.default.createElement(InternalPortal, {
    zIndex
  }, children) : null : import_react30.default.createElement(InternalPortalNew, {
    zIndex
  }, children);
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/drag-manager.js
var import_bind_event_listener3 = __toESM(require_dist());
var registrations = /* @__PURE__ */ new Set();
var cleanupEndEventListeners = null;
function onDragStart() {
  if (cleanupEndEventListeners) {
    return;
  }
  cleanupEndEventListeners = (0, import_bind_event_listener3.bindAll)(window, [{
    type: "dragend",
    listener: onDragEnd
  }, {
    type: "pointerdown",
    listener: onDragEnd
  }, {
    type: "pointermove",
    listener: /* @__PURE__ */ function() {
      var callCount = 0;
      return function listener() {
        if (callCount < 20) {
          callCount++;
          return;
        }
        onDragEnd();
      };
    }()
  }]);
  var clone = Array.from(registrations);
  clone.forEach(function(subscriber) {
    subscriber.onDragStart();
  });
}
function onDragEnd() {
  var _cleanupEndEventListe;
  (_cleanupEndEventListe = cleanupEndEventListeners) === null || _cleanupEndEventListe === void 0 || _cleanupEndEventListe();
  cleanupEndEventListeners = null;
  var clone = Array.from(registrations);
  clone.forEach(function(subscriber) {
    subscriber.onDragEnd();
  });
}
function bindStartEvents() {
  return (0, import_bind_event_listener3.bindAll)(window, [{
    type: "dragstart",
    listener: onDragStart
  }, {
    type: "dragenter",
    listener: onDragStart
  }]);
}
var cleanupStartEventListeners = null;
function register(registration) {
  if (!cleanupStartEventListeners) {
    cleanupStartEventListeners = bindStartEvents();
  }
  registrations.add(registration);
  registration.onRegister({
    isDragging: cleanupEndEventListeners !== null
  });
  return function unregister() {
    registrations.delete(registration);
    if (registrations.size === 0) {
      var _cleanupStartEventLis;
      (_cleanupStartEventLis = cleanupStartEventListeners) === null || _cleanupStartEventLis === void 0 || _cleanupStartEventLis();
      cleanupStartEventListeners = null;
    }
  };
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/shared-schedule.js
var delayId = null;
function clearScheduled() {
  if (delayId != null) {
    window.clearTimeout(delayId);
    delayId = null;
  }
}
function scheduleTimeout(fn2, delay) {
  clearScheduled();
  delayId = window.setTimeout(function() {
    delayId = null;
    fn2();
  }, delay);
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/tooltip-manager.js
var active = null;
function show(entry) {
  var phase = "waiting-to-show";
  function isActive() {
    return Boolean(active && active.entry === entry);
  }
  function cleanup() {
    if (isActive()) {
      clearScheduled();
      active = null;
    }
  }
  function done() {
    if (isActive()) {
      entry.done();
    }
    phase = "done";
    cleanup();
  }
  function immediatelyHideAndDone() {
    if (isActive()) {
      entry.hide({
        isImmediate: true
      });
    }
    done();
  }
  function keep() {
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-hide") {
      phase = "shown";
      clearScheduled();
      return;
    }
    if (phase === "hide-animating") {
      phase = "shown";
      clearScheduled();
      entry.show({
        isImmediate: false
      });
      return;
    }
  }
  function requestHide(_ref) {
    var isImmediate = _ref.isImmediate;
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-show") {
      immediatelyHideAndDone();
      return;
    }
    if (phase === "waiting-to-hide") {
      return;
    }
    if (isImmediate) {
      immediatelyHideAndDone();
      return;
    }
    phase = "waiting-to-hide";
    scheduleTimeout(function() {
      phase = "hide-animating";
      entry.hide({
        isImmediate: false
      });
    }, entry.delay);
  }
  function finishHideAnimation() {
    if (isActive() && phase === "hide-animating") {
      done();
    }
  }
  function isVisible() {
    return phase === "shown" || phase === "waiting-to-hide" || phase === "hide-animating";
  }
  function getInitialMouse() {
    if (entry.source.type === "mouse") {
      return entry.source.mouse;
    }
    return null;
  }
  function start2() {
    var showImmediately = Boolean(active && active.isVisible());
    if (active) {
      clearScheduled();
      active.entry.hide({
        isImmediate: true
      });
      active.entry.done();
      active = null;
    }
    active = {
      entry,
      isVisible
    };
    function show2() {
      phase = "shown";
      entry.show({
        isImmediate: showImmediately
      });
    }
    if (showImmediately) {
      show2();
      return;
    }
    phase = "waiting-to-show";
    scheduleTimeout(show2, entry.delay);
  }
  start2();
  var result = {
    keep,
    abort: cleanup,
    isActive,
    requestHide,
    finishHideAnimation,
    mousePosition: getInitialMouse()
  };
  return result;
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/use-unique-id.js
function useUniqueId2(prefix, shouldRenderId) {
  var seed = useIdSeed();
  return shouldRenderId ? "".concat(seed(prefix)) : void 0;
}

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.js
init_defineProperty();
var React18 = __toESM(require_react());
import "/Users/mjerkovic/Documents/GitHub/ads-vibecode/node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.compiled.css";
var import_react33 = __toESM(require_react());

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-primitive.js
init_defineProperty();
var import_react31 = __toESM(require_react());
init_emotion_react_browser_development_esm();
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var VAR_PRIMITIVE_ZINDEX = "tooltipPrimitiveZindex";
var primitiveStyles = css({
  zindex: "var(".concat(VAR_PRIMITIVE_ZINDEX, ")"),
  cursor: "default"
});
var TooltipPrimitive = (0, import_react31.forwardRef)(function TooltipPrimitive2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  var styleWithZIndex = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, VAR_PRIMITIVE_ZINDEX, layers.tooltip()));
  return jsx("div", {
    ref,
    style: styleWithZIndex,
    "data-testid": testId ? "".concat(testId, "--wrapper") : void 0
  }, jsx("div", {
    role: "tooltip",
    className,
    onMouseOut,
    onMouseOver,
    css: primitiveStyles,
    "data-placement": placement,
    "data-testid": testId,
    id
  }, children));
});
TooltipPrimitive.displayName = "TooltipPrimitive";
var tooltip_primitive_default = TooltipPrimitive;

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var TooltipContainer = (0, import_react33.forwardRef)(function TooltipContainer2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, truncate = _ref.truncate, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  return React18.createElement(tooltip_primitive_default, {
    ref,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax(["_2rko1sit _11c8dcr7 _vchhusvi _p12fp3fh _bfhkpioe _syaz1i9p _152tze3t _1e02ze3t _1i4q1hna _85i5v77o _1q51v77o _y4ti12x7 _bozg12x7 _slp31hna", truncate && "_1reo15vq _18m915vq _p12f1pna _1bto1l2s _o5721q9c", className]),
    placement,
    testId,
    id,
    onMouseOut,
    onMouseOver,
    style: _objectSpread2(_objectSpread2({}, style), {}, {
      "--_yr7xfv": cssCustomPropertyValue("var(--ds-background-neutral-bold, ".concat(N800, ")")),
      "--_ywovvi": cssCustomPropertyValue("var(--ds-text-inverse, ".concat(N0, ")"))
    })
  }, children);
});
TooltipContainer.displayName = "TooltipContainer";
var tooltip_container_default = TooltipContainer;

// node_modules/@atlaskit/tooltip/dist/esm/utilities.js
function getMousePosition(mouseCoordinates) {
  var safeMouse = mouseCoordinates || {
    top: 0,
    left: 0
  };
  var getBoundingClientRect2 = function getBoundingClientRect3() {
    return {
      top: safeMouse.top,
      left: safeMouse.left,
      bottom: safeMouse.top,
      right: safeMouse.left,
      width: 0,
      height: 0
    };
  };
  return {
    getBoundingClientRect: getBoundingClientRect2,
    clientWidth: 0,
    clientHeight: 0
  };
}

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var tooltipZIndex = layers.tooltip();
var analyticsAttributes = {
  componentName: "tooltip",
  packageName: "@atlaskit/tooltip",
  packageVersion: "20.0.5"
};
var invertedDirection2 = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var getDirectionFromPlacement = function getDirectionFromPlacement2(placement) {
  return placement.split("-")[0];
};
function Tooltip(_ref) {
  var children = _ref.children, _ref$position = _ref.position, position = _ref$position === void 0 ? "bottom" : _ref$position, _ref$mousePosition = _ref.mousePosition, mousePosition = _ref$mousePosition === void 0 ? "bottom" : _ref$mousePosition, content = _ref.content, _ref$truncate = _ref.truncate, truncate = _ref$truncate === void 0 ? false : _ref$truncate, _ref$component = _ref.component, Container = _ref$component === void 0 ? tooltip_container_default : _ref$component, _ref$tag = _ref.tag, TargetContainer = _ref$tag === void 0 ? "div" : _ref$tag, testId = _ref.testId, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 300 : _ref$delay, _ref$onShow = _ref.onShow, onShow = _ref$onShow === void 0 ? noop : _ref$onShow, _ref$onHide = _ref.onHide, onHide = _ref$onHide === void 0 ? noop : _ref$onHide, canAppear = _ref.canAppear, _ref$hideTooltipOnCli = _ref.hideTooltipOnClick, hideTooltipOnClick = _ref$hideTooltipOnCli === void 0 ? false : _ref$hideTooltipOnCli, _ref$hideTooltipOnMou = _ref.hideTooltipOnMouseDown, hideTooltipOnMouseDown = _ref$hideTooltipOnMou === void 0 ? false : _ref$hideTooltipOnMou, analyticsContext = _ref.analyticsContext, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy, _ref$ignoreTooltipPoi = _ref.ignoreTooltipPointerEvents, ignoreTooltipPointerEvents = _ref$ignoreTooltipPoi === void 0 ? false : _ref$ignoreTooltipPoi, _ref$isScreenReaderAn = _ref.isScreenReaderAnnouncementDisabled, isScreenReaderAnnouncementDisabled = _ref$isScreenReaderAn === void 0 ? false : _ref$isScreenReaderAn;
  var tooltipPosition = position === "mouse" ? mousePosition : position;
  var onShowHandler = usePlatformLeafSyntheticEventHandler(_objectSpread3({
    fn: onShow,
    action: "displayed",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onHideHandler = usePlatformLeafSyntheticEventHandler(_objectSpread3({
    fn: onHide,
    action: "hidden",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var apiRef = (0, import_react34.useRef)(null);
  var _useState = (0, import_react34.useState)("hide"), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var targetRef = (0, import_react34.useRef)(null);
  var containerRef = (0, import_react34.useRef)(null);
  var setImplicitRefFromChildren = function setImplicitRefFromChildren2(node) {
    containerRef.current = node;
    targetRef.current = node ? node.firstElementChild : null;
  };
  var setDirectRef = (0, import_react34.useCallback)(function(node) {
    targetRef.current = node;
  }, []);
  var stableState = useStableRef(state);
  var onShowHandlerStable = useStableRef(onShowHandler);
  var onHideHandlerStable = useStableRef(onHideHandler);
  var delayStable = useStableRef(delay);
  var canAppearStable = useStableRef(canAppear);
  var hasCalledShowHandler = (0, import_react34.useRef)(false);
  var start2 = (0, import_react34.useCallback)(function(api) {
    apiRef.current = api;
    hasCalledShowHandler.current = false;
  }, []);
  var done = (0, import_react34.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    apiRef.current = null;
    hasCalledShowHandler.current = false;
    setState("hide");
  }, [onHideHandlerStable]);
  var abort = (0, import_react34.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    apiRef.current.abort();
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    apiRef.current = null;
  }, [onHideHandlerStable]);
  (0, import_react34.useEffect)(function mount() {
    return function unmount() {
      if (apiRef.current) {
        abort();
      }
    };
  }, [abort]);
  var isDraggingRef = (0, import_react34.useRef)(false);
  (0, import_react34.useEffect)(function() {
    return register({
      onRegister: function onRegister(_ref2) {
        var isDragging = _ref2.isDragging;
        isDraggingRef.current = isDragging;
      },
      onDragStart: function onDragStart2() {
        var _apiRef$current;
        (_apiRef$current = apiRef.current) === null || _apiRef$current === void 0 || _apiRef$current.requestHide({
          isImmediate: true
        });
        isDraggingRef.current = true;
      },
      onDragEnd: function onDragEnd2() {
        isDraggingRef.current = false;
      }
    });
  }, []);
  var tryShowTooltip = (0, import_react34.useCallback)(function(source) {
    var _canAppearStable$curr;
    if (isDraggingRef.current) {
      return;
    }
    if (apiRef.current && !apiRef.current.isActive()) {
      abort();
    }
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
    if (canAppearStable.current && !((_canAppearStable$curr = canAppearStable.current) !== null && _canAppearStable$curr !== void 0 && _canAppearStable$curr.call(canAppearStable))) {
      return;
    }
    var entry = {
      source,
      delay: delayStable.current,
      show: function show2(_ref3) {
        var isImmediate = _ref3.isImmediate;
        if (!hasCalledShowHandler.current) {
          hasCalledShowHandler.current = true;
          onShowHandlerStable.current();
        }
        setState(isImmediate ? "show-immediate" : "fade-in");
      },
      hide: function hide2(_ref4) {
        var isImmediate = _ref4.isImmediate;
        if (isImmediate) {
          setState("hide");
        } else {
          setState("before-fade-out");
        }
      },
      done
    };
    var api = show(entry);
    start2(api);
  }, [canAppearStable, delayStable, done, start2, abort, onShowHandlerStable]);
  var hideTooltipOnEsc = (0, import_react34.useCallback)(function() {
    var _apiRef$current2;
    (_apiRef$current2 = apiRef.current) === null || _apiRef$current2 === void 0 || _apiRef$current2.requestHide({
      isImmediate: true
    });
  }, [apiRef]);
  useCloseOnEscapePress({
    onClose: hideTooltipOnEsc,
    isDisabled: state === "hide" || state === "fade-out"
  });
  (0, import_react34.useEffect)(function() {
    if (state === "hide") {
      return noop;
    }
    if (state === "before-fade-out") {
      setState("fade-out");
    }
    var unbind = (0, import_bind_event_listener4.bind)(window, {
      type: "scroll",
      listener: function listener() {
        if (apiRef.current) {
          apiRef.current.requestHide({
            isImmediate: true
          });
        }
      },
      options: {
        capture: true,
        passive: true,
        once: true
      }
    });
    return unbind;
  }, [state]);
  var onMouseDown = (0, import_react34.useCallback)(function() {
    if (hideTooltipOnMouseDown && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnMouseDown]);
  var onClick = (0, import_react34.useCallback)(function() {
    if (hideTooltipOnClick && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnClick]);
  var onMouseOver = (0, import_react34.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    var source = position === "mouse" ? {
      type: "mouse",
      // TODO: ideally not recalculating this object each time
      mouse: getMousePosition({
        left: event.clientX,
        top: event.clientY
      })
    } : {
      type: "keyboard"
    };
    tryShowTooltip(source);
  }, [position, tryShowTooltip]);
  var onMouseOut = (0, import_react34.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onMouseMove = position === "mouse" ? function(event) {
    var _apiRef$current3;
    if ((_apiRef$current3 = apiRef.current) !== null && _apiRef$current3 !== void 0 && _apiRef$current3.isActive()) {
      apiRef.current.mousePosition = getMousePosition({
        left: event.clientX,
        top: event.clientY
      });
    }
  } : void 0;
  var onMouseOverTooltip = (0, import_react34.useCallback)(function() {
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
  }, []);
  var onFocus = (0, import_react34.useCallback)(function() {
    tryShowTooltip({
      type: "keyboard"
    });
  }, [tryShowTooltip]);
  var onBlur = (0, import_react34.useCallback)(function() {
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onAnimationFinished = (0, import_react34.useCallback)(function(transition) {
    if (transition === "exiting" && stableState.current === "fade-out" && apiRef.current) {
      apiRef.current.finishHideAnimation();
    }
  }, [stableState]);
  var CastTargetContainer = TargetContainer;
  var shouldRenderTooltipPopup = state !== "hide" && Boolean(content);
  var shouldRenderHiddenContent = !isScreenReaderAnnouncementDisabled && shouldRenderTooltipPopup;
  var shouldRenderTooltipChildren = state !== "hide" && state !== "fade-out";
  var handleOpenLayerObserverCloseSignal = (0, import_react34.useCallback)(function() {
    var _apiRef$current4;
    (_apiRef$current4 = apiRef.current) === null || _apiRef$current4 === void 0 || _apiRef$current4.requestHide({
      isImmediate: true
    });
  }, []);
  useNotifyOpenLayerObserver({
    // Layer is only visually open if both the tooltip popup (container) and children are rendered.
    isOpen: shouldRenderTooltipPopup && (fg("platform_dst_open_layer_observer_close_layers") ? shouldRenderTooltipChildren : true),
    /**
     * We don't strictly need to provide an onClose callback at this time, as there is
     * already code that handles hiding the tooltip when a drag is started (and the only
     * usage right now is closing all layers when the user resizes the side nav).
     *
     * However, for future-proofing and semantic reasons, it makes sense to close the tooltip
     * whenever the open layer observer requests a close.
     */
    onClose: handleOpenLayerObserverCloseSignal
  });
  var getReferenceElement = function getReferenceElement2() {
    var _apiRef$current5;
    if (position === "mouse" && (_apiRef$current5 = apiRef.current) !== null && _apiRef$current5 !== void 0 && _apiRef$current5.mousePosition) {
      var _apiRef$current6;
      return (_apiRef$current6 = apiRef.current) === null || _apiRef$current6 === void 0 ? void 0 : _apiRef$current6.mousePosition;
    }
    return targetRef.current || void 0;
  };
  var tooltipIdForHiddenContent = useUniqueId2("tooltip", shouldRenderHiddenContent);
  var tooltipTriggerProps = {
    onMouseOver,
    onMouseOut,
    onMouseMove,
    onMouseDown,
    onClick,
    onFocus,
    onBlur
  };
  if (testId) {
    tooltipTriggerProps["data-testid"] = "".concat(testId, "--container");
  }
  var isChildrenAFunction = typeof children === "function";
  (0, import_react34.useEffect)(function() {
    if (isChildrenAFunction) {
      return;
    }
    var target = targetRef.current;
    if (!target || !tooltipIdForHiddenContent) {
      return;
    }
    target.setAttribute("aria-describedby", tooltipIdForHiddenContent);
    return function() {
      return target.removeAttribute("aria-describedby");
    };
  }, [isChildrenAFunction, tooltipIdForHiddenContent]);
  var hiddenContent = shouldRenderHiddenContent ? import_react34.default.createElement("span", {
    "data-testid": testId ? "".concat(testId, "-hidden") : void 0,
    hidden: true,
    id: tooltipIdForHiddenContent
  }, typeof content === "function" ? content({}) : content) : null;
  return import_react34.default.createElement(import_react34.default.Fragment, null, typeof children === "function" ? (
    // once we deprecate the wrapped approach, we can put the aria
    // attribute back into the tooltipTriggerProps and make it required
    // instead of optional in `types`
    import_react34.default.createElement(import_react34.default.Fragment, null, children(_objectSpread3(_objectSpread3({}, tooltipTriggerProps), {}, {
      "aria-describedby": tooltipIdForHiddenContent,
      ref: setDirectRef
    })), hiddenContent)
  ) : import_react34.default.createElement(CastTargetContainer, _extends({}, tooltipTriggerProps, {
    ref: setImplicitRefFromChildren,
    role: "presentation"
  }), children, hiddenContent), shouldRenderTooltipPopup ? import_react34.default.createElement(Portal, {
    zIndex: tooltipZIndex
  }, import_react34.default.createElement(Popper2, {
    placement: tooltipPosition,
    referenceElement: getReferenceElement(),
    strategy
  }, function(_ref5) {
    var ref = _ref5.ref, style = _ref5.style, update = _ref5.update, placement = _ref5.placement;
    var direction = position === "mouse" ? void 0 : invertedDirection2[getDirectionFromPlacement(placement)];
    return import_react34.default.createElement(exiting_persistence_default, {
      appear: true
    }, shouldRenderTooltipChildren && import_react34.default.createElement(fade_in_default, {
      distance: "constant",
      entranceDirection: direction,
      exitDirection: direction,
      onFinish: onAnimationFinished,
      duration: state !== "show-immediate" ? "medium" : "none"
    }, function(_ref6) {
      var className = _ref6.className;
      return import_react34.default.createElement(Container, {
        ref,
        className: "Tooltip ".concat(className),
        style: _objectSpread3(_objectSpread3({}, style), ignoreTooltipPointerEvents && {
          pointerEvents: "none"
        }),
        truncate,
        placement: tooltipPosition,
        testId: getReferenceElement() ? testId : testId && "".concat(testId, "--unresolved"),
        onMouseOut,
        onMouseOver: onMouseOverTooltip
      }, typeof content === "function" ? content({
        update
      }) : content);
    }));
  })) : null);
}
Tooltip.displayName = "Tooltip";
var tooltip_default = Tooltip;

export {
  useNotifyOpenLayerObserver,
  Manager,
  Reference,
  Popper2 as Popper,
  Portal,
  useAutoFocus,
  KEY_UP,
  KEY_DOWN,
  KEY_HOME,
  KEY_END,
  KEY_TAB,
  KEY_ENTER,
  KEY_SPACE,
  tooltip_default
};
//# sourceMappingURL=chunk-ZGVEQJNH.js.map
