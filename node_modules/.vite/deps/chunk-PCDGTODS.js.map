{
  "version": 3,
  "sources": ["../../@atlaskit/focus-ring/dist/esm/focus-ring.js", "../../@atlaskit/focus-ring/dist/esm/use-focus-ring.js"],
  "sourcesContent": ["/**\n * @jsxRuntime classic\n * @jsx jsx\n */\nimport { Children, cloneElement, memo } from 'react';\n\n// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766\nimport { ClassNames, css, jsx } from '@emotion/react';\nvar BORDER_WIDTH = 2;\nvar baseFocusOutsideStyles = css({\n  outline: \"\".concat(BORDER_WIDTH, \"px solid \", \"var(--ds-border-focused, #2684FF)\"),\n  outlineOffset: BORDER_WIDTH\n});\nvar baseInsetStyles = css({\n  outlineColor: \"var(--ds-border-focused, #2684FF)\",\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\n  outlineOffset: -BORDER_WIDTH,\n  outlineStyle: 'solid',\n  outlineWidth: \"var(--ds-border-width-outline, 2px)\"\n});\nvar focusRingStyles = css({\n  // Focus styles used when :focus-visible isn't supported\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values\n  '&:focus': baseFocusOutsideStyles,\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values\n  '&:focus-visible': baseFocusOutsideStyles,\n  // Remove default focus styles for mouse interactions if :focus-visible is supported\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors\n  '&:focus:not(:focus-visible)': {\n    outline: 'none'\n  },\n  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {\n    '&:focus-visible': {\n      outline: '1px solid'\n    }\n  }\n});\nvar insetFocusRingStyles = css({\n  // Focus styles used when :focus-visible isn't supported\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values\n  '&:focus': baseInsetStyles,\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values\n  '&:focus-visible': baseInsetStyles,\n  // Remove default focus styles for mouse interactions if :focus-visible is supported\n  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors\n  '&:focus:not(:focus-visible)': {\n    outline: 'none'\n  },\n  '@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)': {\n    '&:focus-visible': {\n      outline: '1px solid',\n      // eslint-disable-next-line @atlaskit/design-system/use-tokens-space\n      outlineOffset: '-1px'\n    }\n  }\n});\n\n/**\n * __Focus ring__\n *\n * A focus ring visually indicates the currently focused item.\n *\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/focus-ring)\n *\n * @example\n * ```jsx\n * import FocusRing from '@atlaskit/focus-ring';\n *\n * const InteractiveComponent = () => (\n *   <FocusRing>\n *     <button type=\"button\">Hello</button>\n *   </FocusRing>\n * )\n * ```\n */\nvar FocusRing = /*#__PURE__*/memo(function (_ref) {\n  var children = _ref.children,\n    isInset = _ref.isInset,\n    focus = _ref.focus;\n  var controlledStyles = isInset ? baseInsetStyles : baseFocusOutsideStyles;\n  var uncontrolledStyles = isInset ? insetFocusRingStyles : focusRingStyles;\n  var focusCls = typeof focus === 'undefined' ? uncontrolledStyles : focus === 'on' && controlledStyles;\n  return jsx(ClassNames, null, function (_ref2) {\n    var css = _ref2.css,\n      cx = _ref2.cx;\n    return Children.only(\n    // This may look unwieldy but means we skip applying styles / cloning if no className is applicable\n    focusCls ?\n    /*#__PURE__*/\n    // eslint-disable-next-line @repo/internal/react/no-clone-element\n    cloneElement(children, {\n      className: cx([css(focusCls), children.props.className])\n    }) : children);\n  });\n});\nFocusRing.displayName = 'FocusRing';\nexport default FocusRing;", "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState } from 'react';\n/**\n * __Use focus ring__\n *\n * The useFocusRing hook manages focus in the rare cases where the focus ring’s visual application and the element that takes focus differ.\n * This is not typically a good practice for accessibility, so don’t do this unless you’ve consulted with the accessibility team.\n *\n */\nvar useFocusRing = function useFocusRing() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'off';\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    focusState = _useState2[0],\n    setFocusState = _useState2[1];\n  var focusProps = useRef({\n    onFocus: function onFocus() {\n      return setFocusState('on');\n    },\n    onBlur: function onBlur() {\n      return setFocusState('off');\n    }\n  });\n  return {\n    focusState: focusState,\n    focusProps: focusProps.current\n  };\n};\nexport default useFocusRing;"],
  "mappings": ";;;;;;;;;;;;;;;;;AAIA,mBAA6C;AAG7C;AACA,IAAI,eAAe;AACnB,IAAI,yBAAyB,IAAI;AAAA,EAC/B,SAAS,GAAG,OAAO,cAAc,aAAa,mCAAmC;AAAA,EACjF,eAAe;AACjB,CAAC;AACD,IAAI,kBAAkB,IAAI;AAAA,EACxB,cAAc;AAAA;AAAA,EAEd,eAAe,CAAC;AAAA,EAChB,cAAc;AAAA,EACd,cAAc;AAChB,CAAC;AACD,IAAI,kBAAkB,IAAI;AAAA;AAAA;AAAA,EAGxB,WAAW;AAAA;AAAA,EAEX,mBAAmB;AAAA;AAAA;AAAA,EAGnB,+BAA+B;AAAA,IAC7B,SAAS;AAAA,EACX;AAAA,EACA,qFAAqF;AAAA,IACnF,mBAAmB;AAAA,MACjB,SAAS;AAAA,IACX;AAAA,EACF;AACF,CAAC;AACD,IAAI,uBAAuB,IAAI;AAAA;AAAA;AAAA,EAG7B,WAAW;AAAA;AAAA,EAEX,mBAAmB;AAAA;AAAA;AAAA,EAGnB,+BAA+B;AAAA,IAC7B,SAAS;AAAA,EACX;AAAA,EACA,qFAAqF;AAAA,IACnF,mBAAmB;AAAA,MACjB,SAAS;AAAA;AAAA,MAET,eAAe;AAAA,IACjB;AAAA,EACF;AACF,CAAC;AAoBD,IAAI,gBAAyB,mBAAK,SAAU,MAAM;AAChD,MAAI,WAAW,KAAK,UAClB,UAAU,KAAK,SACf,QAAQ,KAAK;AACf,MAAI,mBAAmB,UAAU,kBAAkB;AACnD,MAAI,qBAAqB,UAAU,uBAAuB;AAC1D,MAAI,WAAW,OAAO,UAAU,cAAc,qBAAqB,UAAU,QAAQ;AACrF,SAAO,IAAI,YAAY,MAAM,SAAU,OAAO;AAC5C,QAAIA,OAAM,MAAM,KACd,KAAK,MAAM;AACb,WAAO,sBAAS;AAAA;AAAA,MAEhB;AAAA;AAAA,YAGA,2BAAa,UAAU;AAAA,UACrB,WAAW,GAAG,CAACA,KAAI,QAAQ,GAAG,SAAS,MAAM,SAAS,CAAC;AAAA,QACzD,CAAC;AAAA,UAAI;AAAA,IAAQ;AAAA,EACf,CAAC;AACH,CAAC;AACD,UAAU,cAAc;AACxB,IAAO,qBAAQ;;;AChGf;AACA,IAAAC,gBAAiC;",
  "names": ["css", "import_react"]
}
