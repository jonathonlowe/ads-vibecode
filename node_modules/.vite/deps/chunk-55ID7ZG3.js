import {
  require_react
} from "./chunk-2YZST6ER.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@compiled/react/dist/esm/runtime/ax.js
var UNDERSCORE_UNICODE = 95;
var ATOMIC_GROUP_LENGTH = 5;
function ax(classNames) {
  if (classNames.length <= 1 && (!classNames[0] || classNames[0].indexOf(" ") === -1)) {
    return classNames[0] || void 0;
  }
  const atomicGroups = {};
  for (let i = 0; i < classNames.length; i++) {
    const cls = classNames[i];
    if (!cls) {
      continue;
    }
    const groups = cls.split(" ");
    for (let x = 0; x < groups.length; x++) {
      const atomic = groups[x];
      const atomicGroupName = atomic.slice(0, atomic.charCodeAt(0) === UNDERSCORE_UNICODE ? ATOMIC_GROUP_LENGTH : void 0);
      atomicGroups[atomicGroupName] = atomic;
    }
  }
  let str = "";
  for (const key in atomicGroups) {
    const value = atomicGroups[key];
    str += value + " ";
  }
  return str.slice(0, -1);
}

// node_modules/@compiled/react/dist/esm/runtime/css-custom-property.js
function cssCustomPropertyValue(value, suffix, prefix) {
  if (value != void 0) {
    if (suffix) {
      if (prefix) {
        return prefix + value + suffix;
      }
      return value + suffix;
    }
    return value;
  }
  return "var(--c-, )";
}

// node_modules/@compiled/react/dist/esm/runtime/style.js
var import_react2 = __toESM(require_react());

// node_modules/@compiled/react/dist/esm/runtime/is-server-environment.js
var isJsDomEnvironment = () => window.name === "nodejs" || (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent.includes("Node.js")) || (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent.includes("jsdom"));
var isServerEnvironment = () => {
  if (typeof window === "undefined" || typeof process !== "undefined" && process.versions != null && process.versions.node != null) {
    return true;
  }
  if (isJsDomEnvironment()) {
    return true;
  }
  return false;
};

// node_modules/@compiled/react/dist/esm/runtime/style-cache.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());
var Cache = isServerEnvironment() ? (0, import_react.createContext)(null) : {};
if (!isServerEnvironment() && typeof document !== "undefined") {
  const ssrStyles = document.querySelectorAll("style[data-cmpld]");
  for (let i = 0; i < ssrStyles.length; i++) {
    document.head.appendChild(ssrStyles[i]);
  }
}

// node_modules/@compiled/react/dist/esm/runtime/ac.js
var UNDERSCORE_UNICODE2 = 95;
var ATOMIC_GROUP_LENGTH2 = 5;
var cache = /* @__PURE__ */ new Map();
var AtomicGroups = class {
  constructor(values) {
    this.values = values;
  }
  toString() {
    let str = "";
    for (const [, value] of this.values) {
      str += value + " ";
    }
    return str.slice(0, -1);
  }
};
function ac(classNames) {
  if (classNames.length <= 1 && !classNames[0])
    return void 0;
  const atomicGroups = /* @__PURE__ */ new Map();
  for (let i = 0; i < classNames.length; i++) {
    const cls = classNames[i];
    if (!cls) {
      continue;
    }
    if (typeof cls === "string") {
      const groups = cls.split(" ");
      for (let x = 0; x < groups.length; x++) {
        const atomic = groups[x];
        const isAtomic = atomic.charCodeAt(0) === UNDERSCORE_UNICODE2;
        const isCompressed = isAtomic && atomic.charCodeAt(5) === UNDERSCORE_UNICODE2;
        const atomicGroupName = isAtomic ? atomic.slice(0, ATOMIC_GROUP_LENGTH2) : atomic;
        atomicGroups.set(atomicGroupName, isCompressed ? atomic.slice(ATOMIC_GROUP_LENGTH2 + 1) : atomic);
      }
    } else {
      for (const [key, value] of cls.values) {
        atomicGroups.set(key, value);
      }
    }
  }
  return new AtomicGroups(atomicGroups);
}
function memoizedAc(classNames) {
  if (classNames.length <= 1 && !classNames[0])
    return void 0;
  let cacheKey = "";
  for (let i = 0; i < classNames.length; i += 1) {
    const current = classNames[i];
    if (!current)
      continue;
    cacheKey += current + " ";
  }
  cacheKey = cacheKey.slice(0, -1);
  if (cache.has(cacheKey))
    return cache.get(cacheKey);
  const result = ac(classNames);
  cache.set(cacheKey, result);
  return result;
}
var ac_default = isServerEnvironment() ? ac : memoizedAc;

// node_modules/@atlaskit/interaction-context/dist/esm/index.js
var import_react3 = __toESM(require_react());
var esm_default = (0, import_react3.createContext)(null);

export {
  ax,
  cssCustomPropertyValue,
  esm_default
};
//# sourceMappingURL=chunk-55ID7ZG3.js.map
