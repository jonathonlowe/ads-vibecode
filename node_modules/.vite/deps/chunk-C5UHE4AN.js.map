{
  "version": 3,
  "sources": ["../../@atlaskit/icon/dist/esm/constants.js", "../../@atlaskit/icon/dist/esm/components/styles.js", "../../@atlaskit/icon/dist/esm/components/utils.js", "../../@atlaskit/icon/dist/esm/components/icon.js", "../../@atlaskit/icon/dist/esm/components/icon-facade.js", "../../@atlaskit/icon/dist/esm/entry-points/base.js", "../../@atlaskit/icon/dist/esm/components/icon-new.js", "../../@atlaskit/icon/dist/esm/entry-points/base-new.js"],
  "sourcesContent": ["export var sizes = {\n  small: '16px',\n  medium: '24px',\n  large: '32px',\n  xlarge: '48px'\n};\nexport var sizeMap = {\n  small: 'small',\n  medium: 'medium',\n  large: 'large',\n  xlarge: 'xlarge'\n};\nexport var dimensions = {\n  small: {\n    width: sizes.small,\n    height: sizes.small\n  },\n  medium: {\n    width: sizes.medium,\n    height: sizes.medium\n  },\n  large: {\n    width: sizes.large,\n    height: sizes.large\n  },\n  xlarge: {\n    width: sizes.xlarge,\n    height: sizes.xlarge\n  }\n};", "import { dimensions } from '../constants';\n// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766\nimport { css } from '@emotion/react';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  }\n};\n\n// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\nvar smallStyles = css(dimensions.small);\n// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\nvar mediumStyles = css(dimensions.medium);\n// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\nvar largeStyles = css(dimensions.large);\n// eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\nvar xlargeStyles = css(dimensions.xlarge);\n\n// pre-built css style-size map\n// eslint-disable-next-line @atlaskit/ui-styling-standard/no-exported-styles -- Ignored via go/DSP-18766\nexport var sizeStyleMap = {\n  small: smallStyles,\n  medium: mediumStyles,\n  large: largeStyles,\n  xlarge: xlargeStyles\n};\n\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n    height = _ref.height,\n    size = _ref.size;\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n  if (size) {\n    return dimensions[size];\n  }\n  return undefined;\n};", "export var getBackground = function getBackground() {\n  return \"var(--ds-surface, #FFFFFF)\";\n};", "import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * @jsxRuntime classic\n * @jsx jsx\n */\nimport { memo } from 'react';\n\n// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766\nimport { css, jsx } from '@emotion/react';\nimport { commonSVGStyles, getIconSize } from './styles';\nimport { getBackground } from './utils';\n\n/**\n * We are hiding these props from consumers as they're used to\n * hack around icon sizing specifically for icon-file-type.\n */\n\nvar iconStyles = css({\n  display: 'inline-block',\n  flexShrink: 0,\n  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography\n  lineHeight: 1,\n  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766\n  '> svg': _objectSpread(_objectSpread({}, commonSVGStyles), {}, {\n    maxWidth: '100%',\n    maxHeight: '100%',\n    color: 'var(--icon-primary-color)',\n    fill: 'var(--icon-secondary-color)',\n    verticalAlign: 'bottom'\n  })\n});\n/**\n * For windows high contrast mode\n */\nvar baseHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766\n    '> svg': {\n      filter: 'grayscale(1)',\n      '--icon-primary-color': 'CanvasText',\n      // foreground\n      '--icon-secondary-color': 'Canvas' // background\n    }\n  }\n});\nvar primaryEqualsSecondaryHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766\n    '> svg': {\n      // if the primaryColor is the same as the secondaryColor we\n      // set the --icon-primary-color to Canvas\n      // this is usually to convey state i.e. Checkbox checked -> not checked\n      '--icon-primary-color': 'Canvas' // foreground\n    }\n  }\n});\nvar secondaryTransparentHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766\n    '> svg': {\n      '--icon-secondary-color': 'transparent' // background\n    }\n  }\n});\n\n/**\n * __Icon__\n *\n * An icon is used as a visual representation of common actions and commands to provide context.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)\n */\nexport var Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _ref = props,\n    Glyph = _ref.glyph,\n    dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n    _ref$primaryColor = _ref.primaryColor,\n    primaryColor = _ref$primaryColor === void 0 ? 'currentColor' : _ref$primaryColor,\n    secondaryColor = _ref.secondaryColor,\n    size = _ref.size,\n    testId = _ref.testId,\n    label = _ref.label,\n    width = _ref.width,\n    height = _ref.height,\n    UNSAFE_margin = _ref.UNSAFE_margin;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: dangerouslySetGlyph\n    }\n  } : {\n    children: Glyph ? jsx(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  var dimensions = getIconSize({\n    width: width,\n    height: height,\n    size: size\n  });\n  return jsx(\"span\", _extends({\n    \"data-testid\": testId,\n    \"data-vc\": \"icon-\".concat(testId),\n    role: label ? 'img' : undefined,\n    \"aria-label\": label ? label : undefined,\n    \"aria-hidden\": label ? undefined : true\n    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766\n    ,\n    style: {\n      '--icon-primary-color': primaryColor,\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766\n      '--icon-secondary-color': secondaryColor || getBackground(),\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766\n      margin: UNSAFE_margin\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766\n    }\n  }, glyphProps, {\n    css: [iconStyles, baseHcmStyles, primaryColor === secondaryColor && primaryEqualsSecondaryHcmStyles, secondaryColor === 'transparent' && secondaryTransparentHcmStyles,\n    // NB: This can be resolved if this component, composes base SVG / and/or skeleton\n    // We could then simplify how common styles are dealt with simply by encapsulating them\n    // at their appropriate level and/or having a singular approach to css variables in the package\n    dimensions &&\n    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766\n    css({\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\n      width: dimensions.width,\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\n      height: dimensions.height,\n      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766\n      '> svg': dimensions\n    })]\n  }));\n});\nexport default Icon;", "import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"dangerouslySetGlyph\"];\nimport React, { memo } from 'react';\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport { Icon as LegacyIcon } from './icon';\nvar sizeSpacingMap = {\n  utility: {\n    small: 'compact',\n    medium: 'spacious'\n  },\n  core: {\n    small: 'none',\n    medium: 'spacious'\n  }\n};\n\n/**\n * `IconFacade` is a component that conditionally renders either a new or legacy icon based on a feature flag.\n *\n * @param {IconFacadeProps} props - The props for the IconFacade component. Includes properties for configuring\n * the icon such as `size`, `spacing`, `primaryColor`, `iconType`, and potentially others depending on the icon.\n * `dangerouslySetGlyph` is a prop specific to the legacy icon component for setting the icon glyph directly.\n * @returns A React element representing either the new or legacy icon based on the feature flag and icon size.\n */\nexport var IconFacade = /*#__PURE__*/memo(function IconFacade(_ref) {\n  var _props$size;\n  var dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var NewIcon = props.newIcon;\n\n  // By default, the icon size will be medium for core icons and small for utility icons\n  var size = (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : 'medium';\n  var useNewIcon = !props.isFacadeDisabled &&\n  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix\n  fg('platform-visual-refresh-icons-legacy-facade');\n  if (useNewIcon && NewIcon && (size === 'small' || size === 'medium')) {\n    if (props.iconType === 'utility') {\n      var Icon = NewIcon;\n      return /*#__PURE__*/React.createElement(Icon, _extends({}, props, {\n        spacing: fg('platform-visual-refresh-icons-facade-button-fix') ? sizeSpacingMap['utility'][size] : 'none',\n        color: props.primaryColor || 'currentColor',\n        type: props.iconType\n      }));\n    } else {\n      var _Icon = NewIcon;\n      return /*#__PURE__*/React.createElement(_Icon, _extends({}, props, {\n        spacing: sizeSpacingMap['core'][size],\n        color: props.primaryColor || 'currentColor',\n        type: props.iconType\n      }));\n    }\n  }\n  return /*#__PURE__*/React.createElement(LegacyIcon, _extends({\n    dangerouslySetGlyph: dangerouslySetGlyph\n  }, props));\n});", "export { default, Icon } from '../components/icon';\nexport { IconFacade } from '../components/icon-facade';", "/**\n * @jsxRuntime classic\n * @jsx jsx\n */\nimport { memo } from 'react';\n\n// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766\nimport { css, jsx } from '@emotion/react';\nimport { fg } from '@atlaskit/platform-feature-flags';\n\n/**\n * We are hiding this props from consumers as it's reserved\n * for use by Icon Tile.\n */\n\nvar commonSVGStyles = css({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766\n  stop: {\n    stopColor: 'currentColor'\n  }\n});\nvar svgStyles = css({\n  color: 'currentColor',\n  verticalAlign: 'bottom'\n});\nvar iconStyles = css({\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  flexShrink: 0,\n  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography\n  lineHeight: 1,\n  paddingInlineEnd: 'var(--ds--button--new-icon-padding-end, 0)',\n  paddingInlineStart: 'var(--ds--button--new-icon-padding-start, 0)'\n});\nvar utilityIconStyles = css({\n  // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography\n  lineHeight: \"var(--ds-space-150, 12px)\"\n});\nvar scaleStyles = css({\n  width: 'inherit',\n  height: 'inherit'\n});\n\n/**\n * For windows high contrast mode\n */\nvar baseHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    color: 'CanvasText',\n    filter: 'grayscale(1)'\n  }\n});\nvar scaleSize = css({\n  width: 'inherit',\n  height: 'inherit'\n});\nvar sizeMap = {\n  core: {\n    none: css({\n      width: \"var(--ds-space-200, 16px)\",\n      height: \"var(--ds-space-200, 16px)\"\n    }),\n    spacious: css({\n      width: \"var(--ds-space-300, 24px)\",\n      height: \"var(--ds-space-300, 24px)\"\n    })\n  },\n  utility: {\n    none: css({\n      width: \"var(--ds-space-150, 12px)\",\n      height: \"var(--ds-space-150, 12px)\"\n    }),\n    compact: css({\n      width: \"var(--ds-space-200, 16px)\",\n      height: \"var(--ds-space-200, 16px)\"\n    }),\n    spacious: css({\n      width: \"var(--ds-space-300, 24px)\",\n      height: \"var(--ds-space-300, 24px)\"\n    })\n  }\n};\nvar baseSizeMap = {\n  core: 16,\n  utility: 12\n};\nvar paddingMap = {\n  core: {\n    none: 0,\n    spacious: 4\n  },\n  utility: {\n    none: 0,\n    compact: 2,\n    spacious: 6\n  }\n};\n\n/**\n * __Icon__\n *\n * An icon is used as a visual representation of common actions and commands to provide context.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)\n */\nexport var Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _props$type, _props$spacing3, _props$spacing4;\n  var _ref = props,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n    testId = _ref.testId,\n    label = _ref.label,\n    LEGACY_primaryColor = _ref.LEGACY_primaryColor,\n    LEGACY_secondaryColor = _ref.LEGACY_secondaryColor,\n    LEGACY_size = _ref.LEGACY_size,\n    FallbackIcon = _ref.LEGACY_fallbackIcon,\n    dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n    shouldScale = _ref.shouldScale,\n    LEGACY_margin = _ref.LEGACY_margin;\n  var dangerouslySetInnerHTML = dangerouslySetGlyph ? {\n    __html: dangerouslySetGlyph\n  } : undefined;\n\n  // Fall back to old icon\n  if (FallbackIcon && !fg('platform-visual-refresh-icons')) {\n    // parse out unnecessary props\n    return jsx(FallbackIcon, {\n      primaryColor: LEGACY_primaryColor !== null && LEGACY_primaryColor !== void 0 ? LEGACY_primaryColor : color,\n      secondaryColor: LEGACY_secondaryColor,\n      size: LEGACY_size,\n      label: label,\n      testId: testId\n      // @ts-ignore-next-line\n      ,\n      UNSAFE_margin: LEGACY_margin\n    });\n  }\n  var baseSize = baseSizeMap[(_props$type = props.type) !== null && _props$type !== void 0 ? _props$type : 'core'];\n  var viewBoxPadding;\n  if (props.type === 'utility') {\n    var _props$spacing;\n    viewBoxPadding = paddingMap[props.type][(_props$spacing = props.spacing) !== null && _props$spacing !== void 0 ? _props$spacing : 'none'];\n  } else {\n    var _props$spacing2;\n    viewBoxPadding = paddingMap['core'][(_props$spacing2 = props.spacing) !== null && _props$spacing2 !== void 0 ? _props$spacing2 : 'none'];\n  }\n  var viewBoxSize = baseSize + 2 * viewBoxPadding;\n  return jsx(\"span\", {\n    \"data-testid\": testId,\n    role: label ? 'img' : undefined,\n    \"aria-label\": label ? label : undefined,\n    \"aria-hidden\": label ? undefined : true,\n    style: {\n      color: color\n    },\n    css: [iconStyles, baseHcmStyles, shouldScale && scaleStyles, props.type === 'utility' && utilityIconStyles]\n  }, jsx(\"svg\", {\n    fill: \"none\"\n    // Adjusting the viewBox allows the icon padding to scale with the contents of the SVG, which\n    // we want for Icon Tile\n    ,\n    viewBox: \"\".concat(0 - viewBoxPadding, \" \").concat(0 - viewBoxPadding, \" \").concat(viewBoxSize, \" \").concat(viewBoxSize),\n    role: \"presentation\",\n    css: [commonSVGStyles, svgStyles, shouldScale ? scaleSize : props.type === 'utility' ? sizeMap[props.type][(_props$spacing3 = props.spacing) !== null && _props$spacing3 !== void 0 ? _props$spacing3 : 'none'] : sizeMap['core'][(_props$spacing4 = props.spacing) !== null && _props$spacing4 !== void 0 ? _props$spacing4 : 'none']],\n    dangerouslySetInnerHTML: dangerouslySetInnerHTML\n  }));\n});\nexport default Icon;", "export { default, Icon } from '../components/icon-new';"],
  "mappings": "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",
  "names": ["getIconSize", "getBackground", "r", "import_react", "Icon", "dimensions", "import_react", "IconFacade", "Icon", "React", "import_react", "commonSVGStyles", "iconStyles", "baseHcmStyles", "Icon", "Icon"]
}
