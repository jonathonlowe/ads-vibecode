{
  "version": 3,
  "sources": ["../../@compiled/react/src/runtime/ax.ts", "../../@compiled/react/src/runtime/css-custom-property.ts", "../../@compiled/react/src/runtime/style.tsx", "../../@compiled/react/src/runtime/is-server-environment.ts", "../../@compiled/react/src/runtime/style-cache.tsx", "../../@compiled/react/src/runtime/ac.ts", "../../@atlaskit/interaction-context/dist/esm/index.js"],
  "sourcesContent": ["const UNDERSCORE_UNICODE = 95;\n\n/**\n * This length includes the underscore,\n * e.g. `\"_1s4A\"` would be a valid atomic group hash.\n */\nconst ATOMIC_GROUP_LENGTH = 5;\n\n/**\n * Joins classes together and ensures atomic declarations of a single group exist.\n * Atomic declarations take the form of `_{group}{value}` (always prefixed with an underscore),\n * where both `group` and `value` are hashes **four characters long**.\n * Class names can be of any length,\n * this function can take both atomic declarations and class names.\n *\n * Input:\n *\n * ```\n * ax(['_aaaabbbb', '_aaaacccc'])\n * ```\n *\n * Output:\n *\n * ```\n * '_aaaacccc'\n * ```\n *\n * @param classes\n */\nexport default function ax(classNames: (string | undefined | null | false)[]): string | undefined {\n  if (classNames.length <= 1 && (!classNames[0] || classNames[0].indexOf(' ') === -1)) {\n    // short circuit if there's no custom class names.\n    return classNames[0] || undefined;\n  }\n\n  const atomicGroups: Record<string, string> = {};\n\n  for (let i = 0; i < classNames.length; i++) {\n    const cls = classNames[i];\n    if (!cls) {\n      continue;\n    }\n\n    const groups = cls.split(' ');\n\n    for (let x = 0; x < groups.length; x++) {\n      const atomic = groups[x];\n      const atomicGroupName = atomic.slice(\n        0,\n        atomic.charCodeAt(0) === UNDERSCORE_UNICODE ? ATOMIC_GROUP_LENGTH : undefined\n      );\n      atomicGroups[atomicGroupName] = atomic;\n    }\n  }\n\n  let str = '';\n\n  for (const key in atomicGroups) {\n    const value = atomicGroups[key];\n    str += value + ' ';\n  }\n\n  return str.slice(0, -1);\n}\n", "/**\n * Returns a CSS custom property value with an optional suffix & prefix.\n * Prefix will only be added if there is a suffix.\n * If the value is undefined a fallback value will be returned to prevent children inheriting parent values.\n *\n * @param value\n * @param suffix\n * @param prefix\n */\nexport default function cssCustomPropertyValue(\n  value: string | number | null | undefined,\n  suffix?: string | undefined | null,\n  prefix?: string | undefined | null\n): string | number {\n  if (value != undefined) {\n    if (suffix) {\n      if (prefix) {\n        return prefix + value + suffix;\n      }\n\n      return value + suffix;\n    }\n\n    return value;\n  }\n\n  // Currently React trims these values so we can't use a space \" \" to block the value.\n  // Instead we use a CSS variable that doesn't exist which falls back to \" \".\n  // Bug raised here: https://github.com/facebook/react/issues/20497\n  return 'var(--c-, )';\n}\n", "import React from 'react';\n\nimport { analyzeCssInDev } from './dev-warnings';\nimport { isServerEnvironment } from './is-server-environment';\nimport insertRule, { getStyleBucketName, styleBucketOrdering } from './sheet';\nimport { useCache } from './style-cache';\nimport type { Bucket, StyleSheetOpts } from './types';\n\ninterface StyleProps extends StyleSheetOpts {\n  /**\n   * CSS Rules.\n   * Ensure each rule is a separate element in the array.\n   */\n  children: string[];\n}\n\nexport default function Style(props: StyleProps): JSX.Element | null {\n  const inserted = useCache();\n\n  if (process.env.NODE_ENV === 'development') {\n    props.children.forEach(analyzeCssInDev);\n  }\n\n  if (props.children.length) {\n    if (isServerEnvironment()) {\n      const bucketedSheets: Partial<Record<Bucket, string>> = {};\n      let hasSheets = false;\n\n      for (let i = 0; i < props.children.length; i++) {\n        const sheet = props.children[i];\n        if (inserted[sheet]) {\n          continue;\n        } else {\n          inserted[sheet] = true;\n          hasSheets = true;\n        }\n\n        const bucketName = getStyleBucketName(sheet);\n        bucketedSheets[bucketName] = (bucketedSheets[bucketName] || '') + sheet;\n      }\n\n      if (!hasSheets) {\n        return null;\n      }\n\n      return (\n        <style\n          data-cmpld\n          nonce={props.nonce}\n          dangerouslySetInnerHTML={{\n            __html: styleBucketOrdering.map((bucket) => bucketedSheets[bucket]).join(''),\n          }}\n        />\n      );\n    } else {\n      for (let i = 0; i < props.children.length; i++) {\n        const sheet = props.children[i];\n        if (inserted[sheet]) {\n          continue;\n        }\n\n        inserted[sheet] = true;\n        insertRule(sheet, props);\n      }\n    }\n  }\n\n  return null;\n}\n", "/**\n * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0\n * @see https://github.com/jsdom/jsdom/issues/1537\n */\nconst isJsDomEnvironment = () =>\n  window.name === 'nodejs' ||\n  navigator?.userAgent.includes('Node.js') ||\n  navigator?.userAgent.includes('jsdom');\n/**\n * Returns `true` when inside a node environment,\n * else `false`.\n *\n * When using this it will remove any node code from the browser bundle - for example:\n *\n * ```js\n * if (isServerEnvironment()) {\n *   // This code will be removed from the browser bundle\n * }\n * ```\n */\nexport const isServerEnvironment = (): boolean => {\n  if (\n    typeof window === 'undefined' ||\n    (typeof process !== 'undefined' && process.versions != null && process.versions.node != null)\n  ) {\n    return true;\n  }\n  if (isJsDomEnvironment()) {\n    return true;\n  }\n  return false;\n};\n", "import * as React from 'react';\nimport { createContext, useContext } from 'react';\n\nimport { isCacheDisabled } from './cache';\nimport { isServerEnvironment } from './is-server-environment';\nimport type { ProviderComponent, UseCacheHook } from './types';\n\n/**\n * Cache to hold already used styles.\n * React Context on the server - singleton object on the client.\n */\nconst Cache: any = isServerEnvironment() ? createContext<Record<string, true> | null>(null) : {};\n\nif (!isServerEnvironment() && typeof document !== 'undefined') {\n  /**\n   * Iterates through all found style elements generated when server side rendering.\n   *\n   * @param cb\n   */\n  const ssrStyles = document.querySelectorAll<HTMLStyleElement>('style[data-cmpld]');\n  for (let i = 0; i < ssrStyles.length; i++) {\n    // Move all found server-side rendered style elements to the head before React hydration happens.\n    document.head.appendChild(ssrStyles[i]);\n  }\n}\n\n/**\n * Hook using the cache created on the server or client.\n */\nexport const useCache: UseCacheHook = () => {\n  if (isCacheDisabled()) {\n    return {};\n  }\n\n  if (isServerEnvironment()) {\n    // On the server we use React Context to we don't leak the cache between SSR calls.\n    // During runtime this hook isn't conditionally called - it is at build time that the flow gets decided.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useContext(Cache) || {};\n  }\n\n  // On the client we use the object singleton.\n  return Cache;\n};\n\n/**\n * On the server this ensures the minimal amount of styles will be rendered\n * safely using React Context.\n *\n * On the browser this turns into a fragment with no React Context.\n */\nconst StyleCacheProvider: ProviderComponent = (props) => {\n  if (isServerEnvironment()) {\n    // This code path isn't conditionally called at build time - safe to ignore.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const inserted = useCache();\n    return <Cache.Provider value={inserted}>{props.children}</Cache.Provider>;\n  }\n\n  return props.children as JSX.Element;\n};\n\nexport default StyleCacheProvider;\n", "import { isServerEnvironment } from './is-server-environment';\n\nconst UNDERSCORE_UNICODE = 95;\n\n/**\n * This length includes the underscore,\n * e.g. `\"_1s4A\"` would be a valid atomic group hash.\n */\nconst ATOMIC_GROUP_LENGTH = 5;\n\n/**\n * Memoize the result of ac so if it is called with the same args, it returns immediately.\n * Also, to prevent useless React rerenders\n */\nconst cache = new Map();\n\n/**\n * `ac` returns an instance of AtomicGroups. The instance holds the knowledge of Atomic Group so we can chain `ac`.\n * e.g. <div className={ax([ax(['_aaaa_b']), '_aaaa_c'])} />\n */\nclass AtomicGroups {\n  values: Map<string, string>;\n  constructor(values: Map<string, string>) {\n    // An object stores the relation between Atomic group and actual class name\n    // e.g. { \"aaaa\": \"a\" } `aaaa` is the Atomic group and `a` is the actual class name\n    this.values = values;\n  }\n  toString() {\n    let str = '';\n\n    for (const [, value] of this.values) {\n      str += value + ' ';\n    }\n\n    return str.slice(0, -1);\n  }\n}\n\n/**\n * Joins classes together and ensures atomic declarations of a single group exist.\n * Atomic declarations take the form of `_{group}{value}` (always prefixed with an underscore),\n * where both `group` and `value` are hashes **four characters long**.\n * Class names can be of any length,\n * this function can take both atomic declarations and class names.\n *\n * Input:\n *\n * ```\n * ax(['_aaaabbbb', '_aaaacccc'])\n * ```\n *\n * Output:\n *\n * ```\n * '_aaaacccc'\n * ```\n *\n * @param classes\n */\nexport function ac(\n  classNames: (AtomicGroups | string | null | undefined | false)[]\n): AtomicGroups | undefined {\n  // short circuit if there's no class names.\n  if (classNames.length <= 1 && !classNames[0]) return undefined;\n\n  const atomicGroups: Map<string, string> = new Map();\n\n  for (let i = 0; i < classNames.length; i++) {\n    const cls = classNames[i];\n    if (!cls) {\n      continue;\n    }\n\n    if (typeof cls === 'string') {\n      const groups = cls.split(' ');\n\n      for (let x = 0; x < groups.length; x++) {\n        const atomic = groups[x];\n        const isAtomic = atomic.charCodeAt(0) === UNDERSCORE_UNICODE;\n        const isCompressed = isAtomic && atomic.charCodeAt(5) === UNDERSCORE_UNICODE;\n\n        const atomicGroupName = isAtomic ? atomic.slice(0, ATOMIC_GROUP_LENGTH) : atomic;\n        atomicGroups.set(\n          atomicGroupName,\n          isCompressed ? atomic.slice(ATOMIC_GROUP_LENGTH + 1) : atomic\n        );\n      }\n    } else {\n      // if cls is an instance of AtomicGroups, transfer its values to `atomicGroups`\n      for (const [key, value] of cls.values) {\n        atomicGroups.set(key, value);\n      }\n    }\n  }\n\n  return new AtomicGroups(atomicGroups);\n}\n\nexport function memoizedAc(\n  classNames: (AtomicGroups | string | undefined | false)[]\n): AtomicGroups | undefined {\n  // short circuit if there's no class names.\n  if (classNames.length <= 1 && !classNames[0]) return undefined;\n\n  // build the cacheKey based on the function argument\n  // e.g. if the argument is [\"_aaaabbbb\", \"_aaaa_a\", \"some-class-name\"],\n  // then the cacheKey is \"_aaaabbbb _aaaa_a some-class-name\"\n  let cacheKey = '';\n  for (let i = 0; i < classNames.length; i += 1) {\n    const current = classNames[i];\n    // continue if current is undefined, false, or \"\"\n    if (!current) continue;\n    cacheKey += current + ' ';\n  }\n\n  cacheKey = cacheKey.slice(0, -1);\n\n  if (cache.has(cacheKey)) return cache.get(cacheKey);\n\n  const result = ac(classNames);\n\n  cache.set(cacheKey, result);\n\n  return result;\n}\n\n// Memoization is primarily used to prevent React from unncessary re-rendering.\n// Use unmemoizedAc on server-side because We don't need to worry about re-rendering on server-side.\nexport default isServerEnvironment() ? ac : memoizedAc;\n\n/**\n * Provide an opportunity to clear the cache to prevent memory leak.\n */\nexport function clearCache(): void {\n  cache.clear();\n}\n\n/**\n * Expose cache\n */\nexport function getCache(): typeof cache {\n  return cache;\n}\n", "import { createContext } from 'react';\nexport default /*#__PURE__*/createContext(null);"],
  "mappings": "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",
  "names": ["import_react", "UNDERSCORE_UNICODE", "ATOMIC_GROUP_LENGTH", "import_react"]
}
