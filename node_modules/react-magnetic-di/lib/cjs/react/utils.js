"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addInjectableToMap = addInjectableToMap;
exports.debug = debug;
exports.findInjectable = findInjectable;
exports.getDisplayName = getDisplayName;
exports.removeInjectableFromMap = removeInjectableFromMap;
exports.warnOnce = warnOnce;
var _constants = require("./constants");
var _stats = require("./stats");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var hasWarned = false;
function warnOnce(message) {
  if (!hasWarned) {
    // eslint-disable-next-line no-console
    console.warn('Warning:', message);
    hasWarned = true;
  }
}
function addInjectableToMap(replacementMap, inj) {
  var injObj = _constants.diRegistry.get(inj);
  if (!injObj) {
    throw new Error("Seems like you are trying to use \"".concat(inj, "\" as injectable, but magnetic-di needs the return value of \"injectable()\""));
  }
  if (injObj.track) _stats.stats.set(injObj);
  if (replacementMap.has(injObj.from)) {
    replacementMap.get(injObj.from).add(injObj);
  } else {
    replacementMap.set(injObj.from, new Set([injObj]));
  }
  return replacementMap;
}
function removeInjectableFromMap(replacementMap, inj) {
  var injObj = _constants.diRegistry.get(inj);
  var injectables = replacementMap.get(injObj.from) || new Set();
  if (injectables.size === 1) {
    replacementMap["delete"](injObj.from);
  } else {
    injectables["delete"](injObj);
  }
}
function getDisplayName(Comp) {
  var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var name = Comp.displayName || Comp.name;
  return !name || !wrapper ? name : "".concat(wrapper, "(").concat(name, ")");
}
function debug(fn) {
  var source = fn.toString();
  var _ref = source.match(/const \[[^\]]+\] = .*di.*\(\w+[,\s]+([^)]+)/) || [],
    _ref2 = _slicedToArray(_ref, 2),
    args = _ref2[1];
  return args;
}
function findInjectable(replacementMap, dep, targetChild) {
  var injectables = replacementMap.get(dep);
  if (!injectables) return null;

  // loop all injectables for the dep, with targeted ones preferred
  var anyCandidate = null;
  var targetCandidate = null;
  var _iterator = _createForOfIteratorHelper(injectables),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _inj$targets;
      var inj = _step.value;
      if (!inj.targets) anyCandidate = inj;
      if ((_inj$targets = inj.targets) !== null && _inj$targets !== void 0 && _inj$targets.has(targetChild)) targetCandidate = inj;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var candidate = targetCandidate || anyCandidate;
  _stats.stats.track(candidate);
  return candidate;
}