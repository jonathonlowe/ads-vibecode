"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stats = void 0;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var createState = function createState() {
  return {
    unused: new Map(),
    used: new Set(),
    provided: new Set()
  };
};
var stats = exports.stats = {
  state: createState(),
  set: function set(injObj) {
    var _injObj$value;
    // allow injectable override without flagging as unused
    var _iterator = _createForOfIteratorHelper(this.state.unused.keys()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var unusedInj = _step.value;
        if (unusedInj.from === injObj.from) this.state.unused["delete"](unusedInj);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this.state.unused.set(injObj, new Error("Unused \"di\" injectable: ".concat(((_injObj$value = injObj.value) === null || _injObj$value === void 0 ? void 0 : _injObj$value.displayName) || injObj.value, "."), {
      cause: injObj.cause
    }));
    // reset to avoid potential memory leaks via stack traces
    injObj.cause = null;
  },
  track: function track(inj) {
    if (!inj) return;
    this.state.unused["delete"](inj);
    this.state.used.add(inj);
    this.state.provided.add(inj.from);
  },
  reset: function reset() {
    this.state = createState();
  },
  unused: function unused() {
    return Array.from(this.state.unused.entries()).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        inj = _ref2[0],
        _error = _ref2[1];
      return {
        get: function get() {
          return inj.value;
        },
        error: function error() {
          return _error;
        }
      };
    });
  }
};