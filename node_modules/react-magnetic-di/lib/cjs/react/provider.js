"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiProvider = void 0;
exports.withDi = withDi;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("./constants");
var _context = require("./context");
var _utils = require("./utils");
var _global = require("./global");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DiProvider = exports.DiProvider = /*#__PURE__*/function (_Component) {
  _inherits(DiProvider, _Component);
  var _super = _createSuper(DiProvider);
  function DiProvider() {
    var _this;
    _classCallCheck(this, DiProvider);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.value = undefined;
    return _this;
  }
  _createClass(DiProvider, [{
    key: "componentDidCatch",
    value: function componentDidCatch(err) {
      _global.globalDi._remove(this.props.use);
      throw err;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _global.globalDi._remove(this.props.use);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (this.value) return this.value;
      var _this$props = this.props,
        use = _this$props.use,
        target = _this$props.target,
        global = _this$props.global;
      var _getDependencies = this.context.getDependencies;

      // create a map of dependency real -> replacements for fast lookup
      var replacementMap = use.reduce(function (acc, inj) {
        (0, _utils.addInjectableToMap)(acc, inj);
        return acc;
      }, new Map());
      // supports global di if needed
      _global.globalDi._fromProvider(use, {
        global: global
      });
      // support single or multiple targets
      var targets = target && new WeakSet(Array.isArray(target) ? target : [target]);
      this.value = {
        getDependencies: function getDependencies(realDeps, targetChild) {
          // First we collect dependencies from parent provider(s) (if any)
          var dependencies = _getDependencies(realDeps, targetChild);
          // If no target or target is in the array of targets, map use
          if (!targets || targets.has(targetChild)) {
            for (var i = 0; i < dependencies.length; i++) {
              // dep can be either the original or a replacement
              // if another provider at the top has already swapped it
              // so we check if here we need to inject a different one
              // or return the original / parent replacement
              var dep = dependencies[i];
              var real = _constants.diRegistry.has(dep) ? _constants.diRegistry.get(dep).from : dep;
              var replacedInj = (0, _utils.findInjectable)(replacementMap, real, targetChild);
              if (replacedInj) dependencies[i] = replacedInj.value;
            }
          }
          return dependencies;
        }
      };
      return this.value;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_context.Context.Provider, {
        value: this.getValue()
      }, this.props.children);
    }
  }]);
  return DiProvider;
}(_react.Component);
DiProvider.contextType = _context.Context;
DiProvider.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
  global: _propTypes["default"].bool,
  target: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].arrayOf(_propTypes["default"].func)]),
  use: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].object])).isRequired
};
function withDi(Comp, deps) {
  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var WrappedComponent = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(DiProvider, {
      use: deps,
      target: target
    }, /*#__PURE__*/_react["default"].createElement(Comp, _extends({
      ref: ref
    }, props)));
  });
  WrappedComponent.displayName = (0, _utils.getDisplayName)(Comp, 'withDi');
  return WrappedComponent;
}