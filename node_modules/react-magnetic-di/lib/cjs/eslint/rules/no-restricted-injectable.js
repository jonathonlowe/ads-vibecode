"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var _require = require('../utils'),
  getInjectIdentifier = _require.getInjectIdentifier,
  getImportIdentifiers = _require.getImportIdentifiers;
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'Restrict certain dependencies from being injected',
      category: 'Possible Errors',
      recommended: true
    },
    // fixable: 'code',
    schema: [{
      type: 'object',
      properties: {
        paths: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              name: {
                type: 'string'
              },
              importNames: {
                type: 'array'
              },
              message: {
                type: 'string'
              },
              allowTargeted: {
                type: 'boolean'
              }
            }
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      restricted: 'This dependency should not be injected because too generic, ' + 'not needing mocking or already mocked. {{message}}'
    }
  },
  create: function create(context) {
    var injectIdentifier = null;
    var userOptions = Object.assign({
      paths: []
    }, context.options[0]);
    var restrictedVars = new Map();
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        if (!injectIdentifier) injectIdentifier = getInjectIdentifier(node);
        var _iterator = _createForOfIteratorHelper(userOptions.paths),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var p = _step.value;
            var ids = getImportIdentifiers(node, p.name, p.importNames) || [];
            var _iterator2 = _createForOfIteratorHelper(ids),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var id = _step2.value;
                restrictedVars.set(id.name, {
                  message: p.message || '',
                  allowTargeted: p.allowTargeted
                });
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      'CallExpression[callee.type="Identifier"]': function CallExpressionCalleeTypeIdentifier(node) {
        var _injectIdentifier, _thirdArg$properties;
        if (node.callee.name !== ((_injectIdentifier = injectIdentifier) === null || _injectIdentifier === void 0 ? void 0 : _injectIdentifier.name)) return;
        var _ref = node.arguments || [],
          _ref2 = _slicedToArray(_ref, 3),
          firstArg = _ref2[0],
          thirdArg = _ref2[2];
        var restrictedValue = restrictedVars.get(firstArg === null || firstArg === void 0 ? void 0 : firstArg.name);
        var enabledTarget = (restrictedValue === null || restrictedValue === void 0 ? void 0 : restrictedValue.allowTargeted) && (thirdArg === null || thirdArg === void 0 || (_thirdArg$properties = thirdArg.properties) === null || _thirdArg$properties === void 0 ? void 0 : _thirdArg$properties.some(function (n) {
          var _n$key;
          return (n === null || n === void 0 || (_n$key = n.key) === null || _n$key === void 0 ? void 0 : _n$key.name) === 'target';
        }));
        if (restrictedValue && !enabledTarget) {
          context.report({
            node: node,
            messageId: 'restricted',
            data: {
              message: restrictedValue.message
            }
          });
        }
      }
    };
  }
};