"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var PACKAGE_NAME = 'react-magnetic-di';
var PACKAGE_FUNCTION = 'di';
var INJECT_FUNCTION = 'injectable';
var isDiStatement = function isDiStatement(stm, spec) {
  return stm.type === 'ExpressionStatement' && stm.expression && stm.expression.callee && stm.expression.callee.name === spec.name;
};
var calcImportSource = function calcImportSource(src) {
  var _src$split = src.split('/'),
    _src$split2 = _slicedToArray(_src$split, 2),
    ns = _src$split2[0],
    _src$split2$ = _src$split2[1],
    value = _src$split2$ === void 0 ? '' : _src$split2$;
  return ns.startsWith('@') ? ns + '/' + value : ns;
};
var getImportIdentifiers = function getImportIdentifiers(node, pkgName, impNames) {
  var importSource = calcImportSource(node.source.value);
  var importSpecifiers = node.specifiers.filter(function (s) {
    return s.imported && (!impNames || impNames.includes(s.imported.name));
  });
  if (importSource === pkgName && importSpecifiers.length) {
    return importSpecifiers.map(function (s) {
      return s.local;
    });
  }
  return null;
};
var getDiIdentifier = function getDiIdentifier(n) {
  var _getImportIdentifiers;
  return (_getImportIdentifiers = getImportIdentifiers(n, PACKAGE_NAME, [PACKAGE_FUNCTION])) === null || _getImportIdentifiers === void 0 ? void 0 : _getImportIdentifiers[0];
};
var getInjectIdentifier = function getInjectIdentifier(n) {
  var _getImportIdentifiers2;
  return (_getImportIdentifiers2 = getImportIdentifiers(n, PACKAGE_NAME, [INJECT_FUNCTION])) === null || _getImportIdentifiers2 === void 0 ? void 0 : _getImportIdentifiers2[0];
};
var getDiStatements = function getDiStatements(node, diIdentifier) {
  return (node.body || []).reduce(function (acc, statement) {
    return isDiStatement(statement, diIdentifier) ? acc.concat(statement) : acc;
  }, []);
};
var getParentDiBlock = function getParentDiBlock(node, diIdentifier) {
  // eslint-disable-next-line no-cond-assign
  while (node = node.parent) {
    if (node.type === 'BlockStatement') {
      if (getDiStatements(node, diIdentifier).length) return node;
    }
  }
  return null;
};
var getDiVars = function getDiVars(statements) {
  return statements.reduce(function (acc, s) {
    return acc.concat(s.expression.arguments);
  }, []);
};
module.exports = {
  isDiStatement: isDiStatement,
  getDiIdentifier: getDiIdentifier,
  getImportIdentifiers: getImportIdentifiers,
  getInjectIdentifier: getInjectIdentifier,
  getDiStatements: getDiStatements,
  getParentDiBlock: getParentDiBlock,
  getDiVars: getDiVars
};