import { Action as ActionSchema, AssignAction, CommentAction, DeleteAction, DownloadAction, ReplyAction, ShareAction, SubscribeAction, ViewAction, WatchAction } from 'schema-dts';
export declare namespace JsonLd {
    namespace Primitives {
        type Access = 'granted' | 'forbidden' | 'unauthorized' | 'not_found';
        type Visibility = 'public' | 'restricted' | 'other' | 'not_found';
        type LeafType = 'Object' | 'Link' | 'Collection';
        type ObjectType = 'Collection' | 'Application' | 'Group' | 'Person' | 'Service' | 'Organization' | 'Relationship' | 'Object' | 'Article' | 'Document' | 'Audio' | 'Image' | 'Video' | 'Note' | 'Page' | 'Event' | 'Place' | 'Profile' | 'Tombstone' | 'schema:BlogPosting' | 'schema:TextDigitalDocument' | 'schema:DigitalDocument' | 'schema:PresentationDigitalDocument' | 'schema:SpreadsheetDigitalDocument' | 'schema:Message' | 'atlassian:Project' | 'atlassian:SourceCodeReference' | 'atlassian:SourceCodeRepository' | 'atlassian:SourceCodePullRequest' | 'atlassian:SourceCodeCommit' | 'atlassian:Task' | 'atlassian:UndefinedLink' | 'atlassian:Emoji';
        type LinkType = 'Mention';
        type CollectionType = 'Collection' | 'CollectionPage';
        type Type = ObjectType | LinkType | CollectionType | LeafType;
        interface AuthService {
            key: string;
            displayName: string;
            url: string;
        }
        type Property<T> = T | T[];
        type TypeProperty<ResourceType extends Type, ParentType extends Type = 'Object'> = ResourceType | Array<ParentType | ResourceType>;
        interface Context {
            '@vocab': 'https://www.w3.org/ns/activitystreams#';
            atlassian: 'https://schema.atlassian.com/ns/vocabulary#';
            schema: 'http://schema.org/';
        }
        interface PreviewExtension {
            'atlassian:supportedPlatforms'?: Primitives.Platforms[];
            'atlassian:aspectRatio'?: number;
        }
        interface Object<T = any> {
            '@id'?: string;
            '@type': Property<'Object' | ObjectType>;
            attachment?: Property<Primitives.Object | Primitives.Link>;
            attributedTo?: Property<(Primitives.Object | Primitives.Link) & {
                actor?: Property<Primitives.Object | Primitives.Link>;
            }>;
            audience?: Property<Primitives.Object | Primitives.Link>;
            bcc?: Property<Primitives.Object | Primitives.Link>;
            bto?: Property<Primitives.Object | Primitives.Link>;
            cc?: Property<Primitives.Object | Primitives.Link>;
            context?: Primitives.Object | Primitives.Link;
            generator?: Primitives.Object | Primitives.Link;
            icon?: Image | Primitives.Link;
            image?: Image | Primitives.Link;
            inReplyTo?: Property<Primitives.Object | Primitives.Link>;
            location?: Property<Primitives.Object | Primitives.Link>;
            oneOf?: Array<Primitives.Object | Primitives.Link>;
            anyOf?: Array<Primitives.Object | Primitives.Link>;
            closed?: Primitives.Object | Primitives.Link | string | boolean;
            preview?: string | ((Primitives.LinkModel | Primitives.Object) & PreviewExtension);
            replies?: Collection<T>;
            tag?: Property<Primitives.Object | Primitives.Link>;
            to?: Property<Primitives.Object | Primitives.Link>;
            url?: Property<string | Primitives.Link>;
            content?: string;
            contentMap?: Record<string, string>;
            name?: string;
            nameMap?: Record<string, string>;
            duration?: string;
            mediaType?: string;
            endTime?: string;
            published?: string;
            startTime?: string;
            summary?: string;
            summaryMap?: Record<string, string>;
            updated?: string;
        }
        type Link = string | LinkModel;
        interface LinkModel {
            '@type': 'Link';
            href?: string;
            rel?: Primitives.Link;
            mediaType?: string;
            name?: string;
            nameMap?: Record<string, string>;
            hreflang?: string;
            height?: number;
            width?: number;
            preview?: string | ((Primitives.LinkModel | Primitives.Object) & PreviewExtension);
        }
        interface Activity {
            actor?: Primitives.Object | Primitives.Link;
            object?: Primitives.Object | Primitives.Link;
            target?: Primitives.Object | Primitives.Link;
            result?: Primitives.Object | Primitives.Link;
            origin?: Primitives.Object | Primitives.Link;
            instrument?: Property<Primitives.Object | Primitives.Link>;
        }
        type IntransitiveActivity = Omit<Activity, 'object'>;
        interface Collection<T> {
            totalItems?: number;
            current?: CollectionPage<T> | Primitives.Link;
            first?: CollectionPage<T> | Primitives.Link;
            last?: CollectionPage<T> | Primitives.Link;
            items?: Primitives.Object | Primitives.Link | Array<Primitives.Object | Primitives.Link | T>;
        }
        type OrderedCollection<T> = Collection<T>;
        interface CollectionPage<T = any> extends Collection<T> {
            partOf?: Primitives.Link | Collection<T>;
            next?: CollectionPage<T> | Primitives.Link;
            prev?: CollectionPage<T> | Primitives.Link;
        }
        interface OrderedCollectionPage<T> extends CollectionPage<T> {
            startIndex?: number;
        }
        interface Application<T = any> extends Primitives.Object<T> {
            '@type': TypeProperty<'Application'>;
        }
        interface Group<T = any> extends Primitives.Object<T> {
            '@type': TypeProperty<'Group'>;
        }
        interface Organization<T = any> extends Primitives.Object<T> {
            '@type': TypeProperty<'Organization'>;
        }
        interface Person<T = any> extends Primitives.Object<T> {
            '@type': TypeProperty<'Person'>;
        }
        interface Service<T = any> extends Primitives.Object<T> {
            '@type': TypeProperty<'Service'>;
        }
        interface Relationship extends Primitives.Object {
            '@type': TypeProperty<'Relationship'>;
            subject?: Primitives.Link | Primitives.Object;
            object?: Primitives.Object | Primitives.Link;
            relationship?: Primitives.Object;
        }
        interface Article extends Primitives.Object {
            '@type': TypeProperty<'Article'>;
        }
        interface Document extends Primitives.Object {
            '@type': TypeProperty<'Document'>;
        }
        interface Audio extends Primitives.Object {
            '@type': TypeProperty<'Audio'>;
        }
        interface Image extends Primitives.Object {
            '@type': TypeProperty<'Image'>;
        }
        interface Video extends Primitives.Object {
            '@type': TypeProperty<'Video'>;
        }
        interface Note extends Primitives.Object {
            '@type': TypeProperty<'Note'>;
        }
        interface Page extends Primitives.Object {
            '@type': TypeProperty<'Page'>;
        }
        interface Event extends Primitives.Object {
            '@type': TypeProperty<'Event'>;
        }
        interface Place extends Primitives.Object {
            '@type': TypeProperty<'Place'>;
            accuracy?: number;
            altitude?: number;
            latitude?: number;
            longitude?: number;
            radius?: number;
            units?: 'cm' | 'feet' | 'inches' | 'km' | 'm' | 'miles' | string;
        }
        type Mention = Primitives.Link & {
            '@type': TypeProperty<'Mention', 'Link'>;
        };
        interface Profile extends Primitives.Object {
            '@type': TypeProperty<'Profile'>;
            describes?: Primitives.Object;
        }
        interface Tombstone extends Primitives.Object {
            '@type': TypeProperty<'Tombstone'>;
            formerType?: Primitives.Object;
            deleted?: string;
        }
        type AssignedObjectActions = AssignAction | SubscribeAction;
        interface AssignedObject {
            'atlassian:assignedTo'?: Primitives.Link | Person;
            'atlassian:assignedBy'?: Primitives.Link | Person;
            'atlassian:assigned'?: string;
            'atlassian:subscriber'?: Primitives.Link | Person;
            'atlassian:subscriberCount'?: number;
        }
        type PreviewAction = ActionSchema & {
            '@type': 'PreviewAction';
        };
        type AtlassianActionSchema = PreviewAction;
        type ClientAction = DownloadAction | ViewAction | AtlassianActionSchema;
        type ServerAction = AssignAction | CommentAction | DeleteAction | ReplyAction | ShareAction | SubscribeAction | WatchAction;
        type Action = ServerAction | ClientAction;
        type Platforms = 'web' | 'mobile';
    }
    namespace Meta {
        interface BaseMeta {
            access: Primitives.Access;
            visibility: Primitives.Visibility;
            auth?: Primitives.AuthService[];
            follow?: boolean;
            [k: string]: any;
        }
        interface Public extends BaseMeta {
            access: 'granted';
            visibility: 'public';
        }
        interface Granted extends BaseMeta {
            access: 'granted';
            visibility: 'restricted';
        }
        interface Unauthorized extends BaseMeta {
            access: 'unauthorized';
            visibility: 'restricted';
        }
        interface PermissionDenied extends BaseMeta {
            access: 'forbidden';
            visibility: 'restricted';
        }
        interface NotFound extends BaseMeta {
            access: 'forbidden';
            visibility: 'not_found';
        }
    }
    namespace Data {
        interface BaseData extends Primitives.Object {
            '@context': Primitives.Context;
            '@type': Primitives.Property<Primitives.ObjectType>;
            'schema:potentialAction'?: Primitives.Property<Primitives.Action>;
            'atlassian:downloadUrl'?: string;
            'atlassian:visitUrl'?: string;
            'atlassian:titlePrefix'?: TitlePrefix;
        }
        interface BaseCollectionData<T extends BaseData> extends Primitives.Collection<T> {
            '@context': Primitives.Context;
            '@type': Primitives.TypeProperty<Primitives.Type, 'Collection'>;
            items: Omit<T, '@context'>[];
        }
        interface BaseCollectionPage<T> extends Primitives.CollectionPage<T> {
            '@context': Primitives.Context;
            '@type': Primitives.TypeProperty<Primitives.Type, 'CollectionPage'>;
        }
        interface TitlePrefix extends Primitives.Object {
            text: string;
            '@type': Primitives.Property<Primitives.ObjectType>;
        }
        type DocumentAction = DeleteAction | ViewAction | DownloadAction | ShareAction | CommentAction | WatchAction;
        type DocumentParentType = 'Object' | 'Document';
        type DocumentChildType = 'schema:BlogPosting' | 'schema:TextDigitalDocument' | 'schema:DigitalDocument' | 'schema:PresentationDigitalDocument' | 'schema:SpreadsheetDigitalDocument' | 'atlassian:UndefinedLink' | 'Collection';
        interface Document extends BaseData {
            '@type': Primitives.TypeProperty<'Document', 'Object'> | Primitives.TypeProperty<DocumentChildType, DocumentParentType> | Primitives.TypeProperty<'schema:DigitalDocument', 'Document'>;
            'schema:fileFormat'?: string;
            'atlassian:fileSize'?: number;
            'schema:dateCreated'?: string;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'schema:commentCount'?: number;
            'atlassian:isDeleted'?: boolean;
            'schema:potentialAction'?: Primitives.Property<DocumentAction>;
            'atlassian:dateViewed'?: string;
            'atlassian:reactCount'?: number;
            'atlassian:state'?: string;
            'atlassian:viewCount'?: number;
            'atlassian:voteCount'?: number;
        }
        interface BlogPostDocument extends Document {
            '@type': Primitives.TypeProperty<'schema:BlogPosting', DocumentParentType>;
        }
        interface PresentationDocument extends Document {
            '@type': Primitives.TypeProperty<'schema:PresentationDigitalDocument', DocumentParentType>;
        }
        interface SpreadSheetDocument extends Document {
            '@type': Primitives.TypeProperty<'schema:SpreadsheetDigitalDocument', DocumentParentType>;
        }
        type Template = Document;
        interface TextDocument extends Document {
            '@type': Primitives.TypeProperty<'schema:TextDigitalDocument', DocumentParentType>;
        }
        type DocumentFolder = BaseCollectionData<Document>;
        type DocumentFolderPaged = BaseCollectionPage<Document>;
        interface Image extends BaseData, Primitives.Image {
            '@type': 'Image';
        }
        type MessageAction = ReplyAction | DeleteAction | ViewAction;
        interface Message extends BaseData {
            '@type': Primitives.TypeProperty<'schema:Message'>;
            dateSent?: string;
            dateReceived?: string;
            dateRead?: string;
            'atlassian:reactCount'?: number;
            'schema:potentialAction'?: Primitives.Property<MessageAction>;
        }
        type PageAction = ViewAction | DownloadAction | ShareAction | CommentAction | WatchAction;
        interface Page extends Primitives.Page, BaseData {
            '@type': Primitives.Page['@type'];
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'schema:dateCreated': string;
            'schema:commentCount'?: number;
            'schema:potentialAction'?: Primitives.Property<PageAction>;
        }
        interface UndefinedLinkDocument extends Document {
            '@type': Primitives.TypeProperty<'atlassian:UndefinedLink', DocumentParentType>;
        }
        interface Project extends BaseData {
            '@type': Primitives.TypeProperty<'atlassian:Project'>;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:isDeleted': boolean;
            'atlassian:member': Primitives.Link | Primitives.Person | Primitives.Collection<Primitives.Person>;
            'atlassian:reactCount'?: number;
            'schema:dateCreated': string;
            'schema:commentCount'?: number;
            'atlassian:state'?: string;
        }
        interface SourceCodeDocument extends Document {
            'schema:programmingLanguage'?: string;
            'schema:codeSampleType'?: string;
            'schema:targetProduct'?: string;
            'schema:runtimePlatform'?: string;
            'schema:potentialAction'?: Primitives.Property<DocumentAction>;
        }
        type SourceCodeCommitAction = DeleteAction | ViewAction | WatchAction;
        interface SourceCodeCommit extends BaseData {
            '@type': Primitives.TypeProperty<'atlassian:SourceCodeCommit'>;
            'atlassian:committedBy': Primitives.Link | Primitives.Person;
            'atlassian:parent'?: Primitives.Property<Primitives.Object | Primitives.Link>;
            'schema:dateCreated': string;
            'schema:commentCount'?: number;
            'schema:programmingLanguage'?: string;
            'schema:potentialAction'?: Primitives.Property<SourceCodeCommitAction>;
        }
        type SourceCodePullRequestAction = DeleteAction | ViewAction | DownloadAction | WatchAction;
        interface SourceCodePullRequest extends BaseData {
            '@type': Primitives.TypeProperty<'atlassian:SourceCodePullRequest'>;
            'atlassian:internalId'?: string;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:state': string | Primitives.Link | Primitives.Object;
            'atlassian:mergeSource'?: Partial<SourceCodeCommit> | Partial<SourceCodeReference> | Primitives.Link;
            'atlassian:mergeDestination'?: Partial<SourceCodeCommit> | Partial<SourceCodeReference> | Primitives.Link;
            'atlassian:mergeCommit'?: Partial<SourceCodeCommit> | Primitives.Link;
            'atlassian:mergeable'?: boolean;
            'atlassian:isMerged': boolean;
            'atlassian:merged'?: string;
            'atlassian:mergedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:reviewer'?: Array<Primitives.Link | Primitives.Person>;
            'atlassian:reviewedBy'?: Array<Primitives.Link | Primitives.Person>;
            'atlassian:voteCount'?: number;
            'schema:dateCreated': string;
            'schema:programmingLanguage'?: string;
            'schema:potentialAction'?: Primitives.Property<SourceCodePullRequestAction>;
        }
        type SourceCodeReferenceAction = DownloadAction | DeleteAction | ViewAction;
        interface SourceCodeReference extends BaseData {
            '@type': Primitives.TypeProperty<'atlassian:SourceCodeReference'>;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:commit': Partial<SourceCodeCommit> | Primitives.Link;
            'schema:dateCreated'?: string;
            'schema:programmingLanguage'?: string;
            'schema:potentialAction'?: Primitives.Property<SourceCodeReferenceAction>;
        }
        type SourceCodeRepositoryAction = DeleteAction | ViewAction | DownloadAction | WatchAction;
        interface SourceCodeRepository extends BaseData {
            '@type': Primitives.TypeProperty<'atlassian:SourceCodeRepository'>;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:subscriber'?: Primitives.Link | Primitives.Person;
            'atlassian:subscriberCount': number;
            'atlassian:viewCount'?: number;
            'atlassian:voteCount'?: number;
            'schema:dateCreated': string;
            'schema:programmingLanguage'?: string;
            'schema:potentialAction'?: Primitives.Property<SourceCodeRepositoryAction>;
            'atlassian:latestCommit'?: Partial<SourceCodeCommit> | Primitives.Link;
        }
        type TaskAction = Primitives.AssignedObjectActions;
        interface Task extends BaseData, Primitives.AssignedObject {
            '@type': Primitives.TypeProperty<'atlassian:Task'>;
            'atlassian:isCompleted'?: boolean;
            'atlassian:completed'?: string;
            'atlassian:isDeleted'?: boolean;
            'atlassian:priority'?: string | Primitives.Object;
            'atlassian:reactCount'?: number;
            'atlassian:taskType'?: TaskType | Primitives.Object | Primitives.Link;
            'atlassian:taskStatus'?: Primitives.Object;
            'atlassian:updatedBy'?: Primitives.Link | Primitives.Person;
            'atlassian:viewCount'?: number;
            'atlassian:voteCount'?: number;
            'schema:commentCount'?: number;
            'schema:dateCreated'?: string;
            'schema:potentialAction'?: Primitives.Property<TaskAction>;
        }
        type TaskTypeAction = Primitives.AssignedObjectActions;
        interface TaskType extends BaseData, Primitives.AssignedObject {
            '@type': Primitives.TypeProperty<'atlassian:Task'>;
            'schema:commentCount'?: number;
            'schema:dateCreated': string;
            'schema:potentialAction'?: Primitives.Property<TaskTypeAction>;
        }
    }
    interface Response<T extends Data.BaseData = Data.BaseData> {
        meta: Meta.BaseMeta;
        data: Data.BaseData | Data.BaseCollectionData<T> | Data.BaseCollectionPage<T> | undefined;
    }
    interface Object<MetaType extends Meta.BaseMeta, DataType extends Data.BaseData> {
        meta: MetaType;
        data: DataType | undefined;
    }
    interface Collection<MetaType extends Meta.BaseMeta = Meta.BaseMeta, ResourceType extends Data.BaseData = Data.BaseData, DataType = Data.BaseCollectionData<ResourceType>> {
        meta: MetaType;
        data: DataType | undefined;
    }
}
//# sourceMappingURL=jsonld.d.ts.map